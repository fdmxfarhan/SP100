
NX7_PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000114c8  080001d0  080001d0  000101d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08011698  08011698  00021698  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011afc  08011afc  000301e8  2**0
                  CONTENTS
  4 .ARM          00000000  08011afc  08011afc  000301e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08011afc  08011afc  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011afc  08011afc  00021afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011b00  08011b00  00021b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08011b04  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e8  200001e8  08011cec  000301e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d0  08011cec  000305d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d136  00000000  00000000  00030211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004559  00000000  00000000  0004d347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001818  00000000  00000000  000518a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001638  00000000  00000000  000530b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016566  00000000  00000000  000546f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fdc7  00000000  00000000  0006ac56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00078a75  00000000  00000000  0008aa1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00103492  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077b4  00000000  00000000  001034e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08011680 	.word	0x08011680

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	08011680 	.word	0x08011680

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	3c01      	subs	r4, #1
 800035c:	bf28      	it	cs
 800035e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000362:	d2e9      	bcs.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpun>:
 8000acc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad4:	d102      	bne.n	8000adc <__aeabi_dcmpun+0x10>
 8000ad6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ada:	d10a      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000adc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x20>
 8000ae6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_dcmpun+0x26>
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0001 	mov.w	r0, #1
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2iz>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d215      	bcs.n	8000b2e <__aeabi_d2iz+0x36>
 8000b02:	d511      	bpl.n	8000b28 <__aeabi_d2iz+0x30>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d912      	bls.n	8000b34 <__aeabi_d2iz+0x3c>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d105      	bne.n	8000b40 <__aeabi_d2iz+0x48>
 8000b34:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	bf08      	it	eq
 8000b3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_d2f>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b50:	bf24      	itt	cs
 8000b52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b5a:	d90d      	bls.n	8000b78 <__aeabi_d2f+0x30>
 8000b5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b7c:	d121      	bne.n	8000bc2 <__aeabi_d2f+0x7a>
 8000b7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b82:	bfbc      	itt	lt
 8000b84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	4770      	bxlt	lr
 8000b8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b92:	f1c2 0218 	rsb	r2, r2, #24
 8000b96:	f1c2 0c20 	rsb	ip, r2, #32
 8000b9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	f040 0001 	orrne.w	r0, r0, #1
 8000ba8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb4:	ea40 000c 	orr.w	r0, r0, ip
 8000bb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc0:	e7cc      	b.n	8000b5c <__aeabi_d2f+0x14>
 8000bc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc6:	d107      	bne.n	8000bd8 <__aeabi_d2f+0x90>
 8000bc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bcc:	bf1e      	ittt	ne
 8000bce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bd6:	4770      	bxne	lr
 8000bd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_frsub>:
 8000be8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bec:	e002      	b.n	8000bf4 <__addsf3>
 8000bee:	bf00      	nop

08000bf0 <__aeabi_fsub>:
 8000bf0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bf4 <__addsf3>:
 8000bf4:	0042      	lsls	r2, r0, #1
 8000bf6:	bf1f      	itttt	ne
 8000bf8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bfc:	ea92 0f03 	teqne	r2, r3
 8000c00:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c04:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c08:	d06a      	beq.n	8000ce0 <__addsf3+0xec>
 8000c0a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c0e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c12:	bfc1      	itttt	gt
 8000c14:	18d2      	addgt	r2, r2, r3
 8000c16:	4041      	eorgt	r1, r0
 8000c18:	4048      	eorgt	r0, r1
 8000c1a:	4041      	eorgt	r1, r0
 8000c1c:	bfb8      	it	lt
 8000c1e:	425b      	neglt	r3, r3
 8000c20:	2b19      	cmp	r3, #25
 8000c22:	bf88      	it	hi
 8000c24:	4770      	bxhi	lr
 8000c26:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c2a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c2e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c32:	bf18      	it	ne
 8000c34:	4240      	negne	r0, r0
 8000c36:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c3a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c3e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c42:	bf18      	it	ne
 8000c44:	4249      	negne	r1, r1
 8000c46:	ea92 0f03 	teq	r2, r3
 8000c4a:	d03f      	beq.n	8000ccc <__addsf3+0xd8>
 8000c4c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c50:	fa41 fc03 	asr.w	ip, r1, r3
 8000c54:	eb10 000c 	adds.w	r0, r0, ip
 8000c58:	f1c3 0320 	rsb	r3, r3, #32
 8000c5c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c60:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	d502      	bpl.n	8000c6c <__addsf3+0x78>
 8000c66:	4249      	negs	r1, r1
 8000c68:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c6c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c70:	d313      	bcc.n	8000c9a <__addsf3+0xa6>
 8000c72:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c76:	d306      	bcc.n	8000c86 <__addsf3+0x92>
 8000c78:	0840      	lsrs	r0, r0, #1
 8000c7a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c7e:	f102 0201 	add.w	r2, r2, #1
 8000c82:	2afe      	cmp	r2, #254	; 0xfe
 8000c84:	d251      	bcs.n	8000d2a <__addsf3+0x136>
 8000c86:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c8e:	bf08      	it	eq
 8000c90:	f020 0001 	biceq.w	r0, r0, #1
 8000c94:	ea40 0003 	orr.w	r0, r0, r3
 8000c98:	4770      	bx	lr
 8000c9a:	0049      	lsls	r1, r1, #1
 8000c9c:	eb40 0000 	adc.w	r0, r0, r0
 8000ca0:	3a01      	subs	r2, #1
 8000ca2:	bf28      	it	cs
 8000ca4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ca8:	d2ed      	bcs.n	8000c86 <__addsf3+0x92>
 8000caa:	fab0 fc80 	clz	ip, r0
 8000cae:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cb2:	ebb2 020c 	subs.w	r2, r2, ip
 8000cb6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cba:	bfaa      	itet	ge
 8000cbc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cc0:	4252      	neglt	r2, r2
 8000cc2:	4318      	orrge	r0, r3
 8000cc4:	bfbc      	itt	lt
 8000cc6:	40d0      	lsrlt	r0, r2
 8000cc8:	4318      	orrlt	r0, r3
 8000cca:	4770      	bx	lr
 8000ccc:	f092 0f00 	teq	r2, #0
 8000cd0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cd4:	bf06      	itte	eq
 8000cd6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cda:	3201      	addeq	r2, #1
 8000cdc:	3b01      	subne	r3, #1
 8000cde:	e7b5      	b.n	8000c4c <__addsf3+0x58>
 8000ce0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ce4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ce8:	bf18      	it	ne
 8000cea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cee:	d021      	beq.n	8000d34 <__addsf3+0x140>
 8000cf0:	ea92 0f03 	teq	r2, r3
 8000cf4:	d004      	beq.n	8000d00 <__addsf3+0x10c>
 8000cf6:	f092 0f00 	teq	r2, #0
 8000cfa:	bf08      	it	eq
 8000cfc:	4608      	moveq	r0, r1
 8000cfe:	4770      	bx	lr
 8000d00:	ea90 0f01 	teq	r0, r1
 8000d04:	bf1c      	itt	ne
 8000d06:	2000      	movne	r0, #0
 8000d08:	4770      	bxne	lr
 8000d0a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d0e:	d104      	bne.n	8000d1a <__addsf3+0x126>
 8000d10:	0040      	lsls	r0, r0, #1
 8000d12:	bf28      	it	cs
 8000d14:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d18:	4770      	bx	lr
 8000d1a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d1e:	bf3c      	itt	cc
 8000d20:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d24:	4770      	bxcc	lr
 8000d26:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d2a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d32:	4770      	bx	lr
 8000d34:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d38:	bf16      	itet	ne
 8000d3a:	4608      	movne	r0, r1
 8000d3c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d40:	4601      	movne	r1, r0
 8000d42:	0242      	lsls	r2, r0, #9
 8000d44:	bf06      	itte	eq
 8000d46:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d4a:	ea90 0f01 	teqeq	r0, r1
 8000d4e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d52:	4770      	bx	lr

08000d54 <__aeabi_ui2f>:
 8000d54:	f04f 0300 	mov.w	r3, #0
 8000d58:	e004      	b.n	8000d64 <__aeabi_i2f+0x8>
 8000d5a:	bf00      	nop

08000d5c <__aeabi_i2f>:
 8000d5c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d60:	bf48      	it	mi
 8000d62:	4240      	negmi	r0, r0
 8000d64:	ea5f 0c00 	movs.w	ip, r0
 8000d68:	bf08      	it	eq
 8000d6a:	4770      	bxeq	lr
 8000d6c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d70:	4601      	mov	r1, r0
 8000d72:	f04f 0000 	mov.w	r0, #0
 8000d76:	e01c      	b.n	8000db2 <__aeabi_l2f+0x2a>

08000d78 <__aeabi_ul2f>:
 8000d78:	ea50 0201 	orrs.w	r2, r0, r1
 8000d7c:	bf08      	it	eq
 8000d7e:	4770      	bxeq	lr
 8000d80:	f04f 0300 	mov.w	r3, #0
 8000d84:	e00a      	b.n	8000d9c <__aeabi_l2f+0x14>
 8000d86:	bf00      	nop

08000d88 <__aeabi_l2f>:
 8000d88:	ea50 0201 	orrs.w	r2, r0, r1
 8000d8c:	bf08      	it	eq
 8000d8e:	4770      	bxeq	lr
 8000d90:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d94:	d502      	bpl.n	8000d9c <__aeabi_l2f+0x14>
 8000d96:	4240      	negs	r0, r0
 8000d98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d9c:	ea5f 0c01 	movs.w	ip, r1
 8000da0:	bf02      	ittt	eq
 8000da2:	4684      	moveq	ip, r0
 8000da4:	4601      	moveq	r1, r0
 8000da6:	2000      	moveq	r0, #0
 8000da8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dac:	bf08      	it	eq
 8000dae:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000db2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000db6:	fabc f28c 	clz	r2, ip
 8000dba:	3a08      	subs	r2, #8
 8000dbc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dc0:	db10      	blt.n	8000de4 <__aeabi_l2f+0x5c>
 8000dc2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dcc:	f1c2 0220 	rsb	r2, r2, #32
 8000dd0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dd4:	fa20 f202 	lsr.w	r2, r0, r2
 8000dd8:	eb43 0002 	adc.w	r0, r3, r2
 8000ddc:	bf08      	it	eq
 8000dde:	f020 0001 	biceq.w	r0, r0, #1
 8000de2:	4770      	bx	lr
 8000de4:	f102 0220 	add.w	r2, r2, #32
 8000de8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dec:	f1c2 0220 	rsb	r2, r2, #32
 8000df0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000df4:	fa21 f202 	lsr.w	r2, r1, r2
 8000df8:	eb43 0002 	adc.w	r0, r3, r2
 8000dfc:	bf08      	it	eq
 8000dfe:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e02:	4770      	bx	lr

08000e04 <__aeabi_fmul>:
 8000e04:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e08:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e0c:	bf1e      	ittt	ne
 8000e0e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e12:	ea92 0f0c 	teqne	r2, ip
 8000e16:	ea93 0f0c 	teqne	r3, ip
 8000e1a:	d06f      	beq.n	8000efc <__aeabi_fmul+0xf8>
 8000e1c:	441a      	add	r2, r3
 8000e1e:	ea80 0c01 	eor.w	ip, r0, r1
 8000e22:	0240      	lsls	r0, r0, #9
 8000e24:	bf18      	it	ne
 8000e26:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000e2a:	d01e      	beq.n	8000e6a <__aeabi_fmul+0x66>
 8000e2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000e30:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000e34:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000e38:	fba0 3101 	umull	r3, r1, r0, r1
 8000e3c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e40:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000e44:	bf3e      	ittt	cc
 8000e46:	0049      	lslcc	r1, r1, #1
 8000e48:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000e4c:	005b      	lslcc	r3, r3, #1
 8000e4e:	ea40 0001 	orr.w	r0, r0, r1
 8000e52:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e56:	2afd      	cmp	r2, #253	; 0xfd
 8000e58:	d81d      	bhi.n	8000e96 <__aeabi_fmul+0x92>
 8000e5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e5e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e62:	bf08      	it	eq
 8000e64:	f020 0001 	biceq.w	r0, r0, #1
 8000e68:	4770      	bx	lr
 8000e6a:	f090 0f00 	teq	r0, #0
 8000e6e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e72:	bf08      	it	eq
 8000e74:	0249      	lsleq	r1, r1, #9
 8000e76:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e7a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e7e:	3a7f      	subs	r2, #127	; 0x7f
 8000e80:	bfc2      	ittt	gt
 8000e82:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e86:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e8a:	4770      	bxgt	lr
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	f04f 0300 	mov.w	r3, #0
 8000e94:	3a01      	subs	r2, #1
 8000e96:	dc5d      	bgt.n	8000f54 <__aeabi_fmul+0x150>
 8000e98:	f112 0f19 	cmn.w	r2, #25
 8000e9c:	bfdc      	itt	le
 8000e9e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000ea2:	4770      	bxle	lr
 8000ea4:	f1c2 0200 	rsb	r2, r2, #0
 8000ea8:	0041      	lsls	r1, r0, #1
 8000eaa:	fa21 f102 	lsr.w	r1, r1, r2
 8000eae:	f1c2 0220 	rsb	r2, r2, #32
 8000eb2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000eb6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000eba:	f140 0000 	adc.w	r0, r0, #0
 8000ebe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ec2:	bf08      	it	eq
 8000ec4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ec8:	4770      	bx	lr
 8000eca:	f092 0f00 	teq	r2, #0
 8000ece:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ed2:	bf02      	ittt	eq
 8000ed4:	0040      	lsleq	r0, r0, #1
 8000ed6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000eda:	3a01      	subeq	r2, #1
 8000edc:	d0f9      	beq.n	8000ed2 <__aeabi_fmul+0xce>
 8000ede:	ea40 000c 	orr.w	r0, r0, ip
 8000ee2:	f093 0f00 	teq	r3, #0
 8000ee6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000eea:	bf02      	ittt	eq
 8000eec:	0049      	lsleq	r1, r1, #1
 8000eee:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ef2:	3b01      	subeq	r3, #1
 8000ef4:	d0f9      	beq.n	8000eea <__aeabi_fmul+0xe6>
 8000ef6:	ea41 010c 	orr.w	r1, r1, ip
 8000efa:	e78f      	b.n	8000e1c <__aeabi_fmul+0x18>
 8000efc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f00:	ea92 0f0c 	teq	r2, ip
 8000f04:	bf18      	it	ne
 8000f06:	ea93 0f0c 	teqne	r3, ip
 8000f0a:	d00a      	beq.n	8000f22 <__aeabi_fmul+0x11e>
 8000f0c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f10:	bf18      	it	ne
 8000f12:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f16:	d1d8      	bne.n	8000eca <__aeabi_fmul+0xc6>
 8000f18:	ea80 0001 	eor.w	r0, r0, r1
 8000f1c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f20:	4770      	bx	lr
 8000f22:	f090 0f00 	teq	r0, #0
 8000f26:	bf17      	itett	ne
 8000f28:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000f2c:	4608      	moveq	r0, r1
 8000f2e:	f091 0f00 	teqne	r1, #0
 8000f32:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000f36:	d014      	beq.n	8000f62 <__aeabi_fmul+0x15e>
 8000f38:	ea92 0f0c 	teq	r2, ip
 8000f3c:	d101      	bne.n	8000f42 <__aeabi_fmul+0x13e>
 8000f3e:	0242      	lsls	r2, r0, #9
 8000f40:	d10f      	bne.n	8000f62 <__aeabi_fmul+0x15e>
 8000f42:	ea93 0f0c 	teq	r3, ip
 8000f46:	d103      	bne.n	8000f50 <__aeabi_fmul+0x14c>
 8000f48:	024b      	lsls	r3, r1, #9
 8000f4a:	bf18      	it	ne
 8000f4c:	4608      	movne	r0, r1
 8000f4e:	d108      	bne.n	8000f62 <__aeabi_fmul+0x15e>
 8000f50:	ea80 0001 	eor.w	r0, r0, r1
 8000f54:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f60:	4770      	bx	lr
 8000f62:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f66:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f6a:	4770      	bx	lr

08000f6c <__aeabi_fdiv>:
 8000f6c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f70:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f74:	bf1e      	ittt	ne
 8000f76:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f7a:	ea92 0f0c 	teqne	r2, ip
 8000f7e:	ea93 0f0c 	teqne	r3, ip
 8000f82:	d069      	beq.n	8001058 <__aeabi_fdiv+0xec>
 8000f84:	eba2 0203 	sub.w	r2, r2, r3
 8000f88:	ea80 0c01 	eor.w	ip, r0, r1
 8000f8c:	0249      	lsls	r1, r1, #9
 8000f8e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f92:	d037      	beq.n	8001004 <__aeabi_fdiv+0x98>
 8000f94:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f98:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f9c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000fa0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000fa4:	428b      	cmp	r3, r1
 8000fa6:	bf38      	it	cc
 8000fa8:	005b      	lslcc	r3, r3, #1
 8000faa:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000fae:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000fb2:	428b      	cmp	r3, r1
 8000fb4:	bf24      	itt	cs
 8000fb6:	1a5b      	subcs	r3, r3, r1
 8000fb8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000fbc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000fc0:	bf24      	itt	cs
 8000fc2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000fc6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000fca:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000fce:	bf24      	itt	cs
 8000fd0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000fd4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000fd8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000fdc:	bf24      	itt	cs
 8000fde:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000fe2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000fe6:	011b      	lsls	r3, r3, #4
 8000fe8:	bf18      	it	ne
 8000fea:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000fee:	d1e0      	bne.n	8000fb2 <__aeabi_fdiv+0x46>
 8000ff0:	2afd      	cmp	r2, #253	; 0xfd
 8000ff2:	f63f af50 	bhi.w	8000e96 <__aeabi_fmul+0x92>
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ffc:	bf08      	it	eq
 8000ffe:	f020 0001 	biceq.w	r0, r0, #1
 8001002:	4770      	bx	lr
 8001004:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8001008:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800100c:	327f      	adds	r2, #127	; 0x7f
 800100e:	bfc2      	ittt	gt
 8001010:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8001014:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8001018:	4770      	bxgt	lr
 800101a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800101e:	f04f 0300 	mov.w	r3, #0
 8001022:	3a01      	subs	r2, #1
 8001024:	e737      	b.n	8000e96 <__aeabi_fmul+0x92>
 8001026:	f092 0f00 	teq	r2, #0
 800102a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800102e:	bf02      	ittt	eq
 8001030:	0040      	lsleq	r0, r0, #1
 8001032:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8001036:	3a01      	subeq	r2, #1
 8001038:	d0f9      	beq.n	800102e <__aeabi_fdiv+0xc2>
 800103a:	ea40 000c 	orr.w	r0, r0, ip
 800103e:	f093 0f00 	teq	r3, #0
 8001042:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8001046:	bf02      	ittt	eq
 8001048:	0049      	lsleq	r1, r1, #1
 800104a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800104e:	3b01      	subeq	r3, #1
 8001050:	d0f9      	beq.n	8001046 <__aeabi_fdiv+0xda>
 8001052:	ea41 010c 	orr.w	r1, r1, ip
 8001056:	e795      	b.n	8000f84 <__aeabi_fdiv+0x18>
 8001058:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800105c:	ea92 0f0c 	teq	r2, ip
 8001060:	d108      	bne.n	8001074 <__aeabi_fdiv+0x108>
 8001062:	0242      	lsls	r2, r0, #9
 8001064:	f47f af7d 	bne.w	8000f62 <__aeabi_fmul+0x15e>
 8001068:	ea93 0f0c 	teq	r3, ip
 800106c:	f47f af70 	bne.w	8000f50 <__aeabi_fmul+0x14c>
 8001070:	4608      	mov	r0, r1
 8001072:	e776      	b.n	8000f62 <__aeabi_fmul+0x15e>
 8001074:	ea93 0f0c 	teq	r3, ip
 8001078:	d104      	bne.n	8001084 <__aeabi_fdiv+0x118>
 800107a:	024b      	lsls	r3, r1, #9
 800107c:	f43f af4c 	beq.w	8000f18 <__aeabi_fmul+0x114>
 8001080:	4608      	mov	r0, r1
 8001082:	e76e      	b.n	8000f62 <__aeabi_fmul+0x15e>
 8001084:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001088:	bf18      	it	ne
 800108a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800108e:	d1ca      	bne.n	8001026 <__aeabi_fdiv+0xba>
 8001090:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001094:	f47f af5c 	bne.w	8000f50 <__aeabi_fmul+0x14c>
 8001098:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800109c:	f47f af3c 	bne.w	8000f18 <__aeabi_fmul+0x114>
 80010a0:	e75f      	b.n	8000f62 <__aeabi_fmul+0x15e>
 80010a2:	bf00      	nop

080010a4 <__gesf2>:
 80010a4:	f04f 3cff 	mov.w	ip, #4294967295
 80010a8:	e006      	b.n	80010b8 <__cmpsf2+0x4>
 80010aa:	bf00      	nop

080010ac <__lesf2>:
 80010ac:	f04f 0c01 	mov.w	ip, #1
 80010b0:	e002      	b.n	80010b8 <__cmpsf2+0x4>
 80010b2:	bf00      	nop

080010b4 <__cmpsf2>:
 80010b4:	f04f 0c01 	mov.w	ip, #1
 80010b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80010bc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010c4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010c8:	bf18      	it	ne
 80010ca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80010ce:	d011      	beq.n	80010f4 <__cmpsf2+0x40>
 80010d0:	b001      	add	sp, #4
 80010d2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80010d6:	bf18      	it	ne
 80010d8:	ea90 0f01 	teqne	r0, r1
 80010dc:	bf58      	it	pl
 80010de:	ebb2 0003 	subspl.w	r0, r2, r3
 80010e2:	bf88      	it	hi
 80010e4:	17c8      	asrhi	r0, r1, #31
 80010e6:	bf38      	it	cc
 80010e8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80010ec:	bf18      	it	ne
 80010ee:	f040 0001 	orrne.w	r0, r0, #1
 80010f2:	4770      	bx	lr
 80010f4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010f8:	d102      	bne.n	8001100 <__cmpsf2+0x4c>
 80010fa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010fe:	d105      	bne.n	800110c <__cmpsf2+0x58>
 8001100:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001104:	d1e4      	bne.n	80010d0 <__cmpsf2+0x1c>
 8001106:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800110a:	d0e1      	beq.n	80010d0 <__cmpsf2+0x1c>
 800110c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop

08001114 <__aeabi_cfrcmple>:
 8001114:	4684      	mov	ip, r0
 8001116:	4608      	mov	r0, r1
 8001118:	4661      	mov	r1, ip
 800111a:	e7ff      	b.n	800111c <__aeabi_cfcmpeq>

0800111c <__aeabi_cfcmpeq>:
 800111c:	b50f      	push	{r0, r1, r2, r3, lr}
 800111e:	f7ff ffc9 	bl	80010b4 <__cmpsf2>
 8001122:	2800      	cmp	r0, #0
 8001124:	bf48      	it	mi
 8001126:	f110 0f00 	cmnmi.w	r0, #0
 800112a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800112c <__aeabi_fcmpeq>:
 800112c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001130:	f7ff fff4 	bl	800111c <__aeabi_cfcmpeq>
 8001134:	bf0c      	ite	eq
 8001136:	2001      	moveq	r0, #1
 8001138:	2000      	movne	r0, #0
 800113a:	f85d fb08 	ldr.w	pc, [sp], #8
 800113e:	bf00      	nop

08001140 <__aeabi_fcmplt>:
 8001140:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001144:	f7ff ffea 	bl	800111c <__aeabi_cfcmpeq>
 8001148:	bf34      	ite	cc
 800114a:	2001      	movcc	r0, #1
 800114c:	2000      	movcs	r0, #0
 800114e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001152:	bf00      	nop

08001154 <__aeabi_fcmple>:
 8001154:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001158:	f7ff ffe0 	bl	800111c <__aeabi_cfcmpeq>
 800115c:	bf94      	ite	ls
 800115e:	2001      	movls	r0, #1
 8001160:	2000      	movhi	r0, #0
 8001162:	f85d fb08 	ldr.w	pc, [sp], #8
 8001166:	bf00      	nop

08001168 <__aeabi_fcmpge>:
 8001168:	f84d ed08 	str.w	lr, [sp, #-8]!
 800116c:	f7ff ffd2 	bl	8001114 <__aeabi_cfrcmple>
 8001170:	bf94      	ite	ls
 8001172:	2001      	movls	r0, #1
 8001174:	2000      	movhi	r0, #0
 8001176:	f85d fb08 	ldr.w	pc, [sp], #8
 800117a:	bf00      	nop

0800117c <__aeabi_fcmpgt>:
 800117c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001180:	f7ff ffc8 	bl	8001114 <__aeabi_cfrcmple>
 8001184:	bf34      	ite	cc
 8001186:	2001      	movcc	r0, #1
 8001188:	2000      	movcs	r0, #0
 800118a:	f85d fb08 	ldr.w	pc, [sp], #8
 800118e:	bf00      	nop

08001190 <__aeabi_fcmpun>:
 8001190:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001194:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001198:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800119c:	d102      	bne.n	80011a4 <__aeabi_fcmpun+0x14>
 800119e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80011a2:	d108      	bne.n	80011b6 <__aeabi_fcmpun+0x26>
 80011a4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80011a8:	d102      	bne.n	80011b0 <__aeabi_fcmpun+0x20>
 80011aa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80011ae:	d102      	bne.n	80011b6 <__aeabi_fcmpun+0x26>
 80011b0:	f04f 0000 	mov.w	r0, #0
 80011b4:	4770      	bx	lr
 80011b6:	f04f 0001 	mov.w	r0, #1
 80011ba:	4770      	bx	lr

080011bc <__aeabi_f2iz>:
 80011bc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80011c0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80011c4:	d30f      	bcc.n	80011e6 <__aeabi_f2iz+0x2a>
 80011c6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80011ca:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80011ce:	d90d      	bls.n	80011ec <__aeabi_f2iz+0x30>
 80011d0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80011d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80011d8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80011dc:	fa23 f002 	lsr.w	r0, r3, r2
 80011e0:	bf18      	it	ne
 80011e2:	4240      	negne	r0, r0
 80011e4:	4770      	bx	lr
 80011e6:	f04f 0000 	mov.w	r0, #0
 80011ea:	4770      	bx	lr
 80011ec:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80011f0:	d101      	bne.n	80011f6 <__aeabi_f2iz+0x3a>
 80011f2:	0242      	lsls	r2, r0, #9
 80011f4:	d105      	bne.n	8001202 <__aeabi_f2iz+0x46>
 80011f6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80011fa:	bf08      	it	eq
 80011fc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001200:	4770      	bx	lr
 8001202:	f04f 0000 	mov.w	r0, #0
 8001206:	4770      	bx	lr

08001208 <__aeabi_f2uiz>:
 8001208:	0042      	lsls	r2, r0, #1
 800120a:	d20e      	bcs.n	800122a <__aeabi_f2uiz+0x22>
 800120c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001210:	d30b      	bcc.n	800122a <__aeabi_f2uiz+0x22>
 8001212:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001216:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800121a:	d409      	bmi.n	8001230 <__aeabi_f2uiz+0x28>
 800121c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001220:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001224:	fa23 f002 	lsr.w	r0, r3, r2
 8001228:	4770      	bx	lr
 800122a:	f04f 0000 	mov.w	r0, #0
 800122e:	4770      	bx	lr
 8001230:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001234:	d101      	bne.n	800123a <__aeabi_f2uiz+0x32>
 8001236:	0242      	lsls	r2, r0, #9
 8001238:	d102      	bne.n	8001240 <__aeabi_f2uiz+0x38>
 800123a:	f04f 30ff 	mov.w	r0, #4294967295
 800123e:	4770      	bx	lr
 8001240:	f04f 0000 	mov.w	r0, #0
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop

08001248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800124c:	f001 f8ef 	bl	800242e <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001250:	f000 f81f 	bl	8001292 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001254:	f000 fba4 	bl	80019a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001258:	f000 fb84 	bl	8001964 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800125c:	f000 fb58 	bl	8001910 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001260:	f000 f86e 	bl	8001340 <MX_ADC1_Init>
  MX_DAC_Init();
 8001264:	f000 f91c 	bl	80014a0 <MX_DAC_Init>
  MX_I2C2_Init();
 8001268:	f000 f944 	bl	80014f4 <MX_I2C2_Init>
  MX_SPI1_Init();
 800126c:	f000 f970 	bl	8001550 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001270:	f000 f9a4 	bl	80015bc <MX_TIM1_Init>
  MX_TIM3_Init();
 8001274:	f000 f9f4 	bl	8001660 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001278:	f000 fa40 	bl	80016fc <MX_TIM4_Init>
  MX_TIM6_Init();
 800127c:	f000 fab4 	bl	80017e8 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001280:	f000 fae8 	bl	8001854 <MX_TIM7_Init>
  MX_TIM16_Init();
 8001284:	f000 fb1c 	bl	80018c0 <MX_TIM16_Init>

  /* USER CODE BEGIN 2 */
  NX7_CCU_Init();
 8001288:	f006 fc72 	bl	8007b70 <NX7_CCU_Init>
  NX7_CCU_Infinite_Loop();
 800128c:	f007 f9ac 	bl	80085e8 <NX7_CCU_Infinite_Loop>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001290:	e7fe      	b.n	8001290 <main+0x48>

08001292 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b092      	sub	sp, #72	; 0x48
 8001296:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001298:	f107 0320 	add.w	r3, r7, #32
 800129c:	2228      	movs	r2, #40	; 0x28
 800129e:	2100      	movs	r1, #0
 80012a0:	4618      	mov	r0, r3
 80012a2:	f00c fcad 	bl	800dc00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a6:	f107 030c 	add.w	r3, r7, #12
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
 80012b4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012b6:	463b      	mov	r3, r7
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012c0:	2301      	movs	r3, #1
 80012c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012ca:	2300      	movs	r3, #0
 80012cc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ce:	2302      	movs	r3, #2
 80012d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 80012d8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80012dc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012de:	f107 0320 	add.w	r3, r7, #32
 80012e2:	4618      	mov	r0, r3
 80012e4:	f003 fbe2 	bl	8004aac <HAL_RCC_OscConfig>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <SystemClock_Config+0x60>
  {
    Error_Handler();
 80012ee:	f000 fc55 	bl	8001b9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012f2:	230f      	movs	r3, #15
 80012f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012f6:	2302      	movs	r3, #2
 80012f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012fe:	2300      	movs	r3, #0
 8001300:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001306:	f107 030c 	add.w	r3, r7, #12
 800130a:	2100      	movs	r1, #0
 800130c:	4618      	mov	r0, r3
 800130e:	f003 fe4d 	bl	8004fac <HAL_RCC_ClockConfig>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001318:	f000 fc40 	bl	8001b9c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800131c:	2302      	movs	r3, #2
 800131e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001320:	2300      	movs	r3, #0
 8001322:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001324:	463b      	mov	r3, r7
 8001326:	4618      	mov	r0, r3
 8001328:	f003 ffac 	bl	8005284 <HAL_RCCEx_PeriphCLKConfig>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001332:	f000 fc33 	bl	8001b9c <Error_Handler>
  }
}
 8001336:	bf00      	nop
 8001338:	3748      	adds	r7, #72	; 0x48
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001350:	4b51      	ldr	r3, [pc, #324]	; (8001498 <MX_ADC1_Init+0x158>)
 8001352:	4a52      	ldr	r2, [pc, #328]	; (800149c <MX_ADC1_Init+0x15c>)
 8001354:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001356:	4b50      	ldr	r3, [pc, #320]	; (8001498 <MX_ADC1_Init+0x158>)
 8001358:	f44f 7280 	mov.w	r2, #256	; 0x100
 800135c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800135e:	4b4e      	ldr	r3, [pc, #312]	; (8001498 <MX_ADC1_Init+0x158>)
 8001360:	2200      	movs	r2, #0
 8001362:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001364:	4b4c      	ldr	r3, [pc, #304]	; (8001498 <MX_ADC1_Init+0x158>)
 8001366:	2200      	movs	r2, #0
 8001368:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800136a:	4b4b      	ldr	r3, [pc, #300]	; (8001498 <MX_ADC1_Init+0x158>)
 800136c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001370:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001372:	4b49      	ldr	r3, [pc, #292]	; (8001498 <MX_ADC1_Init+0x158>)
 8001374:	2200      	movs	r2, #0
 8001376:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 9;
 8001378:	4b47      	ldr	r3, [pc, #284]	; (8001498 <MX_ADC1_Init+0x158>)
 800137a:	2209      	movs	r2, #9
 800137c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800137e:	4846      	ldr	r0, [pc, #280]	; (8001498 <MX_ADC1_Init+0x158>)
 8001380:	f001 f8ae 	bl	80024e0 <HAL_ADC_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800138a:	f000 fc07 	bl	8001b9c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800138e:	2304      	movs	r3, #4
 8001390:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001392:	2301      	movs	r3, #1
 8001394:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001396:	2307      	movs	r3, #7
 8001398:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	4619      	mov	r1, r3
 800139e:	483e      	ldr	r0, [pc, #248]	; (8001498 <MX_ADC1_Init+0x158>)
 80013a0:	f001 faee 	bl	8002980 <HAL_ADC_ConfigChannel>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80013aa:	f000 fbf7 	bl	8001b9c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80013ae:	230a      	movs	r3, #10
 80013b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80013b2:	2302      	movs	r3, #2
 80013b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	4619      	mov	r1, r3
 80013ba:	4837      	ldr	r0, [pc, #220]	; (8001498 <MX_ADC1_Init+0x158>)
 80013bc:	f001 fae0 	bl	8002980 <HAL_ADC_ConfigChannel>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80013c6:	f000 fbe9 	bl	8001b9c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80013ca:	2301      	movs	r3, #1
 80013cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80013ce:	2303      	movs	r3, #3
 80013d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013d2:	1d3b      	adds	r3, r7, #4
 80013d4:	4619      	mov	r1, r3
 80013d6:	4830      	ldr	r0, [pc, #192]	; (8001498 <MX_ADC1_Init+0x158>)
 80013d8:	f001 fad2 	bl	8002980 <HAL_ADC_ConfigChannel>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80013e2:	f000 fbdb 	bl	8001b9c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80013e6:	2302      	movs	r3, #2
 80013e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80013ea:	2304      	movs	r3, #4
 80013ec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ee:	1d3b      	adds	r3, r7, #4
 80013f0:	4619      	mov	r1, r3
 80013f2:	4829      	ldr	r0, [pc, #164]	; (8001498 <MX_ADC1_Init+0x158>)
 80013f4:	f001 fac4 	bl	8002980 <HAL_ADC_ConfigChannel>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80013fe:	f000 fbcd 	bl	8001b9c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001402:	230c      	movs	r3, #12
 8001404:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001406:	2305      	movs	r3, #5
 8001408:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	4619      	mov	r1, r3
 800140e:	4822      	ldr	r0, [pc, #136]	; (8001498 <MX_ADC1_Init+0x158>)
 8001410:	f001 fab6 	bl	8002980 <HAL_ADC_ConfigChannel>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800141a:	f000 fbbf 	bl	8001b9c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800141e:	230b      	movs	r3, #11
 8001420:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001422:	2306      	movs	r3, #6
 8001424:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	4619      	mov	r1, r3
 800142a:	481b      	ldr	r0, [pc, #108]	; (8001498 <MX_ADC1_Init+0x158>)
 800142c:	f001 faa8 	bl	8002980 <HAL_ADC_ConfigChannel>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001436:	f000 fbb1 	bl	8001b9c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800143a:	2303      	movs	r3, #3
 800143c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800143e:	2307      	movs	r3, #7
 8001440:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	4619      	mov	r1, r3
 8001446:	4814      	ldr	r0, [pc, #80]	; (8001498 <MX_ADC1_Init+0x158>)
 8001448:	f001 fa9a 	bl	8002980 <HAL_ADC_ConfigChannel>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8001452:	f000 fba3 	bl	8001b9c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001456:	230d      	movs	r3, #13
 8001458:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800145a:	2308      	movs	r3, #8
 800145c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	4619      	mov	r1, r3
 8001462:	480d      	ldr	r0, [pc, #52]	; (8001498 <MX_ADC1_Init+0x158>)
 8001464:	f001 fa8c 	bl	8002980 <HAL_ADC_ConfigChannel>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800146e:	f000 fb95 	bl	8001b9c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001476:	2309      	movs	r3, #9
 8001478:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	4619      	mov	r1, r3
 800147e:	4806      	ldr	r0, [pc, #24]	; (8001498 <MX_ADC1_Init+0x158>)
 8001480:	f001 fa7e 	bl	8002980 <HAL_ADC_ConfigChannel>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 800148a:	f000 fb87 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000330 	.word	0x20000330
 800149c:	40012400 	.word	0x40012400

080014a0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80014a6:	463b      	mov	r3, r7
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80014ae:	4b0f      	ldr	r3, [pc, #60]	; (80014ec <MX_DAC_Init+0x4c>)
 80014b0:	4a0f      	ldr	r2, [pc, #60]	; (80014f0 <MX_DAC_Init+0x50>)
 80014b2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80014b4:	480d      	ldr	r0, [pc, #52]	; (80014ec <MX_DAC_Init+0x4c>)
 80014b6:	f001 fe20 	bl	80030fa <HAL_DAC_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80014c0:	f000 fb6c 	bl	8001b9c <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80014c4:	2300      	movs	r3, #0
 80014c6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80014cc:	463b      	mov	r3, r7
 80014ce:	2210      	movs	r2, #16
 80014d0:	4619      	mov	r1, r3
 80014d2:	4806      	ldr	r0, [pc, #24]	; (80014ec <MX_DAC_Init+0x4c>)
 80014d4:	f001 ff0b 	bl	80032ee <HAL_DAC_ConfigChannel>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80014de:	f000 fb5d 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80014e2:	bf00      	nop
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	200003a4 	.word	0x200003a4
 80014f0:	40007400 	.word	0x40007400

080014f4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014f8:	4b12      	ldr	r3, [pc, #72]	; (8001544 <MX_I2C2_Init+0x50>)
 80014fa:	4a13      	ldr	r2, [pc, #76]	; (8001548 <MX_I2C2_Init+0x54>)
 80014fc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80014fe:	4b11      	ldr	r3, [pc, #68]	; (8001544 <MX_I2C2_Init+0x50>)
 8001500:	4a12      	ldr	r2, [pc, #72]	; (800154c <MX_I2C2_Init+0x58>)
 8001502:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001504:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <MX_I2C2_Init+0x50>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <MX_I2C2_Init+0x50>)
 800150c:	2200      	movs	r2, #0
 800150e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001510:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <MX_I2C2_Init+0x50>)
 8001512:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001516:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001518:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <MX_I2C2_Init+0x50>)
 800151a:	2200      	movs	r2, #0
 800151c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <MX_I2C2_Init+0x50>)
 8001520:	2200      	movs	r2, #0
 8001522:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001524:	4b07      	ldr	r3, [pc, #28]	; (8001544 <MX_I2C2_Init+0x50>)
 8001526:	2200      	movs	r2, #0
 8001528:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <MX_I2C2_Init+0x50>)
 800152c:	2200      	movs	r2, #0
 800152e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001530:	4804      	ldr	r0, [pc, #16]	; (8001544 <MX_I2C2_Init+0x50>)
 8001532:	f002 faed 	bl	8003b10 <HAL_I2C_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800153c:	f000 fb2e 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000294 	.word	0x20000294
 8001548:	40005800 	.word	0x40005800
 800154c:	00061a80 	.word	0x00061a80

08001550 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001554:	4b17      	ldr	r3, [pc, #92]	; (80015b4 <MX_SPI1_Init+0x64>)
 8001556:	4a18      	ldr	r2, [pc, #96]	; (80015b8 <MX_SPI1_Init+0x68>)
 8001558:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800155a:	4b16      	ldr	r3, [pc, #88]	; (80015b4 <MX_SPI1_Init+0x64>)
 800155c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001560:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001562:	4b14      	ldr	r3, [pc, #80]	; (80015b4 <MX_SPI1_Init+0x64>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001568:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <MX_SPI1_Init+0x64>)
 800156a:	2200      	movs	r2, #0
 800156c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800156e:	4b11      	ldr	r3, [pc, #68]	; (80015b4 <MX_SPI1_Init+0x64>)
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001574:	4b0f      	ldr	r3, [pc, #60]	; (80015b4 <MX_SPI1_Init+0x64>)
 8001576:	2201      	movs	r2, #1
 8001578:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800157a:	4b0e      	ldr	r3, [pc, #56]	; (80015b4 <MX_SPI1_Init+0x64>)
 800157c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001580:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001582:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <MX_SPI1_Init+0x64>)
 8001584:	2210      	movs	r2, #16
 8001586:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8001588:	4b0a      	ldr	r3, [pc, #40]	; (80015b4 <MX_SPI1_Init+0x64>)
 800158a:	2280      	movs	r2, #128	; 0x80
 800158c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800158e:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <MX_SPI1_Init+0x64>)
 8001590:	2200      	movs	r2, #0
 8001592:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001594:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <MX_SPI1_Init+0x64>)
 8001596:	2200      	movs	r2, #0
 8001598:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800159a:	4b06      	ldr	r3, [pc, #24]	; (80015b4 <MX_SPI1_Init+0x64>)
 800159c:	220a      	movs	r2, #10
 800159e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015a0:	4804      	ldr	r0, [pc, #16]	; (80015b4 <MX_SPI1_Init+0x64>)
 80015a2:	f003 ff6d 	bl	8005480 <HAL_SPI_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015ac:	f000 faf6 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	2000048c 	.word	0x2000048c
 80015b8:	40013000 	.word	0x40013000

080015bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015c2:	f107 0308 	add.w	r3, r7, #8
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d0:	463b      	mov	r3, r7
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015d8:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <MX_TIM1_Init+0x9c>)
 80015da:	4a20      	ldr	r2, [pc, #128]	; (800165c <MX_TIM1_Init+0xa0>)
 80015dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24000-1;
 80015de:	4b1e      	ldr	r3, [pc, #120]	; (8001658 <MX_TIM1_Init+0x9c>)
 80015e0:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 80015e4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e6:	4b1c      	ldr	r3, [pc, #112]	; (8001658 <MX_TIM1_Init+0x9c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5000-1;
 80015ec:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <MX_TIM1_Init+0x9c>)
 80015ee:	f241 3287 	movw	r2, #4999	; 0x1387
 80015f2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f4:	4b18      	ldr	r3, [pc, #96]	; (8001658 <MX_TIM1_Init+0x9c>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 2;
 80015fa:	4b17      	ldr	r3, [pc, #92]	; (8001658 <MX_TIM1_Init+0x9c>)
 80015fc:	2202      	movs	r2, #2
 80015fe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001600:	4b15      	ldr	r3, [pc, #84]	; (8001658 <MX_TIM1_Init+0x9c>)
 8001602:	2200      	movs	r2, #0
 8001604:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001606:	4814      	ldr	r0, [pc, #80]	; (8001658 <MX_TIM1_Init+0x9c>)
 8001608:	f004 f9fe 	bl	8005a08 <HAL_TIM_Base_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001612:	f000 fac3 	bl	8001b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800161a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800161c:	f107 0308 	add.w	r3, r7, #8
 8001620:	4619      	mov	r1, r3
 8001622:	480d      	ldr	r0, [pc, #52]	; (8001658 <MX_TIM1_Init+0x9c>)
 8001624:	f004 fe78 	bl	8006318 <HAL_TIM_ConfigClockSource>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800162e:	f000 fab5 	bl	8001b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001632:	2300      	movs	r3, #0
 8001634:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001636:	2300      	movs	r3, #0
 8001638:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800163a:	463b      	mov	r3, r7
 800163c:	4619      	mov	r1, r3
 800163e:	4806      	ldr	r0, [pc, #24]	; (8001658 <MX_TIM1_Init+0x9c>)
 8001640:	f005 fa68 	bl	8006b14 <HAL_TIMEx_MasterConfigSynchronization>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800164a:	f000 faa7 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800164e:	bf00      	nop
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	20000444 	.word	0x20000444
 800165c:	40012c00 	.word	0x40012c00

08001660 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001666:	f107 0308 	add.w	r3, r7, #8
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001674:	463b      	mov	r3, r7
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800167c:	4b1d      	ldr	r3, [pc, #116]	; (80016f4 <MX_TIM3_Init+0x94>)
 800167e:	4a1e      	ldr	r2, [pc, #120]	; (80016f8 <MX_TIM3_Init+0x98>)
 8001680:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24000-1;
 8001682:	4b1c      	ldr	r3, [pc, #112]	; (80016f4 <MX_TIM3_Init+0x94>)
 8001684:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8001688:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168a:	4b1a      	ldr	r3, [pc, #104]	; (80016f4 <MX_TIM3_Init+0x94>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8001690:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <MX_TIM3_Init+0x94>)
 8001692:	2263      	movs	r2, #99	; 0x63
 8001694:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001696:	4b17      	ldr	r3, [pc, #92]	; (80016f4 <MX_TIM3_Init+0x94>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800169c:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <MX_TIM3_Init+0x94>)
 800169e:	2200      	movs	r2, #0
 80016a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016a2:	4814      	ldr	r0, [pc, #80]	; (80016f4 <MX_TIM3_Init+0x94>)
 80016a4:	f004 f9b0 	bl	8005a08 <HAL_TIM_Base_Init>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80016ae:	f000 fa75 	bl	8001b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016b8:	f107 0308 	add.w	r3, r7, #8
 80016bc:	4619      	mov	r1, r3
 80016be:	480d      	ldr	r0, [pc, #52]	; (80016f4 <MX_TIM3_Init+0x94>)
 80016c0:	f004 fe2a 	bl	8006318 <HAL_TIM_ConfigClockSource>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80016ca:	f000 fa67 	bl	8001b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016ce:	2320      	movs	r3, #32
 80016d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d2:	2300      	movs	r3, #0
 80016d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80016d6:	463b      	mov	r3, r7
 80016d8:	4619      	mov	r1, r3
 80016da:	4806      	ldr	r0, [pc, #24]	; (80016f4 <MX_TIM3_Init+0x94>)
 80016dc:	f005 fa1a 	bl	8006b14 <HAL_TIMEx_MasterConfigSynchronization>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80016e6:	f000 fa59 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016ea:	bf00      	nop
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	200002e8 	.word	0x200002e8
 80016f8:	40000400 	.word	0x40000400

080016fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08e      	sub	sp, #56	; 0x38
 8001700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001702:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001706:	2200      	movs	r2, #0
 8001708:	601a      	str	r2, [r3, #0]
 800170a:	605a      	str	r2, [r3, #4]
 800170c:	609a      	str	r2, [r3, #8]
 800170e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001710:	f107 0320 	add.w	r3, r7, #32
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800171a:	1d3b      	adds	r3, r7, #4
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
 8001728:	615a      	str	r2, [r3, #20]
 800172a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800172c:	4b2c      	ldr	r3, [pc, #176]	; (80017e0 <MX_TIM4_Init+0xe4>)
 800172e:	4a2d      	ldr	r2, [pc, #180]	; (80017e4 <MX_TIM4_Init+0xe8>)
 8001730:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240-1;
 8001732:	4b2b      	ldr	r3, [pc, #172]	; (80017e0 <MX_TIM4_Init+0xe4>)
 8001734:	22ef      	movs	r2, #239	; 0xef
 8001736:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001738:	4b29      	ldr	r3, [pc, #164]	; (80017e0 <MX_TIM4_Init+0xe4>)
 800173a:	2200      	movs	r2, #0
 800173c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 800173e:	4b28      	ldr	r3, [pc, #160]	; (80017e0 <MX_TIM4_Init+0xe4>)
 8001740:	2263      	movs	r2, #99	; 0x63
 8001742:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001744:	4b26      	ldr	r3, [pc, #152]	; (80017e0 <MX_TIM4_Init+0xe4>)
 8001746:	2200      	movs	r2, #0
 8001748:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800174a:	4b25      	ldr	r3, [pc, #148]	; (80017e0 <MX_TIM4_Init+0xe4>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001750:	4823      	ldr	r0, [pc, #140]	; (80017e0 <MX_TIM4_Init+0xe4>)
 8001752:	f004 f959 	bl	8005a08 <HAL_TIM_Base_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 800175c:	f000 fa1e 	bl	8001b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001760:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001764:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001766:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800176a:	4619      	mov	r1, r3
 800176c:	481c      	ldr	r0, [pc, #112]	; (80017e0 <MX_TIM4_Init+0xe4>)
 800176e:	f004 fdd3 	bl	8006318 <HAL_TIM_ConfigClockSource>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8001778:	f000 fa10 	bl	8001b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800177c:	4818      	ldr	r0, [pc, #96]	; (80017e0 <MX_TIM4_Init+0xe4>)
 800177e:	f004 fa6d 	bl	8005c5c <HAL_TIM_PWM_Init>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001788:	f000 fa08 	bl	8001b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800178c:	2300      	movs	r3, #0
 800178e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001790:	2300      	movs	r3, #0
 8001792:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001794:	f107 0320 	add.w	r3, r7, #32
 8001798:	4619      	mov	r1, r3
 800179a:	4811      	ldr	r0, [pc, #68]	; (80017e0 <MX_TIM4_Init+0xe4>)
 800179c:	f005 f9ba 	bl	8006b14 <HAL_TIMEx_MasterConfigSynchronization>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80017a6:	f000 f9f9 	bl	8001b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017aa:	2360      	movs	r3, #96	; 0x60
 80017ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017b6:	2300      	movs	r3, #0
 80017b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	220c      	movs	r2, #12
 80017be:	4619      	mov	r1, r3
 80017c0:	4807      	ldr	r0, [pc, #28]	; (80017e0 <MX_TIM4_Init+0xe4>)
 80017c2:	f004 fceb 	bl	800619c <HAL_TIM_PWM_ConfigChannel>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80017cc:	f000 f9e6 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80017d0:	4803      	ldr	r0, [pc, #12]	; (80017e0 <MX_TIM4_Init+0xe4>)
 80017d2:	f000 fc23 	bl	800201c <HAL_TIM_MspPostInit>

}
 80017d6:	bf00      	nop
 80017d8:	3738      	adds	r7, #56	; 0x38
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	2000024c 	.word	0x2000024c
 80017e4:	40000800 	.word	0x40000800

080017e8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ee:	463b      	mov	r3, r7
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <MX_TIM6_Init+0x64>)
 80017f8:	4a15      	ldr	r2, [pc, #84]	; (8001850 <MX_TIM6_Init+0x68>)
 80017fa:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 24000-1;
 80017fc:	4b13      	ldr	r3, [pc, #76]	; (800184c <MX_TIM6_Init+0x64>)
 80017fe:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8001802:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001804:	4b11      	ldr	r3, [pc, #68]	; (800184c <MX_TIM6_Init+0x64>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 800180a:	4b10      	ldr	r3, [pc, #64]	; (800184c <MX_TIM6_Init+0x64>)
 800180c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001810:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <MX_TIM6_Init+0x64>)
 8001814:	2200      	movs	r2, #0
 8001816:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001818:	480c      	ldr	r0, [pc, #48]	; (800184c <MX_TIM6_Init+0x64>)
 800181a:	f004 f8f5 	bl	8005a08 <HAL_TIM_Base_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001824:	f000 f9ba 	bl	8001b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001828:	2300      	movs	r3, #0
 800182a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800182c:	2300      	movs	r3, #0
 800182e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001830:	463b      	mov	r3, r7
 8001832:	4619      	mov	r1, r3
 8001834:	4805      	ldr	r0, [pc, #20]	; (800184c <MX_TIM6_Init+0x64>)
 8001836:	f005 f96d 	bl	8006b14 <HAL_TIMEx_MasterConfigSynchronization>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001840:	f000 f9ac 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	200003fc 	.word	0x200003fc
 8001850:	40001000 	.word	0x40001000

08001854 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800185a:	463b      	mov	r3, r7
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <MX_TIM7_Init+0x64>)
 8001864:	4a15      	ldr	r2, [pc, #84]	; (80018bc <MX_TIM7_Init+0x68>)
 8001866:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 24000-1;
 8001868:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <MX_TIM7_Init+0x64>)
 800186a:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 800186e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001870:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <MX_TIM7_Init+0x64>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000-1;
 8001876:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <MX_TIM7_Init+0x64>)
 8001878:	f242 720f 	movw	r2, #9999	; 0x270f
 800187c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800187e:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <MX_TIM7_Init+0x64>)
 8001880:	2200      	movs	r2, #0
 8001882:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001884:	480c      	ldr	r0, [pc, #48]	; (80018b8 <MX_TIM7_Init+0x64>)
 8001886:	f004 f8bf 	bl	8005a08 <HAL_TIM_Base_Init>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001890:	f000 f984 	bl	8001b9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001894:	2300      	movs	r3, #0
 8001896:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001898:	2300      	movs	r3, #0
 800189a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800189c:	463b      	mov	r3, r7
 800189e:	4619      	mov	r1, r3
 80018a0:	4805      	ldr	r0, [pc, #20]	; (80018b8 <MX_TIM7_Init+0x64>)
 80018a2:	f005 f937 	bl	8006b14 <HAL_TIMEx_MasterConfigSynchronization>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80018ac:	f000 f976 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80018b0:	bf00      	nop
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	2000052c 	.word	0x2000052c
 80018bc:	40001400 	.word	0x40001400

080018c0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80018c4:	4b10      	ldr	r3, [pc, #64]	; (8001908 <MX_TIM16_Init+0x48>)
 80018c6:	4a11      	ldr	r2, [pc, #68]	; (800190c <MX_TIM16_Init+0x4c>)
 80018c8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 24000-1;
 80018ca:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <MX_TIM16_Init+0x48>)
 80018cc:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 80018d0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d2:	4b0d      	ldr	r3, [pc, #52]	; (8001908 <MX_TIM16_Init+0x48>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 15000-1;
 80018d8:	4b0b      	ldr	r3, [pc, #44]	; (8001908 <MX_TIM16_Init+0x48>)
 80018da:	f643 2297 	movw	r2, #14999	; 0x3a97
 80018de:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e0:	4b09      	ldr	r3, [pc, #36]	; (8001908 <MX_TIM16_Init+0x48>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80018e6:	4b08      	ldr	r3, [pc, #32]	; (8001908 <MX_TIM16_Init+0x48>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <MX_TIM16_Init+0x48>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80018f2:	4805      	ldr	r0, [pc, #20]	; (8001908 <MX_TIM16_Init+0x48>)
 80018f4:	f004 f888 	bl	8005a08 <HAL_TIM_Base_Init>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80018fe:	f000 f94d 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	200004e4 	.word	0x200004e4
 800190c:	40014400 	.word	0x40014400

08001910 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001914:	4b11      	ldr	r3, [pc, #68]	; (800195c <MX_USART1_UART_Init+0x4c>)
 8001916:	4a12      	ldr	r2, [pc, #72]	; (8001960 <MX_USART1_UART_Init+0x50>)
 8001918:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800191a:	4b10      	ldr	r3, [pc, #64]	; (800195c <MX_USART1_UART_Init+0x4c>)
 800191c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001920:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001922:	4b0e      	ldr	r3, [pc, #56]	; (800195c <MX_USART1_UART_Init+0x4c>)
 8001924:	2200      	movs	r2, #0
 8001926:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001928:	4b0c      	ldr	r3, [pc, #48]	; (800195c <MX_USART1_UART_Init+0x4c>)
 800192a:	2200      	movs	r2, #0
 800192c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800192e:	4b0b      	ldr	r3, [pc, #44]	; (800195c <MX_USART1_UART_Init+0x4c>)
 8001930:	2200      	movs	r2, #0
 8001932:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001934:	4b09      	ldr	r3, [pc, #36]	; (800195c <MX_USART1_UART_Init+0x4c>)
 8001936:	220c      	movs	r2, #12
 8001938:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800193a:	4b08      	ldr	r3, [pc, #32]	; (800195c <MX_USART1_UART_Init+0x4c>)
 800193c:	2200      	movs	r2, #0
 800193e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <MX_USART1_UART_Init+0x4c>)
 8001942:	2200      	movs	r2, #0
 8001944:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001946:	4805      	ldr	r0, [pc, #20]	; (800195c <MX_USART1_UART_Init+0x4c>)
 8001948:	f005 f95c 	bl	8006c04 <HAL_UART_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001952:	f000 f923 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000360 	.word	0x20000360
 8001960:	40013800 	.word	0x40013800

08001964 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800196a:	4b0c      	ldr	r3, [pc, #48]	; (800199c <MX_DMA_Init+0x38>)
 800196c:	695b      	ldr	r3, [r3, #20]
 800196e:	4a0b      	ldr	r2, [pc, #44]	; (800199c <MX_DMA_Init+0x38>)
 8001970:	f043 0301 	orr.w	r3, r3, #1
 8001974:	6153      	str	r3, [r2, #20]
 8001976:	4b09      	ldr	r3, [pc, #36]	; (800199c <MX_DMA_Init+0x38>)
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	f003 0301 	and.w	r3, r3, #1
 800197e:	607b      	str	r3, [r7, #4]
 8001980:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001982:	2200      	movs	r2, #0
 8001984:	2100      	movs	r1, #0
 8001986:	200b      	movs	r0, #11
 8001988:	f001 fb81 	bl	800308e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800198c:	200b      	movs	r0, #11
 800198e:	f001 fb9a 	bl	80030c6 <HAL_NVIC_EnableIRQ>

}
 8001992:	bf00      	nop
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40021000 	.word	0x40021000

080019a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b088      	sub	sp, #32
 80019a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a6:	f107 0310 	add.w	r3, r7, #16
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	609a      	str	r2, [r3, #8]
 80019b2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019b4:	4b72      	ldr	r3, [pc, #456]	; (8001b80 <MX_GPIO_Init+0x1e0>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	4a71      	ldr	r2, [pc, #452]	; (8001b80 <MX_GPIO_Init+0x1e0>)
 80019ba:	f043 0320 	orr.w	r3, r3, #32
 80019be:	6193      	str	r3, [r2, #24]
 80019c0:	4b6f      	ldr	r3, [pc, #444]	; (8001b80 <MX_GPIO_Init+0x1e0>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	f003 0320 	and.w	r3, r3, #32
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019cc:	4b6c      	ldr	r3, [pc, #432]	; (8001b80 <MX_GPIO_Init+0x1e0>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	4a6b      	ldr	r2, [pc, #428]	; (8001b80 <MX_GPIO_Init+0x1e0>)
 80019d2:	f043 0310 	orr.w	r3, r3, #16
 80019d6:	6193      	str	r3, [r2, #24]
 80019d8:	4b69      	ldr	r3, [pc, #420]	; (8001b80 <MX_GPIO_Init+0x1e0>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	f003 0310 	and.w	r3, r3, #16
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e4:	4b66      	ldr	r3, [pc, #408]	; (8001b80 <MX_GPIO_Init+0x1e0>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	4a65      	ldr	r2, [pc, #404]	; (8001b80 <MX_GPIO_Init+0x1e0>)
 80019ea:	f043 0304 	orr.w	r3, r3, #4
 80019ee:	6193      	str	r3, [r2, #24]
 80019f0:	4b63      	ldr	r3, [pc, #396]	; (8001b80 <MX_GPIO_Init+0x1e0>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	607b      	str	r3, [r7, #4]
 80019fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fc:	4b60      	ldr	r3, [pc, #384]	; (8001b80 <MX_GPIO_Init+0x1e0>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	4a5f      	ldr	r2, [pc, #380]	; (8001b80 <MX_GPIO_Init+0x1e0>)
 8001a02:	f043 0308 	orr.w	r3, r3, #8
 8001a06:	6193      	str	r3, [r2, #24]
 8001a08:	4b5d      	ldr	r3, [pc, #372]	; (8001b80 <MX_GPIO_Init+0x1e0>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	f003 0308 	and.w	r3, r3, #8
 8001a10:	603b      	str	r3, [r7, #0]
 8001a12:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Blower_OFF_Pin|DEF_LED_Pin|R_DEF_LED_Pin|R_DEF_Relay_Pin, GPIO_PIN_RESET);
 8001a14:	2200      	movs	r2, #0
 8001a16:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
 8001a1a:	485a      	ldr	r0, [pc, #360]	; (8001b84 <MX_GPIO_Init+0x1e4>)
 8001a1c:	f002 f847 	bl	8003aae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TLE_CSN_GPIO_Port, TLE_CSN_Pin, GPIO_PIN_SET);
 8001a20:	2201      	movs	r2, #1
 8001a22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a26:	4858      	ldr	r0, [pc, #352]	; (8001b88 <MX_GPIO_Init+0x1e8>)
 8001a28:	f002 f841 	bl	8003aae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AC_Relay_GPIO_Port, AC_Relay_Pin, GPIO_PIN_RESET);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2104      	movs	r1, #4
 8001a30:	4856      	ldr	r0, [pc, #344]	; (8001b8c <MX_GPIO_Init+0x1ec>)
 8001a32:	f002 f83c 	bl	8003aae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TLE_EN_Pin|Blower_Relay_Pin, GPIO_PIN_RESET);
 8001a36:	2200      	movs	r2, #0
 8001a38:	21c0      	movs	r1, #192	; 0xc0
 8001a3a:	4855      	ldr	r0, [pc, #340]	; (8001b90 <MX_GPIO_Init+0x1f0>)
 8001a3c:	f002 f837 	bl	8003aae <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Airmix_Up_SW_Pin Airmix_Down_SW_Pin Blower_Up_SW_Pin */
  GPIO_InitStruct.Pin = Airmix_Up_SW_Pin|Airmix_Down_SW_Pin|Blower_Up_SW_Pin;
 8001a40:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001a44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a46:	4b53      	ldr	r3, [pc, #332]	; (8001b94 <MX_GPIO_Init+0x1f4>)
 8001a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a4e:	f107 0310 	add.w	r3, r7, #16
 8001a52:	4619      	mov	r1, r3
 8001a54:	484c      	ldr	r0, [pc, #304]	; (8001b88 <MX_GPIO_Init+0x1e8>)
 8001a56:	f001 fe8f 	bl	8003778 <HAL_GPIO_Init>

  /*Configure GPIO pins : Blower_OFF_Pin DEF_LED_Pin R_DEF_LED_Pin R_DEF_Relay_Pin */
  GPIO_InitStruct.Pin = Blower_OFF_Pin|DEF_LED_Pin|R_DEF_LED_Pin|R_DEF_Relay_Pin;
 8001a5a:	f44f 639a 	mov.w	r3, #1232	; 0x4d0
 8001a5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a60:	2301      	movs	r3, #1
 8001a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a6c:	f107 0310 	add.w	r3, r7, #16
 8001a70:	4619      	mov	r1, r3
 8001a72:	4844      	ldr	r0, [pc, #272]	; (8001b84 <MX_GPIO_Init+0x1e4>)
 8001a74:	f001 fe80 	bl	8003778 <HAL_GPIO_Init>

  /*Configure GPIO pins : AC_SW_Pin POWER_SW_Pin Blower_Down_SW_Pin */
  GPIO_InitStruct.Pin = AC_SW_Pin|POWER_SW_Pin|Blower_Down_SW_Pin;
 8001a78:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001a7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a7e:	4b45      	ldr	r3, [pc, #276]	; (8001b94 <MX_GPIO_Init+0x1f4>)
 8001a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a82:	2301      	movs	r3, #1
 8001a84:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a86:	f107 0310 	add.w	r3, r7, #16
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	483d      	ldr	r0, [pc, #244]	; (8001b84 <MX_GPIO_Init+0x1e4>)
 8001a8e:	f001 fe73 	bl	8003778 <HAL_GPIO_Init>

  /*Configure GPIO pins : R_DEF_SW_Pin Intake_SW_Pin DEF_SW_Pin Mode_SW_Pin */
  GPIO_InitStruct.Pin = R_DEF_SW_Pin|Intake_SW_Pin|DEF_SW_Pin|Mode_SW_Pin;
 8001a92:	f24c 0303 	movw	r3, #49155	; 0xc003
 8001a96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a98:	4b3e      	ldr	r3, [pc, #248]	; (8001b94 <MX_GPIO_Init+0x1f4>)
 8001a9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa0:	f107 0310 	add.w	r3, r7, #16
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	483a      	ldr	r0, [pc, #232]	; (8001b90 <MX_GPIO_Init+0x1f0>)
 8001aa8:	f001 fe66 	bl	8003778 <HAL_GPIO_Init>

  /*Configure GPIO pin : Illumination_Pin */
  GPIO_InitStruct.Pin = Illumination_Pin;
 8001aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001ab2:	4b39      	ldr	r3, [pc, #228]	; (8001b98 <MX_GPIO_Init+0x1f8>)
 8001ab4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Illumination_GPIO_Port, &GPIO_InitStruct);
 8001aba:	f107 0310 	add.w	r3, r7, #16
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4833      	ldr	r0, [pc, #204]	; (8001b90 <MX_GPIO_Init+0x1f0>)
 8001ac2:	f001 fe59 	bl	8003778 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUTO_SW_Pin */
  GPIO_InitStruct.Pin = AUTO_SW_Pin;
 8001ac6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001acc:	4b32      	ldr	r3, [pc, #200]	; (8001b98 <MX_GPIO_Init+0x1f8>)
 8001ace:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AUTO_SW_GPIO_Port, &GPIO_InitStruct);
 8001ad4:	f107 0310 	add.w	r3, r7, #16
 8001ad8:	4619      	mov	r1, r3
 8001ada:	482d      	ldr	r0, [pc, #180]	; (8001b90 <MX_GPIO_Init+0x1f0>)
 8001adc:	f001 fe4c 	bl	8003778 <HAL_GPIO_Init>

  /*Configure GPIO pin : TLE_CSN_Pin */
  GPIO_InitStruct.Pin = TLE_CSN_Pin;
 8001ae0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ae4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aee:	2302      	movs	r3, #2
 8001af0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TLE_CSN_GPIO_Port, &GPIO_InitStruct);
 8001af2:	f107 0310 	add.w	r3, r7, #16
 8001af6:	4619      	mov	r1, r3
 8001af8:	4823      	ldr	r0, [pc, #140]	; (8001b88 <MX_GPIO_Init+0x1e8>)
 8001afa:	f001 fe3d 	bl	8003778 <HAL_GPIO_Init>

  /*Configure GPIO pin : AC_Relay_Pin */
  GPIO_InitStruct.Pin = AC_Relay_Pin;
 8001afe:	2304      	movs	r3, #4
 8001b00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b02:	2301      	movs	r3, #1
 8001b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(AC_Relay_GPIO_Port, &GPIO_InitStruct);
 8001b0e:	f107 0310 	add.w	r3, r7, #16
 8001b12:	4619      	mov	r1, r3
 8001b14:	481d      	ldr	r0, [pc, #116]	; (8001b8c <MX_GPIO_Init+0x1ec>)
 8001b16:	f001 fe2f 	bl	8003778 <HAL_GPIO_Init>

  /*Configure GPIO pins : TLE_EN_Pin Blower_Relay_Pin */
  GPIO_InitStruct.Pin = TLE_EN_Pin|Blower_Relay_Pin;
 8001b1a:	23c0      	movs	r3, #192	; 0xc0
 8001b1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b26:	2302      	movs	r3, #2
 8001b28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b2a:	f107 0310 	add.w	r3, r7, #16
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4817      	ldr	r0, [pc, #92]	; (8001b90 <MX_GPIO_Init+0x1f0>)
 8001b32:	f001 fe21 	bl	8003778 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2100      	movs	r1, #0
 8001b3a:	2006      	movs	r0, #6
 8001b3c:	f001 faa7 	bl	800308e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001b40:	2006      	movs	r0, #6
 8001b42:	f001 fac0 	bl	80030c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001b46:	2200      	movs	r2, #0
 8001b48:	2100      	movs	r1, #0
 8001b4a:	2007      	movs	r0, #7
 8001b4c:	f001 fa9f 	bl	800308e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001b50:	2007      	movs	r0, #7
 8001b52:	f001 fab8 	bl	80030c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001b56:	2200      	movs	r2, #0
 8001b58:	2100      	movs	r1, #0
 8001b5a:	2017      	movs	r0, #23
 8001b5c:	f001 fa97 	bl	800308e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001b60:	2017      	movs	r0, #23
 8001b62:	f001 fab0 	bl	80030c6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b66:	2200      	movs	r2, #0
 8001b68:	2100      	movs	r1, #0
 8001b6a:	2028      	movs	r0, #40	; 0x28
 8001b6c:	f001 fa8f 	bl	800308e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b70:	2028      	movs	r0, #40	; 0x28
 8001b72:	f001 faa8 	bl	80030c6 <HAL_NVIC_EnableIRQ>

}
 8001b76:	bf00      	nop
 8001b78:	3720      	adds	r7, #32
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40021000 	.word	0x40021000
 8001b84:	40011000 	.word	0x40011000
 8001b88:	40010800 	.word	0x40010800
 8001b8c:	40011400 	.word	0x40011400
 8001b90:	40010c00 	.word	0x40010c00
 8001b94:	10210000 	.word	0x10210000
 8001b98:	10310000 	.word	0x10310000

08001b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba0:	b672      	cpsid	i
}
 8001ba2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ba4:	e7fe      	b.n	8001ba4 <Error_Handler+0x8>
	...

08001ba8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bae:	4b15      	ldr	r3, [pc, #84]	; (8001c04 <HAL_MspInit+0x5c>)
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	4a14      	ldr	r2, [pc, #80]	; (8001c04 <HAL_MspInit+0x5c>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	6193      	str	r3, [r2, #24]
 8001bba:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_MspInit+0x5c>)
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	60bb      	str	r3, [r7, #8]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bc6:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <HAL_MspInit+0x5c>)
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	4a0e      	ldr	r2, [pc, #56]	; (8001c04 <HAL_MspInit+0x5c>)
 8001bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd0:	61d3      	str	r3, [r2, #28]
 8001bd2:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <HAL_MspInit+0x5c>)
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bda:	607b      	str	r3, [r7, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001bde:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <HAL_MspInit+0x60>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	4a04      	ldr	r2, [pc, #16]	; (8001c08 <HAL_MspInit+0x60>)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	3714      	adds	r7, #20
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr
 8001c04:	40021000 	.word	0x40021000
 8001c08:	40010000 	.word	0x40010000

08001c0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08a      	sub	sp, #40	; 0x28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c14:	f107 0318 	add.w	r3, r7, #24
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a37      	ldr	r2, [pc, #220]	; (8001d04 <HAL_ADC_MspInit+0xf8>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d167      	bne.n	8001cfc <HAL_ADC_MspInit+0xf0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c2c:	4b36      	ldr	r3, [pc, #216]	; (8001d08 <HAL_ADC_MspInit+0xfc>)
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	4a35      	ldr	r2, [pc, #212]	; (8001d08 <HAL_ADC_MspInit+0xfc>)
 8001c32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c36:	6193      	str	r3, [r2, #24]
 8001c38:	4b33      	ldr	r3, [pc, #204]	; (8001d08 <HAL_ADC_MspInit+0xfc>)
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c44:	4b30      	ldr	r3, [pc, #192]	; (8001d08 <HAL_ADC_MspInit+0xfc>)
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	4a2f      	ldr	r2, [pc, #188]	; (8001d08 <HAL_ADC_MspInit+0xfc>)
 8001c4a:	f043 0310 	orr.w	r3, r3, #16
 8001c4e:	6193      	str	r3, [r2, #24]
 8001c50:	4b2d      	ldr	r3, [pc, #180]	; (8001d08 <HAL_ADC_MspInit+0xfc>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	f003 0310 	and.w	r3, r3, #16
 8001c58:	613b      	str	r3, [r7, #16]
 8001c5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5c:	4b2a      	ldr	r3, [pc, #168]	; (8001d08 <HAL_ADC_MspInit+0xfc>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	4a29      	ldr	r2, [pc, #164]	; (8001d08 <HAL_ADC_MspInit+0xfc>)
 8001c62:	f043 0304 	orr.w	r3, r3, #4
 8001c66:	6193      	str	r3, [r2, #24]
 8001c68:	4b27      	ldr	r3, [pc, #156]	; (8001d08 <HAL_ADC_MspInit+0xfc>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = Blower_VOLT_Pin|Cabin_Sensor_Pin|Evap_Sensor_Pin|Ambient_Sensor_Pin;
 8001c74:	230f      	movs	r3, #15
 8001c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c7c:	f107 0318 	add.w	r3, r7, #24
 8001c80:	4619      	mov	r1, r3
 8001c82:	4822      	ldr	r0, [pc, #136]	; (8001d0c <HAL_ADC_MspInit+0x100>)
 8001c84:	f001 fd78 	bl	8003778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Solar_Sensor_Pin|Airmix_FB_Pin|Mode_FB_Pin|Water_Sensor_Pin
 8001c88:	231f      	movs	r3, #31
 8001c8a:	61bb      	str	r3, [r7, #24]
                          |IGN_VOLT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c90:	f107 0318 	add.w	r3, r7, #24
 8001c94:	4619      	mov	r1, r3
 8001c96:	481e      	ldr	r0, [pc, #120]	; (8001d10 <HAL_ADC_MspInit+0x104>)
 8001c98:	f001 fd6e 	bl	8003778 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001c9c:	4b1d      	ldr	r3, [pc, #116]	; (8001d14 <HAL_ADC_MspInit+0x108>)
 8001c9e:	4a1e      	ldr	r2, [pc, #120]	; (8001d18 <HAL_ADC_MspInit+0x10c>)
 8001ca0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ca2:	4b1c      	ldr	r3, [pc, #112]	; (8001d14 <HAL_ADC_MspInit+0x108>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ca8:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <HAL_ADC_MspInit+0x108>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001cae:	4b19      	ldr	r3, [pc, #100]	; (8001d14 <HAL_ADC_MspInit+0x108>)
 8001cb0:	2280      	movs	r2, #128	; 0x80
 8001cb2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001cb4:	4b17      	ldr	r3, [pc, #92]	; (8001d14 <HAL_ADC_MspInit+0x108>)
 8001cb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cba:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001cbc:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <HAL_ADC_MspInit+0x108>)
 8001cbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cc2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001cc4:	4b13      	ldr	r3, [pc, #76]	; (8001d14 <HAL_ADC_MspInit+0x108>)
 8001cc6:	2220      	movs	r2, #32
 8001cc8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001cca:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <HAL_ADC_MspInit+0x108>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001cd0:	4810      	ldr	r0, [pc, #64]	; (8001d14 <HAL_ADC_MspInit+0x108>)
 8001cd2:	f001 fb63 	bl	800339c <HAL_DMA_Init>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8001cdc:	f7ff ff5e 	bl	8001b9c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a0c      	ldr	r2, [pc, #48]	; (8001d14 <HAL_ADC_MspInit+0x108>)
 8001ce4:	621a      	str	r2, [r3, #32]
 8001ce6:	4a0b      	ldr	r2, [pc, #44]	; (8001d14 <HAL_ADC_MspInit+0x108>)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001cec:	2200      	movs	r2, #0
 8001cee:	2100      	movs	r1, #0
 8001cf0:	2012      	movs	r0, #18
 8001cf2:	f001 f9cc 	bl	800308e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001cf6:	2012      	movs	r0, #18
 8001cf8:	f001 f9e5 	bl	80030c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001cfc:	bf00      	nop
 8001cfe:	3728      	adds	r7, #40	; 0x28
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40012400 	.word	0x40012400
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	40011000 	.word	0x40011000
 8001d10:	40010800 	.word	0x40010800
 8001d14:	200003b8 	.word	0x200003b8
 8001d18:	40020008 	.word	0x40020008

08001d1c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b088      	sub	sp, #32
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d24:	f107 0310 	add.w	r3, r7, #16
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
  if(hdac->Instance==DAC)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a18      	ldr	r2, [pc, #96]	; (8001d98 <HAL_DAC_MspInit+0x7c>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d129      	bne.n	8001d90 <HAL_DAC_MspInit+0x74>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001d3c:	4b17      	ldr	r3, [pc, #92]	; (8001d9c <HAL_DAC_MspInit+0x80>)
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	4a16      	ldr	r2, [pc, #88]	; (8001d9c <HAL_DAC_MspInit+0x80>)
 8001d42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001d46:	61d3      	str	r3, [r2, #28]
 8001d48:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <HAL_DAC_MspInit+0x80>)
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d54:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <HAL_DAC_MspInit+0x80>)
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	4a10      	ldr	r2, [pc, #64]	; (8001d9c <HAL_DAC_MspInit+0x80>)
 8001d5a:	f043 0304 	orr.w	r3, r3, #4
 8001d5e:	6193      	str	r3, [r2, #24]
 8001d60:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <HAL_DAC_MspInit+0x80>)
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	60bb      	str	r3, [r7, #8]
 8001d6a:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = Blower_Control_Pin;
 8001d6c:	2320      	movs	r3, #32
 8001d6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d70:	2303      	movs	r3, #3
 8001d72:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(Blower_Control_GPIO_Port, &GPIO_InitStruct);
 8001d74:	f107 0310 	add.w	r3, r7, #16
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4809      	ldr	r0, [pc, #36]	; (8001da0 <HAL_DAC_MspInit+0x84>)
 8001d7c:	f001 fcfc 	bl	8003778 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001d80:	2200      	movs	r2, #0
 8001d82:	2100      	movs	r1, #0
 8001d84:	2036      	movs	r0, #54	; 0x36
 8001d86:	f001 f982 	bl	800308e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d8a:	2036      	movs	r0, #54	; 0x36
 8001d8c:	f001 f99b 	bl	80030c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001d90:	bf00      	nop
 8001d92:	3720      	adds	r7, #32
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40007400 	.word	0x40007400
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40010800 	.word	0x40010800

08001da4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b088      	sub	sp, #32
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dac:	f107 0310 	add.w	r3, r7, #16
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a16      	ldr	r2, [pc, #88]	; (8001e18 <HAL_I2C_MspInit+0x74>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d124      	bne.n	8001e0e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc4:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <HAL_I2C_MspInit+0x78>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	4a14      	ldr	r2, [pc, #80]	; (8001e1c <HAL_I2C_MspInit+0x78>)
 8001dca:	f043 0308 	orr.w	r3, r3, #8
 8001dce:	6193      	str	r3, [r2, #24]
 8001dd0:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <HAL_I2C_MspInit+0x78>)
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	f003 0308 	and.w	r3, r3, #8
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001ddc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001de0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001de2:	2312      	movs	r3, #18
 8001de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001de6:	2303      	movs	r3, #3
 8001de8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dea:	f107 0310 	add.w	r3, r7, #16
 8001dee:	4619      	mov	r1, r3
 8001df0:	480b      	ldr	r0, [pc, #44]	; (8001e20 <HAL_I2C_MspInit+0x7c>)
 8001df2:	f001 fcc1 	bl	8003778 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001df6:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <HAL_I2C_MspInit+0x78>)
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	4a08      	ldr	r2, [pc, #32]	; (8001e1c <HAL_I2C_MspInit+0x78>)
 8001dfc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e00:	61d3      	str	r3, [r2, #28]
 8001e02:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_I2C_MspInit+0x78>)
 8001e04:	69db      	ldr	r3, [r3, #28]
 8001e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e0a:	60bb      	str	r3, [r7, #8]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001e0e:	bf00      	nop
 8001e10:	3720      	adds	r7, #32
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40005800 	.word	0x40005800
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	40010c00 	.word	0x40010c00

08001e24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08a      	sub	sp, #40	; 0x28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a22      	ldr	r2, [pc, #136]	; (8001ec8 <HAL_SPI_MspInit+0xa4>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d13d      	bne.n	8001ec0 <HAL_SPI_MspInit+0x9c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e44:	4b21      	ldr	r3, [pc, #132]	; (8001ecc <HAL_SPI_MspInit+0xa8>)
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	4a20      	ldr	r2, [pc, #128]	; (8001ecc <HAL_SPI_MspInit+0xa8>)
 8001e4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e4e:	6193      	str	r3, [r2, #24]
 8001e50:	4b1e      	ldr	r3, [pc, #120]	; (8001ecc <HAL_SPI_MspInit+0xa8>)
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e58:	613b      	str	r3, [r7, #16]
 8001e5a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5c:	4b1b      	ldr	r3, [pc, #108]	; (8001ecc <HAL_SPI_MspInit+0xa8>)
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	4a1a      	ldr	r2, [pc, #104]	; (8001ecc <HAL_SPI_MspInit+0xa8>)
 8001e62:	f043 0308 	orr.w	r3, r3, #8
 8001e66:	6193      	str	r3, [r2, #24]
 8001e68:	4b18      	ldr	r3, [pc, #96]	; (8001ecc <HAL_SPI_MspInit+0xa8>)
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	f003 0308 	and.w	r3, r3, #8
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = TLE_SCLK_Pin|TLE_SDI_Pin;
 8001e74:	2328      	movs	r3, #40	; 0x28
 8001e76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e80:	f107 0314 	add.w	r3, r7, #20
 8001e84:	4619      	mov	r1, r3
 8001e86:	4812      	ldr	r0, [pc, #72]	; (8001ed0 <HAL_SPI_MspInit+0xac>)
 8001e88:	f001 fc76 	bl	8003778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = TLE_SDO_Pin;
 8001e8c:	2310      	movs	r3, #16
 8001e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TLE_SDO_GPIO_Port, &GPIO_InitStruct);
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	480c      	ldr	r0, [pc, #48]	; (8001ed0 <HAL_SPI_MspInit+0xac>)
 8001ea0:	f001 fc6a 	bl	8003778 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8001ea4:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <HAL_SPI_MspInit+0xb0>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eba:	4a06      	ldr	r2, [pc, #24]	; (8001ed4 <HAL_SPI_MspInit+0xb0>)
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ec0:	bf00      	nop
 8001ec2:	3728      	adds	r7, #40	; 0x28
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40013000 	.word	0x40013000
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40010c00 	.word	0x40010c00
 8001ed4:	40010000 	.word	0x40010000

08001ed8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a46      	ldr	r2, [pc, #280]	; (8002000 <HAL_TIM_Base_MspInit+0x128>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d114      	bne.n	8001f14 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001eea:	4b46      	ldr	r3, [pc, #280]	; (8002004 <HAL_TIM_Base_MspInit+0x12c>)
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	4a45      	ldr	r2, [pc, #276]	; (8002004 <HAL_TIM_Base_MspInit+0x12c>)
 8001ef0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ef4:	6193      	str	r3, [r2, #24]
 8001ef6:	4b43      	ldr	r3, [pc, #268]	; (8002004 <HAL_TIM_Base_MspInit+0x12c>)
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001efe:	61fb      	str	r3, [r7, #28]
 8001f00:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001f02:	2200      	movs	r2, #0
 8001f04:	2100      	movs	r1, #0
 8001f06:	2019      	movs	r0, #25
 8001f08:	f001 f8c1 	bl	800308e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001f0c:	2019      	movs	r0, #25
 8001f0e:	f001 f8da 	bl	80030c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001f12:	e070      	b.n	8001ff6 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM3)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a3b      	ldr	r2, [pc, #236]	; (8002008 <HAL_TIM_Base_MspInit+0x130>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d10c      	bne.n	8001f38 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f1e:	4b39      	ldr	r3, [pc, #228]	; (8002004 <HAL_TIM_Base_MspInit+0x12c>)
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	4a38      	ldr	r2, [pc, #224]	; (8002004 <HAL_TIM_Base_MspInit+0x12c>)
 8001f24:	f043 0302 	orr.w	r3, r3, #2
 8001f28:	61d3      	str	r3, [r2, #28]
 8001f2a:	4b36      	ldr	r3, [pc, #216]	; (8002004 <HAL_TIM_Base_MspInit+0x12c>)
 8001f2c:	69db      	ldr	r3, [r3, #28]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	61bb      	str	r3, [r7, #24]
 8001f34:	69bb      	ldr	r3, [r7, #24]
}
 8001f36:	e05e      	b.n	8001ff6 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM4)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a33      	ldr	r2, [pc, #204]	; (800200c <HAL_TIM_Base_MspInit+0x134>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d10c      	bne.n	8001f5c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f42:	4b30      	ldr	r3, [pc, #192]	; (8002004 <HAL_TIM_Base_MspInit+0x12c>)
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	4a2f      	ldr	r2, [pc, #188]	; (8002004 <HAL_TIM_Base_MspInit+0x12c>)
 8001f48:	f043 0304 	orr.w	r3, r3, #4
 8001f4c:	61d3      	str	r3, [r2, #28]
 8001f4e:	4b2d      	ldr	r3, [pc, #180]	; (8002004 <HAL_TIM_Base_MspInit+0x12c>)
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	697b      	ldr	r3, [r7, #20]
}
 8001f5a:	e04c      	b.n	8001ff6 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM6)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a2b      	ldr	r2, [pc, #172]	; (8002010 <HAL_TIM_Base_MspInit+0x138>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d114      	bne.n	8001f90 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f66:	4b27      	ldr	r3, [pc, #156]	; (8002004 <HAL_TIM_Base_MspInit+0x12c>)
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	4a26      	ldr	r2, [pc, #152]	; (8002004 <HAL_TIM_Base_MspInit+0x12c>)
 8001f6c:	f043 0310 	orr.w	r3, r3, #16
 8001f70:	61d3      	str	r3, [r2, #28]
 8001f72:	4b24      	ldr	r3, [pc, #144]	; (8002004 <HAL_TIM_Base_MspInit+0x12c>)
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	f003 0310 	and.w	r3, r3, #16
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	2100      	movs	r1, #0
 8001f82:	2036      	movs	r0, #54	; 0x36
 8001f84:	f001 f883 	bl	800308e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f88:	2036      	movs	r0, #54	; 0x36
 8001f8a:	f001 f89c 	bl	80030c6 <HAL_NVIC_EnableIRQ>
}
 8001f8e:	e032      	b.n	8001ff6 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM7)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a1f      	ldr	r2, [pc, #124]	; (8002014 <HAL_TIM_Base_MspInit+0x13c>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d114      	bne.n	8001fc4 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001f9a:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <HAL_TIM_Base_MspInit+0x12c>)
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	4a19      	ldr	r2, [pc, #100]	; (8002004 <HAL_TIM_Base_MspInit+0x12c>)
 8001fa0:	f043 0320 	orr.w	r3, r3, #32
 8001fa4:	61d3      	str	r3, [r2, #28]
 8001fa6:	4b17      	ldr	r3, [pc, #92]	; (8002004 <HAL_TIM_Base_MspInit+0x12c>)
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	f003 0320 	and.w	r3, r3, #32
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	2037      	movs	r0, #55	; 0x37
 8001fb8:	f001 f869 	bl	800308e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001fbc:	2037      	movs	r0, #55	; 0x37
 8001fbe:	f001 f882 	bl	80030c6 <HAL_NVIC_EnableIRQ>
}
 8001fc2:	e018      	b.n	8001ff6 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM16)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a13      	ldr	r2, [pc, #76]	; (8002018 <HAL_TIM_Base_MspInit+0x140>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d113      	bne.n	8001ff6 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001fce:	4b0d      	ldr	r3, [pc, #52]	; (8002004 <HAL_TIM_Base_MspInit+0x12c>)
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	4a0c      	ldr	r2, [pc, #48]	; (8002004 <HAL_TIM_Base_MspInit+0x12c>)
 8001fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd8:	6193      	str	r3, [r2, #24]
 8001fda:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <HAL_TIM_Base_MspInit+0x12c>)
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe2:	60bb      	str	r3, [r7, #8]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	2100      	movs	r1, #0
 8001fea:	2019      	movs	r0, #25
 8001fec:	f001 f84f 	bl	800308e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001ff0:	2019      	movs	r0, #25
 8001ff2:	f001 f868 	bl	80030c6 <HAL_NVIC_EnableIRQ>
}
 8001ff6:	bf00      	nop
 8001ff8:	3720      	adds	r7, #32
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40012c00 	.word	0x40012c00
 8002004:	40021000 	.word	0x40021000
 8002008:	40000400 	.word	0x40000400
 800200c:	40000800 	.word	0x40000800
 8002010:	40001000 	.word	0x40001000
 8002014:	40001400 	.word	0x40001400
 8002018:	40014400 	.word	0x40014400

0800201c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b088      	sub	sp, #32
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002024:	f107 0310 	add.w	r3, r7, #16
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a10      	ldr	r2, [pc, #64]	; (8002078 <HAL_TIM_MspPostInit+0x5c>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d118      	bne.n	800206e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800203c:	4b0f      	ldr	r3, [pc, #60]	; (800207c <HAL_TIM_MspPostInit+0x60>)
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	4a0e      	ldr	r2, [pc, #56]	; (800207c <HAL_TIM_MspPostInit+0x60>)
 8002042:	f043 0308 	orr.w	r3, r3, #8
 8002046:	6193      	str	r3, [r2, #24]
 8002048:	4b0c      	ldr	r3, [pc, #48]	; (800207c <HAL_TIM_MspPostInit+0x60>)
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	f003 0308 	and.w	r3, r3, #8
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = LCD_Backlight_Pin;
 8002054:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002058:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205a:	2302      	movs	r3, #2
 800205c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205e:	2302      	movs	r3, #2
 8002060:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_Backlight_GPIO_Port, &GPIO_InitStruct);
 8002062:	f107 0310 	add.w	r3, r7, #16
 8002066:	4619      	mov	r1, r3
 8002068:	4805      	ldr	r0, [pc, #20]	; (8002080 <HAL_TIM_MspPostInit+0x64>)
 800206a:	f001 fb85 	bl	8003778 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800206e:	bf00      	nop
 8002070:	3720      	adds	r7, #32
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	40000800 	.word	0x40000800
 800207c:	40021000 	.word	0x40021000
 8002080:	40010c00 	.word	0x40010c00

08002084 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208c:	f107 0310 	add.w	r3, r7, #16
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a1c      	ldr	r2, [pc, #112]	; (8002110 <HAL_UART_MspInit+0x8c>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d131      	bne.n	8002108 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020a4:	4b1b      	ldr	r3, [pc, #108]	; (8002114 <HAL_UART_MspInit+0x90>)
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	4a1a      	ldr	r2, [pc, #104]	; (8002114 <HAL_UART_MspInit+0x90>)
 80020aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020ae:	6193      	str	r3, [r2, #24]
 80020b0:	4b18      	ldr	r3, [pc, #96]	; (8002114 <HAL_UART_MspInit+0x90>)
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020bc:	4b15      	ldr	r3, [pc, #84]	; (8002114 <HAL_UART_MspInit+0x90>)
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	4a14      	ldr	r2, [pc, #80]	; (8002114 <HAL_UART_MspInit+0x90>)
 80020c2:	f043 0304 	orr.w	r3, r3, #4
 80020c6:	6193      	str	r3, [r2, #24]
 80020c8:	4b12      	ldr	r3, [pc, #72]	; (8002114 <HAL_UART_MspInit+0x90>)
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	60bb      	str	r3, [r7, #8]
 80020d2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80020d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020da:	2302      	movs	r3, #2
 80020dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020de:	2303      	movs	r3, #3
 80020e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e2:	f107 0310 	add.w	r3, r7, #16
 80020e6:	4619      	mov	r1, r3
 80020e8:	480b      	ldr	r0, [pc, #44]	; (8002118 <HAL_UART_MspInit+0x94>)
 80020ea:	f001 fb45 	bl	8003778 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80020ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fc:	f107 0310 	add.w	r3, r7, #16
 8002100:	4619      	mov	r1, r3
 8002102:	4805      	ldr	r0, [pc, #20]	; (8002118 <HAL_UART_MspInit+0x94>)
 8002104:	f001 fb38 	bl	8003778 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002108:	bf00      	nop
 800210a:	3720      	adds	r7, #32
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40013800 	.word	0x40013800
 8002114:	40021000 	.word	0x40021000
 8002118:	40010800 	.word	0x40010800

0800211c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002120:	e7fe      	b.n	8002120 <NMI_Handler+0x4>

08002122 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002122:	b480      	push	{r7}
 8002124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002126:	e7fe      	b.n	8002126 <HardFault_Handler+0x4>

08002128 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800212c:	e7fe      	b.n	800212c <MemManage_Handler+0x4>

0800212e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800212e:	b480      	push	{r7}
 8002130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002132:	e7fe      	b.n	8002132 <BusFault_Handler+0x4>

08002134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002138:	e7fe      	b.n	8002138 <UsageFault_Handler+0x4>

0800213a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr

08002146 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002146:	b480      	push	{r7}
 8002148:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr

08002152 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002152:	b480      	push	{r7}
 8002154:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	46bd      	mov	sp, r7
 800215a:	bc80      	pop	{r7}
 800215c:	4770      	bx	lr

0800215e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002162:	f000 f9a1 	bl	80024a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}

0800216a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800216a:	b580      	push	{r7, lr}
 800216c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Blower_VOLT_Pin);
 800216e:	2001      	movs	r0, #1
 8002170:	f001 fcb6 	bl	8003ae0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002174:	bf00      	nop
 8002176:	bd80      	pop	{r7, pc}

08002178 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Cabin_Sensor_Pin);
 800217c:	2002      	movs	r0, #2
 800217e:	f001 fcaf 	bl	8003ae0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
	...

08002188 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800218c:	4802      	ldr	r0, [pc, #8]	; (8002198 <DMA1_Channel1_IRQHandler+0x10>)
 800218e:	f001 f9bf 	bl	8003510 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002192:	bf00      	nop
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	200003b8 	.word	0x200003b8

0800219c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80021a0:	4802      	ldr	r0, [pc, #8]	; (80021ac <ADC1_IRQHandler+0x10>)
 80021a2:	f000 fb0f 	bl	80027c4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20000330 	.word	0x20000330

080021b0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Blower_Control_Pin);
 80021b4:	2020      	movs	r0, #32
 80021b6:	f001 fc93 	bl	8003ae0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Airmix_Up_SW_Pin);
 80021ba:	2040      	movs	r0, #64	; 0x40
 80021bc:	f001 fc90 	bl	8003ae0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Airmix_Down_SW_Pin);
 80021c0:	2080      	movs	r0, #128	; 0x80
 80021c2:	f001 fc8d 	bl	8003ae0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(POWER_SW_Pin);
 80021c6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80021ca:	f001 fc89 	bl	8003ae0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Blower_Down_SW_Pin);
 80021ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80021d2:	f001 fc85 	bl	8003ae0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
	...

080021dc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80021e0:	4803      	ldr	r0, [pc, #12]	; (80021f0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80021e2:	f003 fed3 	bl	8005f8c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80021e6:	4803      	ldr	r0, [pc, #12]	; (80021f4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80021e8:	f003 fed0 	bl	8005f8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80021ec:	bf00      	nop
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	20000444 	.word	0x20000444
 80021f4:	200004e4 	.word	0x200004e4

080021f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LCD_SDA_Pin);
 80021fc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002200:	f001 fc6e 	bl	8003ae0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Illumination_Pin);
 8002204:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002208:	f001 fc6a 	bl	8003ae0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(AUTO_SW_Pin);
 800220c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002210:	f001 fc66 	bl	8003ae0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DEF_SW_Pin);
 8002214:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002218:	f001 fc62 	bl	8003ae0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Mode_SW_Pin);
 800221c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002220:	f001 fc5e 	bl	8003ae0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002224:	bf00      	nop
 8002226:	bd80      	pop	{r7, pc}

08002228 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800222c:	4803      	ldr	r0, [pc, #12]	; (800223c <TIM6_DAC_IRQHandler+0x14>)
 800222e:	f003 fead 	bl	8005f8c <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac);
 8002232:	4803      	ldr	r0, [pc, #12]	; (8002240 <TIM6_DAC_IRQHandler+0x18>)
 8002234:	f000 ffd4 	bl	80031e0 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002238:	bf00      	nop
 800223a:	bd80      	pop	{r7, pc}
 800223c:	200003fc 	.word	0x200003fc
 8002240:	200003a4 	.word	0x200003a4

08002244 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002248:	4802      	ldr	r0, [pc, #8]	; (8002254 <TIM7_IRQHandler+0x10>)
 800224a:	f003 fe9f 	bl	8005f8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	2000052c 	.word	0x2000052c

08002258 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
	return 1;
 800225c:	2301      	movs	r3, #1
}
 800225e:	4618      	mov	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr

08002266 <_kill>:

int _kill(int pid, int sig)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
 800226e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002270:	f00b fc9c 	bl	800dbac <__errno>
 8002274:	4603      	mov	r3, r0
 8002276:	2216      	movs	r2, #22
 8002278:	601a      	str	r2, [r3, #0]
	return -1;
 800227a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800227e:	4618      	mov	r0, r3
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <_exit>:

void _exit (int status)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800228e:	f04f 31ff 	mov.w	r1, #4294967295
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7ff ffe7 	bl	8002266 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002298:	e7fe      	b.n	8002298 <_exit+0x12>

0800229a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b086      	sub	sp, #24
 800229e:	af00      	add	r7, sp, #0
 80022a0:	60f8      	str	r0, [r7, #12]
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	e00a      	b.n	80022c2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022ac:	f3af 8000 	nop.w
 80022b0:	4601      	mov	r1, r0
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	1c5a      	adds	r2, r3, #1
 80022b6:	60ba      	str	r2, [r7, #8]
 80022b8:	b2ca      	uxtb	r2, r1
 80022ba:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	3301      	adds	r3, #1
 80022c0:	617b      	str	r3, [r7, #20]
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	dbf0      	blt.n	80022ac <_read+0x12>
	}

return len;
 80022ca:	687b      	ldr	r3, [r7, #4]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3718      	adds	r7, #24
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e0:	2300      	movs	r3, #0
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	e009      	b.n	80022fa <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	1c5a      	adds	r2, r3, #1
 80022ea:	60ba      	str	r2, [r7, #8]
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	3301      	adds	r3, #1
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	697a      	ldr	r2, [r7, #20]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	429a      	cmp	r2, r3
 8002300:	dbf1      	blt.n	80022e6 <_write+0x12>
	}
	return len;
 8002302:	687b      	ldr	r3, [r7, #4]
}
 8002304:	4618      	mov	r0, r3
 8002306:	3718      	adds	r7, #24
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}

0800230c <_close>:

int _close(int file)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
	return -1;
 8002314:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002318:	4618      	mov	r0, r3
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	bc80      	pop	{r7}
 8002320:	4770      	bx	lr

08002322 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
 800232a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002332:	605a      	str	r2, [r3, #4]
	return 0;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	bc80      	pop	{r7}
 800233e:	4770      	bx	lr

08002340 <_isatty>:

int _isatty(int file)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
	return 1;
 8002348:	2301      	movs	r3, #1
}
 800234a:	4618      	mov	r0, r3
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr

08002354 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
	return 0;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr

0800236c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002374:	4a14      	ldr	r2, [pc, #80]	; (80023c8 <_sbrk+0x5c>)
 8002376:	4b15      	ldr	r3, [pc, #84]	; (80023cc <_sbrk+0x60>)
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002380:	4b13      	ldr	r3, [pc, #76]	; (80023d0 <_sbrk+0x64>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d102      	bne.n	800238e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002388:	4b11      	ldr	r3, [pc, #68]	; (80023d0 <_sbrk+0x64>)
 800238a:	4a12      	ldr	r2, [pc, #72]	; (80023d4 <_sbrk+0x68>)
 800238c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800238e:	4b10      	ldr	r3, [pc, #64]	; (80023d0 <_sbrk+0x64>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4413      	add	r3, r2
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	429a      	cmp	r2, r3
 800239a:	d207      	bcs.n	80023ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800239c:	f00b fc06 	bl	800dbac <__errno>
 80023a0:	4603      	mov	r3, r0
 80023a2:	220c      	movs	r2, #12
 80023a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023a6:	f04f 33ff 	mov.w	r3, #4294967295
 80023aa:	e009      	b.n	80023c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023ac:	4b08      	ldr	r3, [pc, #32]	; (80023d0 <_sbrk+0x64>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023b2:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <_sbrk+0x64>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4413      	add	r3, r2
 80023ba:	4a05      	ldr	r2, [pc, #20]	; (80023d0 <_sbrk+0x64>)
 80023bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023be:	68fb      	ldr	r3, [r7, #12]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3718      	adds	r7, #24
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	20002000 	.word	0x20002000
 80023cc:	00000400 	.word	0x00000400
 80023d0:	20000204 	.word	0x20000204
 80023d4:	200005d0 	.word	0x200005d0

080023d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023dc:	bf00      	nop
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr

080023e4 <Reset_Handler>:
 80023e4:	2100      	movs	r1, #0
 80023e6:	e003      	b.n	80023f0 <LoopCopyDataInit>

080023e8 <CopyDataInit>:
 80023e8:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <LoopFillZerobss+0x14>)
 80023ea:	585b      	ldr	r3, [r3, r1]
 80023ec:	5043      	str	r3, [r0, r1]
 80023ee:	3104      	adds	r1, #4

080023f0 <LoopCopyDataInit>:
 80023f0:	480a      	ldr	r0, [pc, #40]	; (800241c <LoopFillZerobss+0x18>)
 80023f2:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <LoopFillZerobss+0x1c>)
 80023f4:	1842      	adds	r2, r0, r1
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d3f6      	bcc.n	80023e8 <CopyDataInit>
 80023fa:	4a0a      	ldr	r2, [pc, #40]	; (8002424 <LoopFillZerobss+0x20>)
 80023fc:	e002      	b.n	8002404 <LoopFillZerobss>

080023fe <FillZerobss>:
 80023fe:	2300      	movs	r3, #0
 8002400:	f842 3b04 	str.w	r3, [r2], #4

08002404 <LoopFillZerobss>:
 8002404:	4b08      	ldr	r3, [pc, #32]	; (8002428 <LoopFillZerobss+0x24>)
 8002406:	429a      	cmp	r2, r3
 8002408:	d3f9      	bcc.n	80023fe <FillZerobss>
 800240a:	f7ff ffe5 	bl	80023d8 <SystemInit>
 800240e:	f00b fbd3 	bl	800dbb8 <__libc_init_array>
 8002412:	f7fe ff19 	bl	8001248 <main>
 8002416:	4770      	bx	lr
 8002418:	08011b04 	.word	0x08011b04
 800241c:	20000000 	.word	0x20000000
 8002420:	200001e8 	.word	0x200001e8
 8002424:	200001e8 	.word	0x200001e8
 8002428:	200005d0 	.word	0x200005d0

0800242c <CEC_IRQHandler>:
 800242c:	e7fe      	b.n	800242c <CEC_IRQHandler>

0800242e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	af00      	add	r7, sp, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002432:	2003      	movs	r0, #3
 8002434:	f000 fe20 	bl	8003078 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002438:	2000      	movs	r0, #0
 800243a:	f000 f805 	bl	8002448 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800243e:	f7ff fbb3 	bl	8001ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	bd80      	pop	{r7, pc}

08002448 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002450:	4b12      	ldr	r3, [pc, #72]	; (800249c <HAL_InitTick+0x54>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	4b12      	ldr	r3, [pc, #72]	; (80024a0 <HAL_InitTick+0x58>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	4619      	mov	r1, r3
 800245a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800245e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002462:	fbb2 f3f3 	udiv	r3, r2, r3
 8002466:	4618      	mov	r0, r3
 8002468:	f000 fe3b 	bl	80030e2 <HAL_SYSTICK_Config>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e00e      	b.n	8002494 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b0f      	cmp	r3, #15
 800247a:	d80a      	bhi.n	8002492 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800247c:	2200      	movs	r2, #0
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	f04f 30ff 	mov.w	r0, #4294967295
 8002484:	f000 fe03 	bl	800308e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002488:	4a06      	ldr	r2, [pc, #24]	; (80024a4 <HAL_InitTick+0x5c>)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	e000      	b.n	8002494 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
}
 8002494:	4618      	mov	r0, r3
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	20000000 	.word	0x20000000
 80024a0:	20000008 	.word	0x20000008
 80024a4:	20000004 	.word	0x20000004

080024a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024ac:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <HAL_IncTick+0x1c>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	461a      	mov	r2, r3
 80024b2:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <HAL_IncTick+0x20>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4413      	add	r3, r2
 80024b8:	4a03      	ldr	r2, [pc, #12]	; (80024c8 <HAL_IncTick+0x20>)
 80024ba:	6013      	str	r3, [r2, #0]
}
 80024bc:	bf00      	nop
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr
 80024c4:	20000008 	.word	0x20000008
 80024c8:	20000574 	.word	0x20000574

080024cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  return uwTick;
 80024d0:	4b02      	ldr	r3, [pc, #8]	; (80024dc <HAL_GetTick+0x10>)
 80024d2:	681b      	ldr	r3, [r3, #0]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr
 80024dc:	20000574 	.word	0x20000574

080024e0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b086      	sub	sp, #24
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024e8:	2300      	movs	r3, #0
 80024ea:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e0be      	b.n	8002680 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250c:	2b00      	cmp	r3, #0
 800250e:	d109      	bne.n	8002524 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff fb74 	bl	8001c0c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 fb7d 	bl	8002c24 <ADC_ConversionStop_Disable>
 800252a:	4603      	mov	r3, r0
 800252c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002532:	f003 0310 	and.w	r3, r3, #16
 8002536:	2b00      	cmp	r3, #0
 8002538:	f040 8099 	bne.w	800266e <HAL_ADC_Init+0x18e>
 800253c:	7dfb      	ldrb	r3, [r7, #23]
 800253e:	2b00      	cmp	r3, #0
 8002540:	f040 8095 	bne.w	800266e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002548:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800254c:	f023 0302 	bic.w	r3, r3, #2
 8002550:	f043 0202 	orr.w	r2, r3, #2
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002560:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	7b1b      	ldrb	r3, [r3, #12]
 8002566:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002568:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800256a:	68ba      	ldr	r2, [r7, #8]
 800256c:	4313      	orrs	r3, r2
 800256e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002578:	d003      	beq.n	8002582 <HAL_ADC_Init+0xa2>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d102      	bne.n	8002588 <HAL_ADC_Init+0xa8>
 8002582:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002586:	e000      	b.n	800258a <HAL_ADC_Init+0xaa>
 8002588:	2300      	movs	r3, #0
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	4313      	orrs	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	7d1b      	ldrb	r3, [r3, #20]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d119      	bne.n	80025cc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	7b1b      	ldrb	r3, [r3, #12]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d109      	bne.n	80025b4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	3b01      	subs	r3, #1
 80025a6:	035a      	lsls	r2, r3, #13
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025b0:	613b      	str	r3, [r7, #16]
 80025b2:	e00b      	b.n	80025cc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b8:	f043 0220 	orr.w	r2, r3, #32
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c4:	f043 0201 	orr.w	r2, r3, #1
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	430a      	orrs	r2, r1
 80025de:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689a      	ldr	r2, [r3, #8]
 80025e6:	4b28      	ldr	r3, [pc, #160]	; (8002688 <HAL_ADC_Init+0x1a8>)
 80025e8:	4013      	ands	r3, r2
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6812      	ldr	r2, [r2, #0]
 80025ee:	68b9      	ldr	r1, [r7, #8]
 80025f0:	430b      	orrs	r3, r1
 80025f2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025fc:	d003      	beq.n	8002606 <HAL_ADC_Init+0x126>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d104      	bne.n	8002610 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	3b01      	subs	r3, #1
 800260c:	051b      	lsls	r3, r3, #20
 800260e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002616:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	430a      	orrs	r2, r1
 8002622:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689a      	ldr	r2, [r3, #8]
 800262a:	4b18      	ldr	r3, [pc, #96]	; (800268c <HAL_ADC_Init+0x1ac>)
 800262c:	4013      	ands	r3, r2
 800262e:	68ba      	ldr	r2, [r7, #8]
 8002630:	429a      	cmp	r2, r3
 8002632:	d10b      	bne.n	800264c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800263e:	f023 0303 	bic.w	r3, r3, #3
 8002642:	f043 0201 	orr.w	r2, r3, #1
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800264a:	e018      	b.n	800267e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002650:	f023 0312 	bic.w	r3, r3, #18
 8002654:	f043 0210 	orr.w	r2, r3, #16
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002660:	f043 0201 	orr.w	r2, r3, #1
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800266c:	e007      	b.n	800267e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002672:	f043 0210 	orr.w	r2, r3, #16
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800267e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	ffe1f7fd 	.word	0xffe1f7fd
 800268c:	ff1f0efe 	.word	0xff1f0efe

08002690 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800269c:	2300      	movs	r3, #0
 800269e:	75fb      	strb	r3, [r7, #23]
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d101      	bne.n	80026ae <HAL_ADC_Start_DMA+0x1e>
 80026aa:	2302      	movs	r3, #2
 80026ac:	e080      	b.n	80027b0 <HAL_ADC_Start_DMA+0x120>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f000 fa5a 	bl	8002b70 <ADC_Enable>
 80026bc:	4603      	mov	r3, r0
 80026be:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80026c0:	7dfb      	ldrb	r3, [r7, #23]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d16f      	bne.n	80027a6 <HAL_ADC_Start_DMA+0x116>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ca:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026ce:	f023 0301 	bic.w	r3, r3, #1
 80026d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	629a      	str	r2, [r3, #40]	; 0x28
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d007      	beq.n	8002704 <HAL_ADC_Start_DMA+0x74>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026fc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	629a      	str	r2, [r3, #40]	; 0x28
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002708:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d006      	beq.n	800271e <HAL_ADC_Start_DMA+0x8e>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002714:	f023 0206 	bic.w	r2, r3, #6
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	62da      	str	r2, [r3, #44]	; 0x2c
 800271c:	e002      	b.n	8002724 <HAL_ADC_Start_DMA+0x94>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	4a21      	ldr	r2, [pc, #132]	; (80027b8 <HAL_ADC_Start_DMA+0x128>)
 8002732:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6a1b      	ldr	r3, [r3, #32]
 8002738:	4a20      	ldr	r2, [pc, #128]	; (80027bc <HAL_ADC_Start_DMA+0x12c>)
 800273a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	4a1f      	ldr	r2, [pc, #124]	; (80027c0 <HAL_ADC_Start_DMA+0x130>)
 8002742:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f06f 0202 	mvn.w	r2, #2
 800274c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	689a      	ldr	r2, [r3, #8]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800275c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6a18      	ldr	r0, [r3, #32]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	334c      	adds	r3, #76	; 0x4c
 8002768:	4619      	mov	r1, r3
 800276a:	68ba      	ldr	r2, [r7, #8]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f000 fe6f 	bl	8003450 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800277c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002780:	d108      	bne.n	8002794 <HAL_ADC_Start_DMA+0x104>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002790:	609a      	str	r2, [r3, #8]
 8002792:	e00c      	b.n	80027ae <HAL_ADC_Start_DMA+0x11e>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689a      	ldr	r2, [r3, #8]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	e003      	b.n	80027ae <HAL_ADC_Start_DMA+0x11e>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
 80027ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3718      	adds	r7, #24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	08002ca7 	.word	0x08002ca7
 80027bc:	08002d23 	.word	0x08002d23
 80027c0:	08002d3f 	.word	0x08002d3f

080027c4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f003 0320 	and.w	r3, r3, #32
 80027d6:	2b20      	cmp	r3, #32
 80027d8:	d140      	bne.n	800285c <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d139      	bne.n	800285c <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ec:	f003 0310 	and.w	r3, r3, #16
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d105      	bne.n	8002800 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800280a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800280e:	d11d      	bne.n	800284c <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002814:	2b00      	cmp	r3, #0
 8002816:	d119      	bne.n	800284c <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0220 	bic.w	r2, r2, #32
 8002826:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002838:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d105      	bne.n	800284c <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002844:	f043 0201 	orr.w	r2, r3, #1
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f004 fb67 	bl	8006f20 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f06f 0212 	mvn.w	r2, #18
 800285a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002866:	2b80      	cmp	r3, #128	; 0x80
 8002868:	d14f      	bne.n	800290a <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b04      	cmp	r3, #4
 8002876:	d148      	bne.n	800290a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287c:	f003 0310 	and.w	r3, r3, #16
 8002880:	2b00      	cmp	r3, #0
 8002882:	d105      	bne.n	8002890 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002888:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800289a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 800289e:	d012      	beq.n	80028c6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d125      	bne.n	80028fa <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80028b8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80028bc:	d11d      	bne.n	80028fa <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d119      	bne.n	80028fa <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028d4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d105      	bne.n	80028fa <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f2:	f043 0201 	orr.w	r2, r3, #1
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 fae6 	bl	8002ecc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f06f 020c 	mvn.w	r2, #12
 8002908:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002914:	2b40      	cmp	r3, #64	; 0x40
 8002916:	d114      	bne.n	8002942 <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b01      	cmp	r3, #1
 8002924:	d10d      	bne.n	8002942 <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 f812 	bl	800295c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f06f 0201 	mvn.w	r2, #1
 8002940:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002942:	bf00      	nop
 8002944:	3708      	adds	r7, #8
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}

0800294a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	bc80      	pop	{r7}
 800295a:	4770      	bx	lr

0800295c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr

0800296e <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr

08002980 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800298a:	2300      	movs	r3, #0
 800298c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800298e:	2300      	movs	r3, #0
 8002990:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <HAL_ADC_ConfigChannel+0x20>
 800299c:	2302      	movs	r3, #2
 800299e:	e0dc      	b.n	8002b5a <HAL_ADC_ConfigChannel+0x1da>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2b06      	cmp	r3, #6
 80029ae:	d81c      	bhi.n	80029ea <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685a      	ldr	r2, [r3, #4]
 80029ba:	4613      	mov	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	3b05      	subs	r3, #5
 80029c2:	221f      	movs	r2, #31
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	4019      	ands	r1, r3
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	6818      	ldr	r0, [r3, #0]
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	4613      	mov	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	3b05      	subs	r3, #5
 80029dc:	fa00 f203 	lsl.w	r2, r0, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	430a      	orrs	r2, r1
 80029e6:	635a      	str	r2, [r3, #52]	; 0x34
 80029e8:	e03c      	b.n	8002a64 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	2b0c      	cmp	r3, #12
 80029f0:	d81c      	bhi.n	8002a2c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	4613      	mov	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	3b23      	subs	r3, #35	; 0x23
 8002a04:	221f      	movs	r2, #31
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	4019      	ands	r1, r3
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	6818      	ldr	r0, [r3, #0]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	4613      	mov	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3b23      	subs	r3, #35	; 0x23
 8002a1e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	430a      	orrs	r2, r1
 8002a28:	631a      	str	r2, [r3, #48]	; 0x30
 8002a2a:	e01b      	b.n	8002a64 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	4613      	mov	r3, r2
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3b41      	subs	r3, #65	; 0x41
 8002a3e:	221f      	movs	r2, #31
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	43db      	mvns	r3, r3
 8002a46:	4019      	ands	r1, r3
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	6818      	ldr	r0, [r3, #0]
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	4613      	mov	r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	4413      	add	r3, r2
 8002a56:	3b41      	subs	r3, #65	; 0x41
 8002a58:	fa00 f203 	lsl.w	r2, r0, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2b09      	cmp	r3, #9
 8002a6a:	d91c      	bls.n	8002aa6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68d9      	ldr	r1, [r3, #12]
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	4613      	mov	r3, r2
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3b1e      	subs	r3, #30
 8002a7e:	2207      	movs	r2, #7
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	43db      	mvns	r3, r3
 8002a86:	4019      	ands	r1, r3
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	6898      	ldr	r0, [r3, #8]
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	4613      	mov	r3, r2
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	4413      	add	r3, r2
 8002a96:	3b1e      	subs	r3, #30
 8002a98:	fa00 f203 	lsl.w	r2, r0, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	60da      	str	r2, [r3, #12]
 8002aa4:	e019      	b.n	8002ada <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6919      	ldr	r1, [r3, #16]
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	4413      	add	r3, r2
 8002ab6:	2207      	movs	r2, #7
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	43db      	mvns	r3, r3
 8002abe:	4019      	ands	r1, r3
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	6898      	ldr	r0, [r3, #8]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	4413      	add	r3, r2
 8002ace:	fa00 f203 	lsl.w	r2, r0, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2b10      	cmp	r3, #16
 8002ae0:	d003      	beq.n	8002aea <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ae6:	2b11      	cmp	r3, #17
 8002ae8:	d132      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a1d      	ldr	r2, [pc, #116]	; (8002b64 <HAL_ADC_ConfigChannel+0x1e4>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d125      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d126      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002b10:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2b10      	cmp	r3, #16
 8002b18:	d11a      	bne.n	8002b50 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b1a:	4b13      	ldr	r3, [pc, #76]	; (8002b68 <HAL_ADC_ConfigChannel+0x1e8>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a13      	ldr	r2, [pc, #76]	; (8002b6c <HAL_ADC_ConfigChannel+0x1ec>)
 8002b20:	fba2 2303 	umull	r2, r3, r2, r3
 8002b24:	0c9a      	lsrs	r2, r3, #18
 8002b26:	4613      	mov	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b30:	e002      	b.n	8002b38 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	3b01      	subs	r3, #1
 8002b36:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f9      	bne.n	8002b32 <HAL_ADC_ConfigChannel+0x1b2>
 8002b3e:	e007      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b44:	f043 0220 	orr.w	r2, r3, #32
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3714      	adds	r7, #20
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr
 8002b64:	40012400 	.word	0x40012400
 8002b68:	20000000 	.word	0x20000000
 8002b6c:	431bde83 	.word	0x431bde83

08002b70 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d040      	beq.n	8002c10 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f042 0201 	orr.w	r2, r2, #1
 8002b9c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b9e:	4b1f      	ldr	r3, [pc, #124]	; (8002c1c <ADC_Enable+0xac>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a1f      	ldr	r2, [pc, #124]	; (8002c20 <ADC_Enable+0xb0>)
 8002ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba8:	0c9b      	lsrs	r3, r3, #18
 8002baa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002bac:	e002      	b.n	8002bb4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f9      	bne.n	8002bae <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bba:	f7ff fc87 	bl	80024cc <HAL_GetTick>
 8002bbe:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002bc0:	e01f      	b.n	8002c02 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bc2:	f7ff fc83 	bl	80024cc <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	2b02      	cmp	r3, #2
 8002bce:	d918      	bls.n	8002c02 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 0301 	and.w	r3, r3, #1
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d011      	beq.n	8002c02 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be2:	f043 0210 	orr.w	r2, r3, #16
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bee:	f043 0201 	orr.w	r2, r3, #1
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e007      	b.n	8002c12 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d1d8      	bne.n	8002bc2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	20000000 	.word	0x20000000
 8002c20:	431bde83 	.word	0x431bde83

08002c24 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d12e      	bne.n	8002c9c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f022 0201 	bic.w	r2, r2, #1
 8002c4c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c4e:	f7ff fc3d 	bl	80024cc <HAL_GetTick>
 8002c52:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c54:	e01b      	b.n	8002c8e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c56:	f7ff fc39 	bl	80024cc <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d914      	bls.n	8002c8e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 0301 	and.w	r3, r3, #1
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d10d      	bne.n	8002c8e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c76:	f043 0210 	orr.w	r2, r3, #16
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c82:	f043 0201 	orr.w	r2, r3, #1
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e007      	b.n	8002c9e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d0dc      	beq.n	8002c56 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3710      	adds	r7, #16
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b084      	sub	sp, #16
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb2:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d127      	bne.n	8002d10 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002cd6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002cda:	d115      	bne.n	8002d08 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d111      	bne.n	8002d08 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d105      	bne.n	8002d08 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d00:	f043 0201 	orr.w	r2, r3, #1
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f004 f909 	bl	8006f20 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002d0e:	e004      	b.n	8002d1a <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	4798      	blx	r3
}
 8002d1a:	bf00      	nop
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b084      	sub	sp, #16
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f7ff fe0a 	bl	800294a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d36:	bf00      	nop
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b084      	sub	sp, #16
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d50:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5c:	f043 0204 	orr.w	r2, r3, #4
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f7ff fe02 	bl	800296e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002d6a:	bf00      	nop
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002d74:	b590      	push	{r4, r7, lr}
 8002d76:	b087      	sub	sp, #28
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d101      	bne.n	8002d92 <HAL_ADCEx_Calibration_Start+0x1e>
 8002d8e:	2302      	movs	r3, #2
 8002d90:	e095      	b.n	8002ebe <HAL_ADCEx_Calibration_Start+0x14a>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /* 1. Calibration prerequisite:                                             */
  /*    - ADC must be disabled for at least two ADC clock cycles in disable   */
  /*      mode before ADC enable                                              */
  /* Stop potential conversion on going, on regular and injected groups       */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7ff ff42 	bl	8002c24 <ADC_ConversionStop_Disable>
 8002da0:	4603      	mov	r3, r0
 8002da2:	75fb      	strb	r3, [r7, #23]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002da4:	7dfb      	ldrb	r3, [r7, #23]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f040 8084 	bne.w	8002eb4 <HAL_ADCEx_Calibration_Start+0x140>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002db4:	f023 0302 	bic.w	r3, r3, #2
 8002db8:	f043 0202 	orr.w	r2, r3, #2
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002dc0:	4b41      	ldr	r3, [pc, #260]	; (8002ec8 <HAL_ADCEx_Calibration_Start+0x154>)
 8002dc2:	681c      	ldr	r4, [r3, #0]
 8002dc4:	2002      	movs	r0, #2
 8002dc6:	f002 fb03 	bl	80053d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002dd0:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002dd2:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002dd4:	e002      	b.n	8002ddc <HAL_ADCEx_Calibration_Start+0x68>
    {
      wait_loop_index--;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1f9      	bne.n	8002dd6 <HAL_ADCEx_Calibration_Start+0x62>
    }
    
    /* 2. Enable the ADC peripheral */
    ADC_Enable(hadc);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7ff fec4 	bl	8002b70 <ADC_Enable>
    
    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689a      	ldr	r2, [r3, #8]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f042 0208 	orr.w	r2, r2, #8
 8002df6:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002df8:	f7ff fb68 	bl	80024cc <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002dfe:	e01b      	b.n	8002e38 <HAL_ADCEx_Calibration_Start+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002e00:	f7ff fb64 	bl	80024cc <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b0a      	cmp	r3, #10
 8002e0c:	d914      	bls.n	8002e38 <HAL_ADCEx_Calibration_Start+0xc4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f003 0308 	and.w	r3, r3, #8
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00d      	beq.n	8002e38 <HAL_ADCEx_Calibration_Start+0xc4>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e20:	f023 0312 	bic.w	r3, r3, #18
 8002e24:	f043 0210 	orr.w	r2, r3, #16
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e042      	b.n	8002ebe <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1dc      	bne.n	8002e00 <HAL_ADCEx_Calibration_Start+0x8c>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f042 0204 	orr.w	r2, r2, #4
 8002e54:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002e56:	f7ff fb39 	bl	80024cc <HAL_GetTick>
 8002e5a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002e5c:	e01b      	b.n	8002e96 <HAL_ADCEx_Calibration_Start+0x122>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002e5e:	f7ff fb35 	bl	80024cc <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	2b0a      	cmp	r3, #10
 8002e6a:	d914      	bls.n	8002e96 <HAL_ADCEx_Calibration_Start+0x122>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 0304 	and.w	r3, r3, #4
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00d      	beq.n	8002e96 <HAL_ADCEx_Calibration_Start+0x122>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e7e:	f023 0312 	bic.w	r3, r3, #18
 8002e82:	f043 0210 	orr.w	r2, r3, #16
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	629a      	str	r2, [r3, #40]	; 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e013      	b.n	8002ebe <HAL_ADCEx_Calibration_Start+0x14a>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1dc      	bne.n	8002e5e <HAL_ADCEx_Calibration_Start+0xea>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea8:	f023 0303 	bic.w	r3, r3, #3
 8002eac:	f043 0201 	orr.w	r2, r3, #1
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	371c      	adds	r7, #28
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd90      	pop	{r4, r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	20000000 	.word	0x20000000

08002ecc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bc80      	pop	{r7}
 8002edc:	4770      	bx	lr
	...

08002ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f003 0307 	and.w	r3, r3, #7
 8002eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ef0:	4b0c      	ldr	r3, [pc, #48]	; (8002f24 <__NVIC_SetPriorityGrouping+0x44>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002efc:	4013      	ands	r3, r2
 8002efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f12:	4a04      	ldr	r2, [pc, #16]	; (8002f24 <__NVIC_SetPriorityGrouping+0x44>)
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	60d3      	str	r3, [r2, #12]
}
 8002f18:	bf00      	nop
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bc80      	pop	{r7}
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	e000ed00 	.word	0xe000ed00

08002f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f2c:	4b04      	ldr	r3, [pc, #16]	; (8002f40 <__NVIC_GetPriorityGrouping+0x18>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	0a1b      	lsrs	r3, r3, #8
 8002f32:	f003 0307 	and.w	r3, r3, #7
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bc80      	pop	{r7}
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	e000ed00 	.word	0xe000ed00

08002f44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	db0b      	blt.n	8002f6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f56:	79fb      	ldrb	r3, [r7, #7]
 8002f58:	f003 021f 	and.w	r2, r3, #31
 8002f5c:	4906      	ldr	r1, [pc, #24]	; (8002f78 <__NVIC_EnableIRQ+0x34>)
 8002f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f62:	095b      	lsrs	r3, r3, #5
 8002f64:	2001      	movs	r0, #1
 8002f66:	fa00 f202 	lsl.w	r2, r0, r2
 8002f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f6e:	bf00      	nop
 8002f70:	370c      	adds	r7, #12
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bc80      	pop	{r7}
 8002f76:	4770      	bx	lr
 8002f78:	e000e100 	.word	0xe000e100

08002f7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	4603      	mov	r3, r0
 8002f84:	6039      	str	r1, [r7, #0]
 8002f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	db0a      	blt.n	8002fa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	490c      	ldr	r1, [pc, #48]	; (8002fc8 <__NVIC_SetPriority+0x4c>)
 8002f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9a:	0112      	lsls	r2, r2, #4
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	440b      	add	r3, r1
 8002fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fa4:	e00a      	b.n	8002fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	4908      	ldr	r1, [pc, #32]	; (8002fcc <__NVIC_SetPriority+0x50>)
 8002fac:	79fb      	ldrb	r3, [r7, #7]
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	3b04      	subs	r3, #4
 8002fb4:	0112      	lsls	r2, r2, #4
 8002fb6:	b2d2      	uxtb	r2, r2
 8002fb8:	440b      	add	r3, r1
 8002fba:	761a      	strb	r2, [r3, #24]
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bc80      	pop	{r7}
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	e000e100 	.word	0xe000e100
 8002fcc:	e000ed00 	.word	0xe000ed00

08002fd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b089      	sub	sp, #36	; 0x24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f003 0307 	and.w	r3, r3, #7
 8002fe2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	f1c3 0307 	rsb	r3, r3, #7
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	bf28      	it	cs
 8002fee:	2304      	movcs	r3, #4
 8002ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	2b06      	cmp	r3, #6
 8002ff8:	d902      	bls.n	8003000 <NVIC_EncodePriority+0x30>
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	3b03      	subs	r3, #3
 8002ffe:	e000      	b.n	8003002 <NVIC_EncodePriority+0x32>
 8003000:	2300      	movs	r3, #0
 8003002:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003004:	f04f 32ff 	mov.w	r2, #4294967295
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	43da      	mvns	r2, r3
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	401a      	ands	r2, r3
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003018:	f04f 31ff 	mov.w	r1, #4294967295
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	fa01 f303 	lsl.w	r3, r1, r3
 8003022:	43d9      	mvns	r1, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003028:	4313      	orrs	r3, r2
         );
}
 800302a:	4618      	mov	r0, r3
 800302c:	3724      	adds	r7, #36	; 0x24
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr

08003034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3b01      	subs	r3, #1
 8003040:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003044:	d301      	bcc.n	800304a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003046:	2301      	movs	r3, #1
 8003048:	e00f      	b.n	800306a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800304a:	4a0a      	ldr	r2, [pc, #40]	; (8003074 <SysTick_Config+0x40>)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3b01      	subs	r3, #1
 8003050:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003052:	210f      	movs	r1, #15
 8003054:	f04f 30ff 	mov.w	r0, #4294967295
 8003058:	f7ff ff90 	bl	8002f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800305c:	4b05      	ldr	r3, [pc, #20]	; (8003074 <SysTick_Config+0x40>)
 800305e:	2200      	movs	r2, #0
 8003060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003062:	4b04      	ldr	r3, [pc, #16]	; (8003074 <SysTick_Config+0x40>)
 8003064:	2207      	movs	r2, #7
 8003066:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	e000e010 	.word	0xe000e010

08003078 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7ff ff2d 	bl	8002ee0 <__NVIC_SetPriorityGrouping>
}
 8003086:	bf00      	nop
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800308e:	b580      	push	{r7, lr}
 8003090:	b086      	sub	sp, #24
 8003092:	af00      	add	r7, sp, #0
 8003094:	4603      	mov	r3, r0
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800309c:	2300      	movs	r3, #0
 800309e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030a0:	f7ff ff42 	bl	8002f28 <__NVIC_GetPriorityGrouping>
 80030a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	68b9      	ldr	r1, [r7, #8]
 80030aa:	6978      	ldr	r0, [r7, #20]
 80030ac:	f7ff ff90 	bl	8002fd0 <NVIC_EncodePriority>
 80030b0:	4602      	mov	r2, r0
 80030b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030b6:	4611      	mov	r1, r2
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff ff5f 	bl	8002f7c <__NVIC_SetPriority>
}
 80030be:	bf00      	nop
 80030c0:	3718      	adds	r7, #24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b082      	sub	sp, #8
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	4603      	mov	r3, r0
 80030ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff ff35 	bl	8002f44 <__NVIC_EnableIRQ>
}
 80030da:	bf00      	nop
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b082      	sub	sp, #8
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7ff ffa2 	bl	8003034 <SysTick_Config>
 80030f0:	4603      	mov	r3, r0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b082      	sub	sp, #8
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e014      	b.n	8003136 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	791b      	ldrb	r3, [r3, #4]
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d105      	bne.n	8003122 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f7fe fdfd 	bl	8001d1c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2202      	movs	r2, #2
 8003126:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800313e:	b480      	push	{r7}
 8003140:	b083      	sub	sp, #12
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
 8003146:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	795b      	ldrb	r3, [r3, #5]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d101      	bne.n	8003154 <HAL_DAC_Start+0x16>
 8003150:	2302      	movs	r3, #2
 8003152:	e040      	b.n	80031d6 <HAL_DAC_Start+0x98>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2202      	movs	r2, #2
 800315e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6819      	ldr	r1, [r3, #0]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	f003 0310 	and.w	r3, r3, #16
 800316c:	2201      	movs	r2, #1
 800316e:	409a      	lsls	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10f      	bne.n	800319e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003188:	2b3c      	cmp	r3, #60	; 0x3c
 800318a:	d11d      	bne.n	80031c8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f042 0201 	orr.w	r2, r2, #1
 800319a:	605a      	str	r2, [r3, #4]
 800319c:	e014      	b.n	80031c8 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	f003 0310 	and.w	r3, r3, #16
 80031ae:	213c      	movs	r1, #60	; 0x3c
 80031b0:	fa01 f303 	lsl.w	r3, r1, r3
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d107      	bne.n	80031c8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f042 0202 	orr.w	r2, r2, #2
 80031c6:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	bc80      	pop	{r7}
 80031de:	4770      	bx	lr

080031e0 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
#if !defined(DAC_SR_DMAUDR1) && !defined(DAC_SR_DMAUDR2)
  UNUSED(hdac);
#endif

#if defined(DAC_SR_DMAUDR1)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031f6:	d120      	bne.n	800323a <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003202:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003206:	d118      	bne.n	800323a <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2204      	movs	r2, #4
 800320c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	f043 0201 	orr.w	r2, r3, #1
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003222:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003232:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f000 f851 	bl	80032dc <HAL_DAC_DMAUnderrunCallbackCh1>
    }
  }
#endif /* DAC_SR_DMAUDR1 */

#if defined(DAC_SR_DMAUDR2)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003244:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003248:	d120      	bne.n	800328c <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003250:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003254:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003258:	d118      	bne.n	800328c <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2204      	movs	r2, #4
 800325e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	f043 0202 	orr.w	r2, r3, #2
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003274:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003284:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f87f 	bl	800338a <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_SR_DMAUDR2 */
}
 800328c:	bf00      	nop
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003294:	b480      	push	{r7}
 8003296:	b087      	sub	sp, #28
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
 80032a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80032a2:	2300      	movs	r3, #0
 80032a4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d105      	bne.n	80032be <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4413      	add	r3, r2
 80032b8:	3308      	adds	r3, #8
 80032ba:	617b      	str	r3, [r7, #20]
 80032bc:	e004      	b.n	80032c8 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80032be:	697a      	ldr	r2, [r7, #20]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4413      	add	r3, r2
 80032c4:	3314      	adds	r3, #20
 80032c6:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	461a      	mov	r2, r3
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	371c      	adds	r7, #28
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bc80      	pop	{r7}
 80032da:	4770      	bx	lr

080032dc <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bc80      	pop	{r7}
 80032ec:	4770      	bx	lr

080032ee <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b087      	sub	sp, #28
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	60f8      	str	r0, [r7, #12]
 80032f6:	60b9      	str	r1, [r7, #8]
 80032f8:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	795b      	ldrb	r3, [r3, #5]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d101      	bne.n	8003306 <HAL_DAC_ConfigChannel+0x18>
 8003302:	2302      	movs	r3, #2
 8003304:	e03c      	b.n	8003380 <HAL_DAC_ConfigChannel+0x92>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2201      	movs	r2, #1
 800330a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2202      	movs	r2, #2
 8003310:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f003 0310 	and.w	r3, r3, #16
 8003320:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	43db      	mvns	r3, r3
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	4013      	ands	r3, r2
 800332e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	4313      	orrs	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f003 0310 	and.w	r3, r3, #16
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	4313      	orrs	r3, r2
 800334c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6819      	ldr	r1, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f003 0310 	and.w	r3, r3, #16
 8003362:	22c0      	movs	r2, #192	; 0xc0
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	43da      	mvns	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	400a      	ands	r2, r1
 8003370:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2201      	movs	r2, #1
 8003376:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800337e:	2300      	movs	r3, #0
}
 8003380:	4618      	mov	r0, r3
 8003382:	371c      	adds	r7, #28
 8003384:	46bd      	mov	sp, r7
 8003386:	bc80      	pop	{r7}
 8003388:	4770      	bx	lr

0800338a <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800338a:	b480      	push	{r7}
 800338c:	b083      	sub	sp, #12
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003392:	bf00      	nop
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	bc80      	pop	{r7}
 800339a:	4770      	bx	lr

0800339c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e043      	b.n	800343a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	461a      	mov	r2, r3
 80033b8:	4b22      	ldr	r3, [pc, #136]	; (8003444 <HAL_DMA_Init+0xa8>)
 80033ba:	4413      	add	r3, r2
 80033bc:	4a22      	ldr	r2, [pc, #136]	; (8003448 <HAL_DMA_Init+0xac>)
 80033be:	fba2 2303 	umull	r2, r3, r2, r3
 80033c2:	091b      	lsrs	r3, r3, #4
 80033c4:	009a      	lsls	r2, r3, #2
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a1f      	ldr	r2, [pc, #124]	; (800344c <HAL_DMA_Init+0xb0>)
 80033ce:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2202      	movs	r2, #2
 80033d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80033e6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80033ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80033f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68db      	ldr	r3, [r3, #12]
 80033fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003400:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800340c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	69db      	ldr	r3, [r3, #28]
 8003412:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	4313      	orrs	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3714      	adds	r7, #20
 800343e:	46bd      	mov	sp, r7
 8003440:	bc80      	pop	{r7}
 8003442:	4770      	bx	lr
 8003444:	bffdfff8 	.word	0xbffdfff8
 8003448:	cccccccd 	.word	0xcccccccd
 800344c:	40020000 	.word	0x40020000

08003450 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
 800345c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800345e:	2300      	movs	r3, #0
 8003460:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d101      	bne.n	8003470 <HAL_DMA_Start_IT+0x20>
 800346c:	2302      	movs	r3, #2
 800346e:	e04a      	b.n	8003506 <HAL_DMA_Start_IT+0xb6>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800347e:	2b01      	cmp	r3, #1
 8003480:	d13a      	bne.n	80034f8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2202      	movs	r2, #2
 8003486:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2200      	movs	r2, #0
 800348e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 0201 	bic.w	r2, r2, #1
 800349e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	68b9      	ldr	r1, [r7, #8]
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 f938 	bl	800371c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d008      	beq.n	80034c6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 020e 	orr.w	r2, r2, #14
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	e00f      	b.n	80034e6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0204 	bic.w	r2, r2, #4
 80034d4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f042 020a 	orr.w	r2, r2, #10
 80034e4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f042 0201 	orr.w	r2, r2, #1
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	e005      	b.n	8003504 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003500:	2302      	movs	r3, #2
 8003502:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003504:	7dfb      	ldrb	r3, [r7, #23]
}
 8003506:	4618      	mov	r0, r3
 8003508:	3718      	adds	r7, #24
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
	...

08003510 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352c:	2204      	movs	r2, #4
 800352e:	409a      	lsls	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4013      	ands	r3, r2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d04f      	beq.n	80035d8 <HAL_DMA_IRQHandler+0xc8>
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	f003 0304 	and.w	r3, r3, #4
 800353e:	2b00      	cmp	r3, #0
 8003540:	d04a      	beq.n	80035d8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0320 	and.w	r3, r3, #32
 800354c:	2b00      	cmp	r3, #0
 800354e:	d107      	bne.n	8003560 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0204 	bic.w	r2, r2, #4
 800355e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a66      	ldr	r2, [pc, #408]	; (8003700 <HAL_DMA_IRQHandler+0x1f0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d029      	beq.n	80035be <HAL_DMA_IRQHandler+0xae>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a65      	ldr	r2, [pc, #404]	; (8003704 <HAL_DMA_IRQHandler+0x1f4>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d022      	beq.n	80035ba <HAL_DMA_IRQHandler+0xaa>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a63      	ldr	r2, [pc, #396]	; (8003708 <HAL_DMA_IRQHandler+0x1f8>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d01a      	beq.n	80035b4 <HAL_DMA_IRQHandler+0xa4>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a62      	ldr	r2, [pc, #392]	; (800370c <HAL_DMA_IRQHandler+0x1fc>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d012      	beq.n	80035ae <HAL_DMA_IRQHandler+0x9e>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a60      	ldr	r2, [pc, #384]	; (8003710 <HAL_DMA_IRQHandler+0x200>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d00a      	beq.n	80035a8 <HAL_DMA_IRQHandler+0x98>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a5f      	ldr	r2, [pc, #380]	; (8003714 <HAL_DMA_IRQHandler+0x204>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d102      	bne.n	80035a2 <HAL_DMA_IRQHandler+0x92>
 800359c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80035a0:	e00e      	b.n	80035c0 <HAL_DMA_IRQHandler+0xb0>
 80035a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80035a6:	e00b      	b.n	80035c0 <HAL_DMA_IRQHandler+0xb0>
 80035a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80035ac:	e008      	b.n	80035c0 <HAL_DMA_IRQHandler+0xb0>
 80035ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80035b2:	e005      	b.n	80035c0 <HAL_DMA_IRQHandler+0xb0>
 80035b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035b8:	e002      	b.n	80035c0 <HAL_DMA_IRQHandler+0xb0>
 80035ba:	2340      	movs	r3, #64	; 0x40
 80035bc:	e000      	b.n	80035c0 <HAL_DMA_IRQHandler+0xb0>
 80035be:	2304      	movs	r3, #4
 80035c0:	4a55      	ldr	r2, [pc, #340]	; (8003718 <HAL_DMA_IRQHandler+0x208>)
 80035c2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 8094 	beq.w	80036f6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80035d6:	e08e      	b.n	80036f6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035dc:	2202      	movs	r2, #2
 80035de:	409a      	lsls	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4013      	ands	r3, r2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d056      	beq.n	8003696 <HAL_DMA_IRQHandler+0x186>
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d051      	beq.n	8003696 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0320 	and.w	r3, r3, #32
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10b      	bne.n	8003618 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 020a 	bic.w	r2, r2, #10
 800360e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a38      	ldr	r2, [pc, #224]	; (8003700 <HAL_DMA_IRQHandler+0x1f0>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d029      	beq.n	8003676 <HAL_DMA_IRQHandler+0x166>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a37      	ldr	r2, [pc, #220]	; (8003704 <HAL_DMA_IRQHandler+0x1f4>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d022      	beq.n	8003672 <HAL_DMA_IRQHandler+0x162>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a35      	ldr	r2, [pc, #212]	; (8003708 <HAL_DMA_IRQHandler+0x1f8>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d01a      	beq.n	800366c <HAL_DMA_IRQHandler+0x15c>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a34      	ldr	r2, [pc, #208]	; (800370c <HAL_DMA_IRQHandler+0x1fc>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d012      	beq.n	8003666 <HAL_DMA_IRQHandler+0x156>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a32      	ldr	r2, [pc, #200]	; (8003710 <HAL_DMA_IRQHandler+0x200>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d00a      	beq.n	8003660 <HAL_DMA_IRQHandler+0x150>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a31      	ldr	r2, [pc, #196]	; (8003714 <HAL_DMA_IRQHandler+0x204>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d102      	bne.n	800365a <HAL_DMA_IRQHandler+0x14a>
 8003654:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003658:	e00e      	b.n	8003678 <HAL_DMA_IRQHandler+0x168>
 800365a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800365e:	e00b      	b.n	8003678 <HAL_DMA_IRQHandler+0x168>
 8003660:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003664:	e008      	b.n	8003678 <HAL_DMA_IRQHandler+0x168>
 8003666:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800366a:	e005      	b.n	8003678 <HAL_DMA_IRQHandler+0x168>
 800366c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003670:	e002      	b.n	8003678 <HAL_DMA_IRQHandler+0x168>
 8003672:	2320      	movs	r3, #32
 8003674:	e000      	b.n	8003678 <HAL_DMA_IRQHandler+0x168>
 8003676:	2302      	movs	r3, #2
 8003678:	4a27      	ldr	r2, [pc, #156]	; (8003718 <HAL_DMA_IRQHandler+0x208>)
 800367a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003688:	2b00      	cmp	r3, #0
 800368a:	d034      	beq.n	80036f6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003694:	e02f      	b.n	80036f6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	2208      	movs	r2, #8
 800369c:	409a      	lsls	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	4013      	ands	r3, r2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d028      	beq.n	80036f8 <HAL_DMA_IRQHandler+0x1e8>
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	f003 0308 	and.w	r3, r3, #8
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d023      	beq.n	80036f8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 020e 	bic.w	r2, r2, #14
 80036be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c8:	2101      	movs	r1, #1
 80036ca:	fa01 f202 	lsl.w	r2, r1, r2
 80036ce:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d004      	beq.n	80036f8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	4798      	blx	r3
    }
  }
  return;
 80036f6:	bf00      	nop
 80036f8:	bf00      	nop
}
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40020008 	.word	0x40020008
 8003704:	4002001c 	.word	0x4002001c
 8003708:	40020030 	.word	0x40020030
 800370c:	40020044 	.word	0x40020044
 8003710:	40020058 	.word	0x40020058
 8003714:	4002006c 	.word	0x4002006c
 8003718:	40020000 	.word	0x40020000

0800371c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
 8003728:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003732:	2101      	movs	r1, #1
 8003734:	fa01 f202 	lsl.w	r2, r1, r2
 8003738:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	2b10      	cmp	r3, #16
 8003748:	d108      	bne.n	800375c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800375a:	e007      	b.n	800376c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68ba      	ldr	r2, [r7, #8]
 8003762:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	60da      	str	r2, [r3, #12]
}
 800376c:	bf00      	nop
 800376e:	3714      	adds	r7, #20
 8003770:	46bd      	mov	sp, r7
 8003772:	bc80      	pop	{r7}
 8003774:	4770      	bx	lr
	...

08003778 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003778:	b480      	push	{r7}
 800377a:	b08b      	sub	sp, #44	; 0x2c
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003782:	2300      	movs	r3, #0
 8003784:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003786:	2300      	movs	r3, #0
 8003788:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800378a:	e169      	b.n	8003a60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800378c:	2201      	movs	r2, #1
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	69fa      	ldr	r2, [r7, #28]
 800379c:	4013      	ands	r3, r2
 800379e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	f040 8158 	bne.w	8003a5a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	4a9a      	ldr	r2, [pc, #616]	; (8003a18 <HAL_GPIO_Init+0x2a0>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d05e      	beq.n	8003872 <HAL_GPIO_Init+0xfa>
 80037b4:	4a98      	ldr	r2, [pc, #608]	; (8003a18 <HAL_GPIO_Init+0x2a0>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d875      	bhi.n	80038a6 <HAL_GPIO_Init+0x12e>
 80037ba:	4a98      	ldr	r2, [pc, #608]	; (8003a1c <HAL_GPIO_Init+0x2a4>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d058      	beq.n	8003872 <HAL_GPIO_Init+0xfa>
 80037c0:	4a96      	ldr	r2, [pc, #600]	; (8003a1c <HAL_GPIO_Init+0x2a4>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d86f      	bhi.n	80038a6 <HAL_GPIO_Init+0x12e>
 80037c6:	4a96      	ldr	r2, [pc, #600]	; (8003a20 <HAL_GPIO_Init+0x2a8>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d052      	beq.n	8003872 <HAL_GPIO_Init+0xfa>
 80037cc:	4a94      	ldr	r2, [pc, #592]	; (8003a20 <HAL_GPIO_Init+0x2a8>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d869      	bhi.n	80038a6 <HAL_GPIO_Init+0x12e>
 80037d2:	4a94      	ldr	r2, [pc, #592]	; (8003a24 <HAL_GPIO_Init+0x2ac>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d04c      	beq.n	8003872 <HAL_GPIO_Init+0xfa>
 80037d8:	4a92      	ldr	r2, [pc, #584]	; (8003a24 <HAL_GPIO_Init+0x2ac>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d863      	bhi.n	80038a6 <HAL_GPIO_Init+0x12e>
 80037de:	4a92      	ldr	r2, [pc, #584]	; (8003a28 <HAL_GPIO_Init+0x2b0>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d046      	beq.n	8003872 <HAL_GPIO_Init+0xfa>
 80037e4:	4a90      	ldr	r2, [pc, #576]	; (8003a28 <HAL_GPIO_Init+0x2b0>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d85d      	bhi.n	80038a6 <HAL_GPIO_Init+0x12e>
 80037ea:	2b12      	cmp	r3, #18
 80037ec:	d82a      	bhi.n	8003844 <HAL_GPIO_Init+0xcc>
 80037ee:	2b12      	cmp	r3, #18
 80037f0:	d859      	bhi.n	80038a6 <HAL_GPIO_Init+0x12e>
 80037f2:	a201      	add	r2, pc, #4	; (adr r2, 80037f8 <HAL_GPIO_Init+0x80>)
 80037f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f8:	08003873 	.word	0x08003873
 80037fc:	0800384d 	.word	0x0800384d
 8003800:	0800385f 	.word	0x0800385f
 8003804:	080038a1 	.word	0x080038a1
 8003808:	080038a7 	.word	0x080038a7
 800380c:	080038a7 	.word	0x080038a7
 8003810:	080038a7 	.word	0x080038a7
 8003814:	080038a7 	.word	0x080038a7
 8003818:	080038a7 	.word	0x080038a7
 800381c:	080038a7 	.word	0x080038a7
 8003820:	080038a7 	.word	0x080038a7
 8003824:	080038a7 	.word	0x080038a7
 8003828:	080038a7 	.word	0x080038a7
 800382c:	080038a7 	.word	0x080038a7
 8003830:	080038a7 	.word	0x080038a7
 8003834:	080038a7 	.word	0x080038a7
 8003838:	080038a7 	.word	0x080038a7
 800383c:	08003855 	.word	0x08003855
 8003840:	08003869 	.word	0x08003869
 8003844:	4a79      	ldr	r2, [pc, #484]	; (8003a2c <HAL_GPIO_Init+0x2b4>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d013      	beq.n	8003872 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800384a:	e02c      	b.n	80038a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	623b      	str	r3, [r7, #32]
          break;
 8003852:	e029      	b.n	80038a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	3304      	adds	r3, #4
 800385a:	623b      	str	r3, [r7, #32]
          break;
 800385c:	e024      	b.n	80038a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	3308      	adds	r3, #8
 8003864:	623b      	str	r3, [r7, #32]
          break;
 8003866:	e01f      	b.n	80038a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	330c      	adds	r3, #12
 800386e:	623b      	str	r3, [r7, #32]
          break;
 8003870:	e01a      	b.n	80038a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d102      	bne.n	8003880 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800387a:	2304      	movs	r3, #4
 800387c:	623b      	str	r3, [r7, #32]
          break;
 800387e:	e013      	b.n	80038a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d105      	bne.n	8003894 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003888:	2308      	movs	r3, #8
 800388a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	69fa      	ldr	r2, [r7, #28]
 8003890:	611a      	str	r2, [r3, #16]
          break;
 8003892:	e009      	b.n	80038a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003894:	2308      	movs	r3, #8
 8003896:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	69fa      	ldr	r2, [r7, #28]
 800389c:	615a      	str	r2, [r3, #20]
          break;
 800389e:	e003      	b.n	80038a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80038a0:	2300      	movs	r3, #0
 80038a2:	623b      	str	r3, [r7, #32]
          break;
 80038a4:	e000      	b.n	80038a8 <HAL_GPIO_Init+0x130>
          break;
 80038a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	2bff      	cmp	r3, #255	; 0xff
 80038ac:	d801      	bhi.n	80038b2 <HAL_GPIO_Init+0x13a>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	e001      	b.n	80038b6 <HAL_GPIO_Init+0x13e>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	3304      	adds	r3, #4
 80038b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	2bff      	cmp	r3, #255	; 0xff
 80038bc:	d802      	bhi.n	80038c4 <HAL_GPIO_Init+0x14c>
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	e002      	b.n	80038ca <HAL_GPIO_Init+0x152>
 80038c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c6:	3b08      	subs	r3, #8
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	210f      	movs	r1, #15
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	fa01 f303 	lsl.w	r3, r1, r3
 80038d8:	43db      	mvns	r3, r3
 80038da:	401a      	ands	r2, r3
 80038dc:	6a39      	ldr	r1, [r7, #32]
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	fa01 f303 	lsl.w	r3, r1, r3
 80038e4:	431a      	orrs	r2, r3
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	f000 80b1 	beq.w	8003a5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80038f8:	4b4d      	ldr	r3, [pc, #308]	; (8003a30 <HAL_GPIO_Init+0x2b8>)
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	4a4c      	ldr	r2, [pc, #304]	; (8003a30 <HAL_GPIO_Init+0x2b8>)
 80038fe:	f043 0301 	orr.w	r3, r3, #1
 8003902:	6193      	str	r3, [r2, #24]
 8003904:	4b4a      	ldr	r3, [pc, #296]	; (8003a30 <HAL_GPIO_Init+0x2b8>)
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	f003 0301 	and.w	r3, r3, #1
 800390c:	60bb      	str	r3, [r7, #8]
 800390e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003910:	4a48      	ldr	r2, [pc, #288]	; (8003a34 <HAL_GPIO_Init+0x2bc>)
 8003912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003914:	089b      	lsrs	r3, r3, #2
 8003916:	3302      	adds	r3, #2
 8003918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800391c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	f003 0303 	and.w	r3, r3, #3
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	220f      	movs	r2, #15
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	43db      	mvns	r3, r3
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	4013      	ands	r3, r2
 8003932:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a40      	ldr	r2, [pc, #256]	; (8003a38 <HAL_GPIO_Init+0x2c0>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d013      	beq.n	8003964 <HAL_GPIO_Init+0x1ec>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a3f      	ldr	r2, [pc, #252]	; (8003a3c <HAL_GPIO_Init+0x2c4>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d00d      	beq.n	8003960 <HAL_GPIO_Init+0x1e8>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a3e      	ldr	r2, [pc, #248]	; (8003a40 <HAL_GPIO_Init+0x2c8>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d007      	beq.n	800395c <HAL_GPIO_Init+0x1e4>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a3d      	ldr	r2, [pc, #244]	; (8003a44 <HAL_GPIO_Init+0x2cc>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d101      	bne.n	8003958 <HAL_GPIO_Init+0x1e0>
 8003954:	2303      	movs	r3, #3
 8003956:	e006      	b.n	8003966 <HAL_GPIO_Init+0x1ee>
 8003958:	2304      	movs	r3, #4
 800395a:	e004      	b.n	8003966 <HAL_GPIO_Init+0x1ee>
 800395c:	2302      	movs	r3, #2
 800395e:	e002      	b.n	8003966 <HAL_GPIO_Init+0x1ee>
 8003960:	2301      	movs	r3, #1
 8003962:	e000      	b.n	8003966 <HAL_GPIO_Init+0x1ee>
 8003964:	2300      	movs	r3, #0
 8003966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003968:	f002 0203 	and.w	r2, r2, #3
 800396c:	0092      	lsls	r2, r2, #2
 800396e:	4093      	lsls	r3, r2
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	4313      	orrs	r3, r2
 8003974:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003976:	492f      	ldr	r1, [pc, #188]	; (8003a34 <HAL_GPIO_Init+0x2bc>)
 8003978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397a:	089b      	lsrs	r3, r3, #2
 800397c:	3302      	adds	r3, #2
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d006      	beq.n	800399e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003990:	4b2d      	ldr	r3, [pc, #180]	; (8003a48 <HAL_GPIO_Init+0x2d0>)
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	492c      	ldr	r1, [pc, #176]	; (8003a48 <HAL_GPIO_Init+0x2d0>)
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	4313      	orrs	r3, r2
 800399a:	600b      	str	r3, [r1, #0]
 800399c:	e006      	b.n	80039ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800399e:	4b2a      	ldr	r3, [pc, #168]	; (8003a48 <HAL_GPIO_Init+0x2d0>)
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	43db      	mvns	r3, r3
 80039a6:	4928      	ldr	r1, [pc, #160]	; (8003a48 <HAL_GPIO_Init+0x2d0>)
 80039a8:	4013      	ands	r3, r2
 80039aa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d006      	beq.n	80039c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80039b8:	4b23      	ldr	r3, [pc, #140]	; (8003a48 <HAL_GPIO_Init+0x2d0>)
 80039ba:	685a      	ldr	r2, [r3, #4]
 80039bc:	4922      	ldr	r1, [pc, #136]	; (8003a48 <HAL_GPIO_Init+0x2d0>)
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	604b      	str	r3, [r1, #4]
 80039c4:	e006      	b.n	80039d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80039c6:	4b20      	ldr	r3, [pc, #128]	; (8003a48 <HAL_GPIO_Init+0x2d0>)
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	43db      	mvns	r3, r3
 80039ce:	491e      	ldr	r1, [pc, #120]	; (8003a48 <HAL_GPIO_Init+0x2d0>)
 80039d0:	4013      	ands	r3, r2
 80039d2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d006      	beq.n	80039ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80039e0:	4b19      	ldr	r3, [pc, #100]	; (8003a48 <HAL_GPIO_Init+0x2d0>)
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	4918      	ldr	r1, [pc, #96]	; (8003a48 <HAL_GPIO_Init+0x2d0>)
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	608b      	str	r3, [r1, #8]
 80039ec:	e006      	b.n	80039fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80039ee:	4b16      	ldr	r3, [pc, #88]	; (8003a48 <HAL_GPIO_Init+0x2d0>)
 80039f0:	689a      	ldr	r2, [r3, #8]
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	43db      	mvns	r3, r3
 80039f6:	4914      	ldr	r1, [pc, #80]	; (8003a48 <HAL_GPIO_Init+0x2d0>)
 80039f8:	4013      	ands	r3, r2
 80039fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d021      	beq.n	8003a4c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003a08:	4b0f      	ldr	r3, [pc, #60]	; (8003a48 <HAL_GPIO_Init+0x2d0>)
 8003a0a:	68da      	ldr	r2, [r3, #12]
 8003a0c:	490e      	ldr	r1, [pc, #56]	; (8003a48 <HAL_GPIO_Init+0x2d0>)
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	60cb      	str	r3, [r1, #12]
 8003a14:	e021      	b.n	8003a5a <HAL_GPIO_Init+0x2e2>
 8003a16:	bf00      	nop
 8003a18:	10320000 	.word	0x10320000
 8003a1c:	10310000 	.word	0x10310000
 8003a20:	10220000 	.word	0x10220000
 8003a24:	10210000 	.word	0x10210000
 8003a28:	10120000 	.word	0x10120000
 8003a2c:	10110000 	.word	0x10110000
 8003a30:	40021000 	.word	0x40021000
 8003a34:	40010000 	.word	0x40010000
 8003a38:	40010800 	.word	0x40010800
 8003a3c:	40010c00 	.word	0x40010c00
 8003a40:	40011000 	.word	0x40011000
 8003a44:	40011400 	.word	0x40011400
 8003a48:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003a4c:	4b0b      	ldr	r3, [pc, #44]	; (8003a7c <HAL_GPIO_Init+0x304>)
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	43db      	mvns	r3, r3
 8003a54:	4909      	ldr	r1, [pc, #36]	; (8003a7c <HAL_GPIO_Init+0x304>)
 8003a56:	4013      	ands	r3, r2
 8003a58:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a66:	fa22 f303 	lsr.w	r3, r2, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f47f ae8e 	bne.w	800378c <HAL_GPIO_Init+0x14>
  }
}
 8003a70:	bf00      	nop
 8003a72:	bf00      	nop
 8003a74:	372c      	adds	r7, #44	; 0x2c
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bc80      	pop	{r7}
 8003a7a:	4770      	bx	lr
 8003a7c:	40010400 	.word	0x40010400

08003a80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	460b      	mov	r3, r1
 8003a8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	887b      	ldrh	r3, [r7, #2]
 8003a92:	4013      	ands	r3, r2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d002      	beq.n	8003a9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	73fb      	strb	r3, [r7, #15]
 8003a9c:	e001      	b.n	8003aa2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3714      	adds	r7, #20
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bc80      	pop	{r7}
 8003aac:	4770      	bx	lr

08003aae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b083      	sub	sp, #12
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	807b      	strh	r3, [r7, #2]
 8003aba:	4613      	mov	r3, r2
 8003abc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003abe:	787b      	ldrb	r3, [r7, #1]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d003      	beq.n	8003acc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ac4:	887a      	ldrh	r2, [r7, #2]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003aca:	e003      	b.n	8003ad4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003acc:	887b      	ldrh	r3, [r7, #2]
 8003ace:	041a      	lsls	r2, r3, #16
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	611a      	str	r2, [r3, #16]
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bc80      	pop	{r7}
 8003adc:	4770      	bx	lr
	...

08003ae0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003aea:	4b08      	ldr	r3, [pc, #32]	; (8003b0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003aec:	695a      	ldr	r2, [r3, #20]
 8003aee:	88fb      	ldrh	r3, [r7, #6]
 8003af0:	4013      	ands	r3, r2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d006      	beq.n	8003b04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003af6:	4a05      	ldr	r2, [pc, #20]	; (8003b0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003af8:	88fb      	ldrh	r3, [r7, #6]
 8003afa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003afc:	88fb      	ldrh	r3, [r7, #6]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f005 f8ac 	bl	8008c5c <HAL_GPIO_EXTI_Callback>
  }
}
 8003b04:	bf00      	nop
 8003b06:	3708      	adds	r7, #8
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	40010400 	.word	0x40010400

08003b10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e12b      	b.n	8003d7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d106      	bne.n	8003b3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7fe f934 	bl	8001da4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2224      	movs	r2, #36	; 0x24
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 0201 	bic.w	r2, r2, #1
 8003b52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b74:	f001 fb40 	bl	80051f8 <HAL_RCC_GetPCLK1Freq>
 8003b78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	4a81      	ldr	r2, [pc, #516]	; (8003d84 <HAL_I2C_Init+0x274>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d807      	bhi.n	8003b94 <HAL_I2C_Init+0x84>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4a80      	ldr	r2, [pc, #512]	; (8003d88 <HAL_I2C_Init+0x278>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	bf94      	ite	ls
 8003b8c:	2301      	movls	r3, #1
 8003b8e:	2300      	movhi	r3, #0
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	e006      	b.n	8003ba2 <HAL_I2C_Init+0x92>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	4a7d      	ldr	r2, [pc, #500]	; (8003d8c <HAL_I2C_Init+0x27c>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	bf94      	ite	ls
 8003b9c:	2301      	movls	r3, #1
 8003b9e:	2300      	movhi	r3, #0
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e0e7      	b.n	8003d7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	4a78      	ldr	r2, [pc, #480]	; (8003d90 <HAL_I2C_Init+0x280>)
 8003bae:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb2:	0c9b      	lsrs	r3, r3, #18
 8003bb4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68ba      	ldr	r2, [r7, #8]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	6a1b      	ldr	r3, [r3, #32]
 8003bd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	4a6a      	ldr	r2, [pc, #424]	; (8003d84 <HAL_I2C_Init+0x274>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d802      	bhi.n	8003be4 <HAL_I2C_Init+0xd4>
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	3301      	adds	r3, #1
 8003be2:	e009      	b.n	8003bf8 <HAL_I2C_Init+0xe8>
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003bea:	fb02 f303 	mul.w	r3, r2, r3
 8003bee:	4a69      	ldr	r2, [pc, #420]	; (8003d94 <HAL_I2C_Init+0x284>)
 8003bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf4:	099b      	lsrs	r3, r3, #6
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6812      	ldr	r2, [r2, #0]
 8003bfc:	430b      	orrs	r3, r1
 8003bfe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c0a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	495c      	ldr	r1, [pc, #368]	; (8003d84 <HAL_I2C_Init+0x274>)
 8003c14:	428b      	cmp	r3, r1
 8003c16:	d819      	bhi.n	8003c4c <HAL_I2C_Init+0x13c>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	1e59      	subs	r1, r3, #1
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c26:	1c59      	adds	r1, r3, #1
 8003c28:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003c2c:	400b      	ands	r3, r1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00a      	beq.n	8003c48 <HAL_I2C_Init+0x138>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	1e59      	subs	r1, r3, #1
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c40:	3301      	adds	r3, #1
 8003c42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c46:	e051      	b.n	8003cec <HAL_I2C_Init+0x1dc>
 8003c48:	2304      	movs	r3, #4
 8003c4a:	e04f      	b.n	8003cec <HAL_I2C_Init+0x1dc>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d111      	bne.n	8003c78 <HAL_I2C_Init+0x168>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	1e58      	subs	r0, r3, #1
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6859      	ldr	r1, [r3, #4]
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	440b      	add	r3, r1
 8003c62:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c66:	3301      	adds	r3, #1
 8003c68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	bf0c      	ite	eq
 8003c70:	2301      	moveq	r3, #1
 8003c72:	2300      	movne	r3, #0
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	e012      	b.n	8003c9e <HAL_I2C_Init+0x18e>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	1e58      	subs	r0, r3, #1
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6859      	ldr	r1, [r3, #4]
 8003c80:	460b      	mov	r3, r1
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	440b      	add	r3, r1
 8003c86:	0099      	lsls	r1, r3, #2
 8003c88:	440b      	add	r3, r1
 8003c8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c8e:	3301      	adds	r3, #1
 8003c90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	bf0c      	ite	eq
 8003c98:	2301      	moveq	r3, #1
 8003c9a:	2300      	movne	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <HAL_I2C_Init+0x196>
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e022      	b.n	8003cec <HAL_I2C_Init+0x1dc>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10e      	bne.n	8003ccc <HAL_I2C_Init+0x1bc>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	1e58      	subs	r0, r3, #1
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6859      	ldr	r1, [r3, #4]
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	440b      	add	r3, r1
 8003cbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cca:	e00f      	b.n	8003cec <HAL_I2C_Init+0x1dc>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	1e58      	subs	r0, r3, #1
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6859      	ldr	r1, [r3, #4]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	440b      	add	r3, r1
 8003cda:	0099      	lsls	r1, r3, #2
 8003cdc:	440b      	add	r3, r1
 8003cde:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ce2:	3301      	adds	r3, #1
 8003ce4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ce8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003cec:	6879      	ldr	r1, [r7, #4]
 8003cee:	6809      	ldr	r1, [r1, #0]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	69da      	ldr	r2, [r3, #28]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	431a      	orrs	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003d1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	6911      	ldr	r1, [r2, #16]
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	68d2      	ldr	r2, [r2, #12]
 8003d26:	4311      	orrs	r1, r2
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	6812      	ldr	r2, [r2, #0]
 8003d2c:	430b      	orrs	r3, r1
 8003d2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	695a      	ldr	r2, [r3, #20]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	431a      	orrs	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	430a      	orrs	r2, r1
 8003d4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f042 0201 	orr.w	r2, r2, #1
 8003d5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2220      	movs	r2, #32
 8003d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	000186a0 	.word	0x000186a0
 8003d88:	001e847f 	.word	0x001e847f
 8003d8c:	003d08ff 	.word	0x003d08ff
 8003d90:	431bde83 	.word	0x431bde83
 8003d94:	10624dd3 	.word	0x10624dd3

08003d98 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b088      	sub	sp, #32
 8003d9c:	af02      	add	r7, sp, #8
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	607a      	str	r2, [r7, #4]
 8003da2:	461a      	mov	r2, r3
 8003da4:	460b      	mov	r3, r1
 8003da6:	817b      	strh	r3, [r7, #10]
 8003da8:	4613      	mov	r3, r2
 8003daa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003dac:	f7fe fb8e 	bl	80024cc <HAL_GetTick>
 8003db0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b20      	cmp	r3, #32
 8003dbc:	f040 80e0 	bne.w	8003f80 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	2319      	movs	r3, #25
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	4970      	ldr	r1, [pc, #448]	; (8003f8c <HAL_I2C_Master_Transmit+0x1f4>)
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f000 fc92 	bl	80046f4 <I2C_WaitOnFlagUntilTimeout>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	e0d3      	b.n	8003f82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d101      	bne.n	8003de8 <HAL_I2C_Master_Transmit+0x50>
 8003de4:	2302      	movs	r3, #2
 8003de6:	e0cc      	b.n	8003f82 <HAL_I2C_Master_Transmit+0x1ea>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d007      	beq.n	8003e0e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f042 0201 	orr.w	r2, r2, #1
 8003e0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e1c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2221      	movs	r2, #33	; 0x21
 8003e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2210      	movs	r2, #16
 8003e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	893a      	ldrh	r2, [r7, #8]
 8003e3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e44:	b29a      	uxth	r2, r3
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	4a50      	ldr	r2, [pc, #320]	; (8003f90 <HAL_I2C_Master_Transmit+0x1f8>)
 8003e4e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003e50:	8979      	ldrh	r1, [r7, #10]
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	6a3a      	ldr	r2, [r7, #32]
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f000 fafc 	bl	8004454 <I2C_MasterRequestWrite>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e08d      	b.n	8003f82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e66:	2300      	movs	r3, #0
 8003e68:	613b      	str	r3, [r7, #16]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	613b      	str	r3, [r7, #16]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	613b      	str	r3, [r7, #16]
 8003e7a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003e7c:	e066      	b.n	8003f4c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	6a39      	ldr	r1, [r7, #32]
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f000 fd0c 	bl	80048a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00d      	beq.n	8003eaa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d107      	bne.n	8003ea6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ea4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e06b      	b.n	8003f82 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eae:	781a      	ldrb	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b04      	cmp	r3, #4
 8003ee6:	d11b      	bne.n	8003f20 <HAL_I2C_Master_Transmit+0x188>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d017      	beq.n	8003f20 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef4:	781a      	ldrb	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	1c5a      	adds	r2, r3, #1
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f20:	697a      	ldr	r2, [r7, #20]
 8003f22:	6a39      	ldr	r1, [r7, #32]
 8003f24:	68f8      	ldr	r0, [r7, #12]
 8003f26:	f000 fcfc 	bl	8004922 <I2C_WaitOnBTFFlagUntilTimeout>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00d      	beq.n	8003f4c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f34:	2b04      	cmp	r3, #4
 8003f36:	d107      	bne.n	8003f48 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f46:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e01a      	b.n	8003f82 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d194      	bne.n	8003e7e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2220      	movs	r2, #32
 8003f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	e000      	b.n	8003f82 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003f80:	2302      	movs	r3, #2
  }
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3718      	adds	r7, #24
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	00100002 	.word	0x00100002
 8003f90:	ffff0000 	.word	0xffff0000

08003f94 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b08c      	sub	sp, #48	; 0x30
 8003f98:	af02      	add	r7, sp, #8
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	607a      	str	r2, [r7, #4]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	817b      	strh	r3, [r7, #10]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fac:	f7fe fa8e 	bl	80024cc <HAL_GetTick>
 8003fb0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b20      	cmp	r3, #32
 8003fbc:	f040 823f 	bne.w	800443e <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	2319      	movs	r3, #25
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	497f      	ldr	r1, [pc, #508]	; (80041c8 <HAL_I2C_Master_Receive+0x234>)
 8003fca:	68f8      	ldr	r0, [r7, #12]
 8003fcc:	f000 fb92 	bl	80046f4 <I2C_WaitOnFlagUntilTimeout>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d001      	beq.n	8003fda <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	e232      	b.n	8004440 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d101      	bne.n	8003fe8 <HAL_I2C_Master_Receive+0x54>
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	e22b      	b.n	8004440 <HAL_I2C_Master_Receive+0x4ac>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d007      	beq.n	800400e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f042 0201 	orr.w	r2, r2, #1
 800400c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800401c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2222      	movs	r2, #34	; 0x22
 8004022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2210      	movs	r2, #16
 800402a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	893a      	ldrh	r2, [r7, #8]
 800403e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004044:	b29a      	uxth	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	4a5f      	ldr	r2, [pc, #380]	; (80041cc <HAL_I2C_Master_Receive+0x238>)
 800404e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004050:	8979      	ldrh	r1, [r7, #10]
 8004052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f000 fa7e 	bl	8004558 <I2C_MasterRequestRead>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e1ec      	b.n	8004440 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800406a:	2b00      	cmp	r3, #0
 800406c:	d113      	bne.n	8004096 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800406e:	2300      	movs	r3, #0
 8004070:	61fb      	str	r3, [r7, #28]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	61fb      	str	r3, [r7, #28]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	61fb      	str	r3, [r7, #28]
 8004082:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	e1c0      	b.n	8004418 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800409a:	2b01      	cmp	r3, #1
 800409c:	d11e      	bne.n	80040dc <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80040ae:	b672      	cpsid	i
}
 80040b0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b2:	2300      	movs	r3, #0
 80040b4:	61bb      	str	r3, [r7, #24]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	61bb      	str	r3, [r7, #24]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	61bb      	str	r3, [r7, #24]
 80040c6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80040d8:	b662      	cpsie	i
}
 80040da:	e035      	b.n	8004148 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d11e      	bne.n	8004122 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040f2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80040f4:	b672      	cpsid	i
}
 80040f6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040f8:	2300      	movs	r3, #0
 80040fa:	617b      	str	r3, [r7, #20]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	617b      	str	r3, [r7, #20]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	617b      	str	r3, [r7, #20]
 800410c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800411c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800411e:	b662      	cpsie	i
}
 8004120:	e012      	b.n	8004148 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004130:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004132:	2300      	movs	r3, #0
 8004134:	613b      	str	r3, [r7, #16]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	613b      	str	r3, [r7, #16]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	613b      	str	r3, [r7, #16]
 8004146:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8004148:	e166      	b.n	8004418 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800414e:	2b03      	cmp	r3, #3
 8004150:	f200 811f 	bhi.w	8004392 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004158:	2b01      	cmp	r3, #1
 800415a:	d123      	bne.n	80041a4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800415c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800415e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 fc1f 	bl	80049a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e167      	b.n	8004440 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	691a      	ldr	r2, [r3, #16]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	b2d2      	uxtb	r2, r2
 800417c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800418c:	3b01      	subs	r3, #1
 800418e:	b29a      	uxth	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004198:	b29b      	uxth	r3, r3
 800419a:	3b01      	subs	r3, #1
 800419c:	b29a      	uxth	r2, r3
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041a2:	e139      	b.n	8004418 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d152      	bne.n	8004252 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b2:	2200      	movs	r2, #0
 80041b4:	4906      	ldr	r1, [pc, #24]	; (80041d0 <HAL_I2C_Master_Receive+0x23c>)
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f000 fa9c 	bl	80046f4 <I2C_WaitOnFlagUntilTimeout>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d008      	beq.n	80041d4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e13c      	b.n	8004440 <HAL_I2C_Master_Receive+0x4ac>
 80041c6:	bf00      	nop
 80041c8:	00100002 	.word	0x00100002
 80041cc:	ffff0000 	.word	0xffff0000
 80041d0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80041d4:	b672      	cpsid	i
}
 80041d6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	691a      	ldr	r2, [r3, #16]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004204:	3b01      	subs	r3, #1
 8004206:	b29a      	uxth	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004210:	b29b      	uxth	r3, r3
 8004212:	3b01      	subs	r3, #1
 8004214:	b29a      	uxth	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800421a:	b662      	cpsie	i
}
 800421c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	691a      	ldr	r2, [r3, #16]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	b2d2      	uxtb	r2, r2
 800422a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	1c5a      	adds	r2, r3, #1
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800423a:	3b01      	subs	r3, #1
 800423c:	b29a      	uxth	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004246:	b29b      	uxth	r3, r3
 8004248:	3b01      	subs	r3, #1
 800424a:	b29a      	uxth	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004250:	e0e2      	b.n	8004418 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004258:	2200      	movs	r2, #0
 800425a:	497b      	ldr	r1, [pc, #492]	; (8004448 <HAL_I2C_Master_Receive+0x4b4>)
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f000 fa49 	bl	80046f4 <I2C_WaitOnFlagUntilTimeout>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e0e9      	b.n	8004440 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800427a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800427c:	b672      	cpsid	i
}
 800427e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	691a      	ldr	r2, [r3, #16]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428a:	b2d2      	uxtb	r2, r2
 800428c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004292:	1c5a      	adds	r2, r3, #1
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800429c:	3b01      	subs	r3, #1
 800429e:	b29a      	uxth	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	3b01      	subs	r3, #1
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80042b2:	4b66      	ldr	r3, [pc, #408]	; (800444c <HAL_I2C_Master_Receive+0x4b8>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	08db      	lsrs	r3, r3, #3
 80042b8:	4a65      	ldr	r2, [pc, #404]	; (8004450 <HAL_I2C_Master_Receive+0x4bc>)
 80042ba:	fba2 2303 	umull	r2, r3, r2, r3
 80042be:	0a1a      	lsrs	r2, r3, #8
 80042c0:	4613      	mov	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4413      	add	r3, r2
 80042c6:	00da      	lsls	r2, r3, #3
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80042cc:	6a3b      	ldr	r3, [r7, #32]
 80042ce:	3b01      	subs	r3, #1
 80042d0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80042d2:	6a3b      	ldr	r3, [r7, #32]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d118      	bne.n	800430a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2220      	movs	r2, #32
 80042e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	f043 0220 	orr.w	r2, r3, #32
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80042fa:	b662      	cpsie	i
}
 80042fc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e09a      	b.n	8004440 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	f003 0304 	and.w	r3, r3, #4
 8004314:	2b04      	cmp	r3, #4
 8004316:	d1d9      	bne.n	80042cc <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004326:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	691a      	ldr	r2, [r3, #16]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004332:	b2d2      	uxtb	r2, r2
 8004334:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004344:	3b01      	subs	r3, #1
 8004346:	b29a      	uxth	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004350:	b29b      	uxth	r3, r3
 8004352:	3b01      	subs	r3, #1
 8004354:	b29a      	uxth	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800435a:	b662      	cpsie	i
}
 800435c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	691a      	ldr	r2, [r3, #16]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	b2d2      	uxtb	r2, r2
 800436a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004370:	1c5a      	adds	r2, r3, #1
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800437a:	3b01      	subs	r3, #1
 800437c:	b29a      	uxth	r2, r3
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004386:	b29b      	uxth	r3, r3
 8004388:	3b01      	subs	r3, #1
 800438a:	b29a      	uxth	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004390:	e042      	b.n	8004418 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004394:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f000 fb04 	bl	80049a4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e04c      	b.n	8004440 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	691a      	ldr	r2, [r3, #16]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b0:	b2d2      	uxtb	r2, r2
 80043b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b8:	1c5a      	adds	r2, r3, #1
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c2:	3b01      	subs	r3, #1
 80043c4:	b29a      	uxth	r2, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	3b01      	subs	r3, #1
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	f003 0304 	and.w	r3, r3, #4
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	d118      	bne.n	8004418 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	691a      	ldr	r2, [r3, #16]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f0:	b2d2      	uxtb	r2, r2
 80043f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	1c5a      	adds	r2, r3, #1
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004402:	3b01      	subs	r3, #1
 8004404:	b29a      	uxth	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440e:	b29b      	uxth	r3, r3
 8004410:	3b01      	subs	r3, #1
 8004412:	b29a      	uxth	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441c:	2b00      	cmp	r3, #0
 800441e:	f47f ae94 	bne.w	800414a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2220      	movs	r2, #32
 8004426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800443a:	2300      	movs	r3, #0
 800443c:	e000      	b.n	8004440 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 800443e:	2302      	movs	r3, #2
  }
}
 8004440:	4618      	mov	r0, r3
 8004442:	3728      	adds	r7, #40	; 0x28
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	00010004 	.word	0x00010004
 800444c:	20000000 	.word	0x20000000
 8004450:	14f8b589 	.word	0x14f8b589

08004454 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b088      	sub	sp, #32
 8004458:	af02      	add	r7, sp, #8
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	607a      	str	r2, [r7, #4]
 800445e:	603b      	str	r3, [r7, #0]
 8004460:	460b      	mov	r3, r1
 8004462:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004468:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	2b08      	cmp	r3, #8
 800446e:	d006      	beq.n	800447e <I2C_MasterRequestWrite+0x2a>
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d003      	beq.n	800447e <I2C_MasterRequestWrite+0x2a>
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800447c:	d108      	bne.n	8004490 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800448c:	601a      	str	r2, [r3, #0]
 800448e:	e00b      	b.n	80044a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004494:	2b12      	cmp	r3, #18
 8004496:	d107      	bne.n	80044a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	9300      	str	r3, [sp, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 f91d 	bl	80046f4 <I2C_WaitOnFlagUntilTimeout>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00d      	beq.n	80044dc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044ce:	d103      	bne.n	80044d8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e035      	b.n	8004548 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044e4:	d108      	bne.n	80044f8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044e6:	897b      	ldrh	r3, [r7, #10]
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	461a      	mov	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80044f4:	611a      	str	r2, [r3, #16]
 80044f6:	e01b      	b.n	8004530 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80044f8:	897b      	ldrh	r3, [r7, #10]
 80044fa:	11db      	asrs	r3, r3, #7
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	f003 0306 	and.w	r3, r3, #6
 8004502:	b2db      	uxtb	r3, r3
 8004504:	f063 030f 	orn	r3, r3, #15
 8004508:	b2da      	uxtb	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	490e      	ldr	r1, [pc, #56]	; (8004550 <I2C_MasterRequestWrite+0xfc>)
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f000 f943 	bl	80047a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e010      	b.n	8004548 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004526:	897b      	ldrh	r3, [r7, #10]
 8004528:	b2da      	uxtb	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	4907      	ldr	r1, [pc, #28]	; (8004554 <I2C_MasterRequestWrite+0x100>)
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 f933 	bl	80047a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e000      	b.n	8004548 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3718      	adds	r7, #24
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	00010008 	.word	0x00010008
 8004554:	00010002 	.word	0x00010002

08004558 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b088      	sub	sp, #32
 800455c:	af02      	add	r7, sp, #8
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	607a      	str	r2, [r7, #4]
 8004562:	603b      	str	r3, [r7, #0]
 8004564:	460b      	mov	r3, r1
 8004566:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800457c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	2b08      	cmp	r3, #8
 8004582:	d006      	beq.n	8004592 <I2C_MasterRequestRead+0x3a>
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d003      	beq.n	8004592 <I2C_MasterRequestRead+0x3a>
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004590:	d108      	bne.n	80045a4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045a0:	601a      	str	r2, [r3, #0]
 80045a2:	e00b      	b.n	80045bc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a8:	2b11      	cmp	r3, #17
 80045aa:	d107      	bne.n	80045bc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f000 f893 	bl	80046f4 <I2C_WaitOnFlagUntilTimeout>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00d      	beq.n	80045f0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045e2:	d103      	bne.n	80045ec <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e079      	b.n	80046e4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045f8:	d108      	bne.n	800460c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80045fa:	897b      	ldrh	r3, [r7, #10]
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	f043 0301 	orr.w	r3, r3, #1
 8004602:	b2da      	uxtb	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	611a      	str	r2, [r3, #16]
 800460a:	e05f      	b.n	80046cc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800460c:	897b      	ldrh	r3, [r7, #10]
 800460e:	11db      	asrs	r3, r3, #7
 8004610:	b2db      	uxtb	r3, r3
 8004612:	f003 0306 	and.w	r3, r3, #6
 8004616:	b2db      	uxtb	r3, r3
 8004618:	f063 030f 	orn	r3, r3, #15
 800461c:	b2da      	uxtb	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	4930      	ldr	r1, [pc, #192]	; (80046ec <I2C_MasterRequestRead+0x194>)
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f000 f8b9 	bl	80047a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e054      	b.n	80046e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800463a:	897b      	ldrh	r3, [r7, #10]
 800463c:	b2da      	uxtb	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	4929      	ldr	r1, [pc, #164]	; (80046f0 <I2C_MasterRequestRead+0x198>)
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f000 f8a9 	bl	80047a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e044      	b.n	80046e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800465a:	2300      	movs	r3, #0
 800465c:	613b      	str	r3, [r7, #16]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	613b      	str	r3, [r7, #16]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	699b      	ldr	r3, [r3, #24]
 800466c:	613b      	str	r3, [r7, #16]
 800466e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800467e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	9300      	str	r3, [sp, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f000 f831 	bl	80046f4 <I2C_WaitOnFlagUntilTimeout>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00d      	beq.n	80046b4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046a6:	d103      	bne.n	80046b0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046ae:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e017      	b.n	80046e4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80046b4:	897b      	ldrh	r3, [r7, #10]
 80046b6:	11db      	asrs	r3, r3, #7
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	f003 0306 	and.w	r3, r3, #6
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	f063 030e 	orn	r3, r3, #14
 80046c4:	b2da      	uxtb	r2, r3
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	4907      	ldr	r1, [pc, #28]	; (80046f0 <I2C_MasterRequestRead+0x198>)
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f000 f865 	bl	80047a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e000      	b.n	80046e4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3718      	adds	r7, #24
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	00010008 	.word	0x00010008
 80046f0:	00010002 	.word	0x00010002

080046f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	603b      	str	r3, [r7, #0]
 8004700:	4613      	mov	r3, r2
 8004702:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004704:	e025      	b.n	8004752 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800470c:	d021      	beq.n	8004752 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800470e:	f7fd fedd 	bl	80024cc <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	1ad3      	subs	r3, r2, r3
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	429a      	cmp	r2, r3
 800471c:	d302      	bcc.n	8004724 <I2C_WaitOnFlagUntilTimeout+0x30>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d116      	bne.n	8004752 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2220      	movs	r2, #32
 800472e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473e:	f043 0220 	orr.w	r2, r3, #32
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e023      	b.n	800479a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	0c1b      	lsrs	r3, r3, #16
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b01      	cmp	r3, #1
 800475a:	d10d      	bne.n	8004778 <I2C_WaitOnFlagUntilTimeout+0x84>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	43da      	mvns	r2, r3
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	4013      	ands	r3, r2
 8004768:	b29b      	uxth	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	bf0c      	ite	eq
 800476e:	2301      	moveq	r3, #1
 8004770:	2300      	movne	r3, #0
 8004772:	b2db      	uxtb	r3, r3
 8004774:	461a      	mov	r2, r3
 8004776:	e00c      	b.n	8004792 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	43da      	mvns	r2, r3
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	4013      	ands	r3, r2
 8004784:	b29b      	uxth	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	bf0c      	ite	eq
 800478a:	2301      	moveq	r3, #1
 800478c:	2300      	movne	r3, #0
 800478e:	b2db      	uxtb	r3, r3
 8004790:	461a      	mov	r2, r3
 8004792:	79fb      	ldrb	r3, [r7, #7]
 8004794:	429a      	cmp	r2, r3
 8004796:	d0b6      	beq.n	8004706 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b084      	sub	sp, #16
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	60f8      	str	r0, [r7, #12]
 80047aa:	60b9      	str	r1, [r7, #8]
 80047ac:	607a      	str	r2, [r7, #4]
 80047ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047b0:	e051      	b.n	8004856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047c0:	d123      	bne.n	800480a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2220      	movs	r2, #32
 80047e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	f043 0204 	orr.w	r2, r3, #4
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	e046      	b.n	8004898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004810:	d021      	beq.n	8004856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004812:	f7fd fe5b 	bl	80024cc <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	429a      	cmp	r2, r3
 8004820:	d302      	bcc.n	8004828 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d116      	bne.n	8004856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2200      	movs	r2, #0
 800482c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2220      	movs	r2, #32
 8004832:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004842:	f043 0220 	orr.w	r2, r3, #32
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e020      	b.n	8004898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	0c1b      	lsrs	r3, r3, #16
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b01      	cmp	r3, #1
 800485e:	d10c      	bne.n	800487a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	695b      	ldr	r3, [r3, #20]
 8004866:	43da      	mvns	r2, r3
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	4013      	ands	r3, r2
 800486c:	b29b      	uxth	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	bf14      	ite	ne
 8004872:	2301      	movne	r3, #1
 8004874:	2300      	moveq	r3, #0
 8004876:	b2db      	uxtb	r3, r3
 8004878:	e00b      	b.n	8004892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	43da      	mvns	r2, r3
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	4013      	ands	r3, r2
 8004886:	b29b      	uxth	r3, r3
 8004888:	2b00      	cmp	r3, #0
 800488a:	bf14      	ite	ne
 800488c:	2301      	movne	r3, #1
 800488e:	2300      	moveq	r3, #0
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d18d      	bne.n	80047b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048ac:	e02d      	b.n	800490a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048ae:	68f8      	ldr	r0, [r7, #12]
 80048b0:	f000 f8ce 	bl	8004a50 <I2C_IsAcknowledgeFailed>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d001      	beq.n	80048be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e02d      	b.n	800491a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c4:	d021      	beq.n	800490a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048c6:	f7fd fe01 	bl	80024cc <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	68ba      	ldr	r2, [r7, #8]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d302      	bcc.n	80048dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d116      	bne.n	800490a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2220      	movs	r2, #32
 80048e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f6:	f043 0220 	orr.w	r2, r3, #32
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e007      	b.n	800491a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004914:	2b80      	cmp	r3, #128	; 0x80
 8004916:	d1ca      	bne.n	80048ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b084      	sub	sp, #16
 8004926:	af00      	add	r7, sp, #0
 8004928:	60f8      	str	r0, [r7, #12]
 800492a:	60b9      	str	r1, [r7, #8]
 800492c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800492e:	e02d      	b.n	800498c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004930:	68f8      	ldr	r0, [r7, #12]
 8004932:	f000 f88d 	bl	8004a50 <I2C_IsAcknowledgeFailed>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d001      	beq.n	8004940 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	e02d      	b.n	800499c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004946:	d021      	beq.n	800498c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004948:	f7fd fdc0 	bl	80024cc <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	429a      	cmp	r2, r3
 8004956:	d302      	bcc.n	800495e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d116      	bne.n	800498c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2220      	movs	r2, #32
 8004968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004978:	f043 0220 	orr.w	r2, r3, #32
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e007      	b.n	800499c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	f003 0304 	and.w	r3, r3, #4
 8004996:	2b04      	cmp	r3, #4
 8004998:	d1ca      	bne.n	8004930 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049b0:	e042      	b.n	8004a38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	f003 0310 	and.w	r3, r3, #16
 80049bc:	2b10      	cmp	r3, #16
 80049be:	d119      	bne.n	80049f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f06f 0210 	mvn.w	r2, #16
 80049c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2220      	movs	r2, #32
 80049d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e029      	b.n	8004a48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049f4:	f7fd fd6a 	bl	80024cc <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	68ba      	ldr	r2, [r7, #8]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d302      	bcc.n	8004a0a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d116      	bne.n	8004a38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2220      	movs	r2, #32
 8004a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a24:	f043 0220 	orr.w	r2, r3, #32
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e007      	b.n	8004a48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a42:	2b40      	cmp	r3, #64	; 0x40
 8004a44:	d1b5      	bne.n	80049b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3710      	adds	r7, #16
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a66:	d11b      	bne.n	8004aa0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a70:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8c:	f043 0204 	orr.w	r2, r3, #4
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e000      	b.n	8004aa2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	370c      	adds	r7, #12
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bc80      	pop	{r7}
 8004aaa:	4770      	bx	lr

08004aac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e26c      	b.n	8004f98 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f000 8087 	beq.w	8004bda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004acc:	4b92      	ldr	r3, [pc, #584]	; (8004d18 <HAL_RCC_OscConfig+0x26c>)
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f003 030c 	and.w	r3, r3, #12
 8004ad4:	2b04      	cmp	r3, #4
 8004ad6:	d00c      	beq.n	8004af2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004ad8:	4b8f      	ldr	r3, [pc, #572]	; (8004d18 <HAL_RCC_OscConfig+0x26c>)
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f003 030c 	and.w	r3, r3, #12
 8004ae0:	2b08      	cmp	r3, #8
 8004ae2:	d112      	bne.n	8004b0a <HAL_RCC_OscConfig+0x5e>
 8004ae4:	4b8c      	ldr	r3, [pc, #560]	; (8004d18 <HAL_RCC_OscConfig+0x26c>)
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004af0:	d10b      	bne.n	8004b0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004af2:	4b89      	ldr	r3, [pc, #548]	; (8004d18 <HAL_RCC_OscConfig+0x26c>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d06c      	beq.n	8004bd8 <HAL_RCC_OscConfig+0x12c>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d168      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e246      	b.n	8004f98 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b12:	d106      	bne.n	8004b22 <HAL_RCC_OscConfig+0x76>
 8004b14:	4b80      	ldr	r3, [pc, #512]	; (8004d18 <HAL_RCC_OscConfig+0x26c>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a7f      	ldr	r2, [pc, #508]	; (8004d18 <HAL_RCC_OscConfig+0x26c>)
 8004b1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b1e:	6013      	str	r3, [r2, #0]
 8004b20:	e02e      	b.n	8004b80 <HAL_RCC_OscConfig+0xd4>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10c      	bne.n	8004b44 <HAL_RCC_OscConfig+0x98>
 8004b2a:	4b7b      	ldr	r3, [pc, #492]	; (8004d18 <HAL_RCC_OscConfig+0x26c>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a7a      	ldr	r2, [pc, #488]	; (8004d18 <HAL_RCC_OscConfig+0x26c>)
 8004b30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b34:	6013      	str	r3, [r2, #0]
 8004b36:	4b78      	ldr	r3, [pc, #480]	; (8004d18 <HAL_RCC_OscConfig+0x26c>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a77      	ldr	r2, [pc, #476]	; (8004d18 <HAL_RCC_OscConfig+0x26c>)
 8004b3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b40:	6013      	str	r3, [r2, #0]
 8004b42:	e01d      	b.n	8004b80 <HAL_RCC_OscConfig+0xd4>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b4c:	d10c      	bne.n	8004b68 <HAL_RCC_OscConfig+0xbc>
 8004b4e:	4b72      	ldr	r3, [pc, #456]	; (8004d18 <HAL_RCC_OscConfig+0x26c>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a71      	ldr	r2, [pc, #452]	; (8004d18 <HAL_RCC_OscConfig+0x26c>)
 8004b54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b58:	6013      	str	r3, [r2, #0]
 8004b5a:	4b6f      	ldr	r3, [pc, #444]	; (8004d18 <HAL_RCC_OscConfig+0x26c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a6e      	ldr	r2, [pc, #440]	; (8004d18 <HAL_RCC_OscConfig+0x26c>)
 8004b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b64:	6013      	str	r3, [r2, #0]
 8004b66:	e00b      	b.n	8004b80 <HAL_RCC_OscConfig+0xd4>
 8004b68:	4b6b      	ldr	r3, [pc, #428]	; (8004d18 <HAL_RCC_OscConfig+0x26c>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a6a      	ldr	r2, [pc, #424]	; (8004d18 <HAL_RCC_OscConfig+0x26c>)
 8004b6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b72:	6013      	str	r3, [r2, #0]
 8004b74:	4b68      	ldr	r3, [pc, #416]	; (8004d18 <HAL_RCC_OscConfig+0x26c>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a67      	ldr	r2, [pc, #412]	; (8004d18 <HAL_RCC_OscConfig+0x26c>)
 8004b7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d013      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b88:	f7fd fca0 	bl	80024cc <HAL_GetTick>
 8004b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b8e:	e008      	b.n	8004ba2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b90:	f7fd fc9c 	bl	80024cc <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b64      	cmp	r3, #100	; 0x64
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e1fa      	b.n	8004f98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ba2:	4b5d      	ldr	r3, [pc, #372]	; (8004d18 <HAL_RCC_OscConfig+0x26c>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d0f0      	beq.n	8004b90 <HAL_RCC_OscConfig+0xe4>
 8004bae:	e014      	b.n	8004bda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb0:	f7fd fc8c 	bl	80024cc <HAL_GetTick>
 8004bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bb6:	e008      	b.n	8004bca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bb8:	f7fd fc88 	bl	80024cc <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b64      	cmp	r3, #100	; 0x64
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e1e6      	b.n	8004f98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bca:	4b53      	ldr	r3, [pc, #332]	; (8004d18 <HAL_RCC_OscConfig+0x26c>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1f0      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x10c>
 8004bd6:	e000      	b.n	8004bda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d063      	beq.n	8004cae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004be6:	4b4c      	ldr	r3, [pc, #304]	; (8004d18 <HAL_RCC_OscConfig+0x26c>)
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f003 030c 	and.w	r3, r3, #12
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00b      	beq.n	8004c0a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004bf2:	4b49      	ldr	r3, [pc, #292]	; (8004d18 <HAL_RCC_OscConfig+0x26c>)
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f003 030c 	and.w	r3, r3, #12
 8004bfa:	2b08      	cmp	r3, #8
 8004bfc:	d11c      	bne.n	8004c38 <HAL_RCC_OscConfig+0x18c>
 8004bfe:	4b46      	ldr	r3, [pc, #280]	; (8004d18 <HAL_RCC_OscConfig+0x26c>)
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d116      	bne.n	8004c38 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c0a:	4b43      	ldr	r3, [pc, #268]	; (8004d18 <HAL_RCC_OscConfig+0x26c>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d005      	beq.n	8004c22 <HAL_RCC_OscConfig+0x176>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d001      	beq.n	8004c22 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e1ba      	b.n	8004f98 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c22:	4b3d      	ldr	r3, [pc, #244]	; (8004d18 <HAL_RCC_OscConfig+0x26c>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	4939      	ldr	r1, [pc, #228]	; (8004d18 <HAL_RCC_OscConfig+0x26c>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c36:	e03a      	b.n	8004cae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	691b      	ldr	r3, [r3, #16]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d020      	beq.n	8004c82 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c40:	4b36      	ldr	r3, [pc, #216]	; (8004d1c <HAL_RCC_OscConfig+0x270>)
 8004c42:	2201      	movs	r2, #1
 8004c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c46:	f7fd fc41 	bl	80024cc <HAL_GetTick>
 8004c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c4c:	e008      	b.n	8004c60 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c4e:	f7fd fc3d 	bl	80024cc <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d901      	bls.n	8004c60 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e19b      	b.n	8004f98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c60:	4b2d      	ldr	r3, [pc, #180]	; (8004d18 <HAL_RCC_OscConfig+0x26c>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d0f0      	beq.n	8004c4e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c6c:	4b2a      	ldr	r3, [pc, #168]	; (8004d18 <HAL_RCC_OscConfig+0x26c>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	695b      	ldr	r3, [r3, #20]
 8004c78:	00db      	lsls	r3, r3, #3
 8004c7a:	4927      	ldr	r1, [pc, #156]	; (8004d18 <HAL_RCC_OscConfig+0x26c>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	600b      	str	r3, [r1, #0]
 8004c80:	e015      	b.n	8004cae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c82:	4b26      	ldr	r3, [pc, #152]	; (8004d1c <HAL_RCC_OscConfig+0x270>)
 8004c84:	2200      	movs	r2, #0
 8004c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c88:	f7fd fc20 	bl	80024cc <HAL_GetTick>
 8004c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c8e:	e008      	b.n	8004ca2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c90:	f7fd fc1c 	bl	80024cc <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	2b02      	cmp	r3, #2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e17a      	b.n	8004f98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ca2:	4b1d      	ldr	r3, [pc, #116]	; (8004d18 <HAL_RCC_OscConfig+0x26c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0302 	and.w	r3, r3, #2
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1f0      	bne.n	8004c90 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0308 	and.w	r3, r3, #8
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d03a      	beq.n	8004d30 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d019      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cc2:	4b17      	ldr	r3, [pc, #92]	; (8004d20 <HAL_RCC_OscConfig+0x274>)
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cc8:	f7fd fc00 	bl	80024cc <HAL_GetTick>
 8004ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cd0:	f7fd fbfc 	bl	80024cc <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e15a      	b.n	8004f98 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ce2:	4b0d      	ldr	r3, [pc, #52]	; (8004d18 <HAL_RCC_OscConfig+0x26c>)
 8004ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d0f0      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004cee:	2001      	movs	r0, #1
 8004cf0:	f000 faaa 	bl	8005248 <RCC_Delay>
 8004cf4:	e01c      	b.n	8004d30 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cf6:	4b0a      	ldr	r3, [pc, #40]	; (8004d20 <HAL_RCC_OscConfig+0x274>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cfc:	f7fd fbe6 	bl	80024cc <HAL_GetTick>
 8004d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d02:	e00f      	b.n	8004d24 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d04:	f7fd fbe2 	bl	80024cc <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d908      	bls.n	8004d24 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e140      	b.n	8004f98 <HAL_RCC_OscConfig+0x4ec>
 8004d16:	bf00      	nop
 8004d18:	40021000 	.word	0x40021000
 8004d1c:	42420000 	.word	0x42420000
 8004d20:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d24:	4b9e      	ldr	r3, [pc, #632]	; (8004fa0 <HAL_RCC_OscConfig+0x4f4>)
 8004d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1e9      	bne.n	8004d04 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f000 80a6 	beq.w	8004e8a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d42:	4b97      	ldr	r3, [pc, #604]	; (8004fa0 <HAL_RCC_OscConfig+0x4f4>)
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10d      	bne.n	8004d6a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d4e:	4b94      	ldr	r3, [pc, #592]	; (8004fa0 <HAL_RCC_OscConfig+0x4f4>)
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	4a93      	ldr	r2, [pc, #588]	; (8004fa0 <HAL_RCC_OscConfig+0x4f4>)
 8004d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d58:	61d3      	str	r3, [r2, #28]
 8004d5a:	4b91      	ldr	r3, [pc, #580]	; (8004fa0 <HAL_RCC_OscConfig+0x4f4>)
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d62:	60bb      	str	r3, [r7, #8]
 8004d64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d66:	2301      	movs	r3, #1
 8004d68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d6a:	4b8e      	ldr	r3, [pc, #568]	; (8004fa4 <HAL_RCC_OscConfig+0x4f8>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d118      	bne.n	8004da8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d76:	4b8b      	ldr	r3, [pc, #556]	; (8004fa4 <HAL_RCC_OscConfig+0x4f8>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a8a      	ldr	r2, [pc, #552]	; (8004fa4 <HAL_RCC_OscConfig+0x4f8>)
 8004d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d82:	f7fd fba3 	bl	80024cc <HAL_GetTick>
 8004d86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d88:	e008      	b.n	8004d9c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d8a:	f7fd fb9f 	bl	80024cc <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	2b64      	cmp	r3, #100	; 0x64
 8004d96:	d901      	bls.n	8004d9c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004d98:	2303      	movs	r3, #3
 8004d9a:	e0fd      	b.n	8004f98 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d9c:	4b81      	ldr	r3, [pc, #516]	; (8004fa4 <HAL_RCC_OscConfig+0x4f8>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d0f0      	beq.n	8004d8a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d106      	bne.n	8004dbe <HAL_RCC_OscConfig+0x312>
 8004db0:	4b7b      	ldr	r3, [pc, #492]	; (8004fa0 <HAL_RCC_OscConfig+0x4f4>)
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	4a7a      	ldr	r2, [pc, #488]	; (8004fa0 <HAL_RCC_OscConfig+0x4f4>)
 8004db6:	f043 0301 	orr.w	r3, r3, #1
 8004dba:	6213      	str	r3, [r2, #32]
 8004dbc:	e02d      	b.n	8004e1a <HAL_RCC_OscConfig+0x36e>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10c      	bne.n	8004de0 <HAL_RCC_OscConfig+0x334>
 8004dc6:	4b76      	ldr	r3, [pc, #472]	; (8004fa0 <HAL_RCC_OscConfig+0x4f4>)
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	4a75      	ldr	r2, [pc, #468]	; (8004fa0 <HAL_RCC_OscConfig+0x4f4>)
 8004dcc:	f023 0301 	bic.w	r3, r3, #1
 8004dd0:	6213      	str	r3, [r2, #32]
 8004dd2:	4b73      	ldr	r3, [pc, #460]	; (8004fa0 <HAL_RCC_OscConfig+0x4f4>)
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	4a72      	ldr	r2, [pc, #456]	; (8004fa0 <HAL_RCC_OscConfig+0x4f4>)
 8004dd8:	f023 0304 	bic.w	r3, r3, #4
 8004ddc:	6213      	str	r3, [r2, #32]
 8004dde:	e01c      	b.n	8004e1a <HAL_RCC_OscConfig+0x36e>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	2b05      	cmp	r3, #5
 8004de6:	d10c      	bne.n	8004e02 <HAL_RCC_OscConfig+0x356>
 8004de8:	4b6d      	ldr	r3, [pc, #436]	; (8004fa0 <HAL_RCC_OscConfig+0x4f4>)
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	4a6c      	ldr	r2, [pc, #432]	; (8004fa0 <HAL_RCC_OscConfig+0x4f4>)
 8004dee:	f043 0304 	orr.w	r3, r3, #4
 8004df2:	6213      	str	r3, [r2, #32]
 8004df4:	4b6a      	ldr	r3, [pc, #424]	; (8004fa0 <HAL_RCC_OscConfig+0x4f4>)
 8004df6:	6a1b      	ldr	r3, [r3, #32]
 8004df8:	4a69      	ldr	r2, [pc, #420]	; (8004fa0 <HAL_RCC_OscConfig+0x4f4>)
 8004dfa:	f043 0301 	orr.w	r3, r3, #1
 8004dfe:	6213      	str	r3, [r2, #32]
 8004e00:	e00b      	b.n	8004e1a <HAL_RCC_OscConfig+0x36e>
 8004e02:	4b67      	ldr	r3, [pc, #412]	; (8004fa0 <HAL_RCC_OscConfig+0x4f4>)
 8004e04:	6a1b      	ldr	r3, [r3, #32]
 8004e06:	4a66      	ldr	r2, [pc, #408]	; (8004fa0 <HAL_RCC_OscConfig+0x4f4>)
 8004e08:	f023 0301 	bic.w	r3, r3, #1
 8004e0c:	6213      	str	r3, [r2, #32]
 8004e0e:	4b64      	ldr	r3, [pc, #400]	; (8004fa0 <HAL_RCC_OscConfig+0x4f4>)
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	4a63      	ldr	r2, [pc, #396]	; (8004fa0 <HAL_RCC_OscConfig+0x4f4>)
 8004e14:	f023 0304 	bic.w	r3, r3, #4
 8004e18:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d015      	beq.n	8004e4e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e22:	f7fd fb53 	bl	80024cc <HAL_GetTick>
 8004e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e28:	e00a      	b.n	8004e40 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e2a:	f7fd fb4f 	bl	80024cc <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d901      	bls.n	8004e40 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e0ab      	b.n	8004f98 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e40:	4b57      	ldr	r3, [pc, #348]	; (8004fa0 <HAL_RCC_OscConfig+0x4f4>)
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	f003 0302 	and.w	r3, r3, #2
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d0ee      	beq.n	8004e2a <HAL_RCC_OscConfig+0x37e>
 8004e4c:	e014      	b.n	8004e78 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e4e:	f7fd fb3d 	bl	80024cc <HAL_GetTick>
 8004e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e54:	e00a      	b.n	8004e6c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e56:	f7fd fb39 	bl	80024cc <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d901      	bls.n	8004e6c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e095      	b.n	8004f98 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e6c:	4b4c      	ldr	r3, [pc, #304]	; (8004fa0 <HAL_RCC_OscConfig+0x4f4>)
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1ee      	bne.n	8004e56 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e78:	7dfb      	ldrb	r3, [r7, #23]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d105      	bne.n	8004e8a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e7e:	4b48      	ldr	r3, [pc, #288]	; (8004fa0 <HAL_RCC_OscConfig+0x4f4>)
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	4a47      	ldr	r2, [pc, #284]	; (8004fa0 <HAL_RCC_OscConfig+0x4f4>)
 8004e84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e88:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	69db      	ldr	r3, [r3, #28]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f000 8081 	beq.w	8004f96 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e94:	4b42      	ldr	r3, [pc, #264]	; (8004fa0 <HAL_RCC_OscConfig+0x4f4>)
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f003 030c 	and.w	r3, r3, #12
 8004e9c:	2b08      	cmp	r3, #8
 8004e9e:	d061      	beq.n	8004f64 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	69db      	ldr	r3, [r3, #28]
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d146      	bne.n	8004f36 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ea8:	4b3f      	ldr	r3, [pc, #252]	; (8004fa8 <HAL_RCC_OscConfig+0x4fc>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eae:	f7fd fb0d 	bl	80024cc <HAL_GetTick>
 8004eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004eb4:	e008      	b.n	8004ec8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eb6:	f7fd fb09 	bl	80024cc <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e067      	b.n	8004f98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ec8:	4b35      	ldr	r3, [pc, #212]	; (8004fa0 <HAL_RCC_OscConfig+0x4f4>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1f0      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004edc:	d108      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004ede:	4b30      	ldr	r3, [pc, #192]	; (8004fa0 <HAL_RCC_OscConfig+0x4f4>)
 8004ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee2:	f023 020f 	bic.w	r2, r3, #15
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	492d      	ldr	r1, [pc, #180]	; (8004fa0 <HAL_RCC_OscConfig+0x4f4>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ef0:	4b2b      	ldr	r3, [pc, #172]	; (8004fa0 <HAL_RCC_OscConfig+0x4f4>)
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a19      	ldr	r1, [r3, #32]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	430b      	orrs	r3, r1
 8004f02:	4927      	ldr	r1, [pc, #156]	; (8004fa0 <HAL_RCC_OscConfig+0x4f4>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f08:	4b27      	ldr	r3, [pc, #156]	; (8004fa8 <HAL_RCC_OscConfig+0x4fc>)
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f0e:	f7fd fadd 	bl	80024cc <HAL_GetTick>
 8004f12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f14:	e008      	b.n	8004f28 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f16:	f7fd fad9 	bl	80024cc <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d901      	bls.n	8004f28 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e037      	b.n	8004f98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f28:	4b1d      	ldr	r3, [pc, #116]	; (8004fa0 <HAL_RCC_OscConfig+0x4f4>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d0f0      	beq.n	8004f16 <HAL_RCC_OscConfig+0x46a>
 8004f34:	e02f      	b.n	8004f96 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f36:	4b1c      	ldr	r3, [pc, #112]	; (8004fa8 <HAL_RCC_OscConfig+0x4fc>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f3c:	f7fd fac6 	bl	80024cc <HAL_GetTick>
 8004f40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f42:	e008      	b.n	8004f56 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f44:	f7fd fac2 	bl	80024cc <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e020      	b.n	8004f98 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f56:	4b12      	ldr	r3, [pc, #72]	; (8004fa0 <HAL_RCC_OscConfig+0x4f4>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1f0      	bne.n	8004f44 <HAL_RCC_OscConfig+0x498>
 8004f62:	e018      	b.n	8004f96 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	69db      	ldr	r3, [r3, #28]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d101      	bne.n	8004f70 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e013      	b.n	8004f98 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f70:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <HAL_RCC_OscConfig+0x4f4>)
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d106      	bne.n	8004f92 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d001      	beq.n	8004f96 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e000      	b.n	8004f98 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3718      	adds	r7, #24
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	40021000 	.word	0x40021000
 8004fa4:	40007000 	.word	0x40007000
 8004fa8:	42420060 	.word	0x42420060

08004fac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d101      	bne.n	8004fc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e0a0      	b.n	8005102 <HAL_RCC_ClockConfig+0x156>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d020      	beq.n	800500e <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0304 	and.w	r3, r3, #4
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d005      	beq.n	8004fe4 <HAL_RCC_ClockConfig+0x38>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fd8:	4b4c      	ldr	r3, [pc, #304]	; (800510c <HAL_RCC_ClockConfig+0x160>)
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	4a4b      	ldr	r2, [pc, #300]	; (800510c <HAL_RCC_ClockConfig+0x160>)
 8004fde:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004fe2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0308 	and.w	r3, r3, #8
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d005      	beq.n	8004ffc <HAL_RCC_ClockConfig+0x50>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ff0:	4b46      	ldr	r3, [pc, #280]	; (800510c <HAL_RCC_ClockConfig+0x160>)
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	4a45      	ldr	r2, [pc, #276]	; (800510c <HAL_RCC_ClockConfig+0x160>)
 8004ff6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004ffa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ffc:	4b43      	ldr	r3, [pc, #268]	; (800510c <HAL_RCC_ClockConfig+0x160>)
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	4940      	ldr	r1, [pc, #256]	; (800510c <HAL_RCC_ClockConfig+0x160>)
 800500a:	4313      	orrs	r3, r2
 800500c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b00      	cmp	r3, #0
 8005018:	d040      	beq.n	800509c <HAL_RCC_ClockConfig+0xf0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d107      	bne.n	8005032 <HAL_RCC_ClockConfig+0x86>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005022:	4b3a      	ldr	r3, [pc, #232]	; (800510c <HAL_RCC_ClockConfig+0x160>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d115      	bne.n	800505a <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e067      	b.n	8005102 <HAL_RCC_ClockConfig+0x156>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	2b02      	cmp	r3, #2
 8005038:	d107      	bne.n	800504a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800503a:	4b34      	ldr	r3, [pc, #208]	; (800510c <HAL_RCC_ClockConfig+0x160>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d109      	bne.n	800505a <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e05b      	b.n	8005102 <HAL_RCC_ClockConfig+0x156>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800504a:	4b30      	ldr	r3, [pc, #192]	; (800510c <HAL_RCC_ClockConfig+0x160>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <HAL_RCC_ClockConfig+0xae>
      {
        return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e053      	b.n	8005102 <HAL_RCC_ClockConfig+0x156>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800505a:	4b2c      	ldr	r3, [pc, #176]	; (800510c <HAL_RCC_ClockConfig+0x160>)
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f023 0203 	bic.w	r2, r3, #3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	4929      	ldr	r1, [pc, #164]	; (800510c <HAL_RCC_ClockConfig+0x160>)
 8005068:	4313      	orrs	r3, r2
 800506a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800506c:	f7fd fa2e 	bl	80024cc <HAL_GetTick>
 8005070:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005072:	e00a      	b.n	800508a <HAL_RCC_ClockConfig+0xde>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005074:	f7fd fa2a 	bl	80024cc <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005082:	4293      	cmp	r3, r2
 8005084:	d901      	bls.n	800508a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e03b      	b.n	8005102 <HAL_RCC_ClockConfig+0x156>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800508a:	4b20      	ldr	r3, [pc, #128]	; (800510c <HAL_RCC_ClockConfig+0x160>)
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f003 020c 	and.w	r2, r3, #12
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	429a      	cmp	r2, r3
 800509a:	d1eb      	bne.n	8005074 <HAL_RCC_ClockConfig+0xc8>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0304 	and.w	r3, r3, #4
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d008      	beq.n	80050ba <HAL_RCC_ClockConfig+0x10e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050a8:	4b18      	ldr	r3, [pc, #96]	; (800510c <HAL_RCC_ClockConfig+0x160>)
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	4915      	ldr	r1, [pc, #84]	; (800510c <HAL_RCC_ClockConfig+0x160>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0308 	and.w	r3, r3, #8
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d009      	beq.n	80050da <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80050c6:	4b11      	ldr	r3, [pc, #68]	; (800510c <HAL_RCC_ClockConfig+0x160>)
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	00db      	lsls	r3, r3, #3
 80050d4:	490d      	ldr	r1, [pc, #52]	; (800510c <HAL_RCC_ClockConfig+0x160>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050da:	f000 f81f 	bl	800511c <HAL_RCC_GetSysClockFreq>
 80050de:	4602      	mov	r2, r0
 80050e0:	4b0a      	ldr	r3, [pc, #40]	; (800510c <HAL_RCC_ClockConfig+0x160>)
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	091b      	lsrs	r3, r3, #4
 80050e6:	f003 030f 	and.w	r3, r3, #15
 80050ea:	4909      	ldr	r1, [pc, #36]	; (8005110 <HAL_RCC_ClockConfig+0x164>)
 80050ec:	5ccb      	ldrb	r3, [r1, r3]
 80050ee:	fa22 f303 	lsr.w	r3, r2, r3
 80050f2:	4a08      	ldr	r2, [pc, #32]	; (8005114 <HAL_RCC_ClockConfig+0x168>)
 80050f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80050f6:	4b08      	ldr	r3, [pc, #32]	; (8005118 <HAL_RCC_ClockConfig+0x16c>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7fd f9a4 	bl	8002448 <HAL_InitTick>

  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3710      	adds	r7, #16
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	40021000 	.word	0x40021000
 8005110:	080116e4 	.word	0x080116e4
 8005114:	20000000 	.word	0x20000000
 8005118:	20000004 	.word	0x20000004

0800511c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800511c:	b490      	push	{r4, r7}
 800511e:	b08e      	sub	sp, #56	; 0x38
 8005120:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005122:	4b2b      	ldr	r3, [pc, #172]	; (80051d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005124:	f107 0414 	add.w	r4, r7, #20
 8005128:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800512a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 800512e:	4b29      	ldr	r3, [pc, #164]	; (80051d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005130:	1d3c      	adds	r4, r7, #4
 8005132:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005134:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005138:	2300      	movs	r3, #0
 800513a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800513c:	2300      	movs	r3, #0
 800513e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005140:	2300      	movs	r3, #0
 8005142:	637b      	str	r3, [r7, #52]	; 0x34
 8005144:	2300      	movs	r3, #0
 8005146:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005148:	2300      	movs	r3, #0
 800514a:	633b      	str	r3, [r7, #48]	; 0x30
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800514c:	4b22      	ldr	r3, [pc, #136]	; (80051d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005154:	f003 030c 	and.w	r3, r3, #12
 8005158:	2b04      	cmp	r3, #4
 800515a:	d002      	beq.n	8005162 <HAL_RCC_GetSysClockFreq+0x46>
 800515c:	2b08      	cmp	r3, #8
 800515e:	d003      	beq.n	8005168 <HAL_RCC_GetSysClockFreq+0x4c>
 8005160:	e02c      	b.n	80051bc <HAL_RCC_GetSysClockFreq+0xa0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005162:	4b1e      	ldr	r3, [pc, #120]	; (80051dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005164:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005166:	e02c      	b.n	80051c2 <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800516a:	0c9b      	lsrs	r3, r3, #18
 800516c:	f003 030f 	and.w	r3, r3, #15
 8005170:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005174:	4413      	add	r3, r2
 8005176:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800517a:	627b      	str	r3, [r7, #36]	; 0x24
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800517c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800517e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d012      	beq.n	80051ac <HAL_RCC_GetSysClockFreq+0x90>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8005186:	4b14      	ldr	r3, [pc, #80]	; (80051d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518a:	f003 030f 	and.w	r3, r3, #15
 800518e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8005192:	4413      	add	r3, r2
 8005194:	f813 3c34 	ldrb.w	r3, [r3, #-52]
 8005198:	62bb      	str	r3, [r7, #40]	; 0x28
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800519a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519c:	4a0f      	ldr	r2, [pc, #60]	; (80051dc <HAL_RCC_GetSysClockFreq+0xc0>)
 800519e:	fb02 f203 	mul.w	r2, r2, r3
 80051a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a8:	637b      	str	r3, [r7, #52]	; 0x34
 80051aa:	e004      	b.n	80051b6 <HAL_RCC_GetSysClockFreq+0x9a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80051ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ae:	4a0c      	ldr	r2, [pc, #48]	; (80051e0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80051b0:	fb02 f303 	mul.w	r3, r2, r3
 80051b4:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllclk;
 80051b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051b8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80051ba:	e002      	b.n	80051c2 <HAL_RCC_GetSysClockFreq+0xa6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80051bc:	4b07      	ldr	r3, [pc, #28]	; (80051dc <HAL_RCC_GetSysClockFreq+0xc0>)
 80051be:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80051c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3738      	adds	r7, #56	; 0x38
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bc90      	pop	{r4, r7}
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	08011698 	.word	0x08011698
 80051d4:	080116a8 	.word	0x080116a8
 80051d8:	40021000 	.word	0x40021000
 80051dc:	007a1200 	.word	0x007a1200
 80051e0:	003d0900 	.word	0x003d0900

080051e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051e4:	b480      	push	{r7}
 80051e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051e8:	4b02      	ldr	r3, [pc, #8]	; (80051f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80051ea:	681b      	ldr	r3, [r3, #0]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bc80      	pop	{r7}
 80051f2:	4770      	bx	lr
 80051f4:	20000000 	.word	0x20000000

080051f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80051fc:	f7ff fff2 	bl	80051e4 <HAL_RCC_GetHCLKFreq>
 8005200:	4602      	mov	r2, r0
 8005202:	4b05      	ldr	r3, [pc, #20]	; (8005218 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	0a1b      	lsrs	r3, r3, #8
 8005208:	f003 0307 	and.w	r3, r3, #7
 800520c:	4903      	ldr	r1, [pc, #12]	; (800521c <HAL_RCC_GetPCLK1Freq+0x24>)
 800520e:	5ccb      	ldrb	r3, [r1, r3]
 8005210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005214:	4618      	mov	r0, r3
 8005216:	bd80      	pop	{r7, pc}
 8005218:	40021000 	.word	0x40021000
 800521c:	080116f4 	.word	0x080116f4

08005220 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005224:	f7ff ffde 	bl	80051e4 <HAL_RCC_GetHCLKFreq>
 8005228:	4602      	mov	r2, r0
 800522a:	4b05      	ldr	r3, [pc, #20]	; (8005240 <HAL_RCC_GetPCLK2Freq+0x20>)
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	0adb      	lsrs	r3, r3, #11
 8005230:	f003 0307 	and.w	r3, r3, #7
 8005234:	4903      	ldr	r1, [pc, #12]	; (8005244 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005236:	5ccb      	ldrb	r3, [r1, r3]
 8005238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800523c:	4618      	mov	r0, r3
 800523e:	bd80      	pop	{r7, pc}
 8005240:	40021000 	.word	0x40021000
 8005244:	080116f4 	.word	0x080116f4

08005248 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005250:	4b0a      	ldr	r3, [pc, #40]	; (800527c <RCC_Delay+0x34>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a0a      	ldr	r2, [pc, #40]	; (8005280 <RCC_Delay+0x38>)
 8005256:	fba2 2303 	umull	r2, r3, r2, r3
 800525a:	0a5b      	lsrs	r3, r3, #9
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	fb02 f303 	mul.w	r3, r2, r3
 8005262:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005264:	bf00      	nop
  }
  while (Delay --);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	1e5a      	subs	r2, r3, #1
 800526a:	60fa      	str	r2, [r7, #12]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1f9      	bne.n	8005264 <RCC_Delay+0x1c>
}
 8005270:	bf00      	nop
 8005272:	bf00      	nop
 8005274:	3714      	adds	r7, #20
 8005276:	46bd      	mov	sp, r7
 8005278:	bc80      	pop	{r7}
 800527a:	4770      	bx	lr
 800527c:	20000000 	.word	0x20000000
 8005280:	10624dd3 	.word	0x10624dd3

08005284 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800528c:	2300      	movs	r3, #0
 800528e:	613b      	str	r3, [r7, #16]
 8005290:	2300      	movs	r3, #0
 8005292:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0301 	and.w	r3, r3, #1
 800529c:	2b00      	cmp	r3, #0
 800529e:	d07d      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80052a0:	2300      	movs	r3, #0
 80052a2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052a4:	4b47      	ldr	r3, [pc, #284]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80052a6:	69db      	ldr	r3, [r3, #28]
 80052a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10d      	bne.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052b0:	4b44      	ldr	r3, [pc, #272]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80052b2:	69db      	ldr	r3, [r3, #28]
 80052b4:	4a43      	ldr	r2, [pc, #268]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80052b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052ba:	61d3      	str	r3, [r2, #28]
 80052bc:	4b41      	ldr	r3, [pc, #260]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80052be:	69db      	ldr	r3, [r3, #28]
 80052c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052c4:	60bb      	str	r3, [r7, #8]
 80052c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052c8:	2301      	movs	r3, #1
 80052ca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052cc:	4b3e      	ldr	r3, [pc, #248]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d118      	bne.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052d8:	4b3b      	ldr	r3, [pc, #236]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a3a      	ldr	r2, [pc, #232]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 80052de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052e4:	f7fd f8f2 	bl	80024cc <HAL_GetTick>
 80052e8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ea:	e008      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052ec:	f7fd f8ee 	bl	80024cc <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b64      	cmp	r3, #100	; 0x64
 80052f8:	d901      	bls.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e05e      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x138>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052fe:	4b32      	ldr	r3, [pc, #200]	; (80053c8 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005306:	2b00      	cmp	r3, #0
 8005308:	d0f0      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800530a:	4b2e      	ldr	r3, [pc, #184]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800530c:	6a1b      	ldr	r3, [r3, #32]
 800530e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005312:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d02e      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	429a      	cmp	r2, r3
 8005326:	d027      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005328:	4b26      	ldr	r3, [pc, #152]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005330:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005332:	4b26      	ldr	r3, [pc, #152]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8005334:	2201      	movs	r2, #1
 8005336:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005338:	4b24      	ldr	r3, [pc, #144]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800533a:	2200      	movs	r2, #0
 800533c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800533e:	4a21      	ldr	r2, [pc, #132]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f003 0301 	and.w	r3, r3, #1
 800534a:	2b00      	cmp	r3, #0
 800534c:	d014      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800534e:	f7fd f8bd 	bl	80024cc <HAL_GetTick>
 8005352:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005354:	e00a      	b.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005356:	f7fd f8b9 	bl	80024cc <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	f241 3288 	movw	r2, #5000	; 0x1388
 8005364:	4293      	cmp	r3, r2
 8005366:	d901      	bls.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e027      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x138>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800536c:	4b15      	ldr	r3, [pc, #84]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800536e:	6a1b      	ldr	r3, [r3, #32]
 8005370:	f003 0302 	and.w	r3, r3, #2
 8005374:	2b00      	cmp	r3, #0
 8005376:	d0ee      	beq.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005378:	4b12      	ldr	r3, [pc, #72]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800537a:	6a1b      	ldr	r3, [r3, #32]
 800537c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	490f      	ldr	r1, [pc, #60]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005386:	4313      	orrs	r3, r2
 8005388:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800538a:	7dfb      	ldrb	r3, [r7, #23]
 800538c:	2b01      	cmp	r3, #1
 800538e:	d105      	bne.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005390:	4b0c      	ldr	r3, [pc, #48]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005392:	69db      	ldr	r3, [r3, #28]
 8005394:	4a0b      	ldr	r2, [pc, #44]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8005396:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800539a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0302 	and.w	r3, r3, #2
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d008      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053a8:	4b06      	ldr	r3, [pc, #24]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	4903      	ldr	r1, [pc, #12]	; (80053c4 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	604b      	str	r3, [r1, #4]
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3718      	adds	r7, #24
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	40021000 	.word	0x40021000
 80053c8:	40007000 	.word	0x40007000
 80053cc:	42420440 	.word	0x42420440

080053d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  const uint8_t aPredivFactorTable[2] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80053d8:	2300      	movs	r3, #0
 80053da:	60bb      	str	r3, [r7, #8]
 80053dc:	2300      	movs	r3, #0
 80053de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d003      	beq.n	80053ee <HAL_RCCEx_GetPeriphCLKFreq+0x1e>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d033      	beq.n	8005454 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80053ec:	e041      	b.n	8005472 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      temp_reg = RCC->BDCR;
 80053ee:	4b23      	ldr	r3, [pc, #140]	; (800547c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	60bb      	str	r3, [r7, #8]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053fe:	d108      	bne.n	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d003      	beq.n	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
        frequency = LSE_VALUE;
 800540a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800540e:	60fb      	str	r3, [r7, #12]
 8005410:	e01f      	b.n	8005452 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005418:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800541c:	d109      	bne.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 800541e:	4b17      	ldr	r3, [pc, #92]	; (800547c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005422:	f003 0302 	and.w	r3, r3, #2
 8005426:	2b00      	cmp	r3, #0
 8005428:	d003      	beq.n	8005432 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
        frequency = LSI_VALUE;
 800542a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800542e:	60fb      	str	r3, [r7, #12]
 8005430:	e00f      	b.n	8005452 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005438:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800543c:	d118      	bne.n	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 800543e:	4b0f      	ldr	r3, [pc, #60]	; (800547c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d012      	beq.n	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
        frequency = HSE_VALUE / 128U;
 800544a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800544e:	60fb      	str	r3, [r7, #12]
      break;
 8005450:	e00e      	b.n	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 8005452:	e00d      	b.n	8005470 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005454:	f7ff fee4 	bl	8005220 <HAL_RCC_GetPCLK2Freq>
 8005458:	4602      	mov	r2, r0
 800545a:	4b08      	ldr	r3, [pc, #32]	; (800547c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	0b9b      	lsrs	r3, r3, #14
 8005460:	f003 0303 	and.w	r3, r3, #3
 8005464:	3301      	adds	r3, #1
 8005466:	005b      	lsls	r3, r3, #1
 8005468:	fbb2 f3f3 	udiv	r3, r2, r3
 800546c:	60fb      	str	r3, [r7, #12]
      break;
 800546e:	e000      	b.n	8005472 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      break;
 8005470:	bf00      	nop
    }
  }
  return (frequency);
 8005472:	68fb      	ldr	r3, [r7, #12]
}
 8005474:	4618      	mov	r0, r3
 8005476:	3710      	adds	r7, #16
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	40021000 	.word	0x40021000

08005480 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e06e      	b.n	8005570 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	2b00      	cmp	r3, #0
 8005498:	d108      	bne.n	80054ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054a2:	d009      	beq.n	80054b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	61da      	str	r2, [r3, #28]
 80054aa:	e005      	b.n	80054b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d106      	bne.n	80054d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f7fc fca6 	bl	8001e24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2202      	movs	r2, #2
 80054dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005500:	431a      	orrs	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800550a:	431a      	orrs	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	f003 0302 	and.w	r3, r3, #2
 8005514:	431a      	orrs	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	431a      	orrs	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005528:	431a      	orrs	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005532:	431a      	orrs	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800553c:	ea42 0103 	orr.w	r1, r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005544:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	430a      	orrs	r2, r1
 800554e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	0c1a      	lsrs	r2, r3, #16
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f002 0204 	and.w	r2, r2, #4
 800555e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b08c      	sub	sp, #48	; 0x30
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
 8005584:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005586:	2301      	movs	r3, #1
 8005588:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800558a:	2300      	movs	r3, #0
 800558c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005596:	2b01      	cmp	r3, #1
 8005598:	d101      	bne.n	800559e <HAL_SPI_TransmitReceive+0x26>
 800559a:	2302      	movs	r3, #2
 800559c:	e18a      	b.n	80058b4 <HAL_SPI_TransmitReceive+0x33c>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055a6:	f7fc ff91 	bl	80024cc <HAL_GetTick>
 80055aa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80055bc:	887b      	ldrh	r3, [r7, #2]
 80055be:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80055c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d00f      	beq.n	80055e8 <HAL_SPI_TransmitReceive+0x70>
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055ce:	d107      	bne.n	80055e0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d103      	bne.n	80055e0 <HAL_SPI_TransmitReceive+0x68>
 80055d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80055dc:	2b04      	cmp	r3, #4
 80055de:	d003      	beq.n	80055e8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80055e0:	2302      	movs	r3, #2
 80055e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80055e6:	e15b      	b.n	80058a0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d005      	beq.n	80055fa <HAL_SPI_TransmitReceive+0x82>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d002      	beq.n	80055fa <HAL_SPI_TransmitReceive+0x82>
 80055f4:	887b      	ldrh	r3, [r7, #2]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d103      	bne.n	8005602 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005600:	e14e      	b.n	80058a0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005608:	b2db      	uxtb	r3, r3
 800560a:	2b04      	cmp	r3, #4
 800560c:	d003      	beq.n	8005616 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2205      	movs	r2, #5
 8005612:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	887a      	ldrh	r2, [r7, #2]
 8005626:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	887a      	ldrh	r2, [r7, #2]
 800562c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	68ba      	ldr	r2, [r7, #8]
 8005632:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	887a      	ldrh	r2, [r7, #2]
 8005638:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	887a      	ldrh	r2, [r7, #2]
 800563e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005656:	2b40      	cmp	r3, #64	; 0x40
 8005658:	d007      	beq.n	800566a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005668:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005672:	d178      	bne.n	8005766 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d002      	beq.n	8005682 <HAL_SPI_TransmitReceive+0x10a>
 800567c:	8b7b      	ldrh	r3, [r7, #26]
 800567e:	2b01      	cmp	r3, #1
 8005680:	d166      	bne.n	8005750 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005686:	881a      	ldrh	r2, [r3, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005692:	1c9a      	adds	r2, r3, #2
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800569c:	b29b      	uxth	r3, r3
 800569e:	3b01      	subs	r3, #1
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056a6:	e053      	b.n	8005750 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f003 0302 	and.w	r3, r3, #2
 80056b2:	2b02      	cmp	r3, #2
 80056b4:	d11b      	bne.n	80056ee <HAL_SPI_TransmitReceive+0x176>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d016      	beq.n	80056ee <HAL_SPI_TransmitReceive+0x176>
 80056c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d113      	bne.n	80056ee <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ca:	881a      	ldrh	r2, [r3, #0]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d6:	1c9a      	adds	r2, r3, #2
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	3b01      	subs	r3, #1
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056ea:	2300      	movs	r3, #0
 80056ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f003 0301 	and.w	r3, r3, #1
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d119      	bne.n	8005730 <HAL_SPI_TransmitReceive+0x1b8>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005700:	b29b      	uxth	r3, r3
 8005702:	2b00      	cmp	r3, #0
 8005704:	d014      	beq.n	8005730 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68da      	ldr	r2, [r3, #12]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005710:	b292      	uxth	r2, r2
 8005712:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005718:	1c9a      	adds	r2, r3, #2
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005722:	b29b      	uxth	r3, r3
 8005724:	3b01      	subs	r3, #1
 8005726:	b29a      	uxth	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800572c:	2301      	movs	r3, #1
 800572e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005730:	f7fc fecc 	bl	80024cc <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800573c:	429a      	cmp	r2, r3
 800573e:	d807      	bhi.n	8005750 <HAL_SPI_TransmitReceive+0x1d8>
 8005740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005746:	d003      	beq.n	8005750 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800574e:	e0a7      	b.n	80058a0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005754:	b29b      	uxth	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1a6      	bne.n	80056a8 <HAL_SPI_TransmitReceive+0x130>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800575e:	b29b      	uxth	r3, r3
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1a1      	bne.n	80056a8 <HAL_SPI_TransmitReceive+0x130>
 8005764:	e07c      	b.n	8005860 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d002      	beq.n	8005774 <HAL_SPI_TransmitReceive+0x1fc>
 800576e:	8b7b      	ldrh	r3, [r7, #26]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d16b      	bne.n	800584c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	330c      	adds	r3, #12
 800577e:	7812      	ldrb	r2, [r2, #0]
 8005780:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005786:	1c5a      	adds	r2, r3, #1
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005790:	b29b      	uxth	r3, r3
 8005792:	3b01      	subs	r3, #1
 8005794:	b29a      	uxth	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800579a:	e057      	b.n	800584c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d11c      	bne.n	80057e4 <HAL_SPI_TransmitReceive+0x26c>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d017      	beq.n	80057e4 <HAL_SPI_TransmitReceive+0x26c>
 80057b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d114      	bne.n	80057e4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	330c      	adds	r3, #12
 80057c4:	7812      	ldrb	r2, [r2, #0]
 80057c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057cc:	1c5a      	adds	r2, r3, #1
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	3b01      	subs	r3, #1
 80057da:	b29a      	uxth	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80057e0:	2300      	movs	r3, #0
 80057e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f003 0301 	and.w	r3, r3, #1
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d119      	bne.n	8005826 <HAL_SPI_TransmitReceive+0x2ae>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d014      	beq.n	8005826 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68da      	ldr	r2, [r3, #12]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005806:	b2d2      	uxtb	r2, r2
 8005808:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580e:	1c5a      	adds	r2, r3, #1
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005818:	b29b      	uxth	r3, r3
 800581a:	3b01      	subs	r3, #1
 800581c:	b29a      	uxth	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005822:	2301      	movs	r3, #1
 8005824:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005826:	f7fc fe51 	bl	80024cc <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005832:	429a      	cmp	r2, r3
 8005834:	d803      	bhi.n	800583e <HAL_SPI_TransmitReceive+0x2c6>
 8005836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583c:	d102      	bne.n	8005844 <HAL_SPI_TransmitReceive+0x2cc>
 800583e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005840:	2b00      	cmp	r3, #0
 8005842:	d103      	bne.n	800584c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800584a:	e029      	b.n	80058a0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005850:	b29b      	uxth	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1a2      	bne.n	800579c <HAL_SPI_TransmitReceive+0x224>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800585a:	b29b      	uxth	r3, r3
 800585c:	2b00      	cmp	r3, #0
 800585e:	d19d      	bne.n	800579c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005862:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f000 f8b1 	bl	80059cc <SPI_EndRxTxTransaction>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d006      	beq.n	800587e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2220      	movs	r2, #32
 800587a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800587c:	e010      	b.n	80058a0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d10b      	bne.n	800589e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005886:	2300      	movs	r3, #0
 8005888:	617b      	str	r3, [r7, #20]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	617b      	str	r3, [r7, #20]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	617b      	str	r3, [r7, #20]
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	e000      	b.n	80058a0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800589e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80058b0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3730      	adds	r7, #48	; 0x30
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b088      	sub	sp, #32
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	603b      	str	r3, [r7, #0]
 80058c8:	4613      	mov	r3, r2
 80058ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80058cc:	f7fc fdfe 	bl	80024cc <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d4:	1a9b      	subs	r3, r3, r2
 80058d6:	683a      	ldr	r2, [r7, #0]
 80058d8:	4413      	add	r3, r2
 80058da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80058dc:	f7fc fdf6 	bl	80024cc <HAL_GetTick>
 80058e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80058e2:	4b39      	ldr	r3, [pc, #228]	; (80059c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	015b      	lsls	r3, r3, #5
 80058e8:	0d1b      	lsrs	r3, r3, #20
 80058ea:	69fa      	ldr	r2, [r7, #28]
 80058ec:	fb02 f303 	mul.w	r3, r2, r3
 80058f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058f2:	e054      	b.n	800599e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058fa:	d050      	beq.n	800599e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80058fc:	f7fc fde6 	bl	80024cc <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	69fa      	ldr	r2, [r7, #28]
 8005908:	429a      	cmp	r2, r3
 800590a:	d902      	bls.n	8005912 <SPI_WaitFlagStateUntilTimeout+0x56>
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d13d      	bne.n	800598e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	685a      	ldr	r2, [r3, #4]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005920:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800592a:	d111      	bne.n	8005950 <SPI_WaitFlagStateUntilTimeout+0x94>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005934:	d004      	beq.n	8005940 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800593e:	d107      	bne.n	8005950 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800594e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005958:	d10f      	bne.n	800597a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005968:	601a      	str	r2, [r3, #0]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005978:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	e017      	b.n	80059be <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d101      	bne.n	8005998 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005994:	2300      	movs	r3, #0
 8005996:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	3b01      	subs	r3, #1
 800599c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	689a      	ldr	r2, [r3, #8]
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	4013      	ands	r3, r2
 80059a8:	68ba      	ldr	r2, [r7, #8]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	bf0c      	ite	eq
 80059ae:	2301      	moveq	r3, #1
 80059b0:	2300      	movne	r3, #0
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	461a      	mov	r2, r3
 80059b6:	79fb      	ldrb	r3, [r7, #7]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d19b      	bne.n	80058f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3720      	adds	r7, #32
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	20000000 	.word	0x20000000

080059cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b086      	sub	sp, #24
 80059d0:	af02      	add	r7, sp, #8
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	9300      	str	r3, [sp, #0]
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	2200      	movs	r2, #0
 80059e0:	2180      	movs	r1, #128	; 0x80
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f7ff ff6a 	bl	80058bc <SPI_WaitFlagStateUntilTimeout>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d007      	beq.n	80059fe <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059f2:	f043 0220 	orr.w	r2, r3, #32
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e000      	b.n	8005a00 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3710      	adds	r7, #16
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e041      	b.n	8005a9e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d106      	bne.n	8005a34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f7fc fa52 	bl	8001ed8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2202      	movs	r2, #2
 8005a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	3304      	adds	r3, #4
 8005a44:	4619      	mov	r1, r3
 8005a46:	4610      	mov	r0, r2
 8005a48:	f000 fd4e 	bl	80064e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2201      	movs	r2, #1
 8005a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3708      	adds	r7, #8
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
	...

08005aa8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d001      	beq.n	8005ac0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e037      	b.n	8005b30 <HAL_TIM_Base_Start+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2202      	movs	r2, #2
 8005ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a1b      	ldr	r2, [pc, #108]	; (8005b3c <HAL_TIM_Base_Start+0x94>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d013      	beq.n	8005afa <HAL_TIM_Base_Start+0x52>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ada:	d00e      	beq.n	8005afa <HAL_TIM_Base_Start+0x52>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a17      	ldr	r2, [pc, #92]	; (8005b40 <HAL_TIM_Base_Start+0x98>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d009      	beq.n	8005afa <HAL_TIM_Base_Start+0x52>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a16      	ldr	r2, [pc, #88]	; (8005b44 <HAL_TIM_Base_Start+0x9c>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d004      	beq.n	8005afa <HAL_TIM_Base_Start+0x52>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a14      	ldr	r2, [pc, #80]	; (8005b48 <HAL_TIM_Base_Start+0xa0>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d111      	bne.n	8005b1e <HAL_TIM_Base_Start+0x76>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f003 0307 	and.w	r3, r3, #7
 8005b04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2b06      	cmp	r3, #6
 8005b0a:	d010      	beq.n	8005b2e <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0201 	orr.w	r2, r2, #1
 8005b1a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b1c:	e007      	b.n	8005b2e <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f042 0201 	orr.w	r2, r2, #1
 8005b2c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3714      	adds	r7, #20
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bc80      	pop	{r7}
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	40012c00 	.word	0x40012c00
 8005b40:	40000400 	.word	0x40000400
 8005b44:	40000800 	.word	0x40000800
 8005b48:	40014000 	.word	0x40014000

08005b4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d001      	beq.n	8005b64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e03f      	b.n	8005be4 <HAL_TIM_Base_Start_IT+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2202      	movs	r2, #2
 8005b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68da      	ldr	r2, [r3, #12]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f042 0201 	orr.w	r2, r2, #1
 8005b7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a1b      	ldr	r2, [pc, #108]	; (8005bf0 <HAL_TIM_Base_Start_IT+0xa4>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d013      	beq.n	8005bae <HAL_TIM_Base_Start_IT+0x62>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b8e:	d00e      	beq.n	8005bae <HAL_TIM_Base_Start_IT+0x62>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a17      	ldr	r2, [pc, #92]	; (8005bf4 <HAL_TIM_Base_Start_IT+0xa8>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d009      	beq.n	8005bae <HAL_TIM_Base_Start_IT+0x62>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a16      	ldr	r2, [pc, #88]	; (8005bf8 <HAL_TIM_Base_Start_IT+0xac>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d004      	beq.n	8005bae <HAL_TIM_Base_Start_IT+0x62>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a14      	ldr	r2, [pc, #80]	; (8005bfc <HAL_TIM_Base_Start_IT+0xb0>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d111      	bne.n	8005bd2 <HAL_TIM_Base_Start_IT+0x86>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f003 0307 	and.w	r3, r3, #7
 8005bb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2b06      	cmp	r3, #6
 8005bbe:	d010      	beq.n	8005be2 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f042 0201 	orr.w	r2, r2, #1
 8005bce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bd0:	e007      	b.n	8005be2 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f042 0201 	orr.w	r2, r2, #1
 8005be0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3714      	adds	r7, #20
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bc80      	pop	{r7}
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	40012c00 	.word	0x40012c00
 8005bf4:	40000400 	.word	0x40000400
 8005bf8:	40000800 	.word	0x40000800
 8005bfc:	40014000 	.word	0x40014000

08005c00 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68da      	ldr	r2, [r3, #12]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f022 0201 	bic.w	r2, r2, #1
 8005c16:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6a1a      	ldr	r2, [r3, #32]
 8005c1e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005c22:	4013      	ands	r3, r2
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d10f      	bne.n	8005c48 <HAL_TIM_Base_Stop_IT+0x48>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	6a1a      	ldr	r2, [r3, #32]
 8005c2e:	f240 4344 	movw	r3, #1092	; 0x444
 8005c32:	4013      	ands	r3, r2
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d107      	bne.n	8005c48 <HAL_TIM_Base_Stop_IT+0x48>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f022 0201 	bic.w	r2, r2, #1
 8005c46:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bc80      	pop	{r7}
 8005c5a:	4770      	bx	lr

08005c5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e041      	b.n	8005cf2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d106      	bne.n	8005c88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f839 	bl	8005cfa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2202      	movs	r2, #2
 8005c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	3304      	adds	r3, #4
 8005c98:	4619      	mov	r1, r3
 8005c9a:	4610      	mov	r0, r2
 8005c9c:	f000 fc24 	bl	80064e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3708      	adds	r7, #8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b083      	sub	sp, #12
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005d02:	bf00      	nop
 8005d04:	370c      	adds	r7, #12
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bc80      	pop	{r7}
 8005d0a:	4770      	bx	lr

08005d0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d109      	bne.n	8005d30 <HAL_TIM_PWM_Start+0x24>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	bf14      	ite	ne
 8005d28:	2301      	movne	r3, #1
 8005d2a:	2300      	moveq	r3, #0
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	e022      	b.n	8005d76 <HAL_TIM_PWM_Start+0x6a>
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	2b04      	cmp	r3, #4
 8005d34:	d109      	bne.n	8005d4a <HAL_TIM_PWM_Start+0x3e>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	bf14      	ite	ne
 8005d42:	2301      	movne	r3, #1
 8005d44:	2300      	moveq	r3, #0
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	e015      	b.n	8005d76 <HAL_TIM_PWM_Start+0x6a>
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	2b08      	cmp	r3, #8
 8005d4e:	d109      	bne.n	8005d64 <HAL_TIM_PWM_Start+0x58>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	bf14      	ite	ne
 8005d5c:	2301      	movne	r3, #1
 8005d5e:	2300      	moveq	r3, #0
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	e008      	b.n	8005d76 <HAL_TIM_PWM_Start+0x6a>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	bf14      	ite	ne
 8005d70:	2301      	movne	r3, #1
 8005d72:	2300      	moveq	r3, #0
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d001      	beq.n	8005d7e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e077      	b.n	8005e6e <HAL_TIM_PWM_Start+0x162>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d104      	bne.n	8005d8e <HAL_TIM_PWM_Start+0x82>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2202      	movs	r2, #2
 8005d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d8c:	e013      	b.n	8005db6 <HAL_TIM_PWM_Start+0xaa>
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	2b04      	cmp	r3, #4
 8005d92:	d104      	bne.n	8005d9e <HAL_TIM_PWM_Start+0x92>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2202      	movs	r2, #2
 8005d98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d9c:	e00b      	b.n	8005db6 <HAL_TIM_PWM_Start+0xaa>
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	2b08      	cmp	r3, #8
 8005da2:	d104      	bne.n	8005dae <HAL_TIM_PWM_Start+0xa2>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2202      	movs	r2, #2
 8005da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dac:	e003      	b.n	8005db6 <HAL_TIM_PWM_Start+0xaa>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2202      	movs	r2, #2
 8005db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	6839      	ldr	r1, [r7, #0]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 fe84 	bl	8006acc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a2b      	ldr	r2, [pc, #172]	; (8005e78 <HAL_TIM_PWM_Start+0x16c>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d00e      	beq.n	8005dec <HAL_TIM_PWM_Start+0xe0>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a2a      	ldr	r2, [pc, #168]	; (8005e7c <HAL_TIM_PWM_Start+0x170>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d009      	beq.n	8005dec <HAL_TIM_PWM_Start+0xe0>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a28      	ldr	r2, [pc, #160]	; (8005e80 <HAL_TIM_PWM_Start+0x174>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d004      	beq.n	8005dec <HAL_TIM_PWM_Start+0xe0>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a27      	ldr	r2, [pc, #156]	; (8005e84 <HAL_TIM_PWM_Start+0x178>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d101      	bne.n	8005df0 <HAL_TIM_PWM_Start+0xe4>
 8005dec:	2301      	movs	r3, #1
 8005dee:	e000      	b.n	8005df2 <HAL_TIM_PWM_Start+0xe6>
 8005df0:	2300      	movs	r3, #0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d007      	beq.n	8005e06 <HAL_TIM_PWM_Start+0xfa>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e04:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a1b      	ldr	r2, [pc, #108]	; (8005e78 <HAL_TIM_PWM_Start+0x16c>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d013      	beq.n	8005e38 <HAL_TIM_PWM_Start+0x12c>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e18:	d00e      	beq.n	8005e38 <HAL_TIM_PWM_Start+0x12c>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a1a      	ldr	r2, [pc, #104]	; (8005e88 <HAL_TIM_PWM_Start+0x17c>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d009      	beq.n	8005e38 <HAL_TIM_PWM_Start+0x12c>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a18      	ldr	r2, [pc, #96]	; (8005e8c <HAL_TIM_PWM_Start+0x180>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d004      	beq.n	8005e38 <HAL_TIM_PWM_Start+0x12c>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a12      	ldr	r2, [pc, #72]	; (8005e7c <HAL_TIM_PWM_Start+0x170>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d111      	bne.n	8005e5c <HAL_TIM_PWM_Start+0x150>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f003 0307 	and.w	r3, r3, #7
 8005e42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2b06      	cmp	r3, #6
 8005e48:	d010      	beq.n	8005e6c <HAL_TIM_PWM_Start+0x160>
    {
      __HAL_TIM_ENABLE(htim);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f042 0201 	orr.w	r2, r2, #1
 8005e58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e5a:	e007      	b.n	8005e6c <HAL_TIM_PWM_Start+0x160>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f042 0201 	orr.w	r2, r2, #1
 8005e6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	40012c00 	.word	0x40012c00
 8005e7c:	40014000 	.word	0x40014000
 8005e80:	40014400 	.word	0x40014400
 8005e84:	40014800 	.word	0x40014800
 8005e88:	40000400 	.word	0x40000400
 8005e8c:	40000800 	.word	0x40000800

08005e90 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	6839      	ldr	r1, [r7, #0]
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f000 fe12 	bl	8006acc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a33      	ldr	r2, [pc, #204]	; (8005f7c <HAL_TIM_PWM_Stop+0xec>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d00e      	beq.n	8005ed0 <HAL_TIM_PWM_Stop+0x40>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a32      	ldr	r2, [pc, #200]	; (8005f80 <HAL_TIM_PWM_Stop+0xf0>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d009      	beq.n	8005ed0 <HAL_TIM_PWM_Stop+0x40>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a30      	ldr	r2, [pc, #192]	; (8005f84 <HAL_TIM_PWM_Stop+0xf4>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d004      	beq.n	8005ed0 <HAL_TIM_PWM_Stop+0x40>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a2f      	ldr	r2, [pc, #188]	; (8005f88 <HAL_TIM_PWM_Stop+0xf8>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d101      	bne.n	8005ed4 <HAL_TIM_PWM_Stop+0x44>
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e000      	b.n	8005ed6 <HAL_TIM_PWM_Stop+0x46>
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d017      	beq.n	8005f0a <HAL_TIM_PWM_Stop+0x7a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	6a1a      	ldr	r2, [r3, #32]
 8005ee0:	f241 1311 	movw	r3, #4369	; 0x1111
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d10f      	bne.n	8005f0a <HAL_TIM_PWM_Stop+0x7a>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	6a1a      	ldr	r2, [r3, #32]
 8005ef0:	f240 4344 	movw	r3, #1092	; 0x444
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d107      	bne.n	8005f0a <HAL_TIM_PWM_Stop+0x7a>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	6a1a      	ldr	r2, [r3, #32]
 8005f10:	f241 1311 	movw	r3, #4369	; 0x1111
 8005f14:	4013      	ands	r3, r2
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10f      	bne.n	8005f3a <HAL_TIM_PWM_Stop+0xaa>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	6a1a      	ldr	r2, [r3, #32]
 8005f20:	f240 4344 	movw	r3, #1092	; 0x444
 8005f24:	4013      	ands	r3, r2
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d107      	bne.n	8005f3a <HAL_TIM_PWM_Stop+0xaa>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f022 0201 	bic.w	r2, r2, #1
 8005f38:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d104      	bne.n	8005f4a <HAL_TIM_PWM_Stop+0xba>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f48:	e013      	b.n	8005f72 <HAL_TIM_PWM_Stop+0xe2>
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	2b04      	cmp	r3, #4
 8005f4e:	d104      	bne.n	8005f5a <HAL_TIM_PWM_Stop+0xca>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f58:	e00b      	b.n	8005f72 <HAL_TIM_PWM_Stop+0xe2>
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	2b08      	cmp	r3, #8
 8005f5e:	d104      	bne.n	8005f6a <HAL_TIM_PWM_Stop+0xda>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f68:	e003      	b.n	8005f72 <HAL_TIM_PWM_Stop+0xe2>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3708      	adds	r7, #8
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	40012c00 	.word	0x40012c00
 8005f80:	40014000 	.word	0x40014000
 8005f84:	40014400 	.word	0x40014400
 8005f88:	40014800 	.word	0x40014800

08005f8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	f003 0302 	and.w	r3, r3, #2
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d122      	bne.n	8005fe8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	f003 0302 	and.w	r3, r3, #2
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d11b      	bne.n	8005fe8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f06f 0202 	mvn.w	r2, #2
 8005fb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	f003 0303 	and.w	r3, r3, #3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d003      	beq.n	8005fd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 fa6f 	bl	80064b2 <HAL_TIM_IC_CaptureCallback>
 8005fd4:	e005      	b.n	8005fe2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 fa62 	bl	80064a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 fa71 	bl	80064c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	f003 0304 	and.w	r3, r3, #4
 8005ff2:	2b04      	cmp	r3, #4
 8005ff4:	d122      	bne.n	800603c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	f003 0304 	and.w	r3, r3, #4
 8006000:	2b04      	cmp	r3, #4
 8006002:	d11b      	bne.n	800603c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f06f 0204 	mvn.w	r2, #4
 800600c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2202      	movs	r2, #2
 8006012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	699b      	ldr	r3, [r3, #24]
 800601a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800601e:	2b00      	cmp	r3, #0
 8006020:	d003      	beq.n	800602a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 fa45 	bl	80064b2 <HAL_TIM_IC_CaptureCallback>
 8006028:	e005      	b.n	8006036 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 fa38 	bl	80064a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 fa47 	bl	80064c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	f003 0308 	and.w	r3, r3, #8
 8006046:	2b08      	cmp	r3, #8
 8006048:	d122      	bne.n	8006090 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	f003 0308 	and.w	r3, r3, #8
 8006054:	2b08      	cmp	r3, #8
 8006056:	d11b      	bne.n	8006090 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f06f 0208 	mvn.w	r2, #8
 8006060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2204      	movs	r2, #4
 8006066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	69db      	ldr	r3, [r3, #28]
 800606e:	f003 0303 	and.w	r3, r3, #3
 8006072:	2b00      	cmp	r3, #0
 8006074:	d003      	beq.n	800607e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 fa1b 	bl	80064b2 <HAL_TIM_IC_CaptureCallback>
 800607c:	e005      	b.n	800608a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 fa0e 	bl	80064a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f000 fa1d 	bl	80064c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	f003 0310 	and.w	r3, r3, #16
 800609a:	2b10      	cmp	r3, #16
 800609c:	d122      	bne.n	80060e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	f003 0310 	and.w	r3, r3, #16
 80060a8:	2b10      	cmp	r3, #16
 80060aa:	d11b      	bne.n	80060e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f06f 0210 	mvn.w	r2, #16
 80060b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2208      	movs	r2, #8
 80060ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	69db      	ldr	r3, [r3, #28]
 80060c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d003      	beq.n	80060d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f9f1 	bl	80064b2 <HAL_TIM_IC_CaptureCallback>
 80060d0:	e005      	b.n	80060de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f9e4 	bl	80064a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 f9f3 	bl	80064c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	f003 0301 	and.w	r3, r3, #1
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d10e      	bne.n	8006110 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	f003 0301 	and.w	r3, r3, #1
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d107      	bne.n	8006110 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f06f 0201 	mvn.w	r2, #1
 8006108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f007 fc6a 	bl	800d9e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800611a:	2b80      	cmp	r3, #128	; 0x80
 800611c:	d10e      	bne.n	800613c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006128:	2b80      	cmp	r3, #128	; 0x80
 800612a:	d107      	bne.n	800613c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 fd5b 	bl	8006bf2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006146:	2b40      	cmp	r3, #64	; 0x40
 8006148:	d10e      	bne.n	8006168 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006154:	2b40      	cmp	r3, #64	; 0x40
 8006156:	d107      	bne.n	8006168 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f9b7 	bl	80064d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	f003 0320 	and.w	r3, r3, #32
 8006172:	2b20      	cmp	r3, #32
 8006174:	d10e      	bne.n	8006194 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	f003 0320 	and.w	r3, r3, #32
 8006180:	2b20      	cmp	r3, #32
 8006182:	d107      	bne.n	8006194 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f06f 0220 	mvn.w	r2, #32
 800618c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 fd26 	bl	8006be0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006194:	bf00      	nop
 8006196:	3708      	adds	r7, #8
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d101      	bne.n	80061b6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80061b2:	2302      	movs	r3, #2
 80061b4:	e0ac      	b.n	8006310 <HAL_TIM_PWM_ConfigChannel+0x174>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2b0c      	cmp	r3, #12
 80061c2:	f200 809f 	bhi.w	8006304 <HAL_TIM_PWM_ConfigChannel+0x168>
 80061c6:	a201      	add	r2, pc, #4	; (adr r2, 80061cc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80061c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061cc:	08006201 	.word	0x08006201
 80061d0:	08006305 	.word	0x08006305
 80061d4:	08006305 	.word	0x08006305
 80061d8:	08006305 	.word	0x08006305
 80061dc:	08006241 	.word	0x08006241
 80061e0:	08006305 	.word	0x08006305
 80061e4:	08006305 	.word	0x08006305
 80061e8:	08006305 	.word	0x08006305
 80061ec:	08006283 	.word	0x08006283
 80061f0:	08006305 	.word	0x08006305
 80061f4:	08006305 	.word	0x08006305
 80061f8:	08006305 	.word	0x08006305
 80061fc:	080062c3 	.word	0x080062c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68b9      	ldr	r1, [r7, #8]
 8006206:	4618      	mov	r0, r3
 8006208:	f000 f9ee 	bl	80065e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	699a      	ldr	r2, [r3, #24]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f042 0208 	orr.w	r2, r2, #8
 800621a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	699a      	ldr	r2, [r3, #24]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f022 0204 	bic.w	r2, r2, #4
 800622a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6999      	ldr	r1, [r3, #24]
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	691a      	ldr	r2, [r3, #16]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	430a      	orrs	r2, r1
 800623c:	619a      	str	r2, [r3, #24]
      break;
 800623e:	e062      	b.n	8006306 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68b9      	ldr	r1, [r7, #8]
 8006246:	4618      	mov	r0, r3
 8006248:	f000 fa52 	bl	80066f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	699a      	ldr	r2, [r3, #24]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800625a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	699a      	ldr	r2, [r3, #24]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800626a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6999      	ldr	r1, [r3, #24]
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	021a      	lsls	r2, r3, #8
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	430a      	orrs	r2, r1
 800627e:	619a      	str	r2, [r3, #24]
      break;
 8006280:	e041      	b.n	8006306 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68b9      	ldr	r1, [r7, #8]
 8006288:	4618      	mov	r0, r3
 800628a:	f000 faad 	bl	80067e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	69da      	ldr	r2, [r3, #28]
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f042 0208 	orr.w	r2, r2, #8
 800629c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	69da      	ldr	r2, [r3, #28]
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f022 0204 	bic.w	r2, r2, #4
 80062ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	69d9      	ldr	r1, [r3, #28]
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	691a      	ldr	r2, [r3, #16]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	430a      	orrs	r2, r1
 80062be:	61da      	str	r2, [r3, #28]
      break;
 80062c0:	e021      	b.n	8006306 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68b9      	ldr	r1, [r7, #8]
 80062c8:	4618      	mov	r0, r3
 80062ca:	f000 fb09 	bl	80068e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	69da      	ldr	r2, [r3, #28]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	69da      	ldr	r2, [r3, #28]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	69d9      	ldr	r1, [r3, #28]
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	021a      	lsls	r2, r3, #8
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	430a      	orrs	r2, r1
 8006300:	61da      	str	r2, [r3, #28]
      break;
 8006302:	e000      	b.n	8006306 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006304:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800630e:	2300      	movs	r3, #0
}
 8006310:	4618      	mov	r0, r3
 8006312:	3710      	adds	r7, #16
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006328:	2b01      	cmp	r3, #1
 800632a:	d101      	bne.n	8006330 <HAL_TIM_ConfigClockSource+0x18>
 800632c:	2302      	movs	r3, #2
 800632e:	e0b3      	b.n	8006498 <HAL_TIM_ConfigClockSource+0x180>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2202      	movs	r2, #2
 800633c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800634e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006356:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68fa      	ldr	r2, [r7, #12]
 800635e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006368:	d03e      	beq.n	80063e8 <HAL_TIM_ConfigClockSource+0xd0>
 800636a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800636e:	f200 8087 	bhi.w	8006480 <HAL_TIM_ConfigClockSource+0x168>
 8006372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006376:	f000 8085 	beq.w	8006484 <HAL_TIM_ConfigClockSource+0x16c>
 800637a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800637e:	d87f      	bhi.n	8006480 <HAL_TIM_ConfigClockSource+0x168>
 8006380:	2b70      	cmp	r3, #112	; 0x70
 8006382:	d01a      	beq.n	80063ba <HAL_TIM_ConfigClockSource+0xa2>
 8006384:	2b70      	cmp	r3, #112	; 0x70
 8006386:	d87b      	bhi.n	8006480 <HAL_TIM_ConfigClockSource+0x168>
 8006388:	2b60      	cmp	r3, #96	; 0x60
 800638a:	d050      	beq.n	800642e <HAL_TIM_ConfigClockSource+0x116>
 800638c:	2b60      	cmp	r3, #96	; 0x60
 800638e:	d877      	bhi.n	8006480 <HAL_TIM_ConfigClockSource+0x168>
 8006390:	2b50      	cmp	r3, #80	; 0x50
 8006392:	d03c      	beq.n	800640e <HAL_TIM_ConfigClockSource+0xf6>
 8006394:	2b50      	cmp	r3, #80	; 0x50
 8006396:	d873      	bhi.n	8006480 <HAL_TIM_ConfigClockSource+0x168>
 8006398:	2b40      	cmp	r3, #64	; 0x40
 800639a:	d058      	beq.n	800644e <HAL_TIM_ConfigClockSource+0x136>
 800639c:	2b40      	cmp	r3, #64	; 0x40
 800639e:	d86f      	bhi.n	8006480 <HAL_TIM_ConfigClockSource+0x168>
 80063a0:	2b30      	cmp	r3, #48	; 0x30
 80063a2:	d064      	beq.n	800646e <HAL_TIM_ConfigClockSource+0x156>
 80063a4:	2b30      	cmp	r3, #48	; 0x30
 80063a6:	d86b      	bhi.n	8006480 <HAL_TIM_ConfigClockSource+0x168>
 80063a8:	2b20      	cmp	r3, #32
 80063aa:	d060      	beq.n	800646e <HAL_TIM_ConfigClockSource+0x156>
 80063ac:	2b20      	cmp	r3, #32
 80063ae:	d867      	bhi.n	8006480 <HAL_TIM_ConfigClockSource+0x168>
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d05c      	beq.n	800646e <HAL_TIM_ConfigClockSource+0x156>
 80063b4:	2b10      	cmp	r3, #16
 80063b6:	d05a      	beq.n	800646e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80063b8:	e062      	b.n	8006480 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6818      	ldr	r0, [r3, #0]
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	6899      	ldr	r1, [r3, #8]
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	685a      	ldr	r2, [r3, #4]
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	f000 fb60 	bl	8006a8e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063dc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	609a      	str	r2, [r3, #8]
      break;
 80063e6:	e04e      	b.n	8006486 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6818      	ldr	r0, [r3, #0]
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	6899      	ldr	r1, [r3, #8]
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	685a      	ldr	r2, [r3, #4]
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	f000 fb49 	bl	8006a8e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	689a      	ldr	r2, [r3, #8]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800640a:	609a      	str	r2, [r3, #8]
      break;
 800640c:	e03b      	b.n	8006486 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6818      	ldr	r0, [r3, #0]
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	6859      	ldr	r1, [r3, #4]
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	461a      	mov	r2, r3
 800641c:	f000 fac0 	bl	80069a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2150      	movs	r1, #80	; 0x50
 8006426:	4618      	mov	r0, r3
 8006428:	f000 fb17 	bl	8006a5a <TIM_ITRx_SetConfig>
      break;
 800642c:	e02b      	b.n	8006486 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6818      	ldr	r0, [r3, #0]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	6859      	ldr	r1, [r3, #4]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	461a      	mov	r2, r3
 800643c:	f000 fade 	bl	80069fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2160      	movs	r1, #96	; 0x60
 8006446:	4618      	mov	r0, r3
 8006448:	f000 fb07 	bl	8006a5a <TIM_ITRx_SetConfig>
      break;
 800644c:	e01b      	b.n	8006486 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6818      	ldr	r0, [r3, #0]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	6859      	ldr	r1, [r3, #4]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	461a      	mov	r2, r3
 800645c:	f000 faa0 	bl	80069a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2140      	movs	r1, #64	; 0x40
 8006466:	4618      	mov	r0, r3
 8006468:	f000 faf7 	bl	8006a5a <TIM_ITRx_SetConfig>
      break;
 800646c:	e00b      	b.n	8006486 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4619      	mov	r1, r3
 8006478:	4610      	mov	r0, r2
 800647a:	f000 faee 	bl	8006a5a <TIM_ITRx_SetConfig>
        break;
 800647e:	e002      	b.n	8006486 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006480:	bf00      	nop
 8006482:	e000      	b.n	8006486 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006484:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2201      	movs	r2, #1
 800648a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3710      	adds	r7, #16
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064a8:	bf00      	nop
 80064aa:	370c      	adds	r7, #12
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bc80      	pop	{r7}
 80064b0:	4770      	bx	lr

080064b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064b2:	b480      	push	{r7}
 80064b4:	b083      	sub	sp, #12
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064ba:	bf00      	nop
 80064bc:	370c      	adds	r7, #12
 80064be:	46bd      	mov	sp, r7
 80064c0:	bc80      	pop	{r7}
 80064c2:	4770      	bx	lr

080064c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064cc:	bf00      	nop
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bc80      	pop	{r7}
 80064d4:	4770      	bx	lr

080064d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064d6:	b480      	push	{r7}
 80064d8:	b083      	sub	sp, #12
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064de:	bf00      	nop
 80064e0:	370c      	adds	r7, #12
 80064e2:	46bd      	mov	sp, r7
 80064e4:	bc80      	pop	{r7}
 80064e6:	4770      	bx	lr

080064e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a35      	ldr	r2, [pc, #212]	; (80065d0 <TIM_Base_SetConfig+0xe8>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d00b      	beq.n	8006518 <TIM_Base_SetConfig+0x30>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006506:	d007      	beq.n	8006518 <TIM_Base_SetConfig+0x30>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a32      	ldr	r2, [pc, #200]	; (80065d4 <TIM_Base_SetConfig+0xec>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d003      	beq.n	8006518 <TIM_Base_SetConfig+0x30>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a31      	ldr	r2, [pc, #196]	; (80065d8 <TIM_Base_SetConfig+0xf0>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d108      	bne.n	800652a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800651e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	4313      	orrs	r3, r2
 8006528:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a28      	ldr	r2, [pc, #160]	; (80065d0 <TIM_Base_SetConfig+0xe8>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d017      	beq.n	8006562 <TIM_Base_SetConfig+0x7a>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006538:	d013      	beq.n	8006562 <TIM_Base_SetConfig+0x7a>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a25      	ldr	r2, [pc, #148]	; (80065d4 <TIM_Base_SetConfig+0xec>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d00f      	beq.n	8006562 <TIM_Base_SetConfig+0x7a>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a24      	ldr	r2, [pc, #144]	; (80065d8 <TIM_Base_SetConfig+0xf0>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d00b      	beq.n	8006562 <TIM_Base_SetConfig+0x7a>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a23      	ldr	r2, [pc, #140]	; (80065dc <TIM_Base_SetConfig+0xf4>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d007      	beq.n	8006562 <TIM_Base_SetConfig+0x7a>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a22      	ldr	r2, [pc, #136]	; (80065e0 <TIM_Base_SetConfig+0xf8>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d003      	beq.n	8006562 <TIM_Base_SetConfig+0x7a>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a21      	ldr	r2, [pc, #132]	; (80065e4 <TIM_Base_SetConfig+0xfc>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d108      	bne.n	8006574 <TIM_Base_SetConfig+0x8c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006568:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	68db      	ldr	r3, [r3, #12]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	4313      	orrs	r3, r2
 8006572:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	4313      	orrs	r3, r2
 8006580:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	689a      	ldr	r2, [r3, #8]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a0d      	ldr	r2, [pc, #52]	; (80065d0 <TIM_Base_SetConfig+0xe8>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d00b      	beq.n	80065b8 <TIM_Base_SetConfig+0xd0>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4a0e      	ldr	r2, [pc, #56]	; (80065dc <TIM_Base_SetConfig+0xf4>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d007      	beq.n	80065b8 <TIM_Base_SetConfig+0xd0>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a0d      	ldr	r2, [pc, #52]	; (80065e0 <TIM_Base_SetConfig+0xf8>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d003      	beq.n	80065b8 <TIM_Base_SetConfig+0xd0>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a0c      	ldr	r2, [pc, #48]	; (80065e4 <TIM_Base_SetConfig+0xfc>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d103      	bne.n	80065c0 <TIM_Base_SetConfig+0xd8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	691a      	ldr	r2, [r3, #16]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	615a      	str	r2, [r3, #20]
}
 80065c6:	bf00      	nop
 80065c8:	3714      	adds	r7, #20
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bc80      	pop	{r7}
 80065ce:	4770      	bx	lr
 80065d0:	40012c00 	.word	0x40012c00
 80065d4:	40000400 	.word	0x40000400
 80065d8:	40000800 	.word	0x40000800
 80065dc:	40014000 	.word	0x40014000
 80065e0:	40014400 	.word	0x40014400
 80065e4:	40014800 	.word	0x40014800

080065e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b087      	sub	sp, #28
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a1b      	ldr	r3, [r3, #32]
 80065f6:	f023 0201 	bic.w	r2, r3, #1
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6a1b      	ldr	r3, [r3, #32]
 8006602:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	699b      	ldr	r3, [r3, #24]
 800660e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f023 0303 	bic.w	r3, r3, #3
 800661e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	4313      	orrs	r3, r2
 8006628:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	f023 0302 	bic.w	r3, r3, #2
 8006630:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	697a      	ldr	r2, [r7, #20]
 8006638:	4313      	orrs	r3, r2
 800663a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4a28      	ldr	r2, [pc, #160]	; (80066e0 <TIM_OC1_SetConfig+0xf8>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d00b      	beq.n	800665c <TIM_OC1_SetConfig+0x74>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	4a27      	ldr	r2, [pc, #156]	; (80066e4 <TIM_OC1_SetConfig+0xfc>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d007      	beq.n	800665c <TIM_OC1_SetConfig+0x74>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a26      	ldr	r2, [pc, #152]	; (80066e8 <TIM_OC1_SetConfig+0x100>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d003      	beq.n	800665c <TIM_OC1_SetConfig+0x74>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a25      	ldr	r2, [pc, #148]	; (80066ec <TIM_OC1_SetConfig+0x104>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d10c      	bne.n	8006676 <TIM_OC1_SetConfig+0x8e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	f023 0308 	bic.w	r3, r3, #8
 8006662:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	697a      	ldr	r2, [r7, #20]
 800666a:	4313      	orrs	r3, r2
 800666c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	f023 0304 	bic.w	r3, r3, #4
 8006674:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	4a19      	ldr	r2, [pc, #100]	; (80066e0 <TIM_OC1_SetConfig+0xf8>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d00b      	beq.n	8006696 <TIM_OC1_SetConfig+0xae>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a18      	ldr	r2, [pc, #96]	; (80066e4 <TIM_OC1_SetConfig+0xfc>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d007      	beq.n	8006696 <TIM_OC1_SetConfig+0xae>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a17      	ldr	r2, [pc, #92]	; (80066e8 <TIM_OC1_SetConfig+0x100>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d003      	beq.n	8006696 <TIM_OC1_SetConfig+0xae>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a16      	ldr	r2, [pc, #88]	; (80066ec <TIM_OC1_SetConfig+0x104>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d111      	bne.n	80066ba <TIM_OC1_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800669c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	693a      	ldr	r2, [r7, #16]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	699b      	ldr	r3, [r3, #24]
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	685a      	ldr	r2, [r3, #4]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	697a      	ldr	r2, [r7, #20]
 80066d2:	621a      	str	r2, [r3, #32]
}
 80066d4:	bf00      	nop
 80066d6:	371c      	adds	r7, #28
 80066d8:	46bd      	mov	sp, r7
 80066da:	bc80      	pop	{r7}
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	40012c00 	.word	0x40012c00
 80066e4:	40014000 	.word	0x40014000
 80066e8:	40014400 	.word	0x40014400
 80066ec:	40014800 	.word	0x40014800

080066f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b087      	sub	sp, #28
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	f023 0210 	bic.w	r2, r3, #16
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800671e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	021b      	lsls	r3, r3, #8
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	4313      	orrs	r3, r2
 8006732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	f023 0320 	bic.w	r3, r3, #32
 800673a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	011b      	lsls	r3, r3, #4
 8006742:	697a      	ldr	r2, [r7, #20]
 8006744:	4313      	orrs	r3, r2
 8006746:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a23      	ldr	r2, [pc, #140]	; (80067d8 <TIM_OC2_SetConfig+0xe8>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d10d      	bne.n	800676c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	011b      	lsls	r3, r3, #4
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	4313      	orrs	r3, r2
 8006762:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800676a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a1a      	ldr	r2, [pc, #104]	; (80067d8 <TIM_OC2_SetConfig+0xe8>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d00b      	beq.n	800678c <TIM_OC2_SetConfig+0x9c>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a19      	ldr	r2, [pc, #100]	; (80067dc <TIM_OC2_SetConfig+0xec>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d007      	beq.n	800678c <TIM_OC2_SetConfig+0x9c>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a18      	ldr	r2, [pc, #96]	; (80067e0 <TIM_OC2_SetConfig+0xf0>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d003      	beq.n	800678c <TIM_OC2_SetConfig+0x9c>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a17      	ldr	r2, [pc, #92]	; (80067e4 <TIM_OC2_SetConfig+0xf4>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d113      	bne.n	80067b4 <TIM_OC2_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006792:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800679a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	695b      	ldr	r3, [r3, #20]
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	699b      	ldr	r3, [r3, #24]
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	693a      	ldr	r2, [r7, #16]
 80067b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	685a      	ldr	r2, [r3, #4]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	697a      	ldr	r2, [r7, #20]
 80067cc:	621a      	str	r2, [r3, #32]
}
 80067ce:	bf00      	nop
 80067d0:	371c      	adds	r7, #28
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bc80      	pop	{r7}
 80067d6:	4770      	bx	lr
 80067d8:	40012c00 	.word	0x40012c00
 80067dc:	40014000 	.word	0x40014000
 80067e0:	40014400 	.word	0x40014400
 80067e4:	40014800 	.word	0x40014800

080067e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b087      	sub	sp, #28
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
 80067f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a1b      	ldr	r3, [r3, #32]
 80067f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a1b      	ldr	r3, [r3, #32]
 8006802:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	69db      	ldr	r3, [r3, #28]
 800680e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f023 0303 	bic.w	r3, r3, #3
 800681e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	4313      	orrs	r3, r2
 8006828:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006830:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	021b      	lsls	r3, r3, #8
 8006838:	697a      	ldr	r2, [r7, #20]
 800683a:	4313      	orrs	r3, r2
 800683c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a23      	ldr	r2, [pc, #140]	; (80068d0 <TIM_OC3_SetConfig+0xe8>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d10d      	bne.n	8006862 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800684c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	021b      	lsls	r3, r3, #8
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	4313      	orrs	r3, r2
 8006858:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006860:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a1a      	ldr	r2, [pc, #104]	; (80068d0 <TIM_OC3_SetConfig+0xe8>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d00b      	beq.n	8006882 <TIM_OC3_SetConfig+0x9a>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4a19      	ldr	r2, [pc, #100]	; (80068d4 <TIM_OC3_SetConfig+0xec>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d007      	beq.n	8006882 <TIM_OC3_SetConfig+0x9a>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	4a18      	ldr	r2, [pc, #96]	; (80068d8 <TIM_OC3_SetConfig+0xf0>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d003      	beq.n	8006882 <TIM_OC3_SetConfig+0x9a>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	4a17      	ldr	r2, [pc, #92]	; (80068dc <TIM_OC3_SetConfig+0xf4>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d113      	bne.n	80068aa <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006888:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006890:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	011b      	lsls	r3, r3, #4
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	4313      	orrs	r3, r2
 800689c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	699b      	ldr	r3, [r3, #24]
 80068a2:	011b      	lsls	r3, r3, #4
 80068a4:	693a      	ldr	r2, [r7, #16]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	693a      	ldr	r2, [r7, #16]
 80068ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	685a      	ldr	r2, [r3, #4]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	697a      	ldr	r2, [r7, #20]
 80068c2:	621a      	str	r2, [r3, #32]
}
 80068c4:	bf00      	nop
 80068c6:	371c      	adds	r7, #28
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bc80      	pop	{r7}
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	40012c00 	.word	0x40012c00
 80068d4:	40014000 	.word	0x40014000
 80068d8:	40014400 	.word	0x40014400
 80068dc:	40014800 	.word	0x40014800

080068e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b087      	sub	sp, #28
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a1b      	ldr	r3, [r3, #32]
 80068ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	69db      	ldr	r3, [r3, #28]
 8006906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800690e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006916:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	021b      	lsls	r3, r3, #8
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	4313      	orrs	r3, r2
 8006922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800692a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	031b      	lsls	r3, r3, #12
 8006932:	693a      	ldr	r2, [r7, #16]
 8006934:	4313      	orrs	r3, r2
 8006936:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a15      	ldr	r2, [pc, #84]	; (8006990 <TIM_OC4_SetConfig+0xb0>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d00b      	beq.n	8006958 <TIM_OC4_SetConfig+0x78>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a14      	ldr	r2, [pc, #80]	; (8006994 <TIM_OC4_SetConfig+0xb4>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d007      	beq.n	8006958 <TIM_OC4_SetConfig+0x78>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a13      	ldr	r2, [pc, #76]	; (8006998 <TIM_OC4_SetConfig+0xb8>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d003      	beq.n	8006958 <TIM_OC4_SetConfig+0x78>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a12      	ldr	r2, [pc, #72]	; (800699c <TIM_OC4_SetConfig+0xbc>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d109      	bne.n	800696c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800695e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	695b      	ldr	r3, [r3, #20]
 8006964:	019b      	lsls	r3, r3, #6
 8006966:	697a      	ldr	r2, [r7, #20]
 8006968:	4313      	orrs	r3, r2
 800696a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	685a      	ldr	r2, [r3, #4]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	693a      	ldr	r2, [r7, #16]
 8006984:	621a      	str	r2, [r3, #32]
}
 8006986:	bf00      	nop
 8006988:	371c      	adds	r7, #28
 800698a:	46bd      	mov	sp, r7
 800698c:	bc80      	pop	{r7}
 800698e:	4770      	bx	lr
 8006990:	40012c00 	.word	0x40012c00
 8006994:	40014000 	.word	0x40014000
 8006998:	40014400 	.word	0x40014400
 800699c:	40014800 	.word	0x40014800

080069a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b087      	sub	sp, #28
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6a1b      	ldr	r3, [r3, #32]
 80069b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	f023 0201 	bic.w	r2, r3, #1
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	011b      	lsls	r3, r3, #4
 80069d0:	693a      	ldr	r2, [r7, #16]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f023 030a 	bic.w	r3, r3, #10
 80069dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069de:	697a      	ldr	r2, [r7, #20]
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	697a      	ldr	r2, [r7, #20]
 80069f0:	621a      	str	r2, [r3, #32]
}
 80069f2:	bf00      	nop
 80069f4:	371c      	adds	r7, #28
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bc80      	pop	{r7}
 80069fa:	4770      	bx	lr

080069fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b087      	sub	sp, #28
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6a1b      	ldr	r3, [r3, #32]
 8006a0c:	f023 0210 	bic.w	r2, r3, #16
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	699b      	ldr	r3, [r3, #24]
 8006a18:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6a1b      	ldr	r3, [r3, #32]
 8006a1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a26:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	031b      	lsls	r3, r3, #12
 8006a2c:	697a      	ldr	r2, [r7, #20]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a38:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	011b      	lsls	r3, r3, #4
 8006a3e:	693a      	ldr	r2, [r7, #16]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	693a      	ldr	r2, [r7, #16]
 8006a4e:	621a      	str	r2, [r3, #32]
}
 8006a50:	bf00      	nop
 8006a52:	371c      	adds	r7, #28
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bc80      	pop	{r7}
 8006a58:	4770      	bx	lr

08006a5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b085      	sub	sp, #20
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	6078      	str	r0, [r7, #4]
 8006a62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	689b      	ldr	r3, [r3, #8]
 8006a68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a72:	683a      	ldr	r2, [r7, #0]
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	f043 0307 	orr.w	r3, r3, #7
 8006a7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	609a      	str	r2, [r3, #8]
}
 8006a84:	bf00      	nop
 8006a86:	3714      	adds	r7, #20
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bc80      	pop	{r7}
 8006a8c:	4770      	bx	lr

08006a8e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a8e:	b480      	push	{r7}
 8006a90:	b087      	sub	sp, #28
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	60f8      	str	r0, [r7, #12]
 8006a96:	60b9      	str	r1, [r7, #8]
 8006a98:	607a      	str	r2, [r7, #4]
 8006a9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006aa8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	021a      	lsls	r2, r3, #8
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	431a      	orrs	r2, r3
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	697a      	ldr	r2, [r7, #20]
 8006ac0:	609a      	str	r2, [r3, #8]
}
 8006ac2:	bf00      	nop
 8006ac4:	371c      	adds	r7, #28
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bc80      	pop	{r7}
 8006aca:	4770      	bx	lr

08006acc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b087      	sub	sp, #28
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	f003 031f 	and.w	r3, r3, #31
 8006ade:	2201      	movs	r2, #1
 8006ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6a1a      	ldr	r2, [r3, #32]
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	43db      	mvns	r3, r3
 8006aee:	401a      	ands	r2, r3
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6a1a      	ldr	r2, [r3, #32]
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	f003 031f 	and.w	r3, r3, #31
 8006afe:	6879      	ldr	r1, [r7, #4]
 8006b00:	fa01 f303 	lsl.w	r3, r1, r3
 8006b04:	431a      	orrs	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	621a      	str	r2, [r3, #32]
}
 8006b0a:	bf00      	nop
 8006b0c:	371c      	adds	r7, #28
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bc80      	pop	{r7}
 8006b12:	4770      	bx	lr

08006b14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d101      	bne.n	8006b2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b28:	2302      	movs	r3, #2
 8006b2a:	e04b      	b.n	8006bc4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2202      	movs	r2, #2
 8006b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a19      	ldr	r2, [pc, #100]	; (8006bd0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d013      	beq.n	8006b98 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b78:	d00e      	beq.n	8006b98 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a15      	ldr	r2, [pc, #84]	; (8006bd4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d009      	beq.n	8006b98 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a13      	ldr	r2, [pc, #76]	; (8006bd8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d004      	beq.n	8006b98 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a12      	ldr	r2, [pc, #72]	; (8006bdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d10c      	bne.n	8006bb2 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	68ba      	ldr	r2, [r7, #8]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68ba      	ldr	r2, [r7, #8]
 8006bb0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3714      	adds	r7, #20
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bc80      	pop	{r7}
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	40012c00 	.word	0x40012c00
 8006bd4:	40000400 	.word	0x40000400
 8006bd8:	40000800 	.word	0x40000800
 8006bdc:	40014000 	.word	0x40014000

08006be0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006be8:	bf00      	nop
 8006bea:	370c      	adds	r7, #12
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bc80      	pop	{r7}
 8006bf0:	4770      	bx	lr

08006bf2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b083      	sub	sp, #12
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bfa:	bf00      	nop
 8006bfc:	370c      	adds	r7, #12
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bc80      	pop	{r7}
 8006c02:	4770      	bx	lr

08006c04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b082      	sub	sp, #8
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d101      	bne.n	8006c16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	e03f      	b.n	8006c96 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d106      	bne.n	8006c30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f7fb fa2a 	bl	8002084 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2224      	movs	r2, #36	; 0x24
 8006c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68da      	ldr	r2, [r3, #12]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 f829 	bl	8006ca0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	691a      	ldr	r2, [r3, #16]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	695a      	ldr	r2, [r3, #20]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	68da      	ldr	r2, [r3, #12]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2220      	movs	r2, #32
 8006c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2220      	movs	r2, #32
 8006c90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3708      	adds	r7, #8
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}
	...

08006ca0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	691b      	ldr	r3, [r3, #16]
 8006cae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	68da      	ldr	r2, [r3, #12]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	430a      	orrs	r2, r1
 8006cbc:	611a      	str	r2, [r3, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

#if defined(USART_CR1_OVER8)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	689a      	ldr	r2, [r3, #8]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	431a      	orrs	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	695b      	ldr	r3, [r3, #20]
 8006ccc:	431a      	orrs	r2, r3
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	69db      	ldr	r3, [r3, #28]
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006ce0:	f023 030c 	bic.w	r3, r3, #12
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	6812      	ldr	r2, [r2, #0]
 8006ce8:	68b9      	ldr	r1, [r7, #8]
 8006cea:	430b      	orrs	r3, r1
 8006cec:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	695b      	ldr	r3, [r3, #20]
 8006cf4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	699a      	ldr	r2, [r3, #24]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	430a      	orrs	r2, r1
 8006d02:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a55      	ldr	r2, [pc, #340]	; (8006e60 <UART_SetConfig+0x1c0>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d103      	bne.n	8006d16 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006d0e:	f7fe fa87 	bl	8005220 <HAL_RCC_GetPCLK2Freq>
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	e002      	b.n	8006d1c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006d16:	f7fe fa6f 	bl	80051f8 <HAL_RCC_GetPCLK1Freq>
 8006d1a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART_CR1_OVER8)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	69db      	ldr	r3, [r3, #28]
 8006d20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d24:	d14c      	bne.n	8006dc0 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	4413      	add	r3, r2
 8006d2e:	009a      	lsls	r2, r3, #2
 8006d30:	441a      	add	r2, r3
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	005b      	lsls	r3, r3, #1
 8006d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d3c:	4a49      	ldr	r2, [pc, #292]	; (8006e64 <UART_SetConfig+0x1c4>)
 8006d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d42:	095b      	lsrs	r3, r3, #5
 8006d44:	0119      	lsls	r1, r3, #4
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	4613      	mov	r3, r2
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	4413      	add	r3, r2
 8006d4e:	009a      	lsls	r2, r3, #2
 8006d50:	441a      	add	r2, r3
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	005b      	lsls	r3, r3, #1
 8006d58:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d5c:	4b41      	ldr	r3, [pc, #260]	; (8006e64 <UART_SetConfig+0x1c4>)
 8006d5e:	fba3 0302 	umull	r0, r3, r3, r2
 8006d62:	095b      	lsrs	r3, r3, #5
 8006d64:	2064      	movs	r0, #100	; 0x64
 8006d66:	fb00 f303 	mul.w	r3, r0, r3
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	00db      	lsls	r3, r3, #3
 8006d6e:	3332      	adds	r3, #50	; 0x32
 8006d70:	4a3c      	ldr	r2, [pc, #240]	; (8006e64 <UART_SetConfig+0x1c4>)
 8006d72:	fba2 2303 	umull	r2, r3, r2, r3
 8006d76:	095b      	lsrs	r3, r3, #5
 8006d78:	005b      	lsls	r3, r3, #1
 8006d7a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d7e:	4419      	add	r1, r3
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	4613      	mov	r3, r2
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	4413      	add	r3, r2
 8006d88:	009a      	lsls	r2, r3, #2
 8006d8a:	441a      	add	r2, r3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	005b      	lsls	r3, r3, #1
 8006d92:	fbb2 f2f3 	udiv	r2, r2, r3
 8006d96:	4b33      	ldr	r3, [pc, #204]	; (8006e64 <UART_SetConfig+0x1c4>)
 8006d98:	fba3 0302 	umull	r0, r3, r3, r2
 8006d9c:	095b      	lsrs	r3, r3, #5
 8006d9e:	2064      	movs	r0, #100	; 0x64
 8006da0:	fb00 f303 	mul.w	r3, r0, r3
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	00db      	lsls	r3, r3, #3
 8006da8:	3332      	adds	r3, #50	; 0x32
 8006daa:	4a2e      	ldr	r2, [pc, #184]	; (8006e64 <UART_SetConfig+0x1c4>)
 8006dac:	fba2 2303 	umull	r2, r3, r2, r3
 8006db0:	095b      	lsrs	r3, r3, #5
 8006db2:	f003 0207 	and.w	r2, r3, #7
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	440a      	add	r2, r1
 8006dbc:	609a      	str	r2, [r3, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
#endif /* USART_CR1_OVER8 */
}
 8006dbe:	e04a      	b.n	8006e56 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006dc0:	68fa      	ldr	r2, [r7, #12]
 8006dc2:	4613      	mov	r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	4413      	add	r3, r2
 8006dc8:	009a      	lsls	r2, r3, #2
 8006dca:	441a      	add	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	009b      	lsls	r3, r3, #2
 8006dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd6:	4a23      	ldr	r2, [pc, #140]	; (8006e64 <UART_SetConfig+0x1c4>)
 8006dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8006ddc:	095b      	lsrs	r3, r3, #5
 8006dde:	0119      	lsls	r1, r3, #4
 8006de0:	68fa      	ldr	r2, [r7, #12]
 8006de2:	4613      	mov	r3, r2
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	4413      	add	r3, r2
 8006de8:	009a      	lsls	r2, r3, #2
 8006dea:	441a      	add	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	009b      	lsls	r3, r3, #2
 8006df2:	fbb2 f2f3 	udiv	r2, r2, r3
 8006df6:	4b1b      	ldr	r3, [pc, #108]	; (8006e64 <UART_SetConfig+0x1c4>)
 8006df8:	fba3 0302 	umull	r0, r3, r3, r2
 8006dfc:	095b      	lsrs	r3, r3, #5
 8006dfe:	2064      	movs	r0, #100	; 0x64
 8006e00:	fb00 f303 	mul.w	r3, r0, r3
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	011b      	lsls	r3, r3, #4
 8006e08:	3332      	adds	r3, #50	; 0x32
 8006e0a:	4a16      	ldr	r2, [pc, #88]	; (8006e64 <UART_SetConfig+0x1c4>)
 8006e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006e10:	095b      	lsrs	r3, r3, #5
 8006e12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e16:	4419      	add	r1, r3
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	4413      	add	r3, r2
 8006e20:	009a      	lsls	r2, r3, #2
 8006e22:	441a      	add	r2, r3
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e2e:	4b0d      	ldr	r3, [pc, #52]	; (8006e64 <UART_SetConfig+0x1c4>)
 8006e30:	fba3 0302 	umull	r0, r3, r3, r2
 8006e34:	095b      	lsrs	r3, r3, #5
 8006e36:	2064      	movs	r0, #100	; 0x64
 8006e38:	fb00 f303 	mul.w	r3, r0, r3
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	011b      	lsls	r3, r3, #4
 8006e40:	3332      	adds	r3, #50	; 0x32
 8006e42:	4a08      	ldr	r2, [pc, #32]	; (8006e64 <UART_SetConfig+0x1c4>)
 8006e44:	fba2 2303 	umull	r2, r3, r2, r3
 8006e48:	095b      	lsrs	r3, r3, #5
 8006e4a:	f003 020f 	and.w	r2, r3, #15
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	440a      	add	r2, r1
 8006e54:	609a      	str	r2, [r3, #8]
}
 8006e56:	bf00      	nop
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	40013800 	.word	0x40013800
 8006e64:	51eb851f 	.word	0x51eb851f

08006e68 <NX7_AC_OFF>:
extern  AC_Temp_State  NX7_AC_Temp_State;

/* Functions body *************************************************************/
/* NX7_AC_OFF ----------------------------------------------------------------*/
void NX7_AC_OFF(void)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	af00      	add	r7, sp, #0
	NX7_AC_State = AC_OFF;
 8006e6c:	4b04      	ldr	r3, [pc, #16]	; (8006e80 <NX7_AC_OFF+0x18>)
 8006e6e:	2200      	movs	r2, #0
 8006e70:	701a      	strb	r2, [r3, #0]
	AC_Relay_OFF;
 8006e72:	2200      	movs	r2, #0
 8006e74:	2104      	movs	r1, #4
 8006e76:	4803      	ldr	r0, [pc, #12]	; (8006e84 <NX7_AC_OFF+0x1c>)
 8006e78:	f7fc fe19 	bl	8003aae <HAL_GPIO_WritePin>
}
 8006e7c:	bf00      	nop
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	2000020f 	.word	0x2000020f
 8006e84:	40011400 	.word	0x40011400

08006e88 <NX7_AC_ON>:

/* NX7_AC_ON -----------------------------------------------------------------*/
void NX7_AC_ON(void)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	af00      	add	r7, sp, #0
	if(NX7_AC_Temp_State == AC_Temp_ON)
 8006e8c:	4b0b      	ldr	r3, [pc, #44]	; (8006ebc <NX7_AC_ON+0x34>)
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d108      	bne.n	8006ea6 <NX7_AC_ON+0x1e>
	{
		NX7_AC_State = AC_ON;
 8006e94:	4b0a      	ldr	r3, [pc, #40]	; (8006ec0 <NX7_AC_ON+0x38>)
 8006e96:	2201      	movs	r2, #1
 8006e98:	701a      	strb	r2, [r3, #0]
		AC_Relay_ON;
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	2104      	movs	r1, #4
 8006e9e:	4809      	ldr	r0, [pc, #36]	; (8006ec4 <NX7_AC_ON+0x3c>)
 8006ea0:	f7fc fe05 	bl	8003aae <HAL_GPIO_WritePin>
	else
	{
		NX7_AC_State = AC_OFF;
		AC_Relay_OFF;
	}
}
 8006ea4:	e007      	b.n	8006eb6 <NX7_AC_ON+0x2e>
		NX7_AC_State = AC_OFF;
 8006ea6:	4b06      	ldr	r3, [pc, #24]	; (8006ec0 <NX7_AC_ON+0x38>)
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	701a      	strb	r2, [r3, #0]
		AC_Relay_OFF;
 8006eac:	2200      	movs	r2, #0
 8006eae:	2104      	movs	r1, #4
 8006eb0:	4804      	ldr	r0, [pc, #16]	; (8006ec4 <NX7_AC_ON+0x3c>)
 8006eb2:	f7fc fdfc 	bl	8003aae <HAL_GPIO_WritePin>
}
 8006eb6:	bf00      	nop
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	20000210 	.word	0x20000210
 8006ec0:	2000020f 	.word	0x2000020f
 8006ec4:	40011400 	.word	0x40011400

08006ec8 <NX7_AC_Handler>:

/* NX7_AC_Handler ------------------------------------------------------------*/
void NX7_AC_Handler(AC_State state)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	4603      	mov	r3, r0
 8006ed0:	71fb      	strb	r3, [r7, #7]
	switch (state)
 8006ed2:	79fb      	ldrb	r3, [r7, #7]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d002      	beq.n	8006ede <NX7_AC_Handler+0x16>
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d003      	beq.n	8006ee4 <NX7_AC_Handler+0x1c>
		{
			NX7_AC_ON();
			break;
		}
	}
}
 8006edc:	e005      	b.n	8006eea <NX7_AC_Handler+0x22>
			NX7_AC_OFF();
 8006ede:	f7ff ffc3 	bl	8006e68 <NX7_AC_OFF>
			break;
 8006ee2:	e002      	b.n	8006eea <NX7_AC_Handler+0x22>
			NX7_AC_ON();
 8006ee4:	f7ff ffd0 	bl	8006e88 <NX7_AC_ON>
			break;
 8006ee8:	bf00      	nop
}
 8006eea:	bf00      	nop
 8006eec:	3708      	adds	r7, #8
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
	...

08006ef4 <NX7_ADC_Init>:
extern	TIM_HandleTypeDef htim3;	//--> TIM3 is used to trigger ADC1

/* Functions body *************************************************************/
/* NX7_ADC_Init --------------------------------------------------------------*/
void NX7_ADC_Init(void)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	af00      	add	r7, sp, #0
	HAL_ADCEx_Calibration_Start(&hadc1);
 8006ef8:	4806      	ldr	r0, [pc, #24]	; (8006f14 <NX7_ADC_Init+0x20>)
 8006efa:	f7fb ff3b 	bl	8002d74 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1Val, 9);
 8006efe:	2209      	movs	r2, #9
 8006f00:	4905      	ldr	r1, [pc, #20]	; (8006f18 <NX7_ADC_Init+0x24>)
 8006f02:	4804      	ldr	r0, [pc, #16]	; (8006f14 <NX7_ADC_Init+0x20>)
 8006f04:	f7fb fbc4 	bl	8002690 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim3);
 8006f08:	4804      	ldr	r0, [pc, #16]	; (8006f1c <NX7_ADC_Init+0x28>)
 8006f0a:	f7fe fdcd 	bl	8005aa8 <HAL_TIM_Base_Start>
}
 8006f0e:	bf00      	nop
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	20000330 	.word	0x20000330
 8006f18:	20000578 	.word	0x20000578
 8006f1c:	200002e8 	.word	0x200002e8

08006f20 <HAL_ADC_ConvCpltCallback>:
	HAL_ADC_Stop_DMA(&hadc1);
}

/* ADC ISR Handler -----------------------------------------------------------*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006f20:	b590      	push	{r4, r7, lr}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af02      	add	r7, sp, #8
 8006f26:	6078      	str	r0, [r7, #4]
	/* <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><> */
	adcCounter++;
 8006f28:	4ba7      	ldr	r3, [pc, #668]	; (80071c8 <HAL_ADC_ConvCpltCallback+0x2a8>)
 8006f2a:	881b      	ldrh	r3, [r3, #0]
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	b29a      	uxth	r2, r3
 8006f30:	4ba5      	ldr	r3, [pc, #660]	; (80071c8 <HAL_ADC_ConvCpltCallback+0x2a8>)
 8006f32:	801a      	strh	r2, [r3, #0]
	if(adcCounter == 11)
 8006f34:	4ba4      	ldr	r3, [pc, #656]	; (80071c8 <HAL_ADC_ConvCpltCallback+0x2a8>)
 8006f36:	881b      	ldrh	r3, [r3, #0]
 8006f38:	2b0b      	cmp	r3, #11
 8006f3a:	d102      	bne.n	8006f42 <HAL_ADC_ConvCpltCallback+0x22>
	{
		adcCounter = 1;
 8006f3c:	4ba2      	ldr	r3, [pc, #648]	; (80071c8 <HAL_ADC_ConvCpltCallback+0x2a8>)
 8006f3e:	2201      	movs	r2, #1
 8006f40:	801a      	strh	r2, [r3, #0]
	}

	/* <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><> */
	NX7_IGN_VOLT	= ((adc1Val[0]*3.3)/4095)*4.0;
 8006f42:	4ba2      	ldr	r3, [pc, #648]	; (80071cc <HAL_ADC_ConvCpltCallback+0x2ac>)
 8006f44:	881b      	ldrh	r3, [r3, #0]
 8006f46:	4618      	mov	r0, r3
 8006f48:	f7f9 fabc 	bl	80004c4 <__aeabi_i2d>
 8006f4c:	a396      	add	r3, pc, #600	; (adr r3, 80071a8 <HAL_ADC_ConvCpltCallback+0x288>)
 8006f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f52:	f7f9 fb21 	bl	8000598 <__aeabi_dmul>
 8006f56:	4602      	mov	r2, r0
 8006f58:	460b      	mov	r3, r1
 8006f5a:	4610      	mov	r0, r2
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	a394      	add	r3, pc, #592	; (adr r3, 80071b0 <HAL_ADC_ConvCpltCallback+0x290>)
 8006f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f64:	f7f9 fc42 	bl	80007ec <__aeabi_ddiv>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	4610      	mov	r0, r2
 8006f6e:	4619      	mov	r1, r3
 8006f70:	f04f 0200 	mov.w	r2, #0
 8006f74:	4b96      	ldr	r3, [pc, #600]	; (80071d0 <HAL_ADC_ConvCpltCallback+0x2b0>)
 8006f76:	f7f9 fb0f 	bl	8000598 <__aeabi_dmul>
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	4610      	mov	r0, r2
 8006f80:	4619      	mov	r1, r3
 8006f82:	f7f9 fde1 	bl	8000b48 <__aeabi_d2f>
 8006f86:	4603      	mov	r3, r0
 8006f88:	4a92      	ldr	r2, [pc, #584]	; (80071d4 <HAL_ADC_ConvCpltCallback+0x2b4>)
 8006f8a:	6013      	str	r3, [r2, #0]
	NX7_Blower_VOLT	= ((adc1Val[1]*3.3)/4095)*5.0;
 8006f8c:	4b8f      	ldr	r3, [pc, #572]	; (80071cc <HAL_ADC_ConvCpltCallback+0x2ac>)
 8006f8e:	885b      	ldrh	r3, [r3, #2]
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7f9 fa97 	bl	80004c4 <__aeabi_i2d>
 8006f96:	a384      	add	r3, pc, #528	; (adr r3, 80071a8 <HAL_ADC_ConvCpltCallback+0x288>)
 8006f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9c:	f7f9 fafc 	bl	8000598 <__aeabi_dmul>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	4610      	mov	r0, r2
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	a381      	add	r3, pc, #516	; (adr r3, 80071b0 <HAL_ADC_ConvCpltCallback+0x290>)
 8006faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fae:	f7f9 fc1d 	bl	80007ec <__aeabi_ddiv>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	4610      	mov	r0, r2
 8006fb8:	4619      	mov	r1, r3
 8006fba:	f04f 0200 	mov.w	r2, #0
 8006fbe:	4b86      	ldr	r3, [pc, #536]	; (80071d8 <HAL_ADC_ConvCpltCallback+0x2b8>)
 8006fc0:	f7f9 faea 	bl	8000598 <__aeabi_dmul>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	4610      	mov	r0, r2
 8006fca:	4619      	mov	r1, r3
 8006fcc:	f7f9 fdbc 	bl	8000b48 <__aeabi_d2f>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	4a82      	ldr	r2, [pc, #520]	; (80071dc <HAL_ADC_ConvCpltCallback+0x2bc>)
 8006fd4:	6013      	str	r3, [r2, #0]
	NX7_Airmix_FB	= ((adc1Val[2]*3.3)/4095)*5.0/3.0;
 8006fd6:	4b7d      	ldr	r3, [pc, #500]	; (80071cc <HAL_ADC_ConvCpltCallback+0x2ac>)
 8006fd8:	889b      	ldrh	r3, [r3, #4]
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f7f9 fa72 	bl	80004c4 <__aeabi_i2d>
 8006fe0:	a371      	add	r3, pc, #452	; (adr r3, 80071a8 <HAL_ADC_ConvCpltCallback+0x288>)
 8006fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe6:	f7f9 fad7 	bl	8000598 <__aeabi_dmul>
 8006fea:	4602      	mov	r2, r0
 8006fec:	460b      	mov	r3, r1
 8006fee:	4610      	mov	r0, r2
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	a36f      	add	r3, pc, #444	; (adr r3, 80071b0 <HAL_ADC_ConvCpltCallback+0x290>)
 8006ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff8:	f7f9 fbf8 	bl	80007ec <__aeabi_ddiv>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	460b      	mov	r3, r1
 8007000:	4610      	mov	r0, r2
 8007002:	4619      	mov	r1, r3
 8007004:	f04f 0200 	mov.w	r2, #0
 8007008:	4b73      	ldr	r3, [pc, #460]	; (80071d8 <HAL_ADC_ConvCpltCallback+0x2b8>)
 800700a:	f7f9 fac5 	bl	8000598 <__aeabi_dmul>
 800700e:	4602      	mov	r2, r0
 8007010:	460b      	mov	r3, r1
 8007012:	4610      	mov	r0, r2
 8007014:	4619      	mov	r1, r3
 8007016:	f04f 0200 	mov.w	r2, #0
 800701a:	4b71      	ldr	r3, [pc, #452]	; (80071e0 <HAL_ADC_ConvCpltCallback+0x2c0>)
 800701c:	f7f9 fbe6 	bl	80007ec <__aeabi_ddiv>
 8007020:	4602      	mov	r2, r0
 8007022:	460b      	mov	r3, r1
 8007024:	4610      	mov	r0, r2
 8007026:	4619      	mov	r1, r3
 8007028:	f7f9 fd8e 	bl	8000b48 <__aeabi_d2f>
 800702c:	4603      	mov	r3, r0
 800702e:	4a6d      	ldr	r2, [pc, #436]	; (80071e4 <HAL_ADC_ConvCpltCallback+0x2c4>)
 8007030:	6013      	str	r3, [r2, #0]
	NX7_Mode_FB		= ((adc1Val[3]*3.3)/4095)*5.0/3.0;
 8007032:	4b66      	ldr	r3, [pc, #408]	; (80071cc <HAL_ADC_ConvCpltCallback+0x2ac>)
 8007034:	88db      	ldrh	r3, [r3, #6]
 8007036:	4618      	mov	r0, r3
 8007038:	f7f9 fa44 	bl	80004c4 <__aeabi_i2d>
 800703c:	a35a      	add	r3, pc, #360	; (adr r3, 80071a8 <HAL_ADC_ConvCpltCallback+0x288>)
 800703e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007042:	f7f9 faa9 	bl	8000598 <__aeabi_dmul>
 8007046:	4602      	mov	r2, r0
 8007048:	460b      	mov	r3, r1
 800704a:	4610      	mov	r0, r2
 800704c:	4619      	mov	r1, r3
 800704e:	a358      	add	r3, pc, #352	; (adr r3, 80071b0 <HAL_ADC_ConvCpltCallback+0x290>)
 8007050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007054:	f7f9 fbca 	bl	80007ec <__aeabi_ddiv>
 8007058:	4602      	mov	r2, r0
 800705a:	460b      	mov	r3, r1
 800705c:	4610      	mov	r0, r2
 800705e:	4619      	mov	r1, r3
 8007060:	f04f 0200 	mov.w	r2, #0
 8007064:	4b5c      	ldr	r3, [pc, #368]	; (80071d8 <HAL_ADC_ConvCpltCallback+0x2b8>)
 8007066:	f7f9 fa97 	bl	8000598 <__aeabi_dmul>
 800706a:	4602      	mov	r2, r0
 800706c:	460b      	mov	r3, r1
 800706e:	4610      	mov	r0, r2
 8007070:	4619      	mov	r1, r3
 8007072:	f04f 0200 	mov.w	r2, #0
 8007076:	4b5a      	ldr	r3, [pc, #360]	; (80071e0 <HAL_ADC_ConvCpltCallback+0x2c0>)
 8007078:	f7f9 fbb8 	bl	80007ec <__aeabi_ddiv>
 800707c:	4602      	mov	r2, r0
 800707e:	460b      	mov	r3, r1
 8007080:	4610      	mov	r0, r2
 8007082:	4619      	mov	r1, r3
 8007084:	f7f9 fd60 	bl	8000b48 <__aeabi_d2f>
 8007088:	4603      	mov	r3, r0
 800708a:	4a57      	ldr	r2, [pc, #348]	; (80071e8 <HAL_ADC_ConvCpltCallback+0x2c8>)
 800708c:	6013      	str	r3, [r2, #0]

	//--> CCU_IGN_OFF State Detection
	if(NX7_IGN_VOLT < 5.5)
 800708e:	4b51      	ldr	r3, [pc, #324]	; (80071d4 <HAL_ADC_ConvCpltCallback+0x2b4>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4956      	ldr	r1, [pc, #344]	; (80071ec <HAL_ADC_ConvCpltCallback+0x2cc>)
 8007094:	4618      	mov	r0, r3
 8007096:	f7fa f853 	bl	8001140 <__aeabi_fcmplt>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d012      	beq.n	80070c6 <HAL_ADC_ConvCpltCallback+0x1a6>
	{
		if(NX7_CCU_State==CCU_OFF)
 80070a0:	4b53      	ldr	r3, [pc, #332]	; (80071f0 <HAL_ADC_ConvCpltCallback+0x2d0>)
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d103      	bne.n	80070b0 <HAL_ADC_ConvCpltCallback+0x190>
		{NX7_CCU_State = CCU_IGN_OFF;}
 80070a8:	4b51      	ldr	r3, [pc, #324]	; (80071f0 <HAL_ADC_ConvCpltCallback+0x2d0>)
 80070aa:	2203      	movs	r2, #3
 80070ac:	701a      	strb	r2, [r3, #0]
 80070ae:	e00a      	b.n	80070c6 <HAL_ADC_ConvCpltCallback+0x1a6>
		else if((NX7_CCU_State==CCU_AUTO)||(NX7_CCU_State==CCU_DEF))
 80070b0:	4b4f      	ldr	r3, [pc, #316]	; (80071f0 <HAL_ADC_ConvCpltCallback+0x2d0>)
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d003      	beq.n	80070c0 <HAL_ADC_ConvCpltCallback+0x1a0>
 80070b8:	4b4d      	ldr	r3, [pc, #308]	; (80071f0 <HAL_ADC_ConvCpltCallback+0x2d0>)
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d102      	bne.n	80070c6 <HAL_ADC_ConvCpltCallback+0x1a6>
		{NX7_CCU_State_Updater(CCU_IGN_OFF);}
 80070c0:	2003      	movs	r0, #3
 80070c2:	f000 fd61 	bl	8007b88 <NX7_CCU_State_Updater>
	}
	//--> Actuator State Detection
	if((NX7_Airmix_FB<0.10)||(NX7_Airmix_FB>4.90))	{Airmix_MA_Pot_State = MA_Pot_Error;}
 80070c6:	4b47      	ldr	r3, [pc, #284]	; (80071e4 <HAL_ADC_ConvCpltCallback+0x2c4>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7f9 fa0c 	bl	80004e8 <__aeabi_f2d>
 80070d0:	a339      	add	r3, pc, #228	; (adr r3, 80071b8 <HAL_ADC_ConvCpltCallback+0x298>)
 80070d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d6:	f7f9 fcd1 	bl	8000a7c <__aeabi_dcmplt>
 80070da:	4603      	mov	r3, r0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d10c      	bne.n	80070fa <HAL_ADC_ConvCpltCallback+0x1da>
 80070e0:	4b40      	ldr	r3, [pc, #256]	; (80071e4 <HAL_ADC_ConvCpltCallback+0x2c4>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7f9 f9ff 	bl	80004e8 <__aeabi_f2d>
 80070ea:	a335      	add	r3, pc, #212	; (adr r3, 80071c0 <HAL_ADC_ConvCpltCallback+0x2a0>)
 80070ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f0:	f7f9 fce2 	bl	8000ab8 <__aeabi_dcmpgt>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d003      	beq.n	8007102 <HAL_ADC_ConvCpltCallback+0x1e2>
 80070fa:	4b3e      	ldr	r3, [pc, #248]	; (80071f4 <HAL_ADC_ConvCpltCallback+0x2d4>)
 80070fc:	2201      	movs	r2, #1
 80070fe:	701a      	strb	r2, [r3, #0]
 8007100:	e002      	b.n	8007108 <HAL_ADC_ConvCpltCallback+0x1e8>
	else											{Airmix_MA_Pot_State = MA_Pot_OK;}
 8007102:	4b3c      	ldr	r3, [pc, #240]	; (80071f4 <HAL_ADC_ConvCpltCallback+0x2d4>)
 8007104:	2200      	movs	r2, #0
 8007106:	701a      	strb	r2, [r3, #0]
	if((NX7_Mode_FB<0.10)||(NX7_Mode_FB>4.90))		{Mode_MA_Pot_State = MA_Pot_Error;}
 8007108:	4b37      	ldr	r3, [pc, #220]	; (80071e8 <HAL_ADC_ConvCpltCallback+0x2c8>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4618      	mov	r0, r3
 800710e:	f7f9 f9eb 	bl	80004e8 <__aeabi_f2d>
 8007112:	a329      	add	r3, pc, #164	; (adr r3, 80071b8 <HAL_ADC_ConvCpltCallback+0x298>)
 8007114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007118:	f7f9 fcb0 	bl	8000a7c <__aeabi_dcmplt>
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d10c      	bne.n	800713c <HAL_ADC_ConvCpltCallback+0x21c>
 8007122:	4b31      	ldr	r3, [pc, #196]	; (80071e8 <HAL_ADC_ConvCpltCallback+0x2c8>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4618      	mov	r0, r3
 8007128:	f7f9 f9de 	bl	80004e8 <__aeabi_f2d>
 800712c:	a324      	add	r3, pc, #144	; (adr r3, 80071c0 <HAL_ADC_ConvCpltCallback+0x2a0>)
 800712e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007132:	f7f9 fcc1 	bl	8000ab8 <__aeabi_dcmpgt>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d003      	beq.n	8007144 <HAL_ADC_ConvCpltCallback+0x224>
 800713c:	4b2e      	ldr	r3, [pc, #184]	; (80071f8 <HAL_ADC_ConvCpltCallback+0x2d8>)
 800713e:	2201      	movs	r2, #1
 8007140:	701a      	strb	r2, [r3, #0]
 8007142:	e002      	b.n	800714a <HAL_ADC_ConvCpltCallback+0x22a>
	else											{Mode_MA_Pot_State = MA_Pot_OK;}
 8007144:	4b2c      	ldr	r3, [pc, #176]	; (80071f8 <HAL_ADC_ConvCpltCallback+0x2d8>)
 8007146:	2200      	movs	r2, #0
 8007148:	701a      	strb	r2, [r3, #0]

	/* <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><> */
	if((NX7_CCU_State==CCU_IGN_OFF)||(NX7_CCU_State==CCU_OFF))
 800714a:	4b29      	ldr	r3, [pc, #164]	; (80071f0 <HAL_ADC_ConvCpltCallback+0x2d0>)
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	2b03      	cmp	r3, #3
 8007150:	d003      	beq.n	800715a <HAL_ADC_ConvCpltCallback+0x23a>
 8007152:	4b27      	ldr	r3, [pc, #156]	; (80071f0 <HAL_ADC_ConvCpltCallback+0x2d0>)
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d103      	bne.n	8007162 <HAL_ADC_ConvCpltCallback+0x242>
	{
		NX7_Blower_Handler(Blower_OFF);
 800715a:	2000      	movs	r0, #0
 800715c:	f001 fcbc 	bl	8008ad8 <NX7_Blower_Handler>
 8007160:	e010      	b.n	8007184 <HAL_ADC_ConvCpltCallback+0x264>
	}
	else if(NX7_CCU_State==CCU_DEF)
 8007162:	4b23      	ldr	r3, [pc, #140]	; (80071f0 <HAL_ADC_ConvCpltCallback+0x2d0>)
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	2b02      	cmp	r3, #2
 8007168:	d103      	bne.n	8007172 <HAL_ADC_ConvCpltCallback+0x252>
	{
		NX7_Blower_Handler(Blower_L8);
 800716a:	2008      	movs	r0, #8
 800716c:	f001 fcb4 	bl	8008ad8 <NX7_Blower_Handler>
 8007170:	e008      	b.n	8007184 <HAL_ADC_ConvCpltCallback+0x264>
	}
	else if(NX7_CCU_State==CCU_AUTO)
 8007172:	4b1f      	ldr	r3, [pc, #124]	; (80071f0 <HAL_ADC_ConvCpltCallback+0x2d0>)
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	2b01      	cmp	r3, #1
 8007178:	d104      	bne.n	8007184 <HAL_ADC_ConvCpltCallback+0x264>
	{
		NX7_Blower_Handler(NX7_Blower_State);
 800717a:	4b20      	ldr	r3, [pc, #128]	; (80071fc <HAL_ADC_ConvCpltCallback+0x2dc>)
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	4618      	mov	r0, r3
 8007180:	f001 fcaa 	bl	8008ad8 <NX7_Blower_Handler>
	}

	/* <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><> */
	if((adcCounter == 1) || (adcCounter == 6))
 8007184:	4b10      	ldr	r3, [pc, #64]	; (80071c8 <HAL_ADC_ConvCpltCallback+0x2a8>)
 8007186:	881b      	ldrh	r3, [r3, #0]
 8007188:	2b01      	cmp	r3, #1
 800718a:	d003      	beq.n	8007194 <HAL_ADC_ConvCpltCallback+0x274>
 800718c:	4b0e      	ldr	r3, [pc, #56]	; (80071c8 <HAL_ADC_ConvCpltCallback+0x2a8>)
 800718e:	881b      	ldrh	r3, [r3, #0]
 8007190:	2b06      	cmp	r3, #6
 8007192:	d13a      	bne.n	800720a <HAL_ADC_ConvCpltCallback+0x2ea>
	{
		if(NX7_AUTO_Blink_State == AUTO_Blink_OFF)
 8007194:	4b1a      	ldr	r3, [pc, #104]	; (8007200 <HAL_ADC_ConvCpltCallback+0x2e0>)
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d133      	bne.n	8007204 <HAL_ADC_ConvCpltCallback+0x2e4>
		{
			NX7_AUTO_Blink_State = AUTO_Blink_ON;
 800719c:	4b18      	ldr	r3, [pc, #96]	; (8007200 <HAL_ADC_ConvCpltCallback+0x2e0>)
 800719e:	2201      	movs	r2, #1
 80071a0:	701a      	strb	r2, [r3, #0]
 80071a2:	e032      	b.n	800720a <HAL_ADC_ConvCpltCallback+0x2ea>
 80071a4:	f3af 8000 	nop.w
 80071a8:	66666666 	.word	0x66666666
 80071ac:	400a6666 	.word	0x400a6666
 80071b0:	00000000 	.word	0x00000000
 80071b4:	40affe00 	.word	0x40affe00
 80071b8:	9999999a 	.word	0x9999999a
 80071bc:	3fb99999 	.word	0x3fb99999
 80071c0:	9999999a 	.word	0x9999999a
 80071c4:	40139999 	.word	0x40139999
 80071c8:	20000208 	.word	0x20000208
 80071cc:	20000578 	.word	0x20000578
 80071d0:	40100000 	.word	0x40100000
 80071d4:	20000590 	.word	0x20000590
 80071d8:	40140000 	.word	0x40140000
 80071dc:	20000594 	.word	0x20000594
 80071e0:	40080000 	.word	0x40080000
 80071e4:	2000058c 	.word	0x2000058c
 80071e8:	2000059c 	.word	0x2000059c
 80071ec:	40b00000 	.word	0x40b00000
 80071f0:	2000020a 	.word	0x2000020a
 80071f4:	20000218 	.word	0x20000218
 80071f8:	20000219 	.word	0x20000219
 80071fc:	2000020e 	.word	0x2000020e
 8007200:	2000021b 	.word	0x2000021b
		}
		else
		{
			NX7_AUTO_Blink_State = AUTO_Blink_OFF;
 8007204:	4b1c      	ldr	r3, [pc, #112]	; (8007278 <HAL_ADC_ConvCpltCallback+0x358>)
 8007206:	2200      	movs	r2, #0
 8007208:	701a      	strb	r2, [r3, #0]
		}
	}

	/* <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><> */
	if((adcCounter == 1) || (adcCounter == 6))
 800720a:	4b1c      	ldr	r3, [pc, #112]	; (800727c <HAL_ADC_ConvCpltCallback+0x35c>)
 800720c:	881b      	ldrh	r3, [r3, #0]
 800720e:	2b01      	cmp	r3, #1
 8007210:	d003      	beq.n	800721a <HAL_ADC_ConvCpltCallback+0x2fa>
 8007212:	4b1a      	ldr	r3, [pc, #104]	; (800727c <HAL_ADC_ConvCpltCallback+0x35c>)
 8007214:	881b      	ldrh	r3, [r3, #0]
 8007216:	2b06      	cmp	r3, #6
 8007218:	d109      	bne.n	800722e <HAL_ADC_ConvCpltCallback+0x30e>
	{
		if((NX7_CCU_State==CCU_AUTO) || (NX7_CCU_State==CCU_DEF))
 800721a:	4b19      	ldr	r3, [pc, #100]	; (8007280 <HAL_ADC_ConvCpltCallback+0x360>)
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	2b01      	cmp	r3, #1
 8007220:	d003      	beq.n	800722a <HAL_ADC_ConvCpltCallback+0x30a>
 8007222:	4b17      	ldr	r3, [pc, #92]	; (8007280 <HAL_ADC_ConvCpltCallback+0x360>)
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	2b02      	cmp	r3, #2
 8007228:	d101      	bne.n	800722e <HAL_ADC_ConvCpltCallback+0x30e>
		{
			NX7_PID_Ctrl_Blower();
 800722a:	f005 fec1 	bl	800cfb0 <NX7_PID_Ctrl_Blower>
		}
	}

	/* <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><> */
	if(adcCounter == 9)
 800722e:	4b13      	ldr	r3, [pc, #76]	; (800727c <HAL_ADC_ConvCpltCallback+0x35c>)
 8007230:	881b      	ldrh	r3, [r3, #0]
 8007232:	2b09      	cmp	r3, #9
 8007234:	d10d      	bne.n	8007252 <HAL_ADC_ConvCpltCallback+0x332>
	{
		NX7_Sensors_Handler(adc1Val[4], adc1Val[5], adc1Val[6], adc1Val[7], adc1Val[8]);
 8007236:	4b13      	ldr	r3, [pc, #76]	; (8007284 <HAL_ADC_ConvCpltCallback+0x364>)
 8007238:	8918      	ldrh	r0, [r3, #8]
 800723a:	4b12      	ldr	r3, [pc, #72]	; (8007284 <HAL_ADC_ConvCpltCallback+0x364>)
 800723c:	8959      	ldrh	r1, [r3, #10]
 800723e:	4b11      	ldr	r3, [pc, #68]	; (8007284 <HAL_ADC_ConvCpltCallback+0x364>)
 8007240:	899a      	ldrh	r2, [r3, #12]
 8007242:	4b10      	ldr	r3, [pc, #64]	; (8007284 <HAL_ADC_ConvCpltCallback+0x364>)
 8007244:	89dc      	ldrh	r4, [r3, #14]
 8007246:	4b0f      	ldr	r3, [pc, #60]	; (8007284 <HAL_ADC_ConvCpltCallback+0x364>)
 8007248:	8a1b      	ldrh	r3, [r3, #16]
 800724a:	9300      	str	r3, [sp, #0]
 800724c:	4623      	mov	r3, r4
 800724e:	f005 ff43 	bl	800d0d8 <NX7_Sensors_Handler>
	}

	/* <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><> */
	if(adcCounter == 10)
 8007252:	4b0a      	ldr	r3, [pc, #40]	; (800727c <HAL_ADC_ConvCpltCallback+0x35c>)
 8007254:	881b      	ldrh	r3, [r3, #0]
 8007256:	2b0a      	cmp	r3, #10
 8007258:	d109      	bne.n	800726e <HAL_ADC_ConvCpltCallback+0x34e>
	{
		if((NX7_CCU_State==CCU_AUTO) || (NX7_CCU_State==CCU_DEF))
 800725a:	4b09      	ldr	r3, [pc, #36]	; (8007280 <HAL_ADC_ConvCpltCallback+0x360>)
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	2b01      	cmp	r3, #1
 8007260:	d003      	beq.n	800726a <HAL_ADC_ConvCpltCallback+0x34a>
 8007262:	4b07      	ldr	r3, [pc, #28]	; (8007280 <HAL_ADC_ConvCpltCallback+0x360>)
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	2b02      	cmp	r3, #2
 8007268:	d101      	bne.n	800726e <HAL_ADC_ConvCpltCallback+0x34e>
		{
			NX7_PID_Ctrl();
 800726a:	f004 fc19 	bl	800baa0 <NX7_PID_Ctrl>
		}
	}

}
 800726e:	bf00      	nop
 8007270:	370c      	adds	r7, #12
 8007272:	46bd      	mov	sp, r7
 8007274:	bd90      	pop	{r4, r7, pc}
 8007276:	bf00      	nop
 8007278:	2000021b 	.word	0x2000021b
 800727c:	20000208 	.word	0x20000208
 8007280:	2000020a 	.word	0x2000020a
 8007284:	20000578 	.word	0x20000578

08007288 <NX7_Airmix_MA_STP>:
MA_Lock_State  Airmix_MA_Lock_State;

/* Functions body *************************************************************/
/* NX7_Airmix_MA_STP ---------------------------------------------------------*/
void NX7_Airmix_MA_STP(void)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
	uint8_t temp;
	temp = NX7_TLE_Ctrl_Register_Read(HB_ACT_1_CTRL);
 800728e:	2003      	movs	r0, #3
 8007290:	f006 fc1e 	bl	800dad0 <NX7_TLE_Ctrl_Register_Read>
 8007294:	4603      	mov	r3, r0
 8007296:	71fb      	strb	r3, [r7, #7]
	temp &= 0xF0;
 8007298:	79fb      	ldrb	r3, [r7, #7]
 800729a:	f023 030f 	bic.w	r3, r3, #15
 800729e:	71fb      	strb	r3, [r7, #7]
	if(temp != 0x50)
 80072a0:	79fb      	ldrb	r3, [r7, #7]
 80072a2:	2b50      	cmp	r3, #80	; 0x50
 80072a4:	d019      	beq.n	80072da <NX7_Airmix_MA_STP+0x52>
	{
		temp = NX7_TLE_Ctrl_Register_Read(HB_ACT_1_CTRL);
 80072a6:	2003      	movs	r0, #3
 80072a8:	f006 fc12 	bl	800dad0 <NX7_TLE_Ctrl_Register_Read>
 80072ac:	4603      	mov	r3, r0
 80072ae:	71fb      	strb	r3, [r7, #7]
		temp &= 0x0F;
 80072b0:	79fb      	ldrb	r3, [r7, #7]
 80072b2:	f003 030f 	and.w	r3, r3, #15
 80072b6:	71fb      	strb	r3, [r7, #7]
		temp |= 0x50;		//--> OUTH4:HZ & OUTL4:ON & OUTH3:HZ & OUTL3:ON
 80072b8:	79fb      	ldrb	r3, [r7, #7]
 80072ba:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80072be:	71fb      	strb	r3, [r7, #7]
		NX7_TLE_Ctrl_Register_Write(HB_ACT_1_CTRL, temp);
 80072c0:	79fb      	ldrb	r3, [r7, #7]
 80072c2:	4619      	mov	r1, r3
 80072c4:	2003      	movs	r0, #3
 80072c6:	f006 fc37 	bl	800db38 <NX7_TLE_Ctrl_Register_Write>
		// TIM6 Stop --> Airmix_Lock_State
		HAL_TIM_Base_Stop_IT(&htim6);
 80072ca:	4806      	ldr	r0, [pc, #24]	; (80072e4 <NX7_Airmix_MA_STP+0x5c>)
 80072cc:	f7fe fc98 	bl	8005c00 <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_CLEAR_FLAG(&htim6, TIM_FLAG_UPDATE);
 80072d0:	4b04      	ldr	r3, [pc, #16]	; (80072e4 <NX7_Airmix_MA_STP+0x5c>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f06f 0201 	mvn.w	r2, #1
 80072d8:	611a      	str	r2, [r3, #16]
	}
}
 80072da:	bf00      	nop
 80072dc:	3708      	adds	r7, #8
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	200003fc 	.word	0x200003fc

080072e8 <NX7_Airmix_MA_FWD>:

/* NX7_Airmix_MA_FWD ---------------------------------------------------------*/
void NX7_Airmix_MA_FWD(void)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
	uint8_t temp;
	temp = NX7_TLE_Ctrl_Register_Read(HB_ACT_1_CTRL);
 80072ee:	2003      	movs	r0, #3
 80072f0:	f006 fbee 	bl	800dad0 <NX7_TLE_Ctrl_Register_Read>
 80072f4:	4603      	mov	r3, r0
 80072f6:	71fb      	strb	r3, [r7, #7]
	temp &= 0xF0;
 80072f8:	79fb      	ldrb	r3, [r7, #7]
 80072fa:	f023 030f 	bic.w	r3, r3, #15
 80072fe:	71fb      	strb	r3, [r7, #7]
	if((temp != 0x60) && (Airmix_MA_Lock_State == MA_Lock_OK))
 8007300:	79fb      	ldrb	r3, [r7, #7]
 8007302:	2b60      	cmp	r3, #96	; 0x60
 8007304:	d021      	beq.n	800734a <NX7_Airmix_MA_FWD+0x62>
 8007306:	4b13      	ldr	r3, [pc, #76]	; (8007354 <NX7_Airmix_MA_FWD+0x6c>)
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d11d      	bne.n	800734a <NX7_Airmix_MA_FWD+0x62>
	{
		temp = NX7_TLE_Ctrl_Register_Read(HB_ACT_1_CTRL);
 800730e:	2003      	movs	r0, #3
 8007310:	f006 fbde 	bl	800dad0 <NX7_TLE_Ctrl_Register_Read>
 8007314:	4603      	mov	r3, r0
 8007316:	71fb      	strb	r3, [r7, #7]
		temp &= 0x0F;
 8007318:	79fb      	ldrb	r3, [r7, #7]
 800731a:	f003 030f 	and.w	r3, r3, #15
 800731e:	71fb      	strb	r3, [r7, #7]
		temp |= 0x60;		//--> OUTH4:HZ & OUTL4:ON & OUTH3:ON & OUTL3:HZ
 8007320:	79fb      	ldrb	r3, [r7, #7]
 8007322:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007326:	71fb      	strb	r3, [r7, #7]
		NX7_TLE_Ctrl_Register_Write(HB_ACT_1_CTRL, temp);
 8007328:	79fb      	ldrb	r3, [r7, #7]
 800732a:	4619      	mov	r1, r3
 800732c:	2003      	movs	r0, #3
 800732e:	f006 fc03 	bl	800db38 <NX7_TLE_Ctrl_Register_Write>
		// TIM6 Start --> Airmix_Lock_State
		htim6.Instance->CNT = 0x00;
 8007332:	4b09      	ldr	r3, [pc, #36]	; (8007358 <NX7_Airmix_MA_FWD+0x70>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	2200      	movs	r2, #0
 8007338:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_CLEAR_FLAG(&htim6, TIM_FLAG_UPDATE);
 800733a:	4b07      	ldr	r3, [pc, #28]	; (8007358 <NX7_Airmix_MA_FWD+0x70>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f06f 0201 	mvn.w	r2, #1
 8007342:	611a      	str	r2, [r3, #16]
		HAL_TIM_Base_Start_IT(&htim6);
 8007344:	4804      	ldr	r0, [pc, #16]	; (8007358 <NX7_Airmix_MA_FWD+0x70>)
 8007346:	f7fe fc01 	bl	8005b4c <HAL_TIM_Base_Start_IT>
	}
}
 800734a:	bf00      	nop
 800734c:	3708      	adds	r7, #8
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	20000216 	.word	0x20000216
 8007358:	200003fc 	.word	0x200003fc

0800735c <NX7_Airmix_MA_RVS>:

/* NX7_Airmix_MA_RVS -----------------------------------------------------------*/
void NX7_Airmix_MA_RVS(void)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
	uint8_t temp;
	temp = NX7_TLE_Ctrl_Register_Read(HB_ACT_1_CTRL);
 8007362:	2003      	movs	r0, #3
 8007364:	f006 fbb4 	bl	800dad0 <NX7_TLE_Ctrl_Register_Read>
 8007368:	4603      	mov	r3, r0
 800736a:	71fb      	strb	r3, [r7, #7]
	temp &= 0xF0;
 800736c:	79fb      	ldrb	r3, [r7, #7]
 800736e:	f023 030f 	bic.w	r3, r3, #15
 8007372:	71fb      	strb	r3, [r7, #7]
	if((temp != 0x90) && (Airmix_MA_Lock_State == MA_Lock_OK))
 8007374:	79fb      	ldrb	r3, [r7, #7]
 8007376:	2b90      	cmp	r3, #144	; 0x90
 8007378:	d021      	beq.n	80073be <NX7_Airmix_MA_RVS+0x62>
 800737a:	4b13      	ldr	r3, [pc, #76]	; (80073c8 <NX7_Airmix_MA_RVS+0x6c>)
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d11d      	bne.n	80073be <NX7_Airmix_MA_RVS+0x62>
	{
		temp = NX7_TLE_Ctrl_Register_Read(HB_ACT_1_CTRL);
 8007382:	2003      	movs	r0, #3
 8007384:	f006 fba4 	bl	800dad0 <NX7_TLE_Ctrl_Register_Read>
 8007388:	4603      	mov	r3, r0
 800738a:	71fb      	strb	r3, [r7, #7]
		temp &= 0x0F;
 800738c:	79fb      	ldrb	r3, [r7, #7]
 800738e:	f003 030f 	and.w	r3, r3, #15
 8007392:	71fb      	strb	r3, [r7, #7]
		temp |= 0x90;		//--> OUTH4:ON & OUTL4:HZ & OUTH3:HZ & OUTL3:ON
 8007394:	79fb      	ldrb	r3, [r7, #7]
 8007396:	f063 036f 	orn	r3, r3, #111	; 0x6f
 800739a:	71fb      	strb	r3, [r7, #7]
		NX7_TLE_Ctrl_Register_Write(HB_ACT_1_CTRL, temp);
 800739c:	79fb      	ldrb	r3, [r7, #7]
 800739e:	4619      	mov	r1, r3
 80073a0:	2003      	movs	r0, #3
 80073a2:	f006 fbc9 	bl	800db38 <NX7_TLE_Ctrl_Register_Write>
		// TIM6 Start --> Airmix_Lock_State
		htim6.Instance->CNT = 0x00;
 80073a6:	4b09      	ldr	r3, [pc, #36]	; (80073cc <NX7_Airmix_MA_RVS+0x70>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2200      	movs	r2, #0
 80073ac:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_CLEAR_FLAG(&htim6, TIM_FLAG_UPDATE);
 80073ae:	4b07      	ldr	r3, [pc, #28]	; (80073cc <NX7_Airmix_MA_RVS+0x70>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f06f 0201 	mvn.w	r2, #1
 80073b6:	611a      	str	r2, [r3, #16]
		HAL_TIM_Base_Start_IT(&htim6);
 80073b8:	4804      	ldr	r0, [pc, #16]	; (80073cc <NX7_Airmix_MA_RVS+0x70>)
 80073ba:	f7fe fbc7 	bl	8005b4c <HAL_TIM_Base_Start_IT>
	}
}
 80073be:	bf00      	nop
 80073c0:	3708      	adds	r7, #8
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	20000216 	.word	0x20000216
 80073cc:	200003fc 	.word	0x200003fc

080073d0 <NX7_Airmix_MA_Handler>:

/* NX7_Airmix_MA_Handler -------------------------------------------------------*/
void NX7_Airmix_MA_Handler(Airmix_State state)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	4603      	mov	r3, r0
 80073d8:	71fb      	strb	r3, [r7, #7]
	switch (state)
 80073da:	79fb      	ldrb	r3, [r7, #7]
 80073dc:	2b14      	cmp	r3, #20
 80073de:	f200 839a 	bhi.w	8007b16 <NX7_Airmix_MA_Handler+0x746>
 80073e2:	a201      	add	r2, pc, #4	; (adr r2, 80073e8 <NX7_Airmix_MA_Handler+0x18>)
 80073e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e8:	0800743d 	.word	0x0800743d
 80073ec:	08007483 	.word	0x08007483
 80073f0:	080074c9 	.word	0x080074c9
 80073f4:	0800750f 	.word	0x0800750f
 80073f8:	08007555 	.word	0x08007555
 80073fc:	0800759b 	.word	0x0800759b
 8007400:	080075d9 	.word	0x080075d9
 8007404:	0800761f 	.word	0x0800761f
 8007408:	08007665 	.word	0x08007665
 800740c:	08007741 	.word	0x08007741
 8007410:	08007787 	.word	0x08007787
 8007414:	080077cd 	.word	0x080077cd
 8007418:	08007813 	.word	0x08007813
 800741c:	08007859 	.word	0x08007859
 8007420:	0800789f 	.word	0x0800789f
 8007424:	080078e5 	.word	0x080078e5
 8007428:	0800792b 	.word	0x0800792b
 800742c:	08007971 	.word	0x08007971
 8007430:	08007a4d 	.word	0x08007a4d
 8007434:	08007a93 	.word	0x08007a93
 8007438:	08007ad9 	.word	0x08007ad9
	{
		case Airmix_Lo:
		{
			if(NX7_Airmix_FB <= (NX7_Airmix_Lo_Pos-NX7_Airmix_Tolerance))
 800743c:	4bbe      	ldr	r3, [pc, #760]	; (8007738 <NX7_Airmix_MA_Handler+0x368>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4618      	mov	r0, r3
 8007442:	f7f9 f851 	bl	80004e8 <__aeabi_f2d>
 8007446:	a39a      	add	r3, pc, #616	; (adr r3, 80076b0 <NX7_Airmix_MA_Handler+0x2e0>)
 8007448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800744c:	f7f9 fb20 	bl	8000a90 <__aeabi_dcmple>
 8007450:	4603      	mov	r3, r0
 8007452:	2b00      	cmp	r3, #0
 8007454:	d002      	beq.n	800745c <NX7_Airmix_MA_Handler+0x8c>
				NX7_Airmix_MA_FWD();
 8007456:	f7ff ff47 	bl	80072e8 <NX7_Airmix_MA_FWD>
			else if(NX7_Airmix_FB >= (NX7_Airmix_Lo_Pos+NX7_Airmix_Tolerance))
				NX7_Airmix_MA_RVS();
			else
				NX7_Airmix_MA_STP();
			break;			
 800745a:	e35c      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
			else if(NX7_Airmix_FB >= (NX7_Airmix_Lo_Pos+NX7_Airmix_Tolerance))
 800745c:	4bb6      	ldr	r3, [pc, #728]	; (8007738 <NX7_Airmix_MA_Handler+0x368>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4618      	mov	r0, r3
 8007462:	f7f9 f841 	bl	80004e8 <__aeabi_f2d>
 8007466:	a394      	add	r3, pc, #592	; (adr r3, 80076b8 <NX7_Airmix_MA_Handler+0x2e8>)
 8007468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746c:	f7f9 fb1a 	bl	8000aa4 <__aeabi_dcmpge>
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d002      	beq.n	800747c <NX7_Airmix_MA_Handler+0xac>
				NX7_Airmix_MA_RVS();
 8007476:	f7ff ff71 	bl	800735c <NX7_Airmix_MA_RVS>
			break;			
 800747a:	e34c      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
				NX7_Airmix_MA_STP();
 800747c:	f7ff ff04 	bl	8007288 <NX7_Airmix_MA_STP>
			break;			
 8007480:	e349      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
		}
		case Airmix_05:
		{
			if(NX7_Airmix_FB <= (NX7_Airmix_05_Pos-NX7_Airmix_Tolerance))
 8007482:	4bad      	ldr	r3, [pc, #692]	; (8007738 <NX7_Airmix_MA_Handler+0x368>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4618      	mov	r0, r3
 8007488:	f7f9 f82e 	bl	80004e8 <__aeabi_f2d>
 800748c:	a38c      	add	r3, pc, #560	; (adr r3, 80076c0 <NX7_Airmix_MA_Handler+0x2f0>)
 800748e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007492:	f7f9 fafd 	bl	8000a90 <__aeabi_dcmple>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d002      	beq.n	80074a2 <NX7_Airmix_MA_Handler+0xd2>
				NX7_Airmix_MA_FWD();
 800749c:	f7ff ff24 	bl	80072e8 <NX7_Airmix_MA_FWD>
			else if(NX7_Airmix_FB >= (NX7_Airmix_05_Pos+NX7_Airmix_Tolerance))
				NX7_Airmix_MA_RVS();
			else
				NX7_Airmix_MA_STP();
			break;
 80074a0:	e339      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
			else if(NX7_Airmix_FB >= (NX7_Airmix_05_Pos+NX7_Airmix_Tolerance))
 80074a2:	4ba5      	ldr	r3, [pc, #660]	; (8007738 <NX7_Airmix_MA_Handler+0x368>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7f9 f81e 	bl	80004e8 <__aeabi_f2d>
 80074ac:	a386      	add	r3, pc, #536	; (adr r3, 80076c8 <NX7_Airmix_MA_Handler+0x2f8>)
 80074ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b2:	f7f9 faf7 	bl	8000aa4 <__aeabi_dcmpge>
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d002      	beq.n	80074c2 <NX7_Airmix_MA_Handler+0xf2>
				NX7_Airmix_MA_RVS();
 80074bc:	f7ff ff4e 	bl	800735c <NX7_Airmix_MA_RVS>
			break;
 80074c0:	e329      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
				NX7_Airmix_MA_STP();
 80074c2:	f7ff fee1 	bl	8007288 <NX7_Airmix_MA_STP>
			break;
 80074c6:	e326      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
		}
		case Airmix_10:
		{
			if(NX7_Airmix_FB <= (NX7_Airmix_10_Pos-NX7_Airmix_Tolerance))
 80074c8:	4b9b      	ldr	r3, [pc, #620]	; (8007738 <NX7_Airmix_MA_Handler+0x368>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4618      	mov	r0, r3
 80074ce:	f7f9 f80b 	bl	80004e8 <__aeabi_f2d>
 80074d2:	a37f      	add	r3, pc, #508	; (adr r3, 80076d0 <NX7_Airmix_MA_Handler+0x300>)
 80074d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d8:	f7f9 fada 	bl	8000a90 <__aeabi_dcmple>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d002      	beq.n	80074e8 <NX7_Airmix_MA_Handler+0x118>
				NX7_Airmix_MA_FWD();
 80074e2:	f7ff ff01 	bl	80072e8 <NX7_Airmix_MA_FWD>
			else if(NX7_Airmix_FB >= (NX7_Airmix_10_Pos+NX7_Airmix_Tolerance))
				NX7_Airmix_MA_RVS();
			else
				NX7_Airmix_MA_STP();
			break;			
 80074e6:	e316      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
			else if(NX7_Airmix_FB >= (NX7_Airmix_10_Pos+NX7_Airmix_Tolerance))
 80074e8:	4b93      	ldr	r3, [pc, #588]	; (8007738 <NX7_Airmix_MA_Handler+0x368>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7f8 fffb 	bl	80004e8 <__aeabi_f2d>
 80074f2:	a379      	add	r3, pc, #484	; (adr r3, 80076d8 <NX7_Airmix_MA_Handler+0x308>)
 80074f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f8:	f7f9 fad4 	bl	8000aa4 <__aeabi_dcmpge>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d002      	beq.n	8007508 <NX7_Airmix_MA_Handler+0x138>
				NX7_Airmix_MA_RVS();
 8007502:	f7ff ff2b 	bl	800735c <NX7_Airmix_MA_RVS>
			break;			
 8007506:	e306      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
				NX7_Airmix_MA_STP();
 8007508:	f7ff febe 	bl	8007288 <NX7_Airmix_MA_STP>
			break;			
 800750c:	e303      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
		}
		case Airmix_15:
		{
			if(NX7_Airmix_FB <= (NX7_Airmix_15_Pos-NX7_Airmix_Tolerance))
 800750e:	4b8a      	ldr	r3, [pc, #552]	; (8007738 <NX7_Airmix_MA_Handler+0x368>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4618      	mov	r0, r3
 8007514:	f7f8 ffe8 	bl	80004e8 <__aeabi_f2d>
 8007518:	a371      	add	r3, pc, #452	; (adr r3, 80076e0 <NX7_Airmix_MA_Handler+0x310>)
 800751a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751e:	f7f9 fab7 	bl	8000a90 <__aeabi_dcmple>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d002      	beq.n	800752e <NX7_Airmix_MA_Handler+0x15e>
				NX7_Airmix_MA_FWD();
 8007528:	f7ff fede 	bl	80072e8 <NX7_Airmix_MA_FWD>
			else if(NX7_Airmix_FB >= (NX7_Airmix_15_Pos+NX7_Airmix_Tolerance))
				NX7_Airmix_MA_RVS();
			else
				NX7_Airmix_MA_STP();
			break;
 800752c:	e2f3      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
			else if(NX7_Airmix_FB >= (NX7_Airmix_15_Pos+NX7_Airmix_Tolerance))
 800752e:	4b82      	ldr	r3, [pc, #520]	; (8007738 <NX7_Airmix_MA_Handler+0x368>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4618      	mov	r0, r3
 8007534:	f7f8 ffd8 	bl	80004e8 <__aeabi_f2d>
 8007538:	a36b      	add	r3, pc, #428	; (adr r3, 80076e8 <NX7_Airmix_MA_Handler+0x318>)
 800753a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753e:	f7f9 fab1 	bl	8000aa4 <__aeabi_dcmpge>
 8007542:	4603      	mov	r3, r0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d002      	beq.n	800754e <NX7_Airmix_MA_Handler+0x17e>
				NX7_Airmix_MA_RVS();
 8007548:	f7ff ff08 	bl	800735c <NX7_Airmix_MA_RVS>
			break;
 800754c:	e2e3      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
				NX7_Airmix_MA_STP();
 800754e:	f7ff fe9b 	bl	8007288 <NX7_Airmix_MA_STP>
			break;
 8007552:	e2e0      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
		}
		case Airmix_20:
		{
			if(NX7_Airmix_FB <= (NX7_Airmix_20_Pos-NX7_Airmix_Tolerance))
 8007554:	4b78      	ldr	r3, [pc, #480]	; (8007738 <NX7_Airmix_MA_Handler+0x368>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4618      	mov	r0, r3
 800755a:	f7f8 ffc5 	bl	80004e8 <__aeabi_f2d>
 800755e:	a364      	add	r3, pc, #400	; (adr r3, 80076f0 <NX7_Airmix_MA_Handler+0x320>)
 8007560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007564:	f7f9 fa94 	bl	8000a90 <__aeabi_dcmple>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d002      	beq.n	8007574 <NX7_Airmix_MA_Handler+0x1a4>
				NX7_Airmix_MA_FWD();
 800756e:	f7ff febb 	bl	80072e8 <NX7_Airmix_MA_FWD>
			else if(NX7_Airmix_FB >= (NX7_Airmix_20_Pos+NX7_Airmix_Tolerance))
				NX7_Airmix_MA_RVS();
			else
				NX7_Airmix_MA_STP();
			break;			
 8007572:	e2d0      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
			else if(NX7_Airmix_FB >= (NX7_Airmix_20_Pos+NX7_Airmix_Tolerance))
 8007574:	4b70      	ldr	r3, [pc, #448]	; (8007738 <NX7_Airmix_MA_Handler+0x368>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4618      	mov	r0, r3
 800757a:	f7f8 ffb5 	bl	80004e8 <__aeabi_f2d>
 800757e:	a35e      	add	r3, pc, #376	; (adr r3, 80076f8 <NX7_Airmix_MA_Handler+0x328>)
 8007580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007584:	f7f9 fa8e 	bl	8000aa4 <__aeabi_dcmpge>
 8007588:	4603      	mov	r3, r0
 800758a:	2b00      	cmp	r3, #0
 800758c:	d002      	beq.n	8007594 <NX7_Airmix_MA_Handler+0x1c4>
				NX7_Airmix_MA_RVS();
 800758e:	f7ff fee5 	bl	800735c <NX7_Airmix_MA_RVS>
			break;			
 8007592:	e2c0      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
				NX7_Airmix_MA_STP();
 8007594:	f7ff fe78 	bl	8007288 <NX7_Airmix_MA_STP>
			break;			
 8007598:	e2bd      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
		}
		case Airmix_25:
		{
			if(NX7_Airmix_FB <= (NX7_Airmix_25_Pos-NX7_Airmix_Tolerance))
 800759a:	4b67      	ldr	r3, [pc, #412]	; (8007738 <NX7_Airmix_MA_Handler+0x368>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4967      	ldr	r1, [pc, #412]	; (800773c <NX7_Airmix_MA_Handler+0x36c>)
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7f9 fdd7 	bl	8001154 <__aeabi_fcmple>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d002      	beq.n	80075b2 <NX7_Airmix_MA_Handler+0x1e2>
				NX7_Airmix_MA_FWD();
 80075ac:	f7ff fe9c 	bl	80072e8 <NX7_Airmix_MA_FWD>
			else if(NX7_Airmix_FB >= (NX7_Airmix_25_Pos+NX7_Airmix_Tolerance))
				NX7_Airmix_MA_RVS();
			else
				NX7_Airmix_MA_STP();
			break;
 80075b0:	e2b1      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
			else if(NX7_Airmix_FB >= (NX7_Airmix_25_Pos+NX7_Airmix_Tolerance))
 80075b2:	4b61      	ldr	r3, [pc, #388]	; (8007738 <NX7_Airmix_MA_Handler+0x368>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7f8 ff96 	bl	80004e8 <__aeabi_f2d>
 80075bc:	a350      	add	r3, pc, #320	; (adr r3, 8007700 <NX7_Airmix_MA_Handler+0x330>)
 80075be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c2:	f7f9 fa6f 	bl	8000aa4 <__aeabi_dcmpge>
 80075c6:	4603      	mov	r3, r0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d002      	beq.n	80075d2 <NX7_Airmix_MA_Handler+0x202>
				NX7_Airmix_MA_RVS();
 80075cc:	f7ff fec6 	bl	800735c <NX7_Airmix_MA_RVS>
			break;
 80075d0:	e2a1      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
				NX7_Airmix_MA_STP();
 80075d2:	f7ff fe59 	bl	8007288 <NX7_Airmix_MA_STP>
			break;
 80075d6:	e29e      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
		}
		case Airmix_30:
		{
			if(NX7_Airmix_FB <= (NX7_Airmix_30_Pos-NX7_Airmix_Tolerance))
 80075d8:	4b57      	ldr	r3, [pc, #348]	; (8007738 <NX7_Airmix_MA_Handler+0x368>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4618      	mov	r0, r3
 80075de:	f7f8 ff83 	bl	80004e8 <__aeabi_f2d>
 80075e2:	a349      	add	r3, pc, #292	; (adr r3, 8007708 <NX7_Airmix_MA_Handler+0x338>)
 80075e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e8:	f7f9 fa52 	bl	8000a90 <__aeabi_dcmple>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d002      	beq.n	80075f8 <NX7_Airmix_MA_Handler+0x228>
				NX7_Airmix_MA_FWD();
 80075f2:	f7ff fe79 	bl	80072e8 <NX7_Airmix_MA_FWD>
			else if(NX7_Airmix_FB >= (NX7_Airmix_30_Pos+NX7_Airmix_Tolerance))
				NX7_Airmix_MA_RVS();
			else
				NX7_Airmix_MA_STP();
			break;			
 80075f6:	e28e      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
			else if(NX7_Airmix_FB >= (NX7_Airmix_30_Pos+NX7_Airmix_Tolerance))
 80075f8:	4b4f      	ldr	r3, [pc, #316]	; (8007738 <NX7_Airmix_MA_Handler+0x368>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4618      	mov	r0, r3
 80075fe:	f7f8 ff73 	bl	80004e8 <__aeabi_f2d>
 8007602:	a343      	add	r3, pc, #268	; (adr r3, 8007710 <NX7_Airmix_MA_Handler+0x340>)
 8007604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007608:	f7f9 fa4c 	bl	8000aa4 <__aeabi_dcmpge>
 800760c:	4603      	mov	r3, r0
 800760e:	2b00      	cmp	r3, #0
 8007610:	d002      	beq.n	8007618 <NX7_Airmix_MA_Handler+0x248>
				NX7_Airmix_MA_RVS();
 8007612:	f7ff fea3 	bl	800735c <NX7_Airmix_MA_RVS>
			break;			
 8007616:	e27e      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
				NX7_Airmix_MA_STP();
 8007618:	f7ff fe36 	bl	8007288 <NX7_Airmix_MA_STP>
			break;			
 800761c:	e27b      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
		}
		case Airmix_35:
		{
			if(NX7_Airmix_FB <= (NX7_Airmix_35_Pos-NX7_Airmix_Tolerance))
 800761e:	4b46      	ldr	r3, [pc, #280]	; (8007738 <NX7_Airmix_MA_Handler+0x368>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4618      	mov	r0, r3
 8007624:	f7f8 ff60 	bl	80004e8 <__aeabi_f2d>
 8007628:	a33b      	add	r3, pc, #236	; (adr r3, 8007718 <NX7_Airmix_MA_Handler+0x348>)
 800762a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800762e:	f7f9 fa2f 	bl	8000a90 <__aeabi_dcmple>
 8007632:	4603      	mov	r3, r0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d002      	beq.n	800763e <NX7_Airmix_MA_Handler+0x26e>
				NX7_Airmix_MA_FWD();
 8007638:	f7ff fe56 	bl	80072e8 <NX7_Airmix_MA_FWD>
			else if(NX7_Airmix_FB >= (NX7_Airmix_35_Pos+NX7_Airmix_Tolerance))
				NX7_Airmix_MA_RVS();
			else
				NX7_Airmix_MA_STP();
			break;
 800763c:	e26b      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
			else if(NX7_Airmix_FB >= (NX7_Airmix_35_Pos+NX7_Airmix_Tolerance))
 800763e:	4b3e      	ldr	r3, [pc, #248]	; (8007738 <NX7_Airmix_MA_Handler+0x368>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4618      	mov	r0, r3
 8007644:	f7f8 ff50 	bl	80004e8 <__aeabi_f2d>
 8007648:	a335      	add	r3, pc, #212	; (adr r3, 8007720 <NX7_Airmix_MA_Handler+0x350>)
 800764a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764e:	f7f9 fa29 	bl	8000aa4 <__aeabi_dcmpge>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d002      	beq.n	800765e <NX7_Airmix_MA_Handler+0x28e>
				NX7_Airmix_MA_RVS();
 8007658:	f7ff fe80 	bl	800735c <NX7_Airmix_MA_RVS>
			break;
 800765c:	e25b      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
				NX7_Airmix_MA_STP();
 800765e:	f7ff fe13 	bl	8007288 <NX7_Airmix_MA_STP>
			break;
 8007662:	e258      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
		}
		case Airmix_40:
		{
			if(NX7_Airmix_FB <= (NX7_Airmix_40_Pos-NX7_Airmix_Tolerance))
 8007664:	4b34      	ldr	r3, [pc, #208]	; (8007738 <NX7_Airmix_MA_Handler+0x368>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4618      	mov	r0, r3
 800766a:	f7f8 ff3d 	bl	80004e8 <__aeabi_f2d>
 800766e:	a32e      	add	r3, pc, #184	; (adr r3, 8007728 <NX7_Airmix_MA_Handler+0x358>)
 8007670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007674:	f7f9 fa0c 	bl	8000a90 <__aeabi_dcmple>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d002      	beq.n	8007684 <NX7_Airmix_MA_Handler+0x2b4>
				NX7_Airmix_MA_FWD();
 800767e:	f7ff fe33 	bl	80072e8 <NX7_Airmix_MA_FWD>
			else if(NX7_Airmix_FB >= (NX7_Airmix_40_Pos+NX7_Airmix_Tolerance))
				NX7_Airmix_MA_RVS();
			else
				NX7_Airmix_MA_STP();
			break;			
 8007682:	e248      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
			else if(NX7_Airmix_FB >= (NX7_Airmix_40_Pos+NX7_Airmix_Tolerance))
 8007684:	4b2c      	ldr	r3, [pc, #176]	; (8007738 <NX7_Airmix_MA_Handler+0x368>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4618      	mov	r0, r3
 800768a:	f7f8 ff2d 	bl	80004e8 <__aeabi_f2d>
 800768e:	a328      	add	r3, pc, #160	; (adr r3, 8007730 <NX7_Airmix_MA_Handler+0x360>)
 8007690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007694:	f7f9 fa06 	bl	8000aa4 <__aeabi_dcmpge>
 8007698:	4603      	mov	r3, r0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d002      	beq.n	80076a4 <NX7_Airmix_MA_Handler+0x2d4>
				NX7_Airmix_MA_RVS();
 800769e:	f7ff fe5d 	bl	800735c <NX7_Airmix_MA_RVS>
			break;			
 80076a2:	e238      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
				NX7_Airmix_MA_STP();
 80076a4:	f7ff fdf0 	bl	8007288 <NX7_Airmix_MA_STP>
			break;			
 80076a8:	e235      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
 80076aa:	bf00      	nop
 80076ac:	f3af 8000 	nop.w
 80076b0:	9999999a 	.word	0x9999999a
 80076b4:	3fd99999 	.word	0x3fd99999
 80076b8:	33333333 	.word	0x33333333
 80076bc:	3fe33333 	.word	0x3fe33333
 80076c0:	70a3d70a 	.word	0x70a3d70a
 80076c4:	3fe30a3d 	.word	0x3fe30a3d
 80076c8:	d70a3d70 	.word	0xd70a3d70
 80076cc:	3fe970a3 	.word	0x3fe970a3
 80076d0:	147ae148 	.word	0x147ae148
 80076d4:	3fe947ae 	.word	0x3fe947ae
 80076d8:	7ae147ae 	.word	0x7ae147ae
 80076dc:	3fefae14 	.word	0x3fefae14
 80076e0:	b851eb85 	.word	0xb851eb85
 80076e4:	3fef851e 	.word	0x3fef851e
 80076e8:	8f5c28f6 	.word	0x8f5c28f6
 80076ec:	3ff2f5c2 	.word	0x3ff2f5c2
 80076f0:	ae147ae1 	.word	0xae147ae1
 80076f4:	3ff2e147 	.word	0x3ff2e147
 80076f8:	e147ae15 	.word	0xe147ae15
 80076fc:	3ff6147a 	.word	0x3ff6147a
 8007700:	33333334 	.word	0x33333334
 8007704:	3ff93333 	.word	0x3ff93333
 8007708:	51eb851e 	.word	0x51eb851e
 800770c:	3ff91eb8 	.word	0x3ff91eb8
 8007710:	851eb852 	.word	0x851eb852
 8007714:	3ffc51eb 	.word	0x3ffc51eb
 8007718:	a3d70a3d 	.word	0xa3d70a3d
 800771c:	3ffc3d70 	.word	0x3ffc3d70
 8007720:	d70a3d71 	.word	0xd70a3d71
 8007724:	3fff70a3 	.word	0x3fff70a3
 8007728:	f5c28f5c 	.word	0xf5c28f5c
 800772c:	3fff5c28 	.word	0x3fff5c28
 8007730:	147ae148 	.word	0x147ae148
 8007734:	400147ae 	.word	0x400147ae
 8007738:	2000058c 	.word	0x2000058c
 800773c:	3fb00000 	.word	0x3fb00000
		}
		case Airmix_45:
		{
			if(NX7_Airmix_FB <= (NX7_Airmix_45_Pos-NX7_Airmix_Tolerance))
 8007740:	4bc1      	ldr	r3, [pc, #772]	; (8007a48 <NX7_Airmix_MA_Handler+0x678>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4618      	mov	r0, r3
 8007746:	f7f8 fecf 	bl	80004e8 <__aeabi_f2d>
 800774a:	a39b      	add	r3, pc, #620	; (adr r3, 80079b8 <NX7_Airmix_MA_Handler+0x5e8>)
 800774c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007750:	f7f9 f99e 	bl	8000a90 <__aeabi_dcmple>
 8007754:	4603      	mov	r3, r0
 8007756:	2b00      	cmp	r3, #0
 8007758:	d002      	beq.n	8007760 <NX7_Airmix_MA_Handler+0x390>
				NX7_Airmix_MA_FWD();
 800775a:	f7ff fdc5 	bl	80072e8 <NX7_Airmix_MA_FWD>
			else if(NX7_Airmix_FB >= (NX7_Airmix_45_Pos+NX7_Airmix_Tolerance))
				NX7_Airmix_MA_RVS();
			else
				NX7_Airmix_MA_STP();
			break;
 800775e:	e1da      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
			else if(NX7_Airmix_FB >= (NX7_Airmix_45_Pos+NX7_Airmix_Tolerance))
 8007760:	4bb9      	ldr	r3, [pc, #740]	; (8007a48 <NX7_Airmix_MA_Handler+0x678>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4618      	mov	r0, r3
 8007766:	f7f8 febf 	bl	80004e8 <__aeabi_f2d>
 800776a:	a395      	add	r3, pc, #596	; (adr r3, 80079c0 <NX7_Airmix_MA_Handler+0x5f0>)
 800776c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007770:	f7f9 f998 	bl	8000aa4 <__aeabi_dcmpge>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d002      	beq.n	8007780 <NX7_Airmix_MA_Handler+0x3b0>
				NX7_Airmix_MA_RVS();
 800777a:	f7ff fdef 	bl	800735c <NX7_Airmix_MA_RVS>
			break;
 800777e:	e1ca      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
				NX7_Airmix_MA_STP();
 8007780:	f7ff fd82 	bl	8007288 <NX7_Airmix_MA_STP>
			break;
 8007784:	e1c7      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
		}
		case Airmix_50:
		{
			if(NX7_Airmix_FB <= (NX7_Airmix_50_Pos-NX7_Airmix_Tolerance))
 8007786:	4bb0      	ldr	r3, [pc, #704]	; (8007a48 <NX7_Airmix_MA_Handler+0x678>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4618      	mov	r0, r3
 800778c:	f7f8 feac 	bl	80004e8 <__aeabi_f2d>
 8007790:	a38d      	add	r3, pc, #564	; (adr r3, 80079c8 <NX7_Airmix_MA_Handler+0x5f8>)
 8007792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007796:	f7f9 f97b 	bl	8000a90 <__aeabi_dcmple>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d002      	beq.n	80077a6 <NX7_Airmix_MA_Handler+0x3d6>
				NX7_Airmix_MA_FWD();
 80077a0:	f7ff fda2 	bl	80072e8 <NX7_Airmix_MA_FWD>
			else if(NX7_Airmix_FB >= (NX7_Airmix_50_Pos+NX7_Airmix_Tolerance))
				NX7_Airmix_MA_RVS();
			else
				NX7_Airmix_MA_STP();
			break;			
 80077a4:	e1b7      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
			else if(NX7_Airmix_FB >= (NX7_Airmix_50_Pos+NX7_Airmix_Tolerance))
 80077a6:	4ba8      	ldr	r3, [pc, #672]	; (8007a48 <NX7_Airmix_MA_Handler+0x678>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7f8 fe9c 	bl	80004e8 <__aeabi_f2d>
 80077b0:	a387      	add	r3, pc, #540	; (adr r3, 80079d0 <NX7_Airmix_MA_Handler+0x600>)
 80077b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b6:	f7f9 f975 	bl	8000aa4 <__aeabi_dcmpge>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d002      	beq.n	80077c6 <NX7_Airmix_MA_Handler+0x3f6>
				NX7_Airmix_MA_RVS();
 80077c0:	f7ff fdcc 	bl	800735c <NX7_Airmix_MA_RVS>
			break;			
 80077c4:	e1a7      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
				NX7_Airmix_MA_STP();
 80077c6:	f7ff fd5f 	bl	8007288 <NX7_Airmix_MA_STP>
			break;			
 80077ca:	e1a4      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
		}
		case Airmix_55:
		{
			if(NX7_Airmix_FB <= (NX7_Airmix_55_Pos-NX7_Airmix_Tolerance))
 80077cc:	4b9e      	ldr	r3, [pc, #632]	; (8007a48 <NX7_Airmix_MA_Handler+0x678>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4618      	mov	r0, r3
 80077d2:	f7f8 fe89 	bl	80004e8 <__aeabi_f2d>
 80077d6:	a380      	add	r3, pc, #512	; (adr r3, 80079d8 <NX7_Airmix_MA_Handler+0x608>)
 80077d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077dc:	f7f9 f958 	bl	8000a90 <__aeabi_dcmple>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d002      	beq.n	80077ec <NX7_Airmix_MA_Handler+0x41c>
				NX7_Airmix_MA_FWD();
 80077e6:	f7ff fd7f 	bl	80072e8 <NX7_Airmix_MA_FWD>
			else if(NX7_Airmix_FB >= (NX7_Airmix_55_Pos+NX7_Airmix_Tolerance))
				NX7_Airmix_MA_RVS();
			else
				NX7_Airmix_MA_STP();
			break;
 80077ea:	e194      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
			else if(NX7_Airmix_FB >= (NX7_Airmix_55_Pos+NX7_Airmix_Tolerance))
 80077ec:	4b96      	ldr	r3, [pc, #600]	; (8007a48 <NX7_Airmix_MA_Handler+0x678>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4618      	mov	r0, r3
 80077f2:	f7f8 fe79 	bl	80004e8 <__aeabi_f2d>
 80077f6:	a37a      	add	r3, pc, #488	; (adr r3, 80079e0 <NX7_Airmix_MA_Handler+0x610>)
 80077f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077fc:	f7f9 f952 	bl	8000aa4 <__aeabi_dcmpge>
 8007800:	4603      	mov	r3, r0
 8007802:	2b00      	cmp	r3, #0
 8007804:	d002      	beq.n	800780c <NX7_Airmix_MA_Handler+0x43c>
				NX7_Airmix_MA_RVS();
 8007806:	f7ff fda9 	bl	800735c <NX7_Airmix_MA_RVS>
			break;
 800780a:	e184      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
				NX7_Airmix_MA_STP();
 800780c:	f7ff fd3c 	bl	8007288 <NX7_Airmix_MA_STP>
			break;
 8007810:	e181      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
		}
		case Airmix_60:
		{
			if(NX7_Airmix_FB <= (NX7_Airmix_60_Pos-NX7_Airmix_Tolerance))
 8007812:	4b8d      	ldr	r3, [pc, #564]	; (8007a48 <NX7_Airmix_MA_Handler+0x678>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4618      	mov	r0, r3
 8007818:	f7f8 fe66 	bl	80004e8 <__aeabi_f2d>
 800781c:	a372      	add	r3, pc, #456	; (adr r3, 80079e8 <NX7_Airmix_MA_Handler+0x618>)
 800781e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007822:	f7f9 f935 	bl	8000a90 <__aeabi_dcmple>
 8007826:	4603      	mov	r3, r0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d002      	beq.n	8007832 <NX7_Airmix_MA_Handler+0x462>
				NX7_Airmix_MA_FWD();
 800782c:	f7ff fd5c 	bl	80072e8 <NX7_Airmix_MA_FWD>
			else if(NX7_Airmix_FB >= (NX7_Airmix_60_Pos+NX7_Airmix_Tolerance))
				NX7_Airmix_MA_RVS();
			else
				NX7_Airmix_MA_STP();
			break;			
 8007830:	e171      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
			else if(NX7_Airmix_FB >= (NX7_Airmix_60_Pos+NX7_Airmix_Tolerance))
 8007832:	4b85      	ldr	r3, [pc, #532]	; (8007a48 <NX7_Airmix_MA_Handler+0x678>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4618      	mov	r0, r3
 8007838:	f7f8 fe56 	bl	80004e8 <__aeabi_f2d>
 800783c:	a36c      	add	r3, pc, #432	; (adr r3, 80079f0 <NX7_Airmix_MA_Handler+0x620>)
 800783e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007842:	f7f9 f92f 	bl	8000aa4 <__aeabi_dcmpge>
 8007846:	4603      	mov	r3, r0
 8007848:	2b00      	cmp	r3, #0
 800784a:	d002      	beq.n	8007852 <NX7_Airmix_MA_Handler+0x482>
				NX7_Airmix_MA_RVS();
 800784c:	f7ff fd86 	bl	800735c <NX7_Airmix_MA_RVS>
			break;			
 8007850:	e161      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
				NX7_Airmix_MA_STP();
 8007852:	f7ff fd19 	bl	8007288 <NX7_Airmix_MA_STP>
			break;			
 8007856:	e15e      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
		}
		case Airmix_65:
		{
			if(NX7_Airmix_FB <= (NX7_Airmix_65_Pos-NX7_Airmix_Tolerance))
 8007858:	4b7b      	ldr	r3, [pc, #492]	; (8007a48 <NX7_Airmix_MA_Handler+0x678>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4618      	mov	r0, r3
 800785e:	f7f8 fe43 	bl	80004e8 <__aeabi_f2d>
 8007862:	a365      	add	r3, pc, #404	; (adr r3, 80079f8 <NX7_Airmix_MA_Handler+0x628>)
 8007864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007868:	f7f9 f912 	bl	8000a90 <__aeabi_dcmple>
 800786c:	4603      	mov	r3, r0
 800786e:	2b00      	cmp	r3, #0
 8007870:	d002      	beq.n	8007878 <NX7_Airmix_MA_Handler+0x4a8>
				NX7_Airmix_MA_FWD();
 8007872:	f7ff fd39 	bl	80072e8 <NX7_Airmix_MA_FWD>
			else if(NX7_Airmix_FB >= (NX7_Airmix_65_Pos+NX7_Airmix_Tolerance))
				NX7_Airmix_MA_RVS();
			else
				NX7_Airmix_MA_STP();
			break;
 8007876:	e14e      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
			else if(NX7_Airmix_FB >= (NX7_Airmix_65_Pos+NX7_Airmix_Tolerance))
 8007878:	4b73      	ldr	r3, [pc, #460]	; (8007a48 <NX7_Airmix_MA_Handler+0x678>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4618      	mov	r0, r3
 800787e:	f7f8 fe33 	bl	80004e8 <__aeabi_f2d>
 8007882:	a35f      	add	r3, pc, #380	; (adr r3, 8007a00 <NX7_Airmix_MA_Handler+0x630>)
 8007884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007888:	f7f9 f90c 	bl	8000aa4 <__aeabi_dcmpge>
 800788c:	4603      	mov	r3, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	d002      	beq.n	8007898 <NX7_Airmix_MA_Handler+0x4c8>
				NX7_Airmix_MA_RVS();
 8007892:	f7ff fd63 	bl	800735c <NX7_Airmix_MA_RVS>
			break;
 8007896:	e13e      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
				NX7_Airmix_MA_STP();
 8007898:	f7ff fcf6 	bl	8007288 <NX7_Airmix_MA_STP>
			break;
 800789c:	e13b      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
		}
		case Airmix_70:
		{
			if(NX7_Airmix_FB <= (NX7_Airmix_70_Pos-NX7_Airmix_Tolerance))
 800789e:	4b6a      	ldr	r3, [pc, #424]	; (8007a48 <NX7_Airmix_MA_Handler+0x678>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7f8 fe20 	bl	80004e8 <__aeabi_f2d>
 80078a8:	a357      	add	r3, pc, #348	; (adr r3, 8007a08 <NX7_Airmix_MA_Handler+0x638>)
 80078aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ae:	f7f9 f8ef 	bl	8000a90 <__aeabi_dcmple>
 80078b2:	4603      	mov	r3, r0
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d002      	beq.n	80078be <NX7_Airmix_MA_Handler+0x4ee>
				NX7_Airmix_MA_FWD();
 80078b8:	f7ff fd16 	bl	80072e8 <NX7_Airmix_MA_FWD>
			else if(NX7_Airmix_FB >= (NX7_Airmix_70_Pos+NX7_Airmix_Tolerance))
				NX7_Airmix_MA_RVS();
			else
				NX7_Airmix_MA_STP();
			break;			
 80078bc:	e12b      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
			else if(NX7_Airmix_FB >= (NX7_Airmix_70_Pos+NX7_Airmix_Tolerance))
 80078be:	4b62      	ldr	r3, [pc, #392]	; (8007a48 <NX7_Airmix_MA_Handler+0x678>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4618      	mov	r0, r3
 80078c4:	f7f8 fe10 	bl	80004e8 <__aeabi_f2d>
 80078c8:	a351      	add	r3, pc, #324	; (adr r3, 8007a10 <NX7_Airmix_MA_Handler+0x640>)
 80078ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ce:	f7f9 f8e9 	bl	8000aa4 <__aeabi_dcmpge>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d002      	beq.n	80078de <NX7_Airmix_MA_Handler+0x50e>
				NX7_Airmix_MA_RVS();
 80078d8:	f7ff fd40 	bl	800735c <NX7_Airmix_MA_RVS>
			break;			
 80078dc:	e11b      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
				NX7_Airmix_MA_STP();
 80078de:	f7ff fcd3 	bl	8007288 <NX7_Airmix_MA_STP>
			break;			
 80078e2:	e118      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
		}
		case Airmix_75:
		{
			if(NX7_Airmix_FB <= (NX7_Airmix_75_Pos-NX7_Airmix_Tolerance))
 80078e4:	4b58      	ldr	r3, [pc, #352]	; (8007a48 <NX7_Airmix_MA_Handler+0x678>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7f8 fdfd 	bl	80004e8 <__aeabi_f2d>
 80078ee:	a34a      	add	r3, pc, #296	; (adr r3, 8007a18 <NX7_Airmix_MA_Handler+0x648>)
 80078f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078f4:	f7f9 f8cc 	bl	8000a90 <__aeabi_dcmple>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d002      	beq.n	8007904 <NX7_Airmix_MA_Handler+0x534>
				NX7_Airmix_MA_FWD();
 80078fe:	f7ff fcf3 	bl	80072e8 <NX7_Airmix_MA_FWD>
			else if(NX7_Airmix_FB >= (NX7_Airmix_75_Pos+NX7_Airmix_Tolerance))
				NX7_Airmix_MA_RVS();
			else
				NX7_Airmix_MA_STP();
			break;
 8007902:	e108      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
			else if(NX7_Airmix_FB >= (NX7_Airmix_75_Pos+NX7_Airmix_Tolerance))
 8007904:	4b50      	ldr	r3, [pc, #320]	; (8007a48 <NX7_Airmix_MA_Handler+0x678>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4618      	mov	r0, r3
 800790a:	f7f8 fded 	bl	80004e8 <__aeabi_f2d>
 800790e:	a344      	add	r3, pc, #272	; (adr r3, 8007a20 <NX7_Airmix_MA_Handler+0x650>)
 8007910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007914:	f7f9 f8c6 	bl	8000aa4 <__aeabi_dcmpge>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d002      	beq.n	8007924 <NX7_Airmix_MA_Handler+0x554>
				NX7_Airmix_MA_RVS();
 800791e:	f7ff fd1d 	bl	800735c <NX7_Airmix_MA_RVS>
			break;
 8007922:	e0f8      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
				NX7_Airmix_MA_STP();
 8007924:	f7ff fcb0 	bl	8007288 <NX7_Airmix_MA_STP>
			break;
 8007928:	e0f5      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
		}
		case Airmix_80:
		{
			if(NX7_Airmix_FB <= (NX7_Airmix_80_Pos-NX7_Airmix_Tolerance))
 800792a:	4b47      	ldr	r3, [pc, #284]	; (8007a48 <NX7_Airmix_MA_Handler+0x678>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4618      	mov	r0, r3
 8007930:	f7f8 fdda 	bl	80004e8 <__aeabi_f2d>
 8007934:	a33c      	add	r3, pc, #240	; (adr r3, 8007a28 <NX7_Airmix_MA_Handler+0x658>)
 8007936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793a:	f7f9 f8a9 	bl	8000a90 <__aeabi_dcmple>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d002      	beq.n	800794a <NX7_Airmix_MA_Handler+0x57a>
				NX7_Airmix_MA_FWD();
 8007944:	f7ff fcd0 	bl	80072e8 <NX7_Airmix_MA_FWD>
			else if(NX7_Airmix_FB >= (NX7_Airmix_80_Pos+NX7_Airmix_Tolerance))
				NX7_Airmix_MA_RVS();
			else
				NX7_Airmix_MA_STP();
			break;			
 8007948:	e0e5      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
			else if(NX7_Airmix_FB >= (NX7_Airmix_80_Pos+NX7_Airmix_Tolerance))
 800794a:	4b3f      	ldr	r3, [pc, #252]	; (8007a48 <NX7_Airmix_MA_Handler+0x678>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4618      	mov	r0, r3
 8007950:	f7f8 fdca 	bl	80004e8 <__aeabi_f2d>
 8007954:	a336      	add	r3, pc, #216	; (adr r3, 8007a30 <NX7_Airmix_MA_Handler+0x660>)
 8007956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800795a:	f7f9 f8a3 	bl	8000aa4 <__aeabi_dcmpge>
 800795e:	4603      	mov	r3, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d002      	beq.n	800796a <NX7_Airmix_MA_Handler+0x59a>
				NX7_Airmix_MA_RVS();
 8007964:	f7ff fcfa 	bl	800735c <NX7_Airmix_MA_RVS>
			break;			
 8007968:	e0d5      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
				NX7_Airmix_MA_STP();
 800796a:	f7ff fc8d 	bl	8007288 <NX7_Airmix_MA_STP>
			break;			
 800796e:	e0d2      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
		}
		case Airmix_85:
		{
			if(NX7_Airmix_FB <= (NX7_Airmix_85_Pos-NX7_Airmix_Tolerance))
 8007970:	4b35      	ldr	r3, [pc, #212]	; (8007a48 <NX7_Airmix_MA_Handler+0x678>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4618      	mov	r0, r3
 8007976:	f7f8 fdb7 	bl	80004e8 <__aeabi_f2d>
 800797a:	a32f      	add	r3, pc, #188	; (adr r3, 8007a38 <NX7_Airmix_MA_Handler+0x668>)
 800797c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007980:	f7f9 f886 	bl	8000a90 <__aeabi_dcmple>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d002      	beq.n	8007990 <NX7_Airmix_MA_Handler+0x5c0>
				NX7_Airmix_MA_FWD();
 800798a:	f7ff fcad 	bl	80072e8 <NX7_Airmix_MA_FWD>
			else if(NX7_Airmix_FB >= (NX7_Airmix_85_Pos+NX7_Airmix_Tolerance))
				NX7_Airmix_MA_RVS();
			else
				NX7_Airmix_MA_STP();
			break;
 800798e:	e0c2      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
			else if(NX7_Airmix_FB >= (NX7_Airmix_85_Pos+NX7_Airmix_Tolerance))
 8007990:	4b2d      	ldr	r3, [pc, #180]	; (8007a48 <NX7_Airmix_MA_Handler+0x678>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4618      	mov	r0, r3
 8007996:	f7f8 fda7 	bl	80004e8 <__aeabi_f2d>
 800799a:	a329      	add	r3, pc, #164	; (adr r3, 8007a40 <NX7_Airmix_MA_Handler+0x670>)
 800799c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a0:	f7f9 f880 	bl	8000aa4 <__aeabi_dcmpge>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d002      	beq.n	80079b0 <NX7_Airmix_MA_Handler+0x5e0>
				NX7_Airmix_MA_RVS();
 80079aa:	f7ff fcd7 	bl	800735c <NX7_Airmix_MA_RVS>
			break;
 80079ae:	e0b2      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
				NX7_Airmix_MA_STP();
 80079b0:	f7ff fc6a 	bl	8007288 <NX7_Airmix_MA_STP>
			break;
 80079b4:	e0af      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
 80079b6:	bf00      	nop
 80079b8:	a3d70a3d 	.word	0xa3d70a3d
 80079bc:	40013d70 	.word	0x40013d70
 80079c0:	3d70a3d7 	.word	0x3d70a3d7
 80079c4:	4002d70a 	.word	0x4002d70a
 80079c8:	cccccccd 	.word	0xcccccccd
 80079cc:	4002cccc 	.word	0x4002cccc
 80079d0:	66666667 	.word	0x66666667
 80079d4:	40046666 	.word	0x40046666
 80079d8:	f5c28f5c 	.word	0xf5c28f5c
 80079dc:	40045c28 	.word	0x40045c28
 80079e0:	8f5c28f6 	.word	0x8f5c28f6
 80079e4:	4005f5c2 	.word	0x4005f5c2
 80079e8:	1eb851eb 	.word	0x1eb851eb
 80079ec:	4005eb85 	.word	0x4005eb85
 80079f0:	b851eb85 	.word	0xb851eb85
 80079f4:	4007851e 	.word	0x4007851e
 80079f8:	47ae147b 	.word	0x47ae147b
 80079fc:	40077ae1 	.word	0x40077ae1
 8007a00:	e147ae15 	.word	0xe147ae15
 8007a04:	4009147a 	.word	0x4009147a
 8007a08:	70a3d70a 	.word	0x70a3d70a
 8007a0c:	40090a3d 	.word	0x40090a3d
 8007a10:	0a3d70a4 	.word	0x0a3d70a4
 8007a14:	400aa3d7 	.word	0x400aa3d7
 8007a18:	99999999 	.word	0x99999999
 8007a1c:	400a9999 	.word	0x400a9999
 8007a20:	33333333 	.word	0x33333333
 8007a24:	400c3333 	.word	0x400c3333
 8007a28:	c28f5c29 	.word	0xc28f5c29
 8007a2c:	400c28f5 	.word	0x400c28f5
 8007a30:	5c28f5c3 	.word	0x5c28f5c3
 8007a34:	400dc28f 	.word	0x400dc28f
 8007a38:	eb851eb8 	.word	0xeb851eb8
 8007a3c:	400db851 	.word	0x400db851
 8007a40:	851eb852 	.word	0x851eb852
 8007a44:	400f51eb 	.word	0x400f51eb
 8007a48:	2000058c 	.word	0x2000058c
		}
		case Airmix_90:
		{
			if(NX7_Airmix_FB <= (NX7_Airmix_90_Pos-NX7_Airmix_Tolerance))
 8007a4c:	4b3e      	ldr	r3, [pc, #248]	; (8007b48 <NX7_Airmix_MA_Handler+0x778>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7f8 fd49 	bl	80004e8 <__aeabi_f2d>
 8007a56:	a332      	add	r3, pc, #200	; (adr r3, 8007b20 <NX7_Airmix_MA_Handler+0x750>)
 8007a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5c:	f7f9 f818 	bl	8000a90 <__aeabi_dcmple>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d002      	beq.n	8007a6c <NX7_Airmix_MA_Handler+0x69c>
				NX7_Airmix_MA_FWD();
 8007a66:	f7ff fc3f 	bl	80072e8 <NX7_Airmix_MA_FWD>
			else if(NX7_Airmix_FB >= (NX7_Airmix_90_Pos+NX7_Airmix_Tolerance))
				NX7_Airmix_MA_RVS();
			else
				NX7_Airmix_MA_STP();
			break;			
 8007a6a:	e054      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
			else if(NX7_Airmix_FB >= (NX7_Airmix_90_Pos+NX7_Airmix_Tolerance))
 8007a6c:	4b36      	ldr	r3, [pc, #216]	; (8007b48 <NX7_Airmix_MA_Handler+0x778>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4618      	mov	r0, r3
 8007a72:	f7f8 fd39 	bl	80004e8 <__aeabi_f2d>
 8007a76:	a32c      	add	r3, pc, #176	; (adr r3, 8007b28 <NX7_Airmix_MA_Handler+0x758>)
 8007a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7c:	f7f9 f812 	bl	8000aa4 <__aeabi_dcmpge>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d002      	beq.n	8007a8c <NX7_Airmix_MA_Handler+0x6bc>
				NX7_Airmix_MA_RVS();
 8007a86:	f7ff fc69 	bl	800735c <NX7_Airmix_MA_RVS>
			break;			
 8007a8a:	e044      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
				NX7_Airmix_MA_STP();
 8007a8c:	f7ff fbfc 	bl	8007288 <NX7_Airmix_MA_STP>
			break;			
 8007a90:	e041      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
		}
		case Airmix_95:
		{
			if(NX7_Airmix_FB <= (NX7_Airmix_95_Pos-NX7_Airmix_Tolerance))
 8007a92:	4b2d      	ldr	r3, [pc, #180]	; (8007b48 <NX7_Airmix_MA_Handler+0x778>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7f8 fd26 	bl	80004e8 <__aeabi_f2d>
 8007a9c:	a324      	add	r3, pc, #144	; (adr r3, 8007b30 <NX7_Airmix_MA_Handler+0x760>)
 8007a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa2:	f7f8 fff5 	bl	8000a90 <__aeabi_dcmple>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d002      	beq.n	8007ab2 <NX7_Airmix_MA_Handler+0x6e2>
				NX7_Airmix_MA_FWD();
 8007aac:	f7ff fc1c 	bl	80072e8 <NX7_Airmix_MA_FWD>
			else if(NX7_Airmix_FB >= (NX7_Airmix_95_Pos+NX7_Airmix_Tolerance))
				NX7_Airmix_MA_RVS();
			else
				NX7_Airmix_MA_STP();
			break;
 8007ab0:	e031      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
			else if(NX7_Airmix_FB >= (NX7_Airmix_95_Pos+NX7_Airmix_Tolerance))
 8007ab2:	4b25      	ldr	r3, [pc, #148]	; (8007b48 <NX7_Airmix_MA_Handler+0x778>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f7f8 fd16 	bl	80004e8 <__aeabi_f2d>
 8007abc:	a31e      	add	r3, pc, #120	; (adr r3, 8007b38 <NX7_Airmix_MA_Handler+0x768>)
 8007abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac2:	f7f8 ffef 	bl	8000aa4 <__aeabi_dcmpge>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d002      	beq.n	8007ad2 <NX7_Airmix_MA_Handler+0x702>
				NX7_Airmix_MA_RVS();
 8007acc:	f7ff fc46 	bl	800735c <NX7_Airmix_MA_RVS>
			break;
 8007ad0:	e021      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
				NX7_Airmix_MA_STP();
 8007ad2:	f7ff fbd9 	bl	8007288 <NX7_Airmix_MA_STP>
			break;
 8007ad6:	e01e      	b.n	8007b16 <NX7_Airmix_MA_Handler+0x746>
		}
		case Airmix_Hi:
		{
			if(NX7_Airmix_FB <= (NX7_Airmix_Hi_Pos-NX7_Airmix_Tolerance))
 8007ad8:	4b1b      	ldr	r3, [pc, #108]	; (8007b48 <NX7_Airmix_MA_Handler+0x778>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4618      	mov	r0, r3
 8007ade:	f7f8 fd03 	bl	80004e8 <__aeabi_f2d>
 8007ae2:	a317      	add	r3, pc, #92	; (adr r3, 8007b40 <NX7_Airmix_MA_Handler+0x770>)
 8007ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae8:	f7f8 ffd2 	bl	8000a90 <__aeabi_dcmple>
 8007aec:	4603      	mov	r3, r0
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d002      	beq.n	8007af8 <NX7_Airmix_MA_Handler+0x728>
				NX7_Airmix_MA_FWD();
 8007af2:	f7ff fbf9 	bl	80072e8 <NX7_Airmix_MA_FWD>
			else if(NX7_Airmix_FB >= (NX7_Airmix_Hi_Pos+NX7_Airmix_Tolerance))
				NX7_Airmix_MA_RVS();
			else
				NX7_Airmix_MA_STP();
			break;			
 8007af6:	e00d      	b.n	8007b14 <NX7_Airmix_MA_Handler+0x744>
			else if(NX7_Airmix_FB >= (NX7_Airmix_Hi_Pos+NX7_Airmix_Tolerance))
 8007af8:	4b13      	ldr	r3, [pc, #76]	; (8007b48 <NX7_Airmix_MA_Handler+0x778>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4913      	ldr	r1, [pc, #76]	; (8007b4c <NX7_Airmix_MA_Handler+0x77c>)
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7f9 fb32 	bl	8001168 <__aeabi_fcmpge>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d002      	beq.n	8007b10 <NX7_Airmix_MA_Handler+0x740>
				NX7_Airmix_MA_RVS();
 8007b0a:	f7ff fc27 	bl	800735c <NX7_Airmix_MA_RVS>
			break;			
 8007b0e:	e001      	b.n	8007b14 <NX7_Airmix_MA_Handler+0x744>
				NX7_Airmix_MA_STP();
 8007b10:	f7ff fbba 	bl	8007288 <NX7_Airmix_MA_STP>
			break;			
 8007b14:	bf00      	nop
		}
	}
}
 8007b16:	bf00      	nop
 8007b18:	3708      	adds	r7, #8
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	147ae147 	.word	0x147ae147
 8007b24:	400f47ae 	.word	0x400f47ae
 8007b28:	d70a3d70 	.word	0xd70a3d70
 8007b2c:	401070a3 	.word	0x401070a3
 8007b30:	1eb851ec 	.word	0x1eb851ec
 8007b34:	40106b85 	.word	0x40106b85
 8007b38:	eb851eb8 	.word	0xeb851eb8
 8007b3c:	40113851 	.word	0x40113851
 8007b40:	33333334 	.word	0x33333334
 8007b44:	40113333 	.word	0x40113333
 8007b48:	2000058c 	.word	0x2000058c
 8007b4c:	40900000 	.word	0x40900000

08007b50 <NX7_Delay>:
extern	int			dacVal;						// dacVal

/* Functions body *************************************************************/
/* NX7_Delay -----------------------------------------------------------------*/
void NX7_Delay(int delay)
{
 8007b50:	b490      	push	{r4, r7}
 8007b52:	b082      	sub	sp, #8
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
	for(register int i=0; i<delay; i++);
 8007b58:	2400      	movs	r4, #0
 8007b5a:	e000      	b.n	8007b5e <NX7_Delay+0xe>
 8007b5c:	3401      	adds	r4, #1
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	429c      	cmp	r4, r3
 8007b62:	dbfb      	blt.n	8007b5c <NX7_Delay+0xc>
}
 8007b64:	bf00      	nop
 8007b66:	bf00      	nop
 8007b68:	3708      	adds	r7, #8
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bc90      	pop	{r4, r7}
 8007b6e:	4770      	bx	lr

08007b70 <NX7_CCU_Init>:

/* NX7_CCU_Init --------------------------------------------------------------*/
void NX7_CCU_Init(void)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	af00      	add	r7, sp, #0
	NX7_ADC_Init();
 8007b74:	f7ff f9be 	bl	8006ef4 <NX7_ADC_Init>
	NX7_Blower_Init();
 8007b78:	f000 fef8 	bl	800896c <NX7_Blower_Init>
	NX7_TLE_Init();
 8007b7c:	f005 ff8c 	bl	800da98 <NX7_TLE_Init>
	NX7_LCD_Init();
 8007b80:	f001 f9b0 	bl	8008ee4 <NX7_LCD_Init>
}
 8007b84:	bf00      	nop
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <NX7_CCU_State_Updater>:

/* NX7_CCU_State_Updater -----------------------------------------------------*/
void NX7_CCU_State_Updater(CCU_State newState)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	4603      	mov	r3, r0
 8007b90:	71fb      	strb	r3, [r7, #7]
	NX7_CCU_preState	=	NX7_CCU_State;
 8007b92:	4b0d      	ldr	r3, [pc, #52]	; (8007bc8 <NX7_CCU_State_Updater+0x40>)
 8007b94:	781a      	ldrb	r2, [r3, #0]
 8007b96:	4b0d      	ldr	r3, [pc, #52]	; (8007bcc <NX7_CCU_State_Updater+0x44>)
 8007b98:	701a      	strb	r2, [r3, #0]
	NX7_CCU_State		=	newState;
 8007b9a:	4a0b      	ldr	r2, [pc, #44]	; (8007bc8 <NX7_CCU_State_Updater+0x40>)
 8007b9c:	79fb      	ldrb	r3, [r7, #7]
 8007b9e:	7013      	strb	r3, [r2, #0]
	//--> NX7_CCU_preState exceptions
	if(NX7_CCU_preState == CCU_OFF)			{NX7_CCU_preState = CCU_AUTO;}
 8007ba0:	4b0a      	ldr	r3, [pc, #40]	; (8007bcc <NX7_CCU_State_Updater+0x44>)
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d102      	bne.n	8007bae <NX7_CCU_State_Updater+0x26>
 8007ba8:	4b08      	ldr	r3, [pc, #32]	; (8007bcc <NX7_CCU_State_Updater+0x44>)
 8007baa:	2201      	movs	r2, #1
 8007bac:	701a      	strb	r2, [r3, #0]
	if(NX7_CCU_preState == CCU_IGN_OFF)		{NX7_CCU_preState = CCU_AUTO;}
 8007bae:	4b07      	ldr	r3, [pc, #28]	; (8007bcc <NX7_CCU_State_Updater+0x44>)
 8007bb0:	781b      	ldrb	r3, [r3, #0]
 8007bb2:	2b03      	cmp	r3, #3
 8007bb4:	d102      	bne.n	8007bbc <NX7_CCU_State_Updater+0x34>
 8007bb6:	4b05      	ldr	r3, [pc, #20]	; (8007bcc <NX7_CCU_State_Updater+0x44>)
 8007bb8:	2201      	movs	r2, #1
 8007bba:	701a      	strb	r2, [r3, #0]
}
 8007bbc:	bf00      	nop
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bc80      	pop	{r7}
 8007bc4:	4770      	bx	lr
 8007bc6:	bf00      	nop
 8007bc8:	2000020a 	.word	0x2000020a
 8007bcc:	20000009 	.word	0x20000009

08007bd0 <NX7_CCU_Switch_Handler>:

/* NX7_CCU_Switch_Handler ----------------------------------------------------*/
void NX7_CCU_Switch_Handler(uint16_t SW_Pin)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	80fb      	strh	r3, [r7, #6]
	/* ------------------------------------------------------- <POWER_SW_Pin> */
	if(SW_Pin == POWER_SW_Pin)
 8007bda:	88fb      	ldrh	r3, [r7, #6]
 8007bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007be0:	d11c      	bne.n	8007c1c <NX7_CCU_Switch_Handler+0x4c>
	{
		switch (NX7_CCU_State)
 8007be2:	4bb1      	ldr	r3, [pc, #708]	; (8007ea8 <NX7_CCU_Switch_Handler+0x2d8>)
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	2b03      	cmp	r3, #3
 8007be8:	d819      	bhi.n	8007c1e <NX7_CCU_Switch_Handler+0x4e>
 8007bea:	a201      	add	r2, pc, #4	; (adr r2, 8007bf0 <NX7_CCU_Switch_Handler+0x20>)
 8007bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf0:	08007c01 	.word	0x08007c01
 8007bf4:	08007c0d 	.word	0x08007c0d
 8007bf8:	08007c15 	.word	0x08007c15
 8007bfc:	08007c1f 	.word	0x08007c1f
		{
		case CCU_OFF:
		{
			NX7_CCU_State_Updater(NX7_CCU_preState);
 8007c00:	4baa      	ldr	r3, [pc, #680]	; (8007eac <NX7_CCU_Switch_Handler+0x2dc>)
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	4618      	mov	r0, r3
 8007c06:	f7ff ffbf 	bl	8007b88 <NX7_CCU_State_Updater>
			break;
 8007c0a:	e008      	b.n	8007c1e <NX7_CCU_Switch_Handler+0x4e>
		}
		case CCU_AUTO:
		{
			NX7_CCU_State_Updater(CCU_OFF);
 8007c0c:	2000      	movs	r0, #0
 8007c0e:	f7ff ffbb 	bl	8007b88 <NX7_CCU_State_Updater>
			break;
 8007c12:	e004      	b.n	8007c1e <NX7_CCU_Switch_Handler+0x4e>
		}
		case CCU_DEF:
		{
			NX7_CCU_State_Updater(CCU_OFF);
 8007c14:	2000      	movs	r0, #0
 8007c16:	f7ff ffb7 	bl	8007b88 <NX7_CCU_State_Updater>
			break;
 8007c1a:	e000      	b.n	8007c1e <NX7_CCU_Switch_Handler+0x4e>
		case CCU_IGN_OFF:
		{
			break;
		}
		}
	}
 8007c1c:	bf00      	nop
	/* -------------------------------------------------------- <AUTO_SW_Pin> */
	if(SW_Pin == AUTO_SW_Pin)
 8007c1e:	88fb      	ldrh	r3, [r7, #6]
 8007c20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c24:	d135      	bne.n	8007c92 <NX7_CCU_Switch_Handler+0xc2>
	{
		switch (NX7_CCU_State)
 8007c26:	4ba0      	ldr	r3, [pc, #640]	; (8007ea8 <NX7_CCU_Switch_Handler+0x2d8>)
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	2b03      	cmp	r3, #3
 8007c2c:	d832      	bhi.n	8007c94 <NX7_CCU_Switch_Handler+0xc4>
 8007c2e:	a201      	add	r2, pc, #4	; (adr r2, 8007c34 <NX7_CCU_Switch_Handler+0x64>)
 8007c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c34:	08007c45 	.word	0x08007c45
 8007c38:	08007c5f 	.word	0x08007c5f
 8007c3c:	08007c79 	.word	0x08007c79
 8007c40:	08007c95 	.word	0x08007c95
		{
		case CCU_OFF:
		{
			NX7_CCU_State_Updater(CCU_AUTO);
 8007c44:	2001      	movs	r0, #1
 8007c46:	f7ff ff9f 	bl	8007b88 <NX7_CCU_State_Updater>
			Intake_Auto_Ctrl_State = Auto_Ctrl_ON;
 8007c4a:	4b99      	ldr	r3, [pc, #612]	; (8007eb0 <NX7_CCU_Switch_Handler+0x2e0>)
 8007c4c:	2201      	movs	r2, #1
 8007c4e:	701a      	strb	r2, [r3, #0]
			Mode_Auto_Ctrl_State = Auto_Ctrl_ON;
 8007c50:	4b98      	ldr	r3, [pc, #608]	; (8007eb4 <NX7_CCU_Switch_Handler+0x2e4>)
 8007c52:	2201      	movs	r2, #1
 8007c54:	701a      	strb	r2, [r3, #0]
			Blower_Auto_Ctrl_State = Auto_Ctrl_ON;
 8007c56:	4b98      	ldr	r3, [pc, #608]	; (8007eb8 <NX7_CCU_Switch_Handler+0x2e8>)
 8007c58:	2201      	movs	r2, #1
 8007c5a:	701a      	strb	r2, [r3, #0]
			break;
 8007c5c:	e01a      	b.n	8007c94 <NX7_CCU_Switch_Handler+0xc4>
		}
		case CCU_AUTO:
		{
			NX7_CCU_State_Updater(CCU_AUTO);
 8007c5e:	2001      	movs	r0, #1
 8007c60:	f7ff ff92 	bl	8007b88 <NX7_CCU_State_Updater>
			Intake_Auto_Ctrl_State = Auto_Ctrl_ON;
 8007c64:	4b92      	ldr	r3, [pc, #584]	; (8007eb0 <NX7_CCU_Switch_Handler+0x2e0>)
 8007c66:	2201      	movs	r2, #1
 8007c68:	701a      	strb	r2, [r3, #0]
			Mode_Auto_Ctrl_State = Auto_Ctrl_ON;
 8007c6a:	4b92      	ldr	r3, [pc, #584]	; (8007eb4 <NX7_CCU_Switch_Handler+0x2e4>)
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	701a      	strb	r2, [r3, #0]
			Blower_Auto_Ctrl_State = Auto_Ctrl_ON;
 8007c70:	4b91      	ldr	r3, [pc, #580]	; (8007eb8 <NX7_CCU_Switch_Handler+0x2e8>)
 8007c72:	2201      	movs	r2, #1
 8007c74:	701a      	strb	r2, [r3, #0]
			break;
 8007c76:	e00d      	b.n	8007c94 <NX7_CCU_Switch_Handler+0xc4>
		}
		case CCU_DEF:
		{
			NX7_CCU_State_Updater(CCU_AUTO);
 8007c78:	2001      	movs	r0, #1
 8007c7a:	f7ff ff85 	bl	8007b88 <NX7_CCU_State_Updater>
			Intake_Auto_Ctrl_State = Auto_Ctrl_ON;
 8007c7e:	4b8c      	ldr	r3, [pc, #560]	; (8007eb0 <NX7_CCU_Switch_Handler+0x2e0>)
 8007c80:	2201      	movs	r2, #1
 8007c82:	701a      	strb	r2, [r3, #0]
			Mode_Auto_Ctrl_State = Auto_Ctrl_ON;
 8007c84:	4b8b      	ldr	r3, [pc, #556]	; (8007eb4 <NX7_CCU_Switch_Handler+0x2e4>)
 8007c86:	2201      	movs	r2, #1
 8007c88:	701a      	strb	r2, [r3, #0]
			Blower_Auto_Ctrl_State = Auto_Ctrl_ON;
 8007c8a:	4b8b      	ldr	r3, [pc, #556]	; (8007eb8 <NX7_CCU_Switch_Handler+0x2e8>)
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	701a      	strb	r2, [r3, #0]
			break;
 8007c90:	e000      	b.n	8007c94 <NX7_CCU_Switch_Handler+0xc4>
		case CCU_IGN_OFF:
		{
			break;
		}
		}
	}
 8007c92:	bf00      	nop
	/* --------------------------------------------------------- <DEF_SW_Pin> */
	if(SW_Pin == DEF_SW_Pin)
 8007c94:	88fb      	ldrh	r3, [r7, #6]
 8007c96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c9a:	d11d      	bne.n	8007cd8 <NX7_CCU_Switch_Handler+0x108>
	{
		switch (NX7_CCU_State)
 8007c9c:	4b82      	ldr	r3, [pc, #520]	; (8007ea8 <NX7_CCU_Switch_Handler+0x2d8>)
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	2b03      	cmp	r3, #3
 8007ca2:	d81a      	bhi.n	8007cda <NX7_CCU_Switch_Handler+0x10a>
 8007ca4:	a201      	add	r2, pc, #4	; (adr r2, 8007cac <NX7_CCU_Switch_Handler+0xdc>)
 8007ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007caa:	bf00      	nop
 8007cac:	08007cbd 	.word	0x08007cbd
 8007cb0:	08007cc5 	.word	0x08007cc5
 8007cb4:	08007ccd 	.word	0x08007ccd
 8007cb8:	08007cdb 	.word	0x08007cdb
		{
		case CCU_OFF:
		{
			NX7_CCU_State_Updater(CCU_DEF);
 8007cbc:	2002      	movs	r0, #2
 8007cbe:	f7ff ff63 	bl	8007b88 <NX7_CCU_State_Updater>
			break;
 8007cc2:	e00a      	b.n	8007cda <NX7_CCU_Switch_Handler+0x10a>
		}
		case CCU_AUTO:
		{
			NX7_CCU_State_Updater(CCU_DEF);
 8007cc4:	2002      	movs	r0, #2
 8007cc6:	f7ff ff5f 	bl	8007b88 <NX7_CCU_State_Updater>
			break;
 8007cca:	e006      	b.n	8007cda <NX7_CCU_Switch_Handler+0x10a>
		}
		case CCU_DEF:
		{
			NX7_CCU_State_Updater(NX7_CCU_preState);
 8007ccc:	4b77      	ldr	r3, [pc, #476]	; (8007eac <NX7_CCU_Switch_Handler+0x2dc>)
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7ff ff59 	bl	8007b88 <NX7_CCU_State_Updater>
			break;
 8007cd6:	e000      	b.n	8007cda <NX7_CCU_Switch_Handler+0x10a>
		case CCU_IGN_OFF:
		{
			break;
		}
		}
	}
 8007cd8:	bf00      	nop
	/* ---------------------------------------------------------- <AC_SW_Pin> */
	if(SW_Pin == AC_SW_Pin)
 8007cda:	88fb      	ldrh	r3, [r7, #6]
 8007cdc:	2b20      	cmp	r3, #32
 8007cde:	d139      	bne.n	8007d54 <NX7_CCU_Switch_Handler+0x184>
	{
		switch (NX7_CCU_State)
 8007ce0:	4b71      	ldr	r3, [pc, #452]	; (8007ea8 <NX7_CCU_Switch_Handler+0x2d8>)
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	2b03      	cmp	r3, #3
 8007ce6:	d838      	bhi.n	8007d5a <NX7_CCU_Switch_Handler+0x18a>
 8007ce8:	a201      	add	r2, pc, #4	; (adr r2, 8007cf0 <NX7_CCU_Switch_Handler+0x120>)
 8007cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cee:	bf00      	nop
 8007cf0:	08007d01 	.word	0x08007d01
 8007cf4:	08007d21 	.word	0x08007d21
 8007cf8:	08007d29 	.word	0x08007d29
 8007cfc:	08007d5b 	.word	0x08007d5b
		{
		case CCU_OFF:
		{
			if(NX7_CCU_preState == CCU_AUTO)		{NX7_CCU_State_Updater(CCU_AUTO);}
 8007d00:	4b6a      	ldr	r3, [pc, #424]	; (8007eac <NX7_CCU_Switch_Handler+0x2dc>)
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d103      	bne.n	8007d10 <NX7_CCU_Switch_Handler+0x140>
 8007d08:	2001      	movs	r0, #1
 8007d0a:	f7ff ff3d 	bl	8007b88 <NX7_CCU_State_Updater>
			else if(NX7_CCU_preState == CCU_DEF)	{NX7_CCU_State_Updater(CCU_DEF);}
			break;
 8007d0e:	e023      	b.n	8007d58 <NX7_CCU_Switch_Handler+0x188>
			else if(NX7_CCU_preState == CCU_DEF)	{NX7_CCU_State_Updater(CCU_DEF);}
 8007d10:	4b66      	ldr	r3, [pc, #408]	; (8007eac <NX7_CCU_Switch_Handler+0x2dc>)
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	2b02      	cmp	r3, #2
 8007d16:	d11f      	bne.n	8007d58 <NX7_CCU_Switch_Handler+0x188>
 8007d18:	2002      	movs	r0, #2
 8007d1a:	f7ff ff35 	bl	8007b88 <NX7_CCU_State_Updater>
			break;
 8007d1e:	e01b      	b.n	8007d58 <NX7_CCU_Switch_Handler+0x188>
		}
		case CCU_AUTO:
		{
			NX7_CCU_State_Updater(CCU_AUTO);
 8007d20:	2001      	movs	r0, #1
 8007d22:	f7ff ff31 	bl	8007b88 <NX7_CCU_State_Updater>
			break;
 8007d26:	e018      	b.n	8007d5a <NX7_CCU_Switch_Handler+0x18a>
		}
		case CCU_DEF:
		{
			NX7_CCU_State_Updater(CCU_AUTO);
 8007d28:	2001      	movs	r0, #1
 8007d2a:	f7ff ff2d 	bl	8007b88 <NX7_CCU_State_Updater>
			NX7_Intake_State = Intake_Fresh;
 8007d2e:	4b63      	ldr	r3, [pc, #396]	; (8007ebc <NX7_CCU_Switch_Handler+0x2ec>)
 8007d30:	2200      	movs	r2, #0
 8007d32:	701a      	strb	r2, [r3, #0]
			NX7_Mode_State = Mode_Def;
 8007d34:	4b62      	ldr	r3, [pc, #392]	; (8007ec0 <NX7_CCU_Switch_Handler+0x2f0>)
 8007d36:	2204      	movs	r2, #4
 8007d38:	701a      	strb	r2, [r3, #0]
			NX7_Blower_State = Blower_L8;
 8007d3a:	4b62      	ldr	r3, [pc, #392]	; (8007ec4 <NX7_CCU_Switch_Handler+0x2f4>)
 8007d3c:	2208      	movs	r2, #8
 8007d3e:	701a      	strb	r2, [r3, #0]
			Intake_Auto_Ctrl_State = Auto_Ctrl_OFF;
 8007d40:	4b5b      	ldr	r3, [pc, #364]	; (8007eb0 <NX7_CCU_Switch_Handler+0x2e0>)
 8007d42:	2200      	movs	r2, #0
 8007d44:	701a      	strb	r2, [r3, #0]
			Mode_Auto_Ctrl_State = Auto_Ctrl_OFF;
 8007d46:	4b5b      	ldr	r3, [pc, #364]	; (8007eb4 <NX7_CCU_Switch_Handler+0x2e4>)
 8007d48:	2200      	movs	r2, #0
 8007d4a:	701a      	strb	r2, [r3, #0]
			Blower_Auto_Ctrl_State = Auto_Ctrl_OFF;
 8007d4c:	4b5a      	ldr	r3, [pc, #360]	; (8007eb8 <NX7_CCU_Switch_Handler+0x2e8>)
 8007d4e:	2200      	movs	r2, #0
 8007d50:	701a      	strb	r2, [r3, #0]
			break;
 8007d52:	e002      	b.n	8007d5a <NX7_CCU_Switch_Handler+0x18a>
		case CCU_IGN_OFF:
		{
			break;
		}
		}
	}
 8007d54:	bf00      	nop
 8007d56:	e000      	b.n	8007d5a <NX7_CCU_Switch_Handler+0x18a>
			break;
 8007d58:	bf00      	nop
	/* ------------------------------------------------------ <Intake_SW_Pin> */
	if(SW_Pin == Intake_SW_Pin)
 8007d5a:	88fb      	ldrh	r3, [r7, #6]
 8007d5c:	2b02      	cmp	r3, #2
 8007d5e:	d14b      	bne.n	8007df8 <NX7_CCU_Switch_Handler+0x228>
	{
		switch (NX7_CCU_State)
 8007d60:	4b51      	ldr	r3, [pc, #324]	; (8007ea8 <NX7_CCU_Switch_Handler+0x2d8>)
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	2b03      	cmp	r3, #3
 8007d66:	d848      	bhi.n	8007dfa <NX7_CCU_Switch_Handler+0x22a>
 8007d68:	a201      	add	r2, pc, #4	; (adr r2, 8007d70 <NX7_CCU_Switch_Handler+0x1a0>)
 8007d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6e:	bf00      	nop
 8007d70:	08007d81 	.word	0x08007d81
 8007d74:	08007da7 	.word	0x08007da7
 8007d78:	08007dcd 	.word	0x08007dcd
 8007d7c:	08007dfb 	.word	0x08007dfb
		{
		case CCU_OFF:
		{
			if(NX7_Intake_State == Intake_Fresh)		{NX7_Intake_State = Intake_Recycle;}
 8007d80:	4b4e      	ldr	r3, [pc, #312]	; (8007ebc <NX7_CCU_Switch_Handler+0x2ec>)
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d103      	bne.n	8007d90 <NX7_CCU_Switch_Handler+0x1c0>
 8007d88:	4b4c      	ldr	r3, [pc, #304]	; (8007ebc <NX7_CCU_Switch_Handler+0x2ec>)
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	701a      	strb	r2, [r3, #0]
 8007d8e:	e006      	b.n	8007d9e <NX7_CCU_Switch_Handler+0x1ce>
			else if(NX7_Intake_State == Intake_Recycle)	{NX7_Intake_State = Intake_Fresh;}
 8007d90:	4b4a      	ldr	r3, [pc, #296]	; (8007ebc <NX7_CCU_Switch_Handler+0x2ec>)
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d102      	bne.n	8007d9e <NX7_CCU_Switch_Handler+0x1ce>
 8007d98:	4b48      	ldr	r3, [pc, #288]	; (8007ebc <NX7_CCU_Switch_Handler+0x2ec>)
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	701a      	strb	r2, [r3, #0]
			Intake_Auto_Ctrl_State = Auto_Ctrl_OFF;
 8007d9e:	4b44      	ldr	r3, [pc, #272]	; (8007eb0 <NX7_CCU_Switch_Handler+0x2e0>)
 8007da0:	2200      	movs	r2, #0
 8007da2:	701a      	strb	r2, [r3, #0]
			break;
 8007da4:	e029      	b.n	8007dfa <NX7_CCU_Switch_Handler+0x22a>
		}
		case CCU_AUTO:
		{
			if(NX7_Intake_State == Intake_Fresh)		{NX7_Intake_State = Intake_Recycle;}
 8007da6:	4b45      	ldr	r3, [pc, #276]	; (8007ebc <NX7_CCU_Switch_Handler+0x2ec>)
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d103      	bne.n	8007db6 <NX7_CCU_Switch_Handler+0x1e6>
 8007dae:	4b43      	ldr	r3, [pc, #268]	; (8007ebc <NX7_CCU_Switch_Handler+0x2ec>)
 8007db0:	2201      	movs	r2, #1
 8007db2:	701a      	strb	r2, [r3, #0]
 8007db4:	e006      	b.n	8007dc4 <NX7_CCU_Switch_Handler+0x1f4>
			else if(NX7_Intake_State == Intake_Recycle)	{NX7_Intake_State = Intake_Fresh;}
 8007db6:	4b41      	ldr	r3, [pc, #260]	; (8007ebc <NX7_CCU_Switch_Handler+0x2ec>)
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	d102      	bne.n	8007dc4 <NX7_CCU_Switch_Handler+0x1f4>
 8007dbe:	4b3f      	ldr	r3, [pc, #252]	; (8007ebc <NX7_CCU_Switch_Handler+0x2ec>)
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	701a      	strb	r2, [r3, #0]
			Intake_Auto_Ctrl_State = Auto_Ctrl_OFF;
 8007dc4:	4b3a      	ldr	r3, [pc, #232]	; (8007eb0 <NX7_CCU_Switch_Handler+0x2e0>)
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	701a      	strb	r2, [r3, #0]
			break;
 8007dca:	e016      	b.n	8007dfa <NX7_CCU_Switch_Handler+0x22a>
		}
		case CCU_DEF:
		{
			NX7_CCU_State_Updater(CCU_AUTO);
 8007dcc:	2001      	movs	r0, #1
 8007dce:	f7ff fedb 	bl	8007b88 <NX7_CCU_State_Updater>
			NX7_Intake_State = Intake_Recycle;
 8007dd2:	4b3a      	ldr	r3, [pc, #232]	; (8007ebc <NX7_CCU_Switch_Handler+0x2ec>)
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	701a      	strb	r2, [r3, #0]
			NX7_Mode_State = Mode_Def;
 8007dd8:	4b39      	ldr	r3, [pc, #228]	; (8007ec0 <NX7_CCU_Switch_Handler+0x2f0>)
 8007dda:	2204      	movs	r2, #4
 8007ddc:	701a      	strb	r2, [r3, #0]
			NX7_Blower_State = Blower_L8;
 8007dde:	4b39      	ldr	r3, [pc, #228]	; (8007ec4 <NX7_CCU_Switch_Handler+0x2f4>)
 8007de0:	2208      	movs	r2, #8
 8007de2:	701a      	strb	r2, [r3, #0]
			Intake_Auto_Ctrl_State = Auto_Ctrl_OFF;
 8007de4:	4b32      	ldr	r3, [pc, #200]	; (8007eb0 <NX7_CCU_Switch_Handler+0x2e0>)
 8007de6:	2200      	movs	r2, #0
 8007de8:	701a      	strb	r2, [r3, #0]
			Mode_Auto_Ctrl_State = Auto_Ctrl_OFF;
 8007dea:	4b32      	ldr	r3, [pc, #200]	; (8007eb4 <NX7_CCU_Switch_Handler+0x2e4>)
 8007dec:	2200      	movs	r2, #0
 8007dee:	701a      	strb	r2, [r3, #0]
			Blower_Auto_Ctrl_State = Auto_Ctrl_OFF;
 8007df0:	4b31      	ldr	r3, [pc, #196]	; (8007eb8 <NX7_CCU_Switch_Handler+0x2e8>)
 8007df2:	2200      	movs	r2, #0
 8007df4:	701a      	strb	r2, [r3, #0]
			break;
 8007df6:	e000      	b.n	8007dfa <NX7_CCU_Switch_Handler+0x22a>
		case CCU_IGN_OFF:
		{
			break;
		}
		}
	}
 8007df8:	bf00      	nop
	/* -------------------------------------------------------- <Mode_SW_Pin> */
	if(SW_Pin == Mode_SW_Pin)
 8007dfa:	88fb      	ldrh	r3, [r7, #6]
 8007dfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e00:	f040 809f 	bne.w	8007f42 <NX7_CCU_Switch_Handler+0x372>
	{
		switch (NX7_CCU_State)
 8007e04:	4b28      	ldr	r3, [pc, #160]	; (8007ea8 <NX7_CCU_Switch_Handler+0x2d8>)
 8007e06:	781b      	ldrb	r3, [r3, #0]
 8007e08:	2b03      	cmp	r3, #3
 8007e0a:	f200 809b 	bhi.w	8007f44 <NX7_CCU_Switch_Handler+0x374>
 8007e0e:	a201      	add	r2, pc, #4	; (adr r2, 8007e14 <NX7_CCU_Switch_Handler+0x244>)
 8007e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e14:	08007e25 	.word	0x08007e25
 8007e18:	08007e99 	.word	0x08007e99
 8007e1c:	08007f17 	.word	0x08007f17
 8007e20:	08007f45 	.word	0x08007f45
		{
		case CCU_OFF:
		{
			if(NX7_Mode_State == Mode_Face)				{NX7_Mode_State = Mode_Face_Foot;}
 8007e24:	4b26      	ldr	r3, [pc, #152]	; (8007ec0 <NX7_CCU_Switch_Handler+0x2f0>)
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d103      	bne.n	8007e34 <NX7_CCU_Switch_Handler+0x264>
 8007e2c:	4b24      	ldr	r3, [pc, #144]	; (8007ec0 <NX7_CCU_Switch_Handler+0x2f0>)
 8007e2e:	2201      	movs	r2, #1
 8007e30:	701a      	strb	r2, [r3, #0]
 8007e32:	e01e      	b.n	8007e72 <NX7_CCU_Switch_Handler+0x2a2>
			else if(NX7_Mode_State == Mode_Face_Foot)	{NX7_Mode_State = Mode_Foot;}
 8007e34:	4b22      	ldr	r3, [pc, #136]	; (8007ec0 <NX7_CCU_Switch_Handler+0x2f0>)
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d103      	bne.n	8007e44 <NX7_CCU_Switch_Handler+0x274>
 8007e3c:	4b20      	ldr	r3, [pc, #128]	; (8007ec0 <NX7_CCU_Switch_Handler+0x2f0>)
 8007e3e:	2202      	movs	r2, #2
 8007e40:	701a      	strb	r2, [r3, #0]
 8007e42:	e016      	b.n	8007e72 <NX7_CCU_Switch_Handler+0x2a2>
			else if(NX7_Mode_State == Mode_Foot)		{NX7_Mode_State = Mode_Foot_Def;}
 8007e44:	4b1e      	ldr	r3, [pc, #120]	; (8007ec0 <NX7_CCU_Switch_Handler+0x2f0>)
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	2b02      	cmp	r3, #2
 8007e4a:	d103      	bne.n	8007e54 <NX7_CCU_Switch_Handler+0x284>
 8007e4c:	4b1c      	ldr	r3, [pc, #112]	; (8007ec0 <NX7_CCU_Switch_Handler+0x2f0>)
 8007e4e:	2203      	movs	r2, #3
 8007e50:	701a      	strb	r2, [r3, #0]
 8007e52:	e00e      	b.n	8007e72 <NX7_CCU_Switch_Handler+0x2a2>
			else if(NX7_Mode_State == Mode_Foot_Def)	{NX7_Mode_State = Mode_Def;}
 8007e54:	4b1a      	ldr	r3, [pc, #104]	; (8007ec0 <NX7_CCU_Switch_Handler+0x2f0>)
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	2b03      	cmp	r3, #3
 8007e5a:	d103      	bne.n	8007e64 <NX7_CCU_Switch_Handler+0x294>
 8007e5c:	4b18      	ldr	r3, [pc, #96]	; (8007ec0 <NX7_CCU_Switch_Handler+0x2f0>)
 8007e5e:	2204      	movs	r2, #4
 8007e60:	701a      	strb	r2, [r3, #0]
 8007e62:	e006      	b.n	8007e72 <NX7_CCU_Switch_Handler+0x2a2>
			else if(NX7_Mode_State == Mode_Def)			{NX7_Mode_State = Mode_Face;}
 8007e64:	4b16      	ldr	r3, [pc, #88]	; (8007ec0 <NX7_CCU_Switch_Handler+0x2f0>)
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	2b04      	cmp	r3, #4
 8007e6a:	d102      	bne.n	8007e72 <NX7_CCU_Switch_Handler+0x2a2>
 8007e6c:	4b14      	ldr	r3, [pc, #80]	; (8007ec0 <NX7_CCU_Switch_Handler+0x2f0>)
 8007e6e:	2200      	movs	r2, #0
 8007e70:	701a      	strb	r2, [r3, #0]
			Mode_Auto_Ctrl_State = Auto_Ctrl_OFF;
 8007e72:	4b10      	ldr	r3, [pc, #64]	; (8007eb4 <NX7_CCU_Switch_Handler+0x2e4>)
 8007e74:	2200      	movs	r2, #0
 8007e76:	701a      	strb	r2, [r3, #0]
			// TIM16 Start --> Mode_SEG_State
			NX7_Mode_SEG_State = Mode_SEG_ON;
 8007e78:	4b13      	ldr	r3, [pc, #76]	; (8007ec8 <NX7_CCU_Switch_Handler+0x2f8>)
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	701a      	strb	r2, [r3, #0]
			htim16.Instance->CNT = 0x00;
 8007e7e:	4b13      	ldr	r3, [pc, #76]	; (8007ecc <NX7_CCU_Switch_Handler+0x2fc>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2200      	movs	r2, #0
 8007e84:	625a      	str	r2, [r3, #36]	; 0x24
			__HAL_TIM_CLEAR_FLAG(&htim16, TIM_FLAG_UPDATE);
 8007e86:	4b11      	ldr	r3, [pc, #68]	; (8007ecc <NX7_CCU_Switch_Handler+0x2fc>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f06f 0201 	mvn.w	r2, #1
 8007e8e:	611a      	str	r2, [r3, #16]
			HAL_TIM_Base_Start_IT(&htim16);
 8007e90:	480e      	ldr	r0, [pc, #56]	; (8007ecc <NX7_CCU_Switch_Handler+0x2fc>)
 8007e92:	f7fd fe5b 	bl	8005b4c <HAL_TIM_Base_Start_IT>
			break;
 8007e96:	e055      	b.n	8007f44 <NX7_CCU_Switch_Handler+0x374>
		}
		case CCU_AUTO:
		{
			if(NX7_Mode_State == Mode_Face)				{NX7_Mode_State = Mode_Face_Foot;}
 8007e98:	4b09      	ldr	r3, [pc, #36]	; (8007ec0 <NX7_CCU_Switch_Handler+0x2f0>)
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d117      	bne.n	8007ed0 <NX7_CCU_Switch_Handler+0x300>
 8007ea0:	4b07      	ldr	r3, [pc, #28]	; (8007ec0 <NX7_CCU_Switch_Handler+0x2f0>)
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	701a      	strb	r2, [r3, #0]
 8007ea6:	e032      	b.n	8007f0e <NX7_CCU_Switch_Handler+0x33e>
 8007ea8:	2000020a 	.word	0x2000020a
 8007eac:	20000009 	.word	0x20000009
 8007eb0:	2000000a 	.word	0x2000000a
 8007eb4:	2000000b 	.word	0x2000000b
 8007eb8:	2000000c 	.word	0x2000000c
 8007ebc:	2000020b 	.word	0x2000020b
 8007ec0:	2000020c 	.word	0x2000020c
 8007ec4:	2000020e 	.word	0x2000020e
 8007ec8:	2000021c 	.word	0x2000021c
 8007ecc:	200004e4 	.word	0x200004e4
			else if(NX7_Mode_State == Mode_Face_Foot)	{NX7_Mode_State = Mode_Foot;}
 8007ed0:	4ba8      	ldr	r3, [pc, #672]	; (8008174 <NX7_CCU_Switch_Handler+0x5a4>)
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d103      	bne.n	8007ee0 <NX7_CCU_Switch_Handler+0x310>
 8007ed8:	4ba6      	ldr	r3, [pc, #664]	; (8008174 <NX7_CCU_Switch_Handler+0x5a4>)
 8007eda:	2202      	movs	r2, #2
 8007edc:	701a      	strb	r2, [r3, #0]
 8007ede:	e016      	b.n	8007f0e <NX7_CCU_Switch_Handler+0x33e>
			else if(NX7_Mode_State == Mode_Foot)		{NX7_Mode_State = Mode_Foot_Def;}
 8007ee0:	4ba4      	ldr	r3, [pc, #656]	; (8008174 <NX7_CCU_Switch_Handler+0x5a4>)
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d103      	bne.n	8007ef0 <NX7_CCU_Switch_Handler+0x320>
 8007ee8:	4ba2      	ldr	r3, [pc, #648]	; (8008174 <NX7_CCU_Switch_Handler+0x5a4>)
 8007eea:	2203      	movs	r2, #3
 8007eec:	701a      	strb	r2, [r3, #0]
 8007eee:	e00e      	b.n	8007f0e <NX7_CCU_Switch_Handler+0x33e>
			else if(NX7_Mode_State == Mode_Foot_Def)	{NX7_Mode_State = Mode_Def;}
 8007ef0:	4ba0      	ldr	r3, [pc, #640]	; (8008174 <NX7_CCU_Switch_Handler+0x5a4>)
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	2b03      	cmp	r3, #3
 8007ef6:	d103      	bne.n	8007f00 <NX7_CCU_Switch_Handler+0x330>
 8007ef8:	4b9e      	ldr	r3, [pc, #632]	; (8008174 <NX7_CCU_Switch_Handler+0x5a4>)
 8007efa:	2204      	movs	r2, #4
 8007efc:	701a      	strb	r2, [r3, #0]
 8007efe:	e006      	b.n	8007f0e <NX7_CCU_Switch_Handler+0x33e>
			else if(NX7_Mode_State == Mode_Def)			{NX7_Mode_State = Mode_Face;}
 8007f00:	4b9c      	ldr	r3, [pc, #624]	; (8008174 <NX7_CCU_Switch_Handler+0x5a4>)
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	2b04      	cmp	r3, #4
 8007f06:	d102      	bne.n	8007f0e <NX7_CCU_Switch_Handler+0x33e>
 8007f08:	4b9a      	ldr	r3, [pc, #616]	; (8008174 <NX7_CCU_Switch_Handler+0x5a4>)
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	701a      	strb	r2, [r3, #0]
			Mode_Auto_Ctrl_State = Auto_Ctrl_OFF;
 8007f0e:	4b9a      	ldr	r3, [pc, #616]	; (8008178 <NX7_CCU_Switch_Handler+0x5a8>)
 8007f10:	2200      	movs	r2, #0
 8007f12:	701a      	strb	r2, [r3, #0]
			break;
 8007f14:	e016      	b.n	8007f44 <NX7_CCU_Switch_Handler+0x374>
		}
		case CCU_DEF:
		{
			NX7_CCU_State_Updater(CCU_AUTO);
 8007f16:	2001      	movs	r0, #1
 8007f18:	f7ff fe36 	bl	8007b88 <NX7_CCU_State_Updater>
			NX7_Intake_State = Intake_Fresh;
 8007f1c:	4b97      	ldr	r3, [pc, #604]	; (800817c <NX7_CCU_Switch_Handler+0x5ac>)
 8007f1e:	2200      	movs	r2, #0
 8007f20:	701a      	strb	r2, [r3, #0]
			NX7_Mode_State = Mode_Face;
 8007f22:	4b94      	ldr	r3, [pc, #592]	; (8008174 <NX7_CCU_Switch_Handler+0x5a4>)
 8007f24:	2200      	movs	r2, #0
 8007f26:	701a      	strb	r2, [r3, #0]
			NX7_Blower_State = Blower_L8;
 8007f28:	4b95      	ldr	r3, [pc, #596]	; (8008180 <NX7_CCU_Switch_Handler+0x5b0>)
 8007f2a:	2208      	movs	r2, #8
 8007f2c:	701a      	strb	r2, [r3, #0]
			Intake_Auto_Ctrl_State = Auto_Ctrl_OFF;
 8007f2e:	4b95      	ldr	r3, [pc, #596]	; (8008184 <NX7_CCU_Switch_Handler+0x5b4>)
 8007f30:	2200      	movs	r2, #0
 8007f32:	701a      	strb	r2, [r3, #0]
			Mode_Auto_Ctrl_State = Auto_Ctrl_OFF;
 8007f34:	4b90      	ldr	r3, [pc, #576]	; (8008178 <NX7_CCU_Switch_Handler+0x5a8>)
 8007f36:	2200      	movs	r2, #0
 8007f38:	701a      	strb	r2, [r3, #0]
			Blower_Auto_Ctrl_State = Auto_Ctrl_OFF;
 8007f3a:	4b93      	ldr	r3, [pc, #588]	; (8008188 <NX7_CCU_Switch_Handler+0x5b8>)
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	701a      	strb	r2, [r3, #0]
			break;
 8007f40:	e000      	b.n	8007f44 <NX7_CCU_Switch_Handler+0x374>
		case CCU_IGN_OFF:
		{
			break;
		}
		}
	}
 8007f42:	bf00      	nop
	/* --------------------------------------------------- <Blower_Up_SW_Pin> */
	if(SW_Pin == Blower_Up_SW_Pin)
 8007f44:	88fb      	ldrh	r3, [r7, #6]
 8007f46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f4a:	d139      	bne.n	8007fc0 <NX7_CCU_Switch_Handler+0x3f0>
	{
		switch (NX7_CCU_State)
 8007f4c:	4b8f      	ldr	r3, [pc, #572]	; (800818c <NX7_CCU_Switch_Handler+0x5bc>)
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	2b03      	cmp	r3, #3
 8007f52:	d836      	bhi.n	8007fc2 <NX7_CCU_Switch_Handler+0x3f2>
 8007f54:	a201      	add	r2, pc, #4	; (adr r2, 8007f5c <NX7_CCU_Switch_Handler+0x38c>)
 8007f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f5a:	bf00      	nop
 8007f5c:	08007f6d 	.word	0x08007f6d
 8007f60:	08007f79 	.word	0x08007f79
 8007f64:	08007f95 	.word	0x08007f95
 8007f68:	08007fc3 	.word	0x08007fc3
		{
		case CCU_OFF:
		{
			NX7_CCU_State_Updater(NX7_CCU_preState);
 8007f6c:	4b88      	ldr	r3, [pc, #544]	; (8008190 <NX7_CCU_Switch_Handler+0x5c0>)
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7ff fe09 	bl	8007b88 <NX7_CCU_State_Updater>
			break;
 8007f76:	e024      	b.n	8007fc2 <NX7_CCU_Switch_Handler+0x3f2>
		}
		case CCU_AUTO:
		{
			if(NX7_Blower_State < Blower_L8)	{NX7_Blower_State++;}
 8007f78:	4b81      	ldr	r3, [pc, #516]	; (8008180 <NX7_CCU_Switch_Handler+0x5b0>)
 8007f7a:	781b      	ldrb	r3, [r3, #0]
 8007f7c:	2b07      	cmp	r3, #7
 8007f7e:	d805      	bhi.n	8007f8c <NX7_CCU_Switch_Handler+0x3bc>
 8007f80:	4b7f      	ldr	r3, [pc, #508]	; (8008180 <NX7_CCU_Switch_Handler+0x5b0>)
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	3301      	adds	r3, #1
 8007f86:	b2da      	uxtb	r2, r3
 8007f88:	4b7d      	ldr	r3, [pc, #500]	; (8008180 <NX7_CCU_Switch_Handler+0x5b0>)
 8007f8a:	701a      	strb	r2, [r3, #0]
			Blower_Auto_Ctrl_State = Auto_Ctrl_OFF;
 8007f8c:	4b7e      	ldr	r3, [pc, #504]	; (8008188 <NX7_CCU_Switch_Handler+0x5b8>)
 8007f8e:	2200      	movs	r2, #0
 8007f90:	701a      	strb	r2, [r3, #0]
			break;
 8007f92:	e016      	b.n	8007fc2 <NX7_CCU_Switch_Handler+0x3f2>
		}
		case CCU_DEF:
		{
			NX7_CCU_State_Updater(CCU_AUTO);
 8007f94:	2001      	movs	r0, #1
 8007f96:	f7ff fdf7 	bl	8007b88 <NX7_CCU_State_Updater>
			NX7_Intake_State = Intake_Fresh;
 8007f9a:	4b78      	ldr	r3, [pc, #480]	; (800817c <NX7_CCU_Switch_Handler+0x5ac>)
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	701a      	strb	r2, [r3, #0]
			NX7_Mode_State = Mode_Def;
 8007fa0:	4b74      	ldr	r3, [pc, #464]	; (8008174 <NX7_CCU_Switch_Handler+0x5a4>)
 8007fa2:	2204      	movs	r2, #4
 8007fa4:	701a      	strb	r2, [r3, #0]
			NX7_Blower_State = Blower_L8;
 8007fa6:	4b76      	ldr	r3, [pc, #472]	; (8008180 <NX7_CCU_Switch_Handler+0x5b0>)
 8007fa8:	2208      	movs	r2, #8
 8007faa:	701a      	strb	r2, [r3, #0]
			Intake_Auto_Ctrl_State = Auto_Ctrl_OFF;
 8007fac:	4b75      	ldr	r3, [pc, #468]	; (8008184 <NX7_CCU_Switch_Handler+0x5b4>)
 8007fae:	2200      	movs	r2, #0
 8007fb0:	701a      	strb	r2, [r3, #0]
			Mode_Auto_Ctrl_State = Auto_Ctrl_OFF;
 8007fb2:	4b71      	ldr	r3, [pc, #452]	; (8008178 <NX7_CCU_Switch_Handler+0x5a8>)
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	701a      	strb	r2, [r3, #0]
			Blower_Auto_Ctrl_State = Auto_Ctrl_OFF;
 8007fb8:	4b73      	ldr	r3, [pc, #460]	; (8008188 <NX7_CCU_Switch_Handler+0x5b8>)
 8007fba:	2200      	movs	r2, #0
 8007fbc:	701a      	strb	r2, [r3, #0]
			break;
 8007fbe:	e000      	b.n	8007fc2 <NX7_CCU_Switch_Handler+0x3f2>
		case CCU_IGN_OFF:
		{
			break;
		}
		}
	}
 8007fc0:	bf00      	nop
	/* ------------------------------------------------- <Blower_Down_SW_Pin> */
	if(SW_Pin == Blower_Down_SW_Pin)
 8007fc2:	88fb      	ldrh	r3, [r7, #6]
 8007fc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fc8:	d138      	bne.n	800803c <NX7_CCU_Switch_Handler+0x46c>
	{
		switch (NX7_CCU_State)
 8007fca:	4b70      	ldr	r3, [pc, #448]	; (800818c <NX7_CCU_Switch_Handler+0x5bc>)
 8007fcc:	781b      	ldrb	r3, [r3, #0]
 8007fce:	2b03      	cmp	r3, #3
 8007fd0:	d835      	bhi.n	800803e <NX7_CCU_Switch_Handler+0x46e>
 8007fd2:	a201      	add	r2, pc, #4	; (adr r2, 8007fd8 <NX7_CCU_Switch_Handler+0x408>)
 8007fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd8:	08007fe9 	.word	0x08007fe9
 8007fdc:	08007ff5 	.word	0x08007ff5
 8007fe0:	08008011 	.word	0x08008011
 8007fe4:	0800803f 	.word	0x0800803f
		{
		case CCU_OFF:
		{
			NX7_CCU_State_Updater(NX7_CCU_preState);
 8007fe8:	4b69      	ldr	r3, [pc, #420]	; (8008190 <NX7_CCU_Switch_Handler+0x5c0>)
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7ff fdcb 	bl	8007b88 <NX7_CCU_State_Updater>
			break;
 8007ff2:	e024      	b.n	800803e <NX7_CCU_Switch_Handler+0x46e>
		}
		case CCU_AUTO:
		{
			if(NX7_Blower_State > Blower_L1)	{NX7_Blower_State--;}
 8007ff4:	4b62      	ldr	r3, [pc, #392]	; (8008180 <NX7_CCU_Switch_Handler+0x5b0>)
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d905      	bls.n	8008008 <NX7_CCU_Switch_Handler+0x438>
 8007ffc:	4b60      	ldr	r3, [pc, #384]	; (8008180 <NX7_CCU_Switch_Handler+0x5b0>)
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	3b01      	subs	r3, #1
 8008002:	b2da      	uxtb	r2, r3
 8008004:	4b5e      	ldr	r3, [pc, #376]	; (8008180 <NX7_CCU_Switch_Handler+0x5b0>)
 8008006:	701a      	strb	r2, [r3, #0]
			Blower_Auto_Ctrl_State = Auto_Ctrl_OFF;
 8008008:	4b5f      	ldr	r3, [pc, #380]	; (8008188 <NX7_CCU_Switch_Handler+0x5b8>)
 800800a:	2200      	movs	r2, #0
 800800c:	701a      	strb	r2, [r3, #0]
			break;
 800800e:	e016      	b.n	800803e <NX7_CCU_Switch_Handler+0x46e>
		}
		case CCU_DEF:
		{
			NX7_CCU_State_Updater(CCU_AUTO);
 8008010:	2001      	movs	r0, #1
 8008012:	f7ff fdb9 	bl	8007b88 <NX7_CCU_State_Updater>
			NX7_Intake_State = Intake_Fresh;
 8008016:	4b59      	ldr	r3, [pc, #356]	; (800817c <NX7_CCU_Switch_Handler+0x5ac>)
 8008018:	2200      	movs	r2, #0
 800801a:	701a      	strb	r2, [r3, #0]
			NX7_Mode_State = Mode_Def;
 800801c:	4b55      	ldr	r3, [pc, #340]	; (8008174 <NX7_CCU_Switch_Handler+0x5a4>)
 800801e:	2204      	movs	r2, #4
 8008020:	701a      	strb	r2, [r3, #0]
			NX7_Blower_State = Blower_L7;
 8008022:	4b57      	ldr	r3, [pc, #348]	; (8008180 <NX7_CCU_Switch_Handler+0x5b0>)
 8008024:	2207      	movs	r2, #7
 8008026:	701a      	strb	r2, [r3, #0]
			Intake_Auto_Ctrl_State = Auto_Ctrl_OFF;
 8008028:	4b56      	ldr	r3, [pc, #344]	; (8008184 <NX7_CCU_Switch_Handler+0x5b4>)
 800802a:	2200      	movs	r2, #0
 800802c:	701a      	strb	r2, [r3, #0]
			Mode_Auto_Ctrl_State = Auto_Ctrl_OFF;
 800802e:	4b52      	ldr	r3, [pc, #328]	; (8008178 <NX7_CCU_Switch_Handler+0x5a8>)
 8008030:	2200      	movs	r2, #0
 8008032:	701a      	strb	r2, [r3, #0]
			Blower_Auto_Ctrl_State = Auto_Ctrl_OFF;
 8008034:	4b54      	ldr	r3, [pc, #336]	; (8008188 <NX7_CCU_Switch_Handler+0x5b8>)
 8008036:	2200      	movs	r2, #0
 8008038:	701a      	strb	r2, [r3, #0]
			break;
 800803a:	e000      	b.n	800803e <NX7_CCU_Switch_Handler+0x46e>
		case CCU_IGN_OFF:
		{
			break;
		}
		}
	}
 800803c:	bf00      	nop
	/* --------------------------------------------------- <Airmix_Up_SW_Pin> */
	if(SW_Pin == Airmix_Up_SW_Pin)
 800803e:	88fb      	ldrh	r3, [r7, #6]
 8008040:	2b40      	cmp	r3, #64	; 0x40
 8008042:	f040 811e 	bne.w	8008282 <NX7_CCU_Switch_Handler+0x6b2>
	{
		switch (NX7_CCU_State)
 8008046:	4b51      	ldr	r3, [pc, #324]	; (800818c <NX7_CCU_Switch_Handler+0x5bc>)
 8008048:	781b      	ldrb	r3, [r3, #0]
 800804a:	2b03      	cmp	r3, #3
 800804c:	f200 811a 	bhi.w	8008284 <NX7_CCU_Switch_Handler+0x6b4>
 8008050:	a201      	add	r2, pc, #4	; (adr r2, 8008058 <NX7_CCU_Switch_Handler+0x488>)
 8008052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008056:	bf00      	nop
 8008058:	08008285 	.word	0x08008285
 800805c:	08008069 	.word	0x08008069
 8008060:	08008159 	.word	0x08008159
 8008064:	08008285 	.word	0x08008285
		{
			break;
		}
		case CCU_AUTO:
		{
			if(NX7_Set_Point == -1000)									{NX7_Set_Point = 14.0;}
 8008068:	4b4a      	ldr	r3, [pc, #296]	; (8008194 <NX7_CCU_Switch_Handler+0x5c4>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	494a      	ldr	r1, [pc, #296]	; (8008198 <NX7_CCU_Switch_Handler+0x5c8>)
 800806e:	4618      	mov	r0, r3
 8008070:	f7f9 f85c 	bl	800112c <__aeabi_fcmpeq>
 8008074:	4603      	mov	r3, r0
 8008076:	2b00      	cmp	r3, #0
 8008078:	d003      	beq.n	8008082 <NX7_CCU_Switch_Handler+0x4b2>
 800807a:	4b46      	ldr	r3, [pc, #280]	; (8008194 <NX7_CCU_Switch_Handler+0x5c4>)
 800807c:	4a47      	ldr	r2, [pc, #284]	; (800819c <NX7_CCU_Switch_Handler+0x5cc>)
 800807e:	601a      	str	r2, [r3, #0]
			else if((NX7_Set_Point >= 14.0) && (NX7_Set_Point < 20.0))	{NX7_Set_Point += 1.0;}
			else if((NX7_Set_Point >= 20.0) && (NX7_Set_Point < 26.0))	{NX7_Set_Point += 0.5;}
			else if((NX7_Set_Point >= 26.0) && (NX7_Set_Point < 32.0))	{NX7_Set_Point += 1.0;}
			else if(NX7_Set_Point == 32.0)								{NX7_Set_Point = +1000;}
			break;
 8008080:	e100      	b.n	8008284 <NX7_CCU_Switch_Handler+0x6b4>
			else if((NX7_Set_Point >= 14.0) && (NX7_Set_Point < 20.0))	{NX7_Set_Point += 1.0;}
 8008082:	4b44      	ldr	r3, [pc, #272]	; (8008194 <NX7_CCU_Switch_Handler+0x5c4>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4945      	ldr	r1, [pc, #276]	; (800819c <NX7_CCU_Switch_Handler+0x5cc>)
 8008088:	4618      	mov	r0, r3
 800808a:	f7f9 f86d 	bl	8001168 <__aeabi_fcmpge>
 800808e:	4603      	mov	r3, r0
 8008090:	2b00      	cmp	r3, #0
 8008092:	d014      	beq.n	80080be <NX7_CCU_Switch_Handler+0x4ee>
 8008094:	4b3f      	ldr	r3, [pc, #252]	; (8008194 <NX7_CCU_Switch_Handler+0x5c4>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4941      	ldr	r1, [pc, #260]	; (80081a0 <NX7_CCU_Switch_Handler+0x5d0>)
 800809a:	4618      	mov	r0, r3
 800809c:	f7f9 f850 	bl	8001140 <__aeabi_fcmplt>
 80080a0:	4603      	mov	r3, r0
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d00b      	beq.n	80080be <NX7_CCU_Switch_Handler+0x4ee>
 80080a6:	4b3b      	ldr	r3, [pc, #236]	; (8008194 <NX7_CCU_Switch_Handler+0x5c4>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7f8 fda0 	bl	8000bf4 <__addsf3>
 80080b4:	4603      	mov	r3, r0
 80080b6:	461a      	mov	r2, r3
 80080b8:	4b36      	ldr	r3, [pc, #216]	; (8008194 <NX7_CCU_Switch_Handler+0x5c4>)
 80080ba:	601a      	str	r2, [r3, #0]
 80080bc:	e04b      	b.n	8008156 <NX7_CCU_Switch_Handler+0x586>
			else if((NX7_Set_Point >= 20.0) && (NX7_Set_Point < 26.0))	{NX7_Set_Point += 0.5;}
 80080be:	4b35      	ldr	r3, [pc, #212]	; (8008194 <NX7_CCU_Switch_Handler+0x5c4>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4937      	ldr	r1, [pc, #220]	; (80081a0 <NX7_CCU_Switch_Handler+0x5d0>)
 80080c4:	4618      	mov	r0, r3
 80080c6:	f7f9 f84f 	bl	8001168 <__aeabi_fcmpge>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d014      	beq.n	80080fa <NX7_CCU_Switch_Handler+0x52a>
 80080d0:	4b30      	ldr	r3, [pc, #192]	; (8008194 <NX7_CCU_Switch_Handler+0x5c4>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4933      	ldr	r1, [pc, #204]	; (80081a4 <NX7_CCU_Switch_Handler+0x5d4>)
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7f9 f832 	bl	8001140 <__aeabi_fcmplt>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d00b      	beq.n	80080fa <NX7_CCU_Switch_Handler+0x52a>
 80080e2:	4b2c      	ldr	r3, [pc, #176]	; (8008194 <NX7_CCU_Switch_Handler+0x5c4>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80080ea:	4618      	mov	r0, r3
 80080ec:	f7f8 fd82 	bl	8000bf4 <__addsf3>
 80080f0:	4603      	mov	r3, r0
 80080f2:	461a      	mov	r2, r3
 80080f4:	4b27      	ldr	r3, [pc, #156]	; (8008194 <NX7_CCU_Switch_Handler+0x5c4>)
 80080f6:	601a      	str	r2, [r3, #0]
 80080f8:	e02d      	b.n	8008156 <NX7_CCU_Switch_Handler+0x586>
			else if((NX7_Set_Point >= 26.0) && (NX7_Set_Point < 32.0))	{NX7_Set_Point += 1.0;}
 80080fa:	4b26      	ldr	r3, [pc, #152]	; (8008194 <NX7_CCU_Switch_Handler+0x5c4>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4929      	ldr	r1, [pc, #164]	; (80081a4 <NX7_CCU_Switch_Handler+0x5d4>)
 8008100:	4618      	mov	r0, r3
 8008102:	f7f9 f831 	bl	8001168 <__aeabi_fcmpge>
 8008106:	4603      	mov	r3, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d015      	beq.n	8008138 <NX7_CCU_Switch_Handler+0x568>
 800810c:	4b21      	ldr	r3, [pc, #132]	; (8008194 <NX7_CCU_Switch_Handler+0x5c4>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 8008114:	4618      	mov	r0, r3
 8008116:	f7f9 f813 	bl	8001140 <__aeabi_fcmplt>
 800811a:	4603      	mov	r3, r0
 800811c:	2b00      	cmp	r3, #0
 800811e:	d00b      	beq.n	8008138 <NX7_CCU_Switch_Handler+0x568>
 8008120:	4b1c      	ldr	r3, [pc, #112]	; (8008194 <NX7_CCU_Switch_Handler+0x5c4>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008128:	4618      	mov	r0, r3
 800812a:	f7f8 fd63 	bl	8000bf4 <__addsf3>
 800812e:	4603      	mov	r3, r0
 8008130:	461a      	mov	r2, r3
 8008132:	4b18      	ldr	r3, [pc, #96]	; (8008194 <NX7_CCU_Switch_Handler+0x5c4>)
 8008134:	601a      	str	r2, [r3, #0]
 8008136:	e00e      	b.n	8008156 <NX7_CCU_Switch_Handler+0x586>
			else if(NX7_Set_Point == 32.0)								{NX7_Set_Point = +1000;}
 8008138:	4b16      	ldr	r3, [pc, #88]	; (8008194 <NX7_CCU_Switch_Handler+0x5c4>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 8008140:	4618      	mov	r0, r3
 8008142:	f7f8 fff3 	bl	800112c <__aeabi_fcmpeq>
 8008146:	4603      	mov	r3, r0
 8008148:	2b00      	cmp	r3, #0
 800814a:	d100      	bne.n	800814e <NX7_CCU_Switch_Handler+0x57e>
			break;
 800814c:	e09a      	b.n	8008284 <NX7_CCU_Switch_Handler+0x6b4>
			else if(NX7_Set_Point == 32.0)								{NX7_Set_Point = +1000;}
 800814e:	4b11      	ldr	r3, [pc, #68]	; (8008194 <NX7_CCU_Switch_Handler+0x5c4>)
 8008150:	4a15      	ldr	r2, [pc, #84]	; (80081a8 <NX7_CCU_Switch_Handler+0x5d8>)
 8008152:	601a      	str	r2, [r3, #0]
			break;
 8008154:	e096      	b.n	8008284 <NX7_CCU_Switch_Handler+0x6b4>
 8008156:	e095      	b.n	8008284 <NX7_CCU_Switch_Handler+0x6b4>
		}
		case CCU_DEF:
		{
			if(NX7_Set_Point == -1000)									{NX7_Set_Point = 14.0;}
 8008158:	4b0e      	ldr	r3, [pc, #56]	; (8008194 <NX7_CCU_Switch_Handler+0x5c4>)
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	490e      	ldr	r1, [pc, #56]	; (8008198 <NX7_CCU_Switch_Handler+0x5c8>)
 800815e:	4618      	mov	r0, r3
 8008160:	f7f8 ffe4 	bl	800112c <__aeabi_fcmpeq>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d020      	beq.n	80081ac <NX7_CCU_Switch_Handler+0x5dc>
 800816a:	4b0a      	ldr	r3, [pc, #40]	; (8008194 <NX7_CCU_Switch_Handler+0x5c4>)
 800816c:	4a0b      	ldr	r2, [pc, #44]	; (800819c <NX7_CCU_Switch_Handler+0x5cc>)
 800816e:	601a      	str	r2, [r3, #0]
			else if((NX7_Set_Point >= 14.0) && (NX7_Set_Point < 20.0))	{NX7_Set_Point += 1.0;}
			else if((NX7_Set_Point >= 20.0) && (NX7_Set_Point < 26.0))	{NX7_Set_Point += 0.5;}
			else if((NX7_Set_Point >= 26.0) && (NX7_Set_Point < 32.0))	{NX7_Set_Point += 1.0;}
			else if(NX7_Set_Point == 32.0)								{NX7_Set_Point = +1000;}
			break;
 8008170:	e088      	b.n	8008284 <NX7_CCU_Switch_Handler+0x6b4>
 8008172:	bf00      	nop
 8008174:	2000020c 	.word	0x2000020c
 8008178:	2000000b 	.word	0x2000000b
 800817c:	2000020b 	.word	0x2000020b
 8008180:	2000020e 	.word	0x2000020e
 8008184:	2000000a 	.word	0x2000000a
 8008188:	2000000c 	.word	0x2000000c
 800818c:	2000020a 	.word	0x2000020a
 8008190:	20000009 	.word	0x20000009
 8008194:	20000010 	.word	0x20000010
 8008198:	c47a0000 	.word	0xc47a0000
 800819c:	41600000 	.word	0x41600000
 80081a0:	41a00000 	.word	0x41a00000
 80081a4:	41d00000 	.word	0x41d00000
 80081a8:	447a0000 	.word	0x447a0000
			else if((NX7_Set_Point >= 14.0) && (NX7_Set_Point < 20.0))	{NX7_Set_Point += 1.0;}
 80081ac:	4ba1      	ldr	r3, [pc, #644]	; (8008434 <NX7_CCU_Switch_Handler+0x864>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	49a1      	ldr	r1, [pc, #644]	; (8008438 <NX7_CCU_Switch_Handler+0x868>)
 80081b2:	4618      	mov	r0, r3
 80081b4:	f7f8 ffd8 	bl	8001168 <__aeabi_fcmpge>
 80081b8:	4603      	mov	r3, r0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d014      	beq.n	80081e8 <NX7_CCU_Switch_Handler+0x618>
 80081be:	4b9d      	ldr	r3, [pc, #628]	; (8008434 <NX7_CCU_Switch_Handler+0x864>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	499e      	ldr	r1, [pc, #632]	; (800843c <NX7_CCU_Switch_Handler+0x86c>)
 80081c4:	4618      	mov	r0, r3
 80081c6:	f7f8 ffbb 	bl	8001140 <__aeabi_fcmplt>
 80081ca:	4603      	mov	r3, r0
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d00b      	beq.n	80081e8 <NX7_CCU_Switch_Handler+0x618>
 80081d0:	4b98      	ldr	r3, [pc, #608]	; (8008434 <NX7_CCU_Switch_Handler+0x864>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80081d8:	4618      	mov	r0, r3
 80081da:	f7f8 fd0b 	bl	8000bf4 <__addsf3>
 80081de:	4603      	mov	r3, r0
 80081e0:	461a      	mov	r2, r3
 80081e2:	4b94      	ldr	r3, [pc, #592]	; (8008434 <NX7_CCU_Switch_Handler+0x864>)
 80081e4:	601a      	str	r2, [r3, #0]
 80081e6:	e04b      	b.n	8008280 <NX7_CCU_Switch_Handler+0x6b0>
			else if((NX7_Set_Point >= 20.0) && (NX7_Set_Point < 26.0))	{NX7_Set_Point += 0.5;}
 80081e8:	4b92      	ldr	r3, [pc, #584]	; (8008434 <NX7_CCU_Switch_Handler+0x864>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4993      	ldr	r1, [pc, #588]	; (800843c <NX7_CCU_Switch_Handler+0x86c>)
 80081ee:	4618      	mov	r0, r3
 80081f0:	f7f8 ffba 	bl	8001168 <__aeabi_fcmpge>
 80081f4:	4603      	mov	r3, r0
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d014      	beq.n	8008224 <NX7_CCU_Switch_Handler+0x654>
 80081fa:	4b8e      	ldr	r3, [pc, #568]	; (8008434 <NX7_CCU_Switch_Handler+0x864>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4990      	ldr	r1, [pc, #576]	; (8008440 <NX7_CCU_Switch_Handler+0x870>)
 8008200:	4618      	mov	r0, r3
 8008202:	f7f8 ff9d 	bl	8001140 <__aeabi_fcmplt>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d00b      	beq.n	8008224 <NX7_CCU_Switch_Handler+0x654>
 800820c:	4b89      	ldr	r3, [pc, #548]	; (8008434 <NX7_CCU_Switch_Handler+0x864>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008214:	4618      	mov	r0, r3
 8008216:	f7f8 fced 	bl	8000bf4 <__addsf3>
 800821a:	4603      	mov	r3, r0
 800821c:	461a      	mov	r2, r3
 800821e:	4b85      	ldr	r3, [pc, #532]	; (8008434 <NX7_CCU_Switch_Handler+0x864>)
 8008220:	601a      	str	r2, [r3, #0]
 8008222:	e02d      	b.n	8008280 <NX7_CCU_Switch_Handler+0x6b0>
			else if((NX7_Set_Point >= 26.0) && (NX7_Set_Point < 32.0))	{NX7_Set_Point += 1.0;}
 8008224:	4b83      	ldr	r3, [pc, #524]	; (8008434 <NX7_CCU_Switch_Handler+0x864>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4985      	ldr	r1, [pc, #532]	; (8008440 <NX7_CCU_Switch_Handler+0x870>)
 800822a:	4618      	mov	r0, r3
 800822c:	f7f8 ff9c 	bl	8001168 <__aeabi_fcmpge>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d015      	beq.n	8008262 <NX7_CCU_Switch_Handler+0x692>
 8008236:	4b7f      	ldr	r3, [pc, #508]	; (8008434 <NX7_CCU_Switch_Handler+0x864>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 800823e:	4618      	mov	r0, r3
 8008240:	f7f8 ff7e 	bl	8001140 <__aeabi_fcmplt>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	d00b      	beq.n	8008262 <NX7_CCU_Switch_Handler+0x692>
 800824a:	4b7a      	ldr	r3, [pc, #488]	; (8008434 <NX7_CCU_Switch_Handler+0x864>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008252:	4618      	mov	r0, r3
 8008254:	f7f8 fcce 	bl	8000bf4 <__addsf3>
 8008258:	4603      	mov	r3, r0
 800825a:	461a      	mov	r2, r3
 800825c:	4b75      	ldr	r3, [pc, #468]	; (8008434 <NX7_CCU_Switch_Handler+0x864>)
 800825e:	601a      	str	r2, [r3, #0]
 8008260:	e00e      	b.n	8008280 <NX7_CCU_Switch_Handler+0x6b0>
			else if(NX7_Set_Point == 32.0)								{NX7_Set_Point = +1000;}
 8008262:	4b74      	ldr	r3, [pc, #464]	; (8008434 <NX7_CCU_Switch_Handler+0x864>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 800826a:	4618      	mov	r0, r3
 800826c:	f7f8 ff5e 	bl	800112c <__aeabi_fcmpeq>
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	d100      	bne.n	8008278 <NX7_CCU_Switch_Handler+0x6a8>
			break;
 8008276:	e005      	b.n	8008284 <NX7_CCU_Switch_Handler+0x6b4>
			else if(NX7_Set_Point == 32.0)								{NX7_Set_Point = +1000;}
 8008278:	4b6e      	ldr	r3, [pc, #440]	; (8008434 <NX7_CCU_Switch_Handler+0x864>)
 800827a:	4a72      	ldr	r2, [pc, #456]	; (8008444 <NX7_CCU_Switch_Handler+0x874>)
 800827c:	601a      	str	r2, [r3, #0]
			break;
 800827e:	e001      	b.n	8008284 <NX7_CCU_Switch_Handler+0x6b4>
 8008280:	e000      	b.n	8008284 <NX7_CCU_Switch_Handler+0x6b4>
		case CCU_IGN_OFF:
		{
			break;
		}
		}
	}
 8008282:	bf00      	nop
	/* ------------------------------------------------- <Airmix_Down_SW_Pin> */
	if(SW_Pin == Airmix_Down_SW_Pin)
 8008284:	88fb      	ldrh	r3, [r7, #6]
 8008286:	2b80      	cmp	r3, #128	; 0x80
 8008288:	f040 810f 	bne.w	80084aa <NX7_CCU_Switch_Handler+0x8da>
	{
		switch (NX7_CCU_State)
 800828c:	4b6e      	ldr	r3, [pc, #440]	; (8008448 <NX7_CCU_Switch_Handler+0x878>)
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	2b03      	cmp	r3, #3
 8008292:	f200 810b 	bhi.w	80084ac <NX7_CCU_Switch_Handler+0x8dc>
 8008296:	a201      	add	r2, pc, #4	; (adr r2, 800829c <NX7_CCU_Switch_Handler+0x6cc>)
 8008298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800829c:	080084ad 	.word	0x080084ad
 80082a0:	080082ad 	.word	0x080082ad
 80082a4:	0800839d 	.word	0x0800839d
 80082a8:	080084ad 	.word	0x080084ad
		{
			break;
		}
		case CCU_AUTO:
		{
			if(NX7_Set_Point == +1000)									{NX7_Set_Point = 32.0;}
 80082ac:	4b61      	ldr	r3, [pc, #388]	; (8008434 <NX7_CCU_Switch_Handler+0x864>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4964      	ldr	r1, [pc, #400]	; (8008444 <NX7_CCU_Switch_Handler+0x874>)
 80082b2:	4618      	mov	r0, r3
 80082b4:	f7f8 ff3a 	bl	800112c <__aeabi_fcmpeq>
 80082b8:	4603      	mov	r3, r0
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d004      	beq.n	80082c8 <NX7_CCU_Switch_Handler+0x6f8>
 80082be:	4b5d      	ldr	r3, [pc, #372]	; (8008434 <NX7_CCU_Switch_Handler+0x864>)
 80082c0:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80082c4:	601a      	str	r2, [r3, #0]
			else if((NX7_Set_Point <= 32.0) && (NX7_Set_Point > 26.0))	{NX7_Set_Point -= 1.0;}
			else if((NX7_Set_Point <= 26.0) && (NX7_Set_Point > 20.0))	{NX7_Set_Point -= 0.5;}
			else if((NX7_Set_Point <= 20.0) && (NX7_Set_Point > 14.0))	{NX7_Set_Point -= 1.0;}
			else if(NX7_Set_Point == 14.0)								{NX7_Set_Point = -1000;}
			break;
 80082c6:	e0f1      	b.n	80084ac <NX7_CCU_Switch_Handler+0x8dc>
			else if((NX7_Set_Point <= 32.0) && (NX7_Set_Point > 26.0))	{NX7_Set_Point -= 1.0;}
 80082c8:	4b5a      	ldr	r3, [pc, #360]	; (8008434 <NX7_CCU_Switch_Handler+0x864>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 80082d0:	4618      	mov	r0, r3
 80082d2:	f7f8 ff3f 	bl	8001154 <__aeabi_fcmple>
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d014      	beq.n	8008306 <NX7_CCU_Switch_Handler+0x736>
 80082dc:	4b55      	ldr	r3, [pc, #340]	; (8008434 <NX7_CCU_Switch_Handler+0x864>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4957      	ldr	r1, [pc, #348]	; (8008440 <NX7_CCU_Switch_Handler+0x870>)
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7f8 ff4a 	bl	800117c <__aeabi_fcmpgt>
 80082e8:	4603      	mov	r3, r0
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d00b      	beq.n	8008306 <NX7_CCU_Switch_Handler+0x736>
 80082ee:	4b51      	ldr	r3, [pc, #324]	; (8008434 <NX7_CCU_Switch_Handler+0x864>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7f8 fc7a 	bl	8000bf0 <__aeabi_fsub>
 80082fc:	4603      	mov	r3, r0
 80082fe:	461a      	mov	r2, r3
 8008300:	4b4c      	ldr	r3, [pc, #304]	; (8008434 <NX7_CCU_Switch_Handler+0x864>)
 8008302:	601a      	str	r2, [r3, #0]
 8008304:	e049      	b.n	800839a <NX7_CCU_Switch_Handler+0x7ca>
			else if((NX7_Set_Point <= 26.0) && (NX7_Set_Point > 20.0))	{NX7_Set_Point -= 0.5;}
 8008306:	4b4b      	ldr	r3, [pc, #300]	; (8008434 <NX7_CCU_Switch_Handler+0x864>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	494d      	ldr	r1, [pc, #308]	; (8008440 <NX7_CCU_Switch_Handler+0x870>)
 800830c:	4618      	mov	r0, r3
 800830e:	f7f8 ff21 	bl	8001154 <__aeabi_fcmple>
 8008312:	4603      	mov	r3, r0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d014      	beq.n	8008342 <NX7_CCU_Switch_Handler+0x772>
 8008318:	4b46      	ldr	r3, [pc, #280]	; (8008434 <NX7_CCU_Switch_Handler+0x864>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4947      	ldr	r1, [pc, #284]	; (800843c <NX7_CCU_Switch_Handler+0x86c>)
 800831e:	4618      	mov	r0, r3
 8008320:	f7f8 ff2c 	bl	800117c <__aeabi_fcmpgt>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d00b      	beq.n	8008342 <NX7_CCU_Switch_Handler+0x772>
 800832a:	4b42      	ldr	r3, [pc, #264]	; (8008434 <NX7_CCU_Switch_Handler+0x864>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008332:	4618      	mov	r0, r3
 8008334:	f7f8 fc5c 	bl	8000bf0 <__aeabi_fsub>
 8008338:	4603      	mov	r3, r0
 800833a:	461a      	mov	r2, r3
 800833c:	4b3d      	ldr	r3, [pc, #244]	; (8008434 <NX7_CCU_Switch_Handler+0x864>)
 800833e:	601a      	str	r2, [r3, #0]
 8008340:	e02b      	b.n	800839a <NX7_CCU_Switch_Handler+0x7ca>
			else if((NX7_Set_Point <= 20.0) && (NX7_Set_Point > 14.0))	{NX7_Set_Point -= 1.0;}
 8008342:	4b3c      	ldr	r3, [pc, #240]	; (8008434 <NX7_CCU_Switch_Handler+0x864>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	493d      	ldr	r1, [pc, #244]	; (800843c <NX7_CCU_Switch_Handler+0x86c>)
 8008348:	4618      	mov	r0, r3
 800834a:	f7f8 ff03 	bl	8001154 <__aeabi_fcmple>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d014      	beq.n	800837e <NX7_CCU_Switch_Handler+0x7ae>
 8008354:	4b37      	ldr	r3, [pc, #220]	; (8008434 <NX7_CCU_Switch_Handler+0x864>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4937      	ldr	r1, [pc, #220]	; (8008438 <NX7_CCU_Switch_Handler+0x868>)
 800835a:	4618      	mov	r0, r3
 800835c:	f7f8 ff0e 	bl	800117c <__aeabi_fcmpgt>
 8008360:	4603      	mov	r3, r0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d00b      	beq.n	800837e <NX7_CCU_Switch_Handler+0x7ae>
 8008366:	4b33      	ldr	r3, [pc, #204]	; (8008434 <NX7_CCU_Switch_Handler+0x864>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800836e:	4618      	mov	r0, r3
 8008370:	f7f8 fc3e 	bl	8000bf0 <__aeabi_fsub>
 8008374:	4603      	mov	r3, r0
 8008376:	461a      	mov	r2, r3
 8008378:	4b2e      	ldr	r3, [pc, #184]	; (8008434 <NX7_CCU_Switch_Handler+0x864>)
 800837a:	601a      	str	r2, [r3, #0]
 800837c:	e00d      	b.n	800839a <NX7_CCU_Switch_Handler+0x7ca>
			else if(NX7_Set_Point == 14.0)								{NX7_Set_Point = -1000;}
 800837e:	4b2d      	ldr	r3, [pc, #180]	; (8008434 <NX7_CCU_Switch_Handler+0x864>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	492d      	ldr	r1, [pc, #180]	; (8008438 <NX7_CCU_Switch_Handler+0x868>)
 8008384:	4618      	mov	r0, r3
 8008386:	f7f8 fed1 	bl	800112c <__aeabi_fcmpeq>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d100      	bne.n	8008392 <NX7_CCU_Switch_Handler+0x7c2>
			break;
 8008390:	e08c      	b.n	80084ac <NX7_CCU_Switch_Handler+0x8dc>
			else if(NX7_Set_Point == 14.0)								{NX7_Set_Point = -1000;}
 8008392:	4b28      	ldr	r3, [pc, #160]	; (8008434 <NX7_CCU_Switch_Handler+0x864>)
 8008394:	4a2d      	ldr	r2, [pc, #180]	; (800844c <NX7_CCU_Switch_Handler+0x87c>)
 8008396:	601a      	str	r2, [r3, #0]
			break;
 8008398:	e088      	b.n	80084ac <NX7_CCU_Switch_Handler+0x8dc>
 800839a:	e087      	b.n	80084ac <NX7_CCU_Switch_Handler+0x8dc>
		}
		case CCU_DEF:
		{
			if(NX7_Set_Point == +1000)									{NX7_Set_Point = 32.0;}
 800839c:	4b25      	ldr	r3, [pc, #148]	; (8008434 <NX7_CCU_Switch_Handler+0x864>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4928      	ldr	r1, [pc, #160]	; (8008444 <NX7_CCU_Switch_Handler+0x874>)
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7f8 fec2 	bl	800112c <__aeabi_fcmpeq>
 80083a8:	4603      	mov	r3, r0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d004      	beq.n	80083b8 <NX7_CCU_Switch_Handler+0x7e8>
 80083ae:	4b21      	ldr	r3, [pc, #132]	; (8008434 <NX7_CCU_Switch_Handler+0x864>)
 80083b0:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80083b4:	601a      	str	r2, [r3, #0]
			else if((NX7_Set_Point <= 32.0) && (NX7_Set_Point > 26.0))	{NX7_Set_Point -= 1.0;}
			else if((NX7_Set_Point <= 26.0) && (NX7_Set_Point > 20.0))	{NX7_Set_Point -= 0.5;}
			else if((NX7_Set_Point <= 20.0) && (NX7_Set_Point > 14.0))	{NX7_Set_Point -= 1.0;}
			else if(NX7_Set_Point == 14.0)								{NX7_Set_Point = -1000;}
			break;
 80083b6:	e079      	b.n	80084ac <NX7_CCU_Switch_Handler+0x8dc>
			else if((NX7_Set_Point <= 32.0) && (NX7_Set_Point > 26.0))	{NX7_Set_Point -= 1.0;}
 80083b8:	4b1e      	ldr	r3, [pc, #120]	; (8008434 <NX7_CCU_Switch_Handler+0x864>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7f8 fec7 	bl	8001154 <__aeabi_fcmple>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d014      	beq.n	80083f6 <NX7_CCU_Switch_Handler+0x826>
 80083cc:	4b19      	ldr	r3, [pc, #100]	; (8008434 <NX7_CCU_Switch_Handler+0x864>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	491b      	ldr	r1, [pc, #108]	; (8008440 <NX7_CCU_Switch_Handler+0x870>)
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7f8 fed2 	bl	800117c <__aeabi_fcmpgt>
 80083d8:	4603      	mov	r3, r0
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00b      	beq.n	80083f6 <NX7_CCU_Switch_Handler+0x826>
 80083de:	4b15      	ldr	r3, [pc, #84]	; (8008434 <NX7_CCU_Switch_Handler+0x864>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80083e6:	4618      	mov	r0, r3
 80083e8:	f7f8 fc02 	bl	8000bf0 <__aeabi_fsub>
 80083ec:	4603      	mov	r3, r0
 80083ee:	461a      	mov	r2, r3
 80083f0:	4b10      	ldr	r3, [pc, #64]	; (8008434 <NX7_CCU_Switch_Handler+0x864>)
 80083f2:	601a      	str	r2, [r3, #0]
 80083f4:	e058      	b.n	80084a8 <NX7_CCU_Switch_Handler+0x8d8>
			else if((NX7_Set_Point <= 26.0) && (NX7_Set_Point > 20.0))	{NX7_Set_Point -= 0.5;}
 80083f6:	4b0f      	ldr	r3, [pc, #60]	; (8008434 <NX7_CCU_Switch_Handler+0x864>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4911      	ldr	r1, [pc, #68]	; (8008440 <NX7_CCU_Switch_Handler+0x870>)
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7f8 fea9 	bl	8001154 <__aeabi_fcmple>
 8008402:	4603      	mov	r3, r0
 8008404:	2b00      	cmp	r3, #0
 8008406:	d023      	beq.n	8008450 <NX7_CCU_Switch_Handler+0x880>
 8008408:	4b0a      	ldr	r3, [pc, #40]	; (8008434 <NX7_CCU_Switch_Handler+0x864>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	490b      	ldr	r1, [pc, #44]	; (800843c <NX7_CCU_Switch_Handler+0x86c>)
 800840e:	4618      	mov	r0, r3
 8008410:	f7f8 feb4 	bl	800117c <__aeabi_fcmpgt>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d01a      	beq.n	8008450 <NX7_CCU_Switch_Handler+0x880>
 800841a:	4b06      	ldr	r3, [pc, #24]	; (8008434 <NX7_CCU_Switch_Handler+0x864>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8008422:	4618      	mov	r0, r3
 8008424:	f7f8 fbe4 	bl	8000bf0 <__aeabi_fsub>
 8008428:	4603      	mov	r3, r0
 800842a:	461a      	mov	r2, r3
 800842c:	4b01      	ldr	r3, [pc, #4]	; (8008434 <NX7_CCU_Switch_Handler+0x864>)
 800842e:	601a      	str	r2, [r3, #0]
 8008430:	e03a      	b.n	80084a8 <NX7_CCU_Switch_Handler+0x8d8>
 8008432:	bf00      	nop
 8008434:	20000010 	.word	0x20000010
 8008438:	41600000 	.word	0x41600000
 800843c:	41a00000 	.word	0x41a00000
 8008440:	41d00000 	.word	0x41d00000
 8008444:	447a0000 	.word	0x447a0000
 8008448:	2000020a 	.word	0x2000020a
 800844c:	c47a0000 	.word	0xc47a0000
			else if((NX7_Set_Point <= 20.0) && (NX7_Set_Point > 14.0))	{NX7_Set_Point -= 1.0;}
 8008450:	4b3e      	ldr	r3, [pc, #248]	; (800854c <NX7_CCU_Switch_Handler+0x97c>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	493e      	ldr	r1, [pc, #248]	; (8008550 <NX7_CCU_Switch_Handler+0x980>)
 8008456:	4618      	mov	r0, r3
 8008458:	f7f8 fe7c 	bl	8001154 <__aeabi_fcmple>
 800845c:	4603      	mov	r3, r0
 800845e:	2b00      	cmp	r3, #0
 8008460:	d014      	beq.n	800848c <NX7_CCU_Switch_Handler+0x8bc>
 8008462:	4b3a      	ldr	r3, [pc, #232]	; (800854c <NX7_CCU_Switch_Handler+0x97c>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	493b      	ldr	r1, [pc, #236]	; (8008554 <NX7_CCU_Switch_Handler+0x984>)
 8008468:	4618      	mov	r0, r3
 800846a:	f7f8 fe87 	bl	800117c <__aeabi_fcmpgt>
 800846e:	4603      	mov	r3, r0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d00b      	beq.n	800848c <NX7_CCU_Switch_Handler+0x8bc>
 8008474:	4b35      	ldr	r3, [pc, #212]	; (800854c <NX7_CCU_Switch_Handler+0x97c>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800847c:	4618      	mov	r0, r3
 800847e:	f7f8 fbb7 	bl	8000bf0 <__aeabi_fsub>
 8008482:	4603      	mov	r3, r0
 8008484:	461a      	mov	r2, r3
 8008486:	4b31      	ldr	r3, [pc, #196]	; (800854c <NX7_CCU_Switch_Handler+0x97c>)
 8008488:	601a      	str	r2, [r3, #0]
 800848a:	e00d      	b.n	80084a8 <NX7_CCU_Switch_Handler+0x8d8>
			else if(NX7_Set_Point == 14.0)								{NX7_Set_Point = -1000;}
 800848c:	4b2f      	ldr	r3, [pc, #188]	; (800854c <NX7_CCU_Switch_Handler+0x97c>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4930      	ldr	r1, [pc, #192]	; (8008554 <NX7_CCU_Switch_Handler+0x984>)
 8008492:	4618      	mov	r0, r3
 8008494:	f7f8 fe4a 	bl	800112c <__aeabi_fcmpeq>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d100      	bne.n	80084a0 <NX7_CCU_Switch_Handler+0x8d0>
			break;
 800849e:	e005      	b.n	80084ac <NX7_CCU_Switch_Handler+0x8dc>
			else if(NX7_Set_Point == 14.0)								{NX7_Set_Point = -1000;}
 80084a0:	4b2a      	ldr	r3, [pc, #168]	; (800854c <NX7_CCU_Switch_Handler+0x97c>)
 80084a2:	4a2d      	ldr	r2, [pc, #180]	; (8008558 <NX7_CCU_Switch_Handler+0x988>)
 80084a4:	601a      	str	r2, [r3, #0]
			break;
 80084a6:	e001      	b.n	80084ac <NX7_CCU_Switch_Handler+0x8dc>
 80084a8:	e000      	b.n	80084ac <NX7_CCU_Switch_Handler+0x8dc>
		case CCU_IGN_OFF:
		{
			break;
		}
		}
	}
 80084aa:	bf00      	nop
	/* ------------------------------------------------------- <R_DEF_SW_Pin> */
	if(SW_Pin == R_DEF_SW_Pin)
 80084ac:	88fb      	ldrh	r3, [r7, #6]
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d13e      	bne.n	8008530 <NX7_CCU_Switch_Handler+0x960>
	{
		switch (NX7_CCU_State)
 80084b2:	4b2a      	ldr	r3, [pc, #168]	; (800855c <NX7_CCU_Switch_Handler+0x98c>)
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	2b03      	cmp	r3, #3
 80084b8:	d843      	bhi.n	8008542 <NX7_CCU_Switch_Handler+0x972>
 80084ba:	a201      	add	r2, pc, #4	; (adr r2, 80084c0 <NX7_CCU_Switch_Handler+0x8f0>)
 80084bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c0:	080084d1 	.word	0x080084d1
 80084c4:	080084f1 	.word	0x080084f1
 80084c8:	08008511 	.word	0x08008511
 80084cc:	08008535 	.word	0x08008535
		{
		case CCU_OFF:
		{
			if(NX7_R_DEF_State == R_DEF_OFF)		{NX7_R_DEF_State = R_DEF_ON;}
 80084d0:	4b23      	ldr	r3, [pc, #140]	; (8008560 <NX7_CCU_Switch_Handler+0x990>)
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d103      	bne.n	80084e0 <NX7_CCU_Switch_Handler+0x910>
 80084d8:	4b21      	ldr	r3, [pc, #132]	; (8008560 <NX7_CCU_Switch_Handler+0x990>)
 80084da:	2201      	movs	r2, #1
 80084dc:	701a      	strb	r2, [r3, #0]
			else if(NX7_R_DEF_State == R_DEF_ON)	{NX7_R_DEF_State = R_DEF_OFF;}
			break;
 80084de:	e02b      	b.n	8008538 <NX7_CCU_Switch_Handler+0x968>
			else if(NX7_R_DEF_State == R_DEF_ON)	{NX7_R_DEF_State = R_DEF_OFF;}
 80084e0:	4b1f      	ldr	r3, [pc, #124]	; (8008560 <NX7_CCU_Switch_Handler+0x990>)
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d127      	bne.n	8008538 <NX7_CCU_Switch_Handler+0x968>
 80084e8:	4b1d      	ldr	r3, [pc, #116]	; (8008560 <NX7_CCU_Switch_Handler+0x990>)
 80084ea:	2200      	movs	r2, #0
 80084ec:	701a      	strb	r2, [r3, #0]
			break;
 80084ee:	e023      	b.n	8008538 <NX7_CCU_Switch_Handler+0x968>
		}
		case CCU_AUTO:
		{
			if(NX7_R_DEF_State == R_DEF_OFF)		{NX7_R_DEF_State = R_DEF_ON;}
 80084f0:	4b1b      	ldr	r3, [pc, #108]	; (8008560 <NX7_CCU_Switch_Handler+0x990>)
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d103      	bne.n	8008500 <NX7_CCU_Switch_Handler+0x930>
 80084f8:	4b19      	ldr	r3, [pc, #100]	; (8008560 <NX7_CCU_Switch_Handler+0x990>)
 80084fa:	2201      	movs	r2, #1
 80084fc:	701a      	strb	r2, [r3, #0]
			else if(NX7_R_DEF_State == R_DEF_ON)	{NX7_R_DEF_State = R_DEF_OFF;}
			break;
 80084fe:	e01d      	b.n	800853c <NX7_CCU_Switch_Handler+0x96c>
			else if(NX7_R_DEF_State == R_DEF_ON)	{NX7_R_DEF_State = R_DEF_OFF;}
 8008500:	4b17      	ldr	r3, [pc, #92]	; (8008560 <NX7_CCU_Switch_Handler+0x990>)
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	2b01      	cmp	r3, #1
 8008506:	d119      	bne.n	800853c <NX7_CCU_Switch_Handler+0x96c>
 8008508:	4b15      	ldr	r3, [pc, #84]	; (8008560 <NX7_CCU_Switch_Handler+0x990>)
 800850a:	2200      	movs	r2, #0
 800850c:	701a      	strb	r2, [r3, #0]
			break;
 800850e:	e015      	b.n	800853c <NX7_CCU_Switch_Handler+0x96c>
		}
		case CCU_DEF:
		{
			if(NX7_R_DEF_State == R_DEF_OFF)		{NX7_R_DEF_State = R_DEF_ON;}
 8008510:	4b13      	ldr	r3, [pc, #76]	; (8008560 <NX7_CCU_Switch_Handler+0x990>)
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d103      	bne.n	8008520 <NX7_CCU_Switch_Handler+0x950>
 8008518:	4b11      	ldr	r3, [pc, #68]	; (8008560 <NX7_CCU_Switch_Handler+0x990>)
 800851a:	2201      	movs	r2, #1
 800851c:	701a      	strb	r2, [r3, #0]
			else if(NX7_R_DEF_State == R_DEF_ON)	{NX7_R_DEF_State = R_DEF_OFF;}
			break;
 800851e:	e00f      	b.n	8008540 <NX7_CCU_Switch_Handler+0x970>
			else if(NX7_R_DEF_State == R_DEF_ON)	{NX7_R_DEF_State = R_DEF_OFF;}
 8008520:	4b0f      	ldr	r3, [pc, #60]	; (8008560 <NX7_CCU_Switch_Handler+0x990>)
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	2b01      	cmp	r3, #1
 8008526:	d10b      	bne.n	8008540 <NX7_CCU_Switch_Handler+0x970>
 8008528:	4b0d      	ldr	r3, [pc, #52]	; (8008560 <NX7_CCU_Switch_Handler+0x990>)
 800852a:	2200      	movs	r2, #0
 800852c:	701a      	strb	r2, [r3, #0]
			break;
 800852e:	e007      	b.n	8008540 <NX7_CCU_Switch_Handler+0x970>
		case CCU_IGN_OFF:
		{
			break;
		}
		}
	}
 8008530:	bf00      	nop
 8008532:	e006      	b.n	8008542 <NX7_CCU_Switch_Handler+0x972>
			break;
 8008534:	bf00      	nop
 8008536:	e004      	b.n	8008542 <NX7_CCU_Switch_Handler+0x972>
			break;
 8008538:	bf00      	nop
 800853a:	e002      	b.n	8008542 <NX7_CCU_Switch_Handler+0x972>
			break;
 800853c:	bf00      	nop
 800853e:	e000      	b.n	8008542 <NX7_CCU_Switch_Handler+0x972>
			break;
 8008540:	bf00      	nop
}
 8008542:	bf00      	nop
 8008544:	3708      	adds	r7, #8
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}
 800854a:	bf00      	nop
 800854c:	20000010 	.word	0x20000010
 8008550:	41a00000 	.word	0x41a00000
 8008554:	41600000 	.word	0x41600000
 8008558:	c47a0000 	.word	0xc47a0000
 800855c:	2000020a 	.word	0x2000020a
 8008560:	20000211 	.word	0x20000211

08008564 <NX7_AUTO_Error_State_Handler>:

/* NX7_AUTO_Error_State_Handler ----------------------------------------------*/
void NX7_AUTO_Error_State_Handler(void)
{
 8008564:	b480      	push	{r7}
 8008566:	af00      	add	r7, sp, #0
	NX7_AUTO_Error_State  = Evap_Sensor_State | Cabin_Sensor_State | Water_Sensor_State | Ambient_Sensor_State | Solar_Sensor_State;
 8008568:	4b15      	ldr	r3, [pc, #84]	; (80085c0 <NX7_AUTO_Error_State_Handler+0x5c>)
 800856a:	781a      	ldrb	r2, [r3, #0]
 800856c:	4b15      	ldr	r3, [pc, #84]	; (80085c4 <NX7_AUTO_Error_State_Handler+0x60>)
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	4313      	orrs	r3, r2
 8008572:	b2da      	uxtb	r2, r3
 8008574:	4b14      	ldr	r3, [pc, #80]	; (80085c8 <NX7_AUTO_Error_State_Handler+0x64>)
 8008576:	781b      	ldrb	r3, [r3, #0]
 8008578:	4313      	orrs	r3, r2
 800857a:	b2da      	uxtb	r2, r3
 800857c:	4b13      	ldr	r3, [pc, #76]	; (80085cc <NX7_AUTO_Error_State_Handler+0x68>)
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	4313      	orrs	r3, r2
 8008582:	b2da      	uxtb	r2, r3
 8008584:	4b12      	ldr	r3, [pc, #72]	; (80085d0 <NX7_AUTO_Error_State_Handler+0x6c>)
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	4313      	orrs	r3, r2
 800858a:	b2da      	uxtb	r2, r3
 800858c:	4b11      	ldr	r3, [pc, #68]	; (80085d4 <NX7_AUTO_Error_State_Handler+0x70>)
 800858e:	701a      	strb	r2, [r3, #0]
	NX7_AUTO_Error_State |= Airmix_MA_Lock_State | Mode_MA_Lock_State | Airmix_MA_Pot_State | Mode_MA_Pot_State;
 8008590:	4b11      	ldr	r3, [pc, #68]	; (80085d8 <NX7_AUTO_Error_State_Handler+0x74>)
 8008592:	781a      	ldrb	r2, [r3, #0]
 8008594:	4b11      	ldr	r3, [pc, #68]	; (80085dc <NX7_AUTO_Error_State_Handler+0x78>)
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	4313      	orrs	r3, r2
 800859a:	b2da      	uxtb	r2, r3
 800859c:	4b10      	ldr	r3, [pc, #64]	; (80085e0 <NX7_AUTO_Error_State_Handler+0x7c>)
 800859e:	781b      	ldrb	r3, [r3, #0]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	b2da      	uxtb	r2, r3
 80085a4:	4b0f      	ldr	r3, [pc, #60]	; (80085e4 <NX7_AUTO_Error_State_Handler+0x80>)
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	4313      	orrs	r3, r2
 80085aa:	b2da      	uxtb	r2, r3
 80085ac:	4b09      	ldr	r3, [pc, #36]	; (80085d4 <NX7_AUTO_Error_State_Handler+0x70>)
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	4313      	orrs	r3, r2
 80085b2:	b2da      	uxtb	r2, r3
 80085b4:	4b07      	ldr	r3, [pc, #28]	; (80085d4 <NX7_AUTO_Error_State_Handler+0x70>)
 80085b6:	701a      	strb	r2, [r3, #0]
}
 80085b8:	bf00      	nop
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bc80      	pop	{r7}
 80085be:	4770      	bx	lr
 80085c0:	20000212 	.word	0x20000212
 80085c4:	20000213 	.word	0x20000213
 80085c8:	20000214 	.word	0x20000214
 80085cc:	2000000d 	.word	0x2000000d
 80085d0:	20000215 	.word	0x20000215
 80085d4:	2000021a 	.word	0x2000021a
 80085d8:	20000216 	.word	0x20000216
 80085dc:	20000217 	.word	0x20000217
 80085e0:	20000218 	.word	0x20000218
 80085e4:	20000219 	.word	0x20000219

080085e8 <NX7_CCU_Infinite_Loop>:

/* NX7_CCU_Infinite_Loop -----------------------------------------------------*/
void NX7_CCU_Infinite_Loop(void)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	af00      	add	r7, sp, #0
	while(1)
	{

/* ------------------------------------------------------ <CCU_IGN_OFF_State> */
		if(NX7_CCU_State == CCU_IGN_OFF)
 80085ec:	4ba9      	ldr	r3, [pc, #676]	; (8008894 <NX7_CCU_Infinite_Loop+0x2ac>)
 80085ee:	781b      	ldrb	r3, [r3, #0]
 80085f0:	2b03      	cmp	r3, #3
 80085f2:	d147      	bne.n	8008684 <NX7_CCU_Infinite_Loop+0x9c>
		{

		/* <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><> */
		while(NX7_CCU_State == CCU_IGN_OFF)
 80085f4:	e042      	b.n	800867c <NX7_CCU_Infinite_Loop+0x94>
		{
			// Timer Start
			//NX7_Intake_MA_Handler(Intake_Fresh);
			NX7_Mode_MA_STP();
 80085f6:	f002 fb01 	bl	800abfc <NX7_Mode_MA_STP>
			NX7_Airmix_MA_STP();
 80085fa:	f7fe fe45 	bl	8007288 <NX7_Airmix_MA_STP>
			//NX7_Mode_MA_Handler(Mode_Face);
			//NX7_Airmix_MA_Handler(Airmix_Lo);
			//NX7_Blower_Handler(Blower_OFF);	//delete
			NX7_AC_Handler(AC_OFF);
 80085fe:	2000      	movs	r0, #0
 8008600:	f7fe fc62 	bl	8006ec8 <NX7_AC_Handler>
			NX7_R_DEF_State = R_DEF_OFF;
 8008604:	4ba4      	ldr	r3, [pc, #656]	; (8008898 <NX7_CCU_Infinite_Loop+0x2b0>)
 8008606:	2200      	movs	r2, #0
 8008608:	701a      	strb	r2, [r3, #0]
			NX7_R_DEF_Handler(NX7_R_DEF_State);
 800860a:	4ba3      	ldr	r3, [pc, #652]	; (8008898 <NX7_CCU_Infinite_Loop+0x2b0>)
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	4618      	mov	r0, r3
 8008610:	f004 fd4c 	bl	800d0ac <NX7_R_DEF_Handler>
			// Timer Stop

			Evap_Sensor_State    = Sensor_OK;
 8008614:	4ba1      	ldr	r3, [pc, #644]	; (800889c <NX7_CCU_Infinite_Loop+0x2b4>)
 8008616:	2200      	movs	r2, #0
 8008618:	701a      	strb	r2, [r3, #0]
			Cabin_Sensor_State   = Sensor_OK;
 800861a:	4ba1      	ldr	r3, [pc, #644]	; (80088a0 <NX7_CCU_Infinite_Loop+0x2b8>)
 800861c:	2200      	movs	r2, #0
 800861e:	701a      	strb	r2, [r3, #0]
			Water_Sensor_State   = Sensor_OK;
 8008620:	4ba0      	ldr	r3, [pc, #640]	; (80088a4 <NX7_CCU_Infinite_Loop+0x2bc>)
 8008622:	2200      	movs	r2, #0
 8008624:	701a      	strb	r2, [r3, #0]
			Ambient_Sensor_State = Sensor_Error;
 8008626:	4ba0      	ldr	r3, [pc, #640]	; (80088a8 <NX7_CCU_Infinite_Loop+0x2c0>)
 8008628:	2201      	movs	r2, #1
 800862a:	701a      	strb	r2, [r3, #0]
			Solar_Sensor_State   = Sensor_OK;
 800862c:	4b9f      	ldr	r3, [pc, #636]	; (80088ac <NX7_CCU_Infinite_Loop+0x2c4>)
 800862e:	2200      	movs	r2, #0
 8008630:	701a      	strb	r2, [r3, #0]
			Airmix_MA_Lock_State = MA_Lock_OK;
 8008632:	4b9f      	ldr	r3, [pc, #636]	; (80088b0 <NX7_CCU_Infinite_Loop+0x2c8>)
 8008634:	2200      	movs	r2, #0
 8008636:	701a      	strb	r2, [r3, #0]
			Mode_MA_Lock_State   = MA_Lock_OK;
 8008638:	4b9e      	ldr	r3, [pc, #632]	; (80088b4 <NX7_CCU_Infinite_Loop+0x2cc>)
 800863a:	2200      	movs	r2, #0
 800863c:	701a      	strb	r2, [r3, #0]
			Airmix_MA_Pot_State  = MA_Pot_OK;
 800863e:	4b9e      	ldr	r3, [pc, #632]	; (80088b8 <NX7_CCU_Infinite_Loop+0x2d0>)
 8008640:	2200      	movs	r2, #0
 8008642:	701a      	strb	r2, [r3, #0]
			Mode_MA_Pot_State    = MA_Pot_OK;
 8008644:	4b9d      	ldr	r3, [pc, #628]	; (80088bc <NX7_CCU_Infinite_Loop+0x2d4>)
 8008646:	2200      	movs	r2, #0
 8008648:	701a      	strb	r2, [r3, #0]
			NX7_AUTO_Error_State = AUTO_Error_OFF;
 800864a:	4b9d      	ldr	r3, [pc, #628]	; (80088c0 <NX7_CCU_Infinite_Loop+0x2d8>)
 800864c:	2200      	movs	r2, #0
 800864e:	701a      	strb	r2, [r3, #0]

			NX7_TLE_DeInit();
 8008650:	f005 fa32 	bl	800dab8 <NX7_TLE_DeInit>
			NX7_LCD_DeInit();
 8008654:	f000 fc6a 	bl	8008f2c <NX7_LCD_DeInit>

			while(NX7_IGN_VOLT < 8.0);
 8008658:	bf00      	nop
 800865a:	4b9a      	ldr	r3, [pc, #616]	; (80088c4 <NX7_CCU_Infinite_Loop+0x2dc>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8008662:	4618      	mov	r0, r3
 8008664:	f7f8 fd6c 	bl	8001140 <__aeabi_fcmplt>
 8008668:	4603      	mov	r3, r0
 800866a:	2b00      	cmp	r3, #0
 800866c:	d1f5      	bne.n	800865a <NX7_CCU_Infinite_Loop+0x72>

			NX7_TLE_Init();
 800866e:	f005 fa13 	bl	800da98 <NX7_TLE_Init>
			NX7_LCD_Init();
 8008672:	f000 fc37 	bl	8008ee4 <NX7_LCD_Init>

			NX7_CCU_State = CCU_OFF;
 8008676:	4b87      	ldr	r3, [pc, #540]	; (8008894 <NX7_CCU_Infinite_Loop+0x2ac>)
 8008678:	2200      	movs	r2, #0
 800867a:	701a      	strb	r2, [r3, #0]
		while(NX7_CCU_State == CCU_IGN_OFF)
 800867c:	4b85      	ldr	r3, [pc, #532]	; (8008894 <NX7_CCU_Infinite_Loop+0x2ac>)
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	2b03      	cmp	r3, #3
 8008682:	d0b8      	beq.n	80085f6 <NX7_CCU_Infinite_Loop+0xe>

		}


/* ---------------------------------------------------------- <CCU_OFF_State> */
		if(NX7_CCU_State == CCU_OFF)
 8008684:	4b83      	ldr	r3, [pc, #524]	; (8008894 <NX7_CCU_Infinite_Loop+0x2ac>)
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d15c      	bne.n	8008746 <NX7_CCU_Infinite_Loop+0x15e>
		{
		//--> Mode_SEG_State_OFF & TIM16 Stop
		NX7_Mode_SEG_State = Mode_SEG_OFF;
 800868c:	4b8e      	ldr	r3, [pc, #568]	; (80088c8 <NX7_CCU_Infinite_Loop+0x2e0>)
 800868e:	2200      	movs	r2, #0
 8008690:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim16);
 8008692:	488e      	ldr	r0, [pc, #568]	; (80088cc <NX7_CCU_Infinite_Loop+0x2e4>)
 8008694:	f7fd fab4 	bl	8005c00 <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_CLEAR_FLAG(&htim16, TIM_FLAG_UPDATE);
 8008698:	4b8c      	ldr	r3, [pc, #560]	; (80088cc <NX7_CCU_Infinite_Loop+0x2e4>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f06f 0201 	mvn.w	r2, #1
 80086a0:	611a      	str	r2, [r3, #16]
		//--> Hysteresis flag reset
		flag = 0;
 80086a2:	4b8b      	ldr	r3, [pc, #556]	; (80088d0 <NX7_CCU_Infinite_Loop+0x2e8>)
 80086a4:	2200      	movs	r2, #0
 80086a6:	601a      	str	r2, [r3, #0]

		/* <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><> */
		while(NX7_CCU_State == CCU_OFF)
 80086a8:	e03c      	b.n	8008724 <NX7_CCU_Infinite_Loop+0x13c>
		{
			NX7_LCD_State_Init_SEG(CCU_OFF);
 80086aa:	2000      	movs	r0, #0
 80086ac:	f000 fef4 	bl	8009498 <NX7_LCD_State_Init_SEG>

			NX7_Intake_MA_Handler(NX7_Intake_State);
 80086b0:	4b88      	ldr	r3, [pc, #544]	; (80088d4 <NX7_CCU_Infinite_Loop+0x2ec>)
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	4618      	mov	r0, r3
 80086b6:	f000 fbff 	bl	8008eb8 <NX7_Intake_MA_Handler>
			NX7_Mode_MA_Handler(NX7_Mode_State);
 80086ba:	4b87      	ldr	r3, [pc, #540]	; (80088d8 <NX7_CCU_Infinite_Loop+0x2f0>)
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	4618      	mov	r0, r3
 80086c0:	f002 fb42 	bl	800ad48 <NX7_Mode_MA_Handler>
			NX7_Airmix_MA_Handler(NX7_Airmix_State);
 80086c4:	4b85      	ldr	r3, [pc, #532]	; (80088dc <NX7_CCU_Infinite_Loop+0x2f4>)
 80086c6:	781b      	ldrb	r3, [r3, #0]
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7fe fe81 	bl	80073d0 <NX7_Airmix_MA_Handler>
			//NX7_Blower_Handler(Blower_OFF);	//delete
			NX7_AC_Handler(AC_OFF);
 80086ce:	2000      	movs	r0, #0
 80086d0:	f7fe fbfa 	bl	8006ec8 <NX7_AC_Handler>
			NX7_R_DEF_Handler(NX7_R_DEF_State);
 80086d4:	4b70      	ldr	r3, [pc, #448]	; (8008898 <NX7_CCU_Infinite_Loop+0x2b0>)
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	4618      	mov	r0, r3
 80086da:	f004 fce7 	bl	800d0ac <NX7_R_DEF_Handler>

			NX7_LCD_Intake_Handler(NX7_Intake_State);
 80086de:	4b7d      	ldr	r3, [pc, #500]	; (80088d4 <NX7_CCU_Infinite_Loop+0x2ec>)
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	4618      	mov	r0, r3
 80086e4:	f000 ff5a 	bl	800959c <NX7_LCD_Intake_Handler>

			if(NX7_Mode_SEG_State == Mode_SEG_ON)
 80086e8:	4b77      	ldr	r3, [pc, #476]	; (80088c8 <NX7_CCU_Infinite_Loop+0x2e0>)
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d105      	bne.n	80086fc <NX7_CCU_Infinite_Loop+0x114>
			{NX7_LCD_Mode_Handler(NX7_Mode_State);}
 80086f0:	4b79      	ldr	r3, [pc, #484]	; (80088d8 <NX7_CCU_Infinite_Loop+0x2f0>)
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	4618      	mov	r0, r3
 80086f6:	f000 ff7b 	bl	80095f0 <NX7_LCD_Mode_Handler>
 80086fa:	e002      	b.n	8008702 <NX7_CCU_Infinite_Loop+0x11a>
			else
			{NX7_LCD_Mode_SEG(SEG_OFF);}
 80086fc:	2000      	movs	r0, #0
 80086fe:	f000 fd57 	bl	80091b0 <NX7_LCD_Mode_SEG>

			NX7_LCD_AC_Handler(AC_OFF);
 8008702:	2000      	movs	r0, #0
 8008704:	f000 ff18 	bl	8009538 <NX7_LCD_AC_Handler>
			NX7_LCD_R_DEF_Handler(NX7_R_DEF_State);
 8008708:	4b63      	ldr	r3, [pc, #396]	; (8008898 <NX7_CCU_Infinite_Loop+0x2b0>)
 800870a:	781b      	ldrb	r3, [r3, #0]
 800870c:	4618      	mov	r0, r3
 800870e:	f000 ff2c 	bl	800956a <NX7_LCD_R_DEF_Handler>
			NX7_LCD_Out_Temp_Handler(NX7_CCU_Sensor.Ambient_Sensor);
 8008712:	4b73      	ldr	r3, [pc, #460]	; (80088e0 <NX7_CCU_Infinite_Loop+0x2f8>)
 8008714:	68db      	ldr	r3, [r3, #12]
 8008716:	4618      	mov	r0, r3
 8008718:	f7f8 fd50 	bl	80011bc <__aeabi_f2iz>
 800871c:	4603      	mov	r3, r0
 800871e:	4618      	mov	r0, r3
 8008720:	f002 f9e4 	bl	800aaec <NX7_LCD_Out_Temp_Handler>
		while(NX7_CCU_State == CCU_OFF)
 8008724:	4b5b      	ldr	r3, [pc, #364]	; (8008894 <NX7_CCU_Infinite_Loop+0x2ac>)
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d0be      	beq.n	80086aa <NX7_CCU_Infinite_Loop+0xc2>
		}
		/* <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><> */

		//--> Mode_SEG_State_OFF & TIM16 Stop
		NX7_Mode_SEG_State = Mode_SEG_OFF;
 800872c:	4b66      	ldr	r3, [pc, #408]	; (80088c8 <NX7_CCU_Infinite_Loop+0x2e0>)
 800872e:	2200      	movs	r2, #0
 8008730:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim16);
 8008732:	4866      	ldr	r0, [pc, #408]	; (80088cc <NX7_CCU_Infinite_Loop+0x2e4>)
 8008734:	f7fd fa64 	bl	8005c00 <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_CLEAR_FLAG(&htim16, TIM_FLAG_UPDATE);
 8008738:	4b64      	ldr	r3, [pc, #400]	; (80088cc <NX7_CCU_Infinite_Loop+0x2e4>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f06f 0201 	mvn.w	r2, #1
 8008740:	611a      	str	r2, [r3, #16]
		//--> No_Hysteresis Function
		NX7_PID_Ctrl_No_Hysteresis();
 8008742:	f002 fbe9 	bl	800af18 <NX7_PID_Ctrl_No_Hysteresis>
		}


/* --------------------------------------------------------- <CCU_AUTO_State> */
		if(NX7_CCU_State == CCU_AUTO)
 8008746:	4b53      	ldr	r3, [pc, #332]	; (8008894 <NX7_CCU_Infinite_Loop+0x2ac>)
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	2b01      	cmp	r3, #1
 800874c:	d16c      	bne.n	8008828 <NX7_CCU_Infinite_Loop+0x240>
		{
		//NX7_PID_Ctrl();
		/* <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><> */
		while(NX7_CCU_State == CCU_AUTO)
 800874e:	e067      	b.n	8008820 <NX7_CCU_Infinite_Loop+0x238>
		{
			NX7_LCD_State_Init_SEG(CCU_AUTO);
 8008750:	2001      	movs	r0, #1
 8008752:	f000 fea1 	bl	8009498 <NX7_LCD_State_Init_SEG>

			NX7_Intake_MA_Handler(NX7_Intake_State);
 8008756:	4b5f      	ldr	r3, [pc, #380]	; (80088d4 <NX7_CCU_Infinite_Loop+0x2ec>)
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	4618      	mov	r0, r3
 800875c:	f000 fbac 	bl	8008eb8 <NX7_Intake_MA_Handler>
			NX7_Mode_MA_Handler(NX7_Mode_State);
 8008760:	4b5d      	ldr	r3, [pc, #372]	; (80088d8 <NX7_CCU_Infinite_Loop+0x2f0>)
 8008762:	781b      	ldrb	r3, [r3, #0]
 8008764:	4618      	mov	r0, r3
 8008766:	f002 faef 	bl	800ad48 <NX7_Mode_MA_Handler>
			NX7_Airmix_MA_Handler(NX7_Airmix_State);
 800876a:	4b5c      	ldr	r3, [pc, #368]	; (80088dc <NX7_CCU_Infinite_Loop+0x2f4>)
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	4618      	mov	r0, r3
 8008770:	f7fe fe2e 	bl	80073d0 <NX7_Airmix_MA_Handler>
			//NX7_Blower_Handler(NX7_Blower_State);	//delete
			NX7_AC_Handler(AC_ON);
 8008774:	2001      	movs	r0, #1
 8008776:	f7fe fba7 	bl	8006ec8 <NX7_AC_Handler>
			NX7_R_DEF_Handler(NX7_R_DEF_State);
 800877a:	4b47      	ldr	r3, [pc, #284]	; (8008898 <NX7_CCU_Infinite_Loop+0x2b0>)
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	4618      	mov	r0, r3
 8008780:	f004 fc94 	bl	800d0ac <NX7_R_DEF_Handler>

			NX7_AUTO_Error_State_Handler();
 8008784:	f7ff feee 	bl	8008564 <NX7_AUTO_Error_State_Handler>

			switch (NX7_AUTO_Error_State)
 8008788:	4b4d      	ldr	r3, [pc, #308]	; (80088c0 <NX7_CCU_Infinite_Loop+0x2d8>)
 800878a:	781b      	ldrb	r3, [r3, #0]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d002      	beq.n	8008796 <NX7_CCU_Infinite_Loop+0x1ae>
 8008790:	2b01      	cmp	r3, #1
 8008792:	d014      	beq.n	80087be <NX7_CCU_Infinite_Loop+0x1d6>
 8008794:	e01f      	b.n	80087d6 <NX7_CCU_Infinite_Loop+0x1ee>
			{
			case AUTO_Error_OFF:
			{
				if(Intake_Auto_Ctrl_State & Mode_Auto_Ctrl_State & Blower_Auto_Ctrl_State)
 8008796:	4b53      	ldr	r3, [pc, #332]	; (80088e4 <NX7_CCU_Infinite_Loop+0x2fc>)
 8008798:	781a      	ldrb	r2, [r3, #0]
 800879a:	4b53      	ldr	r3, [pc, #332]	; (80088e8 <NX7_CCU_Infinite_Loop+0x300>)
 800879c:	781b      	ldrb	r3, [r3, #0]
 800879e:	4013      	ands	r3, r2
 80087a0:	b2da      	uxtb	r2, r3
 80087a2:	4b52      	ldr	r3, [pc, #328]	; (80088ec <NX7_CCU_Infinite_Loop+0x304>)
 80087a4:	781b      	ldrb	r3, [r3, #0]
 80087a6:	4013      	ands	r3, r2
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d003      	beq.n	80087b6 <NX7_CCU_Infinite_Loop+0x1ce>
				{
					NX7_LCD_AUTO_SEG(SEG_ON);
 80087ae:	2001      	movs	r0, #1
 80087b0:	f000 fcb3 	bl	800911a <NX7_LCD_AUTO_SEG>
				}
				else
				{
					NX7_LCD_AUTO_SEG(SEG_OFF);
				}
				break;
 80087b4:	e00f      	b.n	80087d6 <NX7_CCU_Infinite_Loop+0x1ee>
					NX7_LCD_AUTO_SEG(SEG_OFF);
 80087b6:	2000      	movs	r0, #0
 80087b8:	f000 fcaf 	bl	800911a <NX7_LCD_AUTO_SEG>
				break;
 80087bc:	e00b      	b.n	80087d6 <NX7_CCU_Infinite_Loop+0x1ee>
			}
			case AUTO_Error_ON:
			{
				if(NX7_AUTO_Blink_State == AUTO_Blink_ON)
 80087be:	4b4c      	ldr	r3, [pc, #304]	; (80088f0 <NX7_CCU_Infinite_Loop+0x308>)
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d103      	bne.n	80087ce <NX7_CCU_Infinite_Loop+0x1e6>
				{
					NX7_LCD_AUTO_SEG(SEG_ON);
 80087c6:	2001      	movs	r0, #1
 80087c8:	f000 fca7 	bl	800911a <NX7_LCD_AUTO_SEG>
				}
				else
				{
					NX7_LCD_AUTO_SEG(SEG_OFF);
				}
				break;
 80087cc:	e002      	b.n	80087d4 <NX7_CCU_Infinite_Loop+0x1ec>
					NX7_LCD_AUTO_SEG(SEG_OFF);
 80087ce:	2000      	movs	r0, #0
 80087d0:	f000 fca3 	bl	800911a <NX7_LCD_AUTO_SEG>
				break;
 80087d4:	bf00      	nop
			}
			}

			NX7_LCD_Intake_Handler(NX7_Intake_State);
 80087d6:	4b3f      	ldr	r3, [pc, #252]	; (80088d4 <NX7_CCU_Infinite_Loop+0x2ec>)
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	4618      	mov	r0, r3
 80087dc:	f000 fede 	bl	800959c <NX7_LCD_Intake_Handler>
			NX7_LCD_Mode_Handler(NX7_Mode_State);
 80087e0:	4b3d      	ldr	r3, [pc, #244]	; (80088d8 <NX7_CCU_Infinite_Loop+0x2f0>)
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	4618      	mov	r0, r3
 80087e6:	f000 ff03 	bl	80095f0 <NX7_LCD_Mode_Handler>
			NX7_LCD_Blower_Handler(NX7_Blower_State);
 80087ea:	4b42      	ldr	r3, [pc, #264]	; (80088f4 <NX7_CCU_Infinite_Loop+0x30c>)
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	4618      	mov	r0, r3
 80087f0:	f000 ff6e 	bl	80096d0 <NX7_LCD_Blower_Handler>
			NX7_LCD_AC_Handler(AC_ON);
 80087f4:	2001      	movs	r0, #1
 80087f6:	f000 fe9f 	bl	8009538 <NX7_LCD_AC_Handler>
			NX7_LCD_R_DEF_Handler(NX7_R_DEF_State);
 80087fa:	4b27      	ldr	r3, [pc, #156]	; (8008898 <NX7_CCU_Infinite_Loop+0x2b0>)
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	4618      	mov	r0, r3
 8008800:	f000 feb3 	bl	800956a <NX7_LCD_R_DEF_Handler>
			NX7_LCD_Out_Temp_Handler(NX7_CCU_Sensor.Ambient_Sensor);
 8008804:	4b36      	ldr	r3, [pc, #216]	; (80088e0 <NX7_CCU_Infinite_Loop+0x2f8>)
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	4618      	mov	r0, r3
 800880a:	f7f8 fcd7 	bl	80011bc <__aeabi_f2iz>
 800880e:	4603      	mov	r3, r0
 8008810:	4618      	mov	r0, r3
 8008812:	f002 f96b 	bl	800aaec <NX7_LCD_Out_Temp_Handler>
			NX7_LCD_Set_Point_Handler(NX7_Set_Point);
 8008816:	4b38      	ldr	r3, [pc, #224]	; (80088f8 <NX7_CCU_Infinite_Loop+0x310>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4618      	mov	r0, r3
 800881c:	f001 fdcc 	bl	800a3b8 <NX7_LCD_Set_Point_Handler>
		while(NX7_CCU_State == CCU_AUTO)
 8008820:	4b1c      	ldr	r3, [pc, #112]	; (8008894 <NX7_CCU_Infinite_Loop+0x2ac>)
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	2b01      	cmp	r3, #1
 8008826:	d093      	beq.n	8008750 <NX7_CCU_Infinite_Loop+0x168>

		}


/* ---------------------------------------------------------- <CCU_DEF_State> */
		if(NX7_CCU_State == CCU_DEF)
 8008828:	4b1a      	ldr	r3, [pc, #104]	; (8008894 <NX7_CCU_Infinite_Loop+0x2ac>)
 800882a:	781b      	ldrb	r3, [r3, #0]
 800882c:	2b02      	cmp	r3, #2
 800882e:	f47f aedd 	bne.w	80085ec <NX7_CCU_Infinite_Loop+0x4>
		{
		DEF_LED_ON;
 8008832:	2201      	movs	r2, #1
 8008834:	2140      	movs	r1, #64	; 0x40
 8008836:	4831      	ldr	r0, [pc, #196]	; (80088fc <NX7_CCU_Infinite_Loop+0x314>)
 8008838:	f7fb f939 	bl	8003aae <HAL_GPIO_WritePin>

		/* <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><> */
		while(NX7_CCU_State == CCU_DEF)
 800883c:	e080      	b.n	8008940 <NX7_CCU_Infinite_Loop+0x358>
		{
			NX7_LCD_State_Init_SEG(CCU_DEF);
 800883e:	2002      	movs	r0, #2
 8008840:	f000 fe2a 	bl	8009498 <NX7_LCD_State_Init_SEG>

			NX7_Intake_MA_Handler(Intake_Fresh);
 8008844:	2000      	movs	r0, #0
 8008846:	f000 fb37 	bl	8008eb8 <NX7_Intake_MA_Handler>
			NX7_Mode_MA_Handler(Mode_Def);
 800884a:	2004      	movs	r0, #4
 800884c:	f002 fa7c 	bl	800ad48 <NX7_Mode_MA_Handler>
			NX7_Airmix_MA_Handler(NX7_Airmix_State);
 8008850:	4b22      	ldr	r3, [pc, #136]	; (80088dc <NX7_CCU_Infinite_Loop+0x2f4>)
 8008852:	781b      	ldrb	r3, [r3, #0]
 8008854:	4618      	mov	r0, r3
 8008856:	f7fe fdbb 	bl	80073d0 <NX7_Airmix_MA_Handler>
			//NX7_Blower_Handler(NX7_Blower_State);	//delete
			NX7_AC_Handler(AC_ON);
 800885a:	2001      	movs	r0, #1
 800885c:	f7fe fb34 	bl	8006ec8 <NX7_AC_Handler>
			NX7_R_DEF_Handler(NX7_R_DEF_State);
 8008860:	4b0d      	ldr	r3, [pc, #52]	; (8008898 <NX7_CCU_Infinite_Loop+0x2b0>)
 8008862:	781b      	ldrb	r3, [r3, #0]
 8008864:	4618      	mov	r0, r3
 8008866:	f004 fc21 	bl	800d0ac <NX7_R_DEF_Handler>

			NX7_AUTO_Error_State_Handler();
 800886a:	f7ff fe7b 	bl	8008564 <NX7_AUTO_Error_State_Handler>

			switch (NX7_AUTO_Error_State)
 800886e:	4b14      	ldr	r3, [pc, #80]	; (80088c0 <NX7_CCU_Infinite_Loop+0x2d8>)
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d002      	beq.n	800887c <NX7_CCU_Infinite_Loop+0x294>
 8008876:	2b01      	cmp	r3, #1
 8008878:	d004      	beq.n	8008884 <NX7_CCU_Infinite_Loop+0x29c>
 800887a:	e045      	b.n	8008908 <NX7_CCU_Infinite_Loop+0x320>
			{
			case AUTO_Error_OFF:
			{
				NX7_LCD_AUTO_SEG(SEG_OFF);
 800887c:	2000      	movs	r0, #0
 800887e:	f000 fc4c 	bl	800911a <NX7_LCD_AUTO_SEG>
				break;
 8008882:	e041      	b.n	8008908 <NX7_CCU_Infinite_Loop+0x320>
			}
			case AUTO_Error_ON:
			{
				if(NX7_AUTO_Blink_State == AUTO_Blink_ON)
 8008884:	4b1a      	ldr	r3, [pc, #104]	; (80088f0 <NX7_CCU_Infinite_Loop+0x308>)
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	2b01      	cmp	r3, #1
 800888a:	d139      	bne.n	8008900 <NX7_CCU_Infinite_Loop+0x318>
				{
					NX7_LCD_AUTO_SEG(SEG_ON);
 800888c:	2001      	movs	r0, #1
 800888e:	f000 fc44 	bl	800911a <NX7_LCD_AUTO_SEG>
				}
				else
				{
					NX7_LCD_AUTO_SEG(SEG_OFF);
				}
				break;
 8008892:	e038      	b.n	8008906 <NX7_CCU_Infinite_Loop+0x31e>
 8008894:	2000020a 	.word	0x2000020a
 8008898:	20000211 	.word	0x20000211
 800889c:	20000212 	.word	0x20000212
 80088a0:	20000213 	.word	0x20000213
 80088a4:	20000214 	.word	0x20000214
 80088a8:	2000000d 	.word	0x2000000d
 80088ac:	20000215 	.word	0x20000215
 80088b0:	20000216 	.word	0x20000216
 80088b4:	20000217 	.word	0x20000217
 80088b8:	20000218 	.word	0x20000218
 80088bc:	20000219 	.word	0x20000219
 80088c0:	2000021a 	.word	0x2000021a
 80088c4:	20000590 	.word	0x20000590
 80088c8:	2000021c 	.word	0x2000021c
 80088cc:	200004e4 	.word	0x200004e4
 80088d0:	20000220 	.word	0x20000220
 80088d4:	2000020b 	.word	0x2000020b
 80088d8:	2000020c 	.word	0x2000020c
 80088dc:	2000020d 	.word	0x2000020d
 80088e0:	200005a8 	.word	0x200005a8
 80088e4:	2000000a 	.word	0x2000000a
 80088e8:	2000000b 	.word	0x2000000b
 80088ec:	2000000c 	.word	0x2000000c
 80088f0:	2000021b 	.word	0x2000021b
 80088f4:	2000020e 	.word	0x2000020e
 80088f8:	20000010 	.word	0x20000010
 80088fc:	40011000 	.word	0x40011000
					NX7_LCD_AUTO_SEG(SEG_OFF);
 8008900:	2000      	movs	r0, #0
 8008902:	f000 fc0a 	bl	800911a <NX7_LCD_AUTO_SEG>
				break;
 8008906:	bf00      	nop
			}
			}

			NX7_LCD_Intake_Handler(Intake_Fresh);
 8008908:	2000      	movs	r0, #0
 800890a:	f000 fe47 	bl	800959c <NX7_LCD_Intake_Handler>
			NX7_LCD_Blower_Handler(Blower_L8);
 800890e:	2008      	movs	r0, #8
 8008910:	f000 fede 	bl	80096d0 <NX7_LCD_Blower_Handler>
			NX7_LCD_AC_Handler(AC_ON);
 8008914:	2001      	movs	r0, #1
 8008916:	f000 fe0f 	bl	8009538 <NX7_LCD_AC_Handler>
			NX7_LCD_R_DEF_Handler(NX7_R_DEF_State);
 800891a:	4b0f      	ldr	r3, [pc, #60]	; (8008958 <NX7_CCU_Infinite_Loop+0x370>)
 800891c:	781b      	ldrb	r3, [r3, #0]
 800891e:	4618      	mov	r0, r3
 8008920:	f000 fe23 	bl	800956a <NX7_LCD_R_DEF_Handler>
			NX7_LCD_Out_Temp_Handler(NX7_CCU_Sensor.Ambient_Sensor);
 8008924:	4b0d      	ldr	r3, [pc, #52]	; (800895c <NX7_CCU_Infinite_Loop+0x374>)
 8008926:	68db      	ldr	r3, [r3, #12]
 8008928:	4618      	mov	r0, r3
 800892a:	f7f8 fc47 	bl	80011bc <__aeabi_f2iz>
 800892e:	4603      	mov	r3, r0
 8008930:	4618      	mov	r0, r3
 8008932:	f002 f8db 	bl	800aaec <NX7_LCD_Out_Temp_Handler>
			NX7_LCD_Set_Point_Handler(NX7_Set_Point);
 8008936:	4b0a      	ldr	r3, [pc, #40]	; (8008960 <NX7_CCU_Infinite_Loop+0x378>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4618      	mov	r0, r3
 800893c:	f001 fd3c 	bl	800a3b8 <NX7_LCD_Set_Point_Handler>
		while(NX7_CCU_State == CCU_DEF)
 8008940:	4b08      	ldr	r3, [pc, #32]	; (8008964 <NX7_CCU_Infinite_Loop+0x37c>)
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	2b02      	cmp	r3, #2
 8008946:	f43f af7a 	beq.w	800883e <NX7_CCU_Infinite_Loop+0x256>
		}
		/* <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><> */

		DEF_LED_OFF;
 800894a:	2200      	movs	r2, #0
 800894c:	2140      	movs	r1, #64	; 0x40
 800894e:	4806      	ldr	r0, [pc, #24]	; (8008968 <NX7_CCU_Infinite_Loop+0x380>)
 8008950:	f7fb f8ad 	bl	8003aae <HAL_GPIO_WritePin>
		if(NX7_CCU_State == CCU_IGN_OFF)
 8008954:	e64a      	b.n	80085ec <NX7_CCU_Infinite_Loop+0x4>
 8008956:	bf00      	nop
 8008958:	20000211 	.word	0x20000211
 800895c:	200005a8 	.word	0x200005a8
 8008960:	20000010 	.word	0x20000010
 8008964:	2000020a 	.word	0x2000020a
 8008968:	40011000 	.word	0x40011000

0800896c <NX7_Blower_Init>:
extern	DAC_HandleTypeDef	hdac;

/* Functions body *************************************************************/
/* NX7_Blower_Init -----------------------------------------------------------*/
void NX7_Blower_Init(void)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	af00      	add	r7, sp, #0
	dacVal = 0;
 8008970:	4b07      	ldr	r3, [pc, #28]	; (8008990 <NX7_Blower_Init+0x24>)
 8008972:	2200      	movs	r2, #0
 8008974:	601a      	str	r2, [r3, #0]
	HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8008976:	2110      	movs	r1, #16
 8008978:	4806      	ldr	r0, [pc, #24]	; (8008994 <NX7_Blower_Init+0x28>)
 800897a:	f7fa fbe0 	bl	800313e <HAL_DAC_Start>
	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dacVal);
 800897e:	4b04      	ldr	r3, [pc, #16]	; (8008990 <NX7_Blower_Init+0x24>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2200      	movs	r2, #0
 8008984:	2110      	movs	r1, #16
 8008986:	4803      	ldr	r0, [pc, #12]	; (8008994 <NX7_Blower_Init+0x28>)
 8008988:	f7fa fc84 	bl	8003294 <HAL_DAC_SetValue>
}
 800898c:	bf00      	nop
 800898e:	bd80      	pop	{r7, pc}
 8008990:	20000598 	.word	0x20000598
 8008994:	200003a4 	.word	0x200003a4

08008998 <NX7_Blower_OFF>:

/* NX7_Blower_OFF ------------------------------------------------------------*/
void NX7_Blower_OFF(void)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	af00      	add	r7, sp, #0
	if(dacVal > 3000)		{dacVal = 3000;}
 800899c:	4b12      	ldr	r3, [pc, #72]	; (80089e8 <NX7_Blower_OFF+0x50>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80089a4:	4293      	cmp	r3, r2
 80089a6:	dd04      	ble.n	80089b2 <NX7_Blower_OFF+0x1a>
 80089a8:	4b0f      	ldr	r3, [pc, #60]	; (80089e8 <NX7_Blower_OFF+0x50>)
 80089aa:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80089ae:	601a      	str	r2, [r3, #0]
 80089b0:	e004      	b.n	80089bc <NX7_Blower_OFF+0x24>
	else					{dacVal -= 200;}
 80089b2:	4b0d      	ldr	r3, [pc, #52]	; (80089e8 <NX7_Blower_OFF+0x50>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	3bc8      	subs	r3, #200	; 0xc8
 80089b8:	4a0b      	ldr	r2, [pc, #44]	; (80089e8 <NX7_Blower_OFF+0x50>)
 80089ba:	6013      	str	r3, [r2, #0]

	if(dacVal < 0)			{dacVal = 0;}
 80089bc:	4b0a      	ldr	r3, [pc, #40]	; (80089e8 <NX7_Blower_OFF+0x50>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	da02      	bge.n	80089ca <NX7_Blower_OFF+0x32>
 80089c4:	4b08      	ldr	r3, [pc, #32]	; (80089e8 <NX7_Blower_OFF+0x50>)
 80089c6:	2200      	movs	r2, #0
 80089c8:	601a      	str	r2, [r3, #0]

	Blower_Relay_OFF;
 80089ca:	2200      	movs	r2, #0
 80089cc:	2180      	movs	r1, #128	; 0x80
 80089ce:	4807      	ldr	r0, [pc, #28]	; (80089ec <NX7_Blower_OFF+0x54>)
 80089d0:	f7fb f86d 	bl	8003aae <HAL_GPIO_WritePin>

	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dacVal);
 80089d4:	4b04      	ldr	r3, [pc, #16]	; (80089e8 <NX7_Blower_OFF+0x50>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	2200      	movs	r2, #0
 80089da:	2110      	movs	r1, #16
 80089dc:	4804      	ldr	r0, [pc, #16]	; (80089f0 <NX7_Blower_OFF+0x58>)
 80089de:	f7fa fc59 	bl	8003294 <HAL_DAC_SetValue>
}
 80089e2:	bf00      	nop
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	bf00      	nop
 80089e8:	20000598 	.word	0x20000598
 80089ec:	40010c00 	.word	0x40010c00
 80089f0:	200003a4 	.word	0x200003a4

080089f4 <NX7_Blower_Up>:

/* NX7_Blower_Up -------------------------------------------------------------*/
void NX7_Blower_Up(void)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	af00      	add	r7, sp, #0
	if(dacVal < 500)		{dacVal = 500;}
 80089f8:	4b18      	ldr	r3, [pc, #96]	; (8008a5c <NX7_Blower_Up+0x68>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008a00:	da04      	bge.n	8008a0c <NX7_Blower_Up+0x18>
 8008a02:	4b16      	ldr	r3, [pc, #88]	; (8008a5c <NX7_Blower_Up+0x68>)
 8008a04:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8008a08:	601a      	str	r2, [r3, #0]
 8008a0a:	e004      	b.n	8008a16 <NX7_Blower_Up+0x22>
	else					{dacVal += 50;}
 8008a0c:	4b13      	ldr	r3, [pc, #76]	; (8008a5c <NX7_Blower_Up+0x68>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	3332      	adds	r3, #50	; 0x32
 8008a12:	4a12      	ldr	r2, [pc, #72]	; (8008a5c <NX7_Blower_Up+0x68>)
 8008a14:	6013      	str	r3, [r2, #0]

	if(dacVal > 4000)		{dacVal = 4000;}
 8008a16:	4b11      	ldr	r3, [pc, #68]	; (8008a5c <NX7_Blower_Up+0x68>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8008a1e:	dd03      	ble.n	8008a28 <NX7_Blower_Up+0x34>
 8008a20:	4b0e      	ldr	r3, [pc, #56]	; (8008a5c <NX7_Blower_Up+0x68>)
 8008a22:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8008a26:	601a      	str	r2, [r3, #0]

	if(dacVal == 4000)		{Blower_Relay_ON;}
 8008a28:	4b0c      	ldr	r3, [pc, #48]	; (8008a5c <NX7_Blower_Up+0x68>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8008a30:	d105      	bne.n	8008a3e <NX7_Blower_Up+0x4a>
 8008a32:	2201      	movs	r2, #1
 8008a34:	2180      	movs	r1, #128	; 0x80
 8008a36:	480a      	ldr	r0, [pc, #40]	; (8008a60 <NX7_Blower_Up+0x6c>)
 8008a38:	f7fb f839 	bl	8003aae <HAL_GPIO_WritePin>
 8008a3c:	e004      	b.n	8008a48 <NX7_Blower_Up+0x54>
	else					{Blower_Relay_OFF;}
 8008a3e:	2200      	movs	r2, #0
 8008a40:	2180      	movs	r1, #128	; 0x80
 8008a42:	4807      	ldr	r0, [pc, #28]	; (8008a60 <NX7_Blower_Up+0x6c>)
 8008a44:	f7fb f833 	bl	8003aae <HAL_GPIO_WritePin>

	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dacVal);
 8008a48:	4b04      	ldr	r3, [pc, #16]	; (8008a5c <NX7_Blower_Up+0x68>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	2110      	movs	r1, #16
 8008a50:	4804      	ldr	r0, [pc, #16]	; (8008a64 <NX7_Blower_Up+0x70>)
 8008a52:	f7fa fc1f 	bl	8003294 <HAL_DAC_SetValue>
}
 8008a56:	bf00      	nop
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	20000598 	.word	0x20000598
 8008a60:	40010c00 	.word	0x40010c00
 8008a64:	200003a4 	.word	0x200003a4

08008a68 <NX7_Blower_Down>:

/* NX7_Blower_Down -----------------------------------------------------------*/
void NX7_Blower_Down(void)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	af00      	add	r7, sp, #0
	if(dacVal > 3000)		{dacVal = 3000;}
 8008a6c:	4b17      	ldr	r3, [pc, #92]	; (8008acc <NX7_Blower_Down+0x64>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8008a74:	4293      	cmp	r3, r2
 8008a76:	dd04      	ble.n	8008a82 <NX7_Blower_Down+0x1a>
 8008a78:	4b14      	ldr	r3, [pc, #80]	; (8008acc <NX7_Blower_Down+0x64>)
 8008a7a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8008a7e:	601a      	str	r2, [r3, #0]
 8008a80:	e004      	b.n	8008a8c <NX7_Blower_Down+0x24>
	else					{dacVal -= 50;}
 8008a82:	4b12      	ldr	r3, [pc, #72]	; (8008acc <NX7_Blower_Down+0x64>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	3b32      	subs	r3, #50	; 0x32
 8008a88:	4a10      	ldr	r2, [pc, #64]	; (8008acc <NX7_Blower_Down+0x64>)
 8008a8a:	6013      	str	r3, [r2, #0]

	if(dacVal < 0)			{dacVal = 0;}
 8008a8c:	4b0f      	ldr	r3, [pc, #60]	; (8008acc <NX7_Blower_Down+0x64>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	da02      	bge.n	8008a9a <NX7_Blower_Down+0x32>
 8008a94:	4b0d      	ldr	r3, [pc, #52]	; (8008acc <NX7_Blower_Down+0x64>)
 8008a96:	2200      	movs	r2, #0
 8008a98:	601a      	str	r2, [r3, #0]

	if(dacVal == 4000)		{Blower_Relay_ON;}
 8008a9a:	4b0c      	ldr	r3, [pc, #48]	; (8008acc <NX7_Blower_Down+0x64>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8008aa2:	d105      	bne.n	8008ab0 <NX7_Blower_Down+0x48>
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	2180      	movs	r1, #128	; 0x80
 8008aa8:	4809      	ldr	r0, [pc, #36]	; (8008ad0 <NX7_Blower_Down+0x68>)
 8008aaa:	f7fb f800 	bl	8003aae <HAL_GPIO_WritePin>
 8008aae:	e004      	b.n	8008aba <NX7_Blower_Down+0x52>
	else					{Blower_Relay_OFF;}
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	2180      	movs	r1, #128	; 0x80
 8008ab4:	4806      	ldr	r0, [pc, #24]	; (8008ad0 <NX7_Blower_Down+0x68>)
 8008ab6:	f7fa fffa 	bl	8003aae <HAL_GPIO_WritePin>

	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, dacVal);
 8008aba:	4b04      	ldr	r3, [pc, #16]	; (8008acc <NX7_Blower_Down+0x64>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	2110      	movs	r1, #16
 8008ac2:	4804      	ldr	r0, [pc, #16]	; (8008ad4 <NX7_Blower_Down+0x6c>)
 8008ac4:	f7fa fbe6 	bl	8003294 <HAL_DAC_SetValue>
}
 8008ac8:	bf00      	nop
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	20000598 	.word	0x20000598
 8008ad0:	40010c00 	.word	0x40010c00
 8008ad4:	200003a4 	.word	0x200003a4

08008ad8 <NX7_Blower_Handler>:

/* NX7_Blower_Handler --------------------------------------------------------*/
void NX7_Blower_Handler(Blower_State state)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	4603      	mov	r3, r0
 8008ae0:	71fb      	strb	r3, [r7, #7]
	switch (state)
 8008ae2:	79fb      	ldrb	r3, [r7, #7]
 8008ae4:	2b08      	cmp	r3, #8
 8008ae6:	f200 80b3 	bhi.w	8008c50 <NX7_Blower_Handler+0x178>
 8008aea:	a201      	add	r2, pc, #4	; (adr r2, 8008af0 <NX7_Blower_Handler+0x18>)
 8008aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af0:	08008b15 	.word	0x08008b15
 8008af4:	08008b1b 	.word	0x08008b1b
 8008af8:	08008b3f 	.word	0x08008b3f
 8008afc:	08008b63 	.word	0x08008b63
 8008b00:	08008b83 	.word	0x08008b83
 8008b04:	08008ba7 	.word	0x08008ba7
 8008b08:	08008bcb 	.word	0x08008bcb
 8008b0c:	08008bef 	.word	0x08008bef
 8008b10:	08008c13 	.word	0x08008c13
	{
		case Blower_OFF:
		{
			NX7_Blower_OFF();
 8008b14:	f7ff ff40 	bl	8008998 <NX7_Blower_OFF>
			break;
 8008b18:	e09a      	b.n	8008c50 <NX7_Blower_Handler+0x178>
		}
		case Blower_L1:
		{
			if(dacVal < NX7_Blower_DAC_L1)
 8008b1a:	4b4f      	ldr	r3, [pc, #316]	; (8008c58 <NX7_Blower_Handler+0x180>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f240 424b 	movw	r2, #1099	; 0x44b
 8008b22:	4293      	cmp	r3, r2
 8008b24:	dc02      	bgt.n	8008b2c <NX7_Blower_Handler+0x54>
				NX7_Blower_Up();
 8008b26:	f7ff ff65 	bl	80089f4 <NX7_Blower_Up>
			else if(dacVal > NX7_Blower_DAC_L1)
				NX7_Blower_Down();
			break;
 8008b2a:	e082      	b.n	8008c32 <NX7_Blower_Handler+0x15a>
			else if(dacVal > NX7_Blower_DAC_L1)
 8008b2c:	4b4a      	ldr	r3, [pc, #296]	; (8008c58 <NX7_Blower_Handler+0x180>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f240 424c 	movw	r2, #1100	; 0x44c
 8008b34:	4293      	cmp	r3, r2
 8008b36:	dd7c      	ble.n	8008c32 <NX7_Blower_Handler+0x15a>
				NX7_Blower_Down();
 8008b38:	f7ff ff96 	bl	8008a68 <NX7_Blower_Down>
			break;
 8008b3c:	e079      	b.n	8008c32 <NX7_Blower_Handler+0x15a>
		}
		case Blower_L2:
		{
			if(dacVal < NX7_Blower_DAC_L2)
 8008b3e:	4b46      	ldr	r3, [pc, #280]	; (8008c58 <NX7_Blower_Handler+0x180>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f240 5245 	movw	r2, #1349	; 0x545
 8008b46:	4293      	cmp	r3, r2
 8008b48:	dc02      	bgt.n	8008b50 <NX7_Blower_Handler+0x78>
				NX7_Blower_Up();
 8008b4a:	f7ff ff53 	bl	80089f4 <NX7_Blower_Up>
			else if(dacVal > NX7_Blower_DAC_L2)
				NX7_Blower_Down();
			break;
 8008b4e:	e072      	b.n	8008c36 <NX7_Blower_Handler+0x15e>
			else if(dacVal > NX7_Blower_DAC_L2)
 8008b50:	4b41      	ldr	r3, [pc, #260]	; (8008c58 <NX7_Blower_Handler+0x180>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f240 5246 	movw	r2, #1350	; 0x546
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	dd6c      	ble.n	8008c36 <NX7_Blower_Handler+0x15e>
				NX7_Blower_Down();
 8008b5c:	f7ff ff84 	bl	8008a68 <NX7_Blower_Down>
			break;
 8008b60:	e069      	b.n	8008c36 <NX7_Blower_Handler+0x15e>
		}
		case Blower_L3:
		{
			if(dacVal < NX7_Blower_DAC_L3)
 8008b62:	4b3d      	ldr	r3, [pc, #244]	; (8008c58 <NX7_Blower_Handler+0x180>)
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008b6a:	da02      	bge.n	8008b72 <NX7_Blower_Handler+0x9a>
				NX7_Blower_Up();
 8008b6c:	f7ff ff42 	bl	80089f4 <NX7_Blower_Up>
			else if(dacVal > NX7_Blower_DAC_L3)
				NX7_Blower_Down();
			break;
 8008b70:	e063      	b.n	8008c3a <NX7_Blower_Handler+0x162>
			else if(dacVal > NX7_Blower_DAC_L3)
 8008b72:	4b39      	ldr	r3, [pc, #228]	; (8008c58 <NX7_Blower_Handler+0x180>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008b7a:	dd5e      	ble.n	8008c3a <NX7_Blower_Handler+0x162>
				NX7_Blower_Down();
 8008b7c:	f7ff ff74 	bl	8008a68 <NX7_Blower_Down>
			break;
 8008b80:	e05b      	b.n	8008c3a <NX7_Blower_Handler+0x162>
		}
		case Blower_L4:
		{
			if(dacVal < NX7_Blower_DAC_L4)
 8008b82:	4b35      	ldr	r3, [pc, #212]	; (8008c58 <NX7_Blower_Handler+0x180>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f240 7239 	movw	r2, #1849	; 0x739
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	dc02      	bgt.n	8008b94 <NX7_Blower_Handler+0xbc>
				NX7_Blower_Up();
 8008b8e:	f7ff ff31 	bl	80089f4 <NX7_Blower_Up>
			else if(dacVal > NX7_Blower_DAC_L4)
				NX7_Blower_Down();
			break;
 8008b92:	e054      	b.n	8008c3e <NX7_Blower_Handler+0x166>
			else if(dacVal > NX7_Blower_DAC_L4)
 8008b94:	4b30      	ldr	r3, [pc, #192]	; (8008c58 <NX7_Blower_Handler+0x180>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f240 723a 	movw	r2, #1850	; 0x73a
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	dd4e      	ble.n	8008c3e <NX7_Blower_Handler+0x166>
				NX7_Blower_Down();
 8008ba0:	f7ff ff62 	bl	8008a68 <NX7_Blower_Down>
			break;
 8008ba4:	e04b      	b.n	8008c3e <NX7_Blower_Handler+0x166>
		}
		case Blower_L5:
		{
			if(dacVal < NX7_Blower_DAC_L5)
 8008ba6:	4b2c      	ldr	r3, [pc, #176]	; (8008c58 <NX7_Blower_Handler+0x180>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f640 0233 	movw	r2, #2099	; 0x833
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	dc02      	bgt.n	8008bb8 <NX7_Blower_Handler+0xe0>
				NX7_Blower_Up();
 8008bb2:	f7ff ff1f 	bl	80089f4 <NX7_Blower_Up>
			else if(dacVal > NX7_Blower_DAC_L5)
				NX7_Blower_Down();
			break;
 8008bb6:	e044      	b.n	8008c42 <NX7_Blower_Handler+0x16a>
			else if(dacVal > NX7_Blower_DAC_L5)
 8008bb8:	4b27      	ldr	r3, [pc, #156]	; (8008c58 <NX7_Blower_Handler+0x180>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f640 0234 	movw	r2, #2100	; 0x834
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	dd3e      	ble.n	8008c42 <NX7_Blower_Handler+0x16a>
				NX7_Blower_Down();
 8008bc4:	f7ff ff50 	bl	8008a68 <NX7_Blower_Down>
			break;
 8008bc8:	e03b      	b.n	8008c42 <NX7_Blower_Handler+0x16a>
		}
		case Blower_L6:
		{
			if(dacVal < NX7_Blower_DAC_L6)
 8008bca:	4b23      	ldr	r3, [pc, #140]	; (8008c58 <NX7_Blower_Handler+0x180>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f640 122d 	movw	r2, #2349	; 0x92d
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	dc02      	bgt.n	8008bdc <NX7_Blower_Handler+0x104>
				NX7_Blower_Up();
 8008bd6:	f7ff ff0d 	bl	80089f4 <NX7_Blower_Up>
			else if(dacVal > NX7_Blower_DAC_L6)
				NX7_Blower_Down();
			break;
 8008bda:	e034      	b.n	8008c46 <NX7_Blower_Handler+0x16e>
			else if(dacVal > NX7_Blower_DAC_L6)
 8008bdc:	4b1e      	ldr	r3, [pc, #120]	; (8008c58 <NX7_Blower_Handler+0x180>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	f640 122e 	movw	r2, #2350	; 0x92e
 8008be4:	4293      	cmp	r3, r2
 8008be6:	dd2e      	ble.n	8008c46 <NX7_Blower_Handler+0x16e>
				NX7_Blower_Down();
 8008be8:	f7ff ff3e 	bl	8008a68 <NX7_Blower_Down>
			break;
 8008bec:	e02b      	b.n	8008c46 <NX7_Blower_Handler+0x16e>
		}
		case Blower_L7:
		{
			if(dacVal < NX7_Blower_DAC_L7)
 8008bee:	4b1a      	ldr	r3, [pc, #104]	; (8008c58 <NX7_Blower_Handler+0x180>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f640 2227 	movw	r2, #2599	; 0xa27
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	dc02      	bgt.n	8008c00 <NX7_Blower_Handler+0x128>
				NX7_Blower_Up();
 8008bfa:	f7ff fefb 	bl	80089f4 <NX7_Blower_Up>
			else if(dacVal > NX7_Blower_DAC_L7)
				NX7_Blower_Down();
			break;
 8008bfe:	e024      	b.n	8008c4a <NX7_Blower_Handler+0x172>
			else if(dacVal > NX7_Blower_DAC_L7)
 8008c00:	4b15      	ldr	r3, [pc, #84]	; (8008c58 <NX7_Blower_Handler+0x180>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f640 2228 	movw	r2, #2600	; 0xa28
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	dd1e      	ble.n	8008c4a <NX7_Blower_Handler+0x172>
				NX7_Blower_Down();
 8008c0c:	f7ff ff2c 	bl	8008a68 <NX7_Blower_Down>
			break;
 8008c10:	e01b      	b.n	8008c4a <NX7_Blower_Handler+0x172>
		}
		case Blower_L8:
		{
			if(dacVal < NX7_Blower_DAC_L8)
 8008c12:	4b11      	ldr	r3, [pc, #68]	; (8008c58 <NX7_Blower_Handler+0x180>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8008c1a:	da02      	bge.n	8008c22 <NX7_Blower_Handler+0x14a>
				NX7_Blower_Up();
 8008c1c:	f7ff feea 	bl	80089f4 <NX7_Blower_Up>
			else if(dacVal > NX7_Blower_DAC_L8)
				NX7_Blower_Down();
			break;
 8008c20:	e015      	b.n	8008c4e <NX7_Blower_Handler+0x176>
			else if(dacVal > NX7_Blower_DAC_L8)
 8008c22:	4b0d      	ldr	r3, [pc, #52]	; (8008c58 <NX7_Blower_Handler+0x180>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8008c2a:	dd10      	ble.n	8008c4e <NX7_Blower_Handler+0x176>
				NX7_Blower_Down();
 8008c2c:	f7ff ff1c 	bl	8008a68 <NX7_Blower_Down>
			break;
 8008c30:	e00d      	b.n	8008c4e <NX7_Blower_Handler+0x176>
			break;
 8008c32:	bf00      	nop
 8008c34:	e00c      	b.n	8008c50 <NX7_Blower_Handler+0x178>
			break;
 8008c36:	bf00      	nop
 8008c38:	e00a      	b.n	8008c50 <NX7_Blower_Handler+0x178>
			break;
 8008c3a:	bf00      	nop
 8008c3c:	e008      	b.n	8008c50 <NX7_Blower_Handler+0x178>
			break;
 8008c3e:	bf00      	nop
 8008c40:	e006      	b.n	8008c50 <NX7_Blower_Handler+0x178>
			break;
 8008c42:	bf00      	nop
 8008c44:	e004      	b.n	8008c50 <NX7_Blower_Handler+0x178>
			break;
 8008c46:	bf00      	nop
 8008c48:	e002      	b.n	8008c50 <NX7_Blower_Handler+0x178>
			break;
 8008c4a:	bf00      	nop
 8008c4c:	e000      	b.n	8008c50 <NX7_Blower_Handler+0x178>
			break;
 8008c4e:	bf00      	nop
		}		
	}
}
 8008c50:	bf00      	nop
 8008c52:	3708      	adds	r7, #8
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	20000598 	.word	0x20000598

08008c5c <HAL_GPIO_EXTI_Callback>:
/* Private variables **********************************************************/

/* Functions body *************************************************************/
/* Ext. ISR Handler ----------------------------------------------------------*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	4603      	mov	r3, r0
 8008c64:	80fb      	strh	r3, [r7, #6]
/* Illumination Handler ------------------------------------------------------*/
	if((GPIO_Pin==Illumination_Pin)&&(Illumination_State==GPIO_PIN_RESET))
 8008c66:	88fb      	ldrh	r3, [r7, #6]
 8008c68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c6c:	d10b      	bne.n	8008c86 <HAL_GPIO_EXTI_Callback+0x2a>
 8008c6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008c72:	4878      	ldr	r0, [pc, #480]	; (8008e54 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8008c74:	f7fa ff04 	bl	8003a80 <HAL_GPIO_ReadPin>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d103      	bne.n	8008c86 <HAL_GPIO_EXTI_Callback+0x2a>
	{
		NX7_LCD_Backlight(NX7_LCD_DayLight_PWM);
 8008c7e:	2064      	movs	r0, #100	; 0x64
 8008c80:	f000 f9ea 	bl	8009058 <NX7_LCD_Backlight>
 8008c84:	e00e      	b.n	8008ca4 <HAL_GPIO_EXTI_Callback+0x48>
	}
	else if((GPIO_Pin==Illumination_Pin)&&(Illumination_State==GPIO_PIN_SET))
 8008c86:	88fb      	ldrh	r3, [r7, #6]
 8008c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c8c:	d10a      	bne.n	8008ca4 <HAL_GPIO_EXTI_Callback+0x48>
 8008c8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008c92:	4870      	ldr	r0, [pc, #448]	; (8008e54 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8008c94:	f7fa fef4 	bl	8003a80 <HAL_GPIO_ReadPin>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	2b01      	cmp	r3, #1
 8008c9c:	d102      	bne.n	8008ca4 <HAL_GPIO_EXTI_Callback+0x48>
	{
		NX7_LCD_Backlight(NX7_LCD_NightLight_PWM);
 8008c9e:	203c      	movs	r0, #60	; 0x3c
 8008ca0:	f000 f9da 	bl	8009058 <NX7_LCD_Backlight>
	}
/* Airmix_Up Switch Handler --------------------------------------------------*/
	if((GPIO_Pin==Airmix_Up_SW_Pin)&&(Airmix_Up_Switch==GPIO_PIN_RESET))
 8008ca4:	88fb      	ldrh	r3, [r7, #6]
 8008ca6:	2b40      	cmp	r3, #64	; 0x40
 8008ca8:	d10d      	bne.n	8008cc6 <HAL_GPIO_EXTI_Callback+0x6a>
 8008caa:	2140      	movs	r1, #64	; 0x40
 8008cac:	486a      	ldr	r0, [pc, #424]	; (8008e58 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8008cae:	f7fa fee7 	bl	8003a80 <HAL_GPIO_ReadPin>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d106      	bne.n	8008cc6 <HAL_GPIO_EXTI_Callback+0x6a>
	{
		NX7_CCU_Switch_Handler(Airmix_Up_SW_Pin);
 8008cb8:	2040      	movs	r0, #64	; 0x40
 8008cba:	f7fe ff89 	bl	8007bd0 <NX7_CCU_Switch_Handler>
		NX7_Delay(Rotary_Debounce);
 8008cbe:	4867      	ldr	r0, [pc, #412]	; (8008e5c <HAL_GPIO_EXTI_Callback+0x200>)
 8008cc0:	f7fe ff46 	bl	8007b50 <NX7_Delay>
 8008cc4:	e00f      	b.n	8008ce6 <HAL_GPIO_EXTI_Callback+0x8a>
	}
/* Airmix_Down Switch Handler ------------------------------------------------*/
	else if((GPIO_Pin==Airmix_Down_SW_Pin)&&(Airmix_Down_Switch==GPIO_PIN_RESET))
 8008cc6:	88fb      	ldrh	r3, [r7, #6]
 8008cc8:	2b80      	cmp	r3, #128	; 0x80
 8008cca:	d10c      	bne.n	8008ce6 <HAL_GPIO_EXTI_Callback+0x8a>
 8008ccc:	2180      	movs	r1, #128	; 0x80
 8008cce:	4862      	ldr	r0, [pc, #392]	; (8008e58 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8008cd0:	f7fa fed6 	bl	8003a80 <HAL_GPIO_ReadPin>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d105      	bne.n	8008ce6 <HAL_GPIO_EXTI_Callback+0x8a>
	{
		NX7_CCU_Switch_Handler(Airmix_Down_SW_Pin);
 8008cda:	2080      	movs	r0, #128	; 0x80
 8008cdc:	f7fe ff78 	bl	8007bd0 <NX7_CCU_Switch_Handler>
		NX7_Delay(Rotary_Debounce);
 8008ce0:	485e      	ldr	r0, [pc, #376]	; (8008e5c <HAL_GPIO_EXTI_Callback+0x200>)
 8008ce2:	f7fe ff35 	bl	8007b50 <NX7_Delay>
	}
/* Blower_Up Switch Handler --------------------------------------------------*/
	if((GPIO_Pin==Blower_Up_SW_Pin)&&(Blower_Up_Switch==GPIO_PIN_RESET))
 8008ce6:	88fb      	ldrh	r3, [r7, #6]
 8008ce8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cec:	d10f      	bne.n	8008d0e <HAL_GPIO_EXTI_Callback+0xb2>
 8008cee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008cf2:	4859      	ldr	r0, [pc, #356]	; (8008e58 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8008cf4:	f7fa fec4 	bl	8003a80 <HAL_GPIO_ReadPin>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d107      	bne.n	8008d0e <HAL_GPIO_EXTI_Callback+0xb2>
	{
		NX7_CCU_Switch_Handler(Blower_Up_SW_Pin);
 8008cfe:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8008d02:	f7fe ff65 	bl	8007bd0 <NX7_CCU_Switch_Handler>
		NX7_Delay(Rotary_Debounce);
 8008d06:	4855      	ldr	r0, [pc, #340]	; (8008e5c <HAL_GPIO_EXTI_Callback+0x200>)
 8008d08:	f7fe ff22 	bl	8007b50 <NX7_Delay>
 8008d0c:	e012      	b.n	8008d34 <HAL_GPIO_EXTI_Callback+0xd8>
	}
/* Blower_Down Switch Handler ------------------------------------------------*/
	else if((GPIO_Pin==Blower_Down_SW_Pin)&&(Blower_Down_Switch==GPIO_PIN_RESET))
 8008d0e:	88fb      	ldrh	r3, [r7, #6]
 8008d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d14:	d10e      	bne.n	8008d34 <HAL_GPIO_EXTI_Callback+0xd8>
 8008d16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008d1a:	4851      	ldr	r0, [pc, #324]	; (8008e60 <HAL_GPIO_EXTI_Callback+0x204>)
 8008d1c:	f7fa feb0 	bl	8003a80 <HAL_GPIO_ReadPin>
 8008d20:	4603      	mov	r3, r0
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d106      	bne.n	8008d34 <HAL_GPIO_EXTI_Callback+0xd8>
	{
		NX7_CCU_Switch_Handler(Blower_Down_SW_Pin);
 8008d26:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008d2a:	f7fe ff51 	bl	8007bd0 <NX7_CCU_Switch_Handler>
		NX7_Delay(Rotary_Debounce);
 8008d2e:	484b      	ldr	r0, [pc, #300]	; (8008e5c <HAL_GPIO_EXTI_Callback+0x200>)
 8008d30:	f7fe ff0e 	bl	8007b50 <NX7_Delay>
	}
/* POWER Switch Handler ------------------------------------------------------*/
	if((GPIO_Pin==POWER_SW_Pin)&&(POWER_Switch==GPIO_PIN_RESET))
 8008d34:	88fb      	ldrh	r3, [r7, #6]
 8008d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d3a:	d10e      	bne.n	8008d5a <HAL_GPIO_EXTI_Callback+0xfe>
 8008d3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008d40:	4847      	ldr	r0, [pc, #284]	; (8008e60 <HAL_GPIO_EXTI_Callback+0x204>)
 8008d42:	f7fa fe9d 	bl	8003a80 <HAL_GPIO_ReadPin>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d106      	bne.n	8008d5a <HAL_GPIO_EXTI_Callback+0xfe>
	{
		NX7_CCU_Switch_Handler(POWER_SW_Pin);
 8008d4c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008d50:	f7fe ff3e 	bl	8007bd0 <NX7_CCU_Switch_Handler>
		NX7_Delay(Button_Debounce);
 8008d54:	4843      	ldr	r0, [pc, #268]	; (8008e64 <HAL_GPIO_EXTI_Callback+0x208>)
 8008d56:	f7fe fefb 	bl	8007b50 <NX7_Delay>
	}
/* AUTO Switch Handler -------------------------------------------------------*/
	if((GPIO_Pin==AUTO_SW_Pin)&&(AUTO_Switch==GPIO_PIN_RESET))
 8008d5a:	88fb      	ldrh	r3, [r7, #6]
 8008d5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d60:	d10e      	bne.n	8008d80 <HAL_GPIO_EXTI_Callback+0x124>
 8008d62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008d66:	483b      	ldr	r0, [pc, #236]	; (8008e54 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8008d68:	f7fa fe8a 	bl	8003a80 <HAL_GPIO_ReadPin>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d106      	bne.n	8008d80 <HAL_GPIO_EXTI_Callback+0x124>
	{
		NX7_CCU_Switch_Handler(AUTO_SW_Pin);
 8008d72:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8008d76:	f7fe ff2b 	bl	8007bd0 <NX7_CCU_Switch_Handler>
		NX7_Delay(Button_Debounce);
 8008d7a:	483a      	ldr	r0, [pc, #232]	; (8008e64 <HAL_GPIO_EXTI_Callback+0x208>)
 8008d7c:	f7fe fee8 	bl	8007b50 <NX7_Delay>
	}
	if((GPIO_Pin==AUTO_SW_Pin)&&(AUTO_Switch==GPIO_PIN_SET))
 8008d80:	88fb      	ldrh	r3, [r7, #6]
 8008d82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d86:	d108      	bne.n	8008d9a <HAL_GPIO_EXTI_Callback+0x13e>
 8008d88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008d8c:	4831      	ldr	r0, [pc, #196]	; (8008e54 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8008d8e:	f7fa fe77 	bl	8003a80 <HAL_GPIO_ReadPin>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	d100      	bne.n	8008d9a <HAL_GPIO_EXTI_Callback+0x13e>
	{
		asm("NOP");
 8008d98:	bf00      	nop
	}
/* DEF Switch Handler --------------------------------------------------------*/
	if((GPIO_Pin==DEF_SW_Pin)&&(DEF_Switch==GPIO_PIN_RESET))
 8008d9a:	88fb      	ldrh	r3, [r7, #6]
 8008d9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008da0:	d10e      	bne.n	8008dc0 <HAL_GPIO_EXTI_Callback+0x164>
 8008da2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008da6:	482b      	ldr	r0, [pc, #172]	; (8008e54 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8008da8:	f7fa fe6a 	bl	8003a80 <HAL_GPIO_ReadPin>
 8008dac:	4603      	mov	r3, r0
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d106      	bne.n	8008dc0 <HAL_GPIO_EXTI_Callback+0x164>
	{
		NX7_CCU_Switch_Handler(DEF_SW_Pin);
 8008db2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8008db6:	f7fe ff0b 	bl	8007bd0 <NX7_CCU_Switch_Handler>
		NX7_Delay(Button_Debounce);
 8008dba:	482a      	ldr	r0, [pc, #168]	; (8008e64 <HAL_GPIO_EXTI_Callback+0x208>)
 8008dbc:	f7fe fec8 	bl	8007b50 <NX7_Delay>
	}
/* Intake Switch Handler -----------------------------------------------------*/
	if((GPIO_Pin==Intake_SW_Pin)&&(Intake_Switch==GPIO_PIN_RESET))
 8008dc0:	88fb      	ldrh	r3, [r7, #6]
 8008dc2:	2b02      	cmp	r3, #2
 8008dc4:	d10c      	bne.n	8008de0 <HAL_GPIO_EXTI_Callback+0x184>
 8008dc6:	2102      	movs	r1, #2
 8008dc8:	4822      	ldr	r0, [pc, #136]	; (8008e54 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8008dca:	f7fa fe59 	bl	8003a80 <HAL_GPIO_ReadPin>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d105      	bne.n	8008de0 <HAL_GPIO_EXTI_Callback+0x184>
	{
		NX7_CCU_Switch_Handler(Intake_SW_Pin);
 8008dd4:	2002      	movs	r0, #2
 8008dd6:	f7fe fefb 	bl	8007bd0 <NX7_CCU_Switch_Handler>
		NX7_Delay(Button_Debounce);
 8008dda:	4822      	ldr	r0, [pc, #136]	; (8008e64 <HAL_GPIO_EXTI_Callback+0x208>)
 8008ddc:	f7fe feb8 	bl	8007b50 <NX7_Delay>
	}
/* Mode Switch Handler -------------------------------------------------------*/
	if((GPIO_Pin==Mode_SW_Pin)&&(Mode_Switch==GPIO_PIN_RESET))
 8008de0:	88fb      	ldrh	r3, [r7, #6]
 8008de2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008de6:	d10e      	bne.n	8008e06 <HAL_GPIO_EXTI_Callback+0x1aa>
 8008de8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008dec:	4819      	ldr	r0, [pc, #100]	; (8008e54 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8008dee:	f7fa fe47 	bl	8003a80 <HAL_GPIO_ReadPin>
 8008df2:	4603      	mov	r3, r0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d106      	bne.n	8008e06 <HAL_GPIO_EXTI_Callback+0x1aa>
	{
		NX7_CCU_Switch_Handler(Mode_SW_Pin);
 8008df8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8008dfc:	f7fe fee8 	bl	8007bd0 <NX7_CCU_Switch_Handler>
		NX7_Delay(Button_Debounce);
 8008e00:	4818      	ldr	r0, [pc, #96]	; (8008e64 <HAL_GPIO_EXTI_Callback+0x208>)
 8008e02:	f7fe fea5 	bl	8007b50 <NX7_Delay>
	}
/* A/C Switch Handler --------------------------------------------------------*/
	if((GPIO_Pin==AC_SW_Pin)&&(AC_Switch==GPIO_PIN_RESET))
 8008e06:	88fb      	ldrh	r3, [r7, #6]
 8008e08:	2b20      	cmp	r3, #32
 8008e0a:	d10c      	bne.n	8008e26 <HAL_GPIO_EXTI_Callback+0x1ca>
 8008e0c:	2120      	movs	r1, #32
 8008e0e:	4814      	ldr	r0, [pc, #80]	; (8008e60 <HAL_GPIO_EXTI_Callback+0x204>)
 8008e10:	f7fa fe36 	bl	8003a80 <HAL_GPIO_ReadPin>
 8008e14:	4603      	mov	r3, r0
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d105      	bne.n	8008e26 <HAL_GPIO_EXTI_Callback+0x1ca>
	{
		NX7_CCU_Switch_Handler(AC_SW_Pin);
 8008e1a:	2020      	movs	r0, #32
 8008e1c:	f7fe fed8 	bl	8007bd0 <NX7_CCU_Switch_Handler>
		NX7_Delay(Button_Debounce);
 8008e20:	4810      	ldr	r0, [pc, #64]	; (8008e64 <HAL_GPIO_EXTI_Callback+0x208>)
 8008e22:	f7fe fe95 	bl	8007b50 <NX7_Delay>
	}	
/* R_DEF Switch Handler ------------------------------------------------------*/
	if((GPIO_Pin==R_DEF_SW_Pin)&&(R_DEF_Switch==GPIO_PIN_RESET))
 8008e26:	88fb      	ldrh	r3, [r7, #6]
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d10c      	bne.n	8008e46 <HAL_GPIO_EXTI_Callback+0x1ea>
 8008e2c:	2101      	movs	r1, #1
 8008e2e:	4809      	ldr	r0, [pc, #36]	; (8008e54 <HAL_GPIO_EXTI_Callback+0x1f8>)
 8008e30:	f7fa fe26 	bl	8003a80 <HAL_GPIO_ReadPin>
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d105      	bne.n	8008e46 <HAL_GPIO_EXTI_Callback+0x1ea>
	{
		NX7_CCU_Switch_Handler(R_DEF_SW_Pin);
 8008e3a:	2001      	movs	r0, #1
 8008e3c:	f7fe fec8 	bl	8007bd0 <NX7_CCU_Switch_Handler>
		NX7_Delay(Button_Debounce);
 8008e40:	4808      	ldr	r0, [pc, #32]	; (8008e64 <HAL_GPIO_EXTI_Callback+0x208>)
 8008e42:	f7fe fe85 	bl	8007b50 <NX7_Delay>
	}
	
	//--> Clear the Ext. Pending Bit
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008e46:	4a08      	ldr	r2, [pc, #32]	; (8008e68 <HAL_GPIO_EXTI_Callback+0x20c>)
 8008e48:	88fb      	ldrh	r3, [r7, #6]
 8008e4a:	6153      	str	r3, [r2, #20]
}
 8008e4c:	bf00      	nop
 8008e4e:	3708      	adds	r7, #8
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}
 8008e54:	40010c00 	.word	0x40010c00
 8008e58:	40010800 	.word	0x40010800
 8008e5c:	000124f8 	.word	0x000124f8
 8008e60:	40011000 	.word	0x40011000
 8008e64:	0007a120 	.word	0x0007a120
 8008e68:	40010400 	.word	0x40010400

08008e6c <NX7_Intake_MA_Fresh>:
	}
}

/* NX7_Intake_MA_Fresh -------------------------------------------------------*/
void NX7_Intake_MA_Fresh(void)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b082      	sub	sp, #8
 8008e70:	af00      	add	r7, sp, #0
	uint8_t temp;
	temp = NX7_TLE_Ctrl_Register_Read(HB_ACT_2_CTRL);
 8008e72:	2043      	movs	r0, #67	; 0x43
 8008e74:	f004 fe2c 	bl	800dad0 <NX7_TLE_Ctrl_Register_Read>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	71fb      	strb	r3, [r7, #7]
	if(temp != 0x01)
 8008e7c:	79fb      	ldrb	r3, [r7, #7]
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d003      	beq.n	8008e8a <NX7_Intake_MA_Fresh+0x1e>
	{
		NX7_TLE_Ctrl_Register_Write(HB_ACT_2_CTRL, 0x01);		//--> OUTL5:ON & OUTL6:HZ
 8008e82:	2101      	movs	r1, #1
 8008e84:	2043      	movs	r0, #67	; 0x43
 8008e86:	f004 fe57 	bl	800db38 <NX7_TLE_Ctrl_Register_Write>
	}
}
 8008e8a:	bf00      	nop
 8008e8c:	3708      	adds	r7, #8
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <NX7_Intake_MA_Recycle>:

/* NX7_Intake_MA_Recycle -----------------------------------------------------*/
void NX7_Intake_MA_Recycle(void)
{
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b082      	sub	sp, #8
 8008e96:	af00      	add	r7, sp, #0
	uint8_t temp;
	temp = NX7_TLE_Ctrl_Register_Read(HB_ACT_2_CTRL);
 8008e98:	2043      	movs	r0, #67	; 0x43
 8008e9a:	f004 fe19 	bl	800dad0 <NX7_TLE_Ctrl_Register_Read>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	71fb      	strb	r3, [r7, #7]
	if(temp != 0x04)
 8008ea2:	79fb      	ldrb	r3, [r7, #7]
 8008ea4:	2b04      	cmp	r3, #4
 8008ea6:	d003      	beq.n	8008eb0 <NX7_Intake_MA_Recycle+0x1e>
	{
		NX7_TLE_Ctrl_Register_Write(HB_ACT_2_CTRL, 0x04);		//--> OUTL5:HZ & OUTL6:ON
 8008ea8:	2104      	movs	r1, #4
 8008eaa:	2043      	movs	r0, #67	; 0x43
 8008eac:	f004 fe44 	bl	800db38 <NX7_TLE_Ctrl_Register_Write>
	}
}
 8008eb0:	bf00      	nop
 8008eb2:	3708      	adds	r7, #8
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <NX7_Intake_MA_Handler>:

/* NX7_Intake_MA_Handler -----------------------------------------------------*/
void NX7_Intake_MA_Handler(Intake_State state)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	71fb      	strb	r3, [r7, #7]
	switch (state)
 8008ec2:	79fb      	ldrb	r3, [r7, #7]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d002      	beq.n	8008ece <NX7_Intake_MA_Handler+0x16>
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d003      	beq.n	8008ed4 <NX7_Intake_MA_Handler+0x1c>
		{
			NX7_Intake_MA_Recycle();
			break;
		}
	}
}
 8008ecc:	e005      	b.n	8008eda <NX7_Intake_MA_Handler+0x22>
			NX7_Intake_MA_Fresh();
 8008ece:	f7ff ffcd 	bl	8008e6c <NX7_Intake_MA_Fresh>
			break;
 8008ed2:	e002      	b.n	8008eda <NX7_Intake_MA_Handler+0x22>
			NX7_Intake_MA_Recycle();
 8008ed4:	f7ff ffdd 	bl	8008e92 <NX7_Intake_MA_Recycle>
			break;
 8008ed8:	bf00      	nop
}
 8008eda:	bf00      	nop
 8008edc:	3708      	adds	r7, #8
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
	...

08008ee4 <NX7_LCD_Init>:
extern Sensor_State Ambient_Sensor_State;

/* Functions body *************************************************************/
/* NX7_LCD_Init --------------------------------------------------------------*/
void NX7_LCD_Init(void)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	af00      	add	r7, sp, #0
	NX7_LCD_Command(Mode_Set_Command|0x00);
 8008ee8:	20a0      	movs	r0, #160	; 0xa0
 8008eea:	f000 f833 	bl	8008f54 <NX7_LCD_Command>
	NX7_LCD_Command(System_Set_Command|0x03);
 8008eee:	2083      	movs	r0, #131	; 0x83
 8008ef0:	f000 f830 	bl	8008f54 <NX7_LCD_Command>
	NX7_LCD_ALL_SEG(SEG_OFF);
 8008ef4:	2000      	movs	r0, #0
 8008ef6:	f000 f8bf 	bl	8009078 <NX7_LCD_ALL_SEG>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8008efa:	210c      	movs	r1, #12
 8008efc:	4809      	ldr	r0, [pc, #36]	; (8008f24 <NX7_LCD_Init+0x40>)
 8008efe:	f7fc ff05 	bl	8005d0c <HAL_TIM_PWM_Start>
	if(Illumination_State == GPIO_PIN_SET)
 8008f02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008f06:	4808      	ldr	r0, [pc, #32]	; (8008f28 <NX7_LCD_Init+0x44>)
 8008f08:	f7fa fdba 	bl	8003a80 <HAL_GPIO_ReadPin>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d103      	bne.n	8008f1a <NX7_LCD_Init+0x36>
	{
		NX7_LCD_Backlight(NX7_LCD_NightLight_PWM);
 8008f12:	203c      	movs	r0, #60	; 0x3c
 8008f14:	f000 f8a0 	bl	8009058 <NX7_LCD_Backlight>
	}
	else
	{
		NX7_LCD_Backlight(NX7_LCD_DayLight_PWM);
	}
}
 8008f18:	e002      	b.n	8008f20 <NX7_LCD_Init+0x3c>
		NX7_LCD_Backlight(NX7_LCD_DayLight_PWM);
 8008f1a:	2064      	movs	r0, #100	; 0x64
 8008f1c:	f000 f89c 	bl	8009058 <NX7_LCD_Backlight>
}
 8008f20:	bf00      	nop
 8008f22:	bd80      	pop	{r7, pc}
 8008f24:	2000024c 	.word	0x2000024c
 8008f28:	40010c00 	.word	0x40010c00

08008f2c <NX7_LCD_DeInit>:

/* NX7_LCD_Init --------------------------------------------------------------*/
void NX7_LCD_DeInit(void)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	af00      	add	r7, sp, #0
	NX7_LCD_Command(Mode_Set_Command|0x00);
 8008f30:	20a0      	movs	r0, #160	; 0xa0
 8008f32:	f000 f80f 	bl	8008f54 <NX7_LCD_Command>
	NX7_LCD_Command(System_Set_Command&0x80);
 8008f36:	2080      	movs	r0, #128	; 0x80
 8008f38:	f000 f80c 	bl	8008f54 <NX7_LCD_Command>
	NX7_LCD_ALL_SEG(SEG_OFF);
 8008f3c:	2000      	movs	r0, #0
 8008f3e:	f000 f89b 	bl	8009078 <NX7_LCD_ALL_SEG>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
 8008f42:	210c      	movs	r1, #12
 8008f44:	4802      	ldr	r0, [pc, #8]	; (8008f50 <NX7_LCD_DeInit+0x24>)
 8008f46:	f7fc ffa3 	bl	8005e90 <HAL_TIM_PWM_Stop>
}
 8008f4a:	bf00      	nop
 8008f4c:	bd80      	pop	{r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	2000024c 	.word	0x2000024c

08008f54 <NX7_LCD_Command>:

/* NX7_LCD_Command -----------------------------------------------------------*/
void NX7_LCD_Command(uint8_t command)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b086      	sub	sp, #24
 8008f58:	af02      	add	r7, sp, #8
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	71fb      	strb	r3, [r7, #7]
	uint8_t		pCommand[1] = {command};
 8008f5e:	79fb      	ldrb	r3, [r7, #7]
 8008f60:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c2, HT16K23_Device_Address|0x01, pCommand, 1, 10);
 8008f62:	f107 020c 	add.w	r2, r7, #12
 8008f66:	230a      	movs	r3, #10
 8008f68:	9300      	str	r3, [sp, #0]
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	21e7      	movs	r1, #231	; 0xe7
 8008f6e:	4803      	ldr	r0, [pc, #12]	; (8008f7c <NX7_LCD_Command+0x28>)
 8008f70:	f7fa ff12 	bl	8003d98 <HAL_I2C_Master_Transmit>
}
 8008f74:	bf00      	nop
 8008f76:	3710      	adds	r7, #16
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	20000294 	.word	0x20000294

08008f80 <NX7_LCD_SEG_Read>:

/* NX7_LCD_SEG_Read ----------------------------------------------------------*/
uint8_t NX7_LCD_SEG_Read(uint8_t address)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b086      	sub	sp, #24
 8008f84:	af02      	add	r7, sp, #8
 8008f86:	4603      	mov	r3, r0
 8008f88:	71fb      	strb	r3, [r7, #7]
	uint8_t		pAddress[1] = {address};
 8008f8a:	79fb      	ldrb	r3, [r7, #7]
 8008f8c:	733b      	strb	r3, [r7, #12]
	uint8_t		rxData[1];
	HAL_I2C_Master_Transmit(&hi2c2, HT16K23_Device_Address|0x01, pAddress, 1, 10);
 8008f8e:	f107 020c 	add.w	r2, r7, #12
 8008f92:	230a      	movs	r3, #10
 8008f94:	9300      	str	r3, [sp, #0]
 8008f96:	2301      	movs	r3, #1
 8008f98:	21e7      	movs	r1, #231	; 0xe7
 8008f9a:	4808      	ldr	r0, [pc, #32]	; (8008fbc <NX7_LCD_SEG_Read+0x3c>)
 8008f9c:	f7fa fefc 	bl	8003d98 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, HT16K23_Device_Address, rxData, 1, 10);
 8008fa0:	f107 0208 	add.w	r2, r7, #8
 8008fa4:	230a      	movs	r3, #10
 8008fa6:	9300      	str	r3, [sp, #0]
 8008fa8:	2301      	movs	r3, #1
 8008faa:	21e6      	movs	r1, #230	; 0xe6
 8008fac:	4803      	ldr	r0, [pc, #12]	; (8008fbc <NX7_LCD_SEG_Read+0x3c>)
 8008fae:	f7fa fff1 	bl	8003f94 <HAL_I2C_Master_Receive>
	return rxData[0];
 8008fb2:	7a3b      	ldrb	r3, [r7, #8]
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3710      	adds	r7, #16
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	20000294 	.word	0x20000294

08008fc0 <NX7_LCD_SEG_OFF>:

/* NX7_LCD_SEG_OFF -----------------------------------------------------------*/
void NX7_LCD_SEG_OFF(uint8_t address, uint8_t data)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b086      	sub	sp, #24
 8008fc4:	af02      	add	r7, sp, #8
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	460a      	mov	r2, r1
 8008fca:	71fb      	strb	r3, [r7, #7]
 8008fcc:	4613      	mov	r3, r2
 8008fce:	71bb      	strb	r3, [r7, #6]
	data   =  ~data;
 8008fd0:	79bb      	ldrb	r3, [r7, #6]
 8008fd2:	43db      	mvns	r3, r3
 8008fd4:	71bb      	strb	r3, [r7, #6]
	data  &=  NX7_LCD_SEG_Read(address);
 8008fd6:	79fb      	ldrb	r3, [r7, #7]
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f7ff ffd1 	bl	8008f80 <NX7_LCD_SEG_Read>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	79bb      	ldrb	r3, [r7, #6]
 8008fe4:	4013      	ands	r3, r2
 8008fe6:	71bb      	strb	r3, [r7, #6]
	uint8_t		txData[2] = {address,data};
 8008fe8:	79fb      	ldrb	r3, [r7, #7]
 8008fea:	733b      	strb	r3, [r7, #12]
 8008fec:	79bb      	ldrb	r3, [r7, #6]
 8008fee:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, HT16K23_Device_Address|0x01, txData, 2, 10);
 8008ff0:	f107 020c 	add.w	r2, r7, #12
 8008ff4:	230a      	movs	r3, #10
 8008ff6:	9300      	str	r3, [sp, #0]
 8008ff8:	2302      	movs	r3, #2
 8008ffa:	21e7      	movs	r1, #231	; 0xe7
 8008ffc:	4803      	ldr	r0, [pc, #12]	; (800900c <NX7_LCD_SEG_OFF+0x4c>)
 8008ffe:	f7fa fecb 	bl	8003d98 <HAL_I2C_Master_Transmit>
}
 8009002:	bf00      	nop
 8009004:	3710      	adds	r7, #16
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}
 800900a:	bf00      	nop
 800900c:	20000294 	.word	0x20000294

08009010 <NX7_LCD_SEG_ON>:

/* NX7_LCD_SEG_ON ------------------------------------------------------------*/
void NX7_LCD_SEG_ON(uint8_t address, uint8_t data)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b086      	sub	sp, #24
 8009014:	af02      	add	r7, sp, #8
 8009016:	4603      	mov	r3, r0
 8009018:	460a      	mov	r2, r1
 800901a:	71fb      	strb	r3, [r7, #7]
 800901c:	4613      	mov	r3, r2
 800901e:	71bb      	strb	r3, [r7, #6]
	data |= NX7_LCD_SEG_Read(address);
 8009020:	79fb      	ldrb	r3, [r7, #7]
 8009022:	4618      	mov	r0, r3
 8009024:	f7ff ffac 	bl	8008f80 <NX7_LCD_SEG_Read>
 8009028:	4603      	mov	r3, r0
 800902a:	461a      	mov	r2, r3
 800902c:	79bb      	ldrb	r3, [r7, #6]
 800902e:	4313      	orrs	r3, r2
 8009030:	71bb      	strb	r3, [r7, #6]
	uint8_t		txData[2] = {address,data};
 8009032:	79fb      	ldrb	r3, [r7, #7]
 8009034:	733b      	strb	r3, [r7, #12]
 8009036:	79bb      	ldrb	r3, [r7, #6]
 8009038:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, HT16K23_Device_Address|0x01, txData, 2, 10);
 800903a:	f107 020c 	add.w	r2, r7, #12
 800903e:	230a      	movs	r3, #10
 8009040:	9300      	str	r3, [sp, #0]
 8009042:	2302      	movs	r3, #2
 8009044:	21e7      	movs	r1, #231	; 0xe7
 8009046:	4803      	ldr	r0, [pc, #12]	; (8009054 <NX7_LCD_SEG_ON+0x44>)
 8009048:	f7fa fea6 	bl	8003d98 <HAL_I2C_Master_Transmit>
}
 800904c:	bf00      	nop
 800904e:	3710      	adds	r7, #16
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}
 8009054:	20000294 	.word	0x20000294

08009058 <NX7_LCD_Backlight>:

/* NX7_LCD_Backlight ---------------------------------------------------------*/
void NX7_LCD_Backlight(uint16_t pwm)
{
 8009058:	b480      	push	{r7}
 800905a:	b083      	sub	sp, #12
 800905c:	af00      	add	r7, sp, #0
 800905e:	4603      	mov	r3, r0
 8009060:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, pwm);
 8009062:	4b04      	ldr	r3, [pc, #16]	; (8009074 <NX7_LCD_Backlight+0x1c>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	88fa      	ldrh	r2, [r7, #6]
 8009068:	641a      	str	r2, [r3, #64]	; 0x40
}
 800906a:	bf00      	nop
 800906c:	370c      	adds	r7, #12
 800906e:	46bd      	mov	sp, r7
 8009070:	bc80      	pop	{r7}
 8009072:	4770      	bx	lr
 8009074:	2000024c 	.word	0x2000024c

08009078 <NX7_LCD_ALL_SEG>:

/* NX7_LCD_ALL_SEG -----------------------------------------------------------*/
void NX7_LCD_ALL_SEG(SEG_State state)
{
 8009078:	b590      	push	{r4, r7, lr}
 800907a:	b087      	sub	sp, #28
 800907c:	af02      	add	r7, sp, #8
 800907e:	4603      	mov	r3, r0
 8009080:	71fb      	strb	r3, [r7, #7]
	switch (state)
 8009082:	79fb      	ldrb	r3, [r7, #7]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d002      	beq.n	800908e <NX7_LCD_ALL_SEG+0x16>
 8009088:	2b01      	cmp	r3, #1
 800908a:	d013      	beq.n	80090b4 <NX7_LCD_ALL_SEG+0x3c>
			HAL_I2C_Master_Transmit(&hi2c2, HT16K23_Device_Address|0x01, txData, 2, 10);
		}
		break;
	}
	}
}
 800908c:	e025      	b.n	80090da <NX7_LCD_ALL_SEG+0x62>
		for(register int i=0x00; i<=0x09; i++)
 800908e:	2400      	movs	r4, #0
 8009090:	e00d      	b.n	80090ae <NX7_LCD_ALL_SEG+0x36>
			uint8_t		txData[2] = {i,0x00};
 8009092:	b2e3      	uxtb	r3, r4
 8009094:	733b      	strb	r3, [r7, #12]
 8009096:	2300      	movs	r3, #0
 8009098:	737b      	strb	r3, [r7, #13]
			HAL_I2C_Master_Transmit(&hi2c2, HT16K23_Device_Address|0x01, txData, 2, 10);
 800909a:	f107 020c 	add.w	r2, r7, #12
 800909e:	230a      	movs	r3, #10
 80090a0:	9300      	str	r3, [sp, #0]
 80090a2:	2302      	movs	r3, #2
 80090a4:	21e7      	movs	r1, #231	; 0xe7
 80090a6:	480f      	ldr	r0, [pc, #60]	; (80090e4 <NX7_LCD_ALL_SEG+0x6c>)
 80090a8:	f7fa fe76 	bl	8003d98 <HAL_I2C_Master_Transmit>
		for(register int i=0x00; i<=0x09; i++)
 80090ac:	3401      	adds	r4, #1
 80090ae:	2c09      	cmp	r4, #9
 80090b0:	ddef      	ble.n	8009092 <NX7_LCD_ALL_SEG+0x1a>
		break;
 80090b2:	e012      	b.n	80090da <NX7_LCD_ALL_SEG+0x62>
		for(register int i=0x00; i<=0x09; i++)
 80090b4:	2400      	movs	r4, #0
 80090b6:	e00d      	b.n	80090d4 <NX7_LCD_ALL_SEG+0x5c>
			uint8_t		txData[2] = {i,0xFF};
 80090b8:	b2e3      	uxtb	r3, r4
 80090ba:	723b      	strb	r3, [r7, #8]
 80090bc:	23ff      	movs	r3, #255	; 0xff
 80090be:	727b      	strb	r3, [r7, #9]
			HAL_I2C_Master_Transmit(&hi2c2, HT16K23_Device_Address|0x01, txData, 2, 10);
 80090c0:	f107 0208 	add.w	r2, r7, #8
 80090c4:	230a      	movs	r3, #10
 80090c6:	9300      	str	r3, [sp, #0]
 80090c8:	2302      	movs	r3, #2
 80090ca:	21e7      	movs	r1, #231	; 0xe7
 80090cc:	4805      	ldr	r0, [pc, #20]	; (80090e4 <NX7_LCD_ALL_SEG+0x6c>)
 80090ce:	f7fa fe63 	bl	8003d98 <HAL_I2C_Master_Transmit>
		for(register int i=0x00; i<=0x09; i++)
 80090d2:	3401      	adds	r4, #1
 80090d4:	2c09      	cmp	r4, #9
 80090d6:	ddef      	ble.n	80090b8 <NX7_LCD_ALL_SEG+0x40>
		break;
 80090d8:	bf00      	nop
}
 80090da:	bf00      	nop
 80090dc:	3714      	adds	r7, #20
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd90      	pop	{r4, r7, pc}
 80090e2:	bf00      	nop
 80090e4:	20000294 	.word	0x20000294

080090e8 <NX7_LCD_OFF_SEG>:

/* NX7_LCD_OFF_SEG -----------------------------------------------------------*/
void NX7_LCD_OFF_SEG(SEG_State state)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	4603      	mov	r3, r0
 80090f0:	71fb      	strb	r3, [r7, #7]
	switch (state)
 80090f2:	79fb      	ldrb	r3, [r7, #7]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d002      	beq.n	80090fe <NX7_LCD_OFF_SEG+0x16>
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d005      	beq.n	8009108 <NX7_LCD_OFF_SEG+0x20>
	{
		NX7_LCD_SEG_ON(0x03, 0x80);			//--> OFF : ON
		break;
	}
	}
}
 80090fc:	e009      	b.n	8009112 <NX7_LCD_OFF_SEG+0x2a>
		NX7_LCD_SEG_OFF(0x03, 0x80);		//--> OFF : OFF
 80090fe:	2180      	movs	r1, #128	; 0x80
 8009100:	2003      	movs	r0, #3
 8009102:	f7ff ff5d 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		break;
 8009106:	e004      	b.n	8009112 <NX7_LCD_OFF_SEG+0x2a>
		NX7_LCD_SEG_ON(0x03, 0x80);			//--> OFF : ON
 8009108:	2180      	movs	r1, #128	; 0x80
 800910a:	2003      	movs	r0, #3
 800910c:	f7ff ff80 	bl	8009010 <NX7_LCD_SEG_ON>
		break;
 8009110:	bf00      	nop
}
 8009112:	bf00      	nop
 8009114:	3708      	adds	r7, #8
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}

0800911a <NX7_LCD_AUTO_SEG>:

/* NX7_LCD_AUTO_SEG ----------------------------------------------------------*/
void NX7_LCD_AUTO_SEG(SEG_State state)
{
 800911a:	b580      	push	{r7, lr}
 800911c:	b082      	sub	sp, #8
 800911e:	af00      	add	r7, sp, #0
 8009120:	4603      	mov	r3, r0
 8009122:	71fb      	strb	r3, [r7, #7]
	switch (state)
 8009124:	79fb      	ldrb	r3, [r7, #7]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d002      	beq.n	8009130 <NX7_LCD_AUTO_SEG+0x16>
 800912a:	2b01      	cmp	r3, #1
 800912c:	d005      	beq.n	800913a <NX7_LCD_AUTO_SEG+0x20>
	{
		NX7_LCD_SEG_ON(0x03, 0x40);			//--> AUTO : ON
		break;
	}
	}
}
 800912e:	e009      	b.n	8009144 <NX7_LCD_AUTO_SEG+0x2a>
		NX7_LCD_SEG_OFF(0x03, 0x40);		//--> AUTO : OFF
 8009130:	2140      	movs	r1, #64	; 0x40
 8009132:	2003      	movs	r0, #3
 8009134:	f7ff ff44 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		break;
 8009138:	e004      	b.n	8009144 <NX7_LCD_AUTO_SEG+0x2a>
		NX7_LCD_SEG_ON(0x03, 0x40);			//--> AUTO : ON
 800913a:	2140      	movs	r1, #64	; 0x40
 800913c:	2003      	movs	r0, #3
 800913e:	f7ff ff67 	bl	8009010 <NX7_LCD_SEG_ON>
		break;
 8009142:	bf00      	nop
}
 8009144:	bf00      	nop
 8009146:	3708      	adds	r7, #8
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <NX7_LCD_ECON_SEG>:

/* NX7_LCD_ECON_SEG ----------------------------------------------------------*/
void NX7_LCD_ECON_SEG(SEG_State state)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	4603      	mov	r3, r0
 8009154:	71fb      	strb	r3, [r7, #7]
	switch (state)
 8009156:	79fb      	ldrb	r3, [r7, #7]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d002      	beq.n	8009162 <NX7_LCD_ECON_SEG+0x16>
 800915c:	2b01      	cmp	r3, #1
 800915e:	d005      	beq.n	800916c <NX7_LCD_ECON_SEG+0x20>
	{
		NX7_LCD_SEG_ON(0x03, 0x20);			//--> ECON : ON
		break;
	}
	}
}
 8009160:	e009      	b.n	8009176 <NX7_LCD_ECON_SEG+0x2a>
		NX7_LCD_SEG_OFF(0x03, 0x20);		//--> ECON : OFF
 8009162:	2120      	movs	r1, #32
 8009164:	2003      	movs	r0, #3
 8009166:	f7ff ff2b 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		break;
 800916a:	e004      	b.n	8009176 <NX7_LCD_ECON_SEG+0x2a>
		NX7_LCD_SEG_ON(0x03, 0x20);			//--> ECON : ON
 800916c:	2120      	movs	r1, #32
 800916e:	2003      	movs	r0, #3
 8009170:	f7ff ff4e 	bl	8009010 <NX7_LCD_SEG_ON>
		break;
 8009174:	bf00      	nop
}
 8009176:	bf00      	nop
 8009178:	3708      	adds	r7, #8
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <NX7_LCD_DEF_SEG>:

/* NX7_LCD_DEF_SEG -----------------------------------------------------------*/
void NX7_LCD_DEF_SEG(SEG_State state)
{
 800917e:	b580      	push	{r7, lr}
 8009180:	b082      	sub	sp, #8
 8009182:	af00      	add	r7, sp, #0
 8009184:	4603      	mov	r3, r0
 8009186:	71fb      	strb	r3, [r7, #7]
	switch (state)
 8009188:	79fb      	ldrb	r3, [r7, #7]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d002      	beq.n	8009194 <NX7_LCD_DEF_SEG+0x16>
 800918e:	2b01      	cmp	r3, #1
 8009190:	d005      	beq.n	800919e <NX7_LCD_DEF_SEG+0x20>
	{
		NX7_LCD_SEG_ON(0x02, 0x08);			//--> DEF : ON
		break;
	}
	}
}
 8009192:	e009      	b.n	80091a8 <NX7_LCD_DEF_SEG+0x2a>
		NX7_LCD_SEG_OFF(0x02, 0x08);		//--> DEF : OFF
 8009194:	2108      	movs	r1, #8
 8009196:	2002      	movs	r0, #2
 8009198:	f7ff ff12 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		break;
 800919c:	e004      	b.n	80091a8 <NX7_LCD_DEF_SEG+0x2a>
		NX7_LCD_SEG_ON(0x02, 0x08);			//--> DEF : ON
 800919e:	2108      	movs	r1, #8
 80091a0:	2002      	movs	r0, #2
 80091a2:	f7ff ff35 	bl	8009010 <NX7_LCD_SEG_ON>
		break;
 80091a6:	bf00      	nop
}
 80091a8:	bf00      	nop
 80091aa:	3708      	adds	r7, #8
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <NX7_LCD_Mode_SEG>:
	}
}

/* NX7_LCD_Mode_SEG ----------------------------------------------------------*/
void NX7_LCD_Mode_SEG(SEG_State state)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b082      	sub	sp, #8
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	4603      	mov	r3, r0
 80091b8:	71fb      	strb	r3, [r7, #7]
	switch (state)
 80091ba:	79fb      	ldrb	r3, [r7, #7]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d002      	beq.n	80091c6 <NX7_LCD_Mode_SEG+0x16>
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d011      	beq.n	80091e8 <NX7_LCD_Mode_SEG+0x38>
		NX7_LCD_SEG_ON(0x03, 0x10);			//--> Foot : ON
		NX7_LCD_SEG_ON(0x07, 0x20);			//--> Def  : ON
		break;
	}
	}
}
 80091c4:	e021      	b.n	800920a <NX7_LCD_Mode_SEG+0x5a>
		NX7_LCD_SEG_OFF(0x03, 0x01);		//--> PAX  : OFF
 80091c6:	2101      	movs	r1, #1
 80091c8:	2003      	movs	r0, #3
 80091ca:	f7ff fef9 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x07, 0x10);		//--> Face : OFF
 80091ce:	2110      	movs	r1, #16
 80091d0:	2007      	movs	r0, #7
 80091d2:	f7ff fef5 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x03, 0x10);		//--> Foot : OFF
 80091d6:	2110      	movs	r1, #16
 80091d8:	2003      	movs	r0, #3
 80091da:	f7ff fef1 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x07, 0x20);		//--> Def  : OFF
 80091de:	2120      	movs	r1, #32
 80091e0:	2007      	movs	r0, #7
 80091e2:	f7ff feed 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		break;
 80091e6:	e010      	b.n	800920a <NX7_LCD_Mode_SEG+0x5a>
		NX7_LCD_SEG_ON(0x03, 0x01);			//--> PAX  : ON
 80091e8:	2101      	movs	r1, #1
 80091ea:	2003      	movs	r0, #3
 80091ec:	f7ff ff10 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x07, 0x10);			//--> Face : ON
 80091f0:	2110      	movs	r1, #16
 80091f2:	2007      	movs	r0, #7
 80091f4:	f7ff ff0c 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x03, 0x10);			//--> Foot : ON
 80091f8:	2110      	movs	r1, #16
 80091fa:	2003      	movs	r0, #3
 80091fc:	f7ff ff08 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x07, 0x20);			//--> Def  : ON
 8009200:	2120      	movs	r1, #32
 8009202:	2007      	movs	r0, #7
 8009204:	f7ff ff04 	bl	8009010 <NX7_LCD_SEG_ON>
		break;
 8009208:	bf00      	nop
}
 800920a:	bf00      	nop
 800920c:	3708      	adds	r7, #8
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}

08009212 <NX7_LCD_Blower_SEG>:

/* NX7_LCD_Blower_SEG --------------------------------------------------------*/
void NX7_LCD_Blower_SEG(SEG_State state)
{
 8009212:	b580      	push	{r7, lr}
 8009214:	b082      	sub	sp, #8
 8009216:	af00      	add	r7, sp, #0
 8009218:	4603      	mov	r3, r0
 800921a:	71fb      	strb	r3, [r7, #7]
	switch (state)
 800921c:	79fb      	ldrb	r3, [r7, #7]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d002      	beq.n	8009228 <NX7_LCD_Blower_SEG+0x16>
 8009222:	2b01      	cmp	r3, #1
 8009224:	d025      	beq.n	8009272 <NX7_LCD_Blower_SEG+0x60>
		NX7_LCD_SEG_ON(0x04, 0x02);			//--> L7 : ON
		NX7_LCD_SEG_ON(0x04, 0x01);			//--> L8 : ON
		break;
	}
	}
}
 8009226:	e049      	b.n	80092bc <NX7_LCD_Blower_SEG+0xaa>
		NX7_LCD_SEG_OFF(0x05, 0x02);		//--> BL : OFF
 8009228:	2102      	movs	r1, #2
 800922a:	2005      	movs	r0, #5
 800922c:	f7ff fec8 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x04, 0x10);		//--> L1 : OFF
 8009230:	2110      	movs	r1, #16
 8009232:	2004      	movs	r0, #4
 8009234:	f7ff fec4 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x04, 0x20);		//--> L2 : OFF
 8009238:	2120      	movs	r1, #32
 800923a:	2004      	movs	r0, #4
 800923c:	f7ff fec0 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x04, 0x40);		//--> L3 : OFF
 8009240:	2140      	movs	r1, #64	; 0x40
 8009242:	2004      	movs	r0, #4
 8009244:	f7ff febc 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x04, 0x80);		//--> L4 : OFF
 8009248:	2180      	movs	r1, #128	; 0x80
 800924a:	2004      	movs	r0, #4
 800924c:	f7ff feb8 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x04, 0x08);		//--> L5 : OFF
 8009250:	2108      	movs	r1, #8
 8009252:	2004      	movs	r0, #4
 8009254:	f7ff feb4 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x04, 0x04);		//--> L6 : OFF
 8009258:	2104      	movs	r1, #4
 800925a:	2004      	movs	r0, #4
 800925c:	f7ff feb0 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x04, 0x02);		//--> L7 : OFF
 8009260:	2102      	movs	r1, #2
 8009262:	2004      	movs	r0, #4
 8009264:	f7ff feac 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x04, 0x01);		//--> L8 : OFF
 8009268:	2101      	movs	r1, #1
 800926a:	2004      	movs	r0, #4
 800926c:	f7ff fea8 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		break;
 8009270:	e024      	b.n	80092bc <NX7_LCD_Blower_SEG+0xaa>
		NX7_LCD_SEG_ON(0x05, 0x02);			//--> BL : ON
 8009272:	2102      	movs	r1, #2
 8009274:	2005      	movs	r0, #5
 8009276:	f7ff fecb 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x04, 0x10);			//--> L1 : ON
 800927a:	2110      	movs	r1, #16
 800927c:	2004      	movs	r0, #4
 800927e:	f7ff fec7 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x04, 0x20);			//--> L2 : ON
 8009282:	2120      	movs	r1, #32
 8009284:	2004      	movs	r0, #4
 8009286:	f7ff fec3 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x04, 0x40);			//--> L3 : ON
 800928a:	2140      	movs	r1, #64	; 0x40
 800928c:	2004      	movs	r0, #4
 800928e:	f7ff febf 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x04, 0x80);			//--> L4 : ON
 8009292:	2180      	movs	r1, #128	; 0x80
 8009294:	2004      	movs	r0, #4
 8009296:	f7ff febb 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x04, 0x08);			//--> L5 : ON
 800929a:	2108      	movs	r1, #8
 800929c:	2004      	movs	r0, #4
 800929e:	f7ff feb7 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x04, 0x04);			//--> L6 : ON
 80092a2:	2104      	movs	r1, #4
 80092a4:	2004      	movs	r0, #4
 80092a6:	f7ff feb3 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x04, 0x02);			//--> L7 : ON
 80092aa:	2102      	movs	r1, #2
 80092ac:	2004      	movs	r0, #4
 80092ae:	f7ff feaf 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x04, 0x01);			//--> L8 : ON
 80092b2:	2101      	movs	r1, #1
 80092b4:	2004      	movs	r0, #4
 80092b6:	f7ff feab 	bl	8009010 <NX7_LCD_SEG_ON>
		break;
 80092ba:	bf00      	nop
}
 80092bc:	bf00      	nop
 80092be:	3708      	adds	r7, #8
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bd80      	pop	{r7, pc}

080092c4 <NX7_LCD_Out_Temp_SEG>:


/* NX7_LCD_Out_Temp_SEG ------------------------------------------------------*/
void NX7_LCD_Out_Temp_SEG(SEG_State state)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b082      	sub	sp, #8
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	4603      	mov	r3, r0
 80092cc:	71fb      	strb	r3, [r7, #7]
	switch (state)
 80092ce:	79fb      	ldrb	r3, [r7, #7]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d002      	beq.n	80092da <NX7_LCD_Out_Temp_SEG+0x16>
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d005      	beq.n	80092e4 <NX7_LCD_Out_Temp_SEG+0x20>
	{
		NX7_LCD_SEG_ON(0x05, 0x08);			//--> OUT TEMP : ON
		break;
	}
	}
}
 80092d8:	e009      	b.n	80092ee <NX7_LCD_Out_Temp_SEG+0x2a>
		NX7_LCD_SEG_OFF(0x05, 0x08);		//--> OUT TEMP : OFF
 80092da:	2108      	movs	r1, #8
 80092dc:	2005      	movs	r0, #5
 80092de:	f7ff fe6f 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		break;
 80092e2:	e004      	b.n	80092ee <NX7_LCD_Out_Temp_SEG+0x2a>
		NX7_LCD_SEG_ON(0x05, 0x08);			//--> OUT TEMP : ON
 80092e4:	2108      	movs	r1, #8
 80092e6:	2005      	movs	r0, #5
 80092e8:	f7ff fe92 	bl	8009010 <NX7_LCD_SEG_ON>
		break;
 80092ec:	bf00      	nop
}
 80092ee:	bf00      	nop
 80092f0:	3708      	adds	r7, #8
 80092f2:	46bd      	mov	sp, r7
 80092f4:	bd80      	pop	{r7, pc}

080092f6 <NX7_LCD_Set_Point_SEG>:

/* NX7_LCD_Set_Point_SEG -----------------------------------------------------*/
void NX7_LCD_Set_Point_SEG(SEG_State state)
{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b082      	sub	sp, #8
 80092fa:	af00      	add	r7, sp, #0
 80092fc:	4603      	mov	r3, r0
 80092fe:	71fb      	strb	r3, [r7, #7]
	switch (state)
 8009300:	79fb      	ldrb	r3, [r7, #7]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d002      	beq.n	800930c <NX7_LCD_Set_Point_SEG+0x16>
 8009306:	2b01      	cmp	r3, #1
 8009308:	d061      	beq.n	80093ce <NX7_LCD_Set_Point_SEG+0xd8>
		NX7_LCD_SEG_ON(0x01, 0x04);			//--> Seg.G : ON
		break;
	}
	}

}
 800930a:	e0c1      	b.n	8009490 <NX7_LCD_Set_Point_SEG+0x19a>
		NX7_LCD_SEG_OFF(0x02, 0x80);		//--> Seg.A : OFF
 800930c:	2180      	movs	r1, #128	; 0x80
 800930e:	2002      	movs	r0, #2
 8009310:	f7ff fe56 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x02, 0x40);		//--> Seg.B : OFF
 8009314:	2140      	movs	r1, #64	; 0x40
 8009316:	2002      	movs	r0, #2
 8009318:	f7ff fe52 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x02, 0x20);		//--> Seg.C : OFF
 800931c:	2120      	movs	r1, #32
 800931e:	2002      	movs	r0, #2
 8009320:	f7ff fe4e 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x02, 0x10);		//--> Seg.D : OFF
 8009324:	2110      	movs	r1, #16
 8009326:	2002      	movs	r0, #2
 8009328:	f7ff fe4a 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x03, 0x02);		//--> Seg.E : OFF
 800932c:	2102      	movs	r1, #2
 800932e:	2003      	movs	r0, #3
 8009330:	f7ff fe46 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x03, 0x08);		//--> Seg.F : OFF
 8009334:	2108      	movs	r1, #8
 8009336:	2003      	movs	r0, #3
 8009338:	f7ff fe42 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x03, 0x04);		//--> Seg.G : OFF
 800933c:	2104      	movs	r1, #4
 800933e:	2003      	movs	r0, #3
 8009340:	f7ff fe3e 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x01, 0x80);		//--> Seg.A : OFF
 8009344:	2180      	movs	r1, #128	; 0x80
 8009346:	2001      	movs	r0, #1
 8009348:	f7ff fe3a 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x01, 0x40);		//--> Seg.B : OFF
 800934c:	2140      	movs	r1, #64	; 0x40
 800934e:	2001      	movs	r0, #1
 8009350:	f7ff fe36 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x01, 0x20);		//--> Seg.C : OFF
 8009354:	2120      	movs	r1, #32
 8009356:	2001      	movs	r0, #1
 8009358:	f7ff fe32 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x01, 0x10);		//--> Seg.D : OFF
 800935c:	2110      	movs	r1, #16
 800935e:	2001      	movs	r0, #1
 8009360:	f7ff fe2e 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x02, 0x01);		//--> Seg.E : OFF
 8009364:	2101      	movs	r1, #1
 8009366:	2002      	movs	r0, #2
 8009368:	f7ff fe2a 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x02, 0x04);		//--> Seg.F : OFF
 800936c:	2104      	movs	r1, #4
 800936e:	2002      	movs	r0, #2
 8009370:	f7ff fe26 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x02, 0x02);		//--> Seg.G : OFF
 8009374:	2102      	movs	r1, #2
 8009376:	2002      	movs	r0, #2
 8009378:	f7ff fe22 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x00, 0x02);		//--> °C    : OFF
 800937c:	2102      	movs	r1, #2
 800937e:	2000      	movs	r0, #0
 8009380:	f7ff fe1e 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x00, 0x01);		//--> °F    : OFF
 8009384:	2101      	movs	r1, #1
 8009386:	2000      	movs	r0, #0
 8009388:	f7ff fe1a 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x01, 0x01);		//--> Point : OFF
 800938c:	2101      	movs	r1, #1
 800938e:	2001      	movs	r0, #1
 8009390:	f7ff fe16 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x00, 0x80);		//--> Seg.A : OFF
 8009394:	2180      	movs	r1, #128	; 0x80
 8009396:	2000      	movs	r0, #0
 8009398:	f7ff fe12 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x00, 0x40);		//--> Seg.B : OFF
 800939c:	2140      	movs	r1, #64	; 0x40
 800939e:	2000      	movs	r0, #0
 80093a0:	f7ff fe0e 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x00, 0x20);		//--> Seg.C : OFF
 80093a4:	2120      	movs	r1, #32
 80093a6:	2000      	movs	r0, #0
 80093a8:	f7ff fe0a 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x00, 0x10);		//--> Seg.D : OFF
 80093ac:	2110      	movs	r1, #16
 80093ae:	2000      	movs	r0, #0
 80093b0:	f7ff fe06 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x01, 0x02);		//--> Seg.E : OFF
 80093b4:	2102      	movs	r1, #2
 80093b6:	2001      	movs	r0, #1
 80093b8:	f7ff fe02 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x01, 0x08);		//--> Seg.F : OFF
 80093bc:	2108      	movs	r1, #8
 80093be:	2001      	movs	r0, #1
 80093c0:	f7ff fdfe 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x01, 0x04);		//--> Seg.G : OFF
 80093c4:	2104      	movs	r1, #4
 80093c6:	2001      	movs	r0, #1
 80093c8:	f7ff fdfa 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		break;
 80093cc:	e060      	b.n	8009490 <NX7_LCD_Set_Point_SEG+0x19a>
		NX7_LCD_SEG_ON(0x02, 0x80);			//--> Seg.A : ON
 80093ce:	2180      	movs	r1, #128	; 0x80
 80093d0:	2002      	movs	r0, #2
 80093d2:	f7ff fe1d 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x02, 0x40);			//--> Seg.B : ON
 80093d6:	2140      	movs	r1, #64	; 0x40
 80093d8:	2002      	movs	r0, #2
 80093da:	f7ff fe19 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x02, 0x20);			//--> Seg.C : ON
 80093de:	2120      	movs	r1, #32
 80093e0:	2002      	movs	r0, #2
 80093e2:	f7ff fe15 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x02, 0x10);			//--> Seg.D : ON
 80093e6:	2110      	movs	r1, #16
 80093e8:	2002      	movs	r0, #2
 80093ea:	f7ff fe11 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x03, 0x02);			//--> Seg.E : ON
 80093ee:	2102      	movs	r1, #2
 80093f0:	2003      	movs	r0, #3
 80093f2:	f7ff fe0d 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x03, 0x08);			//--> Seg.F : ON
 80093f6:	2108      	movs	r1, #8
 80093f8:	2003      	movs	r0, #3
 80093fa:	f7ff fe09 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x03, 0x04);			//--> Seg.G : ON
 80093fe:	2104      	movs	r1, #4
 8009400:	2003      	movs	r0, #3
 8009402:	f7ff fe05 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x01, 0x80);			//--> Seg.A : ON
 8009406:	2180      	movs	r1, #128	; 0x80
 8009408:	2001      	movs	r0, #1
 800940a:	f7ff fe01 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x01, 0x40);			//--> Seg.B : ON
 800940e:	2140      	movs	r1, #64	; 0x40
 8009410:	2001      	movs	r0, #1
 8009412:	f7ff fdfd 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x01, 0x20);			//--> Seg.C : ON
 8009416:	2120      	movs	r1, #32
 8009418:	2001      	movs	r0, #1
 800941a:	f7ff fdf9 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x01, 0x10);			//--> Seg.D : ON
 800941e:	2110      	movs	r1, #16
 8009420:	2001      	movs	r0, #1
 8009422:	f7ff fdf5 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x02, 0x01);			//--> Seg.E : ON
 8009426:	2101      	movs	r1, #1
 8009428:	2002      	movs	r0, #2
 800942a:	f7ff fdf1 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x02, 0x04);			//--> Seg.F : ON
 800942e:	2104      	movs	r1, #4
 8009430:	2002      	movs	r0, #2
 8009432:	f7ff fded 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x02, 0x02);			//--> Seg.G : ON
 8009436:	2102      	movs	r1, #2
 8009438:	2002      	movs	r0, #2
 800943a:	f7ff fde9 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x00, 0x02);			//--> °C    : ON
 800943e:	2102      	movs	r1, #2
 8009440:	2000      	movs	r0, #0
 8009442:	f7ff fde5 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x00, 0x01);			//--> °F    : ON
 8009446:	2101      	movs	r1, #1
 8009448:	2000      	movs	r0, #0
 800944a:	f7ff fde1 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x01, 0x01);			//--> Point : ON
 800944e:	2101      	movs	r1, #1
 8009450:	2001      	movs	r0, #1
 8009452:	f7ff fddd 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x00, 0x80);			//--> Seg.A : ON
 8009456:	2180      	movs	r1, #128	; 0x80
 8009458:	2000      	movs	r0, #0
 800945a:	f7ff fdd9 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x00, 0x40);			//--> Seg.B : ON
 800945e:	2140      	movs	r1, #64	; 0x40
 8009460:	2000      	movs	r0, #0
 8009462:	f7ff fdd5 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x00, 0x20);			//--> Seg.C : ON
 8009466:	2120      	movs	r1, #32
 8009468:	2000      	movs	r0, #0
 800946a:	f7ff fdd1 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x00, 0x10);			//--> Seg.D : ON
 800946e:	2110      	movs	r1, #16
 8009470:	2000      	movs	r0, #0
 8009472:	f7ff fdcd 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x01, 0x02);			//--> Seg.E : ON
 8009476:	2102      	movs	r1, #2
 8009478:	2001      	movs	r0, #1
 800947a:	f7ff fdc9 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x01, 0x08);			//--> Seg.F : ON
 800947e:	2108      	movs	r1, #8
 8009480:	2001      	movs	r0, #1
 8009482:	f7ff fdc5 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x01, 0x04);			//--> Seg.G : ON
 8009486:	2104      	movs	r1, #4
 8009488:	2001      	movs	r0, #1
 800948a:	f7ff fdc1 	bl	8009010 <NX7_LCD_SEG_ON>
		break;
 800948e:	bf00      	nop
}
 8009490:	bf00      	nop
 8009492:	3708      	adds	r7, #8
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <NX7_LCD_State_Init_SEG>:

/* NX7_LCD_State_Init_SEG ----------------------------------------------------*/
void NX7_LCD_State_Init_SEG(CCU_State state)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b082      	sub	sp, #8
 800949c:	af00      	add	r7, sp, #0
 800949e:	4603      	mov	r3, r0
 80094a0:	71fb      	strb	r3, [r7, #7]

	switch (state)
 80094a2:	79fb      	ldrb	r3, [r7, #7]
 80094a4:	2b03      	cmp	r3, #3
 80094a6:	d842      	bhi.n	800952e <NX7_LCD_State_Init_SEG+0x96>
 80094a8:	a201      	add	r2, pc, #4	; (adr r2, 80094b0 <NX7_LCD_State_Init_SEG+0x18>)
 80094aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ae:	bf00      	nop
 80094b0:	080094c1 	.word	0x080094c1
 80094b4:	080094ed 	.word	0x080094ed
 80094b8:	08009507 	.word	0x08009507
 80094bc:	08009527 	.word	0x08009527
	{
	case CCU_OFF:
	{
		NX7_LCD_OFF_SEG(SEG_ON);
 80094c0:	2001      	movs	r0, #1
 80094c2:	f7ff fe11 	bl	80090e8 <NX7_LCD_OFF_SEG>
		NX7_LCD_AUTO_SEG(SEG_OFF);
 80094c6:	2000      	movs	r0, #0
 80094c8:	f7ff fe27 	bl	800911a <NX7_LCD_AUTO_SEG>
		NX7_LCD_ECON_SEG(SEG_OFF);
 80094cc:	2000      	movs	r0, #0
 80094ce:	f7ff fe3d 	bl	800914c <NX7_LCD_ECON_SEG>
		NX7_LCD_DEF_SEG(SEG_OFF);
 80094d2:	2000      	movs	r0, #0
 80094d4:	f7ff fe53 	bl	800917e <NX7_LCD_DEF_SEG>
		//NX7_LCD_Intake_SEG();
		//NX7_LCD_Mode_SEG();
		NX7_LCD_Blower_SEG(SEG_OFF);
 80094d8:	2000      	movs	r0, #0
 80094da:	f7ff fe9a 	bl	8009212 <NX7_LCD_Blower_SEG>
		NX7_LCD_Out_Temp_SEG(SEG_ON);
 80094de:	2001      	movs	r0, #1
 80094e0:	f7ff fef0 	bl	80092c4 <NX7_LCD_Out_Temp_SEG>
		NX7_LCD_Set_Point_SEG(SEG_OFF);
 80094e4:	2000      	movs	r0, #0
 80094e6:	f7ff ff06 	bl	80092f6 <NX7_LCD_Set_Point_SEG>
		break;
 80094ea:	e020      	b.n	800952e <NX7_LCD_State_Init_SEG+0x96>
	}
	case CCU_AUTO:
	{
		NX7_LCD_OFF_SEG(SEG_OFF);
 80094ec:	2000      	movs	r0, #0
 80094ee:	f7ff fdfb 	bl	80090e8 <NX7_LCD_OFF_SEG>
		//NX7_LCD_AUTO_SEG();
		NX7_LCD_ECON_SEG(SEG_OFF);
 80094f2:	2000      	movs	r0, #0
 80094f4:	f7ff fe2a 	bl	800914c <NX7_LCD_ECON_SEG>
		NX7_LCD_DEF_SEG(SEG_OFF);
 80094f8:	2000      	movs	r0, #0
 80094fa:	f7ff fe40 	bl	800917e <NX7_LCD_DEF_SEG>
		//NX7_LCD_Intake_SEG();
		//NX7_LCD_Mode_SEG();
		//NX7_LCD_Blower_SEG();
		NX7_LCD_Out_Temp_SEG(SEG_ON);
 80094fe:	2001      	movs	r0, #1
 8009500:	f7ff fee0 	bl	80092c4 <NX7_LCD_Out_Temp_SEG>
		//NX7_LCD_Set_Point_SEG();
		break;
 8009504:	e013      	b.n	800952e <NX7_LCD_State_Init_SEG+0x96>
	}
	case CCU_DEF:
	{
		NX7_LCD_OFF_SEG(SEG_OFF);
 8009506:	2000      	movs	r0, #0
 8009508:	f7ff fdee 	bl	80090e8 <NX7_LCD_OFF_SEG>
		//NX7_LCD_AUTO_SEG();
		NX7_LCD_ECON_SEG(SEG_OFF);
 800950c:	2000      	movs	r0, #0
 800950e:	f7ff fe1d 	bl	800914c <NX7_LCD_ECON_SEG>
		NX7_LCD_DEF_SEG(SEG_ON);
 8009512:	2001      	movs	r0, #1
 8009514:	f7ff fe33 	bl	800917e <NX7_LCD_DEF_SEG>
		//NX7_LCD_Intake_SEG();
		NX7_LCD_Mode_SEG(SEG_OFF);
 8009518:	2000      	movs	r0, #0
 800951a:	f7ff fe49 	bl	80091b0 <NX7_LCD_Mode_SEG>
		//NX7_LCD_Blower_SEG();
		NX7_LCD_Out_Temp_SEG(SEG_ON);
 800951e:	2001      	movs	r0, #1
 8009520:	f7ff fed0 	bl	80092c4 <NX7_LCD_Out_Temp_SEG>
		//NX7_LCD_Set_Point_SEG();
		break;
 8009524:	e003      	b.n	800952e <NX7_LCD_State_Init_SEG+0x96>
	}
	case CCU_IGN_OFF:
	{
		NX7_LCD_ALL_SEG(SEG_OFF);
 8009526:	2000      	movs	r0, #0
 8009528:	f7ff fda6 	bl	8009078 <NX7_LCD_ALL_SEG>
		break;
 800952c:	bf00      	nop
	}
	}
}
 800952e:	bf00      	nop
 8009530:	3708      	adds	r7, #8
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop

08009538 <NX7_LCD_AC_Handler>:

/* NX7_LCD_AC_Handler --------------------------------------------------------*/
void NX7_LCD_AC_Handler(AC_State state)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
 800953e:	4603      	mov	r3, r0
 8009540:	71fb      	strb	r3, [r7, #7]
	switch (state)
 8009542:	79fb      	ldrb	r3, [r7, #7]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d002      	beq.n	800954e <NX7_LCD_AC_Handler+0x16>
 8009548:	2b01      	cmp	r3, #1
 800954a:	d005      	beq.n	8009558 <NX7_LCD_AC_Handler+0x20>
	{
		NX7_LCD_SEG_ON(0x00, 0x08);			//--> AC : ON
		break;
	}
	}
}
 800954c:	e009      	b.n	8009562 <NX7_LCD_AC_Handler+0x2a>
		NX7_LCD_SEG_OFF(0x00, 0x08);		//--> AC : OFF
 800954e:	2108      	movs	r1, #8
 8009550:	2000      	movs	r0, #0
 8009552:	f7ff fd35 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		break;
 8009556:	e004      	b.n	8009562 <NX7_LCD_AC_Handler+0x2a>
		NX7_LCD_SEG_ON(0x00, 0x08);			//--> AC : ON
 8009558:	2108      	movs	r1, #8
 800955a:	2000      	movs	r0, #0
 800955c:	f7ff fd58 	bl	8009010 <NX7_LCD_SEG_ON>
		break;
 8009560:	bf00      	nop
}
 8009562:	bf00      	nop
 8009564:	3708      	adds	r7, #8
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}

0800956a <NX7_LCD_R_DEF_Handler>:

/* NX7_LCD_R_DEF_Handler -----------------------------------------------------*/
void NX7_LCD_R_DEF_Handler(R_DEF_State state)
{
 800956a:	b580      	push	{r7, lr}
 800956c:	b082      	sub	sp, #8
 800956e:	af00      	add	r7, sp, #0
 8009570:	4603      	mov	r3, r0
 8009572:	71fb      	strb	r3, [r7, #7]
	switch (state)
 8009574:	79fb      	ldrb	r3, [r7, #7]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d002      	beq.n	8009580 <NX7_LCD_R_DEF_Handler+0x16>
 800957a:	2b01      	cmp	r3, #1
 800957c:	d005      	beq.n	800958a <NX7_LCD_R_DEF_Handler+0x20>
	{
		NX7_LCD_SEG_ON(0x00, 0x04);			//--> R-DEF : ON
		break;
	}
	}
}
 800957e:	e009      	b.n	8009594 <NX7_LCD_R_DEF_Handler+0x2a>
		NX7_LCD_SEG_OFF(0x00, 0x04);		//--> R-DEF : OFF
 8009580:	2104      	movs	r1, #4
 8009582:	2000      	movs	r0, #0
 8009584:	f7ff fd1c 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		break;
 8009588:	e004      	b.n	8009594 <NX7_LCD_R_DEF_Handler+0x2a>
		NX7_LCD_SEG_ON(0x00, 0x04);			//--> R-DEF : ON
 800958a:	2104      	movs	r1, #4
 800958c:	2000      	movs	r0, #0
 800958e:	f7ff fd3f 	bl	8009010 <NX7_LCD_SEG_ON>
		break;
 8009592:	bf00      	nop
}
 8009594:	bf00      	nop
 8009596:	3708      	adds	r7, #8
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <NX7_LCD_Intake_Handler>:

/* NX7_LCD_Intake_Handler ----------------------------------------------------*/
void NX7_LCD_Intake_Handler(Intake_State state)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	4603      	mov	r3, r0
 80095a4:	71fb      	strb	r3, [r7, #7]
	switch (state)
 80095a6:	79fb      	ldrb	r3, [r7, #7]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d002      	beq.n	80095b2 <NX7_LCD_Intake_Handler+0x16>
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d00d      	beq.n	80095cc <NX7_LCD_Intake_Handler+0x30>
		NX7_LCD_SEG_OFF(0x05, 0x01);		//--> Fresh   : OFF
		NX7_LCD_SEG_ON(0x05, 0x10);			//--> Recycle : ON
		break;
	}
	}
}
 80095b0:	e019      	b.n	80095e6 <NX7_LCD_Intake_Handler+0x4a>
		NX7_LCD_SEG_ON(0x06, 0x10);			//--> Car     : ON
 80095b2:	2110      	movs	r1, #16
 80095b4:	2006      	movs	r0, #6
 80095b6:	f7ff fd2b 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x05, 0x01);			//--> Fresh   : ON
 80095ba:	2101      	movs	r1, #1
 80095bc:	2005      	movs	r0, #5
 80095be:	f7ff fd27 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_OFF(0x05, 0x10);		//--> Recycle : OFF
 80095c2:	2110      	movs	r1, #16
 80095c4:	2005      	movs	r0, #5
 80095c6:	f7ff fcfb 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		break;
 80095ca:	e00c      	b.n	80095e6 <NX7_LCD_Intake_Handler+0x4a>
		NX7_LCD_SEG_ON(0x06, 0x10);			//--> Car     : ON
 80095cc:	2110      	movs	r1, #16
 80095ce:	2006      	movs	r0, #6
 80095d0:	f7ff fd1e 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_OFF(0x05, 0x01);		//--> Fresh   : OFF
 80095d4:	2101      	movs	r1, #1
 80095d6:	2005      	movs	r0, #5
 80095d8:	f7ff fcf2 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_ON(0x05, 0x10);			//--> Recycle : ON
 80095dc:	2110      	movs	r1, #16
 80095de:	2005      	movs	r0, #5
 80095e0:	f7ff fd16 	bl	8009010 <NX7_LCD_SEG_ON>
		break;
 80095e4:	bf00      	nop
}
 80095e6:	bf00      	nop
 80095e8:	3708      	adds	r7, #8
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
	...

080095f0 <NX7_LCD_Mode_Handler>:

/* NX7_LCD_Mode_Handler ------------------------------------------------------*/
void NX7_LCD_Mode_Handler(Mode_State state)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	4603      	mov	r3, r0
 80095f8:	71fb      	strb	r3, [r7, #7]
	switch (state)
 80095fa:	79fb      	ldrb	r3, [r7, #7]
 80095fc:	2b04      	cmp	r3, #4
 80095fe:	d862      	bhi.n	80096c6 <NX7_LCD_Mode_Handler+0xd6>
 8009600:	a201      	add	r2, pc, #4	; (adr r2, 8009608 <NX7_LCD_Mode_Handler+0x18>)
 8009602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009606:	bf00      	nop
 8009608:	0800961d 	.word	0x0800961d
 800960c:	0800963f 	.word	0x0800963f
 8009610:	08009661 	.word	0x08009661
 8009614:	08009683 	.word	0x08009683
 8009618:	080096a5 	.word	0x080096a5
	{
	case Mode_Face:
	{
		NX7_LCD_SEG_ON(0x03, 0x01);			//--> PAX  : ON
 800961c:	2101      	movs	r1, #1
 800961e:	2003      	movs	r0, #3
 8009620:	f7ff fcf6 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x07, 0x10);			//--> Face : ON
 8009624:	2110      	movs	r1, #16
 8009626:	2007      	movs	r0, #7
 8009628:	f7ff fcf2 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_OFF(0x03, 0x10);		//--> Foot : OFF
 800962c:	2110      	movs	r1, #16
 800962e:	2003      	movs	r0, #3
 8009630:	f7ff fcc6 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x07, 0x20);		//--> Def  : OFF
 8009634:	2120      	movs	r1, #32
 8009636:	2007      	movs	r0, #7
 8009638:	f7ff fcc2 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		break;
 800963c:	e043      	b.n	80096c6 <NX7_LCD_Mode_Handler+0xd6>
	}
	case Mode_Face_Foot:
	{
		NX7_LCD_SEG_ON(0x03, 0x01);			//--> PAX  : ON
 800963e:	2101      	movs	r1, #1
 8009640:	2003      	movs	r0, #3
 8009642:	f7ff fce5 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x07, 0x10);			//--> Face : ON
 8009646:	2110      	movs	r1, #16
 8009648:	2007      	movs	r0, #7
 800964a:	f7ff fce1 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x03, 0x10);			//--> Foot : ON
 800964e:	2110      	movs	r1, #16
 8009650:	2003      	movs	r0, #3
 8009652:	f7ff fcdd 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_OFF(0x07, 0x20);		//--> Def  : OFF
 8009656:	2120      	movs	r1, #32
 8009658:	2007      	movs	r0, #7
 800965a:	f7ff fcb1 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		break;
 800965e:	e032      	b.n	80096c6 <NX7_LCD_Mode_Handler+0xd6>
	}
	case Mode_Foot:
	{
		NX7_LCD_SEG_ON(0x03, 0x01);			//--> PAX  : ON
 8009660:	2101      	movs	r1, #1
 8009662:	2003      	movs	r0, #3
 8009664:	f7ff fcd4 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_OFF(0x07, 0x10);		//--> Face : OFF
 8009668:	2110      	movs	r1, #16
 800966a:	2007      	movs	r0, #7
 800966c:	f7ff fca8 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_ON(0x03, 0x10);			//--> Foot : ON
 8009670:	2110      	movs	r1, #16
 8009672:	2003      	movs	r0, #3
 8009674:	f7ff fccc 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_OFF(0x07, 0x20);		//--> Def  : OFF
 8009678:	2120      	movs	r1, #32
 800967a:	2007      	movs	r0, #7
 800967c:	f7ff fca0 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		break;
 8009680:	e021      	b.n	80096c6 <NX7_LCD_Mode_Handler+0xd6>
	}
	case Mode_Foot_Def:
	{
		NX7_LCD_SEG_ON(0x03, 0x01);			//--> PAX  : ON
 8009682:	2101      	movs	r1, #1
 8009684:	2003      	movs	r0, #3
 8009686:	f7ff fcc3 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_OFF(0x07, 0x10);		//--> Face : OFF
 800968a:	2110      	movs	r1, #16
 800968c:	2007      	movs	r0, #7
 800968e:	f7ff fc97 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_ON(0x03, 0x10);			//--> Foot : ON
 8009692:	2110      	movs	r1, #16
 8009694:	2003      	movs	r0, #3
 8009696:	f7ff fcbb 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x07, 0x20);			//--> Def  : ON
 800969a:	2120      	movs	r1, #32
 800969c:	2007      	movs	r0, #7
 800969e:	f7ff fcb7 	bl	8009010 <NX7_LCD_SEG_ON>
		break;
 80096a2:	e010      	b.n	80096c6 <NX7_LCD_Mode_Handler+0xd6>
	}
	case Mode_Def:
	{
		NX7_LCD_SEG_ON(0x03, 0x01);			//--> PAX  : ON
 80096a4:	2101      	movs	r1, #1
 80096a6:	2003      	movs	r0, #3
 80096a8:	f7ff fcb2 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_OFF(0x07, 0x10);		//--> Face : OFF
 80096ac:	2110      	movs	r1, #16
 80096ae:	2007      	movs	r0, #7
 80096b0:	f7ff fc86 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x03, 0x10);		//--> Foot : OFF
 80096b4:	2110      	movs	r1, #16
 80096b6:	2003      	movs	r0, #3
 80096b8:	f7ff fc82 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_ON(0x07, 0x20);			//--> Def  : ON
 80096bc:	2120      	movs	r1, #32
 80096be:	2007      	movs	r0, #7
 80096c0:	f7ff fca6 	bl	8009010 <NX7_LCD_SEG_ON>
		break;
 80096c4:	bf00      	nop
	}
	}
}
 80096c6:	bf00      	nop
 80096c8:	3708      	adds	r7, #8
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop

080096d0 <NX7_LCD_Blower_Handler>:

}

/* NX7_LCD_Blower_Handler ----------------------------------------------------*/
void NX7_LCD_Blower_Handler(Blower_State state)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	4603      	mov	r3, r0
 80096d8:	71fb      	strb	r3, [r7, #7]
	switch (state)
 80096da:	79fb      	ldrb	r3, [r7, #7]
 80096dc:	2b08      	cmp	r3, #8
 80096de:	f200 8162 	bhi.w	80099a6 <NX7_LCD_Blower_Handler+0x2d6>
 80096e2:	a201      	add	r2, pc, #4	; (adr r2, 80096e8 <NX7_LCD_Blower_Handler+0x18>)
 80096e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e8:	0800970d 	.word	0x0800970d
 80096ec:	08009757 	.word	0x08009757
 80096f0:	080097a1 	.word	0x080097a1
 80096f4:	080097eb 	.word	0x080097eb
 80096f8:	08009835 	.word	0x08009835
 80096fc:	0800987f 	.word	0x0800987f
 8009700:	080098c9 	.word	0x080098c9
 8009704:	08009913 	.word	0x08009913
 8009708:	0800995d 	.word	0x0800995d
	{
	case Blower_OFF:
	{
		NX7_LCD_SEG_ON(0x05, 0x02);			//--> BL : ON
 800970c:	2102      	movs	r1, #2
 800970e:	2005      	movs	r0, #5
 8009710:	f7ff fc7e 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_OFF(0x04, 0x10);		//--> L1 : OFF
 8009714:	2110      	movs	r1, #16
 8009716:	2004      	movs	r0, #4
 8009718:	f7ff fc52 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x04, 0x20);		//--> L2 : OFF
 800971c:	2120      	movs	r1, #32
 800971e:	2004      	movs	r0, #4
 8009720:	f7ff fc4e 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x04, 0x40);		//--> L3 : OFF
 8009724:	2140      	movs	r1, #64	; 0x40
 8009726:	2004      	movs	r0, #4
 8009728:	f7ff fc4a 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x04, 0x80);		//--> L4 : OFF
 800972c:	2180      	movs	r1, #128	; 0x80
 800972e:	2004      	movs	r0, #4
 8009730:	f7ff fc46 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x04, 0x08);		//--> L5 : OFF
 8009734:	2108      	movs	r1, #8
 8009736:	2004      	movs	r0, #4
 8009738:	f7ff fc42 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x04, 0x04);		//--> L6 : OFF
 800973c:	2104      	movs	r1, #4
 800973e:	2004      	movs	r0, #4
 8009740:	f7ff fc3e 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x04, 0x02);		//--> L7 : OFF
 8009744:	2102      	movs	r1, #2
 8009746:	2004      	movs	r0, #4
 8009748:	f7ff fc3a 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x04, 0x01);		//--> L8 : OFF
 800974c:	2101      	movs	r1, #1
 800974e:	2004      	movs	r0, #4
 8009750:	f7ff fc36 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		break;
 8009754:	e127      	b.n	80099a6 <NX7_LCD_Blower_Handler+0x2d6>
	}
	case Blower_L1:
	{
		NX7_LCD_SEG_ON(0x05, 0x02);			//--> BL : ON
 8009756:	2102      	movs	r1, #2
 8009758:	2005      	movs	r0, #5
 800975a:	f7ff fc59 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x04, 0x10);			//--> L1 : ON
 800975e:	2110      	movs	r1, #16
 8009760:	2004      	movs	r0, #4
 8009762:	f7ff fc55 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_OFF(0x04, 0x20);		//--> L2 : OFF
 8009766:	2120      	movs	r1, #32
 8009768:	2004      	movs	r0, #4
 800976a:	f7ff fc29 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x04, 0x40);		//--> L3 : OFF
 800976e:	2140      	movs	r1, #64	; 0x40
 8009770:	2004      	movs	r0, #4
 8009772:	f7ff fc25 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x04, 0x80);		//--> L4 : OFF
 8009776:	2180      	movs	r1, #128	; 0x80
 8009778:	2004      	movs	r0, #4
 800977a:	f7ff fc21 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x04, 0x08);		//--> L5 : OFF
 800977e:	2108      	movs	r1, #8
 8009780:	2004      	movs	r0, #4
 8009782:	f7ff fc1d 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x04, 0x04);		//--> L6 : OFF
 8009786:	2104      	movs	r1, #4
 8009788:	2004      	movs	r0, #4
 800978a:	f7ff fc19 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x04, 0x02);		//--> L7 : OFF
 800978e:	2102      	movs	r1, #2
 8009790:	2004      	movs	r0, #4
 8009792:	f7ff fc15 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x04, 0x01);		//--> L8 : OFF
 8009796:	2101      	movs	r1, #1
 8009798:	2004      	movs	r0, #4
 800979a:	f7ff fc11 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		break;
 800979e:	e102      	b.n	80099a6 <NX7_LCD_Blower_Handler+0x2d6>
	}
	case Blower_L2:
	{
		NX7_LCD_SEG_ON(0x05, 0x02);			//--> BL : ON
 80097a0:	2102      	movs	r1, #2
 80097a2:	2005      	movs	r0, #5
 80097a4:	f7ff fc34 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x04, 0x10);			//--> L1 : ON
 80097a8:	2110      	movs	r1, #16
 80097aa:	2004      	movs	r0, #4
 80097ac:	f7ff fc30 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x04, 0x20);			//--> L2 : ON
 80097b0:	2120      	movs	r1, #32
 80097b2:	2004      	movs	r0, #4
 80097b4:	f7ff fc2c 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_OFF(0x04, 0x40);		//--> L3 : OFF
 80097b8:	2140      	movs	r1, #64	; 0x40
 80097ba:	2004      	movs	r0, #4
 80097bc:	f7ff fc00 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x04, 0x80);		//--> L4 : OFF
 80097c0:	2180      	movs	r1, #128	; 0x80
 80097c2:	2004      	movs	r0, #4
 80097c4:	f7ff fbfc 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x04, 0x08);		//--> L5 : OFF
 80097c8:	2108      	movs	r1, #8
 80097ca:	2004      	movs	r0, #4
 80097cc:	f7ff fbf8 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x04, 0x04);		//--> L6 : OFF
 80097d0:	2104      	movs	r1, #4
 80097d2:	2004      	movs	r0, #4
 80097d4:	f7ff fbf4 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x04, 0x02);		//--> L7 : OFF
 80097d8:	2102      	movs	r1, #2
 80097da:	2004      	movs	r0, #4
 80097dc:	f7ff fbf0 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x04, 0x01);		//--> L8 : OFF
 80097e0:	2101      	movs	r1, #1
 80097e2:	2004      	movs	r0, #4
 80097e4:	f7ff fbec 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		break;
 80097e8:	e0dd      	b.n	80099a6 <NX7_LCD_Blower_Handler+0x2d6>
	}
	case Blower_L3:
	{
	NX7_LCD_SEG_ON(0x05, 0x02);			//--> BL : ON
 80097ea:	2102      	movs	r1, #2
 80097ec:	2005      	movs	r0, #5
 80097ee:	f7ff fc0f 	bl	8009010 <NX7_LCD_SEG_ON>
	NX7_LCD_SEG_ON(0x04, 0x10);			//--> L1 : ON
 80097f2:	2110      	movs	r1, #16
 80097f4:	2004      	movs	r0, #4
 80097f6:	f7ff fc0b 	bl	8009010 <NX7_LCD_SEG_ON>
	NX7_LCD_SEG_ON(0x04, 0x20);			//--> L2 : ON
 80097fa:	2120      	movs	r1, #32
 80097fc:	2004      	movs	r0, #4
 80097fe:	f7ff fc07 	bl	8009010 <NX7_LCD_SEG_ON>
	NX7_LCD_SEG_ON(0x04, 0x40);			//--> L3 : ON
 8009802:	2140      	movs	r1, #64	; 0x40
 8009804:	2004      	movs	r0, #4
 8009806:	f7ff fc03 	bl	8009010 <NX7_LCD_SEG_ON>
	NX7_LCD_SEG_OFF(0x04, 0x80);		//--> L4 : OFF
 800980a:	2180      	movs	r1, #128	; 0x80
 800980c:	2004      	movs	r0, #4
 800980e:	f7ff fbd7 	bl	8008fc0 <NX7_LCD_SEG_OFF>
	NX7_LCD_SEG_OFF(0x04, 0x08);		//--> L5 : OFF
 8009812:	2108      	movs	r1, #8
 8009814:	2004      	movs	r0, #4
 8009816:	f7ff fbd3 	bl	8008fc0 <NX7_LCD_SEG_OFF>
	NX7_LCD_SEG_OFF(0x04, 0x04);		//--> L6 : OFF
 800981a:	2104      	movs	r1, #4
 800981c:	2004      	movs	r0, #4
 800981e:	f7ff fbcf 	bl	8008fc0 <NX7_LCD_SEG_OFF>
	NX7_LCD_SEG_OFF(0x04, 0x02);		//--> L7 : OFF
 8009822:	2102      	movs	r1, #2
 8009824:	2004      	movs	r0, #4
 8009826:	f7ff fbcb 	bl	8008fc0 <NX7_LCD_SEG_OFF>
	NX7_LCD_SEG_OFF(0x04, 0x01);		//--> L8 : OFF
 800982a:	2101      	movs	r1, #1
 800982c:	2004      	movs	r0, #4
 800982e:	f7ff fbc7 	bl	8008fc0 <NX7_LCD_SEG_OFF>
	break;
 8009832:	e0b8      	b.n	80099a6 <NX7_LCD_Blower_Handler+0x2d6>
	}
	case Blower_L4:
	{
		NX7_LCD_SEG_ON(0x05, 0x02);			//--> BL : ON
 8009834:	2102      	movs	r1, #2
 8009836:	2005      	movs	r0, #5
 8009838:	f7ff fbea 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x04, 0x10);			//--> L1 : ON
 800983c:	2110      	movs	r1, #16
 800983e:	2004      	movs	r0, #4
 8009840:	f7ff fbe6 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x04, 0x20);			//--> L2 : ON
 8009844:	2120      	movs	r1, #32
 8009846:	2004      	movs	r0, #4
 8009848:	f7ff fbe2 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x04, 0x40);			//--> L3 : ON
 800984c:	2140      	movs	r1, #64	; 0x40
 800984e:	2004      	movs	r0, #4
 8009850:	f7ff fbde 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x04, 0x80);			//--> L4 : ON
 8009854:	2180      	movs	r1, #128	; 0x80
 8009856:	2004      	movs	r0, #4
 8009858:	f7ff fbda 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_OFF(0x04, 0x08);		//--> L5 : OFF
 800985c:	2108      	movs	r1, #8
 800985e:	2004      	movs	r0, #4
 8009860:	f7ff fbae 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x04, 0x04);		//--> L6 : OFF
 8009864:	2104      	movs	r1, #4
 8009866:	2004      	movs	r0, #4
 8009868:	f7ff fbaa 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x04, 0x02);		//--> L7 : OFF
 800986c:	2102      	movs	r1, #2
 800986e:	2004      	movs	r0, #4
 8009870:	f7ff fba6 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x04, 0x01);		//--> L8 : OFF
 8009874:	2101      	movs	r1, #1
 8009876:	2004      	movs	r0, #4
 8009878:	f7ff fba2 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		break;
 800987c:	e093      	b.n	80099a6 <NX7_LCD_Blower_Handler+0x2d6>
	}
	case Blower_L5:
	{
		NX7_LCD_SEG_ON(0x05, 0x02);			//--> BL : ON
 800987e:	2102      	movs	r1, #2
 8009880:	2005      	movs	r0, #5
 8009882:	f7ff fbc5 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x04, 0x10);			//--> L1 : ON
 8009886:	2110      	movs	r1, #16
 8009888:	2004      	movs	r0, #4
 800988a:	f7ff fbc1 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x04, 0x20);			//--> L2 : ON
 800988e:	2120      	movs	r1, #32
 8009890:	2004      	movs	r0, #4
 8009892:	f7ff fbbd 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x04, 0x40);			//--> L3 : ON
 8009896:	2140      	movs	r1, #64	; 0x40
 8009898:	2004      	movs	r0, #4
 800989a:	f7ff fbb9 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x04, 0x80);			//--> L4 : ON
 800989e:	2180      	movs	r1, #128	; 0x80
 80098a0:	2004      	movs	r0, #4
 80098a2:	f7ff fbb5 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x04, 0x08);			//--> L5 : ON
 80098a6:	2108      	movs	r1, #8
 80098a8:	2004      	movs	r0, #4
 80098aa:	f7ff fbb1 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_OFF(0x04, 0x04);		//--> L6 : OFF
 80098ae:	2104      	movs	r1, #4
 80098b0:	2004      	movs	r0, #4
 80098b2:	f7ff fb85 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x04, 0x02);		//--> L7 : OFF
 80098b6:	2102      	movs	r1, #2
 80098b8:	2004      	movs	r0, #4
 80098ba:	f7ff fb81 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x04, 0x01);		//--> L8 : OFF
 80098be:	2101      	movs	r1, #1
 80098c0:	2004      	movs	r0, #4
 80098c2:	f7ff fb7d 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		break;
 80098c6:	e06e      	b.n	80099a6 <NX7_LCD_Blower_Handler+0x2d6>
	}
	case Blower_L6:
	{
		NX7_LCD_SEG_ON(0x05, 0x02);			//--> BL : ON
 80098c8:	2102      	movs	r1, #2
 80098ca:	2005      	movs	r0, #5
 80098cc:	f7ff fba0 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x04, 0x10);			//--> L1 : ON
 80098d0:	2110      	movs	r1, #16
 80098d2:	2004      	movs	r0, #4
 80098d4:	f7ff fb9c 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x04, 0x20);			//--> L2 : ON
 80098d8:	2120      	movs	r1, #32
 80098da:	2004      	movs	r0, #4
 80098dc:	f7ff fb98 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x04, 0x40);			//--> L3 : ON
 80098e0:	2140      	movs	r1, #64	; 0x40
 80098e2:	2004      	movs	r0, #4
 80098e4:	f7ff fb94 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x04, 0x80);			//--> L4 : ON
 80098e8:	2180      	movs	r1, #128	; 0x80
 80098ea:	2004      	movs	r0, #4
 80098ec:	f7ff fb90 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x04, 0x08);			//--> L5 : ON
 80098f0:	2108      	movs	r1, #8
 80098f2:	2004      	movs	r0, #4
 80098f4:	f7ff fb8c 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x04, 0x04);			//--> L6 : ON
 80098f8:	2104      	movs	r1, #4
 80098fa:	2004      	movs	r0, #4
 80098fc:	f7ff fb88 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_OFF(0x04, 0x02);		//--> L7 : OFF
 8009900:	2102      	movs	r1, #2
 8009902:	2004      	movs	r0, #4
 8009904:	f7ff fb5c 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		NX7_LCD_SEG_OFF(0x04, 0x01);		//--> L8 : OFF
 8009908:	2101      	movs	r1, #1
 800990a:	2004      	movs	r0, #4
 800990c:	f7ff fb58 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		break;
 8009910:	e049      	b.n	80099a6 <NX7_LCD_Blower_Handler+0x2d6>
	}
	case Blower_L7:
	{
		NX7_LCD_SEG_ON(0x05, 0x02);			//--> BL : ON
 8009912:	2102      	movs	r1, #2
 8009914:	2005      	movs	r0, #5
 8009916:	f7ff fb7b 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x04, 0x10);			//--> L1 : ON
 800991a:	2110      	movs	r1, #16
 800991c:	2004      	movs	r0, #4
 800991e:	f7ff fb77 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x04, 0x20);			//--> L2 : ON
 8009922:	2120      	movs	r1, #32
 8009924:	2004      	movs	r0, #4
 8009926:	f7ff fb73 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x04, 0x40);			//--> L3 : ON
 800992a:	2140      	movs	r1, #64	; 0x40
 800992c:	2004      	movs	r0, #4
 800992e:	f7ff fb6f 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x04, 0x80);			//--> L4 : ON
 8009932:	2180      	movs	r1, #128	; 0x80
 8009934:	2004      	movs	r0, #4
 8009936:	f7ff fb6b 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x04, 0x08);			//--> L5 : ON
 800993a:	2108      	movs	r1, #8
 800993c:	2004      	movs	r0, #4
 800993e:	f7ff fb67 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x04, 0x04);			//--> L6 : ON
 8009942:	2104      	movs	r1, #4
 8009944:	2004      	movs	r0, #4
 8009946:	f7ff fb63 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x04, 0x02);			//--> L7 : ON
 800994a:	2102      	movs	r1, #2
 800994c:	2004      	movs	r0, #4
 800994e:	f7ff fb5f 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_OFF(0x04, 0x01);		//--> L8 : OFF
 8009952:	2101      	movs	r1, #1
 8009954:	2004      	movs	r0, #4
 8009956:	f7ff fb33 	bl	8008fc0 <NX7_LCD_SEG_OFF>
		break;
 800995a:	e024      	b.n	80099a6 <NX7_LCD_Blower_Handler+0x2d6>
	}
	case Blower_L8:
	{
		NX7_LCD_SEG_ON(0x05, 0x02);			//--> BL : ON
 800995c:	2102      	movs	r1, #2
 800995e:	2005      	movs	r0, #5
 8009960:	f7ff fb56 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x04, 0x10);			//--> L1 : ON
 8009964:	2110      	movs	r1, #16
 8009966:	2004      	movs	r0, #4
 8009968:	f7ff fb52 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x04, 0x20);			//--> L2 : ON
 800996c:	2120      	movs	r1, #32
 800996e:	2004      	movs	r0, #4
 8009970:	f7ff fb4e 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x04, 0x40);			//--> L3 : ON
 8009974:	2140      	movs	r1, #64	; 0x40
 8009976:	2004      	movs	r0, #4
 8009978:	f7ff fb4a 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x04, 0x80);			//--> L4 : ON
 800997c:	2180      	movs	r1, #128	; 0x80
 800997e:	2004      	movs	r0, #4
 8009980:	f7ff fb46 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x04, 0x08);			//--> L5 : ON
 8009984:	2108      	movs	r1, #8
 8009986:	2004      	movs	r0, #4
 8009988:	f7ff fb42 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x04, 0x04);			//--> L6 : ON
 800998c:	2104      	movs	r1, #4
 800998e:	2004      	movs	r0, #4
 8009990:	f7ff fb3e 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x04, 0x02);			//--> L7 : ON
 8009994:	2102      	movs	r1, #2
 8009996:	2004      	movs	r0, #4
 8009998:	f7ff fb3a 	bl	8009010 <NX7_LCD_SEG_ON>
		NX7_LCD_SEG_ON(0x04, 0x01);			//--> L8 : ON
 800999c:	2101      	movs	r1, #1
 800999e:	2004      	movs	r0, #4
 80099a0:	f7ff fb36 	bl	8009010 <NX7_LCD_SEG_ON>
		break;
 80099a4:	bf00      	nop
	}
	}
}
 80099a6:	bf00      	nop
 80099a8:	3708      	adds	r7, #8
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop

080099b0 <NX7_LCD_Set_Point_Segment>:

/* NX7_LCD_Set_Point_Segment -------------------------------------------------*/
void NX7_LCD_Set_Point_Segment(char ch, int counter)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	4603      	mov	r3, r0
 80099b8:	6039      	str	r1, [r7, #0]
 80099ba:	71fb      	strb	r3, [r7, #7]
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	2b03      	cmp	r3, #3
 80099c0:	f200 84f5 	bhi.w	800a3ae <NX7_LCD_Set_Point_Segment+0x9fe>
 80099c4:	a201      	add	r2, pc, #4	; (adr r2, 80099cc <NX7_LCD_Set_Point_Segment+0x1c>)
 80099c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ca:	bf00      	nop
 80099cc:	080099dd 	.word	0x080099dd
 80099d0:	08009d1b 	.word	0x08009d1b
 80099d4:	0800a067 	.word	0x0800a067
 80099d8:	0800a0a9 	.word	0x0800a0a9
	switch (counter)
	{
		case 0:
		{
			switch (ch)
 80099dc:	79fb      	ldrb	r3, [r7, #7]
 80099de:	3b30      	subs	r3, #48	; 0x30
 80099e0:	2b1c      	cmp	r3, #28
 80099e2:	f200 84dd 	bhi.w	800a3a0 <NX7_LCD_Set_Point_Segment+0x9f0>
 80099e6:	a201      	add	r2, pc, #4	; (adr r2, 80099ec <NX7_LCD_Set_Point_Segment+0x3c>)
 80099e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ec:	08009a61 	.word	0x08009a61
 80099f0:	08009a9b 	.word	0x08009a9b
 80099f4:	08009ad5 	.word	0x08009ad5
 80099f8:	08009b0f 	.word	0x08009b0f
 80099fc:	08009b49 	.word	0x08009b49
 8009a00:	08009b83 	.word	0x08009b83
 8009a04:	08009bbd 	.word	0x08009bbd
 8009a08:	08009bf7 	.word	0x08009bf7
 8009a0c:	08009c31 	.word	0x08009c31
 8009a10:	08009c6b 	.word	0x08009c6b
 8009a14:	0800a3a1 	.word	0x0800a3a1
 8009a18:	0800a3a1 	.word	0x0800a3a1
 8009a1c:	0800a3a1 	.word	0x0800a3a1
 8009a20:	0800a3a1 	.word	0x0800a3a1
 8009a24:	0800a3a1 	.word	0x0800a3a1
 8009a28:	0800a3a1 	.word	0x0800a3a1
 8009a2c:	0800a3a1 	.word	0x0800a3a1
 8009a30:	0800a3a1 	.word	0x0800a3a1
 8009a34:	0800a3a1 	.word	0x0800a3a1
 8009a38:	0800a3a1 	.word	0x0800a3a1
 8009a3c:	0800a3a1 	.word	0x0800a3a1
 8009a40:	0800a3a1 	.word	0x0800a3a1
 8009a44:	0800a3a1 	.word	0x0800a3a1
 8009a48:	0800a3a1 	.word	0x0800a3a1
 8009a4c:	08009cdf 	.word	0x08009cdf
 8009a50:	0800a3a1 	.word	0x0800a3a1
 8009a54:	0800a3a1 	.word	0x0800a3a1
 8009a58:	0800a3a1 	.word	0x0800a3a1
 8009a5c:	08009ca5 	.word	0x08009ca5
			{
				case '0':
				{
					NX7_LCD_SEG_ON(0x02, 0x80);			//--> Seg.A : ON
 8009a60:	2180      	movs	r1, #128	; 0x80
 8009a62:	2002      	movs	r0, #2
 8009a64:	f7ff fad4 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x02, 0x40);			//--> Seg.B : ON
 8009a68:	2140      	movs	r1, #64	; 0x40
 8009a6a:	2002      	movs	r0, #2
 8009a6c:	f7ff fad0 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x02, 0x20);			//--> Seg.C : ON
 8009a70:	2120      	movs	r1, #32
 8009a72:	2002      	movs	r0, #2
 8009a74:	f7ff facc 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x02, 0x10);			//--> Seg.D : ON
 8009a78:	2110      	movs	r1, #16
 8009a7a:	2002      	movs	r0, #2
 8009a7c:	f7ff fac8 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x03, 0x02);			//--> Seg.E : ON
 8009a80:	2102      	movs	r1, #2
 8009a82:	2003      	movs	r0, #3
 8009a84:	f7ff fac4 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x03, 0x08);			//--> Seg.F : ON
 8009a88:	2108      	movs	r1, #8
 8009a8a:	2003      	movs	r0, #3
 8009a8c:	f7ff fac0 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x03, 0x04);		//--> Seg.G : OFF
 8009a90:	2104      	movs	r1, #4
 8009a92:	2003      	movs	r0, #3
 8009a94:	f7ff fa94 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					break;
 8009a98:	e13e      	b.n	8009d18 <NX7_LCD_Set_Point_Segment+0x368>
				}
				case '1':
				{
					NX7_LCD_SEG_OFF(0x02, 0x80);		//--> Seg.A : OFF
 8009a9a:	2180      	movs	r1, #128	; 0x80
 8009a9c:	2002      	movs	r0, #2
 8009a9e:	f7ff fa8f 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x02, 0x40);			//--> Seg.B : ON
 8009aa2:	2140      	movs	r1, #64	; 0x40
 8009aa4:	2002      	movs	r0, #2
 8009aa6:	f7ff fab3 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x02, 0x20);			//--> Seg.C : ON
 8009aaa:	2120      	movs	r1, #32
 8009aac:	2002      	movs	r0, #2
 8009aae:	f7ff faaf 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x02, 0x10);		//--> Seg.D : OFF
 8009ab2:	2110      	movs	r1, #16
 8009ab4:	2002      	movs	r0, #2
 8009ab6:	f7ff fa83 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x03, 0x02);		//--> Seg.E : OFF
 8009aba:	2102      	movs	r1, #2
 8009abc:	2003      	movs	r0, #3
 8009abe:	f7ff fa7f 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x03, 0x08);		//--> Seg.F : OFF
 8009ac2:	2108      	movs	r1, #8
 8009ac4:	2003      	movs	r0, #3
 8009ac6:	f7ff fa7b 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x03, 0x04);		//--> Seg.G : OFF
 8009aca:	2104      	movs	r1, #4
 8009acc:	2003      	movs	r0, #3
 8009ace:	f7ff fa77 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					break;
 8009ad2:	e121      	b.n	8009d18 <NX7_LCD_Set_Point_Segment+0x368>
				}
				case '2':
				{
					NX7_LCD_SEG_ON(0x02, 0x80);			//--> Seg.A : ON
 8009ad4:	2180      	movs	r1, #128	; 0x80
 8009ad6:	2002      	movs	r0, #2
 8009ad8:	f7ff fa9a 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x02, 0x40);			//--> Seg.B : ON
 8009adc:	2140      	movs	r1, #64	; 0x40
 8009ade:	2002      	movs	r0, #2
 8009ae0:	f7ff fa96 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x02, 0x20);		//--> Seg.C : OFF
 8009ae4:	2120      	movs	r1, #32
 8009ae6:	2002      	movs	r0, #2
 8009ae8:	f7ff fa6a 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x02, 0x10);			//--> Seg.D : ON
 8009aec:	2110      	movs	r1, #16
 8009aee:	2002      	movs	r0, #2
 8009af0:	f7ff fa8e 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x03, 0x02);			//--> Seg.E : ON
 8009af4:	2102      	movs	r1, #2
 8009af6:	2003      	movs	r0, #3
 8009af8:	f7ff fa8a 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x03, 0x08);		//--> Seg.F : OFF
 8009afc:	2108      	movs	r1, #8
 8009afe:	2003      	movs	r0, #3
 8009b00:	f7ff fa5e 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x03, 0x04);			//--> Seg.G : ON
 8009b04:	2104      	movs	r1, #4
 8009b06:	2003      	movs	r0, #3
 8009b08:	f7ff fa82 	bl	8009010 <NX7_LCD_SEG_ON>
					break;
 8009b0c:	e104      	b.n	8009d18 <NX7_LCD_Set_Point_Segment+0x368>
				}
				case '3':
				{
					NX7_LCD_SEG_ON(0x02, 0x80);			//--> Seg.A : ON
 8009b0e:	2180      	movs	r1, #128	; 0x80
 8009b10:	2002      	movs	r0, #2
 8009b12:	f7ff fa7d 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x02, 0x40);			//--> Seg.B : ON
 8009b16:	2140      	movs	r1, #64	; 0x40
 8009b18:	2002      	movs	r0, #2
 8009b1a:	f7ff fa79 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x02, 0x20);			//--> Seg.C : ON
 8009b1e:	2120      	movs	r1, #32
 8009b20:	2002      	movs	r0, #2
 8009b22:	f7ff fa75 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x02, 0x10);			//--> Seg.D : ON
 8009b26:	2110      	movs	r1, #16
 8009b28:	2002      	movs	r0, #2
 8009b2a:	f7ff fa71 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x03, 0x02);		//--> Seg.E : OFF
 8009b2e:	2102      	movs	r1, #2
 8009b30:	2003      	movs	r0, #3
 8009b32:	f7ff fa45 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x03, 0x08);		//--> Seg.F : OFF
 8009b36:	2108      	movs	r1, #8
 8009b38:	2003      	movs	r0, #3
 8009b3a:	f7ff fa41 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x03, 0x04);			//--> Seg.G : ON
 8009b3e:	2104      	movs	r1, #4
 8009b40:	2003      	movs	r0, #3
 8009b42:	f7ff fa65 	bl	8009010 <NX7_LCD_SEG_ON>
					break;
 8009b46:	e0e7      	b.n	8009d18 <NX7_LCD_Set_Point_Segment+0x368>
				}
				case '4':
				{
					NX7_LCD_SEG_OFF(0x02, 0x80);		//--> Seg.A : OFF
 8009b48:	2180      	movs	r1, #128	; 0x80
 8009b4a:	2002      	movs	r0, #2
 8009b4c:	f7ff fa38 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x02, 0x40);			//--> Seg.B : ON
 8009b50:	2140      	movs	r1, #64	; 0x40
 8009b52:	2002      	movs	r0, #2
 8009b54:	f7ff fa5c 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x02, 0x20);			//--> Seg.C : ON
 8009b58:	2120      	movs	r1, #32
 8009b5a:	2002      	movs	r0, #2
 8009b5c:	f7ff fa58 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x02, 0x10);		//--> Seg.D : OFF
 8009b60:	2110      	movs	r1, #16
 8009b62:	2002      	movs	r0, #2
 8009b64:	f7ff fa2c 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x03, 0x02);		//--> Seg.E : OFF
 8009b68:	2102      	movs	r1, #2
 8009b6a:	2003      	movs	r0, #3
 8009b6c:	f7ff fa28 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x03, 0x08);			//--> Seg.F : ON
 8009b70:	2108      	movs	r1, #8
 8009b72:	2003      	movs	r0, #3
 8009b74:	f7ff fa4c 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x03, 0x04);			//--> Seg.G : ON
 8009b78:	2104      	movs	r1, #4
 8009b7a:	2003      	movs	r0, #3
 8009b7c:	f7ff fa48 	bl	8009010 <NX7_LCD_SEG_ON>
					break;
 8009b80:	e0ca      	b.n	8009d18 <NX7_LCD_Set_Point_Segment+0x368>
				}
				case '5':
				{
					NX7_LCD_SEG_ON(0x02, 0x80);			//--> Seg.A : ON
 8009b82:	2180      	movs	r1, #128	; 0x80
 8009b84:	2002      	movs	r0, #2
 8009b86:	f7ff fa43 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x02, 0x40);		//--> Seg.B : OFF
 8009b8a:	2140      	movs	r1, #64	; 0x40
 8009b8c:	2002      	movs	r0, #2
 8009b8e:	f7ff fa17 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x02, 0x20);			//--> Seg.C : ON
 8009b92:	2120      	movs	r1, #32
 8009b94:	2002      	movs	r0, #2
 8009b96:	f7ff fa3b 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x02, 0x10);			//--> Seg.D : ON
 8009b9a:	2110      	movs	r1, #16
 8009b9c:	2002      	movs	r0, #2
 8009b9e:	f7ff fa37 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x03, 0x02);		//--> Seg.E : OFF
 8009ba2:	2102      	movs	r1, #2
 8009ba4:	2003      	movs	r0, #3
 8009ba6:	f7ff fa0b 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x03, 0x08);			//--> Seg.F : ON
 8009baa:	2108      	movs	r1, #8
 8009bac:	2003      	movs	r0, #3
 8009bae:	f7ff fa2f 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x03, 0x04);			//--> Seg.G : ON
 8009bb2:	2104      	movs	r1, #4
 8009bb4:	2003      	movs	r0, #3
 8009bb6:	f7ff fa2b 	bl	8009010 <NX7_LCD_SEG_ON>
					break;
 8009bba:	e0ad      	b.n	8009d18 <NX7_LCD_Set_Point_Segment+0x368>
				}
				case '6':
				{
					NX7_LCD_SEG_ON(0x02, 0x80);			//--> Seg.A : ON
 8009bbc:	2180      	movs	r1, #128	; 0x80
 8009bbe:	2002      	movs	r0, #2
 8009bc0:	f7ff fa26 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x02, 0x40);		//--> Seg.B : OFF
 8009bc4:	2140      	movs	r1, #64	; 0x40
 8009bc6:	2002      	movs	r0, #2
 8009bc8:	f7ff f9fa 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x02, 0x20);			//--> Seg.C : ON
 8009bcc:	2120      	movs	r1, #32
 8009bce:	2002      	movs	r0, #2
 8009bd0:	f7ff fa1e 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x02, 0x10);			//--> Seg.D : ON
 8009bd4:	2110      	movs	r1, #16
 8009bd6:	2002      	movs	r0, #2
 8009bd8:	f7ff fa1a 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x03, 0x02);			//--> Seg.E : ON
 8009bdc:	2102      	movs	r1, #2
 8009bde:	2003      	movs	r0, #3
 8009be0:	f7ff fa16 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x03, 0x08);			//--> Seg.F : ON
 8009be4:	2108      	movs	r1, #8
 8009be6:	2003      	movs	r0, #3
 8009be8:	f7ff fa12 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x03, 0x04);			//--> Seg.G : ON
 8009bec:	2104      	movs	r1, #4
 8009bee:	2003      	movs	r0, #3
 8009bf0:	f7ff fa0e 	bl	8009010 <NX7_LCD_SEG_ON>
					break;
 8009bf4:	e090      	b.n	8009d18 <NX7_LCD_Set_Point_Segment+0x368>
				}
				case '7':
				{
					NX7_LCD_SEG_ON(0x02, 0x80);			//--> Seg.A : ON
 8009bf6:	2180      	movs	r1, #128	; 0x80
 8009bf8:	2002      	movs	r0, #2
 8009bfa:	f7ff fa09 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x02, 0x40);			//--> Seg.B : ON
 8009bfe:	2140      	movs	r1, #64	; 0x40
 8009c00:	2002      	movs	r0, #2
 8009c02:	f7ff fa05 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x02, 0x20);			//--> Seg.C : ON
 8009c06:	2120      	movs	r1, #32
 8009c08:	2002      	movs	r0, #2
 8009c0a:	f7ff fa01 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x02, 0x10);		//--> Seg.D : OFF
 8009c0e:	2110      	movs	r1, #16
 8009c10:	2002      	movs	r0, #2
 8009c12:	f7ff f9d5 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x03, 0x02);		//--> Seg.E : OFF
 8009c16:	2102      	movs	r1, #2
 8009c18:	2003      	movs	r0, #3
 8009c1a:	f7ff f9d1 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x03, 0x08);		//--> Seg.F : OFF
 8009c1e:	2108      	movs	r1, #8
 8009c20:	2003      	movs	r0, #3
 8009c22:	f7ff f9cd 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x03, 0x04);		//--> Seg.G : OFF
 8009c26:	2104      	movs	r1, #4
 8009c28:	2003      	movs	r0, #3
 8009c2a:	f7ff f9c9 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					break;
 8009c2e:	e073      	b.n	8009d18 <NX7_LCD_Set_Point_Segment+0x368>
				}
				case '8':
				{
					NX7_LCD_SEG_ON(0x02, 0x80);			//--> Seg.A : ON
 8009c30:	2180      	movs	r1, #128	; 0x80
 8009c32:	2002      	movs	r0, #2
 8009c34:	f7ff f9ec 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x02, 0x40);			//--> Seg.B : ON
 8009c38:	2140      	movs	r1, #64	; 0x40
 8009c3a:	2002      	movs	r0, #2
 8009c3c:	f7ff f9e8 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x02, 0x20);			//--> Seg.C : ON
 8009c40:	2120      	movs	r1, #32
 8009c42:	2002      	movs	r0, #2
 8009c44:	f7ff f9e4 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x02, 0x10);			//--> Seg.D : ON
 8009c48:	2110      	movs	r1, #16
 8009c4a:	2002      	movs	r0, #2
 8009c4c:	f7ff f9e0 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x03, 0x02);			//--> Seg.E : ON
 8009c50:	2102      	movs	r1, #2
 8009c52:	2003      	movs	r0, #3
 8009c54:	f7ff f9dc 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x03, 0x08);			//--> Seg.F : ON
 8009c58:	2108      	movs	r1, #8
 8009c5a:	2003      	movs	r0, #3
 8009c5c:	f7ff f9d8 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x03, 0x04);			//--> Seg.G : ON
 8009c60:	2104      	movs	r1, #4
 8009c62:	2003      	movs	r0, #3
 8009c64:	f7ff f9d4 	bl	8009010 <NX7_LCD_SEG_ON>
					break;
 8009c68:	e056      	b.n	8009d18 <NX7_LCD_Set_Point_Segment+0x368>
				}
				case '9':
				{
					NX7_LCD_SEG_ON(0x02, 0x80);			//--> Seg.A : ON
 8009c6a:	2180      	movs	r1, #128	; 0x80
 8009c6c:	2002      	movs	r0, #2
 8009c6e:	f7ff f9cf 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x02, 0x40);			//--> Seg.B : ON
 8009c72:	2140      	movs	r1, #64	; 0x40
 8009c74:	2002      	movs	r0, #2
 8009c76:	f7ff f9cb 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x02, 0x20);			//--> Seg.C : ON
 8009c7a:	2120      	movs	r1, #32
 8009c7c:	2002      	movs	r0, #2
 8009c7e:	f7ff f9c7 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x02, 0x10);			//--> Seg.D : ON
 8009c82:	2110      	movs	r1, #16
 8009c84:	2002      	movs	r0, #2
 8009c86:	f7ff f9c3 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x03, 0x02);		//--> Seg.E : OFF
 8009c8a:	2102      	movs	r1, #2
 8009c8c:	2003      	movs	r0, #3
 8009c8e:	f7ff f997 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x03, 0x08);			//--> Seg.F : ON
 8009c92:	2108      	movs	r1, #8
 8009c94:	2003      	movs	r0, #3
 8009c96:	f7ff f9bb 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x03, 0x04);			//--> Seg.G : ON
 8009c9a:	2104      	movs	r1, #4
 8009c9c:	2003      	movs	r0, #3
 8009c9e:	f7ff f9b7 	bl	8009010 <NX7_LCD_SEG_ON>
					break;
 8009ca2:	e039      	b.n	8009d18 <NX7_LCD_Set_Point_Segment+0x368>
				}
				case 'L':
				{
					NX7_LCD_SEG_OFF(0x02, 0x80);		//--> Seg.A : OFF
 8009ca4:	2180      	movs	r1, #128	; 0x80
 8009ca6:	2002      	movs	r0, #2
 8009ca8:	f7ff f98a 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x02, 0x40);		//--> Seg.B : OFF
 8009cac:	2140      	movs	r1, #64	; 0x40
 8009cae:	2002      	movs	r0, #2
 8009cb0:	f7ff f986 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x02, 0x20);		//--> Seg.C : OFF
 8009cb4:	2120      	movs	r1, #32
 8009cb6:	2002      	movs	r0, #2
 8009cb8:	f7ff f982 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x02, 0x10);			//--> Seg.D : ON
 8009cbc:	2110      	movs	r1, #16
 8009cbe:	2002      	movs	r0, #2
 8009cc0:	f7ff f9a6 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x03, 0x02);			//--> Seg.E : ON
 8009cc4:	2102      	movs	r1, #2
 8009cc6:	2003      	movs	r0, #3
 8009cc8:	f7ff f9a2 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x03, 0x08);			//--> Seg.F : ON
 8009ccc:	2108      	movs	r1, #8
 8009cce:	2003      	movs	r0, #3
 8009cd0:	f7ff f99e 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x03, 0x04);		//--> Seg.G : OFF
 8009cd4:	2104      	movs	r1, #4
 8009cd6:	2003      	movs	r0, #3
 8009cd8:	f7ff f972 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					break;
 8009cdc:	e01c      	b.n	8009d18 <NX7_LCD_Set_Point_Segment+0x368>
				}
				case 'H':
				{
					NX7_LCD_SEG_OFF(0x02, 0x80);		//--> Seg.A : OFF
 8009cde:	2180      	movs	r1, #128	; 0x80
 8009ce0:	2002      	movs	r0, #2
 8009ce2:	f7ff f96d 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x02, 0x40);			//--> Seg.B : ON
 8009ce6:	2140      	movs	r1, #64	; 0x40
 8009ce8:	2002      	movs	r0, #2
 8009cea:	f7ff f991 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x02, 0x20);			//--> Seg.C : ON
 8009cee:	2120      	movs	r1, #32
 8009cf0:	2002      	movs	r0, #2
 8009cf2:	f7ff f98d 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x02, 0x10);		//--> Seg.D : OFF
 8009cf6:	2110      	movs	r1, #16
 8009cf8:	2002      	movs	r0, #2
 8009cfa:	f7ff f961 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x03, 0x02);			//--> Seg.E : ON
 8009cfe:	2102      	movs	r1, #2
 8009d00:	2003      	movs	r0, #3
 8009d02:	f7ff f985 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x03, 0x08);			//--> Seg.F : ON
 8009d06:	2108      	movs	r1, #8
 8009d08:	2003      	movs	r0, #3
 8009d0a:	f7ff f981 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x03, 0x04);			//--> Seg.G : ON
 8009d0e:	2104      	movs	r1, #4
 8009d10:	2003      	movs	r0, #3
 8009d12:	f7ff f97d 	bl	8009010 <NX7_LCD_SEG_ON>
					break;
 8009d16:	bf00      	nop
				}
			}
			break;			
 8009d18:	e342      	b.n	800a3a0 <NX7_LCD_Set_Point_Segment+0x9f0>
		}
		case 1:
		{
			switch (ch)
 8009d1a:	79fb      	ldrb	r3, [r7, #7]
 8009d1c:	3b30      	subs	r3, #48	; 0x30
 8009d1e:	2b1f      	cmp	r3, #31
 8009d20:	f200 8340 	bhi.w	800a3a4 <NX7_LCD_Set_Point_Segment+0x9f4>
 8009d24:	a201      	add	r2, pc, #4	; (adr r2, 8009d2c <NX7_LCD_Set_Point_Segment+0x37c>)
 8009d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d2a:	bf00      	nop
 8009d2c:	08009dad 	.word	0x08009dad
 8009d30:	08009de7 	.word	0x08009de7
 8009d34:	08009e21 	.word	0x08009e21
 8009d38:	08009e5b 	.word	0x08009e5b
 8009d3c:	08009e95 	.word	0x08009e95
 8009d40:	08009ecf 	.word	0x08009ecf
 8009d44:	08009f09 	.word	0x08009f09
 8009d48:	08009f43 	.word	0x08009f43
 8009d4c:	08009f7d 	.word	0x08009f7d
 8009d50:	08009fb7 	.word	0x08009fb7
 8009d54:	0800a3a5 	.word	0x0800a3a5
 8009d58:	0800a3a5 	.word	0x0800a3a5
 8009d5c:	0800a3a5 	.word	0x0800a3a5
 8009d60:	0800a3a5 	.word	0x0800a3a5
 8009d64:	0800a3a5 	.word	0x0800a3a5
 8009d68:	0800a3a5 	.word	0x0800a3a5
 8009d6c:	0800a3a5 	.word	0x0800a3a5
 8009d70:	0800a3a5 	.word	0x0800a3a5
 8009d74:	0800a3a5 	.word	0x0800a3a5
 8009d78:	0800a3a5 	.word	0x0800a3a5
 8009d7c:	0800a3a5 	.word	0x0800a3a5
 8009d80:	0800a3a5 	.word	0x0800a3a5
 8009d84:	0800a3a5 	.word	0x0800a3a5
 8009d88:	0800a3a5 	.word	0x0800a3a5
 8009d8c:	0800a3a5 	.word	0x0800a3a5
 8009d90:	0800a02b 	.word	0x0800a02b
 8009d94:	0800a3a5 	.word	0x0800a3a5
 8009d98:	0800a3a5 	.word	0x0800a3a5
 8009d9c:	0800a3a5 	.word	0x0800a3a5
 8009da0:	0800a3a5 	.word	0x0800a3a5
 8009da4:	0800a3a5 	.word	0x0800a3a5
 8009da8:	08009ff1 	.word	0x08009ff1
			{
				case '0':
				{
					NX7_LCD_SEG_ON(0x01, 0x80);			//--> Seg.A : ON
 8009dac:	2180      	movs	r1, #128	; 0x80
 8009dae:	2001      	movs	r0, #1
 8009db0:	f7ff f92e 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x01, 0x40);			//--> Seg.B : ON
 8009db4:	2140      	movs	r1, #64	; 0x40
 8009db6:	2001      	movs	r0, #1
 8009db8:	f7ff f92a 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x01, 0x20);			//--> Seg.C : ON
 8009dbc:	2120      	movs	r1, #32
 8009dbe:	2001      	movs	r0, #1
 8009dc0:	f7ff f926 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x01, 0x10);			//--> Seg.D : ON
 8009dc4:	2110      	movs	r1, #16
 8009dc6:	2001      	movs	r0, #1
 8009dc8:	f7ff f922 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x02, 0x01);			//--> Seg.E : ON
 8009dcc:	2101      	movs	r1, #1
 8009dce:	2002      	movs	r0, #2
 8009dd0:	f7ff f91e 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x02, 0x04);			//--> Seg.F : ON
 8009dd4:	2104      	movs	r1, #4
 8009dd6:	2002      	movs	r0, #2
 8009dd8:	f7ff f91a 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x02, 0x02);		//--> Seg.G : OFF
 8009ddc:	2102      	movs	r1, #2
 8009dde:	2002      	movs	r0, #2
 8009de0:	f7ff f8ee 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					break;
 8009de4:	e13e      	b.n	800a064 <NX7_LCD_Set_Point_Segment+0x6b4>
				}
				case '1':
				{
					NX7_LCD_SEG_OFF(0x01, 0x80);		//--> Seg.A : OFF
 8009de6:	2180      	movs	r1, #128	; 0x80
 8009de8:	2001      	movs	r0, #1
 8009dea:	f7ff f8e9 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x01, 0x40);			//--> Seg.B : ON
 8009dee:	2140      	movs	r1, #64	; 0x40
 8009df0:	2001      	movs	r0, #1
 8009df2:	f7ff f90d 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x01, 0x20);			//--> Seg.C : ON
 8009df6:	2120      	movs	r1, #32
 8009df8:	2001      	movs	r0, #1
 8009dfa:	f7ff f909 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x01, 0x10);		//--> Seg.D : OFF
 8009dfe:	2110      	movs	r1, #16
 8009e00:	2001      	movs	r0, #1
 8009e02:	f7ff f8dd 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x02, 0x01);		//--> Seg.E : OFF
 8009e06:	2101      	movs	r1, #1
 8009e08:	2002      	movs	r0, #2
 8009e0a:	f7ff f8d9 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x02, 0x04);		//--> Seg.F : OFF
 8009e0e:	2104      	movs	r1, #4
 8009e10:	2002      	movs	r0, #2
 8009e12:	f7ff f8d5 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x02, 0x02);		//--> Seg.G : OFF
 8009e16:	2102      	movs	r1, #2
 8009e18:	2002      	movs	r0, #2
 8009e1a:	f7ff f8d1 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					break;
 8009e1e:	e121      	b.n	800a064 <NX7_LCD_Set_Point_Segment+0x6b4>
				}
				case '2':
				{
					NX7_LCD_SEG_ON(0x01, 0x80);			//--> Seg.A : ON
 8009e20:	2180      	movs	r1, #128	; 0x80
 8009e22:	2001      	movs	r0, #1
 8009e24:	f7ff f8f4 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x01, 0x40);			//--> Seg.B : ON
 8009e28:	2140      	movs	r1, #64	; 0x40
 8009e2a:	2001      	movs	r0, #1
 8009e2c:	f7ff f8f0 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x01, 0x20);		//--> Seg.C : OFF
 8009e30:	2120      	movs	r1, #32
 8009e32:	2001      	movs	r0, #1
 8009e34:	f7ff f8c4 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x01, 0x10);			//--> Seg.D : ON
 8009e38:	2110      	movs	r1, #16
 8009e3a:	2001      	movs	r0, #1
 8009e3c:	f7ff f8e8 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x02, 0x01);			//--> Seg.E : ON
 8009e40:	2101      	movs	r1, #1
 8009e42:	2002      	movs	r0, #2
 8009e44:	f7ff f8e4 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x02, 0x04);		//--> Seg.F : OFF
 8009e48:	2104      	movs	r1, #4
 8009e4a:	2002      	movs	r0, #2
 8009e4c:	f7ff f8b8 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x02, 0x02);			//--> Seg.G : ON
 8009e50:	2102      	movs	r1, #2
 8009e52:	2002      	movs	r0, #2
 8009e54:	f7ff f8dc 	bl	8009010 <NX7_LCD_SEG_ON>
					break;
 8009e58:	e104      	b.n	800a064 <NX7_LCD_Set_Point_Segment+0x6b4>
				}
				case '3':
				{
					NX7_LCD_SEG_ON(0x01, 0x80);			//--> Seg.A : ON
 8009e5a:	2180      	movs	r1, #128	; 0x80
 8009e5c:	2001      	movs	r0, #1
 8009e5e:	f7ff f8d7 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x01, 0x40);			//--> Seg.B : ON
 8009e62:	2140      	movs	r1, #64	; 0x40
 8009e64:	2001      	movs	r0, #1
 8009e66:	f7ff f8d3 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x01, 0x20);			//--> Seg.C : ON
 8009e6a:	2120      	movs	r1, #32
 8009e6c:	2001      	movs	r0, #1
 8009e6e:	f7ff f8cf 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x01, 0x10);			//--> Seg.D : ON
 8009e72:	2110      	movs	r1, #16
 8009e74:	2001      	movs	r0, #1
 8009e76:	f7ff f8cb 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x02, 0x01);		//--> Seg.E : OFF
 8009e7a:	2101      	movs	r1, #1
 8009e7c:	2002      	movs	r0, #2
 8009e7e:	f7ff f89f 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x02, 0x04);		//--> Seg.F : OFF
 8009e82:	2104      	movs	r1, #4
 8009e84:	2002      	movs	r0, #2
 8009e86:	f7ff f89b 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x02, 0x02);			//--> Seg.G : ON
 8009e8a:	2102      	movs	r1, #2
 8009e8c:	2002      	movs	r0, #2
 8009e8e:	f7ff f8bf 	bl	8009010 <NX7_LCD_SEG_ON>
					break;
 8009e92:	e0e7      	b.n	800a064 <NX7_LCD_Set_Point_Segment+0x6b4>
				}
				case '4':
				{
					NX7_LCD_SEG_OFF(0x01, 0x80);		//--> Seg.A : OFF
 8009e94:	2180      	movs	r1, #128	; 0x80
 8009e96:	2001      	movs	r0, #1
 8009e98:	f7ff f892 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x01, 0x40);			//--> Seg.B : ON
 8009e9c:	2140      	movs	r1, #64	; 0x40
 8009e9e:	2001      	movs	r0, #1
 8009ea0:	f7ff f8b6 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x01, 0x20);			//--> Seg.C : ON
 8009ea4:	2120      	movs	r1, #32
 8009ea6:	2001      	movs	r0, #1
 8009ea8:	f7ff f8b2 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x01, 0x10);		//--> Seg.D : OFF
 8009eac:	2110      	movs	r1, #16
 8009eae:	2001      	movs	r0, #1
 8009eb0:	f7ff f886 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x02, 0x01);		//--> Seg.E : OFF
 8009eb4:	2101      	movs	r1, #1
 8009eb6:	2002      	movs	r0, #2
 8009eb8:	f7ff f882 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x02, 0x04);			//--> Seg.F : ON
 8009ebc:	2104      	movs	r1, #4
 8009ebe:	2002      	movs	r0, #2
 8009ec0:	f7ff f8a6 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x02, 0x02);			//--> Seg.G : ON
 8009ec4:	2102      	movs	r1, #2
 8009ec6:	2002      	movs	r0, #2
 8009ec8:	f7ff f8a2 	bl	8009010 <NX7_LCD_SEG_ON>
					break;
 8009ecc:	e0ca      	b.n	800a064 <NX7_LCD_Set_Point_Segment+0x6b4>
				}
				case '5':
				{
					NX7_LCD_SEG_ON(0x01, 0x80);			//--> Seg.A : ON
 8009ece:	2180      	movs	r1, #128	; 0x80
 8009ed0:	2001      	movs	r0, #1
 8009ed2:	f7ff f89d 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x01, 0x40);		//--> Seg.B : OFF
 8009ed6:	2140      	movs	r1, #64	; 0x40
 8009ed8:	2001      	movs	r0, #1
 8009eda:	f7ff f871 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x01, 0x20);			//--> Seg.C : ON
 8009ede:	2120      	movs	r1, #32
 8009ee0:	2001      	movs	r0, #1
 8009ee2:	f7ff f895 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x01, 0x10);			//--> Seg.D : ON
 8009ee6:	2110      	movs	r1, #16
 8009ee8:	2001      	movs	r0, #1
 8009eea:	f7ff f891 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x02, 0x01);		//--> Seg.E : OFF
 8009eee:	2101      	movs	r1, #1
 8009ef0:	2002      	movs	r0, #2
 8009ef2:	f7ff f865 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x02, 0x04);			//--> Seg.F : ON
 8009ef6:	2104      	movs	r1, #4
 8009ef8:	2002      	movs	r0, #2
 8009efa:	f7ff f889 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x02, 0x02);			//--> Seg.G : ON
 8009efe:	2102      	movs	r1, #2
 8009f00:	2002      	movs	r0, #2
 8009f02:	f7ff f885 	bl	8009010 <NX7_LCD_SEG_ON>
					break;
 8009f06:	e0ad      	b.n	800a064 <NX7_LCD_Set_Point_Segment+0x6b4>
				}
				case '6':
				{
					NX7_LCD_SEG_ON(0x01, 0x80);			//--> Seg.A : ON
 8009f08:	2180      	movs	r1, #128	; 0x80
 8009f0a:	2001      	movs	r0, #1
 8009f0c:	f7ff f880 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x01, 0x40);		//--> Seg.B : OFF
 8009f10:	2140      	movs	r1, #64	; 0x40
 8009f12:	2001      	movs	r0, #1
 8009f14:	f7ff f854 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x01, 0x20);			//--> Seg.C : ON
 8009f18:	2120      	movs	r1, #32
 8009f1a:	2001      	movs	r0, #1
 8009f1c:	f7ff f878 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x01, 0x10);			//--> Seg.D : ON
 8009f20:	2110      	movs	r1, #16
 8009f22:	2001      	movs	r0, #1
 8009f24:	f7ff f874 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x02, 0x01);			//--> Seg.E : ON
 8009f28:	2101      	movs	r1, #1
 8009f2a:	2002      	movs	r0, #2
 8009f2c:	f7ff f870 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x02, 0x04);			//--> Seg.F : ON
 8009f30:	2104      	movs	r1, #4
 8009f32:	2002      	movs	r0, #2
 8009f34:	f7ff f86c 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x02, 0x02);			//--> Seg.G : ON
 8009f38:	2102      	movs	r1, #2
 8009f3a:	2002      	movs	r0, #2
 8009f3c:	f7ff f868 	bl	8009010 <NX7_LCD_SEG_ON>
					break;
 8009f40:	e090      	b.n	800a064 <NX7_LCD_Set_Point_Segment+0x6b4>
				}
				case '7':
				{
					NX7_LCD_SEG_ON(0x01, 0x80);			//--> Seg.A : ON
 8009f42:	2180      	movs	r1, #128	; 0x80
 8009f44:	2001      	movs	r0, #1
 8009f46:	f7ff f863 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x01, 0x40);			//--> Seg.B : ON
 8009f4a:	2140      	movs	r1, #64	; 0x40
 8009f4c:	2001      	movs	r0, #1
 8009f4e:	f7ff f85f 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x01, 0x20);			//--> Seg.C : ON
 8009f52:	2120      	movs	r1, #32
 8009f54:	2001      	movs	r0, #1
 8009f56:	f7ff f85b 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x01, 0x10);		//--> Seg.D : OFF
 8009f5a:	2110      	movs	r1, #16
 8009f5c:	2001      	movs	r0, #1
 8009f5e:	f7ff f82f 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x02, 0x01);		//--> Seg.E : OFF
 8009f62:	2101      	movs	r1, #1
 8009f64:	2002      	movs	r0, #2
 8009f66:	f7ff f82b 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x02, 0x04);		//--> Seg.F : OFF
 8009f6a:	2104      	movs	r1, #4
 8009f6c:	2002      	movs	r0, #2
 8009f6e:	f7ff f827 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x02, 0x02);		//--> Seg.G : OFF
 8009f72:	2102      	movs	r1, #2
 8009f74:	2002      	movs	r0, #2
 8009f76:	f7ff f823 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					break;
 8009f7a:	e073      	b.n	800a064 <NX7_LCD_Set_Point_Segment+0x6b4>
				}
				case '8':
				{
					NX7_LCD_SEG_ON(0x01, 0x80);			//--> Seg.A : ON
 8009f7c:	2180      	movs	r1, #128	; 0x80
 8009f7e:	2001      	movs	r0, #1
 8009f80:	f7ff f846 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x01, 0x40);			//--> Seg.B : ON
 8009f84:	2140      	movs	r1, #64	; 0x40
 8009f86:	2001      	movs	r0, #1
 8009f88:	f7ff f842 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x01, 0x20);			//--> Seg.C : ON
 8009f8c:	2120      	movs	r1, #32
 8009f8e:	2001      	movs	r0, #1
 8009f90:	f7ff f83e 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x01, 0x10);			//--> Seg.D : ON
 8009f94:	2110      	movs	r1, #16
 8009f96:	2001      	movs	r0, #1
 8009f98:	f7ff f83a 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x02, 0x01);			//--> Seg.E : ON
 8009f9c:	2101      	movs	r1, #1
 8009f9e:	2002      	movs	r0, #2
 8009fa0:	f7ff f836 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x02, 0x04);			//--> Seg.F : ON
 8009fa4:	2104      	movs	r1, #4
 8009fa6:	2002      	movs	r0, #2
 8009fa8:	f7ff f832 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x02, 0x02);			//--> Seg.G : ON
 8009fac:	2102      	movs	r1, #2
 8009fae:	2002      	movs	r0, #2
 8009fb0:	f7ff f82e 	bl	8009010 <NX7_LCD_SEG_ON>
					break;
 8009fb4:	e056      	b.n	800a064 <NX7_LCD_Set_Point_Segment+0x6b4>
				}
				case '9':
				{
					NX7_LCD_SEG_ON(0x01, 0x80);			//--> Seg.A : ON
 8009fb6:	2180      	movs	r1, #128	; 0x80
 8009fb8:	2001      	movs	r0, #1
 8009fba:	f7ff f829 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x01, 0x40);			//--> Seg.B : ON
 8009fbe:	2140      	movs	r1, #64	; 0x40
 8009fc0:	2001      	movs	r0, #1
 8009fc2:	f7ff f825 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x01, 0x20);			//--> Seg.C : ON
 8009fc6:	2120      	movs	r1, #32
 8009fc8:	2001      	movs	r0, #1
 8009fca:	f7ff f821 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x01, 0x10);			//--> Seg.D : ON
 8009fce:	2110      	movs	r1, #16
 8009fd0:	2001      	movs	r0, #1
 8009fd2:	f7ff f81d 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x02, 0x01);		//--> Seg.E : OFF
 8009fd6:	2101      	movs	r1, #1
 8009fd8:	2002      	movs	r0, #2
 8009fda:	f7fe fff1 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x02, 0x04);			//--> Seg.F : ON
 8009fde:	2104      	movs	r1, #4
 8009fe0:	2002      	movs	r0, #2
 8009fe2:	f7ff f815 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x02, 0x02);			//--> Seg.G : ON
 8009fe6:	2102      	movs	r1, #2
 8009fe8:	2002      	movs	r0, #2
 8009fea:	f7ff f811 	bl	8009010 <NX7_LCD_SEG_ON>
					break;
 8009fee:	e039      	b.n	800a064 <NX7_LCD_Set_Point_Segment+0x6b4>
				}
				case 'O':
				{
					NX7_LCD_SEG_ON(0x01, 0x80);			//--> Seg.A : ON
 8009ff0:	2180      	movs	r1, #128	; 0x80
 8009ff2:	2001      	movs	r0, #1
 8009ff4:	f7ff f80c 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x01, 0x40);			//--> Seg.B : ON
 8009ff8:	2140      	movs	r1, #64	; 0x40
 8009ffa:	2001      	movs	r0, #1
 8009ffc:	f7ff f808 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x01, 0x20);			//--> Seg.C : ON
 800a000:	2120      	movs	r1, #32
 800a002:	2001      	movs	r0, #1
 800a004:	f7ff f804 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x01, 0x10);			//--> Seg.D : ON
 800a008:	2110      	movs	r1, #16
 800a00a:	2001      	movs	r0, #1
 800a00c:	f7ff f800 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x02, 0x01);			//--> Seg.E : ON
 800a010:	2101      	movs	r1, #1
 800a012:	2002      	movs	r0, #2
 800a014:	f7fe fffc 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x02, 0x04);			//--> Seg.F : ON
 800a018:	2104      	movs	r1, #4
 800a01a:	2002      	movs	r0, #2
 800a01c:	f7fe fff8 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x02, 0x02);		//--> Seg.G : OFF
 800a020:	2102      	movs	r1, #2
 800a022:	2002      	movs	r0, #2
 800a024:	f7fe ffcc 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					break;
 800a028:	e01c      	b.n	800a064 <NX7_LCD_Set_Point_Segment+0x6b4>
				}
				case 'I':
				{
					NX7_LCD_SEG_OFF(0x01, 0x80);		//--> Seg.A : OFF
 800a02a:	2180      	movs	r1, #128	; 0x80
 800a02c:	2001      	movs	r0, #1
 800a02e:	f7fe ffc7 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x01, 0x40);		//--> Seg.B : OFF
 800a032:	2140      	movs	r1, #64	; 0x40
 800a034:	2001      	movs	r0, #1
 800a036:	f7fe ffc3 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x01, 0x20);		//--> Seg.C : OFF
 800a03a:	2120      	movs	r1, #32
 800a03c:	2001      	movs	r0, #1
 800a03e:	f7fe ffbf 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x01, 0x10);		//--> Seg.D : OFF
 800a042:	2110      	movs	r1, #16
 800a044:	2001      	movs	r0, #1
 800a046:	f7fe ffbb 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x02, 0x01);			//--> Seg.E : ON
 800a04a:	2101      	movs	r1, #1
 800a04c:	2002      	movs	r0, #2
 800a04e:	f7fe ffdf 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x02, 0x04);			//--> Seg.F : ON
 800a052:	2104      	movs	r1, #4
 800a054:	2002      	movs	r0, #2
 800a056:	f7fe ffdb 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x02, 0x02);		//--> Seg.G : OFF
 800a05a:	2102      	movs	r1, #2
 800a05c:	2002      	movs	r0, #2
 800a05e:	f7fe ffaf 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					break;
 800a062:	bf00      	nop
				}
			}
			break;
 800a064:	e19e      	b.n	800a3a4 <NX7_LCD_Set_Point_Segment+0x9f4>
		}
		case 2:
		{
			switch (ch)
 800a066:	79fb      	ldrb	r3, [r7, #7]
 800a068:	2b20      	cmp	r3, #32
 800a06a:	d00f      	beq.n	800a08c <NX7_LCD_Set_Point_Segment+0x6dc>
 800a06c:	2b2e      	cmp	r3, #46	; 0x2e
 800a06e:	f040 819b 	bne.w	800a3a8 <NX7_LCD_Set_Point_Segment+0x9f8>
			{
				case '.':
				{
					NX7_LCD_SEG_ON(0x00, 0x02);			//--> °C       : ON
 800a072:	2102      	movs	r1, #2
 800a074:	2000      	movs	r0, #0
 800a076:	f7fe ffcb 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x00, 0x01);		//--> °F       : OFF
 800a07a:	2101      	movs	r1, #1
 800a07c:	2000      	movs	r0, #0
 800a07e:	f7fe ff9f 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x01, 0x01);			//--> Point    : ON
 800a082:	2101      	movs	r1, #1
 800a084:	2001      	movs	r0, #1
 800a086:	f7fe ffc3 	bl	8009010 <NX7_LCD_SEG_ON>
					break;
 800a08a:	e00c      	b.n	800a0a6 <NX7_LCD_Set_Point_Segment+0x6f6>
				}
				case ' ':
				{
					NX7_LCD_SEG_OFF(0x00, 0x02);		//--> °C       : OFF
 800a08c:	2102      	movs	r1, #2
 800a08e:	2000      	movs	r0, #0
 800a090:	f7fe ff96 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x00, 0x01);		//--> °F       : OFF
 800a094:	2101      	movs	r1, #1
 800a096:	2000      	movs	r0, #0
 800a098:	f7fe ff92 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x01, 0x01);		//--> Point    : OFF
 800a09c:	2101      	movs	r1, #1
 800a09e:	2001      	movs	r0, #1
 800a0a0:	f7fe ff8e 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					break;
 800a0a4:	bf00      	nop
				}
			}
			break;
 800a0a6:	e17f      	b.n	800a3a8 <NX7_LCD_Set_Point_Segment+0x9f8>
		}
		case 3:
		{
			switch (ch)
 800a0a8:	79fb      	ldrb	r3, [r7, #7]
 800a0aa:	3b20      	subs	r3, #32
 800a0ac:	2b19      	cmp	r3, #25
 800a0ae:	f200 817d 	bhi.w	800a3ac <NX7_LCD_Set_Point_Segment+0x9fc>
 800a0b2:	a201      	add	r2, pc, #4	; (adr r2, 800a0b8 <NX7_LCD_Set_Point_Segment+0x708>)
 800a0b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0b8:	0800a365 	.word	0x0800a365
 800a0bc:	0800a3ad 	.word	0x0800a3ad
 800a0c0:	0800a3ad 	.word	0x0800a3ad
 800a0c4:	0800a3ad 	.word	0x0800a3ad
 800a0c8:	0800a3ad 	.word	0x0800a3ad
 800a0cc:	0800a3ad 	.word	0x0800a3ad
 800a0d0:	0800a3ad 	.word	0x0800a3ad
 800a0d4:	0800a3ad 	.word	0x0800a3ad
 800a0d8:	0800a3ad 	.word	0x0800a3ad
 800a0dc:	0800a3ad 	.word	0x0800a3ad
 800a0e0:	0800a3ad 	.word	0x0800a3ad
 800a0e4:	0800a3ad 	.word	0x0800a3ad
 800a0e8:	0800a3ad 	.word	0x0800a3ad
 800a0ec:	0800a3ad 	.word	0x0800a3ad
 800a0f0:	0800a3ad 	.word	0x0800a3ad
 800a0f4:	0800a3ad 	.word	0x0800a3ad
 800a0f8:	0800a121 	.word	0x0800a121
 800a0fc:	0800a15b 	.word	0x0800a15b
 800a100:	0800a195 	.word	0x0800a195
 800a104:	0800a1cf 	.word	0x0800a1cf
 800a108:	0800a209 	.word	0x0800a209
 800a10c:	0800a243 	.word	0x0800a243
 800a110:	0800a27d 	.word	0x0800a27d
 800a114:	0800a2b7 	.word	0x0800a2b7
 800a118:	0800a2f1 	.word	0x0800a2f1
 800a11c:	0800a32b 	.word	0x0800a32b
			{
				case '0':
				{
					NX7_LCD_SEG_ON(0x00, 0x80);			//--> Seg.A : ON
 800a120:	2180      	movs	r1, #128	; 0x80
 800a122:	2000      	movs	r0, #0
 800a124:	f7fe ff74 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x00, 0x40);			//--> Seg.B : ON
 800a128:	2140      	movs	r1, #64	; 0x40
 800a12a:	2000      	movs	r0, #0
 800a12c:	f7fe ff70 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x00, 0x20);			//--> Seg.C : ON
 800a130:	2120      	movs	r1, #32
 800a132:	2000      	movs	r0, #0
 800a134:	f7fe ff6c 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x00, 0x10);			//--> Seg.D : ON
 800a138:	2110      	movs	r1, #16
 800a13a:	2000      	movs	r0, #0
 800a13c:	f7fe ff68 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x01, 0x02);			//--> Seg.E : ON
 800a140:	2102      	movs	r1, #2
 800a142:	2001      	movs	r0, #1
 800a144:	f7fe ff64 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x01, 0x08);			//--> Seg.F : ON
 800a148:	2108      	movs	r1, #8
 800a14a:	2001      	movs	r0, #1
 800a14c:	f7fe ff60 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x01, 0x04);		//--> Seg.G : OFF
 800a150:	2104      	movs	r1, #4
 800a152:	2001      	movs	r0, #1
 800a154:	f7fe ff34 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					break;
 800a158:	e121      	b.n	800a39e <NX7_LCD_Set_Point_Segment+0x9ee>
				}
				case '1':
				{
					NX7_LCD_SEG_OFF(0x00, 0x80);		//--> Seg.A : OFF
 800a15a:	2180      	movs	r1, #128	; 0x80
 800a15c:	2000      	movs	r0, #0
 800a15e:	f7fe ff2f 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x00, 0x40);			//--> Seg.B : ON
 800a162:	2140      	movs	r1, #64	; 0x40
 800a164:	2000      	movs	r0, #0
 800a166:	f7fe ff53 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x00, 0x20);			//--> Seg.C : ON
 800a16a:	2120      	movs	r1, #32
 800a16c:	2000      	movs	r0, #0
 800a16e:	f7fe ff4f 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x00, 0x10);		//--> Seg.D : OFF
 800a172:	2110      	movs	r1, #16
 800a174:	2000      	movs	r0, #0
 800a176:	f7fe ff23 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x01, 0x02);		//--> Seg.E : OFF
 800a17a:	2102      	movs	r1, #2
 800a17c:	2001      	movs	r0, #1
 800a17e:	f7fe ff1f 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x01, 0x08);		//--> Seg.F : OFF
 800a182:	2108      	movs	r1, #8
 800a184:	2001      	movs	r0, #1
 800a186:	f7fe ff1b 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x01, 0x04);		//--> Seg.G : OFF
 800a18a:	2104      	movs	r1, #4
 800a18c:	2001      	movs	r0, #1
 800a18e:	f7fe ff17 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					break;
 800a192:	e104      	b.n	800a39e <NX7_LCD_Set_Point_Segment+0x9ee>
				}
				case '2':
				{
					NX7_LCD_SEG_ON(0x00, 0x80);			//--> Seg.A : ON
 800a194:	2180      	movs	r1, #128	; 0x80
 800a196:	2000      	movs	r0, #0
 800a198:	f7fe ff3a 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x00, 0x40);			//--> Seg.B : ON
 800a19c:	2140      	movs	r1, #64	; 0x40
 800a19e:	2000      	movs	r0, #0
 800a1a0:	f7fe ff36 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x00, 0x20);		//--> Seg.C : OFF
 800a1a4:	2120      	movs	r1, #32
 800a1a6:	2000      	movs	r0, #0
 800a1a8:	f7fe ff0a 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x00, 0x10);			//--> Seg.D : ON
 800a1ac:	2110      	movs	r1, #16
 800a1ae:	2000      	movs	r0, #0
 800a1b0:	f7fe ff2e 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x01, 0x02);			//--> Seg.E : ON
 800a1b4:	2102      	movs	r1, #2
 800a1b6:	2001      	movs	r0, #1
 800a1b8:	f7fe ff2a 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x01, 0x08);		//--> Seg.F : OFF
 800a1bc:	2108      	movs	r1, #8
 800a1be:	2001      	movs	r0, #1
 800a1c0:	f7fe fefe 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x01, 0x04);			//--> Seg.G : ON
 800a1c4:	2104      	movs	r1, #4
 800a1c6:	2001      	movs	r0, #1
 800a1c8:	f7fe ff22 	bl	8009010 <NX7_LCD_SEG_ON>
					break;
 800a1cc:	e0e7      	b.n	800a39e <NX7_LCD_Set_Point_Segment+0x9ee>
				}
				case '3':
				{
					NX7_LCD_SEG_ON(0x00, 0x80);			//--> Seg.A : ON
 800a1ce:	2180      	movs	r1, #128	; 0x80
 800a1d0:	2000      	movs	r0, #0
 800a1d2:	f7fe ff1d 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x00, 0x40);			//--> Seg.B : ON
 800a1d6:	2140      	movs	r1, #64	; 0x40
 800a1d8:	2000      	movs	r0, #0
 800a1da:	f7fe ff19 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x00, 0x20);			//--> Seg.C : ON
 800a1de:	2120      	movs	r1, #32
 800a1e0:	2000      	movs	r0, #0
 800a1e2:	f7fe ff15 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x00, 0x10);			//--> Seg.D : ON
 800a1e6:	2110      	movs	r1, #16
 800a1e8:	2000      	movs	r0, #0
 800a1ea:	f7fe ff11 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x01, 0x02);		//--> Seg.E : OFF
 800a1ee:	2102      	movs	r1, #2
 800a1f0:	2001      	movs	r0, #1
 800a1f2:	f7fe fee5 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x01, 0x08);		//--> Seg.F : OFF
 800a1f6:	2108      	movs	r1, #8
 800a1f8:	2001      	movs	r0, #1
 800a1fa:	f7fe fee1 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x01, 0x04);			//--> Seg.G : ON
 800a1fe:	2104      	movs	r1, #4
 800a200:	2001      	movs	r0, #1
 800a202:	f7fe ff05 	bl	8009010 <NX7_LCD_SEG_ON>
					break;
 800a206:	e0ca      	b.n	800a39e <NX7_LCD_Set_Point_Segment+0x9ee>
				}
				case '4':
				{
					NX7_LCD_SEG_OFF(0x00, 0x80);		//--> Seg.A : OFF
 800a208:	2180      	movs	r1, #128	; 0x80
 800a20a:	2000      	movs	r0, #0
 800a20c:	f7fe fed8 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x00, 0x40);			//--> Seg.B : ON
 800a210:	2140      	movs	r1, #64	; 0x40
 800a212:	2000      	movs	r0, #0
 800a214:	f7fe fefc 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x00, 0x20);			//--> Seg.C : ON
 800a218:	2120      	movs	r1, #32
 800a21a:	2000      	movs	r0, #0
 800a21c:	f7fe fef8 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x00, 0x10);		//--> Seg.D : OFF
 800a220:	2110      	movs	r1, #16
 800a222:	2000      	movs	r0, #0
 800a224:	f7fe fecc 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x01, 0x02);		//--> Seg.E : OFF
 800a228:	2102      	movs	r1, #2
 800a22a:	2001      	movs	r0, #1
 800a22c:	f7fe fec8 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x01, 0x08);			//--> Seg.F : ON
 800a230:	2108      	movs	r1, #8
 800a232:	2001      	movs	r0, #1
 800a234:	f7fe feec 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x01, 0x04);			//--> Seg.G : ON
 800a238:	2104      	movs	r1, #4
 800a23a:	2001      	movs	r0, #1
 800a23c:	f7fe fee8 	bl	8009010 <NX7_LCD_SEG_ON>
					break;
 800a240:	e0ad      	b.n	800a39e <NX7_LCD_Set_Point_Segment+0x9ee>
				}
				case '5':
				{
					NX7_LCD_SEG_ON(0x00, 0x80);			//--> Seg.A : ON
 800a242:	2180      	movs	r1, #128	; 0x80
 800a244:	2000      	movs	r0, #0
 800a246:	f7fe fee3 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x00, 0x40);		//--> Seg.B : OFF
 800a24a:	2140      	movs	r1, #64	; 0x40
 800a24c:	2000      	movs	r0, #0
 800a24e:	f7fe feb7 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x00, 0x20);			//--> Seg.C : ON
 800a252:	2120      	movs	r1, #32
 800a254:	2000      	movs	r0, #0
 800a256:	f7fe fedb 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x00, 0x10);			//--> Seg.D : ON
 800a25a:	2110      	movs	r1, #16
 800a25c:	2000      	movs	r0, #0
 800a25e:	f7fe fed7 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x01, 0x02);		//--> Seg.E : OFF
 800a262:	2102      	movs	r1, #2
 800a264:	2001      	movs	r0, #1
 800a266:	f7fe feab 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x01, 0x08);			//--> Seg.F : ON
 800a26a:	2108      	movs	r1, #8
 800a26c:	2001      	movs	r0, #1
 800a26e:	f7fe fecf 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x01, 0x04);			//--> Seg.G : ON
 800a272:	2104      	movs	r1, #4
 800a274:	2001      	movs	r0, #1
 800a276:	f7fe fecb 	bl	8009010 <NX7_LCD_SEG_ON>
					break;
 800a27a:	e090      	b.n	800a39e <NX7_LCD_Set_Point_Segment+0x9ee>
				}
				case '6':
				{
					NX7_LCD_SEG_ON(0x00, 0x80);			//--> Seg.A : ON
 800a27c:	2180      	movs	r1, #128	; 0x80
 800a27e:	2000      	movs	r0, #0
 800a280:	f7fe fec6 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x00, 0x40);		//--> Seg.B : OFF
 800a284:	2140      	movs	r1, #64	; 0x40
 800a286:	2000      	movs	r0, #0
 800a288:	f7fe fe9a 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x00, 0x20);			//--> Seg.C : ON
 800a28c:	2120      	movs	r1, #32
 800a28e:	2000      	movs	r0, #0
 800a290:	f7fe febe 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x00, 0x10);			//--> Seg.D : ON
 800a294:	2110      	movs	r1, #16
 800a296:	2000      	movs	r0, #0
 800a298:	f7fe feba 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x01, 0x02);			//--> Seg.E : ON
 800a29c:	2102      	movs	r1, #2
 800a29e:	2001      	movs	r0, #1
 800a2a0:	f7fe feb6 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x01, 0x08);			//--> Seg.F : ON
 800a2a4:	2108      	movs	r1, #8
 800a2a6:	2001      	movs	r0, #1
 800a2a8:	f7fe feb2 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x01, 0x04);			//--> Seg.G : ON
 800a2ac:	2104      	movs	r1, #4
 800a2ae:	2001      	movs	r0, #1
 800a2b0:	f7fe feae 	bl	8009010 <NX7_LCD_SEG_ON>
					break;
 800a2b4:	e073      	b.n	800a39e <NX7_LCD_Set_Point_Segment+0x9ee>
				}
				case '7':
				{
					NX7_LCD_SEG_ON(0x00, 0x80);			//--> Seg.A : ON
 800a2b6:	2180      	movs	r1, #128	; 0x80
 800a2b8:	2000      	movs	r0, #0
 800a2ba:	f7fe fea9 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x00, 0x40);			//--> Seg.B : ON
 800a2be:	2140      	movs	r1, #64	; 0x40
 800a2c0:	2000      	movs	r0, #0
 800a2c2:	f7fe fea5 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x00, 0x20);			//--> Seg.C : ON
 800a2c6:	2120      	movs	r1, #32
 800a2c8:	2000      	movs	r0, #0
 800a2ca:	f7fe fea1 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x00, 0x10);		//--> Seg.D : OFF
 800a2ce:	2110      	movs	r1, #16
 800a2d0:	2000      	movs	r0, #0
 800a2d2:	f7fe fe75 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x01, 0x02);		//--> Seg.E : OFF
 800a2d6:	2102      	movs	r1, #2
 800a2d8:	2001      	movs	r0, #1
 800a2da:	f7fe fe71 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x01, 0x08);		//--> Seg.F : OFF
 800a2de:	2108      	movs	r1, #8
 800a2e0:	2001      	movs	r0, #1
 800a2e2:	f7fe fe6d 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x01, 0x04);		//--> Seg.G : OFF
 800a2e6:	2104      	movs	r1, #4
 800a2e8:	2001      	movs	r0, #1
 800a2ea:	f7fe fe69 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					break;
 800a2ee:	e056      	b.n	800a39e <NX7_LCD_Set_Point_Segment+0x9ee>
				}
				case '8':
				{
					NX7_LCD_SEG_ON(0x00, 0x80);			//--> Seg.A : ON
 800a2f0:	2180      	movs	r1, #128	; 0x80
 800a2f2:	2000      	movs	r0, #0
 800a2f4:	f7fe fe8c 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x00, 0x40);			//--> Seg.B : ON
 800a2f8:	2140      	movs	r1, #64	; 0x40
 800a2fa:	2000      	movs	r0, #0
 800a2fc:	f7fe fe88 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x00, 0x20);			//--> Seg.C : ON
 800a300:	2120      	movs	r1, #32
 800a302:	2000      	movs	r0, #0
 800a304:	f7fe fe84 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x00, 0x10);			//--> Seg.D : ON
 800a308:	2110      	movs	r1, #16
 800a30a:	2000      	movs	r0, #0
 800a30c:	f7fe fe80 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x01, 0x02);			//--> Seg.E : ON
 800a310:	2102      	movs	r1, #2
 800a312:	2001      	movs	r0, #1
 800a314:	f7fe fe7c 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x01, 0x08);			//--> Seg.F : ON
 800a318:	2108      	movs	r1, #8
 800a31a:	2001      	movs	r0, #1
 800a31c:	f7fe fe78 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x01, 0x04);			//--> Seg.G : ON
 800a320:	2104      	movs	r1, #4
 800a322:	2001      	movs	r0, #1
 800a324:	f7fe fe74 	bl	8009010 <NX7_LCD_SEG_ON>
					break;
 800a328:	e039      	b.n	800a39e <NX7_LCD_Set_Point_Segment+0x9ee>
				}
				case '9':
				{
					NX7_LCD_SEG_ON(0x00, 0x80);			//--> Seg.A : ON
 800a32a:	2180      	movs	r1, #128	; 0x80
 800a32c:	2000      	movs	r0, #0
 800a32e:	f7fe fe6f 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x00, 0x40);			//--> Seg.B : ON
 800a332:	2140      	movs	r1, #64	; 0x40
 800a334:	2000      	movs	r0, #0
 800a336:	f7fe fe6b 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x00, 0x20);			//--> Seg.C : ON
 800a33a:	2120      	movs	r1, #32
 800a33c:	2000      	movs	r0, #0
 800a33e:	f7fe fe67 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x00, 0x10);			//--> Seg.D : ON
 800a342:	2110      	movs	r1, #16
 800a344:	2000      	movs	r0, #0
 800a346:	f7fe fe63 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x01, 0x02);		//--> Seg.E : OFF
 800a34a:	2102      	movs	r1, #2
 800a34c:	2001      	movs	r0, #1
 800a34e:	f7fe fe37 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x01, 0x08);			//--> Seg.F : ON
 800a352:	2108      	movs	r1, #8
 800a354:	2001      	movs	r0, #1
 800a356:	f7fe fe5b 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x01, 0x04);			//--> Seg.G : ON
 800a35a:	2104      	movs	r1, #4
 800a35c:	2001      	movs	r0, #1
 800a35e:	f7fe fe57 	bl	8009010 <NX7_LCD_SEG_ON>
					break;
 800a362:	e01c      	b.n	800a39e <NX7_LCD_Set_Point_Segment+0x9ee>
				}
				case ' ':
				{
					NX7_LCD_SEG_OFF(0x00, 0x80);		//--> Seg.A : OFF
 800a364:	2180      	movs	r1, #128	; 0x80
 800a366:	2000      	movs	r0, #0
 800a368:	f7fe fe2a 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x00, 0x40);		//--> Seg.B : OFF
 800a36c:	2140      	movs	r1, #64	; 0x40
 800a36e:	2000      	movs	r0, #0
 800a370:	f7fe fe26 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x00, 0x20);		//--> Seg.C : OFF
 800a374:	2120      	movs	r1, #32
 800a376:	2000      	movs	r0, #0
 800a378:	f7fe fe22 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x00, 0x10);		//--> Seg.D : OFF
 800a37c:	2110      	movs	r1, #16
 800a37e:	2000      	movs	r0, #0
 800a380:	f7fe fe1e 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x01, 0x02);		//--> Seg.E : OFF
 800a384:	2102      	movs	r1, #2
 800a386:	2001      	movs	r0, #1
 800a388:	f7fe fe1a 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x01, 0x08);		//--> Seg.F : OFF
 800a38c:	2108      	movs	r1, #8
 800a38e:	2001      	movs	r0, #1
 800a390:	f7fe fe16 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x01, 0x04);		//--> Seg.G : OFF
 800a394:	2104      	movs	r1, #4
 800a396:	2001      	movs	r0, #1
 800a398:	f7fe fe12 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					break;
 800a39c:	bf00      	nop
				}
			}
			break;
 800a39e:	e005      	b.n	800a3ac <NX7_LCD_Set_Point_Segment+0x9fc>
			break;			
 800a3a0:	bf00      	nop
 800a3a2:	e004      	b.n	800a3ae <NX7_LCD_Set_Point_Segment+0x9fe>
			break;
 800a3a4:	bf00      	nop
 800a3a6:	e002      	b.n	800a3ae <NX7_LCD_Set_Point_Segment+0x9fe>
			break;
 800a3a8:	bf00      	nop
 800a3aa:	e000      	b.n	800a3ae <NX7_LCD_Set_Point_Segment+0x9fe>
			break;
 800a3ac:	bf00      	nop
		}
	}
}
 800a3ae:	bf00      	nop
 800a3b0:	3708      	adds	r7, #8
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
 800a3b6:	bf00      	nop

0800a3b8 <NX7_LCD_Set_Point_Handler>:

/* NX7_LCD_Set_Point_Handler -------------------------------------------------*/
void NX7_LCD_Set_Point_Handler(float set_point)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b08c      	sub	sp, #48	; 0x30
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
	if(set_point == -1000)
 800a3c0:	493a      	ldr	r1, [pc, #232]	; (800a4ac <NX7_LCD_Set_Point_Handler+0xf4>)
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f7f6 feb2 	bl	800112c <__aeabi_fcmpeq>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d01f      	beq.n	800a40e <NX7_LCD_Set_Point_Handler+0x56>
	{
		char str[8]={0}; int counter=0;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	61fb      	str	r3, [r7, #28]
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	623b      	str	r3, [r7, #32]
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(str, "LO  ");
 800a3da:	f107 031c 	add.w	r3, r7, #28
 800a3de:	4934      	ldr	r1, [pc, #208]	; (800a4b0 <NX7_LCD_Set_Point_Handler+0xf8>)
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	f004 f875 	bl	800e4d0 <siprintf>
		do
		{
			NX7_LCD_Set_Point_Segment(str[counter], counter);
 800a3e6:	f107 021c 	add.w	r2, r7, #28
 800a3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ec:	4413      	add	r3, r2
 800a3ee:	781b      	ldrb	r3, [r3, #0]
 800a3f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7ff fadc 	bl	80099b0 <NX7_LCD_Set_Point_Segment>
			counter++;
 800a3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3fa:	3301      	adds	r3, #1
 800a3fc:	62fb      	str	r3, [r7, #44]	; 0x2c
		}	while(str[counter]!=0);
 800a3fe:	f107 021c 	add.w	r2, r7, #28
 800a402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a404:	4413      	add	r3, r2
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d1ec      	bne.n	800a3e6 <NX7_LCD_Set_Point_Handler+0x2e>
		{
			NX7_LCD_Set_Point_Segment(str[counter], counter);
			counter++;
		}	while(str[counter]!=0);
	}
}
 800a40c:	e049      	b.n	800a4a2 <NX7_LCD_Set_Point_Handler+0xea>
	else if(set_point == +1000)
 800a40e:	4929      	ldr	r1, [pc, #164]	; (800a4b4 <NX7_LCD_Set_Point_Handler+0xfc>)
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f7f6 fe8b 	bl	800112c <__aeabi_fcmpeq>
 800a416:	4603      	mov	r3, r0
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d01f      	beq.n	800a45c <NX7_LCD_Set_Point_Handler+0xa4>
		char str[8]={0}; int counter=0;
 800a41c:	2300      	movs	r3, #0
 800a41e:	617b      	str	r3, [r7, #20]
 800a420:	2300      	movs	r3, #0
 800a422:	61bb      	str	r3, [r7, #24]
 800a424:	2300      	movs	r3, #0
 800a426:	62bb      	str	r3, [r7, #40]	; 0x28
		sprintf(str, "HI  ");
 800a428:	f107 0314 	add.w	r3, r7, #20
 800a42c:	4922      	ldr	r1, [pc, #136]	; (800a4b8 <NX7_LCD_Set_Point_Handler+0x100>)
 800a42e:	4618      	mov	r0, r3
 800a430:	f004 f84e 	bl	800e4d0 <siprintf>
			NX7_LCD_Set_Point_Segment(str[counter], counter);
 800a434:	f107 0214 	add.w	r2, r7, #20
 800a438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a43a:	4413      	add	r3, r2
 800a43c:	781b      	ldrb	r3, [r3, #0]
 800a43e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a440:	4618      	mov	r0, r3
 800a442:	f7ff fab5 	bl	80099b0 <NX7_LCD_Set_Point_Segment>
			counter++;
 800a446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a448:	3301      	adds	r3, #1
 800a44a:	62bb      	str	r3, [r7, #40]	; 0x28
		}	while(str[counter]!=0);
 800a44c:	f107 0214 	add.w	r2, r7, #20
 800a450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a452:	4413      	add	r3, r2
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d1ec      	bne.n	800a434 <NX7_LCD_Set_Point_Handler+0x7c>
}
 800a45a:	e022      	b.n	800a4a2 <NX7_LCD_Set_Point_Handler+0xea>
		char str[8]={0}; int counter=0;
 800a45c:	2300      	movs	r3, #0
 800a45e:	60fb      	str	r3, [r7, #12]
 800a460:	2300      	movs	r3, #0
 800a462:	613b      	str	r3, [r7, #16]
 800a464:	2300      	movs	r3, #0
 800a466:	627b      	str	r3, [r7, #36]	; 0x24
		sprintf(str, "%04.1f", set_point);
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f7f6 f83d 	bl	80004e8 <__aeabi_f2d>
 800a46e:	4602      	mov	r2, r0
 800a470:	460b      	mov	r3, r1
 800a472:	f107 000c 	add.w	r0, r7, #12
 800a476:	4911      	ldr	r1, [pc, #68]	; (800a4bc <NX7_LCD_Set_Point_Handler+0x104>)
 800a478:	f004 f82a 	bl	800e4d0 <siprintf>
			NX7_LCD_Set_Point_Segment(str[counter], counter);
 800a47c:	f107 020c 	add.w	r2, r7, #12
 800a480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a482:	4413      	add	r3, r2
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a488:	4618      	mov	r0, r3
 800a48a:	f7ff fa91 	bl	80099b0 <NX7_LCD_Set_Point_Segment>
			counter++;
 800a48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a490:	3301      	adds	r3, #1
 800a492:	627b      	str	r3, [r7, #36]	; 0x24
		}	while(str[counter]!=0);
 800a494:	f107 020c 	add.w	r2, r7, #12
 800a498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a49a:	4413      	add	r3, r2
 800a49c:	781b      	ldrb	r3, [r3, #0]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d1ec      	bne.n	800a47c <NX7_LCD_Set_Point_Handler+0xc4>
}
 800a4a2:	bf00      	nop
 800a4a4:	3730      	adds	r7, #48	; 0x30
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	bd80      	pop	{r7, pc}
 800a4aa:	bf00      	nop
 800a4ac:	c47a0000 	.word	0xc47a0000
 800a4b0:	080116b8 	.word	0x080116b8
 800a4b4:	447a0000 	.word	0x447a0000
 800a4b8:	080116c0 	.word	0x080116c0
 800a4bc:	080116c8 	.word	0x080116c8

0800a4c0 <NX7_LCD_Out_Temp_Segment>:

/* NX7_LCD_Out_Temp_Segment --------------------------------------------------*/
void NX7_LCD_Out_Temp_Segment(char ch, int counter)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b082      	sub	sp, #8
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	6039      	str	r1, [r7, #0]
 800a4ca:	71fb      	strb	r3, [r7, #7]
	switch (counter)
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	2b02      	cmp	r3, #2
 800a4d0:	f000 81a0 	beq.w	800a814 <NX7_LCD_Out_Temp_Segment+0x354>
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	2b02      	cmp	r3, #2
 800a4d8:	f300 8303 	bgt.w	800aae2 <NX7_LCD_Out_Temp_Segment+0x622>
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d003      	beq.n	800a4ea <NX7_LCD_Out_Temp_Segment+0x2a>
 800a4e2:	683b      	ldr	r3, [r7, #0]
 800a4e4:	2b01      	cmp	r3, #1
 800a4e6:	d033      	beq.n	800a550 <NX7_LCD_Out_Temp_Segment+0x90>
				}
			}
			break;
		}
	}
}
 800a4e8:	e2fb      	b.n	800aae2 <NX7_LCD_Out_Temp_Segment+0x622>
			switch (ch)
 800a4ea:	79fb      	ldrb	r3, [r7, #7]
 800a4ec:	2b2d      	cmp	r3, #45	; 0x2d
 800a4ee:	d014      	beq.n	800a51a <NX7_LCD_Out_Temp_Segment+0x5a>
 800a4f0:	2b2d      	cmp	r3, #45	; 0x2d
 800a4f2:	f300 82f1 	bgt.w	800aad8 <NX7_LCD_Out_Temp_Segment+0x618>
 800a4f6:	2b20      	cmp	r3, #32
 800a4f8:	d01c      	beq.n	800a534 <NX7_LCD_Out_Temp_Segment+0x74>
 800a4fa:	2b2b      	cmp	r3, #43	; 0x2b
 800a4fc:	f040 82ec 	bne.w	800aad8 <NX7_LCD_Out_Temp_Segment+0x618>
					NX7_LCD_SEG_ON(0x07, 0x80);			//--> °C       : ON
 800a500:	2180      	movs	r1, #128	; 0x80
 800a502:	2007      	movs	r0, #7
 800a504:	f7fe fd84 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x07, 0x40);		//--> °F       : OFF
 800a508:	2140      	movs	r1, #64	; 0x40
 800a50a:	2007      	movs	r0, #7
 800a50c:	f7fe fd58 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x05, 0x04);		//--> Minus    : OFF
 800a510:	2104      	movs	r1, #4
 800a512:	2005      	movs	r0, #5
 800a514:	f7fe fd54 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					break;
 800a518:	e019      	b.n	800a54e <NX7_LCD_Out_Temp_Segment+0x8e>
					NX7_LCD_SEG_ON(0x07, 0x80);			//--> °C       : ON
 800a51a:	2180      	movs	r1, #128	; 0x80
 800a51c:	2007      	movs	r0, #7
 800a51e:	f7fe fd77 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x07, 0x40);		//--> °F       : OFF
 800a522:	2140      	movs	r1, #64	; 0x40
 800a524:	2007      	movs	r0, #7
 800a526:	f7fe fd4b 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x05, 0x04);			//--> Minus    : ON
 800a52a:	2104      	movs	r1, #4
 800a52c:	2005      	movs	r0, #5
 800a52e:	f7fe fd6f 	bl	8009010 <NX7_LCD_SEG_ON>
					break;
 800a532:	e00c      	b.n	800a54e <NX7_LCD_Out_Temp_Segment+0x8e>
					NX7_LCD_SEG_ON(0x07, 0x80);			//--> °C       : ON
 800a534:	2180      	movs	r1, #128	; 0x80
 800a536:	2007      	movs	r0, #7
 800a538:	f7fe fd6a 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x07, 0x40);		//--> °F       : OFF
 800a53c:	2140      	movs	r1, #64	; 0x40
 800a53e:	2007      	movs	r0, #7
 800a540:	f7fe fd3e 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x05, 0x04);		//--> Minus    : OFF
 800a544:	2104      	movs	r1, #4
 800a546:	2005      	movs	r0, #5
 800a548:	f7fe fd3a 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					break;
 800a54c:	bf00      	nop
			break;
 800a54e:	e2c3      	b.n	800aad8 <NX7_LCD_Out_Temp_Segment+0x618>
			switch (ch)
 800a550:	79fb      	ldrb	r3, [r7, #7]
 800a552:	3b2d      	subs	r3, #45	; 0x2d
 800a554:	2b0c      	cmp	r3, #12
 800a556:	f200 82c1 	bhi.w	800aadc <NX7_LCD_Out_Temp_Segment+0x61c>
 800a55a:	a201      	add	r2, pc, #4	; (adr r2, 800a560 <NX7_LCD_Out_Temp_Segment+0xa0>)
 800a55c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a560:	0800a7d9 	.word	0x0800a7d9
 800a564:	0800aadd 	.word	0x0800aadd
 800a568:	0800aadd 	.word	0x0800aadd
 800a56c:	0800a595 	.word	0x0800a595
 800a570:	0800a5cf 	.word	0x0800a5cf
 800a574:	0800a609 	.word	0x0800a609
 800a578:	0800a643 	.word	0x0800a643
 800a57c:	0800a67d 	.word	0x0800a67d
 800a580:	0800a6b7 	.word	0x0800a6b7
 800a584:	0800a6f1 	.word	0x0800a6f1
 800a588:	0800a72b 	.word	0x0800a72b
 800a58c:	0800a765 	.word	0x0800a765
 800a590:	0800a79f 	.word	0x0800a79f
					NX7_LCD_SEG_ON(0x06, 0x08);			//--> Seg.A : ON
 800a594:	2108      	movs	r1, #8
 800a596:	2006      	movs	r0, #6
 800a598:	f7fe fd3a 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x06, 0x04);			//--> Seg.B : ON
 800a59c:	2104      	movs	r1, #4
 800a59e:	2006      	movs	r0, #6
 800a5a0:	f7fe fd36 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x06, 0x02);			//--> Seg.C : ON
 800a5a4:	2102      	movs	r1, #2
 800a5a6:	2006      	movs	r0, #6
 800a5a8:	f7fe fd32 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x06, 0x01);			//--> Seg.D : ON
 800a5ac:	2101      	movs	r1, #1
 800a5ae:	2006      	movs	r0, #6
 800a5b0:	f7fe fd2e 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x05, 0x20);			//--> Seg.E : ON
 800a5b4:	2120      	movs	r1, #32
 800a5b6:	2005      	movs	r0, #5
 800a5b8:	f7fe fd2a 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x05, 0x80);			//--> Seg.F : ON
 800a5bc:	2180      	movs	r1, #128	; 0x80
 800a5be:	2005      	movs	r0, #5
 800a5c0:	f7fe fd26 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x05, 0x40);		//--> Seg.G : OFF
 800a5c4:	2140      	movs	r1, #64	; 0x40
 800a5c6:	2005      	movs	r0, #5
 800a5c8:	f7fe fcfa 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					break;
 800a5cc:	e121      	b.n	800a812 <NX7_LCD_Out_Temp_Segment+0x352>
					NX7_LCD_SEG_OFF(0x06, 0x08);		//--> Seg.A : OFF
 800a5ce:	2108      	movs	r1, #8
 800a5d0:	2006      	movs	r0, #6
 800a5d2:	f7fe fcf5 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x06, 0x04);			//--> Seg.B : ON
 800a5d6:	2104      	movs	r1, #4
 800a5d8:	2006      	movs	r0, #6
 800a5da:	f7fe fd19 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x06, 0x02);			//--> Seg.C : ON
 800a5de:	2102      	movs	r1, #2
 800a5e0:	2006      	movs	r0, #6
 800a5e2:	f7fe fd15 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x06, 0x01);		//--> Seg.D : OFF
 800a5e6:	2101      	movs	r1, #1
 800a5e8:	2006      	movs	r0, #6
 800a5ea:	f7fe fce9 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x05, 0x20);		//--> Seg.E : OFF
 800a5ee:	2120      	movs	r1, #32
 800a5f0:	2005      	movs	r0, #5
 800a5f2:	f7fe fce5 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x05, 0x80);		//--> Seg.F : OFF
 800a5f6:	2180      	movs	r1, #128	; 0x80
 800a5f8:	2005      	movs	r0, #5
 800a5fa:	f7fe fce1 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x05, 0x40);		//--> Seg.G : OFF
 800a5fe:	2140      	movs	r1, #64	; 0x40
 800a600:	2005      	movs	r0, #5
 800a602:	f7fe fcdd 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					break;
 800a606:	e104      	b.n	800a812 <NX7_LCD_Out_Temp_Segment+0x352>
					NX7_LCD_SEG_ON(0x06, 0x08);			//--> Seg.A : ON
 800a608:	2108      	movs	r1, #8
 800a60a:	2006      	movs	r0, #6
 800a60c:	f7fe fd00 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x06, 0x04);			//--> Seg.B : ON
 800a610:	2104      	movs	r1, #4
 800a612:	2006      	movs	r0, #6
 800a614:	f7fe fcfc 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x06, 0x02);		//--> Seg.C : OFF
 800a618:	2102      	movs	r1, #2
 800a61a:	2006      	movs	r0, #6
 800a61c:	f7fe fcd0 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x06, 0x01);			//--> Seg.D : ON
 800a620:	2101      	movs	r1, #1
 800a622:	2006      	movs	r0, #6
 800a624:	f7fe fcf4 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x05, 0x20);			//--> Seg.E : ON
 800a628:	2120      	movs	r1, #32
 800a62a:	2005      	movs	r0, #5
 800a62c:	f7fe fcf0 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x05, 0x80);		//--> Seg.F : OFF
 800a630:	2180      	movs	r1, #128	; 0x80
 800a632:	2005      	movs	r0, #5
 800a634:	f7fe fcc4 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x05, 0x40);			//--> Seg.G : ON
 800a638:	2140      	movs	r1, #64	; 0x40
 800a63a:	2005      	movs	r0, #5
 800a63c:	f7fe fce8 	bl	8009010 <NX7_LCD_SEG_ON>
					break;
 800a640:	e0e7      	b.n	800a812 <NX7_LCD_Out_Temp_Segment+0x352>
					NX7_LCD_SEG_ON(0x06, 0x08);			//--> Seg.A : ON
 800a642:	2108      	movs	r1, #8
 800a644:	2006      	movs	r0, #6
 800a646:	f7fe fce3 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x06, 0x04);			//--> Seg.B : ON
 800a64a:	2104      	movs	r1, #4
 800a64c:	2006      	movs	r0, #6
 800a64e:	f7fe fcdf 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x06, 0x02);			//--> Seg.C : ON
 800a652:	2102      	movs	r1, #2
 800a654:	2006      	movs	r0, #6
 800a656:	f7fe fcdb 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x06, 0x01);			//--> Seg.D : ON
 800a65a:	2101      	movs	r1, #1
 800a65c:	2006      	movs	r0, #6
 800a65e:	f7fe fcd7 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x05, 0x20);		//--> Seg.E : OFF
 800a662:	2120      	movs	r1, #32
 800a664:	2005      	movs	r0, #5
 800a666:	f7fe fcab 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x05, 0x80);		//--> Seg.F : OFF
 800a66a:	2180      	movs	r1, #128	; 0x80
 800a66c:	2005      	movs	r0, #5
 800a66e:	f7fe fca7 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x05, 0x40);			//--> Seg.G : ON
 800a672:	2140      	movs	r1, #64	; 0x40
 800a674:	2005      	movs	r0, #5
 800a676:	f7fe fccb 	bl	8009010 <NX7_LCD_SEG_ON>
					break;
 800a67a:	e0ca      	b.n	800a812 <NX7_LCD_Out_Temp_Segment+0x352>
					NX7_LCD_SEG_OFF(0x06, 0x08);		//--> Seg.A : OFF
 800a67c:	2108      	movs	r1, #8
 800a67e:	2006      	movs	r0, #6
 800a680:	f7fe fc9e 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x06, 0x04);			//--> Seg.B : ON
 800a684:	2104      	movs	r1, #4
 800a686:	2006      	movs	r0, #6
 800a688:	f7fe fcc2 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x06, 0x02);			//--> Seg.C : ON
 800a68c:	2102      	movs	r1, #2
 800a68e:	2006      	movs	r0, #6
 800a690:	f7fe fcbe 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x06, 0x01);		//--> Seg.D : OFF
 800a694:	2101      	movs	r1, #1
 800a696:	2006      	movs	r0, #6
 800a698:	f7fe fc92 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x05, 0x20);		//--> Seg.E : OFF
 800a69c:	2120      	movs	r1, #32
 800a69e:	2005      	movs	r0, #5
 800a6a0:	f7fe fc8e 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x05, 0x80);			//--> Seg.F : ON
 800a6a4:	2180      	movs	r1, #128	; 0x80
 800a6a6:	2005      	movs	r0, #5
 800a6a8:	f7fe fcb2 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x05, 0x40);			//--> Seg.G : ON
 800a6ac:	2140      	movs	r1, #64	; 0x40
 800a6ae:	2005      	movs	r0, #5
 800a6b0:	f7fe fcae 	bl	8009010 <NX7_LCD_SEG_ON>
					break;
 800a6b4:	e0ad      	b.n	800a812 <NX7_LCD_Out_Temp_Segment+0x352>
					NX7_LCD_SEG_ON(0x06, 0x08);			//--> Seg.A : ON
 800a6b6:	2108      	movs	r1, #8
 800a6b8:	2006      	movs	r0, #6
 800a6ba:	f7fe fca9 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x06, 0x04);		//--> Seg.B : OFF
 800a6be:	2104      	movs	r1, #4
 800a6c0:	2006      	movs	r0, #6
 800a6c2:	f7fe fc7d 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x06, 0x02);			//--> Seg.C : ON
 800a6c6:	2102      	movs	r1, #2
 800a6c8:	2006      	movs	r0, #6
 800a6ca:	f7fe fca1 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x06, 0x01);			//--> Seg.D : ON
 800a6ce:	2101      	movs	r1, #1
 800a6d0:	2006      	movs	r0, #6
 800a6d2:	f7fe fc9d 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x05, 0x20);		//--> Seg.E : OFF
 800a6d6:	2120      	movs	r1, #32
 800a6d8:	2005      	movs	r0, #5
 800a6da:	f7fe fc71 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x05, 0x80);			//--> Seg.F : ON
 800a6de:	2180      	movs	r1, #128	; 0x80
 800a6e0:	2005      	movs	r0, #5
 800a6e2:	f7fe fc95 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x05, 0x40);			//--> Seg.G : ON
 800a6e6:	2140      	movs	r1, #64	; 0x40
 800a6e8:	2005      	movs	r0, #5
 800a6ea:	f7fe fc91 	bl	8009010 <NX7_LCD_SEG_ON>
					break;
 800a6ee:	e090      	b.n	800a812 <NX7_LCD_Out_Temp_Segment+0x352>
					NX7_LCD_SEG_ON(0x06, 0x08);			//--> Seg.A : ON
 800a6f0:	2108      	movs	r1, #8
 800a6f2:	2006      	movs	r0, #6
 800a6f4:	f7fe fc8c 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x06, 0x04);		//--> Seg.B : OFF
 800a6f8:	2104      	movs	r1, #4
 800a6fa:	2006      	movs	r0, #6
 800a6fc:	f7fe fc60 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x06, 0x02);			//--> Seg.C : ON
 800a700:	2102      	movs	r1, #2
 800a702:	2006      	movs	r0, #6
 800a704:	f7fe fc84 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x06, 0x01);			//--> Seg.D : ON
 800a708:	2101      	movs	r1, #1
 800a70a:	2006      	movs	r0, #6
 800a70c:	f7fe fc80 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x05, 0x20);			//--> Seg.E : ON
 800a710:	2120      	movs	r1, #32
 800a712:	2005      	movs	r0, #5
 800a714:	f7fe fc7c 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x05, 0x80);			//--> Seg.F : ON
 800a718:	2180      	movs	r1, #128	; 0x80
 800a71a:	2005      	movs	r0, #5
 800a71c:	f7fe fc78 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x05, 0x40);			//--> Seg.G : ON
 800a720:	2140      	movs	r1, #64	; 0x40
 800a722:	2005      	movs	r0, #5
 800a724:	f7fe fc74 	bl	8009010 <NX7_LCD_SEG_ON>
					break;
 800a728:	e073      	b.n	800a812 <NX7_LCD_Out_Temp_Segment+0x352>
					NX7_LCD_SEG_ON(0x06, 0x08);			//--> Seg.A : ON
 800a72a:	2108      	movs	r1, #8
 800a72c:	2006      	movs	r0, #6
 800a72e:	f7fe fc6f 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x06, 0x04);			//--> Seg.B : ON
 800a732:	2104      	movs	r1, #4
 800a734:	2006      	movs	r0, #6
 800a736:	f7fe fc6b 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x06, 0x02);			//--> Seg.C : ON
 800a73a:	2102      	movs	r1, #2
 800a73c:	2006      	movs	r0, #6
 800a73e:	f7fe fc67 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x06, 0x01);		//--> Seg.D : OFF
 800a742:	2101      	movs	r1, #1
 800a744:	2006      	movs	r0, #6
 800a746:	f7fe fc3b 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x05, 0x20);		//--> Seg.E : OFF
 800a74a:	2120      	movs	r1, #32
 800a74c:	2005      	movs	r0, #5
 800a74e:	f7fe fc37 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x05, 0x80);		//--> Seg.F : OFF
 800a752:	2180      	movs	r1, #128	; 0x80
 800a754:	2005      	movs	r0, #5
 800a756:	f7fe fc33 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x05, 0x40);		//--> Seg.G : OFF
 800a75a:	2140      	movs	r1, #64	; 0x40
 800a75c:	2005      	movs	r0, #5
 800a75e:	f7fe fc2f 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					break;
 800a762:	e056      	b.n	800a812 <NX7_LCD_Out_Temp_Segment+0x352>
					NX7_LCD_SEG_ON(0x06, 0x08);			//--> Seg.A : ON
 800a764:	2108      	movs	r1, #8
 800a766:	2006      	movs	r0, #6
 800a768:	f7fe fc52 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x06, 0x04);			//--> Seg.B : ON
 800a76c:	2104      	movs	r1, #4
 800a76e:	2006      	movs	r0, #6
 800a770:	f7fe fc4e 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x06, 0x02);			//--> Seg.C : ON
 800a774:	2102      	movs	r1, #2
 800a776:	2006      	movs	r0, #6
 800a778:	f7fe fc4a 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x06, 0x01);			//--> Seg.D : ON
 800a77c:	2101      	movs	r1, #1
 800a77e:	2006      	movs	r0, #6
 800a780:	f7fe fc46 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x05, 0x20);			//--> Seg.E : ON
 800a784:	2120      	movs	r1, #32
 800a786:	2005      	movs	r0, #5
 800a788:	f7fe fc42 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x05, 0x80);			//--> Seg.F : ON
 800a78c:	2180      	movs	r1, #128	; 0x80
 800a78e:	2005      	movs	r0, #5
 800a790:	f7fe fc3e 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x05, 0x40);			//--> Seg.G : ON
 800a794:	2140      	movs	r1, #64	; 0x40
 800a796:	2005      	movs	r0, #5
 800a798:	f7fe fc3a 	bl	8009010 <NX7_LCD_SEG_ON>
					break;
 800a79c:	e039      	b.n	800a812 <NX7_LCD_Out_Temp_Segment+0x352>
					NX7_LCD_SEG_ON(0x06, 0x08);			//--> Seg.A : ON
 800a79e:	2108      	movs	r1, #8
 800a7a0:	2006      	movs	r0, #6
 800a7a2:	f7fe fc35 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x06, 0x04);			//--> Seg.B : ON
 800a7a6:	2104      	movs	r1, #4
 800a7a8:	2006      	movs	r0, #6
 800a7aa:	f7fe fc31 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x06, 0x02);			//--> Seg.C : ON
 800a7ae:	2102      	movs	r1, #2
 800a7b0:	2006      	movs	r0, #6
 800a7b2:	f7fe fc2d 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x06, 0x01);			//--> Seg.D : ON
 800a7b6:	2101      	movs	r1, #1
 800a7b8:	2006      	movs	r0, #6
 800a7ba:	f7fe fc29 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x05, 0x20);		//--> Seg.E : OFF
 800a7be:	2120      	movs	r1, #32
 800a7c0:	2005      	movs	r0, #5
 800a7c2:	f7fe fbfd 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x05, 0x80);			//--> Seg.F : ON
 800a7c6:	2180      	movs	r1, #128	; 0x80
 800a7c8:	2005      	movs	r0, #5
 800a7ca:	f7fe fc21 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x05, 0x40);			//--> Seg.G : ON
 800a7ce:	2140      	movs	r1, #64	; 0x40
 800a7d0:	2005      	movs	r0, #5
 800a7d2:	f7fe fc1d 	bl	8009010 <NX7_LCD_SEG_ON>
					break;
 800a7d6:	e01c      	b.n	800a812 <NX7_LCD_Out_Temp_Segment+0x352>
					NX7_LCD_SEG_OFF(0x06, 0x08);		//--> Seg.A : OFF
 800a7d8:	2108      	movs	r1, #8
 800a7da:	2006      	movs	r0, #6
 800a7dc:	f7fe fbf0 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x06, 0x04);		//--> Seg.B : OFF
 800a7e0:	2104      	movs	r1, #4
 800a7e2:	2006      	movs	r0, #6
 800a7e4:	f7fe fbec 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x06, 0x02);		//--> Seg.C : OFF
 800a7e8:	2102      	movs	r1, #2
 800a7ea:	2006      	movs	r0, #6
 800a7ec:	f7fe fbe8 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x06, 0x01);		//--> Seg.D : OFF
 800a7f0:	2101      	movs	r1, #1
 800a7f2:	2006      	movs	r0, #6
 800a7f4:	f7fe fbe4 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x05, 0x20);		//--> Seg.E : OFF
 800a7f8:	2120      	movs	r1, #32
 800a7fa:	2005      	movs	r0, #5
 800a7fc:	f7fe fbe0 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x05, 0x80);		//--> Seg.F : OFF
 800a800:	2180      	movs	r1, #128	; 0x80
 800a802:	2005      	movs	r0, #5
 800a804:	f7fe fbdc 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x05, 0x40);			//--> Seg.G : ON
 800a808:	2140      	movs	r1, #64	; 0x40
 800a80a:	2005      	movs	r0, #5
 800a80c:	f7fe fc00 	bl	8009010 <NX7_LCD_SEG_ON>
					break;
 800a810:	bf00      	nop
			break;
 800a812:	e163      	b.n	800aadc <NX7_LCD_Out_Temp_Segment+0x61c>
			switch (ch)
 800a814:	79fb      	ldrb	r3, [r7, #7]
 800a816:	3b2d      	subs	r3, #45	; 0x2d
 800a818:	2b0c      	cmp	r3, #12
 800a81a:	f200 8161 	bhi.w	800aae0 <NX7_LCD_Out_Temp_Segment+0x620>
 800a81e:	a201      	add	r2, pc, #4	; (adr r2, 800a824 <NX7_LCD_Out_Temp_Segment+0x364>)
 800a820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a824:	0800aa9d 	.word	0x0800aa9d
 800a828:	0800aae1 	.word	0x0800aae1
 800a82c:	0800aae1 	.word	0x0800aae1
 800a830:	0800a859 	.word	0x0800a859
 800a834:	0800a893 	.word	0x0800a893
 800a838:	0800a8cd 	.word	0x0800a8cd
 800a83c:	0800a907 	.word	0x0800a907
 800a840:	0800a941 	.word	0x0800a941
 800a844:	0800a97b 	.word	0x0800a97b
 800a848:	0800a9b5 	.word	0x0800a9b5
 800a84c:	0800a9ef 	.word	0x0800a9ef
 800a850:	0800aa29 	.word	0x0800aa29
 800a854:	0800aa63 	.word	0x0800aa63
					NX7_LCD_SEG_ON(0x07, 0x08);			//--> Seg.A : ON
 800a858:	2108      	movs	r1, #8
 800a85a:	2007      	movs	r0, #7
 800a85c:	f7fe fbd8 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x07, 0x04);			//--> Seg.B : ON
 800a860:	2104      	movs	r1, #4
 800a862:	2007      	movs	r0, #7
 800a864:	f7fe fbd4 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x07, 0x02);			//--> Seg.C : ON
 800a868:	2102      	movs	r1, #2
 800a86a:	2007      	movs	r0, #7
 800a86c:	f7fe fbd0 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x07, 0x01);			//--> Seg.D : ON
 800a870:	2101      	movs	r1, #1
 800a872:	2007      	movs	r0, #7
 800a874:	f7fe fbcc 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x06, 0x20);			//--> Seg.E : ON
 800a878:	2120      	movs	r1, #32
 800a87a:	2006      	movs	r0, #6
 800a87c:	f7fe fbc8 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x06, 0x80);			//--> Seg.F : ON
 800a880:	2180      	movs	r1, #128	; 0x80
 800a882:	2006      	movs	r0, #6
 800a884:	f7fe fbc4 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x06, 0x40);		//--> Seg.G : OFF
 800a888:	2140      	movs	r1, #64	; 0x40
 800a88a:	2006      	movs	r0, #6
 800a88c:	f7fe fb98 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					break;
 800a890:	e121      	b.n	800aad6 <NX7_LCD_Out_Temp_Segment+0x616>
					NX7_LCD_SEG_OFF(0x07, 0x08);		//--> Seg.A : OFF
 800a892:	2108      	movs	r1, #8
 800a894:	2007      	movs	r0, #7
 800a896:	f7fe fb93 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x07, 0x04);			//--> Seg.B : ON
 800a89a:	2104      	movs	r1, #4
 800a89c:	2007      	movs	r0, #7
 800a89e:	f7fe fbb7 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x07, 0x02);			//--> Seg.C : ON
 800a8a2:	2102      	movs	r1, #2
 800a8a4:	2007      	movs	r0, #7
 800a8a6:	f7fe fbb3 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x07, 0x01);		//--> Seg.D : OFF
 800a8aa:	2101      	movs	r1, #1
 800a8ac:	2007      	movs	r0, #7
 800a8ae:	f7fe fb87 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x06, 0x20);		//--> Seg.E : OFF
 800a8b2:	2120      	movs	r1, #32
 800a8b4:	2006      	movs	r0, #6
 800a8b6:	f7fe fb83 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x06, 0x80);		//--> Seg.F : OFF
 800a8ba:	2180      	movs	r1, #128	; 0x80
 800a8bc:	2006      	movs	r0, #6
 800a8be:	f7fe fb7f 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x06, 0x40);		//--> Seg.G : OFF
 800a8c2:	2140      	movs	r1, #64	; 0x40
 800a8c4:	2006      	movs	r0, #6
 800a8c6:	f7fe fb7b 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					break;
 800a8ca:	e104      	b.n	800aad6 <NX7_LCD_Out_Temp_Segment+0x616>
					NX7_LCD_SEG_ON(0x07, 0x08);			//--> Seg.A : ON
 800a8cc:	2108      	movs	r1, #8
 800a8ce:	2007      	movs	r0, #7
 800a8d0:	f7fe fb9e 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x07, 0x04);			//--> Seg.B : ON
 800a8d4:	2104      	movs	r1, #4
 800a8d6:	2007      	movs	r0, #7
 800a8d8:	f7fe fb9a 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x07, 0x02);		//--> Seg.C : OFF
 800a8dc:	2102      	movs	r1, #2
 800a8de:	2007      	movs	r0, #7
 800a8e0:	f7fe fb6e 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x07, 0x01);			//--> Seg.D : ON
 800a8e4:	2101      	movs	r1, #1
 800a8e6:	2007      	movs	r0, #7
 800a8e8:	f7fe fb92 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x06, 0x20);			//--> Seg.E : ON
 800a8ec:	2120      	movs	r1, #32
 800a8ee:	2006      	movs	r0, #6
 800a8f0:	f7fe fb8e 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x06, 0x80);		//--> Seg.F : OFF
 800a8f4:	2180      	movs	r1, #128	; 0x80
 800a8f6:	2006      	movs	r0, #6
 800a8f8:	f7fe fb62 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x06, 0x40);			//--> Seg.G : ON
 800a8fc:	2140      	movs	r1, #64	; 0x40
 800a8fe:	2006      	movs	r0, #6
 800a900:	f7fe fb86 	bl	8009010 <NX7_LCD_SEG_ON>
					break;
 800a904:	e0e7      	b.n	800aad6 <NX7_LCD_Out_Temp_Segment+0x616>
					NX7_LCD_SEG_ON(0x07, 0x08);			//--> Seg.A : ON
 800a906:	2108      	movs	r1, #8
 800a908:	2007      	movs	r0, #7
 800a90a:	f7fe fb81 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x07, 0x04);			//--> Seg.B : ON
 800a90e:	2104      	movs	r1, #4
 800a910:	2007      	movs	r0, #7
 800a912:	f7fe fb7d 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x07, 0x02);			//--> Seg.C : ON
 800a916:	2102      	movs	r1, #2
 800a918:	2007      	movs	r0, #7
 800a91a:	f7fe fb79 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x07, 0x01);			//--> Seg.D : ON
 800a91e:	2101      	movs	r1, #1
 800a920:	2007      	movs	r0, #7
 800a922:	f7fe fb75 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x06, 0x20);		//--> Seg.E : OFF
 800a926:	2120      	movs	r1, #32
 800a928:	2006      	movs	r0, #6
 800a92a:	f7fe fb49 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x06, 0x80);		//--> Seg.F : OFF
 800a92e:	2180      	movs	r1, #128	; 0x80
 800a930:	2006      	movs	r0, #6
 800a932:	f7fe fb45 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x06, 0x40);			//--> Seg.G : ON
 800a936:	2140      	movs	r1, #64	; 0x40
 800a938:	2006      	movs	r0, #6
 800a93a:	f7fe fb69 	bl	8009010 <NX7_LCD_SEG_ON>
					break;
 800a93e:	e0ca      	b.n	800aad6 <NX7_LCD_Out_Temp_Segment+0x616>
					NX7_LCD_SEG_OFF(0x07, 0x08);		//--> Seg.A : OFF
 800a940:	2108      	movs	r1, #8
 800a942:	2007      	movs	r0, #7
 800a944:	f7fe fb3c 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x07, 0x04);			//--> Seg.B : ON
 800a948:	2104      	movs	r1, #4
 800a94a:	2007      	movs	r0, #7
 800a94c:	f7fe fb60 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x07, 0x02);			//--> Seg.C : ON
 800a950:	2102      	movs	r1, #2
 800a952:	2007      	movs	r0, #7
 800a954:	f7fe fb5c 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x07, 0x01);		//--> Seg.D : OFF
 800a958:	2101      	movs	r1, #1
 800a95a:	2007      	movs	r0, #7
 800a95c:	f7fe fb30 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x06, 0x20);		//--> Seg.E : OFF
 800a960:	2120      	movs	r1, #32
 800a962:	2006      	movs	r0, #6
 800a964:	f7fe fb2c 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x06, 0x80);			//--> Seg.F : ON
 800a968:	2180      	movs	r1, #128	; 0x80
 800a96a:	2006      	movs	r0, #6
 800a96c:	f7fe fb50 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x06, 0x40);			//--> Seg.G : ON
 800a970:	2140      	movs	r1, #64	; 0x40
 800a972:	2006      	movs	r0, #6
 800a974:	f7fe fb4c 	bl	8009010 <NX7_LCD_SEG_ON>
					break;
 800a978:	e0ad      	b.n	800aad6 <NX7_LCD_Out_Temp_Segment+0x616>
					NX7_LCD_SEG_ON(0x07, 0x08);			//--> Seg.A : ON
 800a97a:	2108      	movs	r1, #8
 800a97c:	2007      	movs	r0, #7
 800a97e:	f7fe fb47 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x07, 0x04);		//--> Seg.B : OFF
 800a982:	2104      	movs	r1, #4
 800a984:	2007      	movs	r0, #7
 800a986:	f7fe fb1b 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x07, 0x02);			//--> Seg.C : ON
 800a98a:	2102      	movs	r1, #2
 800a98c:	2007      	movs	r0, #7
 800a98e:	f7fe fb3f 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x07, 0x01);			//--> Seg.D : ON
 800a992:	2101      	movs	r1, #1
 800a994:	2007      	movs	r0, #7
 800a996:	f7fe fb3b 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x06, 0x20);		//--> Seg.E : OFF
 800a99a:	2120      	movs	r1, #32
 800a99c:	2006      	movs	r0, #6
 800a99e:	f7fe fb0f 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x06, 0x80);			//--> Seg.F : ON
 800a9a2:	2180      	movs	r1, #128	; 0x80
 800a9a4:	2006      	movs	r0, #6
 800a9a6:	f7fe fb33 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x06, 0x40);			//--> Seg.G : ON
 800a9aa:	2140      	movs	r1, #64	; 0x40
 800a9ac:	2006      	movs	r0, #6
 800a9ae:	f7fe fb2f 	bl	8009010 <NX7_LCD_SEG_ON>
					break;
 800a9b2:	e090      	b.n	800aad6 <NX7_LCD_Out_Temp_Segment+0x616>
					NX7_LCD_SEG_ON(0x07, 0x08);			//--> Seg.A : ON
 800a9b4:	2108      	movs	r1, #8
 800a9b6:	2007      	movs	r0, #7
 800a9b8:	f7fe fb2a 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x07, 0x04);		//--> Seg.B : OFF
 800a9bc:	2104      	movs	r1, #4
 800a9be:	2007      	movs	r0, #7
 800a9c0:	f7fe fafe 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x07, 0x02);			//--> Seg.C : ON
 800a9c4:	2102      	movs	r1, #2
 800a9c6:	2007      	movs	r0, #7
 800a9c8:	f7fe fb22 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x07, 0x01);			//--> Seg.D : ON
 800a9cc:	2101      	movs	r1, #1
 800a9ce:	2007      	movs	r0, #7
 800a9d0:	f7fe fb1e 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x06, 0x20);			//--> Seg.E : ON
 800a9d4:	2120      	movs	r1, #32
 800a9d6:	2006      	movs	r0, #6
 800a9d8:	f7fe fb1a 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x06, 0x80);			//--> Seg.F : ON
 800a9dc:	2180      	movs	r1, #128	; 0x80
 800a9de:	2006      	movs	r0, #6
 800a9e0:	f7fe fb16 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x06, 0x40);			//--> Seg.G : ON
 800a9e4:	2140      	movs	r1, #64	; 0x40
 800a9e6:	2006      	movs	r0, #6
 800a9e8:	f7fe fb12 	bl	8009010 <NX7_LCD_SEG_ON>
					break;
 800a9ec:	e073      	b.n	800aad6 <NX7_LCD_Out_Temp_Segment+0x616>
					NX7_LCD_SEG_ON(0x07, 0x08);			//--> Seg.A : ON
 800a9ee:	2108      	movs	r1, #8
 800a9f0:	2007      	movs	r0, #7
 800a9f2:	f7fe fb0d 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x07, 0x04);			//--> Seg.B : ON
 800a9f6:	2104      	movs	r1, #4
 800a9f8:	2007      	movs	r0, #7
 800a9fa:	f7fe fb09 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x07, 0x02);			//--> Seg.C : ON
 800a9fe:	2102      	movs	r1, #2
 800aa00:	2007      	movs	r0, #7
 800aa02:	f7fe fb05 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x07, 0x01);		//--> Seg.D : OFF
 800aa06:	2101      	movs	r1, #1
 800aa08:	2007      	movs	r0, #7
 800aa0a:	f7fe fad9 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x06, 0x20);		//--> Seg.E : OFF
 800aa0e:	2120      	movs	r1, #32
 800aa10:	2006      	movs	r0, #6
 800aa12:	f7fe fad5 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x06, 0x80);		//--> Seg.F : OFF
 800aa16:	2180      	movs	r1, #128	; 0x80
 800aa18:	2006      	movs	r0, #6
 800aa1a:	f7fe fad1 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x06, 0x40);		//--> Seg.G : OFF
 800aa1e:	2140      	movs	r1, #64	; 0x40
 800aa20:	2006      	movs	r0, #6
 800aa22:	f7fe facd 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					break;
 800aa26:	e056      	b.n	800aad6 <NX7_LCD_Out_Temp_Segment+0x616>
					NX7_LCD_SEG_ON(0x07, 0x08);			//--> Seg.A : ON
 800aa28:	2108      	movs	r1, #8
 800aa2a:	2007      	movs	r0, #7
 800aa2c:	f7fe faf0 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x07, 0x04);			//--> Seg.B : ON
 800aa30:	2104      	movs	r1, #4
 800aa32:	2007      	movs	r0, #7
 800aa34:	f7fe faec 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x07, 0x02);			//--> Seg.C : ON
 800aa38:	2102      	movs	r1, #2
 800aa3a:	2007      	movs	r0, #7
 800aa3c:	f7fe fae8 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x07, 0x01);			//--> Seg.D : ON
 800aa40:	2101      	movs	r1, #1
 800aa42:	2007      	movs	r0, #7
 800aa44:	f7fe fae4 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x06, 0x20);			//--> Seg.E : ON
 800aa48:	2120      	movs	r1, #32
 800aa4a:	2006      	movs	r0, #6
 800aa4c:	f7fe fae0 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x06, 0x80);			//--> Seg.F : ON
 800aa50:	2180      	movs	r1, #128	; 0x80
 800aa52:	2006      	movs	r0, #6
 800aa54:	f7fe fadc 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x06, 0x40);			//--> Seg.G : ON
 800aa58:	2140      	movs	r1, #64	; 0x40
 800aa5a:	2006      	movs	r0, #6
 800aa5c:	f7fe fad8 	bl	8009010 <NX7_LCD_SEG_ON>
					break;
 800aa60:	e039      	b.n	800aad6 <NX7_LCD_Out_Temp_Segment+0x616>
					NX7_LCD_SEG_ON(0x07, 0x08);			//--> Seg.A : ON
 800aa62:	2108      	movs	r1, #8
 800aa64:	2007      	movs	r0, #7
 800aa66:	f7fe fad3 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x07, 0x04);			//--> Seg.B : ON
 800aa6a:	2104      	movs	r1, #4
 800aa6c:	2007      	movs	r0, #7
 800aa6e:	f7fe facf 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x07, 0x02);			//--> Seg.C : ON
 800aa72:	2102      	movs	r1, #2
 800aa74:	2007      	movs	r0, #7
 800aa76:	f7fe facb 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x07, 0x01);			//--> Seg.D : ON
 800aa7a:	2101      	movs	r1, #1
 800aa7c:	2007      	movs	r0, #7
 800aa7e:	f7fe fac7 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_OFF(0x06, 0x20);		//--> Seg.E : OFF
 800aa82:	2120      	movs	r1, #32
 800aa84:	2006      	movs	r0, #6
 800aa86:	f7fe fa9b 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x06, 0x80);			//--> Seg.F : ON
 800aa8a:	2180      	movs	r1, #128	; 0x80
 800aa8c:	2006      	movs	r0, #6
 800aa8e:	f7fe fabf 	bl	8009010 <NX7_LCD_SEG_ON>
					NX7_LCD_SEG_ON(0x06, 0x40);			//--> Seg.G : ON
 800aa92:	2140      	movs	r1, #64	; 0x40
 800aa94:	2006      	movs	r0, #6
 800aa96:	f7fe fabb 	bl	8009010 <NX7_LCD_SEG_ON>
					break;
 800aa9a:	e01c      	b.n	800aad6 <NX7_LCD_Out_Temp_Segment+0x616>
					NX7_LCD_SEG_OFF(0x07, 0x08);		//--> Seg.A : OFF
 800aa9c:	2108      	movs	r1, #8
 800aa9e:	2007      	movs	r0, #7
 800aaa0:	f7fe fa8e 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x07, 0x04);		//--> Seg.B : OFF
 800aaa4:	2104      	movs	r1, #4
 800aaa6:	2007      	movs	r0, #7
 800aaa8:	f7fe fa8a 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x07, 0x02);		//--> Seg.C : OFF
 800aaac:	2102      	movs	r1, #2
 800aaae:	2007      	movs	r0, #7
 800aab0:	f7fe fa86 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x07, 0x01);		//--> Seg.D : OFF
 800aab4:	2101      	movs	r1, #1
 800aab6:	2007      	movs	r0, #7
 800aab8:	f7fe fa82 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x06, 0x20);		//--> Seg.E : OFF
 800aabc:	2120      	movs	r1, #32
 800aabe:	2006      	movs	r0, #6
 800aac0:	f7fe fa7e 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_OFF(0x06, 0x80);		//--> Seg.F : OFF
 800aac4:	2180      	movs	r1, #128	; 0x80
 800aac6:	2006      	movs	r0, #6
 800aac8:	f7fe fa7a 	bl	8008fc0 <NX7_LCD_SEG_OFF>
					NX7_LCD_SEG_ON(0x06, 0x40);			//--> Seg.G : ON
 800aacc:	2140      	movs	r1, #64	; 0x40
 800aace:	2006      	movs	r0, #6
 800aad0:	f7fe fa9e 	bl	8009010 <NX7_LCD_SEG_ON>
					break;
 800aad4:	bf00      	nop
			break;
 800aad6:	e003      	b.n	800aae0 <NX7_LCD_Out_Temp_Segment+0x620>
			break;
 800aad8:	bf00      	nop
 800aada:	e002      	b.n	800aae2 <NX7_LCD_Out_Temp_Segment+0x622>
			break;
 800aadc:	bf00      	nop
 800aade:	e000      	b.n	800aae2 <NX7_LCD_Out_Temp_Segment+0x622>
			break;
 800aae0:	bf00      	nop
}
 800aae2:	bf00      	nop
 800aae4:	3708      	adds	r7, #8
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}
 800aaea:	bf00      	nop

0800aaec <NX7_LCD_Out_Temp_Handler>:

/* NX7_LCD_Out_Temp_Handler --------------------------------------------------*/
void NX7_LCD_Out_Temp_Handler(int out_temp)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b08e      	sub	sp, #56	; 0x38
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
	switch (Ambient_Sensor_State)
 800aaf4:	4b3d      	ldr	r3, [pc, #244]	; (800abec <NX7_LCD_Out_Temp_Handler+0x100>)
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d002      	beq.n	800ab02 <NX7_LCD_Out_Temp_Handler+0x16>
 800aafc:	2b01      	cmp	r3, #1
 800aafe:	d051      	beq.n	800aba4 <NX7_LCD_Out_Temp_Handler+0xb8>
			counter++;
		} while(str[counter]!=0);
		break;
	}
	}
}
 800ab00:	e070      	b.n	800abe4 <NX7_LCD_Out_Temp_Handler+0xf8>
		if(out_temp >= 0)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	db2c      	blt.n	800ab62 <NX7_LCD_Out_Temp_Handler+0x76>
			char str1[8]={'+'}, str2[8]={0}; int counter=0;
 800ab08:	232b      	movs	r3, #43	; 0x2b
 800ab0a:	627b      	str	r3, [r7, #36]	; 0x24
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab10:	2300      	movs	r3, #0
 800ab12:	61fb      	str	r3, [r7, #28]
 800ab14:	2300      	movs	r3, #0
 800ab16:	623b      	str	r3, [r7, #32]
 800ab18:	2300      	movs	r3, #0
 800ab1a:	637b      	str	r3, [r7, #52]	; 0x34
			sprintf(str2, "%02i", out_temp);
 800ab1c:	f107 031c 	add.w	r3, r7, #28
 800ab20:	687a      	ldr	r2, [r7, #4]
 800ab22:	4933      	ldr	r1, [pc, #204]	; (800abf0 <NX7_LCD_Out_Temp_Handler+0x104>)
 800ab24:	4618      	mov	r0, r3
 800ab26:	f003 fcd3 	bl	800e4d0 <siprintf>
			strcat(str1, str2);
 800ab2a:	f107 021c 	add.w	r2, r7, #28
 800ab2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ab32:	4611      	mov	r1, r2
 800ab34:	4618      	mov	r0, r3
 800ab36:	f003 fceb 	bl	800e510 <strcat>
				NX7_LCD_Out_Temp_Segment(str1[counter], counter);
 800ab3a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ab3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab40:	4413      	add	r3, r2
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ab46:	4618      	mov	r0, r3
 800ab48:	f7ff fcba 	bl	800a4c0 <NX7_LCD_Out_Temp_Segment>
				counter++;
 800ab4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab4e:	3301      	adds	r3, #1
 800ab50:	637b      	str	r3, [r7, #52]	; 0x34
			} while(str1[counter]!=0);
 800ab52:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ab56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab58:	4413      	add	r3, r2
 800ab5a:	781b      	ldrb	r3, [r3, #0]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d1ec      	bne.n	800ab3a <NX7_LCD_Out_Temp_Handler+0x4e>
		break;
 800ab60:	e040      	b.n	800abe4 <NX7_LCD_Out_Temp_Handler+0xf8>
			char str[8]={0}; int counter=0;
 800ab62:	2300      	movs	r3, #0
 800ab64:	617b      	str	r3, [r7, #20]
 800ab66:	2300      	movs	r3, #0
 800ab68:	61bb      	str	r3, [r7, #24]
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	633b      	str	r3, [r7, #48]	; 0x30
			sprintf(str, "%03i", out_temp);
 800ab6e:	f107 0314 	add.w	r3, r7, #20
 800ab72:	687a      	ldr	r2, [r7, #4]
 800ab74:	491f      	ldr	r1, [pc, #124]	; (800abf4 <NX7_LCD_Out_Temp_Handler+0x108>)
 800ab76:	4618      	mov	r0, r3
 800ab78:	f003 fcaa 	bl	800e4d0 <siprintf>
				NX7_LCD_Out_Temp_Segment(str[counter], counter);
 800ab7c:	f107 0214 	add.w	r2, r7, #20
 800ab80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab82:	4413      	add	r3, r2
 800ab84:	781b      	ldrb	r3, [r3, #0]
 800ab86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f7ff fc99 	bl	800a4c0 <NX7_LCD_Out_Temp_Segment>
				counter++;
 800ab8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab90:	3301      	adds	r3, #1
 800ab92:	633b      	str	r3, [r7, #48]	; 0x30
			} while(str[counter]!=0);
 800ab94:	f107 0214 	add.w	r2, r7, #20
 800ab98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9a:	4413      	add	r3, r2
 800ab9c:	781b      	ldrb	r3, [r3, #0]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d1ec      	bne.n	800ab7c <NX7_LCD_Out_Temp_Handler+0x90>
		break;
 800aba2:	e01f      	b.n	800abe4 <NX7_LCD_Out_Temp_Handler+0xf8>
		char str[8]={0}; int counter=0;
 800aba4:	2300      	movs	r3, #0
 800aba6:	60fb      	str	r3, [r7, #12]
 800aba8:	2300      	movs	r3, #0
 800abaa:	613b      	str	r3, [r7, #16]
 800abac:	2300      	movs	r3, #0
 800abae:	62fb      	str	r3, [r7, #44]	; 0x2c
		sprintf(str, " --");
 800abb0:	f107 030c 	add.w	r3, r7, #12
 800abb4:	4910      	ldr	r1, [pc, #64]	; (800abf8 <NX7_LCD_Out_Temp_Handler+0x10c>)
 800abb6:	4618      	mov	r0, r3
 800abb8:	f003 fc8a 	bl	800e4d0 <siprintf>
			NX7_LCD_Out_Temp_Segment(str[counter], counter);
 800abbc:	f107 020c 	add.w	r2, r7, #12
 800abc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc2:	4413      	add	r3, r2
 800abc4:	781b      	ldrb	r3, [r3, #0]
 800abc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800abc8:	4618      	mov	r0, r3
 800abca:	f7ff fc79 	bl	800a4c0 <NX7_LCD_Out_Temp_Segment>
			counter++;
 800abce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd0:	3301      	adds	r3, #1
 800abd2:	62fb      	str	r3, [r7, #44]	; 0x2c
		} while(str[counter]!=0);
 800abd4:	f107 020c 	add.w	r2, r7, #12
 800abd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abda:	4413      	add	r3, r2
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d1ec      	bne.n	800abbc <NX7_LCD_Out_Temp_Handler+0xd0>
		break;
 800abe2:	bf00      	nop
}
 800abe4:	bf00      	nop
 800abe6:	3738      	adds	r7, #56	; 0x38
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}
 800abec:	2000000d 	.word	0x2000000d
 800abf0:	080116d0 	.word	0x080116d0
 800abf4:	080116d8 	.word	0x080116d8
 800abf8:	080116e0 	.word	0x080116e0

0800abfc <NX7_Mode_MA_STP>:
MA_Lock_State  Mode_MA_Lock_State;

/* Functions body *************************************************************/
/* NX7_Mode_MA_STP -----------------------------------------------------------*/
void NX7_Mode_MA_STP(void)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b082      	sub	sp, #8
 800ac00:	af00      	add	r7, sp, #0
	uint8_t temp;
	temp = NX7_TLE_Ctrl_Register_Read(HB_ACT_1_CTRL);
 800ac02:	2003      	movs	r0, #3
 800ac04:	f002 ff64 	bl	800dad0 <NX7_TLE_Ctrl_Register_Read>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	71fb      	strb	r3, [r7, #7]
	temp &= 0x0F;
 800ac0c:	79fb      	ldrb	r3, [r7, #7]
 800ac0e:	f003 030f 	and.w	r3, r3, #15
 800ac12:	71fb      	strb	r3, [r7, #7]
	if(temp != 0x05)
 800ac14:	79fb      	ldrb	r3, [r7, #7]
 800ac16:	2b05      	cmp	r3, #5
 800ac18:	d019      	beq.n	800ac4e <NX7_Mode_MA_STP+0x52>
	{
		temp = NX7_TLE_Ctrl_Register_Read(HB_ACT_1_CTRL);
 800ac1a:	2003      	movs	r0, #3
 800ac1c:	f002 ff58 	bl	800dad0 <NX7_TLE_Ctrl_Register_Read>
 800ac20:	4603      	mov	r3, r0
 800ac22:	71fb      	strb	r3, [r7, #7]
		temp &= 0xF0;
 800ac24:	79fb      	ldrb	r3, [r7, #7]
 800ac26:	f023 030f 	bic.w	r3, r3, #15
 800ac2a:	71fb      	strb	r3, [r7, #7]
		temp |= 0x05;		//--> OUTH2:HZ & OUTL2:ON & OUTH1:HZ & OUTL1:ON
 800ac2c:	79fb      	ldrb	r3, [r7, #7]
 800ac2e:	f043 0305 	orr.w	r3, r3, #5
 800ac32:	71fb      	strb	r3, [r7, #7]
		NX7_TLE_Ctrl_Register_Write(HB_ACT_1_CTRL, temp);
 800ac34:	79fb      	ldrb	r3, [r7, #7]
 800ac36:	4619      	mov	r1, r3
 800ac38:	2003      	movs	r0, #3
 800ac3a:	f002 ff7d 	bl	800db38 <NX7_TLE_Ctrl_Register_Write>
		// TIM7 Stop --> Mode_Lock_State
		HAL_TIM_Base_Stop_IT(&htim7);
 800ac3e:	4806      	ldr	r0, [pc, #24]	; (800ac58 <NX7_Mode_MA_STP+0x5c>)
 800ac40:	f7fa ffde 	bl	8005c00 <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_CLEAR_FLAG(&htim7, TIM_FLAG_UPDATE);
 800ac44:	4b04      	ldr	r3, [pc, #16]	; (800ac58 <NX7_Mode_MA_STP+0x5c>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f06f 0201 	mvn.w	r2, #1
 800ac4c:	611a      	str	r2, [r3, #16]
	}
}
 800ac4e:	bf00      	nop
 800ac50:	3708      	adds	r7, #8
 800ac52:	46bd      	mov	sp, r7
 800ac54:	bd80      	pop	{r7, pc}
 800ac56:	bf00      	nop
 800ac58:	2000052c 	.word	0x2000052c

0800ac5c <NX7_Mode_MA_FWD>:

/* NX7_Mode_MA_FWD -----------------------------------------------------------*/
void NX7_Mode_MA_FWD(void)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b082      	sub	sp, #8
 800ac60:	af00      	add	r7, sp, #0
	uint8_t temp;
	temp = NX7_TLE_Ctrl_Register_Read(HB_ACT_1_CTRL);
 800ac62:	2003      	movs	r0, #3
 800ac64:	f002 ff34 	bl	800dad0 <NX7_TLE_Ctrl_Register_Read>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	71fb      	strb	r3, [r7, #7]
	temp &= 0x0F;
 800ac6c:	79fb      	ldrb	r3, [r7, #7]
 800ac6e:	f003 030f 	and.w	r3, r3, #15
 800ac72:	71fb      	strb	r3, [r7, #7]
	if((temp != 0x06) && (Mode_MA_Lock_State == MA_Lock_OK))
 800ac74:	79fb      	ldrb	r3, [r7, #7]
 800ac76:	2b06      	cmp	r3, #6
 800ac78:	d021      	beq.n	800acbe <NX7_Mode_MA_FWD+0x62>
 800ac7a:	4b13      	ldr	r3, [pc, #76]	; (800acc8 <NX7_Mode_MA_FWD+0x6c>)
 800ac7c:	781b      	ldrb	r3, [r3, #0]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d11d      	bne.n	800acbe <NX7_Mode_MA_FWD+0x62>
	{
		temp = NX7_TLE_Ctrl_Register_Read(HB_ACT_1_CTRL);
 800ac82:	2003      	movs	r0, #3
 800ac84:	f002 ff24 	bl	800dad0 <NX7_TLE_Ctrl_Register_Read>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	71fb      	strb	r3, [r7, #7]
		temp &= 0xF0;
 800ac8c:	79fb      	ldrb	r3, [r7, #7]
 800ac8e:	f023 030f 	bic.w	r3, r3, #15
 800ac92:	71fb      	strb	r3, [r7, #7]
		temp |= 0x06;		//--> OUTH2:HZ & OUTL2:ON & OUTH1:ON & OUTL1:HZ
 800ac94:	79fb      	ldrb	r3, [r7, #7]
 800ac96:	f043 0306 	orr.w	r3, r3, #6
 800ac9a:	71fb      	strb	r3, [r7, #7]
		NX7_TLE_Ctrl_Register_Write(HB_ACT_1_CTRL, temp);
 800ac9c:	79fb      	ldrb	r3, [r7, #7]
 800ac9e:	4619      	mov	r1, r3
 800aca0:	2003      	movs	r0, #3
 800aca2:	f002 ff49 	bl	800db38 <NX7_TLE_Ctrl_Register_Write>
		// TIM7 Start --> Mode_Lock_State
		htim7.Instance->CNT = 0x00;
 800aca6:	4b09      	ldr	r3, [pc, #36]	; (800accc <NX7_Mode_MA_FWD+0x70>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	2200      	movs	r2, #0
 800acac:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_CLEAR_FLAG(&htim7, TIM_FLAG_UPDATE);
 800acae:	4b07      	ldr	r3, [pc, #28]	; (800accc <NX7_Mode_MA_FWD+0x70>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f06f 0201 	mvn.w	r2, #1
 800acb6:	611a      	str	r2, [r3, #16]
		HAL_TIM_Base_Start_IT(&htim7);
 800acb8:	4804      	ldr	r0, [pc, #16]	; (800accc <NX7_Mode_MA_FWD+0x70>)
 800acba:	f7fa ff47 	bl	8005b4c <HAL_TIM_Base_Start_IT>
	}
}
 800acbe:	bf00      	nop
 800acc0:	3708      	adds	r7, #8
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}
 800acc6:	bf00      	nop
 800acc8:	20000217 	.word	0x20000217
 800accc:	2000052c 	.word	0x2000052c

0800acd0 <NX7_Mode_MA_RVS>:

/* NX7_Mode_MA_RVS -----------------------------------------------------------*/
void NX7_Mode_MA_RVS(void)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b082      	sub	sp, #8
 800acd4:	af00      	add	r7, sp, #0
	uint8_t temp;
	temp = NX7_TLE_Ctrl_Register_Read(HB_ACT_1_CTRL);
 800acd6:	2003      	movs	r0, #3
 800acd8:	f002 fefa 	bl	800dad0 <NX7_TLE_Ctrl_Register_Read>
 800acdc:	4603      	mov	r3, r0
 800acde:	71fb      	strb	r3, [r7, #7]
	temp &= 0x0F;
 800ace0:	79fb      	ldrb	r3, [r7, #7]
 800ace2:	f003 030f 	and.w	r3, r3, #15
 800ace6:	71fb      	strb	r3, [r7, #7]
	if((temp != 0x09) && (Mode_MA_Lock_State == MA_Lock_OK))
 800ace8:	79fb      	ldrb	r3, [r7, #7]
 800acea:	2b09      	cmp	r3, #9
 800acec:	d021      	beq.n	800ad32 <NX7_Mode_MA_RVS+0x62>
 800acee:	4b13      	ldr	r3, [pc, #76]	; (800ad3c <NX7_Mode_MA_RVS+0x6c>)
 800acf0:	781b      	ldrb	r3, [r3, #0]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d11d      	bne.n	800ad32 <NX7_Mode_MA_RVS+0x62>
	{
		temp = NX7_TLE_Ctrl_Register_Read(HB_ACT_1_CTRL);
 800acf6:	2003      	movs	r0, #3
 800acf8:	f002 feea 	bl	800dad0 <NX7_TLE_Ctrl_Register_Read>
 800acfc:	4603      	mov	r3, r0
 800acfe:	71fb      	strb	r3, [r7, #7]
		temp &= 0xF0;
 800ad00:	79fb      	ldrb	r3, [r7, #7]
 800ad02:	f023 030f 	bic.w	r3, r3, #15
 800ad06:	71fb      	strb	r3, [r7, #7]
		temp |= 0x09;		//--> OUTH2:ON & OUTL2:HZ & OUTH1:HZ & OUTL1:ON
 800ad08:	79fb      	ldrb	r3, [r7, #7]
 800ad0a:	f043 0309 	orr.w	r3, r3, #9
 800ad0e:	71fb      	strb	r3, [r7, #7]
		NX7_TLE_Ctrl_Register_Write(HB_ACT_1_CTRL, temp);
 800ad10:	79fb      	ldrb	r3, [r7, #7]
 800ad12:	4619      	mov	r1, r3
 800ad14:	2003      	movs	r0, #3
 800ad16:	f002 ff0f 	bl	800db38 <NX7_TLE_Ctrl_Register_Write>
		// TIM7 Start --> Mode_Lock_State
		htim7.Instance->CNT = 0x00;
 800ad1a:	4b09      	ldr	r3, [pc, #36]	; (800ad40 <NX7_Mode_MA_RVS+0x70>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_CLEAR_FLAG(&htim7, TIM_FLAG_UPDATE);
 800ad22:	4b07      	ldr	r3, [pc, #28]	; (800ad40 <NX7_Mode_MA_RVS+0x70>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f06f 0201 	mvn.w	r2, #1
 800ad2a:	611a      	str	r2, [r3, #16]
		HAL_TIM_Base_Start_IT(&htim7);
 800ad2c:	4804      	ldr	r0, [pc, #16]	; (800ad40 <NX7_Mode_MA_RVS+0x70>)
 800ad2e:	f7fa ff0d 	bl	8005b4c <HAL_TIM_Base_Start_IT>
	}
}
 800ad32:	bf00      	nop
 800ad34:	3708      	adds	r7, #8
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}
 800ad3a:	bf00      	nop
 800ad3c:	20000217 	.word	0x20000217
 800ad40:	2000052c 	.word	0x2000052c
 800ad44:	00000000 	.word	0x00000000

0800ad48 <NX7_Mode_MA_Handler>:

/* NX7_Mode_MA_Handler -------------------------------------------------------*/
void NX7_Mode_MA_Handler(Mode_State state)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b082      	sub	sp, #8
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	4603      	mov	r3, r0
 800ad50:	71fb      	strb	r3, [r7, #7]
	switch (state)
 800ad52:	79fb      	ldrb	r3, [r7, #7]
 800ad54:	2b04      	cmp	r3, #4
 800ad56:	f200 80b5 	bhi.w	800aec4 <NX7_Mode_MA_Handler+0x17c>
 800ad5a:	a201      	add	r2, pc, #4	; (adr r2, 800ad60 <NX7_Mode_MA_Handler+0x18>)
 800ad5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad60:	0800ad75 	.word	0x0800ad75
 800ad64:	0800adbb 	.word	0x0800adbb
 800ad68:	0800ae01 	.word	0x0800ae01
 800ad6c:	0800ae3f 	.word	0x0800ae3f
 800ad70:	0800ae7f 	.word	0x0800ae7f
	{
		case Mode_Face:
		{
			if(NX7_Mode_FB <= (NX7_Mode_Face_Pos-NX7_Mode_Tolerance))
 800ad74:	4b66      	ldr	r3, [pc, #408]	; (800af10 <NX7_Mode_MA_Handler+0x1c8>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4618      	mov	r0, r3
 800ad7a:	f7f5 fbb5 	bl	80004e8 <__aeabi_f2d>
 800ad7e:	a354      	add	r3, pc, #336	; (adr r3, 800aed0 <NX7_Mode_MA_Handler+0x188>)
 800ad80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad84:	f7f5 fe84 	bl	8000a90 <__aeabi_dcmple>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d002      	beq.n	800ad94 <NX7_Mode_MA_Handler+0x4c>
				NX7_Mode_MA_FWD();
 800ad8e:	f7ff ff65 	bl	800ac5c <NX7_Mode_MA_FWD>
			else if(NX7_Mode_FB >= (NX7_Mode_Face_Pos+NX7_Mode_Tolerance))
				NX7_Mode_MA_RVS();
			else
				NX7_Mode_MA_STP();
			break;			
 800ad92:	e097      	b.n	800aec4 <NX7_Mode_MA_Handler+0x17c>
			else if(NX7_Mode_FB >= (NX7_Mode_Face_Pos+NX7_Mode_Tolerance))
 800ad94:	4b5e      	ldr	r3, [pc, #376]	; (800af10 <NX7_Mode_MA_Handler+0x1c8>)
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f7f5 fba5 	bl	80004e8 <__aeabi_f2d>
 800ad9e:	a34e      	add	r3, pc, #312	; (adr r3, 800aed8 <NX7_Mode_MA_Handler+0x190>)
 800ada0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada4:	f7f5 fe7e 	bl	8000aa4 <__aeabi_dcmpge>
 800ada8:	4603      	mov	r3, r0
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d002      	beq.n	800adb4 <NX7_Mode_MA_Handler+0x6c>
				NX7_Mode_MA_RVS();
 800adae:	f7ff ff8f 	bl	800acd0 <NX7_Mode_MA_RVS>
			break;			
 800adb2:	e087      	b.n	800aec4 <NX7_Mode_MA_Handler+0x17c>
				NX7_Mode_MA_STP();
 800adb4:	f7ff ff22 	bl	800abfc <NX7_Mode_MA_STP>
			break;			
 800adb8:	e084      	b.n	800aec4 <NX7_Mode_MA_Handler+0x17c>
		}
		case Mode_Face_Foot:
		{
			if(NX7_Mode_FB <= (NX7_Mode_Face_Foot_Pos-NX7_Mode_Tolerance))
 800adba:	4b55      	ldr	r3, [pc, #340]	; (800af10 <NX7_Mode_MA_Handler+0x1c8>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	4618      	mov	r0, r3
 800adc0:	f7f5 fb92 	bl	80004e8 <__aeabi_f2d>
 800adc4:	a346      	add	r3, pc, #280	; (adr r3, 800aee0 <NX7_Mode_MA_Handler+0x198>)
 800adc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adca:	f7f5 fe61 	bl	8000a90 <__aeabi_dcmple>
 800adce:	4603      	mov	r3, r0
 800add0:	2b00      	cmp	r3, #0
 800add2:	d002      	beq.n	800adda <NX7_Mode_MA_Handler+0x92>
				NX7_Mode_MA_FWD();
 800add4:	f7ff ff42 	bl	800ac5c <NX7_Mode_MA_FWD>
			else if(NX7_Mode_FB >= (NX7_Mode_Face_Foot_Pos+NX7_Mode_Tolerance))
				NX7_Mode_MA_RVS();
			else
				NX7_Mode_MA_STP();
			break;			
 800add8:	e074      	b.n	800aec4 <NX7_Mode_MA_Handler+0x17c>
			else if(NX7_Mode_FB >= (NX7_Mode_Face_Foot_Pos+NX7_Mode_Tolerance))
 800adda:	4b4d      	ldr	r3, [pc, #308]	; (800af10 <NX7_Mode_MA_Handler+0x1c8>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	4618      	mov	r0, r3
 800ade0:	f7f5 fb82 	bl	80004e8 <__aeabi_f2d>
 800ade4:	a340      	add	r3, pc, #256	; (adr r3, 800aee8 <NX7_Mode_MA_Handler+0x1a0>)
 800ade6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adea:	f7f5 fe5b 	bl	8000aa4 <__aeabi_dcmpge>
 800adee:	4603      	mov	r3, r0
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d002      	beq.n	800adfa <NX7_Mode_MA_Handler+0xb2>
				NX7_Mode_MA_RVS();
 800adf4:	f7ff ff6c 	bl	800acd0 <NX7_Mode_MA_RVS>
			break;			
 800adf8:	e064      	b.n	800aec4 <NX7_Mode_MA_Handler+0x17c>
				NX7_Mode_MA_STP();
 800adfa:	f7ff feff 	bl	800abfc <NX7_Mode_MA_STP>
			break;			
 800adfe:	e061      	b.n	800aec4 <NX7_Mode_MA_Handler+0x17c>
		}
		case Mode_Foot:
		{
			if(NX7_Mode_FB <= (NX7_Mode_Foot_Pos-NX7_Mode_Tolerance))
 800ae00:	4b43      	ldr	r3, [pc, #268]	; (800af10 <NX7_Mode_MA_Handler+0x1c8>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	4618      	mov	r0, r3
 800ae06:	f7f5 fb6f 	bl	80004e8 <__aeabi_f2d>
 800ae0a:	a339      	add	r3, pc, #228	; (adr r3, 800aef0 <NX7_Mode_MA_Handler+0x1a8>)
 800ae0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae10:	f7f5 fe3e 	bl	8000a90 <__aeabi_dcmple>
 800ae14:	4603      	mov	r3, r0
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d002      	beq.n	800ae20 <NX7_Mode_MA_Handler+0xd8>
				NX7_Mode_MA_FWD();
 800ae1a:	f7ff ff1f 	bl	800ac5c <NX7_Mode_MA_FWD>
			else if(NX7_Mode_FB >= (NX7_Mode_Foot_Pos+NX7_Mode_Tolerance))
				NX7_Mode_MA_RVS();
			else
				NX7_Mode_MA_STP();
			break;			
 800ae1e:	e051      	b.n	800aec4 <NX7_Mode_MA_Handler+0x17c>
			else if(NX7_Mode_FB >= (NX7_Mode_Foot_Pos+NX7_Mode_Tolerance))
 800ae20:	4b3b      	ldr	r3, [pc, #236]	; (800af10 <NX7_Mode_MA_Handler+0x1c8>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	493b      	ldr	r1, [pc, #236]	; (800af14 <NX7_Mode_MA_Handler+0x1cc>)
 800ae26:	4618      	mov	r0, r3
 800ae28:	f7f6 f99e 	bl	8001168 <__aeabi_fcmpge>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d002      	beq.n	800ae38 <NX7_Mode_MA_Handler+0xf0>
				NX7_Mode_MA_RVS();
 800ae32:	f7ff ff4d 	bl	800acd0 <NX7_Mode_MA_RVS>
			break;			
 800ae36:	e045      	b.n	800aec4 <NX7_Mode_MA_Handler+0x17c>
				NX7_Mode_MA_STP();
 800ae38:	f7ff fee0 	bl	800abfc <NX7_Mode_MA_STP>
			break;			
 800ae3c:	e042      	b.n	800aec4 <NX7_Mode_MA_Handler+0x17c>
		}
		case Mode_Foot_Def:
		{
			if(NX7_Mode_FB <= (NX7_Mode_Foot_Def_Pos-NX7_Mode_Tolerance))
 800ae3e:	4b34      	ldr	r3, [pc, #208]	; (800af10 <NX7_Mode_MA_Handler+0x1c8>)
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	4618      	mov	r0, r3
 800ae44:	f7f5 fb50 	bl	80004e8 <__aeabi_f2d>
 800ae48:	a32b      	add	r3, pc, #172	; (adr r3, 800aef8 <NX7_Mode_MA_Handler+0x1b0>)
 800ae4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae4e:	f7f5 fe1f 	bl	8000a90 <__aeabi_dcmple>
 800ae52:	4603      	mov	r3, r0
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d002      	beq.n	800ae5e <NX7_Mode_MA_Handler+0x116>
				NX7_Mode_MA_FWD();
 800ae58:	f7ff ff00 	bl	800ac5c <NX7_Mode_MA_FWD>
			else if(NX7_Mode_FB >= (NX7_Mode_Foot_Def_Pos+NX7_Mode_Tolerance))
				NX7_Mode_MA_RVS();
			else
				NX7_Mode_MA_STP();
			break;			
 800ae5c:	e032      	b.n	800aec4 <NX7_Mode_MA_Handler+0x17c>
			else if(NX7_Mode_FB >= (NX7_Mode_Foot_Def_Pos+NX7_Mode_Tolerance))
 800ae5e:	4b2c      	ldr	r3, [pc, #176]	; (800af10 <NX7_Mode_MA_Handler+0x1c8>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800ae66:	4618      	mov	r0, r3
 800ae68:	f7f6 f97e 	bl	8001168 <__aeabi_fcmpge>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d002      	beq.n	800ae78 <NX7_Mode_MA_Handler+0x130>
				NX7_Mode_MA_RVS();
 800ae72:	f7ff ff2d 	bl	800acd0 <NX7_Mode_MA_RVS>
			break;			
 800ae76:	e025      	b.n	800aec4 <NX7_Mode_MA_Handler+0x17c>
				NX7_Mode_MA_STP();
 800ae78:	f7ff fec0 	bl	800abfc <NX7_Mode_MA_STP>
			break;			
 800ae7c:	e022      	b.n	800aec4 <NX7_Mode_MA_Handler+0x17c>
		}
		case Mode_Def:
		{
			if(NX7_Mode_FB <= (NX7_Mode_Def_Pos-NX7_Mode_Tolerance))
 800ae7e:	4b24      	ldr	r3, [pc, #144]	; (800af10 <NX7_Mode_MA_Handler+0x1c8>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	4618      	mov	r0, r3
 800ae84:	f7f5 fb30 	bl	80004e8 <__aeabi_f2d>
 800ae88:	a31d      	add	r3, pc, #116	; (adr r3, 800af00 <NX7_Mode_MA_Handler+0x1b8>)
 800ae8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae8e:	f7f5 fdff 	bl	8000a90 <__aeabi_dcmple>
 800ae92:	4603      	mov	r3, r0
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d002      	beq.n	800ae9e <NX7_Mode_MA_Handler+0x156>
				NX7_Mode_MA_FWD();
 800ae98:	f7ff fee0 	bl	800ac5c <NX7_Mode_MA_FWD>
			else if(NX7_Mode_FB >= (NX7_Mode_Def_Pos+NX7_Mode_Tolerance))
				NX7_Mode_MA_RVS();
			else
				NX7_Mode_MA_STP();
			break;			
 800ae9c:	e011      	b.n	800aec2 <NX7_Mode_MA_Handler+0x17a>
			else if(NX7_Mode_FB >= (NX7_Mode_Def_Pos+NX7_Mode_Tolerance))
 800ae9e:	4b1c      	ldr	r3, [pc, #112]	; (800af10 <NX7_Mode_MA_Handler+0x1c8>)
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	4618      	mov	r0, r3
 800aea4:	f7f5 fb20 	bl	80004e8 <__aeabi_f2d>
 800aea8:	a317      	add	r3, pc, #92	; (adr r3, 800af08 <NX7_Mode_MA_Handler+0x1c0>)
 800aeaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeae:	f7f5 fdf9 	bl	8000aa4 <__aeabi_dcmpge>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d002      	beq.n	800aebe <NX7_Mode_MA_Handler+0x176>
				NX7_Mode_MA_RVS();
 800aeb8:	f7ff ff0a 	bl	800acd0 <NX7_Mode_MA_RVS>
			break;			
 800aebc:	e001      	b.n	800aec2 <NX7_Mode_MA_Handler+0x17a>
				NX7_Mode_MA_STP();
 800aebe:	f7ff fe9d 	bl	800abfc <NX7_Mode_MA_STP>
			break;			
 800aec2:	bf00      	nop
		}
	}
}
 800aec4:	bf00      	nop
 800aec6:	3708      	adds	r7, #8
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}
 800aecc:	f3af 8000 	nop.w
 800aed0:	9999999a 	.word	0x9999999a
 800aed4:	40119999 	.word	0x40119999
 800aed8:	66666666 	.word	0x66666666
 800aedc:	40126666 	.word	0x40126666
 800aee0:	99999999 	.word	0x99999999
 800aee4:	40099999 	.word	0x40099999
 800aee8:	33333333 	.word	0x33333333
 800aeec:	400b3333 	.word	0x400b3333
 800aef0:	66666666 	.word	0x66666666
 800aef4:	40026666 	.word	0x40026666
 800aef8:	cccccccc 	.word	0xcccccccc
 800aefc:	3ff4cccc 	.word	0x3ff4cccc
 800af00:	9999999a 	.word	0x9999999a
 800af04:	3fd99999 	.word	0x3fd99999
 800af08:	33333333 	.word	0x33333333
 800af0c:	3fe33333 	.word	0x3fe33333
 800af10:	2000059c 	.word	0x2000059c
 800af14:	40200000 	.word	0x40200000

0800af18 <NX7_PID_Ctrl_No_Hysteresis>:
extern  Auto_Ctrl_State  Blower_Auto_Ctrl_State;

/* Functions body *************************************************************/
/* NX7_PID_Ctrl_No_Hysteresis ------------------------------------------------*/
void NX7_PID_Ctrl_No_Hysteresis(void)
{
 800af18:	b590      	push	{r4, r7, lr}
 800af1a:	b085      	sub	sp, #20
 800af1c:	af00      	add	r7, sp, #0
/* ------------------------------------------------------- <PID_Calculations> */
	PID_Error = TS-TC;
 800af1e:	4b9b      	ldr	r3, [pc, #620]	; (800b18c <NX7_PID_Ctrl_No_Hysteresis+0x274>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	4a9b      	ldr	r2, [pc, #620]	; (800b190 <NX7_PID_Ctrl_No_Hysteresis+0x278>)
 800af24:	6852      	ldr	r2, [r2, #4]
 800af26:	4611      	mov	r1, r2
 800af28:	4618      	mov	r0, r3
 800af2a:	f7f5 fe61 	bl	8000bf0 <__aeabi_fsub>
 800af2e:	4603      	mov	r3, r0
 800af30:	461a      	mov	r2, r3
 800af32:	4b98      	ldr	r3, [pc, #608]	; (800b194 <NX7_PID_Ctrl_No_Hysteresis+0x27c>)
 800af34:	601a      	str	r2, [r3, #0]

	if(fabsf(TS-TA) < 10)
 800af36:	4b95      	ldr	r3, [pc, #596]	; (800b18c <NX7_PID_Ctrl_No_Hysteresis+0x274>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	4a95      	ldr	r2, [pc, #596]	; (800b190 <NX7_PID_Ctrl_No_Hysteresis+0x278>)
 800af3c:	68d2      	ldr	r2, [r2, #12]
 800af3e:	4611      	mov	r1, r2
 800af40:	4618      	mov	r0, r3
 800af42:	f7f5 fe55 	bl	8000bf0 <__aeabi_fsub>
 800af46:	4603      	mov	r3, r0
 800af48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af4c:	4992      	ldr	r1, [pc, #584]	; (800b198 <NX7_PID_Ctrl_No_Hysteresis+0x280>)
 800af4e:	4618      	mov	r0, r3
 800af50:	f7f6 f8f6 	bl	8001140 <__aeabi_fcmplt>
 800af54:	4603      	mov	r3, r0
 800af56:	2b00      	cmp	r3, #0
 800af58:	d003      	beq.n	800af62 <NX7_PID_Ctrl_No_Hysteresis+0x4a>
	{
		Ksat = 40;
 800af5a:	4b90      	ldr	r3, [pc, #576]	; (800b19c <NX7_PID_Ctrl_No_Hysteresis+0x284>)
 800af5c:	4a90      	ldr	r2, [pc, #576]	; (800b1a0 <NX7_PID_Ctrl_No_Hysteresis+0x288>)
 800af5e:	601a      	str	r2, [r3, #0]
 800af60:	e03c      	b.n	800afdc <NX7_PID_Ctrl_No_Hysteresis+0xc4>
	}
	else if((fabsf(TS-TA) >= 10) && (fabsf(TS-TA) < 15))
 800af62:	4b8a      	ldr	r3, [pc, #552]	; (800b18c <NX7_PID_Ctrl_No_Hysteresis+0x274>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	4a8a      	ldr	r2, [pc, #552]	; (800b190 <NX7_PID_Ctrl_No_Hysteresis+0x278>)
 800af68:	68d2      	ldr	r2, [r2, #12]
 800af6a:	4611      	mov	r1, r2
 800af6c:	4618      	mov	r0, r3
 800af6e:	f7f5 fe3f 	bl	8000bf0 <__aeabi_fsub>
 800af72:	4603      	mov	r3, r0
 800af74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af78:	4987      	ldr	r1, [pc, #540]	; (800b198 <NX7_PID_Ctrl_No_Hysteresis+0x280>)
 800af7a:	4618      	mov	r0, r3
 800af7c:	f7f6 f8f4 	bl	8001168 <__aeabi_fcmpge>
 800af80:	4603      	mov	r3, r0
 800af82:	2b00      	cmp	r3, #0
 800af84:	d015      	beq.n	800afb2 <NX7_PID_Ctrl_No_Hysteresis+0x9a>
 800af86:	4b81      	ldr	r3, [pc, #516]	; (800b18c <NX7_PID_Ctrl_No_Hysteresis+0x274>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	4a81      	ldr	r2, [pc, #516]	; (800b190 <NX7_PID_Ctrl_No_Hysteresis+0x278>)
 800af8c:	68d2      	ldr	r2, [r2, #12]
 800af8e:	4611      	mov	r1, r2
 800af90:	4618      	mov	r0, r3
 800af92:	f7f5 fe2d 	bl	8000bf0 <__aeabi_fsub>
 800af96:	4603      	mov	r3, r0
 800af98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af9c:	4981      	ldr	r1, [pc, #516]	; (800b1a4 <NX7_PID_Ctrl_No_Hysteresis+0x28c>)
 800af9e:	4618      	mov	r0, r3
 800afa0:	f7f6 f8ce 	bl	8001140 <__aeabi_fcmplt>
 800afa4:	4603      	mov	r3, r0
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d003      	beq.n	800afb2 <NX7_PID_Ctrl_No_Hysteresis+0x9a>
	{
		Ksat = 45;
 800afaa:	4b7c      	ldr	r3, [pc, #496]	; (800b19c <NX7_PID_Ctrl_No_Hysteresis+0x284>)
 800afac:	4a7e      	ldr	r2, [pc, #504]	; (800b1a8 <NX7_PID_Ctrl_No_Hysteresis+0x290>)
 800afae:	601a      	str	r2, [r3, #0]
 800afb0:	e014      	b.n	800afdc <NX7_PID_Ctrl_No_Hysteresis+0xc4>
	}
	else if(fabsf(TS-TA) >= 15)
 800afb2:	4b76      	ldr	r3, [pc, #472]	; (800b18c <NX7_PID_Ctrl_No_Hysteresis+0x274>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	4a76      	ldr	r2, [pc, #472]	; (800b190 <NX7_PID_Ctrl_No_Hysteresis+0x278>)
 800afb8:	68d2      	ldr	r2, [r2, #12]
 800afba:	4611      	mov	r1, r2
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7f5 fe17 	bl	8000bf0 <__aeabi_fsub>
 800afc2:	4603      	mov	r3, r0
 800afc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800afc8:	4976      	ldr	r1, [pc, #472]	; (800b1a4 <NX7_PID_Ctrl_No_Hysteresis+0x28c>)
 800afca:	4618      	mov	r0, r3
 800afcc:	f7f6 f8cc 	bl	8001168 <__aeabi_fcmpge>
 800afd0:	4603      	mov	r3, r0
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d002      	beq.n	800afdc <NX7_PID_Ctrl_No_Hysteresis+0xc4>
	{
		Ksat = 50;
 800afd6:	4b71      	ldr	r3, [pc, #452]	; (800b19c <NX7_PID_Ctrl_No_Hysteresis+0x284>)
 800afd8:	4a74      	ldr	r2, [pc, #464]	; (800b1ac <NX7_PID_Ctrl_No_Hysteresis+0x294>)
 800afda:	601a      	str	r2, [r3, #0]
	}

	Airmix_Int_Error += PID_Error;
 800afdc:	4b74      	ldr	r3, [pc, #464]	; (800b1b0 <NX7_PID_Ctrl_No_Hysteresis+0x298>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	4a6c      	ldr	r2, [pc, #432]	; (800b194 <NX7_PID_Ctrl_No_Hysteresis+0x27c>)
 800afe2:	6812      	ldr	r2, [r2, #0]
 800afe4:	4611      	mov	r1, r2
 800afe6:	4618      	mov	r0, r3
 800afe8:	f7f5 fe04 	bl	8000bf4 <__addsf3>
 800afec:	4603      	mov	r3, r0
 800afee:	461a      	mov	r2, r3
 800aff0:	4b6f      	ldr	r3, [pc, #444]	; (800b1b0 <NX7_PID_Ctrl_No_Hysteresis+0x298>)
 800aff2:	601a      	str	r2, [r3, #0]
	if(fabsf(Airmix_Int_Error) > Ksat)
 800aff4:	4b6e      	ldr	r3, [pc, #440]	; (800b1b0 <NX7_PID_Ctrl_No_Hysteresis+0x298>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800affc:	4a67      	ldr	r2, [pc, #412]	; (800b19c <NX7_PID_Ctrl_No_Hysteresis+0x284>)
 800affe:	6812      	ldr	r2, [r2, #0]
 800b000:	4611      	mov	r1, r2
 800b002:	4618      	mov	r0, r3
 800b004:	f7f6 f8ba 	bl	800117c <__aeabi_fcmpgt>
 800b008:	4603      	mov	r3, r0
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d015      	beq.n	800b03a <NX7_PID_Ctrl_No_Hysteresis+0x122>
	{
		Airmix_Int_Error = Ksat * (Airmix_Int_Error/fabsf(Airmix_Int_Error));
 800b00e:	4b68      	ldr	r3, [pc, #416]	; (800b1b0 <NX7_PID_Ctrl_No_Hysteresis+0x298>)
 800b010:	681a      	ldr	r2, [r3, #0]
 800b012:	4b67      	ldr	r3, [pc, #412]	; (800b1b0 <NX7_PID_Ctrl_No_Hysteresis+0x298>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b01a:	4619      	mov	r1, r3
 800b01c:	4610      	mov	r0, r2
 800b01e:	f7f5 ffa5 	bl	8000f6c <__aeabi_fdiv>
 800b022:	4603      	mov	r3, r0
 800b024:	461a      	mov	r2, r3
 800b026:	4b5d      	ldr	r3, [pc, #372]	; (800b19c <NX7_PID_Ctrl_No_Hysteresis+0x284>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	4619      	mov	r1, r3
 800b02c:	4610      	mov	r0, r2
 800b02e:	f7f5 fee9 	bl	8000e04 <__aeabi_fmul>
 800b032:	4603      	mov	r3, r0
 800b034:	461a      	mov	r2, r3
 800b036:	4b5e      	ldr	r3, [pc, #376]	; (800b1b0 <NX7_PID_Ctrl_No_Hysteresis+0x298>)
 800b038:	601a      	str	r2, [r3, #0]
	}
	//if(Airmix_Int_Error > +50)			{Airmix_Int_Error = +50;}
	//else if(Airmix_Int_Error < -50)		{Airmix_Int_Error = -50;}

/* --------------------------------------------------------------- <Blower_X> */
	if(fabsf(TA-TS) < fabsf(TA-25))		{Blower_X = fabsf(TA-TS);}
 800b03a:	4b55      	ldr	r3, [pc, #340]	; (800b190 <NX7_PID_Ctrl_No_Hysteresis+0x278>)
 800b03c:	68db      	ldr	r3, [r3, #12]
 800b03e:	4a53      	ldr	r2, [pc, #332]	; (800b18c <NX7_PID_Ctrl_No_Hysteresis+0x274>)
 800b040:	6812      	ldr	r2, [r2, #0]
 800b042:	4611      	mov	r1, r2
 800b044:	4618      	mov	r0, r3
 800b046:	f7f5 fdd3 	bl	8000bf0 <__aeabi_fsub>
 800b04a:	4603      	mov	r3, r0
 800b04c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800b050:	4b4f      	ldr	r3, [pc, #316]	; (800b190 <NX7_PID_Ctrl_No_Hysteresis+0x278>)
 800b052:	68db      	ldr	r3, [r3, #12]
 800b054:	4957      	ldr	r1, [pc, #348]	; (800b1b4 <NX7_PID_Ctrl_No_Hysteresis+0x29c>)
 800b056:	4618      	mov	r0, r3
 800b058:	f7f5 fdca 	bl	8000bf0 <__aeabi_fsub>
 800b05c:	4603      	mov	r3, r0
 800b05e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b062:	4619      	mov	r1, r3
 800b064:	4620      	mov	r0, r4
 800b066:	f7f6 f86b 	bl	8001140 <__aeabi_fcmplt>
 800b06a:	4603      	mov	r3, r0
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d00d      	beq.n	800b08c <NX7_PID_Ctrl_No_Hysteresis+0x174>
 800b070:	4b47      	ldr	r3, [pc, #284]	; (800b190 <NX7_PID_Ctrl_No_Hysteresis+0x278>)
 800b072:	68db      	ldr	r3, [r3, #12]
 800b074:	4a45      	ldr	r2, [pc, #276]	; (800b18c <NX7_PID_Ctrl_No_Hysteresis+0x274>)
 800b076:	6812      	ldr	r2, [r2, #0]
 800b078:	4611      	mov	r1, r2
 800b07a:	4618      	mov	r0, r3
 800b07c:	f7f5 fdb8 	bl	8000bf0 <__aeabi_fsub>
 800b080:	4603      	mov	r3, r0
 800b082:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b086:	4a4c      	ldr	r2, [pc, #304]	; (800b1b8 <NX7_PID_Ctrl_No_Hysteresis+0x2a0>)
 800b088:	6013      	str	r3, [r2, #0]
 800b08a:	e00a      	b.n	800b0a2 <NX7_PID_Ctrl_No_Hysteresis+0x18a>
	else								{Blower_X = fabsf(TA-25);}
 800b08c:	4b40      	ldr	r3, [pc, #256]	; (800b190 <NX7_PID_Ctrl_No_Hysteresis+0x278>)
 800b08e:	68db      	ldr	r3, [r3, #12]
 800b090:	4948      	ldr	r1, [pc, #288]	; (800b1b4 <NX7_PID_Ctrl_No_Hysteresis+0x29c>)
 800b092:	4618      	mov	r0, r3
 800b094:	f7f5 fdac 	bl	8000bf0 <__aeabi_fsub>
 800b098:	4603      	mov	r3, r0
 800b09a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b09e:	4a46      	ldr	r2, [pc, #280]	; (800b1b8 <NX7_PID_Ctrl_No_Hysteresis+0x2a0>)
 800b0a0:	6013      	str	r3, [r2, #0]

/* ------------------------------------------------------------- <Flag_State> */
	if(TS-TA >= 0)			{flag = +1;}
 800b0a2:	4b3a      	ldr	r3, [pc, #232]	; (800b18c <NX7_PID_Ctrl_No_Hysteresis+0x274>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	4a3a      	ldr	r2, [pc, #232]	; (800b190 <NX7_PID_Ctrl_No_Hysteresis+0x278>)
 800b0a8:	68d2      	ldr	r2, [r2, #12]
 800b0aa:	4611      	mov	r1, r2
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f7f5 fd9f 	bl	8000bf0 <__aeabi_fsub>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	f04f 0100 	mov.w	r1, #0
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f7f6 f855 	bl	8001168 <__aeabi_fcmpge>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d003      	beq.n	800b0cc <NX7_PID_Ctrl_No_Hysteresis+0x1b4>
 800b0c4:	4b3d      	ldr	r3, [pc, #244]	; (800b1bc <NX7_PID_Ctrl_No_Hysteresis+0x2a4>)
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	601a      	str	r2, [r3, #0]
 800b0ca:	e014      	b.n	800b0f6 <NX7_PID_Ctrl_No_Hysteresis+0x1de>
	else if(TS-TA < 0)		{flag = -1;}
 800b0cc:	4b2f      	ldr	r3, [pc, #188]	; (800b18c <NX7_PID_Ctrl_No_Hysteresis+0x274>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4a2f      	ldr	r2, [pc, #188]	; (800b190 <NX7_PID_Ctrl_No_Hysteresis+0x278>)
 800b0d2:	68d2      	ldr	r2, [r2, #12]
 800b0d4:	4611      	mov	r1, r2
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f7f5 fd8a 	bl	8000bf0 <__aeabi_fsub>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	f04f 0100 	mov.w	r1, #0
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f7f6 f82c 	bl	8001140 <__aeabi_fcmplt>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d003      	beq.n	800b0f6 <NX7_PID_Ctrl_No_Hysteresis+0x1de>
 800b0ee:	4b33      	ldr	r3, [pc, #204]	; (800b1bc <NX7_PID_Ctrl_No_Hysteresis+0x2a4>)
 800b0f0:	f04f 32ff 	mov.w	r2, #4294967295
 800b0f4:	601a      	str	r2, [r3, #0]

/* ------------------------------------------------------ <Intake_State_Ctrl> */
	/* <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><> */
	if(TS-TA >= 0)
 800b0f6:	4b25      	ldr	r3, [pc, #148]	; (800b18c <NX7_PID_Ctrl_No_Hysteresis+0x274>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	4a25      	ldr	r2, [pc, #148]	; (800b190 <NX7_PID_Ctrl_No_Hysteresis+0x278>)
 800b0fc:	68d2      	ldr	r2, [r2, #12]
 800b0fe:	4611      	mov	r1, r2
 800b100:	4618      	mov	r0, r3
 800b102:	f7f5 fd75 	bl	8000bf0 <__aeabi_fsub>
 800b106:	4603      	mov	r3, r0
 800b108:	f04f 0100 	mov.w	r1, #0
 800b10c:	4618      	mov	r0, r3
 800b10e:	f7f6 f82b 	bl	8001168 <__aeabi_fcmpge>
 800b112:	4603      	mov	r3, r0
 800b114:	2b00      	cmp	r3, #0
 800b116:	d06b      	beq.n	800b1f0 <NX7_PID_Ctrl_No_Hysteresis+0x2d8>
	{
		if(TS-TC < +1)
 800b118:	4b1c      	ldr	r3, [pc, #112]	; (800b18c <NX7_PID_Ctrl_No_Hysteresis+0x274>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	4a1c      	ldr	r2, [pc, #112]	; (800b190 <NX7_PID_Ctrl_No_Hysteresis+0x278>)
 800b11e:	6852      	ldr	r2, [r2, #4]
 800b120:	4611      	mov	r1, r2
 800b122:	4618      	mov	r0, r3
 800b124:	f7f5 fd64 	bl	8000bf0 <__aeabi_fsub>
 800b128:	4603      	mov	r3, r0
 800b12a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b12e:	4618      	mov	r0, r3
 800b130:	f7f6 f806 	bl	8001140 <__aeabi_fcmplt>
 800b134:	4603      	mov	r3, r0
 800b136:	2b00      	cmp	r3, #0
 800b138:	d003      	beq.n	800b142 <NX7_PID_Ctrl_No_Hysteresis+0x22a>
		{
			PID_Intake_State = Intake_Fresh;
 800b13a:	4b21      	ldr	r3, [pc, #132]	; (800b1c0 <NX7_PID_Ctrl_No_Hysteresis+0x2a8>)
 800b13c:	2200      	movs	r2, #0
 800b13e:	701a      	strb	r2, [r3, #0]
 800b140:	e090      	b.n	800b264 <NX7_PID_Ctrl_No_Hysteresis+0x34c>
		}
		else if((TS-TC >= +1) && (TS-TC < +22.5))
 800b142:	4b12      	ldr	r3, [pc, #72]	; (800b18c <NX7_PID_Ctrl_No_Hysteresis+0x274>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	4a12      	ldr	r2, [pc, #72]	; (800b190 <NX7_PID_Ctrl_No_Hysteresis+0x278>)
 800b148:	6852      	ldr	r2, [r2, #4]
 800b14a:	4611      	mov	r1, r2
 800b14c:	4618      	mov	r0, r3
 800b14e:	f7f5 fd4f 	bl	8000bf0 <__aeabi_fsub>
 800b152:	4603      	mov	r3, r0
 800b154:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b158:	4618      	mov	r0, r3
 800b15a:	f7f6 f805 	bl	8001168 <__aeabi_fcmpge>
 800b15e:	4603      	mov	r3, r0
 800b160:	2b00      	cmp	r3, #0
 800b162:	d031      	beq.n	800b1c8 <NX7_PID_Ctrl_No_Hysteresis+0x2b0>
 800b164:	4b09      	ldr	r3, [pc, #36]	; (800b18c <NX7_PID_Ctrl_No_Hysteresis+0x274>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	4a09      	ldr	r2, [pc, #36]	; (800b190 <NX7_PID_Ctrl_No_Hysteresis+0x278>)
 800b16a:	6852      	ldr	r2, [r2, #4]
 800b16c:	4611      	mov	r1, r2
 800b16e:	4618      	mov	r0, r3
 800b170:	f7f5 fd3e 	bl	8000bf0 <__aeabi_fsub>
 800b174:	4603      	mov	r3, r0
 800b176:	4913      	ldr	r1, [pc, #76]	; (800b1c4 <NX7_PID_Ctrl_No_Hysteresis+0x2ac>)
 800b178:	4618      	mov	r0, r3
 800b17a:	f7f5 ffe1 	bl	8001140 <__aeabi_fcmplt>
 800b17e:	4603      	mov	r3, r0
 800b180:	2b00      	cmp	r3, #0
 800b182:	d021      	beq.n	800b1c8 <NX7_PID_Ctrl_No_Hysteresis+0x2b0>
		{
			PID_Intake_State = Intake_Recycle;
 800b184:	4b0e      	ldr	r3, [pc, #56]	; (800b1c0 <NX7_PID_Ctrl_No_Hysteresis+0x2a8>)
 800b186:	2201      	movs	r2, #1
 800b188:	701a      	strb	r2, [r3, #0]
 800b18a:	e06b      	b.n	800b264 <NX7_PID_Ctrl_No_Hysteresis+0x34c>
 800b18c:	20000010 	.word	0x20000010
 800b190:	200005a8 	.word	0x200005a8
 800b194:	20000224 	.word	0x20000224
 800b198:	41200000 	.word	0x41200000
 800b19c:	20000234 	.word	0x20000234
 800b1a0:	42200000 	.word	0x42200000
 800b1a4:	41700000 	.word	0x41700000
 800b1a8:	42340000 	.word	0x42340000
 800b1ac:	42480000 	.word	0x42480000
 800b1b0:	20000228 	.word	0x20000228
 800b1b4:	41c80000 	.word	0x41c80000
 800b1b8:	20000240 	.word	0x20000240
 800b1bc:	20000220 	.word	0x20000220
 800b1c0:	200005a3 	.word	0x200005a3
 800b1c4:	41b40000 	.word	0x41b40000
		}
		else if(TS-TC >= +22.5)
 800b1c8:	4b90      	ldr	r3, [pc, #576]	; (800b40c <NX7_PID_Ctrl_No_Hysteresis+0x4f4>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	4a90      	ldr	r2, [pc, #576]	; (800b410 <NX7_PID_Ctrl_No_Hysteresis+0x4f8>)
 800b1ce:	6852      	ldr	r2, [r2, #4]
 800b1d0:	4611      	mov	r1, r2
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f7f5 fd0c 	bl	8000bf0 <__aeabi_fsub>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	498e      	ldr	r1, [pc, #568]	; (800b414 <NX7_PID_Ctrl_No_Hysteresis+0x4fc>)
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f7f5 ffc3 	bl	8001168 <__aeabi_fcmpge>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d03d      	beq.n	800b264 <NX7_PID_Ctrl_No_Hysteresis+0x34c>
		{
			PID_Intake_State = Intake_Fresh;
 800b1e8:	4b8b      	ldr	r3, [pc, #556]	; (800b418 <NX7_PID_Ctrl_No_Hysteresis+0x500>)
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	701a      	strb	r2, [r3, #0]
 800b1ee:	e039      	b.n	800b264 <NX7_PID_Ctrl_No_Hysteresis+0x34c>
		}
	}
	/* <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><> */
	else if(TS-TA < 0)
 800b1f0:	4b86      	ldr	r3, [pc, #536]	; (800b40c <NX7_PID_Ctrl_No_Hysteresis+0x4f4>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	4a86      	ldr	r2, [pc, #536]	; (800b410 <NX7_PID_Ctrl_No_Hysteresis+0x4f8>)
 800b1f6:	68d2      	ldr	r2, [r2, #12]
 800b1f8:	4611      	mov	r1, r2
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f7f5 fcf8 	bl	8000bf0 <__aeabi_fsub>
 800b200:	4603      	mov	r3, r0
 800b202:	f04f 0100 	mov.w	r1, #0
 800b206:	4618      	mov	r0, r3
 800b208:	f7f5 ff9a 	bl	8001140 <__aeabi_fcmplt>
 800b20c:	4603      	mov	r3, r0
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d028      	beq.n	800b264 <NX7_PID_Ctrl_No_Hysteresis+0x34c>
	{
		if(TS-TC < +1)
 800b212:	4b7e      	ldr	r3, [pc, #504]	; (800b40c <NX7_PID_Ctrl_No_Hysteresis+0x4f4>)
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	4a7e      	ldr	r2, [pc, #504]	; (800b410 <NX7_PID_Ctrl_No_Hysteresis+0x4f8>)
 800b218:	6852      	ldr	r2, [r2, #4]
 800b21a:	4611      	mov	r1, r2
 800b21c:	4618      	mov	r0, r3
 800b21e:	f7f5 fce7 	bl	8000bf0 <__aeabi_fsub>
 800b222:	4603      	mov	r3, r0
 800b224:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b228:	4618      	mov	r0, r3
 800b22a:	f7f5 ff89 	bl	8001140 <__aeabi_fcmplt>
 800b22e:	4603      	mov	r3, r0
 800b230:	2b00      	cmp	r3, #0
 800b232:	d003      	beq.n	800b23c <NX7_PID_Ctrl_No_Hysteresis+0x324>
		{
			PID_Intake_State = Intake_Recycle;
 800b234:	4b78      	ldr	r3, [pc, #480]	; (800b418 <NX7_PID_Ctrl_No_Hysteresis+0x500>)
 800b236:	2201      	movs	r2, #1
 800b238:	701a      	strb	r2, [r3, #0]
 800b23a:	e013      	b.n	800b264 <NX7_PID_Ctrl_No_Hysteresis+0x34c>
		}
		else if(TS-TC >= +1)
 800b23c:	4b73      	ldr	r3, [pc, #460]	; (800b40c <NX7_PID_Ctrl_No_Hysteresis+0x4f4>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	4a73      	ldr	r2, [pc, #460]	; (800b410 <NX7_PID_Ctrl_No_Hysteresis+0x4f8>)
 800b242:	6852      	ldr	r2, [r2, #4]
 800b244:	4611      	mov	r1, r2
 800b246:	4618      	mov	r0, r3
 800b248:	f7f5 fcd2 	bl	8000bf0 <__aeabi_fsub>
 800b24c:	4603      	mov	r3, r0
 800b24e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b252:	4618      	mov	r0, r3
 800b254:	f7f5 ff88 	bl	8001168 <__aeabi_fcmpge>
 800b258:	4603      	mov	r3, r0
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d002      	beq.n	800b264 <NX7_PID_Ctrl_No_Hysteresis+0x34c>
		{
			PID_Intake_State = Intake_Fresh;
 800b25e:	4b6e      	ldr	r3, [pc, #440]	; (800b418 <NX7_PID_Ctrl_No_Hysteresis+0x500>)
 800b260:	2200      	movs	r2, #0
 800b262:	701a      	strb	r2, [r3, #0]
		}
	}
	/* <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><> */
	if(Intake_Auto_Ctrl_State == Auto_Ctrl_ON)
 800b264:	4b6d      	ldr	r3, [pc, #436]	; (800b41c <NX7_PID_Ctrl_No_Hysteresis+0x504>)
 800b266:	781b      	ldrb	r3, [r3, #0]
 800b268:	2b01      	cmp	r3, #1
 800b26a:	d103      	bne.n	800b274 <NX7_PID_Ctrl_No_Hysteresis+0x35c>
	{
		NX7_Intake_State = PID_Intake_State;
 800b26c:	4b6a      	ldr	r3, [pc, #424]	; (800b418 <NX7_PID_Ctrl_No_Hysteresis+0x500>)
 800b26e:	781a      	ldrb	r2, [r3, #0]
 800b270:	4b6b      	ldr	r3, [pc, #428]	; (800b420 <NX7_PID_Ctrl_No_Hysteresis+0x508>)
 800b272:	701a      	strb	r2, [r3, #0]
	}

/* -------------------------------------------------------- <Mode_State_Ctrl> */
	/* <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><> */
	if(TS-TA >= 0)
 800b274:	4b65      	ldr	r3, [pc, #404]	; (800b40c <NX7_PID_Ctrl_No_Hysteresis+0x4f4>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	4a65      	ldr	r2, [pc, #404]	; (800b410 <NX7_PID_Ctrl_No_Hysteresis+0x4f8>)
 800b27a:	68d2      	ldr	r2, [r2, #12]
 800b27c:	4611      	mov	r1, r2
 800b27e:	4618      	mov	r0, r3
 800b280:	f7f5 fcb6 	bl	8000bf0 <__aeabi_fsub>
 800b284:	4603      	mov	r3, r0
 800b286:	f04f 0100 	mov.w	r1, #0
 800b28a:	4618      	mov	r0, r3
 800b28c:	f7f5 ff6c 	bl	8001168 <__aeabi_fcmpge>
 800b290:	4603      	mov	r3, r0
 800b292:	2b00      	cmp	r3, #0
 800b294:	f000 8094 	beq.w	800b3c0 <NX7_PID_Ctrl_No_Hysteresis+0x4a8>
	{
		if(TS-TC < -4.5)
 800b298:	4b5c      	ldr	r3, [pc, #368]	; (800b40c <NX7_PID_Ctrl_No_Hysteresis+0x4f4>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	4a5c      	ldr	r2, [pc, #368]	; (800b410 <NX7_PID_Ctrl_No_Hysteresis+0x4f8>)
 800b29e:	6852      	ldr	r2, [r2, #4]
 800b2a0:	4611      	mov	r1, r2
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	f7f5 fca4 	bl	8000bf0 <__aeabi_fsub>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	495e      	ldr	r1, [pc, #376]	; (800b424 <NX7_PID_Ctrl_No_Hysteresis+0x50c>)
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	f7f5 ff47 	bl	8001140 <__aeabi_fcmplt>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d003      	beq.n	800b2c0 <NX7_PID_Ctrl_No_Hysteresis+0x3a8>
		{
			PID_Mode_State = Mode_Foot_Def;
 800b2b8:	4b5b      	ldr	r3, [pc, #364]	; (800b428 <NX7_PID_Ctrl_No_Hysteresis+0x510>)
 800b2ba:	2203      	movs	r2, #3
 800b2bc:	701a      	strb	r2, [r3, #0]
 800b2be:	e0f0      	b.n	800b4a2 <NX7_PID_Ctrl_No_Hysteresis+0x58a>
		}
		else if((TS-TC >= -4.5) && (TS-TC < -1.5))
 800b2c0:	4b52      	ldr	r3, [pc, #328]	; (800b40c <NX7_PID_Ctrl_No_Hysteresis+0x4f4>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	4a52      	ldr	r2, [pc, #328]	; (800b410 <NX7_PID_Ctrl_No_Hysteresis+0x4f8>)
 800b2c6:	6852      	ldr	r2, [r2, #4]
 800b2c8:	4611      	mov	r1, r2
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f7f5 fc90 	bl	8000bf0 <__aeabi_fsub>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	4954      	ldr	r1, [pc, #336]	; (800b424 <NX7_PID_Ctrl_No_Hysteresis+0x50c>)
 800b2d4:	4618      	mov	r0, r3
 800b2d6:	f7f5 ff47 	bl	8001168 <__aeabi_fcmpge>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d013      	beq.n	800b308 <NX7_PID_Ctrl_No_Hysteresis+0x3f0>
 800b2e0:	4b4a      	ldr	r3, [pc, #296]	; (800b40c <NX7_PID_Ctrl_No_Hysteresis+0x4f4>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	4a4a      	ldr	r2, [pc, #296]	; (800b410 <NX7_PID_Ctrl_No_Hysteresis+0x4f8>)
 800b2e6:	6852      	ldr	r2, [r2, #4]
 800b2e8:	4611      	mov	r1, r2
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f7f5 fc80 	bl	8000bf0 <__aeabi_fsub>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	494e      	ldr	r1, [pc, #312]	; (800b42c <NX7_PID_Ctrl_No_Hysteresis+0x514>)
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f7f5 ff23 	bl	8001140 <__aeabi_fcmplt>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d003      	beq.n	800b308 <NX7_PID_Ctrl_No_Hysteresis+0x3f0>
		{
			PID_Mode_State = Mode_Face_Foot;
 800b300:	4b49      	ldr	r3, [pc, #292]	; (800b428 <NX7_PID_Ctrl_No_Hysteresis+0x510>)
 800b302:	2201      	movs	r2, #1
 800b304:	701a      	strb	r2, [r3, #0]
 800b306:	e0cc      	b.n	800b4a2 <NX7_PID_Ctrl_No_Hysteresis+0x58a>
		}
		else if((TS-TC >= -1.5) && (TS-TC < +2.5))
 800b308:	4b40      	ldr	r3, [pc, #256]	; (800b40c <NX7_PID_Ctrl_No_Hysteresis+0x4f4>)
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	4a40      	ldr	r2, [pc, #256]	; (800b410 <NX7_PID_Ctrl_No_Hysteresis+0x4f8>)
 800b30e:	6852      	ldr	r2, [r2, #4]
 800b310:	4611      	mov	r1, r2
 800b312:	4618      	mov	r0, r3
 800b314:	f7f5 fc6c 	bl	8000bf0 <__aeabi_fsub>
 800b318:	4603      	mov	r3, r0
 800b31a:	4944      	ldr	r1, [pc, #272]	; (800b42c <NX7_PID_Ctrl_No_Hysteresis+0x514>)
 800b31c:	4618      	mov	r0, r3
 800b31e:	f7f5 ff23 	bl	8001168 <__aeabi_fcmpge>
 800b322:	4603      	mov	r3, r0
 800b324:	2b00      	cmp	r3, #0
 800b326:	d013      	beq.n	800b350 <NX7_PID_Ctrl_No_Hysteresis+0x438>
 800b328:	4b38      	ldr	r3, [pc, #224]	; (800b40c <NX7_PID_Ctrl_No_Hysteresis+0x4f4>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	4a38      	ldr	r2, [pc, #224]	; (800b410 <NX7_PID_Ctrl_No_Hysteresis+0x4f8>)
 800b32e:	6852      	ldr	r2, [r2, #4]
 800b330:	4611      	mov	r1, r2
 800b332:	4618      	mov	r0, r3
 800b334:	f7f5 fc5c 	bl	8000bf0 <__aeabi_fsub>
 800b338:	4603      	mov	r3, r0
 800b33a:	493d      	ldr	r1, [pc, #244]	; (800b430 <NX7_PID_Ctrl_No_Hysteresis+0x518>)
 800b33c:	4618      	mov	r0, r3
 800b33e:	f7f5 feff 	bl	8001140 <__aeabi_fcmplt>
 800b342:	4603      	mov	r3, r0
 800b344:	2b00      	cmp	r3, #0
 800b346:	d003      	beq.n	800b350 <NX7_PID_Ctrl_No_Hysteresis+0x438>
		{
			PID_Mode_State = Mode_Foot;
 800b348:	4b37      	ldr	r3, [pc, #220]	; (800b428 <NX7_PID_Ctrl_No_Hysteresis+0x510>)
 800b34a:	2202      	movs	r2, #2
 800b34c:	701a      	strb	r2, [r3, #0]
 800b34e:	e0a8      	b.n	800b4a2 <NX7_PID_Ctrl_No_Hysteresis+0x58a>
		}
		else if((TS-TC >= +2.5) && (TS-TC < +22.5))
 800b350:	4b2e      	ldr	r3, [pc, #184]	; (800b40c <NX7_PID_Ctrl_No_Hysteresis+0x4f4>)
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	4a2e      	ldr	r2, [pc, #184]	; (800b410 <NX7_PID_Ctrl_No_Hysteresis+0x4f8>)
 800b356:	6852      	ldr	r2, [r2, #4]
 800b358:	4611      	mov	r1, r2
 800b35a:	4618      	mov	r0, r3
 800b35c:	f7f5 fc48 	bl	8000bf0 <__aeabi_fsub>
 800b360:	4603      	mov	r3, r0
 800b362:	4933      	ldr	r1, [pc, #204]	; (800b430 <NX7_PID_Ctrl_No_Hysteresis+0x518>)
 800b364:	4618      	mov	r0, r3
 800b366:	f7f5 feff 	bl	8001168 <__aeabi_fcmpge>
 800b36a:	4603      	mov	r3, r0
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d013      	beq.n	800b398 <NX7_PID_Ctrl_No_Hysteresis+0x480>
 800b370:	4b26      	ldr	r3, [pc, #152]	; (800b40c <NX7_PID_Ctrl_No_Hysteresis+0x4f4>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	4a26      	ldr	r2, [pc, #152]	; (800b410 <NX7_PID_Ctrl_No_Hysteresis+0x4f8>)
 800b376:	6852      	ldr	r2, [r2, #4]
 800b378:	4611      	mov	r1, r2
 800b37a:	4618      	mov	r0, r3
 800b37c:	f7f5 fc38 	bl	8000bf0 <__aeabi_fsub>
 800b380:	4603      	mov	r3, r0
 800b382:	4924      	ldr	r1, [pc, #144]	; (800b414 <NX7_PID_Ctrl_No_Hysteresis+0x4fc>)
 800b384:	4618      	mov	r0, r3
 800b386:	f7f5 fedb 	bl	8001140 <__aeabi_fcmplt>
 800b38a:	4603      	mov	r3, r0
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d003      	beq.n	800b398 <NX7_PID_Ctrl_No_Hysteresis+0x480>
		{
			PID_Mode_State = Mode_Face_Foot;
 800b390:	4b25      	ldr	r3, [pc, #148]	; (800b428 <NX7_PID_Ctrl_No_Hysteresis+0x510>)
 800b392:	2201      	movs	r2, #1
 800b394:	701a      	strb	r2, [r3, #0]
 800b396:	e084      	b.n	800b4a2 <NX7_PID_Ctrl_No_Hysteresis+0x58a>
		}
		else if(TS-TC >= +22.5)
 800b398:	4b1c      	ldr	r3, [pc, #112]	; (800b40c <NX7_PID_Ctrl_No_Hysteresis+0x4f4>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	4a1c      	ldr	r2, [pc, #112]	; (800b410 <NX7_PID_Ctrl_No_Hysteresis+0x4f8>)
 800b39e:	6852      	ldr	r2, [r2, #4]
 800b3a0:	4611      	mov	r1, r2
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f7f5 fc24 	bl	8000bf0 <__aeabi_fsub>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	491a      	ldr	r1, [pc, #104]	; (800b414 <NX7_PID_Ctrl_No_Hysteresis+0x4fc>)
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	f7f5 fedb 	bl	8001168 <__aeabi_fcmpge>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d074      	beq.n	800b4a2 <NX7_PID_Ctrl_No_Hysteresis+0x58a>
		{
			PID_Mode_State = Mode_Foot;
 800b3b8:	4b1b      	ldr	r3, [pc, #108]	; (800b428 <NX7_PID_Ctrl_No_Hysteresis+0x510>)
 800b3ba:	2202      	movs	r2, #2
 800b3bc:	701a      	strb	r2, [r3, #0]
 800b3be:	e070      	b.n	800b4a2 <NX7_PID_Ctrl_No_Hysteresis+0x58a>
		}
	}
	/* <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><> */
	else if(TS-TA < 0)
 800b3c0:	4b12      	ldr	r3, [pc, #72]	; (800b40c <NX7_PID_Ctrl_No_Hysteresis+0x4f4>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	4a12      	ldr	r2, [pc, #72]	; (800b410 <NX7_PID_Ctrl_No_Hysteresis+0x4f8>)
 800b3c6:	68d2      	ldr	r2, [r2, #12]
 800b3c8:	4611      	mov	r1, r2
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f7f5 fc10 	bl	8000bf0 <__aeabi_fsub>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	f04f 0100 	mov.w	r1, #0
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f7f5 feb2 	bl	8001140 <__aeabi_fcmplt>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d05f      	beq.n	800b4a2 <NX7_PID_Ctrl_No_Hysteresis+0x58a>
	{
		if(TS-TC < -1.5)
 800b3e2:	4b0a      	ldr	r3, [pc, #40]	; (800b40c <NX7_PID_Ctrl_No_Hysteresis+0x4f4>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	4a0a      	ldr	r2, [pc, #40]	; (800b410 <NX7_PID_Ctrl_No_Hysteresis+0x4f8>)
 800b3e8:	6852      	ldr	r2, [r2, #4]
 800b3ea:	4611      	mov	r1, r2
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f7f5 fbff 	bl	8000bf0 <__aeabi_fsub>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	490d      	ldr	r1, [pc, #52]	; (800b42c <NX7_PID_Ctrl_No_Hysteresis+0x514>)
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7f5 fea2 	bl	8001140 <__aeabi_fcmplt>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d018      	beq.n	800b434 <NX7_PID_Ctrl_No_Hysteresis+0x51c>
		{
			PID_Mode_State = Mode_Face;
 800b402:	4b09      	ldr	r3, [pc, #36]	; (800b428 <NX7_PID_Ctrl_No_Hysteresis+0x510>)
 800b404:	2200      	movs	r2, #0
 800b406:	701a      	strb	r2, [r3, #0]
 800b408:	e04b      	b.n	800b4a2 <NX7_PID_Ctrl_No_Hysteresis+0x58a>
 800b40a:	bf00      	nop
 800b40c:	20000010 	.word	0x20000010
 800b410:	200005a8 	.word	0x200005a8
 800b414:	41b40000 	.word	0x41b40000
 800b418:	200005a3 	.word	0x200005a3
 800b41c:	2000000a 	.word	0x2000000a
 800b420:	2000020b 	.word	0x2000020b
 800b424:	c0900000 	.word	0xc0900000
 800b428:	200005a1 	.word	0x200005a1
 800b42c:	bfc00000 	.word	0xbfc00000
 800b430:	40200000 	.word	0x40200000
		}
		else if((TS-TC >= -1.5) && (TS-TC < +3.5))
 800b434:	4b68      	ldr	r3, [pc, #416]	; (800b5d8 <NX7_PID_Ctrl_No_Hysteresis+0x6c0>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	4a68      	ldr	r2, [pc, #416]	; (800b5dc <NX7_PID_Ctrl_No_Hysteresis+0x6c4>)
 800b43a:	6852      	ldr	r2, [r2, #4]
 800b43c:	4611      	mov	r1, r2
 800b43e:	4618      	mov	r0, r3
 800b440:	f7f5 fbd6 	bl	8000bf0 <__aeabi_fsub>
 800b444:	4603      	mov	r3, r0
 800b446:	4966      	ldr	r1, [pc, #408]	; (800b5e0 <NX7_PID_Ctrl_No_Hysteresis+0x6c8>)
 800b448:	4618      	mov	r0, r3
 800b44a:	f7f5 fe8d 	bl	8001168 <__aeabi_fcmpge>
 800b44e:	4603      	mov	r3, r0
 800b450:	2b00      	cmp	r3, #0
 800b452:	d013      	beq.n	800b47c <NX7_PID_Ctrl_No_Hysteresis+0x564>
 800b454:	4b60      	ldr	r3, [pc, #384]	; (800b5d8 <NX7_PID_Ctrl_No_Hysteresis+0x6c0>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	4a60      	ldr	r2, [pc, #384]	; (800b5dc <NX7_PID_Ctrl_No_Hysteresis+0x6c4>)
 800b45a:	6852      	ldr	r2, [r2, #4]
 800b45c:	4611      	mov	r1, r2
 800b45e:	4618      	mov	r0, r3
 800b460:	f7f5 fbc6 	bl	8000bf0 <__aeabi_fsub>
 800b464:	4603      	mov	r3, r0
 800b466:	495f      	ldr	r1, [pc, #380]	; (800b5e4 <NX7_PID_Ctrl_No_Hysteresis+0x6cc>)
 800b468:	4618      	mov	r0, r3
 800b46a:	f7f5 fe69 	bl	8001140 <__aeabi_fcmplt>
 800b46e:	4603      	mov	r3, r0
 800b470:	2b00      	cmp	r3, #0
 800b472:	d003      	beq.n	800b47c <NX7_PID_Ctrl_No_Hysteresis+0x564>
		{
			PID_Mode_State = Mode_Face_Foot;
 800b474:	4b5c      	ldr	r3, [pc, #368]	; (800b5e8 <NX7_PID_Ctrl_No_Hysteresis+0x6d0>)
 800b476:	2201      	movs	r2, #1
 800b478:	701a      	strb	r2, [r3, #0]
 800b47a:	e012      	b.n	800b4a2 <NX7_PID_Ctrl_No_Hysteresis+0x58a>
		}
		else if(TS-TC >= +3.5)
 800b47c:	4b56      	ldr	r3, [pc, #344]	; (800b5d8 <NX7_PID_Ctrl_No_Hysteresis+0x6c0>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	4a56      	ldr	r2, [pc, #344]	; (800b5dc <NX7_PID_Ctrl_No_Hysteresis+0x6c4>)
 800b482:	6852      	ldr	r2, [r2, #4]
 800b484:	4611      	mov	r1, r2
 800b486:	4618      	mov	r0, r3
 800b488:	f7f5 fbb2 	bl	8000bf0 <__aeabi_fsub>
 800b48c:	4603      	mov	r3, r0
 800b48e:	4955      	ldr	r1, [pc, #340]	; (800b5e4 <NX7_PID_Ctrl_No_Hysteresis+0x6cc>)
 800b490:	4618      	mov	r0, r3
 800b492:	f7f5 fe69 	bl	8001168 <__aeabi_fcmpge>
 800b496:	4603      	mov	r3, r0
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d002      	beq.n	800b4a2 <NX7_PID_Ctrl_No_Hysteresis+0x58a>
		{
			PID_Mode_State = Mode_Foot_Def;
 800b49c:	4b52      	ldr	r3, [pc, #328]	; (800b5e8 <NX7_PID_Ctrl_No_Hysteresis+0x6d0>)
 800b49e:	2203      	movs	r2, #3
 800b4a0:	701a      	strb	r2, [r3, #0]
		}
	}
	/* <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><> */
	if(Mode_Auto_Ctrl_State == Auto_Ctrl_ON)
 800b4a2:	4b52      	ldr	r3, [pc, #328]	; (800b5ec <NX7_PID_Ctrl_No_Hysteresis+0x6d4>)
 800b4a4:	781b      	ldrb	r3, [r3, #0]
 800b4a6:	2b01      	cmp	r3, #1
 800b4a8:	d103      	bne.n	800b4b2 <NX7_PID_Ctrl_No_Hysteresis+0x59a>
	{
		NX7_Mode_State = PID_Mode_State;
 800b4aa:	4b4f      	ldr	r3, [pc, #316]	; (800b5e8 <NX7_PID_Ctrl_No_Hysteresis+0x6d0>)
 800b4ac:	781a      	ldrb	r2, [r3, #0]
 800b4ae:	4b50      	ldr	r3, [pc, #320]	; (800b5f0 <NX7_PID_Ctrl_No_Hysteresis+0x6d8>)
 800b4b0:	701a      	strb	r2, [r3, #0]
	}

/* ------------------------------------------------------ <Airmix_State_Ctrl> */
	/* <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><> */
	if(TS-TA >= 0)
 800b4b2:	4b49      	ldr	r3, [pc, #292]	; (800b5d8 <NX7_PID_Ctrl_No_Hysteresis+0x6c0>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	4a49      	ldr	r2, [pc, #292]	; (800b5dc <NX7_PID_Ctrl_No_Hysteresis+0x6c4>)
 800b4b8:	68d2      	ldr	r2, [r2, #12]
 800b4ba:	4611      	mov	r1, r2
 800b4bc:	4618      	mov	r0, r3
 800b4be:	f7f5 fb97 	bl	8000bf0 <__aeabi_fsub>
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	f04f 0100 	mov.w	r1, #0
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f7f5 fe4d 	bl	8001168 <__aeabi_fcmpge>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	f000 80a1 	beq.w	800b618 <NX7_PID_Ctrl_No_Hysteresis+0x700>
	{
		Airmix_KP = 1.0/30 * fabsf(PID_Error);
 800b4d6:	4b47      	ldr	r3, [pc, #284]	; (800b5f4 <NX7_PID_Ctrl_No_Hysteresis+0x6dc>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b4de:	4618      	mov	r0, r3
 800b4e0:	f7f5 f802 	bl	80004e8 <__aeabi_f2d>
 800b4e4:	a336      	add	r3, pc, #216	; (adr r3, 800b5c0 <NX7_PID_Ctrl_No_Hysteresis+0x6a8>)
 800b4e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ea:	f7f5 f855 	bl	8000598 <__aeabi_dmul>
 800b4ee:	4602      	mov	r2, r0
 800b4f0:	460b      	mov	r3, r1
 800b4f2:	4610      	mov	r0, r2
 800b4f4:	4619      	mov	r1, r3
 800b4f6:	f7f5 fb27 	bl	8000b48 <__aeabi_d2f>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	4a3e      	ldr	r2, [pc, #248]	; (800b5f8 <NX7_PID_Ctrl_No_Hysteresis+0x6e0>)
 800b4fe:	6013      	str	r3, [r2, #0]
		Airmix_KI = 1.0/50;
 800b500:	4b3e      	ldr	r3, [pc, #248]	; (800b5fc <NX7_PID_Ctrl_No_Hysteresis+0x6e4>)
 800b502:	4a3f      	ldr	r2, [pc, #252]	; (800b600 <NX7_PID_Ctrl_No_Hysteresis+0x6e8>)
 800b504:	601a      	str	r2, [r3, #0]
		float airmix = 1 - 1.1 * (Airmix_KP*PID_Error+Airmix_KI*Airmix_Int_Error);
 800b506:	4b3c      	ldr	r3, [pc, #240]	; (800b5f8 <NX7_PID_Ctrl_No_Hysteresis+0x6e0>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	4a3a      	ldr	r2, [pc, #232]	; (800b5f4 <NX7_PID_Ctrl_No_Hysteresis+0x6dc>)
 800b50c:	6812      	ldr	r2, [r2, #0]
 800b50e:	4611      	mov	r1, r2
 800b510:	4618      	mov	r0, r3
 800b512:	f7f5 fc77 	bl	8000e04 <__aeabi_fmul>
 800b516:	4603      	mov	r3, r0
 800b518:	461c      	mov	r4, r3
 800b51a:	4b38      	ldr	r3, [pc, #224]	; (800b5fc <NX7_PID_Ctrl_No_Hysteresis+0x6e4>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	4a39      	ldr	r2, [pc, #228]	; (800b604 <NX7_PID_Ctrl_No_Hysteresis+0x6ec>)
 800b520:	6812      	ldr	r2, [r2, #0]
 800b522:	4611      	mov	r1, r2
 800b524:	4618      	mov	r0, r3
 800b526:	f7f5 fc6d 	bl	8000e04 <__aeabi_fmul>
 800b52a:	4603      	mov	r3, r0
 800b52c:	4619      	mov	r1, r3
 800b52e:	4620      	mov	r0, r4
 800b530:	f7f5 fb60 	bl	8000bf4 <__addsf3>
 800b534:	4603      	mov	r3, r0
 800b536:	4618      	mov	r0, r3
 800b538:	f7f4 ffd6 	bl	80004e8 <__aeabi_f2d>
 800b53c:	a322      	add	r3, pc, #136	; (adr r3, 800b5c8 <NX7_PID_Ctrl_No_Hysteresis+0x6b0>)
 800b53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b542:	f7f5 f829 	bl	8000598 <__aeabi_dmul>
 800b546:	4602      	mov	r2, r0
 800b548:	460b      	mov	r3, r1
 800b54a:	f04f 0000 	mov.w	r0, #0
 800b54e:	492e      	ldr	r1, [pc, #184]	; (800b608 <NX7_PID_Ctrl_No_Hysteresis+0x6f0>)
 800b550:	f7f4 fe6a 	bl	8000228 <__aeabi_dsub>
 800b554:	4602      	mov	r2, r0
 800b556:	460b      	mov	r3, r1
 800b558:	4610      	mov	r0, r2
 800b55a:	4619      	mov	r1, r3
 800b55c:	f7f5 faf4 	bl	8000b48 <__aeabi_d2f>
 800b560:	4603      	mov	r3, r0
 800b562:	60fb      	str	r3, [r7, #12]
		if(airmix < 0.0)	{airmix = 0.0;}
 800b564:	f04f 0100 	mov.w	r1, #0
 800b568:	68f8      	ldr	r0, [r7, #12]
 800b56a:	f7f5 fde9 	bl	8001140 <__aeabi_fcmplt>
 800b56e:	4603      	mov	r3, r0
 800b570:	2b00      	cmp	r3, #0
 800b572:	d002      	beq.n	800b57a <NX7_PID_Ctrl_No_Hysteresis+0x662>
 800b574:	f04f 0300 	mov.w	r3, #0
 800b578:	60fb      	str	r3, [r7, #12]
		if(airmix > 0.8)	{airmix = 0.8;}
 800b57a:	68f8      	ldr	r0, [r7, #12]
 800b57c:	f7f4 ffb4 	bl	80004e8 <__aeabi_f2d>
 800b580:	a313      	add	r3, pc, #76	; (adr r3, 800b5d0 <NX7_PID_Ctrl_No_Hysteresis+0x6b8>)
 800b582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b586:	f7f5 fa97 	bl	8000ab8 <__aeabi_dcmpgt>
 800b58a:	4603      	mov	r3, r0
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d001      	beq.n	800b594 <NX7_PID_Ctrl_No_Hysteresis+0x67c>
 800b590:	4b1e      	ldr	r3, [pc, #120]	; (800b60c <NX7_PID_Ctrl_No_Hysteresis+0x6f4>)
 800b592:	60fb      	str	r3, [r7, #12]
		PID_Airmix_State = 20 - roundf(20*airmix);		// Airmix: 5%
 800b594:	491e      	ldr	r1, [pc, #120]	; (800b610 <NX7_PID_Ctrl_No_Hysteresis+0x6f8>)
 800b596:	68f8      	ldr	r0, [r7, #12]
 800b598:	f7f5 fc34 	bl	8000e04 <__aeabi_fmul>
 800b59c:	4603      	mov	r3, r0
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f005 fa1e 	bl	80109e0 <roundf>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	4819      	ldr	r0, [pc, #100]	; (800b610 <NX7_PID_Ctrl_No_Hysteresis+0x6f8>)
 800b5aa:	f7f5 fb21 	bl	8000bf0 <__aeabi_fsub>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	f7f5 fe29 	bl	8001208 <__aeabi_f2uiz>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	b2da      	uxtb	r2, r3
 800b5ba:	4b16      	ldr	r3, [pc, #88]	; (800b614 <NX7_PID_Ctrl_No_Hysteresis+0x6fc>)
 800b5bc:	701a      	strb	r2, [r3, #0]
 800b5be:	e09a      	b.n	800b6f6 <NX7_PID_Ctrl_No_Hysteresis+0x7de>
 800b5c0:	11111111 	.word	0x11111111
 800b5c4:	3fa11111 	.word	0x3fa11111
 800b5c8:	9999999a 	.word	0x9999999a
 800b5cc:	3ff19999 	.word	0x3ff19999
 800b5d0:	9999999a 	.word	0x9999999a
 800b5d4:	3fe99999 	.word	0x3fe99999
 800b5d8:	20000010 	.word	0x20000010
 800b5dc:	200005a8 	.word	0x200005a8
 800b5e0:	bfc00000 	.word	0xbfc00000
 800b5e4:	40600000 	.word	0x40600000
 800b5e8:	200005a1 	.word	0x200005a1
 800b5ec:	2000000b 	.word	0x2000000b
 800b5f0:	2000020c 	.word	0x2000020c
 800b5f4:	20000224 	.word	0x20000224
 800b5f8:	2000022c 	.word	0x2000022c
 800b5fc:	20000230 	.word	0x20000230
 800b600:	3ca3d70a 	.word	0x3ca3d70a
 800b604:	20000228 	.word	0x20000228
 800b608:	3ff00000 	.word	0x3ff00000
 800b60c:	3f4ccccd 	.word	0x3f4ccccd
 800b610:	41a00000 	.word	0x41a00000
 800b614:	200005a2 	.word	0x200005a2
	}
	/* <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><> */
	else if(TS-TA < 0)
 800b618:	4ba9      	ldr	r3, [pc, #676]	; (800b8c0 <NX7_PID_Ctrl_No_Hysteresis+0x9a8>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	4aa9      	ldr	r2, [pc, #676]	; (800b8c4 <NX7_PID_Ctrl_No_Hysteresis+0x9ac>)
 800b61e:	68d2      	ldr	r2, [r2, #12]
 800b620:	4611      	mov	r1, r2
 800b622:	4618      	mov	r0, r3
 800b624:	f7f5 fae4 	bl	8000bf0 <__aeabi_fsub>
 800b628:	4603      	mov	r3, r0
 800b62a:	f04f 0100 	mov.w	r1, #0
 800b62e:	4618      	mov	r0, r3
 800b630:	f7f5 fd86 	bl	8001140 <__aeabi_fcmplt>
 800b634:	4603      	mov	r3, r0
 800b636:	2b00      	cmp	r3, #0
 800b638:	d05d      	beq.n	800b6f6 <NX7_PID_Ctrl_No_Hysteresis+0x7de>
	{
		Airmix_KP = -1.0/15 * fabsf(PID_Error);
 800b63a:	4ba3      	ldr	r3, [pc, #652]	; (800b8c8 <NX7_PID_Ctrl_No_Hysteresis+0x9b0>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b642:	4618      	mov	r0, r3
 800b644:	f7f4 ff50 	bl	80004e8 <__aeabi_f2d>
 800b648:	a399      	add	r3, pc, #612	; (adr r3, 800b8b0 <NX7_PID_Ctrl_No_Hysteresis+0x998>)
 800b64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b64e:	f7f4 ffa3 	bl	8000598 <__aeabi_dmul>
 800b652:	4602      	mov	r2, r0
 800b654:	460b      	mov	r3, r1
 800b656:	4610      	mov	r0, r2
 800b658:	4619      	mov	r1, r3
 800b65a:	f7f5 fa75 	bl	8000b48 <__aeabi_d2f>
 800b65e:	4603      	mov	r3, r0
 800b660:	4a9a      	ldr	r2, [pc, #616]	; (800b8cc <NX7_PID_Ctrl_No_Hysteresis+0x9b4>)
 800b662:	6013      	str	r3, [r2, #0]
		Airmix_KI = -1.0/50;
 800b664:	4b9a      	ldr	r3, [pc, #616]	; (800b8d0 <NX7_PID_Ctrl_No_Hysteresis+0x9b8>)
 800b666:	4a9b      	ldr	r2, [pc, #620]	; (800b8d4 <NX7_PID_Ctrl_No_Hysteresis+0x9bc>)
 800b668:	601a      	str	r2, [r3, #0]
		float airmix = Airmix_KP*PID_Error+Airmix_KI*Airmix_Int_Error;
 800b66a:	4b98      	ldr	r3, [pc, #608]	; (800b8cc <NX7_PID_Ctrl_No_Hysteresis+0x9b4>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	4a96      	ldr	r2, [pc, #600]	; (800b8c8 <NX7_PID_Ctrl_No_Hysteresis+0x9b0>)
 800b670:	6812      	ldr	r2, [r2, #0]
 800b672:	4611      	mov	r1, r2
 800b674:	4618      	mov	r0, r3
 800b676:	f7f5 fbc5 	bl	8000e04 <__aeabi_fmul>
 800b67a:	4603      	mov	r3, r0
 800b67c:	461c      	mov	r4, r3
 800b67e:	4b94      	ldr	r3, [pc, #592]	; (800b8d0 <NX7_PID_Ctrl_No_Hysteresis+0x9b8>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	4a95      	ldr	r2, [pc, #596]	; (800b8d8 <NX7_PID_Ctrl_No_Hysteresis+0x9c0>)
 800b684:	6812      	ldr	r2, [r2, #0]
 800b686:	4611      	mov	r1, r2
 800b688:	4618      	mov	r0, r3
 800b68a:	f7f5 fbbb 	bl	8000e04 <__aeabi_fmul>
 800b68e:	4603      	mov	r3, r0
 800b690:	4619      	mov	r1, r3
 800b692:	4620      	mov	r0, r4
 800b694:	f7f5 faae 	bl	8000bf4 <__addsf3>
 800b698:	4603      	mov	r3, r0
 800b69a:	60bb      	str	r3, [r7, #8]
		if(airmix < 0.2)	{airmix = 0.2;}
 800b69c:	68b8      	ldr	r0, [r7, #8]
 800b69e:	f7f4 ff23 	bl	80004e8 <__aeabi_f2d>
 800b6a2:	a385      	add	r3, pc, #532	; (adr r3, 800b8b8 <NX7_PID_Ctrl_No_Hysteresis+0x9a0>)
 800b6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a8:	f7f5 f9e8 	bl	8000a7c <__aeabi_dcmplt>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d001      	beq.n	800b6b6 <NX7_PID_Ctrl_No_Hysteresis+0x79e>
 800b6b2:	4b8a      	ldr	r3, [pc, #552]	; (800b8dc <NX7_PID_Ctrl_No_Hysteresis+0x9c4>)
 800b6b4:	60bb      	str	r3, [r7, #8]
		if(airmix > 1.0)	{airmix = 1.0;}
 800b6b6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b6ba:	68b8      	ldr	r0, [r7, #8]
 800b6bc:	f7f5 fd5e 	bl	800117c <__aeabi_fcmpgt>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d002      	beq.n	800b6cc <NX7_PID_Ctrl_No_Hysteresis+0x7b4>
 800b6c6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800b6ca:	60bb      	str	r3, [r7, #8]
		PID_Airmix_State = 20 - roundf(20*airmix);		// Airmix: 5%
 800b6cc:	4984      	ldr	r1, [pc, #528]	; (800b8e0 <NX7_PID_Ctrl_No_Hysteresis+0x9c8>)
 800b6ce:	68b8      	ldr	r0, [r7, #8]
 800b6d0:	f7f5 fb98 	bl	8000e04 <__aeabi_fmul>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f005 f982 	bl	80109e0 <roundf>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	4619      	mov	r1, r3
 800b6e0:	487f      	ldr	r0, [pc, #508]	; (800b8e0 <NX7_PID_Ctrl_No_Hysteresis+0x9c8>)
 800b6e2:	f7f5 fa85 	bl	8000bf0 <__aeabi_fsub>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	f7f5 fd8d 	bl	8001208 <__aeabi_f2uiz>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	b2da      	uxtb	r2, r3
 800b6f2:	4b7c      	ldr	r3, [pc, #496]	; (800b8e4 <NX7_PID_Ctrl_No_Hysteresis+0x9cc>)
 800b6f4:	701a      	strb	r2, [r3, #0]
	}
	/* <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><> */
	NX7_Airmix_State = PID_Airmix_State;
 800b6f6:	4b7b      	ldr	r3, [pc, #492]	; (800b8e4 <NX7_PID_Ctrl_No_Hysteresis+0x9cc>)
 800b6f8:	781a      	ldrb	r2, [r3, #0]
 800b6fa:	4b7b      	ldr	r3, [pc, #492]	; (800b8e8 <NX7_PID_Ctrl_No_Hysteresis+0x9d0>)
 800b6fc:	701a      	strb	r2, [r3, #0]

/* ------------------------------------------------------ <Blower_State_Ctrl> */
	/* <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><> */
	if(TS-TA >= 0)
 800b6fe:	4b70      	ldr	r3, [pc, #448]	; (800b8c0 <NX7_PID_Ctrl_No_Hysteresis+0x9a8>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	4a70      	ldr	r2, [pc, #448]	; (800b8c4 <NX7_PID_Ctrl_No_Hysteresis+0x9ac>)
 800b704:	68d2      	ldr	r2, [r2, #12]
 800b706:	4611      	mov	r1, r2
 800b708:	4618      	mov	r0, r3
 800b70a:	f7f5 fa71 	bl	8000bf0 <__aeabi_fsub>
 800b70e:	4603      	mov	r3, r0
 800b710:	f04f 0100 	mov.w	r1, #0
 800b714:	4618      	mov	r0, r3
 800b716:	f7f5 fd27 	bl	8001168 <__aeabi_fcmpge>
 800b71a:	4603      	mov	r3, r0
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	f000 813f 	beq.w	800b9a0 <NX7_PID_Ctrl_No_Hysteresis+0xa88>
	{
		if(TW >= +65)
 800b722:	4b68      	ldr	r3, [pc, #416]	; (800b8c4 <NX7_PID_Ctrl_No_Hysteresis+0x9ac>)
 800b724:	689b      	ldr	r3, [r3, #8]
 800b726:	4971      	ldr	r1, [pc, #452]	; (800b8ec <NX7_PID_Ctrl_No_Hysteresis+0x9d4>)
 800b728:	4618      	mov	r0, r3
 800b72a:	f7f5 fd1d 	bl	8001168 <__aeabi_fcmpge>
 800b72e:	4603      	mov	r3, r0
 800b730:	2b00      	cmp	r3, #0
 800b732:	d04c      	beq.n	800b7ce <NX7_PID_Ctrl_No_Hysteresis+0x8b6>
		{
			Blower_K1 = 1.0/25;
 800b734:	4b6e      	ldr	r3, [pc, #440]	; (800b8f0 <NX7_PID_Ctrl_No_Hysteresis+0x9d8>)
 800b736:	4a6f      	ldr	r2, [pc, #444]	; (800b8f4 <NX7_PID_Ctrl_No_Hysteresis+0x9dc>)
 800b738:	601a      	str	r2, [r3, #0]
			Blower_K2 = 1.0/40;
 800b73a:	4b6f      	ldr	r3, [pc, #444]	; (800b8f8 <NX7_PID_Ctrl_No_Hysteresis+0x9e0>)
 800b73c:	4a6f      	ldr	r2, [pc, #444]	; (800b8fc <NX7_PID_Ctrl_No_Hysteresis+0x9e4>)
 800b73e:	601a      	str	r2, [r3, #0]
			float blower = Blower_K1*fabsf(PID_Error) + Blower_K2*Blower_X;
 800b740:	4b61      	ldr	r3, [pc, #388]	; (800b8c8 <NX7_PID_Ctrl_No_Hysteresis+0x9b0>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b748:	4a69      	ldr	r2, [pc, #420]	; (800b8f0 <NX7_PID_Ctrl_No_Hysteresis+0x9d8>)
 800b74a:	6812      	ldr	r2, [r2, #0]
 800b74c:	4611      	mov	r1, r2
 800b74e:	4618      	mov	r0, r3
 800b750:	f7f5 fb58 	bl	8000e04 <__aeabi_fmul>
 800b754:	4603      	mov	r3, r0
 800b756:	461c      	mov	r4, r3
 800b758:	4b67      	ldr	r3, [pc, #412]	; (800b8f8 <NX7_PID_Ctrl_No_Hysteresis+0x9e0>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	4a68      	ldr	r2, [pc, #416]	; (800b900 <NX7_PID_Ctrl_No_Hysteresis+0x9e8>)
 800b75e:	6812      	ldr	r2, [r2, #0]
 800b760:	4611      	mov	r1, r2
 800b762:	4618      	mov	r0, r3
 800b764:	f7f5 fb4e 	bl	8000e04 <__aeabi_fmul>
 800b768:	4603      	mov	r3, r0
 800b76a:	4619      	mov	r1, r3
 800b76c:	4620      	mov	r0, r4
 800b76e:	f7f5 fa41 	bl	8000bf4 <__addsf3>
 800b772:	4603      	mov	r3, r0
 800b774:	607b      	str	r3, [r7, #4]
			if(blower > 1.0)	{blower = 1.0;}
 800b776:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f7f5 fcfe 	bl	800117c <__aeabi_fcmpgt>
 800b780:	4603      	mov	r3, r0
 800b782:	2b00      	cmp	r3, #0
 800b784:	d002      	beq.n	800b78c <NX7_PID_Ctrl_No_Hysteresis+0x874>
 800b786:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800b78a:	607b      	str	r3, [r7, #4]
			PID_Blower_State = roundf(8*blower);
 800b78c:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f7f5 fb37 	bl	8000e04 <__aeabi_fmul>
 800b796:	4603      	mov	r3, r0
 800b798:	4618      	mov	r0, r3
 800b79a:	f005 f921 	bl	80109e0 <roundf>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f7f5 fd31 	bl	8001208 <__aeabi_f2uiz>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	b2da      	uxtb	r2, r3
 800b7aa:	4b56      	ldr	r3, [pc, #344]	; (800b904 <NX7_PID_Ctrl_No_Hysteresis+0x9ec>)
 800b7ac:	701a      	strb	r2, [r3, #0]
			if(PID_Blower_State < Blower_L1)	{PID_Blower_State = Blower_L1;}
 800b7ae:	4b55      	ldr	r3, [pc, #340]	; (800b904 <NX7_PID_Ctrl_No_Hysteresis+0x9ec>)
 800b7b0:	781b      	ldrb	r3, [r3, #0]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d102      	bne.n	800b7bc <NX7_PID_Ctrl_No_Hysteresis+0x8a4>
 800b7b6:	4b53      	ldr	r3, [pc, #332]	; (800b904 <NX7_PID_Ctrl_No_Hysteresis+0x9ec>)
 800b7b8:	2201      	movs	r2, #1
 800b7ba:	701a      	strb	r2, [r3, #0]
			if(PID_Blower_State > Blower_L8)	{PID_Blower_State = Blower_L8;}
 800b7bc:	4b51      	ldr	r3, [pc, #324]	; (800b904 <NX7_PID_Ctrl_No_Hysteresis+0x9ec>)
 800b7be:	781b      	ldrb	r3, [r3, #0]
 800b7c0:	2b08      	cmp	r3, #8
 800b7c2:	f240 814b 	bls.w	800ba5c <NX7_PID_Ctrl_No_Hysteresis+0xb44>
 800b7c6:	4b4f      	ldr	r3, [pc, #316]	; (800b904 <NX7_PID_Ctrl_No_Hysteresis+0x9ec>)
 800b7c8:	2208      	movs	r2, #8
 800b7ca:	701a      	strb	r2, [r3, #0]
		if(PID_Blower_State < Blower_L1)	{PID_Blower_State = Blower_L1;}
		if(PID_Blower_State > Blower_L8)	{PID_Blower_State = Blower_L8;}
	}
	/* <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><> */
	// void NX7_PID_Ctrl_Blower(void) is executed every 0.5 second
}
 800b7cc:	e146      	b.n	800ba5c <NX7_PID_Ctrl_No_Hysteresis+0xb44>
		else if((TW > +35) && (TW < +65))
 800b7ce:	4b3d      	ldr	r3, [pc, #244]	; (800b8c4 <NX7_PID_Ctrl_No_Hysteresis+0x9ac>)
 800b7d0:	689b      	ldr	r3, [r3, #8]
 800b7d2:	494d      	ldr	r1, [pc, #308]	; (800b908 <NX7_PID_Ctrl_No_Hysteresis+0x9f0>)
 800b7d4:	4618      	mov	r0, r3
 800b7d6:	f7f5 fcd1 	bl	800117c <__aeabi_fcmpgt>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	f000 80d1 	beq.w	800b984 <NX7_PID_Ctrl_No_Hysteresis+0xa6c>
 800b7e2:	4b38      	ldr	r3, [pc, #224]	; (800b8c4 <NX7_PID_Ctrl_No_Hysteresis+0x9ac>)
 800b7e4:	689b      	ldr	r3, [r3, #8]
 800b7e6:	4941      	ldr	r1, [pc, #260]	; (800b8ec <NX7_PID_Ctrl_No_Hysteresis+0x9d4>)
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f7f5 fca9 	bl	8001140 <__aeabi_fcmplt>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	f000 80c7 	beq.w	800b984 <NX7_PID_Ctrl_No_Hysteresis+0xa6c>
			if(TS-TC < -1)
 800b7f6:	4b32      	ldr	r3, [pc, #200]	; (800b8c0 <NX7_PID_Ctrl_No_Hysteresis+0x9a8>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	4a32      	ldr	r2, [pc, #200]	; (800b8c4 <NX7_PID_Ctrl_No_Hysteresis+0x9ac>)
 800b7fc:	6852      	ldr	r2, [r2, #4]
 800b7fe:	4611      	mov	r1, r2
 800b800:	4618      	mov	r0, r3
 800b802:	f7f5 f9f5 	bl	8000bf0 <__aeabi_fsub>
 800b806:	4603      	mov	r3, r0
 800b808:	4940      	ldr	r1, [pc, #256]	; (800b90c <NX7_PID_Ctrl_No_Hysteresis+0x9f4>)
 800b80a:	4618      	mov	r0, r3
 800b80c:	f7f5 fc98 	bl	8001140 <__aeabi_fcmplt>
 800b810:	4603      	mov	r3, r0
 800b812:	2b00      	cmp	r3, #0
 800b814:	d025      	beq.n	800b862 <NX7_PID_Ctrl_No_Hysteresis+0x94a>
				PID_Blower_State = floorf((0.2*TW)-5);
 800b816:	4b2b      	ldr	r3, [pc, #172]	; (800b8c4 <NX7_PID_Ctrl_No_Hysteresis+0x9ac>)
 800b818:	689b      	ldr	r3, [r3, #8]
 800b81a:	4618      	mov	r0, r3
 800b81c:	f7f4 fe64 	bl	80004e8 <__aeabi_f2d>
 800b820:	a325      	add	r3, pc, #148	; (adr r3, 800b8b8 <NX7_PID_Ctrl_No_Hysteresis+0x9a0>)
 800b822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b826:	f7f4 feb7 	bl	8000598 <__aeabi_dmul>
 800b82a:	4602      	mov	r2, r0
 800b82c:	460b      	mov	r3, r1
 800b82e:	4610      	mov	r0, r2
 800b830:	4619      	mov	r1, r3
 800b832:	f04f 0200 	mov.w	r2, #0
 800b836:	4b36      	ldr	r3, [pc, #216]	; (800b910 <NX7_PID_Ctrl_No_Hysteresis+0x9f8>)
 800b838:	f7f4 fcf6 	bl	8000228 <__aeabi_dsub>
 800b83c:	4602      	mov	r2, r0
 800b83e:	460b      	mov	r3, r1
 800b840:	4610      	mov	r0, r2
 800b842:	4619      	mov	r1, r3
 800b844:	f7f5 f980 	bl	8000b48 <__aeabi_d2f>
 800b848:	4603      	mov	r3, r0
 800b84a:	4618      	mov	r0, r3
 800b84c:	f005 f886 	bl	801095c <floorf>
 800b850:	4603      	mov	r3, r0
 800b852:	4618      	mov	r0, r3
 800b854:	f7f5 fcd8 	bl	8001208 <__aeabi_f2uiz>
 800b858:	4603      	mov	r3, r0
 800b85a:	b2da      	uxtb	r2, r3
 800b85c:	4b29      	ldr	r3, [pc, #164]	; (800b904 <NX7_PID_Ctrl_No_Hysteresis+0x9ec>)
 800b85e:	701a      	strb	r2, [r3, #0]
			if(TS-TC < -1)
 800b860:	e0fc      	b.n	800ba5c <NX7_PID_Ctrl_No_Hysteresis+0xb44>
			else if((TS-TC >= -1) && (TS-TC <= +1))
 800b862:	4b17      	ldr	r3, [pc, #92]	; (800b8c0 <NX7_PID_Ctrl_No_Hysteresis+0x9a8>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	4a17      	ldr	r2, [pc, #92]	; (800b8c4 <NX7_PID_Ctrl_No_Hysteresis+0x9ac>)
 800b868:	6852      	ldr	r2, [r2, #4]
 800b86a:	4611      	mov	r1, r2
 800b86c:	4618      	mov	r0, r3
 800b86e:	f7f5 f9bf 	bl	8000bf0 <__aeabi_fsub>
 800b872:	4603      	mov	r3, r0
 800b874:	4925      	ldr	r1, [pc, #148]	; (800b90c <NX7_PID_Ctrl_No_Hysteresis+0x9f4>)
 800b876:	4618      	mov	r0, r3
 800b878:	f7f5 fc76 	bl	8001168 <__aeabi_fcmpge>
 800b87c:	4603      	mov	r3, r0
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d048      	beq.n	800b914 <NX7_PID_Ctrl_No_Hysteresis+0x9fc>
 800b882:	4b0f      	ldr	r3, [pc, #60]	; (800b8c0 <NX7_PID_Ctrl_No_Hysteresis+0x9a8>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	4a0f      	ldr	r2, [pc, #60]	; (800b8c4 <NX7_PID_Ctrl_No_Hysteresis+0x9ac>)
 800b888:	6852      	ldr	r2, [r2, #4]
 800b88a:	4611      	mov	r1, r2
 800b88c:	4618      	mov	r0, r3
 800b88e:	f7f5 f9af 	bl	8000bf0 <__aeabi_fsub>
 800b892:	4603      	mov	r3, r0
 800b894:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b898:	4618      	mov	r0, r3
 800b89a:	f7f5 fc5b 	bl	8001154 <__aeabi_fcmple>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d037      	beq.n	800b914 <NX7_PID_Ctrl_No_Hysteresis+0x9fc>
				PID_Blower_State = Blower_L1;
 800b8a4:	4b17      	ldr	r3, [pc, #92]	; (800b904 <NX7_PID_Ctrl_No_Hysteresis+0x9ec>)
 800b8a6:	2201      	movs	r2, #1
 800b8a8:	701a      	strb	r2, [r3, #0]
			if(TS-TC < -1)
 800b8aa:	e0d7      	b.n	800ba5c <NX7_PID_Ctrl_No_Hysteresis+0xb44>
 800b8ac:	f3af 8000 	nop.w
 800b8b0:	11111111 	.word	0x11111111
 800b8b4:	bfb11111 	.word	0xbfb11111
 800b8b8:	9999999a 	.word	0x9999999a
 800b8bc:	3fc99999 	.word	0x3fc99999
 800b8c0:	20000010 	.word	0x20000010
 800b8c4:	200005a8 	.word	0x200005a8
 800b8c8:	20000224 	.word	0x20000224
 800b8cc:	2000022c 	.word	0x2000022c
 800b8d0:	20000230 	.word	0x20000230
 800b8d4:	bca3d70a 	.word	0xbca3d70a
 800b8d8:	20000228 	.word	0x20000228
 800b8dc:	3e4ccccd 	.word	0x3e4ccccd
 800b8e0:	41a00000 	.word	0x41a00000
 800b8e4:	200005a2 	.word	0x200005a2
 800b8e8:	2000020d 	.word	0x2000020d
 800b8ec:	42820000 	.word	0x42820000
 800b8f0:	20000238 	.word	0x20000238
 800b8f4:	3d23d70a 	.word	0x3d23d70a
 800b8f8:	2000023c 	.word	0x2000023c
 800b8fc:	3ccccccd 	.word	0x3ccccccd
 800b900:	20000240 	.word	0x20000240
 800b904:	200005a0 	.word	0x200005a0
 800b908:	420c0000 	.word	0x420c0000
 800b90c:	bf800000 	.word	0xbf800000
 800b910:	40140000 	.word	0x40140000
			else if(TS-TC > +1)
 800b914:	4b56      	ldr	r3, [pc, #344]	; (800ba70 <NX7_PID_Ctrl_No_Hysteresis+0xb58>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	4a56      	ldr	r2, [pc, #344]	; (800ba74 <NX7_PID_Ctrl_No_Hysteresis+0xb5c>)
 800b91a:	6852      	ldr	r2, [r2, #4]
 800b91c:	4611      	mov	r1, r2
 800b91e:	4618      	mov	r0, r3
 800b920:	f7f5 f966 	bl	8000bf0 <__aeabi_fsub>
 800b924:	4603      	mov	r3, r0
 800b926:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b92a:	4618      	mov	r0, r3
 800b92c:	f7f5 fc26 	bl	800117c <__aeabi_fcmpgt>
 800b930:	4603      	mov	r3, r0
 800b932:	2b00      	cmp	r3, #0
 800b934:	d100      	bne.n	800b938 <NX7_PID_Ctrl_No_Hysteresis+0xa20>
			if(TS-TC < -1)
 800b936:	e091      	b.n	800ba5c <NX7_PID_Ctrl_No_Hysteresis+0xb44>
				PID_Blower_State = floorf((0.2*TW)-5);
 800b938:	4b4e      	ldr	r3, [pc, #312]	; (800ba74 <NX7_PID_Ctrl_No_Hysteresis+0xb5c>)
 800b93a:	689b      	ldr	r3, [r3, #8]
 800b93c:	4618      	mov	r0, r3
 800b93e:	f7f4 fdd3 	bl	80004e8 <__aeabi_f2d>
 800b942:	a349      	add	r3, pc, #292	; (adr r3, 800ba68 <NX7_PID_Ctrl_No_Hysteresis+0xb50>)
 800b944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b948:	f7f4 fe26 	bl	8000598 <__aeabi_dmul>
 800b94c:	4602      	mov	r2, r0
 800b94e:	460b      	mov	r3, r1
 800b950:	4610      	mov	r0, r2
 800b952:	4619      	mov	r1, r3
 800b954:	f04f 0200 	mov.w	r2, #0
 800b958:	4b47      	ldr	r3, [pc, #284]	; (800ba78 <NX7_PID_Ctrl_No_Hysteresis+0xb60>)
 800b95a:	f7f4 fc65 	bl	8000228 <__aeabi_dsub>
 800b95e:	4602      	mov	r2, r0
 800b960:	460b      	mov	r3, r1
 800b962:	4610      	mov	r0, r2
 800b964:	4619      	mov	r1, r3
 800b966:	f7f5 f8ef 	bl	8000b48 <__aeabi_d2f>
 800b96a:	4603      	mov	r3, r0
 800b96c:	4618      	mov	r0, r3
 800b96e:	f004 fff5 	bl	801095c <floorf>
 800b972:	4603      	mov	r3, r0
 800b974:	4618      	mov	r0, r3
 800b976:	f7f5 fc47 	bl	8001208 <__aeabi_f2uiz>
 800b97a:	4603      	mov	r3, r0
 800b97c:	b2da      	uxtb	r2, r3
 800b97e:	4b3f      	ldr	r3, [pc, #252]	; (800ba7c <NX7_PID_Ctrl_No_Hysteresis+0xb64>)
 800b980:	701a      	strb	r2, [r3, #0]
			if(TS-TC < -1)
 800b982:	e06b      	b.n	800ba5c <NX7_PID_Ctrl_No_Hysteresis+0xb44>
		else if(TW <= +35)
 800b984:	4b3b      	ldr	r3, [pc, #236]	; (800ba74 <NX7_PID_Ctrl_No_Hysteresis+0xb5c>)
 800b986:	689b      	ldr	r3, [r3, #8]
 800b988:	493d      	ldr	r1, [pc, #244]	; (800ba80 <NX7_PID_Ctrl_No_Hysteresis+0xb68>)
 800b98a:	4618      	mov	r0, r3
 800b98c:	f7f5 fbe2 	bl	8001154 <__aeabi_fcmple>
 800b990:	4603      	mov	r3, r0
 800b992:	2b00      	cmp	r3, #0
 800b994:	d100      	bne.n	800b998 <NX7_PID_Ctrl_No_Hysteresis+0xa80>
}
 800b996:	e061      	b.n	800ba5c <NX7_PID_Ctrl_No_Hysteresis+0xb44>
			PID_Blower_State = Blower_L1;
 800b998:	4b38      	ldr	r3, [pc, #224]	; (800ba7c <NX7_PID_Ctrl_No_Hysteresis+0xb64>)
 800b99a:	2201      	movs	r2, #1
 800b99c:	701a      	strb	r2, [r3, #0]
}
 800b99e:	e05d      	b.n	800ba5c <NX7_PID_Ctrl_No_Hysteresis+0xb44>
	else if(TS-TA < 0)
 800b9a0:	4b33      	ldr	r3, [pc, #204]	; (800ba70 <NX7_PID_Ctrl_No_Hysteresis+0xb58>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	4a33      	ldr	r2, [pc, #204]	; (800ba74 <NX7_PID_Ctrl_No_Hysteresis+0xb5c>)
 800b9a6:	68d2      	ldr	r2, [r2, #12]
 800b9a8:	4611      	mov	r1, r2
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f7f5 f920 	bl	8000bf0 <__aeabi_fsub>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	f04f 0100 	mov.w	r1, #0
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f7f5 fbc2 	bl	8001140 <__aeabi_fcmplt>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d100      	bne.n	800b9c4 <NX7_PID_Ctrl_No_Hysteresis+0xaac>
}
 800b9c2:	e04b      	b.n	800ba5c <NX7_PID_Ctrl_No_Hysteresis+0xb44>
		Blower_K1 = 2.0/25;
 800b9c4:	4b2f      	ldr	r3, [pc, #188]	; (800ba84 <NX7_PID_Ctrl_No_Hysteresis+0xb6c>)
 800b9c6:	4a30      	ldr	r2, [pc, #192]	; (800ba88 <NX7_PID_Ctrl_No_Hysteresis+0xb70>)
 800b9c8:	601a      	str	r2, [r3, #0]
		Blower_K2 = 1.6/40;
 800b9ca:	4b30      	ldr	r3, [pc, #192]	; (800ba8c <NX7_PID_Ctrl_No_Hysteresis+0xb74>)
 800b9cc:	4a30      	ldr	r2, [pc, #192]	; (800ba90 <NX7_PID_Ctrl_No_Hysteresis+0xb78>)
 800b9ce:	601a      	str	r2, [r3, #0]
		float blower = Blower_K1*fabsf(PID_Error) + Blower_K2*Blower_X;
 800b9d0:	4b30      	ldr	r3, [pc, #192]	; (800ba94 <NX7_PID_Ctrl_No_Hysteresis+0xb7c>)
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b9d8:	4a2a      	ldr	r2, [pc, #168]	; (800ba84 <NX7_PID_Ctrl_No_Hysteresis+0xb6c>)
 800b9da:	6812      	ldr	r2, [r2, #0]
 800b9dc:	4611      	mov	r1, r2
 800b9de:	4618      	mov	r0, r3
 800b9e0:	f7f5 fa10 	bl	8000e04 <__aeabi_fmul>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	461c      	mov	r4, r3
 800b9e8:	4b28      	ldr	r3, [pc, #160]	; (800ba8c <NX7_PID_Ctrl_No_Hysteresis+0xb74>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	4a2a      	ldr	r2, [pc, #168]	; (800ba98 <NX7_PID_Ctrl_No_Hysteresis+0xb80>)
 800b9ee:	6812      	ldr	r2, [r2, #0]
 800b9f0:	4611      	mov	r1, r2
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f7f5 fa06 	bl	8000e04 <__aeabi_fmul>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	4620      	mov	r0, r4
 800b9fe:	f7f5 f8f9 	bl	8000bf4 <__addsf3>
 800ba02:	4603      	mov	r3, r0
 800ba04:	603b      	str	r3, [r7, #0]
		if(blower > 1.0)	{blower = 1.0;}
 800ba06:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ba0a:	6838      	ldr	r0, [r7, #0]
 800ba0c:	f7f5 fbb6 	bl	800117c <__aeabi_fcmpgt>
 800ba10:	4603      	mov	r3, r0
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d002      	beq.n	800ba1c <NX7_PID_Ctrl_No_Hysteresis+0xb04>
 800ba16:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800ba1a:	603b      	str	r3, [r7, #0]
		PID_Blower_State = roundf(8*blower);
 800ba1c:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800ba20:	6838      	ldr	r0, [r7, #0]
 800ba22:	f7f5 f9ef 	bl	8000e04 <__aeabi_fmul>
 800ba26:	4603      	mov	r3, r0
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f004 ffd9 	bl	80109e0 <roundf>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	4618      	mov	r0, r3
 800ba32:	f7f5 fbe9 	bl	8001208 <__aeabi_f2uiz>
 800ba36:	4603      	mov	r3, r0
 800ba38:	b2da      	uxtb	r2, r3
 800ba3a:	4b10      	ldr	r3, [pc, #64]	; (800ba7c <NX7_PID_Ctrl_No_Hysteresis+0xb64>)
 800ba3c:	701a      	strb	r2, [r3, #0]
		if(PID_Blower_State < Blower_L1)	{PID_Blower_State = Blower_L1;}
 800ba3e:	4b0f      	ldr	r3, [pc, #60]	; (800ba7c <NX7_PID_Ctrl_No_Hysteresis+0xb64>)
 800ba40:	781b      	ldrb	r3, [r3, #0]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d102      	bne.n	800ba4c <NX7_PID_Ctrl_No_Hysteresis+0xb34>
 800ba46:	4b0d      	ldr	r3, [pc, #52]	; (800ba7c <NX7_PID_Ctrl_No_Hysteresis+0xb64>)
 800ba48:	2201      	movs	r2, #1
 800ba4a:	701a      	strb	r2, [r3, #0]
		if(PID_Blower_State > Blower_L8)	{PID_Blower_State = Blower_L8;}
 800ba4c:	4b0b      	ldr	r3, [pc, #44]	; (800ba7c <NX7_PID_Ctrl_No_Hysteresis+0xb64>)
 800ba4e:	781b      	ldrb	r3, [r3, #0]
 800ba50:	2b08      	cmp	r3, #8
 800ba52:	d903      	bls.n	800ba5c <NX7_PID_Ctrl_No_Hysteresis+0xb44>
 800ba54:	4b09      	ldr	r3, [pc, #36]	; (800ba7c <NX7_PID_Ctrl_No_Hysteresis+0xb64>)
 800ba56:	2208      	movs	r2, #8
 800ba58:	701a      	strb	r2, [r3, #0]
}
 800ba5a:	e7ff      	b.n	800ba5c <NX7_PID_Ctrl_No_Hysteresis+0xb44>
 800ba5c:	bf00      	nop
 800ba5e:	3714      	adds	r7, #20
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd90      	pop	{r4, r7, pc}
 800ba64:	f3af 8000 	nop.w
 800ba68:	9999999a 	.word	0x9999999a
 800ba6c:	3fc99999 	.word	0x3fc99999
 800ba70:	20000010 	.word	0x20000010
 800ba74:	200005a8 	.word	0x200005a8
 800ba78:	40140000 	.word	0x40140000
 800ba7c:	200005a0 	.word	0x200005a0
 800ba80:	420c0000 	.word	0x420c0000
 800ba84:	20000238 	.word	0x20000238
 800ba88:	3da3d70a 	.word	0x3da3d70a
 800ba8c:	2000023c 	.word	0x2000023c
 800ba90:	3d23d70a 	.word	0x3d23d70a
 800ba94:	20000224 	.word	0x20000224
 800ba98:	20000240 	.word	0x20000240
 800ba9c:	00000000 	.word	0x00000000

0800baa0 <NX7_PID_Ctrl>:

/* NX7_PID_Ctrl --------------------------------------------------------------*/
void NX7_PID_Ctrl(void)
{
 800baa0:	b590      	push	{r4, r7, lr}
 800baa2:	b089      	sub	sp, #36	; 0x24
 800baa4:	af00      	add	r7, sp, #0
/* ------------------------------------------------------- <PID_Calculations> */
	PID_Error = TS-TC;
 800baa6:	4b9a      	ldr	r3, [pc, #616]	; (800bd10 <NX7_PID_Ctrl+0x270>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	4a9a      	ldr	r2, [pc, #616]	; (800bd14 <NX7_PID_Ctrl+0x274>)
 800baac:	6852      	ldr	r2, [r2, #4]
 800baae:	4611      	mov	r1, r2
 800bab0:	4618      	mov	r0, r3
 800bab2:	f7f5 f89d 	bl	8000bf0 <__aeabi_fsub>
 800bab6:	4603      	mov	r3, r0
 800bab8:	461a      	mov	r2, r3
 800baba:	4b97      	ldr	r3, [pc, #604]	; (800bd18 <NX7_PID_Ctrl+0x278>)
 800babc:	601a      	str	r2, [r3, #0]

	if(fabsf(TS-TA) < 10)
 800babe:	4b94      	ldr	r3, [pc, #592]	; (800bd10 <NX7_PID_Ctrl+0x270>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	4a94      	ldr	r2, [pc, #592]	; (800bd14 <NX7_PID_Ctrl+0x274>)
 800bac4:	68d2      	ldr	r2, [r2, #12]
 800bac6:	4611      	mov	r1, r2
 800bac8:	4618      	mov	r0, r3
 800baca:	f7f5 f891 	bl	8000bf0 <__aeabi_fsub>
 800bace:	4603      	mov	r3, r0
 800bad0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bad4:	4991      	ldr	r1, [pc, #580]	; (800bd1c <NX7_PID_Ctrl+0x27c>)
 800bad6:	4618      	mov	r0, r3
 800bad8:	f7f5 fb32 	bl	8001140 <__aeabi_fcmplt>
 800badc:	4603      	mov	r3, r0
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d003      	beq.n	800baea <NX7_PID_Ctrl+0x4a>
	{
		Ksat = 40;
 800bae2:	4b8f      	ldr	r3, [pc, #572]	; (800bd20 <NX7_PID_Ctrl+0x280>)
 800bae4:	4a8f      	ldr	r2, [pc, #572]	; (800bd24 <NX7_PID_Ctrl+0x284>)
 800bae6:	601a      	str	r2, [r3, #0]
 800bae8:	e03c      	b.n	800bb64 <NX7_PID_Ctrl+0xc4>
	}
	else if((fabsf(TS-TA) >= 10) && (fabsf(TS-TA) < 15))
 800baea:	4b89      	ldr	r3, [pc, #548]	; (800bd10 <NX7_PID_Ctrl+0x270>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	4a89      	ldr	r2, [pc, #548]	; (800bd14 <NX7_PID_Ctrl+0x274>)
 800baf0:	68d2      	ldr	r2, [r2, #12]
 800baf2:	4611      	mov	r1, r2
 800baf4:	4618      	mov	r0, r3
 800baf6:	f7f5 f87b 	bl	8000bf0 <__aeabi_fsub>
 800bafa:	4603      	mov	r3, r0
 800bafc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bb00:	4986      	ldr	r1, [pc, #536]	; (800bd1c <NX7_PID_Ctrl+0x27c>)
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7f5 fb30 	bl	8001168 <__aeabi_fcmpge>
 800bb08:	4603      	mov	r3, r0
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d015      	beq.n	800bb3a <NX7_PID_Ctrl+0x9a>
 800bb0e:	4b80      	ldr	r3, [pc, #512]	; (800bd10 <NX7_PID_Ctrl+0x270>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	4a80      	ldr	r2, [pc, #512]	; (800bd14 <NX7_PID_Ctrl+0x274>)
 800bb14:	68d2      	ldr	r2, [r2, #12]
 800bb16:	4611      	mov	r1, r2
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f7f5 f869 	bl	8000bf0 <__aeabi_fsub>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bb24:	4980      	ldr	r1, [pc, #512]	; (800bd28 <NX7_PID_Ctrl+0x288>)
 800bb26:	4618      	mov	r0, r3
 800bb28:	f7f5 fb0a 	bl	8001140 <__aeabi_fcmplt>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d003      	beq.n	800bb3a <NX7_PID_Ctrl+0x9a>
	{
		Ksat = 45;
 800bb32:	4b7b      	ldr	r3, [pc, #492]	; (800bd20 <NX7_PID_Ctrl+0x280>)
 800bb34:	4a7d      	ldr	r2, [pc, #500]	; (800bd2c <NX7_PID_Ctrl+0x28c>)
 800bb36:	601a      	str	r2, [r3, #0]
 800bb38:	e014      	b.n	800bb64 <NX7_PID_Ctrl+0xc4>
	}
	else if(fabsf(TS-TA) >= 15)
 800bb3a:	4b75      	ldr	r3, [pc, #468]	; (800bd10 <NX7_PID_Ctrl+0x270>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	4a75      	ldr	r2, [pc, #468]	; (800bd14 <NX7_PID_Ctrl+0x274>)
 800bb40:	68d2      	ldr	r2, [r2, #12]
 800bb42:	4611      	mov	r1, r2
 800bb44:	4618      	mov	r0, r3
 800bb46:	f7f5 f853 	bl	8000bf0 <__aeabi_fsub>
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bb50:	4975      	ldr	r1, [pc, #468]	; (800bd28 <NX7_PID_Ctrl+0x288>)
 800bb52:	4618      	mov	r0, r3
 800bb54:	f7f5 fb08 	bl	8001168 <__aeabi_fcmpge>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d002      	beq.n	800bb64 <NX7_PID_Ctrl+0xc4>
	{
		Ksat = 50;
 800bb5e:	4b70      	ldr	r3, [pc, #448]	; (800bd20 <NX7_PID_Ctrl+0x280>)
 800bb60:	4a73      	ldr	r2, [pc, #460]	; (800bd30 <NX7_PID_Ctrl+0x290>)
 800bb62:	601a      	str	r2, [r3, #0]
	}

	Airmix_Int_Error += PID_Error;
 800bb64:	4b73      	ldr	r3, [pc, #460]	; (800bd34 <NX7_PID_Ctrl+0x294>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	4a6b      	ldr	r2, [pc, #428]	; (800bd18 <NX7_PID_Ctrl+0x278>)
 800bb6a:	6812      	ldr	r2, [r2, #0]
 800bb6c:	4611      	mov	r1, r2
 800bb6e:	4618      	mov	r0, r3
 800bb70:	f7f5 f840 	bl	8000bf4 <__addsf3>
 800bb74:	4603      	mov	r3, r0
 800bb76:	461a      	mov	r2, r3
 800bb78:	4b6e      	ldr	r3, [pc, #440]	; (800bd34 <NX7_PID_Ctrl+0x294>)
 800bb7a:	601a      	str	r2, [r3, #0]
	if(fabsf(Airmix_Int_Error) > Ksat)
 800bb7c:	4b6d      	ldr	r3, [pc, #436]	; (800bd34 <NX7_PID_Ctrl+0x294>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bb84:	4a66      	ldr	r2, [pc, #408]	; (800bd20 <NX7_PID_Ctrl+0x280>)
 800bb86:	6812      	ldr	r2, [r2, #0]
 800bb88:	4611      	mov	r1, r2
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f7f5 faf6 	bl	800117c <__aeabi_fcmpgt>
 800bb90:	4603      	mov	r3, r0
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d015      	beq.n	800bbc2 <NX7_PID_Ctrl+0x122>
	{
		Airmix_Int_Error = Ksat * (Airmix_Int_Error/fabsf(Airmix_Int_Error));
 800bb96:	4b67      	ldr	r3, [pc, #412]	; (800bd34 <NX7_PID_Ctrl+0x294>)
 800bb98:	681a      	ldr	r2, [r3, #0]
 800bb9a:	4b66      	ldr	r3, [pc, #408]	; (800bd34 <NX7_PID_Ctrl+0x294>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bba2:	4619      	mov	r1, r3
 800bba4:	4610      	mov	r0, r2
 800bba6:	f7f5 f9e1 	bl	8000f6c <__aeabi_fdiv>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	461a      	mov	r2, r3
 800bbae:	4b5c      	ldr	r3, [pc, #368]	; (800bd20 <NX7_PID_Ctrl+0x280>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	4619      	mov	r1, r3
 800bbb4:	4610      	mov	r0, r2
 800bbb6:	f7f5 f925 	bl	8000e04 <__aeabi_fmul>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	461a      	mov	r2, r3
 800bbbe:	4b5d      	ldr	r3, [pc, #372]	; (800bd34 <NX7_PID_Ctrl+0x294>)
 800bbc0:	601a      	str	r2, [r3, #0]
	}
	//if(Airmix_Int_Error > +50)			{Airmix_Int_Error = +50;}
	//else if(Airmix_Int_Error < -50)		{Airmix_Int_Error = -50;}

/* --------------------------------------------------------------- <Blower_X> */
	if(fabsf(TA-TS) < fabsf(TA-25))		{Blower_X = fabsf(TA-TS);}
 800bbc2:	4b54      	ldr	r3, [pc, #336]	; (800bd14 <NX7_PID_Ctrl+0x274>)
 800bbc4:	68db      	ldr	r3, [r3, #12]
 800bbc6:	4a52      	ldr	r2, [pc, #328]	; (800bd10 <NX7_PID_Ctrl+0x270>)
 800bbc8:	6812      	ldr	r2, [r2, #0]
 800bbca:	4611      	mov	r1, r2
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f7f5 f80f 	bl	8000bf0 <__aeabi_fsub>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800bbd8:	4b4e      	ldr	r3, [pc, #312]	; (800bd14 <NX7_PID_Ctrl+0x274>)
 800bbda:	68db      	ldr	r3, [r3, #12]
 800bbdc:	4956      	ldr	r1, [pc, #344]	; (800bd38 <NX7_PID_Ctrl+0x298>)
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f7f5 f806 	bl	8000bf0 <__aeabi_fsub>
 800bbe4:	4603      	mov	r3, r0
 800bbe6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bbea:	4619      	mov	r1, r3
 800bbec:	4620      	mov	r0, r4
 800bbee:	f7f5 faa7 	bl	8001140 <__aeabi_fcmplt>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d00d      	beq.n	800bc14 <NX7_PID_Ctrl+0x174>
 800bbf8:	4b46      	ldr	r3, [pc, #280]	; (800bd14 <NX7_PID_Ctrl+0x274>)
 800bbfa:	68db      	ldr	r3, [r3, #12]
 800bbfc:	4a44      	ldr	r2, [pc, #272]	; (800bd10 <NX7_PID_Ctrl+0x270>)
 800bbfe:	6812      	ldr	r2, [r2, #0]
 800bc00:	4611      	mov	r1, r2
 800bc02:	4618      	mov	r0, r3
 800bc04:	f7f4 fff4 	bl	8000bf0 <__aeabi_fsub>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bc0e:	4a4b      	ldr	r2, [pc, #300]	; (800bd3c <NX7_PID_Ctrl+0x29c>)
 800bc10:	6013      	str	r3, [r2, #0]
 800bc12:	e00a      	b.n	800bc2a <NX7_PID_Ctrl+0x18a>
	else								{Blower_X = fabsf(TA-25);}
 800bc14:	4b3f      	ldr	r3, [pc, #252]	; (800bd14 <NX7_PID_Ctrl+0x274>)
 800bc16:	68db      	ldr	r3, [r3, #12]
 800bc18:	4947      	ldr	r1, [pc, #284]	; (800bd38 <NX7_PID_Ctrl+0x298>)
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f7f4 ffe8 	bl	8000bf0 <__aeabi_fsub>
 800bc20:	4603      	mov	r3, r0
 800bc22:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bc26:	4a45      	ldr	r2, [pc, #276]	; (800bd3c <NX7_PID_Ctrl+0x29c>)
 800bc28:	6013      	str	r3, [r2, #0]

/* ------------------------------------------------------------- <Flag_State> */
	if(TS-TA > +2.5)		{flag = +1;}
 800bc2a:	4b39      	ldr	r3, [pc, #228]	; (800bd10 <NX7_PID_Ctrl+0x270>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	4a39      	ldr	r2, [pc, #228]	; (800bd14 <NX7_PID_Ctrl+0x274>)
 800bc30:	68d2      	ldr	r2, [r2, #12]
 800bc32:	4611      	mov	r1, r2
 800bc34:	4618      	mov	r0, r3
 800bc36:	f7f4 ffdb 	bl	8000bf0 <__aeabi_fsub>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	4940      	ldr	r1, [pc, #256]	; (800bd40 <NX7_PID_Ctrl+0x2a0>)
 800bc3e:	4618      	mov	r0, r3
 800bc40:	f7f5 fa9c 	bl	800117c <__aeabi_fcmpgt>
 800bc44:	4603      	mov	r3, r0
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d003      	beq.n	800bc52 <NX7_PID_Ctrl+0x1b2>
 800bc4a:	4b3e      	ldr	r3, [pc, #248]	; (800bd44 <NX7_PID_Ctrl+0x2a4>)
 800bc4c:	2201      	movs	r2, #1
 800bc4e:	601a      	str	r2, [r3, #0]
 800bc50:	e013      	b.n	800bc7a <NX7_PID_Ctrl+0x1da>
	else if(TS-TA < -2.5)	{flag = -1;}
 800bc52:	4b2f      	ldr	r3, [pc, #188]	; (800bd10 <NX7_PID_Ctrl+0x270>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	4a2f      	ldr	r2, [pc, #188]	; (800bd14 <NX7_PID_Ctrl+0x274>)
 800bc58:	68d2      	ldr	r2, [r2, #12]
 800bc5a:	4611      	mov	r1, r2
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f7f4 ffc7 	bl	8000bf0 <__aeabi_fsub>
 800bc62:	4603      	mov	r3, r0
 800bc64:	4938      	ldr	r1, [pc, #224]	; (800bd48 <NX7_PID_Ctrl+0x2a8>)
 800bc66:	4618      	mov	r0, r3
 800bc68:	f7f5 fa6a 	bl	8001140 <__aeabi_fcmplt>
 800bc6c:	4603      	mov	r3, r0
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d003      	beq.n	800bc7a <NX7_PID_Ctrl+0x1da>
 800bc72:	4b34      	ldr	r3, [pc, #208]	; (800bd44 <NX7_PID_Ctrl+0x2a4>)
 800bc74:	f04f 32ff 	mov.w	r2, #4294967295
 800bc78:	601a      	str	r2, [r3, #0]

/* ------------------------------------------------------ <Intake_State_Ctrl> */
	/* <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><> */
	if(TS-TA > +2.5)
 800bc7a:	4b25      	ldr	r3, [pc, #148]	; (800bd10 <NX7_PID_Ctrl+0x270>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	4a25      	ldr	r2, [pc, #148]	; (800bd14 <NX7_PID_Ctrl+0x274>)
 800bc80:	68d2      	ldr	r2, [r2, #12]
 800bc82:	4611      	mov	r1, r2
 800bc84:	4618      	mov	r0, r3
 800bc86:	f7f4 ffb3 	bl	8000bf0 <__aeabi_fsub>
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	492c      	ldr	r1, [pc, #176]	; (800bd40 <NX7_PID_Ctrl+0x2a0>)
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f7f5 fa74 	bl	800117c <__aeabi_fcmpgt>
 800bc94:	4603      	mov	r3, r0
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d071      	beq.n	800bd7e <NX7_PID_Ctrl+0x2de>
	{
		if(TS-TC <= 0)
 800bc9a:	4b1d      	ldr	r3, [pc, #116]	; (800bd10 <NX7_PID_Ctrl+0x270>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	4a1d      	ldr	r2, [pc, #116]	; (800bd14 <NX7_PID_Ctrl+0x274>)
 800bca0:	6852      	ldr	r2, [r2, #4]
 800bca2:	4611      	mov	r1, r2
 800bca4:	4618      	mov	r0, r3
 800bca6:	f7f4 ffa3 	bl	8000bf0 <__aeabi_fsub>
 800bcaa:	4603      	mov	r3, r0
 800bcac:	f04f 0100 	mov.w	r1, #0
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f7f5 fa4f 	bl	8001154 <__aeabi_fcmple>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d003      	beq.n	800bcc4 <NX7_PID_Ctrl+0x224>
		{
			PID_Intake_State = Intake_Fresh;
 800bcbc:	4b23      	ldr	r3, [pc, #140]	; (800bd4c <NX7_PID_Ctrl+0x2ac>)
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	701a      	strb	r2, [r3, #0]
 800bcc2:	e138      	b.n	800bf36 <NX7_PID_Ctrl+0x496>
		}
		else if((TS-TC >= +2) && (TS-TC <= +20))
 800bcc4:	4b12      	ldr	r3, [pc, #72]	; (800bd10 <NX7_PID_Ctrl+0x270>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	4a12      	ldr	r2, [pc, #72]	; (800bd14 <NX7_PID_Ctrl+0x274>)
 800bcca:	6852      	ldr	r2, [r2, #4]
 800bccc:	4611      	mov	r1, r2
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f7f4 ff8e 	bl	8000bf0 <__aeabi_fsub>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800bcda:	4618      	mov	r0, r3
 800bcdc:	f7f5 fa44 	bl	8001168 <__aeabi_fcmpge>
 800bce0:	4603      	mov	r3, r0
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d036      	beq.n	800bd54 <NX7_PID_Ctrl+0x2b4>
 800bce6:	4b0a      	ldr	r3, [pc, #40]	; (800bd10 <NX7_PID_Ctrl+0x270>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	4a0a      	ldr	r2, [pc, #40]	; (800bd14 <NX7_PID_Ctrl+0x274>)
 800bcec:	6852      	ldr	r2, [r2, #4]
 800bcee:	4611      	mov	r1, r2
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f7f4 ff7d 	bl	8000bf0 <__aeabi_fsub>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	4915      	ldr	r1, [pc, #84]	; (800bd50 <NX7_PID_Ctrl+0x2b0>)
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f7f5 fa2a 	bl	8001154 <__aeabi_fcmple>
 800bd00:	4603      	mov	r3, r0
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d026      	beq.n	800bd54 <NX7_PID_Ctrl+0x2b4>
		{
			PID_Intake_State = Intake_Recycle;
 800bd06:	4b11      	ldr	r3, [pc, #68]	; (800bd4c <NX7_PID_Ctrl+0x2ac>)
 800bd08:	2201      	movs	r2, #1
 800bd0a:	701a      	strb	r2, [r3, #0]
 800bd0c:	e113      	b.n	800bf36 <NX7_PID_Ctrl+0x496>
 800bd0e:	bf00      	nop
 800bd10:	20000010 	.word	0x20000010
 800bd14:	200005a8 	.word	0x200005a8
 800bd18:	20000224 	.word	0x20000224
 800bd1c:	41200000 	.word	0x41200000
 800bd20:	20000234 	.word	0x20000234
 800bd24:	42200000 	.word	0x42200000
 800bd28:	41700000 	.word	0x41700000
 800bd2c:	42340000 	.word	0x42340000
 800bd30:	42480000 	.word	0x42480000
 800bd34:	20000228 	.word	0x20000228
 800bd38:	41c80000 	.word	0x41c80000
 800bd3c:	20000240 	.word	0x20000240
 800bd40:	40200000 	.word	0x40200000
 800bd44:	20000220 	.word	0x20000220
 800bd48:	c0200000 	.word	0xc0200000
 800bd4c:	200005a3 	.word	0x200005a3
 800bd50:	41a00000 	.word	0x41a00000
		}
		else if(TS-TC >= +25)
 800bd54:	4ba1      	ldr	r3, [pc, #644]	; (800bfdc <NX7_PID_Ctrl+0x53c>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	4aa1      	ldr	r2, [pc, #644]	; (800bfe0 <NX7_PID_Ctrl+0x540>)
 800bd5a:	6852      	ldr	r2, [r2, #4]
 800bd5c:	4611      	mov	r1, r2
 800bd5e:	4618      	mov	r0, r3
 800bd60:	f7f4 ff46 	bl	8000bf0 <__aeabi_fsub>
 800bd64:	4603      	mov	r3, r0
 800bd66:	499f      	ldr	r1, [pc, #636]	; (800bfe4 <NX7_PID_Ctrl+0x544>)
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f7f5 f9fd 	bl	8001168 <__aeabi_fcmpge>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	f000 80e0 	beq.w	800bf36 <NX7_PID_Ctrl+0x496>
		{
			PID_Intake_State = Intake_Fresh;
 800bd76:	4b9c      	ldr	r3, [pc, #624]	; (800bfe8 <NX7_PID_Ctrl+0x548>)
 800bd78:	2200      	movs	r2, #0
 800bd7a:	701a      	strb	r2, [r3, #0]
 800bd7c:	e0db      	b.n	800bf36 <NX7_PID_Ctrl+0x496>
		}
	}
	/* <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><> */
	else if(TS-TA < -2.5)
 800bd7e:	4b97      	ldr	r3, [pc, #604]	; (800bfdc <NX7_PID_Ctrl+0x53c>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	4a97      	ldr	r2, [pc, #604]	; (800bfe0 <NX7_PID_Ctrl+0x540>)
 800bd84:	68d2      	ldr	r2, [r2, #12]
 800bd86:	4611      	mov	r1, r2
 800bd88:	4618      	mov	r0, r3
 800bd8a:	f7f4 ff31 	bl	8000bf0 <__aeabi_fsub>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	4996      	ldr	r1, [pc, #600]	; (800bfec <NX7_PID_Ctrl+0x54c>)
 800bd92:	4618      	mov	r0, r3
 800bd94:	f7f5 f9d4 	bl	8001140 <__aeabi_fcmplt>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d02a      	beq.n	800bdf4 <NX7_PID_Ctrl+0x354>
	{
		if(TS-TC <= 0)
 800bd9e:	4b8f      	ldr	r3, [pc, #572]	; (800bfdc <NX7_PID_Ctrl+0x53c>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	4a8f      	ldr	r2, [pc, #572]	; (800bfe0 <NX7_PID_Ctrl+0x540>)
 800bda4:	6852      	ldr	r2, [r2, #4]
 800bda6:	4611      	mov	r1, r2
 800bda8:	4618      	mov	r0, r3
 800bdaa:	f7f4 ff21 	bl	8000bf0 <__aeabi_fsub>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	f04f 0100 	mov.w	r1, #0
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f7f5 f9cd 	bl	8001154 <__aeabi_fcmple>
 800bdba:	4603      	mov	r3, r0
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d003      	beq.n	800bdc8 <NX7_PID_Ctrl+0x328>
		{
			PID_Intake_State = Intake_Recycle;
 800bdc0:	4b89      	ldr	r3, [pc, #548]	; (800bfe8 <NX7_PID_Ctrl+0x548>)
 800bdc2:	2201      	movs	r2, #1
 800bdc4:	701a      	strb	r2, [r3, #0]
 800bdc6:	e0b6      	b.n	800bf36 <NX7_PID_Ctrl+0x496>
		}
		else if(TS-TC >= +2)
 800bdc8:	4b84      	ldr	r3, [pc, #528]	; (800bfdc <NX7_PID_Ctrl+0x53c>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	4a84      	ldr	r2, [pc, #528]	; (800bfe0 <NX7_PID_Ctrl+0x540>)
 800bdce:	6852      	ldr	r2, [r2, #4]
 800bdd0:	4611      	mov	r1, r2
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f7f4 ff0c 	bl	8000bf0 <__aeabi_fsub>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800bdde:	4618      	mov	r0, r3
 800bde0:	f7f5 f9c2 	bl	8001168 <__aeabi_fcmpge>
 800bde4:	4603      	mov	r3, r0
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	f000 80a5 	beq.w	800bf36 <NX7_PID_Ctrl+0x496>
		{
			PID_Intake_State = Intake_Fresh;
 800bdec:	4b7e      	ldr	r3, [pc, #504]	; (800bfe8 <NX7_PID_Ctrl+0x548>)
 800bdee:	2200      	movs	r2, #0
 800bdf0:	701a      	strb	r2, [r3, #0]
 800bdf2:	e0a0      	b.n	800bf36 <NX7_PID_Ctrl+0x496>
		}
	}
	/* <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><> */
	else if((TS-TA >= -2.5) && (TS-TA <= +2.5))
 800bdf4:	4b79      	ldr	r3, [pc, #484]	; (800bfdc <NX7_PID_Ctrl+0x53c>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	4a79      	ldr	r2, [pc, #484]	; (800bfe0 <NX7_PID_Ctrl+0x540>)
 800bdfa:	68d2      	ldr	r2, [r2, #12]
 800bdfc:	4611      	mov	r1, r2
 800bdfe:	4618      	mov	r0, r3
 800be00:	f7f4 fef6 	bl	8000bf0 <__aeabi_fsub>
 800be04:	4603      	mov	r3, r0
 800be06:	4979      	ldr	r1, [pc, #484]	; (800bfec <NX7_PID_Ctrl+0x54c>)
 800be08:	4618      	mov	r0, r3
 800be0a:	f7f5 f9ad 	bl	8001168 <__aeabi_fcmpge>
 800be0e:	4603      	mov	r3, r0
 800be10:	2b00      	cmp	r3, #0
 800be12:	f000 8090 	beq.w	800bf36 <NX7_PID_Ctrl+0x496>
 800be16:	4b71      	ldr	r3, [pc, #452]	; (800bfdc <NX7_PID_Ctrl+0x53c>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4a71      	ldr	r2, [pc, #452]	; (800bfe0 <NX7_PID_Ctrl+0x540>)
 800be1c:	68d2      	ldr	r2, [r2, #12]
 800be1e:	4611      	mov	r1, r2
 800be20:	4618      	mov	r0, r3
 800be22:	f7f4 fee5 	bl	8000bf0 <__aeabi_fsub>
 800be26:	4603      	mov	r3, r0
 800be28:	4971      	ldr	r1, [pc, #452]	; (800bff0 <NX7_PID_Ctrl+0x550>)
 800be2a:	4618      	mov	r0, r3
 800be2c:	f7f5 f992 	bl	8001154 <__aeabi_fcmple>
 800be30:	4603      	mov	r3, r0
 800be32:	2b00      	cmp	r3, #0
 800be34:	d07f      	beq.n	800bf36 <NX7_PID_Ctrl+0x496>
	{
		if(flag == +1)
 800be36:	4b6f      	ldr	r3, [pc, #444]	; (800bff4 <NX7_PID_Ctrl+0x554>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	2b01      	cmp	r3, #1
 800be3c:	d14d      	bne.n	800beda <NX7_PID_Ctrl+0x43a>
		{
			if(TS-TC <= 0)
 800be3e:	4b67      	ldr	r3, [pc, #412]	; (800bfdc <NX7_PID_Ctrl+0x53c>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	4a67      	ldr	r2, [pc, #412]	; (800bfe0 <NX7_PID_Ctrl+0x540>)
 800be44:	6852      	ldr	r2, [r2, #4]
 800be46:	4611      	mov	r1, r2
 800be48:	4618      	mov	r0, r3
 800be4a:	f7f4 fed1 	bl	8000bf0 <__aeabi_fsub>
 800be4e:	4603      	mov	r3, r0
 800be50:	f04f 0100 	mov.w	r1, #0
 800be54:	4618      	mov	r0, r3
 800be56:	f7f5 f97d 	bl	8001154 <__aeabi_fcmple>
 800be5a:	4603      	mov	r3, r0
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d003      	beq.n	800be68 <NX7_PID_Ctrl+0x3c8>
			{
				PID_Intake_State = Intake_Fresh;
 800be60:	4b61      	ldr	r3, [pc, #388]	; (800bfe8 <NX7_PID_Ctrl+0x548>)
 800be62:	2200      	movs	r2, #0
 800be64:	701a      	strb	r2, [r3, #0]
 800be66:	e066      	b.n	800bf36 <NX7_PID_Ctrl+0x496>
			}
			else if((TS-TC >= +2) && (TS-TC <= +20))
 800be68:	4b5c      	ldr	r3, [pc, #368]	; (800bfdc <NX7_PID_Ctrl+0x53c>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	4a5c      	ldr	r2, [pc, #368]	; (800bfe0 <NX7_PID_Ctrl+0x540>)
 800be6e:	6852      	ldr	r2, [r2, #4]
 800be70:	4611      	mov	r1, r2
 800be72:	4618      	mov	r0, r3
 800be74:	f7f4 febc 	bl	8000bf0 <__aeabi_fsub>
 800be78:	4603      	mov	r3, r0
 800be7a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800be7e:	4618      	mov	r0, r3
 800be80:	f7f5 f972 	bl	8001168 <__aeabi_fcmpge>
 800be84:	4603      	mov	r3, r0
 800be86:	2b00      	cmp	r3, #0
 800be88:	d013      	beq.n	800beb2 <NX7_PID_Ctrl+0x412>
 800be8a:	4b54      	ldr	r3, [pc, #336]	; (800bfdc <NX7_PID_Ctrl+0x53c>)
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	4a54      	ldr	r2, [pc, #336]	; (800bfe0 <NX7_PID_Ctrl+0x540>)
 800be90:	6852      	ldr	r2, [r2, #4]
 800be92:	4611      	mov	r1, r2
 800be94:	4618      	mov	r0, r3
 800be96:	f7f4 feab 	bl	8000bf0 <__aeabi_fsub>
 800be9a:	4603      	mov	r3, r0
 800be9c:	4956      	ldr	r1, [pc, #344]	; (800bff8 <NX7_PID_Ctrl+0x558>)
 800be9e:	4618      	mov	r0, r3
 800bea0:	f7f5 f958 	bl	8001154 <__aeabi_fcmple>
 800bea4:	4603      	mov	r3, r0
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d003      	beq.n	800beb2 <NX7_PID_Ctrl+0x412>
			{
				PID_Intake_State = Intake_Recycle;
 800beaa:	4b4f      	ldr	r3, [pc, #316]	; (800bfe8 <NX7_PID_Ctrl+0x548>)
 800beac:	2201      	movs	r2, #1
 800beae:	701a      	strb	r2, [r3, #0]
 800beb0:	e041      	b.n	800bf36 <NX7_PID_Ctrl+0x496>
			}
			else if(TS-TC >= +25)
 800beb2:	4b4a      	ldr	r3, [pc, #296]	; (800bfdc <NX7_PID_Ctrl+0x53c>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	4a4a      	ldr	r2, [pc, #296]	; (800bfe0 <NX7_PID_Ctrl+0x540>)
 800beb8:	6852      	ldr	r2, [r2, #4]
 800beba:	4611      	mov	r1, r2
 800bebc:	4618      	mov	r0, r3
 800bebe:	f7f4 fe97 	bl	8000bf0 <__aeabi_fsub>
 800bec2:	4603      	mov	r3, r0
 800bec4:	4947      	ldr	r1, [pc, #284]	; (800bfe4 <NX7_PID_Ctrl+0x544>)
 800bec6:	4618      	mov	r0, r3
 800bec8:	f7f5 f94e 	bl	8001168 <__aeabi_fcmpge>
 800becc:	4603      	mov	r3, r0
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d031      	beq.n	800bf36 <NX7_PID_Ctrl+0x496>
			{
				PID_Intake_State = Intake_Fresh;
 800bed2:	4b45      	ldr	r3, [pc, #276]	; (800bfe8 <NX7_PID_Ctrl+0x548>)
 800bed4:	2200      	movs	r2, #0
 800bed6:	701a      	strb	r2, [r3, #0]
 800bed8:	e02d      	b.n	800bf36 <NX7_PID_Ctrl+0x496>
			}
		}
		else if(flag == -1)
 800beda:	4b46      	ldr	r3, [pc, #280]	; (800bff4 <NX7_PID_Ctrl+0x554>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bee2:	d128      	bne.n	800bf36 <NX7_PID_Ctrl+0x496>
		{
			if(TS-TC <= 0)
 800bee4:	4b3d      	ldr	r3, [pc, #244]	; (800bfdc <NX7_PID_Ctrl+0x53c>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	4a3d      	ldr	r2, [pc, #244]	; (800bfe0 <NX7_PID_Ctrl+0x540>)
 800beea:	6852      	ldr	r2, [r2, #4]
 800beec:	4611      	mov	r1, r2
 800beee:	4618      	mov	r0, r3
 800bef0:	f7f4 fe7e 	bl	8000bf0 <__aeabi_fsub>
 800bef4:	4603      	mov	r3, r0
 800bef6:	f04f 0100 	mov.w	r1, #0
 800befa:	4618      	mov	r0, r3
 800befc:	f7f5 f92a 	bl	8001154 <__aeabi_fcmple>
 800bf00:	4603      	mov	r3, r0
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d003      	beq.n	800bf0e <NX7_PID_Ctrl+0x46e>
			{
				PID_Intake_State = Intake_Recycle;
 800bf06:	4b38      	ldr	r3, [pc, #224]	; (800bfe8 <NX7_PID_Ctrl+0x548>)
 800bf08:	2201      	movs	r2, #1
 800bf0a:	701a      	strb	r2, [r3, #0]
 800bf0c:	e013      	b.n	800bf36 <NX7_PID_Ctrl+0x496>
			}
			else if(TS-TC >= +2)
 800bf0e:	4b33      	ldr	r3, [pc, #204]	; (800bfdc <NX7_PID_Ctrl+0x53c>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	4a33      	ldr	r2, [pc, #204]	; (800bfe0 <NX7_PID_Ctrl+0x540>)
 800bf14:	6852      	ldr	r2, [r2, #4]
 800bf16:	4611      	mov	r1, r2
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f7f4 fe69 	bl	8000bf0 <__aeabi_fsub>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800bf24:	4618      	mov	r0, r3
 800bf26:	f7f5 f91f 	bl	8001168 <__aeabi_fcmpge>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d002      	beq.n	800bf36 <NX7_PID_Ctrl+0x496>
			{
				PID_Intake_State = Intake_Fresh;
 800bf30:	4b2d      	ldr	r3, [pc, #180]	; (800bfe8 <NX7_PID_Ctrl+0x548>)
 800bf32:	2200      	movs	r2, #0
 800bf34:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	/* <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><> */
	if(Intake_Auto_Ctrl_State == Auto_Ctrl_ON)
 800bf36:	4b31      	ldr	r3, [pc, #196]	; (800bffc <NX7_PID_Ctrl+0x55c>)
 800bf38:	781b      	ldrb	r3, [r3, #0]
 800bf3a:	2b01      	cmp	r3, #1
 800bf3c:	d103      	bne.n	800bf46 <NX7_PID_Ctrl+0x4a6>
	{
		NX7_Intake_State = PID_Intake_State;
 800bf3e:	4b2a      	ldr	r3, [pc, #168]	; (800bfe8 <NX7_PID_Ctrl+0x548>)
 800bf40:	781a      	ldrb	r2, [r3, #0]
 800bf42:	4b2f      	ldr	r3, [pc, #188]	; (800c000 <NX7_PID_Ctrl+0x560>)
 800bf44:	701a      	strb	r2, [r3, #0]
	}

/* -------------------------------------------------------- <Mode_State_Ctrl> */
	/* <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><> */
	if(TS-TA > +2.5)
 800bf46:	4b25      	ldr	r3, [pc, #148]	; (800bfdc <NX7_PID_Ctrl+0x53c>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	4a25      	ldr	r2, [pc, #148]	; (800bfe0 <NX7_PID_Ctrl+0x540>)
 800bf4c:	68d2      	ldr	r2, [r2, #12]
 800bf4e:	4611      	mov	r1, r2
 800bf50:	4618      	mov	r0, r3
 800bf52:	f7f4 fe4d 	bl	8000bf0 <__aeabi_fsub>
 800bf56:	4603      	mov	r3, r0
 800bf58:	4925      	ldr	r1, [pc, #148]	; (800bff0 <NX7_PID_Ctrl+0x550>)
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f7f5 f90e 	bl	800117c <__aeabi_fcmpgt>
 800bf60:	4603      	mov	r3, r0
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	f000 80b2 	beq.w	800c0cc <NX7_PID_Ctrl+0x62c>
	{
		if(TS-TC <= -5)
 800bf68:	4b1c      	ldr	r3, [pc, #112]	; (800bfdc <NX7_PID_Ctrl+0x53c>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	4a1c      	ldr	r2, [pc, #112]	; (800bfe0 <NX7_PID_Ctrl+0x540>)
 800bf6e:	6852      	ldr	r2, [r2, #4]
 800bf70:	4611      	mov	r1, r2
 800bf72:	4618      	mov	r0, r3
 800bf74:	f7f4 fe3c 	bl	8000bf0 <__aeabi_fsub>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	4922      	ldr	r1, [pc, #136]	; (800c004 <NX7_PID_Ctrl+0x564>)
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f7f5 f8e9 	bl	8001154 <__aeabi_fcmple>
 800bf82:	4603      	mov	r3, r0
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d003      	beq.n	800bf90 <NX7_PID_Ctrl+0x4f0>
		{
			PID_Mode_State = Mode_Foot_Def;
 800bf88:	4b1f      	ldr	r3, [pc, #124]	; (800c008 <NX7_PID_Ctrl+0x568>)
 800bf8a:	2203      	movs	r2, #3
 800bf8c:	701a      	strb	r2, [r3, #0]
 800bf8e:	e223      	b.n	800c3d8 <NX7_PID_Ctrl+0x938>
		}
		else if((TS-TC >= -4) && (TS-TC <= -2))
 800bf90:	4b12      	ldr	r3, [pc, #72]	; (800bfdc <NX7_PID_Ctrl+0x53c>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	4a12      	ldr	r2, [pc, #72]	; (800bfe0 <NX7_PID_Ctrl+0x540>)
 800bf96:	6852      	ldr	r2, [r2, #4]
 800bf98:	4611      	mov	r1, r2
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f7f4 fe28 	bl	8000bf0 <__aeabi_fsub>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	491a      	ldr	r1, [pc, #104]	; (800c00c <NX7_PID_Ctrl+0x56c>)
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f7f5 f8df 	bl	8001168 <__aeabi_fcmpge>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d02f      	beq.n	800c010 <NX7_PID_Ctrl+0x570>
 800bfb0:	4b0a      	ldr	r3, [pc, #40]	; (800bfdc <NX7_PID_Ctrl+0x53c>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	4a0a      	ldr	r2, [pc, #40]	; (800bfe0 <NX7_PID_Ctrl+0x540>)
 800bfb6:	6852      	ldr	r2, [r2, #4]
 800bfb8:	4611      	mov	r1, r2
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f7f4 fe18 	bl	8000bf0 <__aeabi_fsub>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f7f5 f8c4 	bl	8001154 <__aeabi_fcmple>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d01e      	beq.n	800c010 <NX7_PID_Ctrl+0x570>
		{
			PID_Mode_State = Mode_Face_Foot;
 800bfd2:	4b0d      	ldr	r3, [pc, #52]	; (800c008 <NX7_PID_Ctrl+0x568>)
 800bfd4:	2201      	movs	r2, #1
 800bfd6:	701a      	strb	r2, [r3, #0]
 800bfd8:	e1fe      	b.n	800c3d8 <NX7_PID_Ctrl+0x938>
 800bfda:	bf00      	nop
 800bfdc:	20000010 	.word	0x20000010
 800bfe0:	200005a8 	.word	0x200005a8
 800bfe4:	41c80000 	.word	0x41c80000
 800bfe8:	200005a3 	.word	0x200005a3
 800bfec:	c0200000 	.word	0xc0200000
 800bff0:	40200000 	.word	0x40200000
 800bff4:	20000220 	.word	0x20000220
 800bff8:	41a00000 	.word	0x41a00000
 800bffc:	2000000a 	.word	0x2000000a
 800c000:	2000020b 	.word	0x2000020b
 800c004:	c0a00000 	.word	0xc0a00000
 800c008:	200005a1 	.word	0x200005a1
 800c00c:	c0800000 	.word	0xc0800000
		}
		else if((TS-TC >= -1) && (TS-TC <= +2))
 800c010:	4ba0      	ldr	r3, [pc, #640]	; (800c294 <NX7_PID_Ctrl+0x7f4>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	4aa0      	ldr	r2, [pc, #640]	; (800c298 <NX7_PID_Ctrl+0x7f8>)
 800c016:	6852      	ldr	r2, [r2, #4]
 800c018:	4611      	mov	r1, r2
 800c01a:	4618      	mov	r0, r3
 800c01c:	f7f4 fde8 	bl	8000bf0 <__aeabi_fsub>
 800c020:	4603      	mov	r3, r0
 800c022:	499e      	ldr	r1, [pc, #632]	; (800c29c <NX7_PID_Ctrl+0x7fc>)
 800c024:	4618      	mov	r0, r3
 800c026:	f7f5 f89f 	bl	8001168 <__aeabi_fcmpge>
 800c02a:	4603      	mov	r3, r0
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d014      	beq.n	800c05a <NX7_PID_Ctrl+0x5ba>
 800c030:	4b98      	ldr	r3, [pc, #608]	; (800c294 <NX7_PID_Ctrl+0x7f4>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	4a98      	ldr	r2, [pc, #608]	; (800c298 <NX7_PID_Ctrl+0x7f8>)
 800c036:	6852      	ldr	r2, [r2, #4]
 800c038:	4611      	mov	r1, r2
 800c03a:	4618      	mov	r0, r3
 800c03c:	f7f4 fdd8 	bl	8000bf0 <__aeabi_fsub>
 800c040:	4603      	mov	r3, r0
 800c042:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c046:	4618      	mov	r0, r3
 800c048:	f7f5 f884 	bl	8001154 <__aeabi_fcmple>
 800c04c:	4603      	mov	r3, r0
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d003      	beq.n	800c05a <NX7_PID_Ctrl+0x5ba>
		{
			PID_Mode_State = Mode_Foot;
 800c052:	4b93      	ldr	r3, [pc, #588]	; (800c2a0 <NX7_PID_Ctrl+0x800>)
 800c054:	2202      	movs	r2, #2
 800c056:	701a      	strb	r2, [r3, #0]
 800c058:	e1be      	b.n	800c3d8 <NX7_PID_Ctrl+0x938>
		}
		else if((TS-TC >= +3) && (TS-TC <= +20))
 800c05a:	4b8e      	ldr	r3, [pc, #568]	; (800c294 <NX7_PID_Ctrl+0x7f4>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	4a8e      	ldr	r2, [pc, #568]	; (800c298 <NX7_PID_Ctrl+0x7f8>)
 800c060:	6852      	ldr	r2, [r2, #4]
 800c062:	4611      	mov	r1, r2
 800c064:	4618      	mov	r0, r3
 800c066:	f7f4 fdc3 	bl	8000bf0 <__aeabi_fsub>
 800c06a:	4603      	mov	r3, r0
 800c06c:	498d      	ldr	r1, [pc, #564]	; (800c2a4 <NX7_PID_Ctrl+0x804>)
 800c06e:	4618      	mov	r0, r3
 800c070:	f7f5 f87a 	bl	8001168 <__aeabi_fcmpge>
 800c074:	4603      	mov	r3, r0
 800c076:	2b00      	cmp	r3, #0
 800c078:	d013      	beq.n	800c0a2 <NX7_PID_Ctrl+0x602>
 800c07a:	4b86      	ldr	r3, [pc, #536]	; (800c294 <NX7_PID_Ctrl+0x7f4>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	4a86      	ldr	r2, [pc, #536]	; (800c298 <NX7_PID_Ctrl+0x7f8>)
 800c080:	6852      	ldr	r2, [r2, #4]
 800c082:	4611      	mov	r1, r2
 800c084:	4618      	mov	r0, r3
 800c086:	f7f4 fdb3 	bl	8000bf0 <__aeabi_fsub>
 800c08a:	4603      	mov	r3, r0
 800c08c:	4986      	ldr	r1, [pc, #536]	; (800c2a8 <NX7_PID_Ctrl+0x808>)
 800c08e:	4618      	mov	r0, r3
 800c090:	f7f5 f860 	bl	8001154 <__aeabi_fcmple>
 800c094:	4603      	mov	r3, r0
 800c096:	2b00      	cmp	r3, #0
 800c098:	d003      	beq.n	800c0a2 <NX7_PID_Ctrl+0x602>
		{
			PID_Mode_State = Mode_Face_Foot;
 800c09a:	4b81      	ldr	r3, [pc, #516]	; (800c2a0 <NX7_PID_Ctrl+0x800>)
 800c09c:	2201      	movs	r2, #1
 800c09e:	701a      	strb	r2, [r3, #0]
 800c0a0:	e19a      	b.n	800c3d8 <NX7_PID_Ctrl+0x938>
		}
		else if(TS-TC >= +25)
 800c0a2:	4b7c      	ldr	r3, [pc, #496]	; (800c294 <NX7_PID_Ctrl+0x7f4>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	4a7c      	ldr	r2, [pc, #496]	; (800c298 <NX7_PID_Ctrl+0x7f8>)
 800c0a8:	6852      	ldr	r2, [r2, #4]
 800c0aa:	4611      	mov	r1, r2
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	f7f4 fd9f 	bl	8000bf0 <__aeabi_fsub>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	497d      	ldr	r1, [pc, #500]	; (800c2ac <NX7_PID_Ctrl+0x80c>)
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	f7f5 f856 	bl	8001168 <__aeabi_fcmpge>
 800c0bc:	4603      	mov	r3, r0
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	f000 818a 	beq.w	800c3d8 <NX7_PID_Ctrl+0x938>
		{
			PID_Mode_State = Mode_Foot;
 800c0c4:	4b76      	ldr	r3, [pc, #472]	; (800c2a0 <NX7_PID_Ctrl+0x800>)
 800c0c6:	2202      	movs	r2, #2
 800c0c8:	701a      	strb	r2, [r3, #0]
 800c0ca:	e185      	b.n	800c3d8 <NX7_PID_Ctrl+0x938>
		}
	}
	/* <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><> */
	else if(TS-TA < -2.5)
 800c0cc:	4b71      	ldr	r3, [pc, #452]	; (800c294 <NX7_PID_Ctrl+0x7f4>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	4a71      	ldr	r2, [pc, #452]	; (800c298 <NX7_PID_Ctrl+0x7f8>)
 800c0d2:	68d2      	ldr	r2, [r2, #12]
 800c0d4:	4611      	mov	r1, r2
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f7f4 fd8a 	bl	8000bf0 <__aeabi_fsub>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	4974      	ldr	r1, [pc, #464]	; (800c2b0 <NX7_PID_Ctrl+0x810>)
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f7f5 f82d 	bl	8001140 <__aeabi_fcmplt>
 800c0e6:	4603      	mov	r3, r0
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d04e      	beq.n	800c18a <NX7_PID_Ctrl+0x6ea>
	{
		if(TS-TC <= -2)
 800c0ec:	4b69      	ldr	r3, [pc, #420]	; (800c294 <NX7_PID_Ctrl+0x7f4>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	4a69      	ldr	r2, [pc, #420]	; (800c298 <NX7_PID_Ctrl+0x7f8>)
 800c0f2:	6852      	ldr	r2, [r2, #4]
 800c0f4:	4611      	mov	r1, r2
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f7f4 fd7a 	bl	8000bf0 <__aeabi_fsub>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800c102:	4618      	mov	r0, r3
 800c104:	f7f5 f826 	bl	8001154 <__aeabi_fcmple>
 800c108:	4603      	mov	r3, r0
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d003      	beq.n	800c116 <NX7_PID_Ctrl+0x676>
		{
			PID_Mode_State = Mode_Face;
 800c10e:	4b64      	ldr	r3, [pc, #400]	; (800c2a0 <NX7_PID_Ctrl+0x800>)
 800c110:	2200      	movs	r2, #0
 800c112:	701a      	strb	r2, [r3, #0]
 800c114:	e160      	b.n	800c3d8 <NX7_PID_Ctrl+0x938>
		}
		else if((TS-TC >= -1) && (TS-TC <= +3))
 800c116:	4b5f      	ldr	r3, [pc, #380]	; (800c294 <NX7_PID_Ctrl+0x7f4>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	4a5f      	ldr	r2, [pc, #380]	; (800c298 <NX7_PID_Ctrl+0x7f8>)
 800c11c:	6852      	ldr	r2, [r2, #4]
 800c11e:	4611      	mov	r1, r2
 800c120:	4618      	mov	r0, r3
 800c122:	f7f4 fd65 	bl	8000bf0 <__aeabi_fsub>
 800c126:	4603      	mov	r3, r0
 800c128:	495c      	ldr	r1, [pc, #368]	; (800c29c <NX7_PID_Ctrl+0x7fc>)
 800c12a:	4618      	mov	r0, r3
 800c12c:	f7f5 f81c 	bl	8001168 <__aeabi_fcmpge>
 800c130:	4603      	mov	r3, r0
 800c132:	2b00      	cmp	r3, #0
 800c134:	d013      	beq.n	800c15e <NX7_PID_Ctrl+0x6be>
 800c136:	4b57      	ldr	r3, [pc, #348]	; (800c294 <NX7_PID_Ctrl+0x7f4>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	4a57      	ldr	r2, [pc, #348]	; (800c298 <NX7_PID_Ctrl+0x7f8>)
 800c13c:	6852      	ldr	r2, [r2, #4]
 800c13e:	4611      	mov	r1, r2
 800c140:	4618      	mov	r0, r3
 800c142:	f7f4 fd55 	bl	8000bf0 <__aeabi_fsub>
 800c146:	4603      	mov	r3, r0
 800c148:	4956      	ldr	r1, [pc, #344]	; (800c2a4 <NX7_PID_Ctrl+0x804>)
 800c14a:	4618      	mov	r0, r3
 800c14c:	f7f5 f802 	bl	8001154 <__aeabi_fcmple>
 800c150:	4603      	mov	r3, r0
 800c152:	2b00      	cmp	r3, #0
 800c154:	d003      	beq.n	800c15e <NX7_PID_Ctrl+0x6be>
		{
			PID_Mode_State = Mode_Face_Foot;
 800c156:	4b52      	ldr	r3, [pc, #328]	; (800c2a0 <NX7_PID_Ctrl+0x800>)
 800c158:	2201      	movs	r2, #1
 800c15a:	701a      	strb	r2, [r3, #0]
 800c15c:	e13c      	b.n	800c3d8 <NX7_PID_Ctrl+0x938>
		}
		else if(TS-TC >= +4)
 800c15e:	4b4d      	ldr	r3, [pc, #308]	; (800c294 <NX7_PID_Ctrl+0x7f4>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	4a4d      	ldr	r2, [pc, #308]	; (800c298 <NX7_PID_Ctrl+0x7f8>)
 800c164:	6852      	ldr	r2, [r2, #4]
 800c166:	4611      	mov	r1, r2
 800c168:	4618      	mov	r0, r3
 800c16a:	f7f4 fd41 	bl	8000bf0 <__aeabi_fsub>
 800c16e:	4603      	mov	r3, r0
 800c170:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800c174:	4618      	mov	r0, r3
 800c176:	f7f4 fff7 	bl	8001168 <__aeabi_fcmpge>
 800c17a:	4603      	mov	r3, r0
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	f000 812b 	beq.w	800c3d8 <NX7_PID_Ctrl+0x938>
		{
			PID_Mode_State = Mode_Foot_Def;
 800c182:	4b47      	ldr	r3, [pc, #284]	; (800c2a0 <NX7_PID_Ctrl+0x800>)
 800c184:	2203      	movs	r2, #3
 800c186:	701a      	strb	r2, [r3, #0]
 800c188:	e126      	b.n	800c3d8 <NX7_PID_Ctrl+0x938>
		}
	}
	/* <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><> */
	else if((TS-TA >= -2.5) && (TS-TA <= +2.5))
 800c18a:	4b42      	ldr	r3, [pc, #264]	; (800c294 <NX7_PID_Ctrl+0x7f4>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	4a42      	ldr	r2, [pc, #264]	; (800c298 <NX7_PID_Ctrl+0x7f8>)
 800c190:	68d2      	ldr	r2, [r2, #12]
 800c192:	4611      	mov	r1, r2
 800c194:	4618      	mov	r0, r3
 800c196:	f7f4 fd2b 	bl	8000bf0 <__aeabi_fsub>
 800c19a:	4603      	mov	r3, r0
 800c19c:	4944      	ldr	r1, [pc, #272]	; (800c2b0 <NX7_PID_Ctrl+0x810>)
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f7f4 ffe2 	bl	8001168 <__aeabi_fcmpge>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	f000 8116 	beq.w	800c3d8 <NX7_PID_Ctrl+0x938>
 800c1ac:	4b39      	ldr	r3, [pc, #228]	; (800c294 <NX7_PID_Ctrl+0x7f4>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	4a39      	ldr	r2, [pc, #228]	; (800c298 <NX7_PID_Ctrl+0x7f8>)
 800c1b2:	68d2      	ldr	r2, [r2, #12]
 800c1b4:	4611      	mov	r1, r2
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f7f4 fd1a 	bl	8000bf0 <__aeabi_fsub>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	493d      	ldr	r1, [pc, #244]	; (800c2b4 <NX7_PID_Ctrl+0x814>)
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f7f4 ffc7 	bl	8001154 <__aeabi_fcmple>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	f000 8105 	beq.w	800c3d8 <NX7_PID_Ctrl+0x938>
	{
		if(flag == +1)
 800c1ce:	4b3a      	ldr	r3, [pc, #232]	; (800c2b8 <NX7_PID_Ctrl+0x818>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	2b01      	cmp	r3, #1
 800c1d4:	f040 80ae 	bne.w	800c334 <NX7_PID_Ctrl+0x894>
		{
			if(TS-TC <= -5)
 800c1d8:	4b2e      	ldr	r3, [pc, #184]	; (800c294 <NX7_PID_Ctrl+0x7f4>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	4a2e      	ldr	r2, [pc, #184]	; (800c298 <NX7_PID_Ctrl+0x7f8>)
 800c1de:	6852      	ldr	r2, [r2, #4]
 800c1e0:	4611      	mov	r1, r2
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f7f4 fd04 	bl	8000bf0 <__aeabi_fsub>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	4934      	ldr	r1, [pc, #208]	; (800c2bc <NX7_PID_Ctrl+0x81c>)
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f7f4 ffb1 	bl	8001154 <__aeabi_fcmple>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d003      	beq.n	800c200 <NX7_PID_Ctrl+0x760>
			{
				PID_Mode_State = Mode_Foot_Def;
 800c1f8:	4b29      	ldr	r3, [pc, #164]	; (800c2a0 <NX7_PID_Ctrl+0x800>)
 800c1fa:	2203      	movs	r2, #3
 800c1fc:	701a      	strb	r2, [r3, #0]
 800c1fe:	e0eb      	b.n	800c3d8 <NX7_PID_Ctrl+0x938>
			}
			else if((TS-TC >= -4) && (TS-TC <= -2))
 800c200:	4b24      	ldr	r3, [pc, #144]	; (800c294 <NX7_PID_Ctrl+0x7f4>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	4a24      	ldr	r2, [pc, #144]	; (800c298 <NX7_PID_Ctrl+0x7f8>)
 800c206:	6852      	ldr	r2, [r2, #4]
 800c208:	4611      	mov	r1, r2
 800c20a:	4618      	mov	r0, r3
 800c20c:	f7f4 fcf0 	bl	8000bf0 <__aeabi_fsub>
 800c210:	4603      	mov	r3, r0
 800c212:	492b      	ldr	r1, [pc, #172]	; (800c2c0 <NX7_PID_Ctrl+0x820>)
 800c214:	4618      	mov	r0, r3
 800c216:	f7f4 ffa7 	bl	8001168 <__aeabi_fcmpge>
 800c21a:	4603      	mov	r3, r0
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d014      	beq.n	800c24a <NX7_PID_Ctrl+0x7aa>
 800c220:	4b1c      	ldr	r3, [pc, #112]	; (800c294 <NX7_PID_Ctrl+0x7f4>)
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	4a1c      	ldr	r2, [pc, #112]	; (800c298 <NX7_PID_Ctrl+0x7f8>)
 800c226:	6852      	ldr	r2, [r2, #4]
 800c228:	4611      	mov	r1, r2
 800c22a:	4618      	mov	r0, r3
 800c22c:	f7f4 fce0 	bl	8000bf0 <__aeabi_fsub>
 800c230:	4603      	mov	r3, r0
 800c232:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800c236:	4618      	mov	r0, r3
 800c238:	f7f4 ff8c 	bl	8001154 <__aeabi_fcmple>
 800c23c:	4603      	mov	r3, r0
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d003      	beq.n	800c24a <NX7_PID_Ctrl+0x7aa>
			{
				PID_Mode_State = Mode_Face_Foot;
 800c242:	4b17      	ldr	r3, [pc, #92]	; (800c2a0 <NX7_PID_Ctrl+0x800>)
 800c244:	2201      	movs	r2, #1
 800c246:	701a      	strb	r2, [r3, #0]
 800c248:	e0c6      	b.n	800c3d8 <NX7_PID_Ctrl+0x938>
			}
			else if((TS-TC >= -1) && (TS-TC <= +2))
 800c24a:	4b12      	ldr	r3, [pc, #72]	; (800c294 <NX7_PID_Ctrl+0x7f4>)
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	4a12      	ldr	r2, [pc, #72]	; (800c298 <NX7_PID_Ctrl+0x7f8>)
 800c250:	6852      	ldr	r2, [r2, #4]
 800c252:	4611      	mov	r1, r2
 800c254:	4618      	mov	r0, r3
 800c256:	f7f4 fccb 	bl	8000bf0 <__aeabi_fsub>
 800c25a:	4603      	mov	r3, r0
 800c25c:	490f      	ldr	r1, [pc, #60]	; (800c29c <NX7_PID_Ctrl+0x7fc>)
 800c25e:	4618      	mov	r0, r3
 800c260:	f7f4 ff82 	bl	8001168 <__aeabi_fcmpge>
 800c264:	4603      	mov	r3, r0
 800c266:	2b00      	cmp	r3, #0
 800c268:	d02c      	beq.n	800c2c4 <NX7_PID_Ctrl+0x824>
 800c26a:	4b0a      	ldr	r3, [pc, #40]	; (800c294 <NX7_PID_Ctrl+0x7f4>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	4a0a      	ldr	r2, [pc, #40]	; (800c298 <NX7_PID_Ctrl+0x7f8>)
 800c270:	6852      	ldr	r2, [r2, #4]
 800c272:	4611      	mov	r1, r2
 800c274:	4618      	mov	r0, r3
 800c276:	f7f4 fcbb 	bl	8000bf0 <__aeabi_fsub>
 800c27a:	4603      	mov	r3, r0
 800c27c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c280:	4618      	mov	r0, r3
 800c282:	f7f4 ff67 	bl	8001154 <__aeabi_fcmple>
 800c286:	4603      	mov	r3, r0
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d01b      	beq.n	800c2c4 <NX7_PID_Ctrl+0x824>
			{
				PID_Mode_State = Mode_Foot;
 800c28c:	4b04      	ldr	r3, [pc, #16]	; (800c2a0 <NX7_PID_Ctrl+0x800>)
 800c28e:	2202      	movs	r2, #2
 800c290:	701a      	strb	r2, [r3, #0]
 800c292:	e0a1      	b.n	800c3d8 <NX7_PID_Ctrl+0x938>
 800c294:	20000010 	.word	0x20000010
 800c298:	200005a8 	.word	0x200005a8
 800c29c:	bf800000 	.word	0xbf800000
 800c2a0:	200005a1 	.word	0x200005a1
 800c2a4:	40400000 	.word	0x40400000
 800c2a8:	41a00000 	.word	0x41a00000
 800c2ac:	41c80000 	.word	0x41c80000
 800c2b0:	c0200000 	.word	0xc0200000
 800c2b4:	40200000 	.word	0x40200000
 800c2b8:	20000220 	.word	0x20000220
 800c2bc:	c0a00000 	.word	0xc0a00000
 800c2c0:	c0800000 	.word	0xc0800000
			}
			else if((TS-TC >= +3) && (TS-TC <= +20))
 800c2c4:	4b92      	ldr	r3, [pc, #584]	; (800c510 <NX7_PID_Ctrl+0xa70>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	4a92      	ldr	r2, [pc, #584]	; (800c514 <NX7_PID_Ctrl+0xa74>)
 800c2ca:	6852      	ldr	r2, [r2, #4]
 800c2cc:	4611      	mov	r1, r2
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	f7f4 fc8e 	bl	8000bf0 <__aeabi_fsub>
 800c2d4:	4603      	mov	r3, r0
 800c2d6:	4990      	ldr	r1, [pc, #576]	; (800c518 <NX7_PID_Ctrl+0xa78>)
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f7f4 ff45 	bl	8001168 <__aeabi_fcmpge>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d013      	beq.n	800c30c <NX7_PID_Ctrl+0x86c>
 800c2e4:	4b8a      	ldr	r3, [pc, #552]	; (800c510 <NX7_PID_Ctrl+0xa70>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	4a8a      	ldr	r2, [pc, #552]	; (800c514 <NX7_PID_Ctrl+0xa74>)
 800c2ea:	6852      	ldr	r2, [r2, #4]
 800c2ec:	4611      	mov	r1, r2
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f7f4 fc7e 	bl	8000bf0 <__aeabi_fsub>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	4989      	ldr	r1, [pc, #548]	; (800c51c <NX7_PID_Ctrl+0xa7c>)
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f7f4 ff2b 	bl	8001154 <__aeabi_fcmple>
 800c2fe:	4603      	mov	r3, r0
 800c300:	2b00      	cmp	r3, #0
 800c302:	d003      	beq.n	800c30c <NX7_PID_Ctrl+0x86c>
			{
				PID_Mode_State = Mode_Face_Foot;
 800c304:	4b86      	ldr	r3, [pc, #536]	; (800c520 <NX7_PID_Ctrl+0xa80>)
 800c306:	2201      	movs	r2, #1
 800c308:	701a      	strb	r2, [r3, #0]
 800c30a:	e065      	b.n	800c3d8 <NX7_PID_Ctrl+0x938>
			}
			else if(TS-TC >= +25)
 800c30c:	4b80      	ldr	r3, [pc, #512]	; (800c510 <NX7_PID_Ctrl+0xa70>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	4a80      	ldr	r2, [pc, #512]	; (800c514 <NX7_PID_Ctrl+0xa74>)
 800c312:	6852      	ldr	r2, [r2, #4]
 800c314:	4611      	mov	r1, r2
 800c316:	4618      	mov	r0, r3
 800c318:	f7f4 fc6a 	bl	8000bf0 <__aeabi_fsub>
 800c31c:	4603      	mov	r3, r0
 800c31e:	4981      	ldr	r1, [pc, #516]	; (800c524 <NX7_PID_Ctrl+0xa84>)
 800c320:	4618      	mov	r0, r3
 800c322:	f7f4 ff21 	bl	8001168 <__aeabi_fcmpge>
 800c326:	4603      	mov	r3, r0
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d055      	beq.n	800c3d8 <NX7_PID_Ctrl+0x938>
			{
				PID_Mode_State = Mode_Foot;
 800c32c:	4b7c      	ldr	r3, [pc, #496]	; (800c520 <NX7_PID_Ctrl+0xa80>)
 800c32e:	2202      	movs	r2, #2
 800c330:	701a      	strb	r2, [r3, #0]
 800c332:	e051      	b.n	800c3d8 <NX7_PID_Ctrl+0x938>
			}
		}
		else if(flag == -1)
 800c334:	4b7c      	ldr	r3, [pc, #496]	; (800c528 <NX7_PID_Ctrl+0xa88>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c33c:	d14c      	bne.n	800c3d8 <NX7_PID_Ctrl+0x938>
		{
			if(TS-TC <= -2)
 800c33e:	4b74      	ldr	r3, [pc, #464]	; (800c510 <NX7_PID_Ctrl+0xa70>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	4a74      	ldr	r2, [pc, #464]	; (800c514 <NX7_PID_Ctrl+0xa74>)
 800c344:	6852      	ldr	r2, [r2, #4]
 800c346:	4611      	mov	r1, r2
 800c348:	4618      	mov	r0, r3
 800c34a:	f7f4 fc51 	bl	8000bf0 <__aeabi_fsub>
 800c34e:	4603      	mov	r3, r0
 800c350:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800c354:	4618      	mov	r0, r3
 800c356:	f7f4 fefd 	bl	8001154 <__aeabi_fcmple>
 800c35a:	4603      	mov	r3, r0
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d003      	beq.n	800c368 <NX7_PID_Ctrl+0x8c8>
			{
				PID_Mode_State = Mode_Face;
 800c360:	4b6f      	ldr	r3, [pc, #444]	; (800c520 <NX7_PID_Ctrl+0xa80>)
 800c362:	2200      	movs	r2, #0
 800c364:	701a      	strb	r2, [r3, #0]
 800c366:	e037      	b.n	800c3d8 <NX7_PID_Ctrl+0x938>
			}
			else if((TS-TC >= -1) && (TS-TC <= +3))
 800c368:	4b69      	ldr	r3, [pc, #420]	; (800c510 <NX7_PID_Ctrl+0xa70>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	4a69      	ldr	r2, [pc, #420]	; (800c514 <NX7_PID_Ctrl+0xa74>)
 800c36e:	6852      	ldr	r2, [r2, #4]
 800c370:	4611      	mov	r1, r2
 800c372:	4618      	mov	r0, r3
 800c374:	f7f4 fc3c 	bl	8000bf0 <__aeabi_fsub>
 800c378:	4603      	mov	r3, r0
 800c37a:	496c      	ldr	r1, [pc, #432]	; (800c52c <NX7_PID_Ctrl+0xa8c>)
 800c37c:	4618      	mov	r0, r3
 800c37e:	f7f4 fef3 	bl	8001168 <__aeabi_fcmpge>
 800c382:	4603      	mov	r3, r0
 800c384:	2b00      	cmp	r3, #0
 800c386:	d013      	beq.n	800c3b0 <NX7_PID_Ctrl+0x910>
 800c388:	4b61      	ldr	r3, [pc, #388]	; (800c510 <NX7_PID_Ctrl+0xa70>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	4a61      	ldr	r2, [pc, #388]	; (800c514 <NX7_PID_Ctrl+0xa74>)
 800c38e:	6852      	ldr	r2, [r2, #4]
 800c390:	4611      	mov	r1, r2
 800c392:	4618      	mov	r0, r3
 800c394:	f7f4 fc2c 	bl	8000bf0 <__aeabi_fsub>
 800c398:	4603      	mov	r3, r0
 800c39a:	495f      	ldr	r1, [pc, #380]	; (800c518 <NX7_PID_Ctrl+0xa78>)
 800c39c:	4618      	mov	r0, r3
 800c39e:	f7f4 fed9 	bl	8001154 <__aeabi_fcmple>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d003      	beq.n	800c3b0 <NX7_PID_Ctrl+0x910>
			{
				PID_Mode_State = Mode_Face_Foot;
 800c3a8:	4b5d      	ldr	r3, [pc, #372]	; (800c520 <NX7_PID_Ctrl+0xa80>)
 800c3aa:	2201      	movs	r2, #1
 800c3ac:	701a      	strb	r2, [r3, #0]
 800c3ae:	e013      	b.n	800c3d8 <NX7_PID_Ctrl+0x938>
			}
			else if(TS-TC >= +4)
 800c3b0:	4b57      	ldr	r3, [pc, #348]	; (800c510 <NX7_PID_Ctrl+0xa70>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	4a57      	ldr	r2, [pc, #348]	; (800c514 <NX7_PID_Ctrl+0xa74>)
 800c3b6:	6852      	ldr	r2, [r2, #4]
 800c3b8:	4611      	mov	r1, r2
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f7f4 fc18 	bl	8000bf0 <__aeabi_fsub>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f7f4 fece 	bl	8001168 <__aeabi_fcmpge>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d002      	beq.n	800c3d8 <NX7_PID_Ctrl+0x938>
			{
				PID_Mode_State = Mode_Foot_Def;
 800c3d2:	4b53      	ldr	r3, [pc, #332]	; (800c520 <NX7_PID_Ctrl+0xa80>)
 800c3d4:	2203      	movs	r2, #3
 800c3d6:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	/* <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><> */
	if(Mode_Auto_Ctrl_State == Auto_Ctrl_ON)
 800c3d8:	4b55      	ldr	r3, [pc, #340]	; (800c530 <NX7_PID_Ctrl+0xa90>)
 800c3da:	781b      	ldrb	r3, [r3, #0]
 800c3dc:	2b01      	cmp	r3, #1
 800c3de:	d103      	bne.n	800c3e8 <NX7_PID_Ctrl+0x948>
	{
		NX7_Mode_State = PID_Mode_State;
 800c3e0:	4b4f      	ldr	r3, [pc, #316]	; (800c520 <NX7_PID_Ctrl+0xa80>)
 800c3e2:	781a      	ldrb	r2, [r3, #0]
 800c3e4:	4b53      	ldr	r3, [pc, #332]	; (800c534 <NX7_PID_Ctrl+0xa94>)
 800c3e6:	701a      	strb	r2, [r3, #0]
	}

/* ------------------------------------------------------ <Airmix_State_Ctrl> */
	/* <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><> */
	if(TS-TA > +2.5)
 800c3e8:	4b49      	ldr	r3, [pc, #292]	; (800c510 <NX7_PID_Ctrl+0xa70>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	4a49      	ldr	r2, [pc, #292]	; (800c514 <NX7_PID_Ctrl+0xa74>)
 800c3ee:	68d2      	ldr	r2, [r2, #12]
 800c3f0:	4611      	mov	r1, r2
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f7f4 fbfc 	bl	8000bf0 <__aeabi_fsub>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	494f      	ldr	r1, [pc, #316]	; (800c538 <NX7_PID_Ctrl+0xa98>)
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f7f4 febd 	bl	800117c <__aeabi_fcmpgt>
 800c402:	4603      	mov	r3, r0
 800c404:	2b00      	cmp	r3, #0
 800c406:	f000 80a9 	beq.w	800c55c <NX7_PID_Ctrl+0xabc>
	{
		Airmix_KP = 1.0/30 * fabsf(PID_Error);
 800c40a:	4b4c      	ldr	r3, [pc, #304]	; (800c53c <NX7_PID_Ctrl+0xa9c>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c412:	4618      	mov	r0, r3
 800c414:	f7f4 f868 	bl	80004e8 <__aeabi_f2d>
 800c418:	a337      	add	r3, pc, #220	; (adr r3, 800c4f8 <NX7_PID_Ctrl+0xa58>)
 800c41a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c41e:	f7f4 f8bb 	bl	8000598 <__aeabi_dmul>
 800c422:	4602      	mov	r2, r0
 800c424:	460b      	mov	r3, r1
 800c426:	4610      	mov	r0, r2
 800c428:	4619      	mov	r1, r3
 800c42a:	f7f4 fb8d 	bl	8000b48 <__aeabi_d2f>
 800c42e:	4603      	mov	r3, r0
 800c430:	4a43      	ldr	r2, [pc, #268]	; (800c540 <NX7_PID_Ctrl+0xaa0>)
 800c432:	6013      	str	r3, [r2, #0]
		Airmix_KI = 1.0/50;
 800c434:	4b43      	ldr	r3, [pc, #268]	; (800c544 <NX7_PID_Ctrl+0xaa4>)
 800c436:	4a44      	ldr	r2, [pc, #272]	; (800c548 <NX7_PID_Ctrl+0xaa8>)
 800c438:	601a      	str	r2, [r3, #0]
		float airmix = 1 - 1.1 * (Airmix_KP*PID_Error+Airmix_KI*Airmix_Int_Error);
 800c43a:	4b41      	ldr	r3, [pc, #260]	; (800c540 <NX7_PID_Ctrl+0xaa0>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	4a3f      	ldr	r2, [pc, #252]	; (800c53c <NX7_PID_Ctrl+0xa9c>)
 800c440:	6812      	ldr	r2, [r2, #0]
 800c442:	4611      	mov	r1, r2
 800c444:	4618      	mov	r0, r3
 800c446:	f7f4 fcdd 	bl	8000e04 <__aeabi_fmul>
 800c44a:	4603      	mov	r3, r0
 800c44c:	461c      	mov	r4, r3
 800c44e:	4b3d      	ldr	r3, [pc, #244]	; (800c544 <NX7_PID_Ctrl+0xaa4>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	4a3e      	ldr	r2, [pc, #248]	; (800c54c <NX7_PID_Ctrl+0xaac>)
 800c454:	6812      	ldr	r2, [r2, #0]
 800c456:	4611      	mov	r1, r2
 800c458:	4618      	mov	r0, r3
 800c45a:	f7f4 fcd3 	bl	8000e04 <__aeabi_fmul>
 800c45e:	4603      	mov	r3, r0
 800c460:	4619      	mov	r1, r3
 800c462:	4620      	mov	r0, r4
 800c464:	f7f4 fbc6 	bl	8000bf4 <__addsf3>
 800c468:	4603      	mov	r3, r0
 800c46a:	4618      	mov	r0, r3
 800c46c:	f7f4 f83c 	bl	80004e8 <__aeabi_f2d>
 800c470:	a323      	add	r3, pc, #140	; (adr r3, 800c500 <NX7_PID_Ctrl+0xa60>)
 800c472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c476:	f7f4 f88f 	bl	8000598 <__aeabi_dmul>
 800c47a:	4602      	mov	r2, r0
 800c47c:	460b      	mov	r3, r1
 800c47e:	f04f 0000 	mov.w	r0, #0
 800c482:	4933      	ldr	r1, [pc, #204]	; (800c550 <NX7_PID_Ctrl+0xab0>)
 800c484:	f7f3 fed0 	bl	8000228 <__aeabi_dsub>
 800c488:	4602      	mov	r2, r0
 800c48a:	460b      	mov	r3, r1
 800c48c:	4610      	mov	r0, r2
 800c48e:	4619      	mov	r1, r3
 800c490:	f7f4 fb5a 	bl	8000b48 <__aeabi_d2f>
 800c494:	4603      	mov	r3, r0
 800c496:	61fb      	str	r3, [r7, #28]
		if(airmix < 0.0)	{airmix = 0.0;}
 800c498:	f04f 0100 	mov.w	r1, #0
 800c49c:	69f8      	ldr	r0, [r7, #28]
 800c49e:	f7f4 fe4f 	bl	8001140 <__aeabi_fcmplt>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d002      	beq.n	800c4ae <NX7_PID_Ctrl+0xa0e>
 800c4a8:	f04f 0300 	mov.w	r3, #0
 800c4ac:	61fb      	str	r3, [r7, #28]
		if(airmix > 0.8)	{airmix = 0.8;}
 800c4ae:	69f8      	ldr	r0, [r7, #28]
 800c4b0:	f7f4 f81a 	bl	80004e8 <__aeabi_f2d>
 800c4b4:	a314      	add	r3, pc, #80	; (adr r3, 800c508 <NX7_PID_Ctrl+0xa68>)
 800c4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ba:	f7f4 fafd 	bl	8000ab8 <__aeabi_dcmpgt>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d001      	beq.n	800c4c8 <NX7_PID_Ctrl+0xa28>
 800c4c4:	4b23      	ldr	r3, [pc, #140]	; (800c554 <NX7_PID_Ctrl+0xab4>)
 800c4c6:	61fb      	str	r3, [r7, #28]
		PID_Airmix_State = 20 - roundf(20*airmix);		// Airmix: 5%
 800c4c8:	4914      	ldr	r1, [pc, #80]	; (800c51c <NX7_PID_Ctrl+0xa7c>)
 800c4ca:	69f8      	ldr	r0, [r7, #28]
 800c4cc:	f7f4 fc9a 	bl	8000e04 <__aeabi_fmul>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	f004 fa84 	bl	80109e0 <roundf>
 800c4d8:	4603      	mov	r3, r0
 800c4da:	4619      	mov	r1, r3
 800c4dc:	480f      	ldr	r0, [pc, #60]	; (800c51c <NX7_PID_Ctrl+0xa7c>)
 800c4de:	f7f4 fb87 	bl	8000bf0 <__aeabi_fsub>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	f7f4 fe8f 	bl	8001208 <__aeabi_f2uiz>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	b2da      	uxtb	r2, r3
 800c4ee:	4b1a      	ldr	r3, [pc, #104]	; (800c558 <NX7_PID_Ctrl+0xab8>)
 800c4f0:	701a      	strb	r2, [r3, #0]
 800c4f2:	e1d8      	b.n	800c8a6 <NX7_PID_Ctrl+0xe06>
 800c4f4:	f3af 8000 	nop.w
 800c4f8:	11111111 	.word	0x11111111
 800c4fc:	3fa11111 	.word	0x3fa11111
 800c500:	9999999a 	.word	0x9999999a
 800c504:	3ff19999 	.word	0x3ff19999
 800c508:	9999999a 	.word	0x9999999a
 800c50c:	3fe99999 	.word	0x3fe99999
 800c510:	20000010 	.word	0x20000010
 800c514:	200005a8 	.word	0x200005a8
 800c518:	40400000 	.word	0x40400000
 800c51c:	41a00000 	.word	0x41a00000
 800c520:	200005a1 	.word	0x200005a1
 800c524:	41c80000 	.word	0x41c80000
 800c528:	20000220 	.word	0x20000220
 800c52c:	bf800000 	.word	0xbf800000
 800c530:	2000000b 	.word	0x2000000b
 800c534:	2000020c 	.word	0x2000020c
 800c538:	40200000 	.word	0x40200000
 800c53c:	20000224 	.word	0x20000224
 800c540:	2000022c 	.word	0x2000022c
 800c544:	20000230 	.word	0x20000230
 800c548:	3ca3d70a 	.word	0x3ca3d70a
 800c54c:	20000228 	.word	0x20000228
 800c550:	3ff00000 	.word	0x3ff00000
 800c554:	3f4ccccd 	.word	0x3f4ccccd
 800c558:	200005a2 	.word	0x200005a2
	}
	/* <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><> */
	else if(TS-TA < -2.5)
 800c55c:	4b90      	ldr	r3, [pc, #576]	; (800c7a0 <NX7_PID_Ctrl+0xd00>)
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	4a90      	ldr	r2, [pc, #576]	; (800c7a4 <NX7_PID_Ctrl+0xd04>)
 800c562:	68d2      	ldr	r2, [r2, #12]
 800c564:	4611      	mov	r1, r2
 800c566:	4618      	mov	r0, r3
 800c568:	f7f4 fb42 	bl	8000bf0 <__aeabi_fsub>
 800c56c:	4603      	mov	r3, r0
 800c56e:	498e      	ldr	r1, [pc, #568]	; (800c7a8 <NX7_PID_Ctrl+0xd08>)
 800c570:	4618      	mov	r0, r3
 800c572:	f7f4 fde5 	bl	8001140 <__aeabi_fcmplt>
 800c576:	4603      	mov	r3, r0
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d05e      	beq.n	800c63a <NX7_PID_Ctrl+0xb9a>
	{
		Airmix_KP = -1.0/15 * fabsf(PID_Error);
 800c57c:	4b8b      	ldr	r3, [pc, #556]	; (800c7ac <NX7_PID_Ctrl+0xd0c>)
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c584:	4618      	mov	r0, r3
 800c586:	f7f3 ffaf 	bl	80004e8 <__aeabi_f2d>
 800c58a:	a37b      	add	r3, pc, #492	; (adr r3, 800c778 <NX7_PID_Ctrl+0xcd8>)
 800c58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c590:	f7f4 f802 	bl	8000598 <__aeabi_dmul>
 800c594:	4602      	mov	r2, r0
 800c596:	460b      	mov	r3, r1
 800c598:	4610      	mov	r0, r2
 800c59a:	4619      	mov	r1, r3
 800c59c:	f7f4 fad4 	bl	8000b48 <__aeabi_d2f>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	4a83      	ldr	r2, [pc, #524]	; (800c7b0 <NX7_PID_Ctrl+0xd10>)
 800c5a4:	6013      	str	r3, [r2, #0]
		Airmix_KI = -1.0/50;
 800c5a6:	4b83      	ldr	r3, [pc, #524]	; (800c7b4 <NX7_PID_Ctrl+0xd14>)
 800c5a8:	4a83      	ldr	r2, [pc, #524]	; (800c7b8 <NX7_PID_Ctrl+0xd18>)
 800c5aa:	601a      	str	r2, [r3, #0]
		float airmix = Airmix_KP*PID_Error+Airmix_KI*Airmix_Int_Error;
 800c5ac:	4b80      	ldr	r3, [pc, #512]	; (800c7b0 <NX7_PID_Ctrl+0xd10>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	4a7e      	ldr	r2, [pc, #504]	; (800c7ac <NX7_PID_Ctrl+0xd0c>)
 800c5b2:	6812      	ldr	r2, [r2, #0]
 800c5b4:	4611      	mov	r1, r2
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f7f4 fc24 	bl	8000e04 <__aeabi_fmul>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	461c      	mov	r4, r3
 800c5c0:	4b7c      	ldr	r3, [pc, #496]	; (800c7b4 <NX7_PID_Ctrl+0xd14>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	4a7d      	ldr	r2, [pc, #500]	; (800c7bc <NX7_PID_Ctrl+0xd1c>)
 800c5c6:	6812      	ldr	r2, [r2, #0]
 800c5c8:	4611      	mov	r1, r2
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f7f4 fc1a 	bl	8000e04 <__aeabi_fmul>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	4619      	mov	r1, r3
 800c5d4:	4620      	mov	r0, r4
 800c5d6:	f7f4 fb0d 	bl	8000bf4 <__addsf3>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	61bb      	str	r3, [r7, #24]
		if(airmix < 0.2)	{airmix = 0.2;}
 800c5de:	69b8      	ldr	r0, [r7, #24]
 800c5e0:	f7f3 ff82 	bl	80004e8 <__aeabi_f2d>
 800c5e4:	a366      	add	r3, pc, #408	; (adr r3, 800c780 <NX7_PID_Ctrl+0xce0>)
 800c5e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ea:	f7f4 fa47 	bl	8000a7c <__aeabi_dcmplt>
 800c5ee:	4603      	mov	r3, r0
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d001      	beq.n	800c5f8 <NX7_PID_Ctrl+0xb58>
 800c5f4:	4b72      	ldr	r3, [pc, #456]	; (800c7c0 <NX7_PID_Ctrl+0xd20>)
 800c5f6:	61bb      	str	r3, [r7, #24]
		if(airmix > 1.0)	{airmix = 1.0;}
 800c5f8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c5fc:	69b8      	ldr	r0, [r7, #24]
 800c5fe:	f7f4 fdbd 	bl	800117c <__aeabi_fcmpgt>
 800c602:	4603      	mov	r3, r0
 800c604:	2b00      	cmp	r3, #0
 800c606:	d002      	beq.n	800c60e <NX7_PID_Ctrl+0xb6e>
 800c608:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c60c:	61bb      	str	r3, [r7, #24]
		PID_Airmix_State = 20 - roundf(20*airmix);		// Airmix: 5%
 800c60e:	496d      	ldr	r1, [pc, #436]	; (800c7c4 <NX7_PID_Ctrl+0xd24>)
 800c610:	69b8      	ldr	r0, [r7, #24]
 800c612:	f7f4 fbf7 	bl	8000e04 <__aeabi_fmul>
 800c616:	4603      	mov	r3, r0
 800c618:	4618      	mov	r0, r3
 800c61a:	f004 f9e1 	bl	80109e0 <roundf>
 800c61e:	4603      	mov	r3, r0
 800c620:	4619      	mov	r1, r3
 800c622:	4868      	ldr	r0, [pc, #416]	; (800c7c4 <NX7_PID_Ctrl+0xd24>)
 800c624:	f7f4 fae4 	bl	8000bf0 <__aeabi_fsub>
 800c628:	4603      	mov	r3, r0
 800c62a:	4618      	mov	r0, r3
 800c62c:	f7f4 fdec 	bl	8001208 <__aeabi_f2uiz>
 800c630:	4603      	mov	r3, r0
 800c632:	b2da      	uxtb	r2, r3
 800c634:	4b64      	ldr	r3, [pc, #400]	; (800c7c8 <NX7_PID_Ctrl+0xd28>)
 800c636:	701a      	strb	r2, [r3, #0]
 800c638:	e135      	b.n	800c8a6 <NX7_PID_Ctrl+0xe06>
	}
	/* <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><> */
	else if((TS-TA >= -2.5) && (TS-TA <= +2.5))
 800c63a:	4b59      	ldr	r3, [pc, #356]	; (800c7a0 <NX7_PID_Ctrl+0xd00>)
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	4a59      	ldr	r2, [pc, #356]	; (800c7a4 <NX7_PID_Ctrl+0xd04>)
 800c640:	68d2      	ldr	r2, [r2, #12]
 800c642:	4611      	mov	r1, r2
 800c644:	4618      	mov	r0, r3
 800c646:	f7f4 fad3 	bl	8000bf0 <__aeabi_fsub>
 800c64a:	4603      	mov	r3, r0
 800c64c:	4956      	ldr	r1, [pc, #344]	; (800c7a8 <NX7_PID_Ctrl+0xd08>)
 800c64e:	4618      	mov	r0, r3
 800c650:	f7f4 fd8a 	bl	8001168 <__aeabi_fcmpge>
 800c654:	4603      	mov	r3, r0
 800c656:	2b00      	cmp	r3, #0
 800c658:	f000 8125 	beq.w	800c8a6 <NX7_PID_Ctrl+0xe06>
 800c65c:	4b50      	ldr	r3, [pc, #320]	; (800c7a0 <NX7_PID_Ctrl+0xd00>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	4a50      	ldr	r2, [pc, #320]	; (800c7a4 <NX7_PID_Ctrl+0xd04>)
 800c662:	68d2      	ldr	r2, [r2, #12]
 800c664:	4611      	mov	r1, r2
 800c666:	4618      	mov	r0, r3
 800c668:	f7f4 fac2 	bl	8000bf0 <__aeabi_fsub>
 800c66c:	4603      	mov	r3, r0
 800c66e:	4957      	ldr	r1, [pc, #348]	; (800c7cc <NX7_PID_Ctrl+0xd2c>)
 800c670:	4618      	mov	r0, r3
 800c672:	f7f4 fd6f 	bl	8001154 <__aeabi_fcmple>
 800c676:	4603      	mov	r3, r0
 800c678:	2b00      	cmp	r3, #0
 800c67a:	f000 8114 	beq.w	800c8a6 <NX7_PID_Ctrl+0xe06>
	{
		if(flag == +1)
 800c67e:	4b54      	ldr	r3, [pc, #336]	; (800c7d0 <NX7_PID_Ctrl+0xd30>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	2b01      	cmp	r3, #1
 800c684:	f040 80ac 	bne.w	800c7e0 <NX7_PID_Ctrl+0xd40>
		{
			Airmix_KP = 1.0/30 * fabsf(PID_Error);
 800c688:	4b48      	ldr	r3, [pc, #288]	; (800c7ac <NX7_PID_Ctrl+0xd0c>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c690:	4618      	mov	r0, r3
 800c692:	f7f3 ff29 	bl	80004e8 <__aeabi_f2d>
 800c696:	a33c      	add	r3, pc, #240	; (adr r3, 800c788 <NX7_PID_Ctrl+0xce8>)
 800c698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c69c:	f7f3 ff7c 	bl	8000598 <__aeabi_dmul>
 800c6a0:	4602      	mov	r2, r0
 800c6a2:	460b      	mov	r3, r1
 800c6a4:	4610      	mov	r0, r2
 800c6a6:	4619      	mov	r1, r3
 800c6a8:	f7f4 fa4e 	bl	8000b48 <__aeabi_d2f>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	4a40      	ldr	r2, [pc, #256]	; (800c7b0 <NX7_PID_Ctrl+0xd10>)
 800c6b0:	6013      	str	r3, [r2, #0]
			Airmix_KI = 1.0/50;
 800c6b2:	4b40      	ldr	r3, [pc, #256]	; (800c7b4 <NX7_PID_Ctrl+0xd14>)
 800c6b4:	4a47      	ldr	r2, [pc, #284]	; (800c7d4 <NX7_PID_Ctrl+0xd34>)
 800c6b6:	601a      	str	r2, [r3, #0]
			float airmix = 1 - 1.1 * (Airmix_KP*PID_Error+Airmix_KI*Airmix_Int_Error);
 800c6b8:	4b3d      	ldr	r3, [pc, #244]	; (800c7b0 <NX7_PID_Ctrl+0xd10>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	4a3b      	ldr	r2, [pc, #236]	; (800c7ac <NX7_PID_Ctrl+0xd0c>)
 800c6be:	6812      	ldr	r2, [r2, #0]
 800c6c0:	4611      	mov	r1, r2
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	f7f4 fb9e 	bl	8000e04 <__aeabi_fmul>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	461c      	mov	r4, r3
 800c6cc:	4b39      	ldr	r3, [pc, #228]	; (800c7b4 <NX7_PID_Ctrl+0xd14>)
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	4a3a      	ldr	r2, [pc, #232]	; (800c7bc <NX7_PID_Ctrl+0xd1c>)
 800c6d2:	6812      	ldr	r2, [r2, #0]
 800c6d4:	4611      	mov	r1, r2
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f7f4 fb94 	bl	8000e04 <__aeabi_fmul>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	4619      	mov	r1, r3
 800c6e0:	4620      	mov	r0, r4
 800c6e2:	f7f4 fa87 	bl	8000bf4 <__addsf3>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f7f3 fefd 	bl	80004e8 <__aeabi_f2d>
 800c6ee:	a328      	add	r3, pc, #160	; (adr r3, 800c790 <NX7_PID_Ctrl+0xcf0>)
 800c6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f4:	f7f3 ff50 	bl	8000598 <__aeabi_dmul>
 800c6f8:	4602      	mov	r2, r0
 800c6fa:	460b      	mov	r3, r1
 800c6fc:	f04f 0000 	mov.w	r0, #0
 800c700:	4935      	ldr	r1, [pc, #212]	; (800c7d8 <NX7_PID_Ctrl+0xd38>)
 800c702:	f7f3 fd91 	bl	8000228 <__aeabi_dsub>
 800c706:	4602      	mov	r2, r0
 800c708:	460b      	mov	r3, r1
 800c70a:	4610      	mov	r0, r2
 800c70c:	4619      	mov	r1, r3
 800c70e:	f7f4 fa1b 	bl	8000b48 <__aeabi_d2f>
 800c712:	4603      	mov	r3, r0
 800c714:	617b      	str	r3, [r7, #20]
			if(airmix < 0.0)	{airmix = 0.0;}
 800c716:	f04f 0100 	mov.w	r1, #0
 800c71a:	6978      	ldr	r0, [r7, #20]
 800c71c:	f7f4 fd10 	bl	8001140 <__aeabi_fcmplt>
 800c720:	4603      	mov	r3, r0
 800c722:	2b00      	cmp	r3, #0
 800c724:	d002      	beq.n	800c72c <NX7_PID_Ctrl+0xc8c>
 800c726:	f04f 0300 	mov.w	r3, #0
 800c72a:	617b      	str	r3, [r7, #20]
			if(airmix > 0.8)	{airmix = 0.8;}
 800c72c:	6978      	ldr	r0, [r7, #20]
 800c72e:	f7f3 fedb 	bl	80004e8 <__aeabi_f2d>
 800c732:	a319      	add	r3, pc, #100	; (adr r3, 800c798 <NX7_PID_Ctrl+0xcf8>)
 800c734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c738:	f7f4 f9be 	bl	8000ab8 <__aeabi_dcmpgt>
 800c73c:	4603      	mov	r3, r0
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d001      	beq.n	800c746 <NX7_PID_Ctrl+0xca6>
 800c742:	4b26      	ldr	r3, [pc, #152]	; (800c7dc <NX7_PID_Ctrl+0xd3c>)
 800c744:	617b      	str	r3, [r7, #20]
			PID_Airmix_State = 20 - roundf(20*airmix);		// Airmix: 5%
 800c746:	491f      	ldr	r1, [pc, #124]	; (800c7c4 <NX7_PID_Ctrl+0xd24>)
 800c748:	6978      	ldr	r0, [r7, #20]
 800c74a:	f7f4 fb5b 	bl	8000e04 <__aeabi_fmul>
 800c74e:	4603      	mov	r3, r0
 800c750:	4618      	mov	r0, r3
 800c752:	f004 f945 	bl	80109e0 <roundf>
 800c756:	4603      	mov	r3, r0
 800c758:	4619      	mov	r1, r3
 800c75a:	481a      	ldr	r0, [pc, #104]	; (800c7c4 <NX7_PID_Ctrl+0xd24>)
 800c75c:	f7f4 fa48 	bl	8000bf0 <__aeabi_fsub>
 800c760:	4603      	mov	r3, r0
 800c762:	4618      	mov	r0, r3
 800c764:	f7f4 fd50 	bl	8001208 <__aeabi_f2uiz>
 800c768:	4603      	mov	r3, r0
 800c76a:	b2da      	uxtb	r2, r3
 800c76c:	4b16      	ldr	r3, [pc, #88]	; (800c7c8 <NX7_PID_Ctrl+0xd28>)
 800c76e:	701a      	strb	r2, [r3, #0]
 800c770:	e099      	b.n	800c8a6 <NX7_PID_Ctrl+0xe06>
 800c772:	bf00      	nop
 800c774:	f3af 8000 	nop.w
 800c778:	11111111 	.word	0x11111111
 800c77c:	bfb11111 	.word	0xbfb11111
 800c780:	9999999a 	.word	0x9999999a
 800c784:	3fc99999 	.word	0x3fc99999
 800c788:	11111111 	.word	0x11111111
 800c78c:	3fa11111 	.word	0x3fa11111
 800c790:	9999999a 	.word	0x9999999a
 800c794:	3ff19999 	.word	0x3ff19999
 800c798:	9999999a 	.word	0x9999999a
 800c79c:	3fe99999 	.word	0x3fe99999
 800c7a0:	20000010 	.word	0x20000010
 800c7a4:	200005a8 	.word	0x200005a8
 800c7a8:	c0200000 	.word	0xc0200000
 800c7ac:	20000224 	.word	0x20000224
 800c7b0:	2000022c 	.word	0x2000022c
 800c7b4:	20000230 	.word	0x20000230
 800c7b8:	bca3d70a 	.word	0xbca3d70a
 800c7bc:	20000228 	.word	0x20000228
 800c7c0:	3e4ccccd 	.word	0x3e4ccccd
 800c7c4:	41a00000 	.word	0x41a00000
 800c7c8:	200005a2 	.word	0x200005a2
 800c7cc:	40200000 	.word	0x40200000
 800c7d0:	20000220 	.word	0x20000220
 800c7d4:	3ca3d70a 	.word	0x3ca3d70a
 800c7d8:	3ff00000 	.word	0x3ff00000
 800c7dc:	3f4ccccd 	.word	0x3f4ccccd
		}
		else if(flag == -1)
 800c7e0:	4ba3      	ldr	r3, [pc, #652]	; (800ca70 <NX7_PID_Ctrl+0xfd0>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7e8:	d15d      	bne.n	800c8a6 <NX7_PID_Ctrl+0xe06>
		{
			Airmix_KP = -1.0/15 * fabsf(PID_Error);
 800c7ea:	4ba2      	ldr	r3, [pc, #648]	; (800ca74 <NX7_PID_Ctrl+0xfd4>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	f7f3 fe78 	bl	80004e8 <__aeabi_f2d>
 800c7f8:	a399      	add	r3, pc, #612	; (adr r3, 800ca60 <NX7_PID_Ctrl+0xfc0>)
 800c7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7fe:	f7f3 fecb 	bl	8000598 <__aeabi_dmul>
 800c802:	4602      	mov	r2, r0
 800c804:	460b      	mov	r3, r1
 800c806:	4610      	mov	r0, r2
 800c808:	4619      	mov	r1, r3
 800c80a:	f7f4 f99d 	bl	8000b48 <__aeabi_d2f>
 800c80e:	4603      	mov	r3, r0
 800c810:	4a99      	ldr	r2, [pc, #612]	; (800ca78 <NX7_PID_Ctrl+0xfd8>)
 800c812:	6013      	str	r3, [r2, #0]
			Airmix_KI = -1.0/50;
 800c814:	4b99      	ldr	r3, [pc, #612]	; (800ca7c <NX7_PID_Ctrl+0xfdc>)
 800c816:	4a9a      	ldr	r2, [pc, #616]	; (800ca80 <NX7_PID_Ctrl+0xfe0>)
 800c818:	601a      	str	r2, [r3, #0]
			float airmix = Airmix_KP*PID_Error+Airmix_KI*Airmix_Int_Error;
 800c81a:	4b97      	ldr	r3, [pc, #604]	; (800ca78 <NX7_PID_Ctrl+0xfd8>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	4a95      	ldr	r2, [pc, #596]	; (800ca74 <NX7_PID_Ctrl+0xfd4>)
 800c820:	6812      	ldr	r2, [r2, #0]
 800c822:	4611      	mov	r1, r2
 800c824:	4618      	mov	r0, r3
 800c826:	f7f4 faed 	bl	8000e04 <__aeabi_fmul>
 800c82a:	4603      	mov	r3, r0
 800c82c:	461c      	mov	r4, r3
 800c82e:	4b93      	ldr	r3, [pc, #588]	; (800ca7c <NX7_PID_Ctrl+0xfdc>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	4a94      	ldr	r2, [pc, #592]	; (800ca84 <NX7_PID_Ctrl+0xfe4>)
 800c834:	6812      	ldr	r2, [r2, #0]
 800c836:	4611      	mov	r1, r2
 800c838:	4618      	mov	r0, r3
 800c83a:	f7f4 fae3 	bl	8000e04 <__aeabi_fmul>
 800c83e:	4603      	mov	r3, r0
 800c840:	4619      	mov	r1, r3
 800c842:	4620      	mov	r0, r4
 800c844:	f7f4 f9d6 	bl	8000bf4 <__addsf3>
 800c848:	4603      	mov	r3, r0
 800c84a:	613b      	str	r3, [r7, #16]
			if(airmix < 0.2)	{airmix = 0.2;}
 800c84c:	6938      	ldr	r0, [r7, #16]
 800c84e:	f7f3 fe4b 	bl	80004e8 <__aeabi_f2d>
 800c852:	a385      	add	r3, pc, #532	; (adr r3, 800ca68 <NX7_PID_Ctrl+0xfc8>)
 800c854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c858:	f7f4 f910 	bl	8000a7c <__aeabi_dcmplt>
 800c85c:	4603      	mov	r3, r0
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d001      	beq.n	800c866 <NX7_PID_Ctrl+0xdc6>
 800c862:	4b89      	ldr	r3, [pc, #548]	; (800ca88 <NX7_PID_Ctrl+0xfe8>)
 800c864:	613b      	str	r3, [r7, #16]
			if(airmix > 1.0)	{airmix = 1.0;}
 800c866:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c86a:	6938      	ldr	r0, [r7, #16]
 800c86c:	f7f4 fc86 	bl	800117c <__aeabi_fcmpgt>
 800c870:	4603      	mov	r3, r0
 800c872:	2b00      	cmp	r3, #0
 800c874:	d002      	beq.n	800c87c <NX7_PID_Ctrl+0xddc>
 800c876:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c87a:	613b      	str	r3, [r7, #16]
			PID_Airmix_State = 20 - roundf(20*airmix);		// Airmix: 5%
 800c87c:	4983      	ldr	r1, [pc, #524]	; (800ca8c <NX7_PID_Ctrl+0xfec>)
 800c87e:	6938      	ldr	r0, [r7, #16]
 800c880:	f7f4 fac0 	bl	8000e04 <__aeabi_fmul>
 800c884:	4603      	mov	r3, r0
 800c886:	4618      	mov	r0, r3
 800c888:	f004 f8aa 	bl	80109e0 <roundf>
 800c88c:	4603      	mov	r3, r0
 800c88e:	4619      	mov	r1, r3
 800c890:	487e      	ldr	r0, [pc, #504]	; (800ca8c <NX7_PID_Ctrl+0xfec>)
 800c892:	f7f4 f9ad 	bl	8000bf0 <__aeabi_fsub>
 800c896:	4603      	mov	r3, r0
 800c898:	4618      	mov	r0, r3
 800c89a:	f7f4 fcb5 	bl	8001208 <__aeabi_f2uiz>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	b2da      	uxtb	r2, r3
 800c8a2:	4b7b      	ldr	r3, [pc, #492]	; (800ca90 <NX7_PID_Ctrl+0xff0>)
 800c8a4:	701a      	strb	r2, [r3, #0]
		}
	}
	/* <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><> */
	NX7_Airmix_State = PID_Airmix_State;
 800c8a6:	4b7a      	ldr	r3, [pc, #488]	; (800ca90 <NX7_PID_Ctrl+0xff0>)
 800c8a8:	781a      	ldrb	r2, [r3, #0]
 800c8aa:	4b7a      	ldr	r3, [pc, #488]	; (800ca94 <NX7_PID_Ctrl+0xff4>)
 800c8ac:	701a      	strb	r2, [r3, #0]

/* ------------------------------------------------------ <Blower_State_Ctrl> */
	/* <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><> */
	if(TS-TA > +2.5)
 800c8ae:	4b7a      	ldr	r3, [pc, #488]	; (800ca98 <NX7_PID_Ctrl+0xff8>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	4a7a      	ldr	r2, [pc, #488]	; (800ca9c <NX7_PID_Ctrl+0xffc>)
 800c8b4:	68d2      	ldr	r2, [r2, #12]
 800c8b6:	4611      	mov	r1, r2
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	f7f4 f999 	bl	8000bf0 <__aeabi_fsub>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	4977      	ldr	r1, [pc, #476]	; (800caa0 <NX7_PID_Ctrl+0x1000>)
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f7f4 fc5a 	bl	800117c <__aeabi_fcmpgt>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	f000 8144 	beq.w	800cb58 <NX7_PID_Ctrl+0x10b8>
	{
		if(TW >= +65)
 800c8d0:	4b72      	ldr	r3, [pc, #456]	; (800ca9c <NX7_PID_Ctrl+0xffc>)
 800c8d2:	689b      	ldr	r3, [r3, #8]
 800c8d4:	4973      	ldr	r1, [pc, #460]	; (800caa4 <NX7_PID_Ctrl+0x1004>)
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	f7f4 fc46 	bl	8001168 <__aeabi_fcmpge>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d04c      	beq.n	800c97c <NX7_PID_Ctrl+0xedc>
		{
			Blower_K1 = 1.0/25;
 800c8e2:	4b71      	ldr	r3, [pc, #452]	; (800caa8 <NX7_PID_Ctrl+0x1008>)
 800c8e4:	4a71      	ldr	r2, [pc, #452]	; (800caac <NX7_PID_Ctrl+0x100c>)
 800c8e6:	601a      	str	r2, [r3, #0]
			Blower_K2 = 1.0/40;
 800c8e8:	4b71      	ldr	r3, [pc, #452]	; (800cab0 <NX7_PID_Ctrl+0x1010>)
 800c8ea:	4a72      	ldr	r2, [pc, #456]	; (800cab4 <NX7_PID_Ctrl+0x1014>)
 800c8ec:	601a      	str	r2, [r3, #0]
			float blower = Blower_K1*fabsf(PID_Error) + Blower_K2*Blower_X;
 800c8ee:	4b61      	ldr	r3, [pc, #388]	; (800ca74 <NX7_PID_Ctrl+0xfd4>)
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c8f6:	4a6c      	ldr	r2, [pc, #432]	; (800caa8 <NX7_PID_Ctrl+0x1008>)
 800c8f8:	6812      	ldr	r2, [r2, #0]
 800c8fa:	4611      	mov	r1, r2
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f7f4 fa81 	bl	8000e04 <__aeabi_fmul>
 800c902:	4603      	mov	r3, r0
 800c904:	461c      	mov	r4, r3
 800c906:	4b6a      	ldr	r3, [pc, #424]	; (800cab0 <NX7_PID_Ctrl+0x1010>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	4a6b      	ldr	r2, [pc, #428]	; (800cab8 <NX7_PID_Ctrl+0x1018>)
 800c90c:	6812      	ldr	r2, [r2, #0]
 800c90e:	4611      	mov	r1, r2
 800c910:	4618      	mov	r0, r3
 800c912:	f7f4 fa77 	bl	8000e04 <__aeabi_fmul>
 800c916:	4603      	mov	r3, r0
 800c918:	4619      	mov	r1, r3
 800c91a:	4620      	mov	r0, r4
 800c91c:	f7f4 f96a 	bl	8000bf4 <__addsf3>
 800c920:	4603      	mov	r3, r0
 800c922:	60fb      	str	r3, [r7, #12]
			if(blower > 1.0)	{blower = 1.0;}
 800c924:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c928:	68f8      	ldr	r0, [r7, #12]
 800c92a:	f7f4 fc27 	bl	800117c <__aeabi_fcmpgt>
 800c92e:	4603      	mov	r3, r0
 800c930:	2b00      	cmp	r3, #0
 800c932:	d002      	beq.n	800c93a <NX7_PID_Ctrl+0xe9a>
 800c934:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c938:	60fb      	str	r3, [r7, #12]
			PID_Blower_State = roundf(8*blower);
 800c93a:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800c93e:	68f8      	ldr	r0, [r7, #12]
 800c940:	f7f4 fa60 	bl	8000e04 <__aeabi_fmul>
 800c944:	4603      	mov	r3, r0
 800c946:	4618      	mov	r0, r3
 800c948:	f004 f84a 	bl	80109e0 <roundf>
 800c94c:	4603      	mov	r3, r0
 800c94e:	4618      	mov	r0, r3
 800c950:	f7f4 fc5a 	bl	8001208 <__aeabi_f2uiz>
 800c954:	4603      	mov	r3, r0
 800c956:	b2da      	uxtb	r2, r3
 800c958:	4b58      	ldr	r3, [pc, #352]	; (800cabc <NX7_PID_Ctrl+0x101c>)
 800c95a:	701a      	strb	r2, [r3, #0]
			if(PID_Blower_State < Blower_L1)	{PID_Blower_State = Blower_L1;}
 800c95c:	4b57      	ldr	r3, [pc, #348]	; (800cabc <NX7_PID_Ctrl+0x101c>)
 800c95e:	781b      	ldrb	r3, [r3, #0]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d102      	bne.n	800c96a <NX7_PID_Ctrl+0xeca>
 800c964:	4b55      	ldr	r3, [pc, #340]	; (800cabc <NX7_PID_Ctrl+0x101c>)
 800c966:	2201      	movs	r2, #1
 800c968:	701a      	strb	r2, [r3, #0]
			if(PID_Blower_State > Blower_L8)	{PID_Blower_State = Blower_L8;}
 800c96a:	4b54      	ldr	r3, [pc, #336]	; (800cabc <NX7_PID_Ctrl+0x101c>)
 800c96c:	781b      	ldrb	r3, [r3, #0]
 800c96e:	2b08      	cmp	r3, #8
 800c970:	f240 82f8 	bls.w	800cf64 <NX7_PID_Ctrl+0x14c4>
 800c974:	4b51      	ldr	r3, [pc, #324]	; (800cabc <NX7_PID_Ctrl+0x101c>)
 800c976:	2208      	movs	r2, #8
 800c978:	701a      	strb	r2, [r3, #0]
			if(PID_Blower_State > Blower_L8)	{PID_Blower_State = Blower_L8;}
		}
	}
	/* <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><> */
	// void NX7_PID_Ctrl_Blower(void) is executed every 0.5 second
}
 800c97a:	e2f3      	b.n	800cf64 <NX7_PID_Ctrl+0x14c4>
		else if((TW > +35) && (TW < +65))
 800c97c:	4b47      	ldr	r3, [pc, #284]	; (800ca9c <NX7_PID_Ctrl+0xffc>)
 800c97e:	689b      	ldr	r3, [r3, #8]
 800c980:	494f      	ldr	r1, [pc, #316]	; (800cac0 <NX7_PID_Ctrl+0x1020>)
 800c982:	4618      	mov	r0, r3
 800c984:	f7f4 fbfa 	bl	800117c <__aeabi_fcmpgt>
 800c988:	4603      	mov	r3, r0
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	f000 80d6 	beq.w	800cb3c <NX7_PID_Ctrl+0x109c>
 800c990:	4b42      	ldr	r3, [pc, #264]	; (800ca9c <NX7_PID_Ctrl+0xffc>)
 800c992:	689b      	ldr	r3, [r3, #8]
 800c994:	4943      	ldr	r1, [pc, #268]	; (800caa4 <NX7_PID_Ctrl+0x1004>)
 800c996:	4618      	mov	r0, r3
 800c998:	f7f4 fbd2 	bl	8001140 <__aeabi_fcmplt>
 800c99c:	4603      	mov	r3, r0
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	f000 80cc 	beq.w	800cb3c <NX7_PID_Ctrl+0x109c>
			if(TS-TC < -1)
 800c9a4:	4b3c      	ldr	r3, [pc, #240]	; (800ca98 <NX7_PID_Ctrl+0xff8>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	4a3c      	ldr	r2, [pc, #240]	; (800ca9c <NX7_PID_Ctrl+0xffc>)
 800c9aa:	6852      	ldr	r2, [r2, #4]
 800c9ac:	4611      	mov	r1, r2
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f7f4 f91e 	bl	8000bf0 <__aeabi_fsub>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	4943      	ldr	r1, [pc, #268]	; (800cac4 <NX7_PID_Ctrl+0x1024>)
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	f7f4 fbc1 	bl	8001140 <__aeabi_fcmplt>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d025      	beq.n	800ca10 <NX7_PID_Ctrl+0xf70>
				PID_Blower_State = floorf((0.2*TW)-5);
 800c9c4:	4b35      	ldr	r3, [pc, #212]	; (800ca9c <NX7_PID_Ctrl+0xffc>)
 800c9c6:	689b      	ldr	r3, [r3, #8]
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f7f3 fd8d 	bl	80004e8 <__aeabi_f2d>
 800c9ce:	a326      	add	r3, pc, #152	; (adr r3, 800ca68 <NX7_PID_Ctrl+0xfc8>)
 800c9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d4:	f7f3 fde0 	bl	8000598 <__aeabi_dmul>
 800c9d8:	4602      	mov	r2, r0
 800c9da:	460b      	mov	r3, r1
 800c9dc:	4610      	mov	r0, r2
 800c9de:	4619      	mov	r1, r3
 800c9e0:	f04f 0200 	mov.w	r2, #0
 800c9e4:	4b38      	ldr	r3, [pc, #224]	; (800cac8 <NX7_PID_Ctrl+0x1028>)
 800c9e6:	f7f3 fc1f 	bl	8000228 <__aeabi_dsub>
 800c9ea:	4602      	mov	r2, r0
 800c9ec:	460b      	mov	r3, r1
 800c9ee:	4610      	mov	r0, r2
 800c9f0:	4619      	mov	r1, r3
 800c9f2:	f7f4 f8a9 	bl	8000b48 <__aeabi_d2f>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f003 ffaf 	bl	801095c <floorf>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	4618      	mov	r0, r3
 800ca02:	f7f4 fc01 	bl	8001208 <__aeabi_f2uiz>
 800ca06:	4603      	mov	r3, r0
 800ca08:	b2da      	uxtb	r2, r3
 800ca0a:	4b2c      	ldr	r3, [pc, #176]	; (800cabc <NX7_PID_Ctrl+0x101c>)
 800ca0c:	701a      	strb	r2, [r3, #0]
			if(TS-TC < -1)
 800ca0e:	e2a9      	b.n	800cf64 <NX7_PID_Ctrl+0x14c4>
			else if((TS-TC >= -1) && (TS-TC <= +1))
 800ca10:	4b21      	ldr	r3, [pc, #132]	; (800ca98 <NX7_PID_Ctrl+0xff8>)
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	4a21      	ldr	r2, [pc, #132]	; (800ca9c <NX7_PID_Ctrl+0xffc>)
 800ca16:	6852      	ldr	r2, [r2, #4]
 800ca18:	4611      	mov	r1, r2
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f7f4 f8e8 	bl	8000bf0 <__aeabi_fsub>
 800ca20:	4603      	mov	r3, r0
 800ca22:	4928      	ldr	r1, [pc, #160]	; (800cac4 <NX7_PID_Ctrl+0x1024>)
 800ca24:	4618      	mov	r0, r3
 800ca26:	f7f4 fb9f 	bl	8001168 <__aeabi_fcmpge>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d04d      	beq.n	800cacc <NX7_PID_Ctrl+0x102c>
 800ca30:	4b19      	ldr	r3, [pc, #100]	; (800ca98 <NX7_PID_Ctrl+0xff8>)
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	4a19      	ldr	r2, [pc, #100]	; (800ca9c <NX7_PID_Ctrl+0xffc>)
 800ca36:	6852      	ldr	r2, [r2, #4]
 800ca38:	4611      	mov	r1, r2
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	f7f4 f8d8 	bl	8000bf0 <__aeabi_fsub>
 800ca40:	4603      	mov	r3, r0
 800ca42:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ca46:	4618      	mov	r0, r3
 800ca48:	f7f4 fb84 	bl	8001154 <__aeabi_fcmple>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d03c      	beq.n	800cacc <NX7_PID_Ctrl+0x102c>
				PID_Blower_State = Blower_L1;
 800ca52:	4b1a      	ldr	r3, [pc, #104]	; (800cabc <NX7_PID_Ctrl+0x101c>)
 800ca54:	2201      	movs	r2, #1
 800ca56:	701a      	strb	r2, [r3, #0]
			if(TS-TC < -1)
 800ca58:	e284      	b.n	800cf64 <NX7_PID_Ctrl+0x14c4>
 800ca5a:	bf00      	nop
 800ca5c:	f3af 8000 	nop.w
 800ca60:	11111111 	.word	0x11111111
 800ca64:	bfb11111 	.word	0xbfb11111
 800ca68:	9999999a 	.word	0x9999999a
 800ca6c:	3fc99999 	.word	0x3fc99999
 800ca70:	20000220 	.word	0x20000220
 800ca74:	20000224 	.word	0x20000224
 800ca78:	2000022c 	.word	0x2000022c
 800ca7c:	20000230 	.word	0x20000230
 800ca80:	bca3d70a 	.word	0xbca3d70a
 800ca84:	20000228 	.word	0x20000228
 800ca88:	3e4ccccd 	.word	0x3e4ccccd
 800ca8c:	41a00000 	.word	0x41a00000
 800ca90:	200005a2 	.word	0x200005a2
 800ca94:	2000020d 	.word	0x2000020d
 800ca98:	20000010 	.word	0x20000010
 800ca9c:	200005a8 	.word	0x200005a8
 800caa0:	40200000 	.word	0x40200000
 800caa4:	42820000 	.word	0x42820000
 800caa8:	20000238 	.word	0x20000238
 800caac:	3d23d70a 	.word	0x3d23d70a
 800cab0:	2000023c 	.word	0x2000023c
 800cab4:	3ccccccd 	.word	0x3ccccccd
 800cab8:	20000240 	.word	0x20000240
 800cabc:	200005a0 	.word	0x200005a0
 800cac0:	420c0000 	.word	0x420c0000
 800cac4:	bf800000 	.word	0xbf800000
 800cac8:	40140000 	.word	0x40140000
			else if(TS-TC > +1)
 800cacc:	4b92      	ldr	r3, [pc, #584]	; (800cd18 <NX7_PID_Ctrl+0x1278>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	4a92      	ldr	r2, [pc, #584]	; (800cd1c <NX7_PID_Ctrl+0x127c>)
 800cad2:	6852      	ldr	r2, [r2, #4]
 800cad4:	4611      	mov	r1, r2
 800cad6:	4618      	mov	r0, r3
 800cad8:	f7f4 f88a 	bl	8000bf0 <__aeabi_fsub>
 800cadc:	4603      	mov	r3, r0
 800cade:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cae2:	4618      	mov	r0, r3
 800cae4:	f7f4 fb4a 	bl	800117c <__aeabi_fcmpgt>
 800cae8:	4603      	mov	r3, r0
 800caea:	2b00      	cmp	r3, #0
 800caec:	d100      	bne.n	800caf0 <NX7_PID_Ctrl+0x1050>
			if(TS-TC < -1)
 800caee:	e239      	b.n	800cf64 <NX7_PID_Ctrl+0x14c4>
				PID_Blower_State = floorf((0.2*TW)-5);
 800caf0:	4b8a      	ldr	r3, [pc, #552]	; (800cd1c <NX7_PID_Ctrl+0x127c>)
 800caf2:	689b      	ldr	r3, [r3, #8]
 800caf4:	4618      	mov	r0, r3
 800caf6:	f7f3 fcf7 	bl	80004e8 <__aeabi_f2d>
 800cafa:	a385      	add	r3, pc, #532	; (adr r3, 800cd10 <NX7_PID_Ctrl+0x1270>)
 800cafc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb00:	f7f3 fd4a 	bl	8000598 <__aeabi_dmul>
 800cb04:	4602      	mov	r2, r0
 800cb06:	460b      	mov	r3, r1
 800cb08:	4610      	mov	r0, r2
 800cb0a:	4619      	mov	r1, r3
 800cb0c:	f04f 0200 	mov.w	r2, #0
 800cb10:	4b83      	ldr	r3, [pc, #524]	; (800cd20 <NX7_PID_Ctrl+0x1280>)
 800cb12:	f7f3 fb89 	bl	8000228 <__aeabi_dsub>
 800cb16:	4602      	mov	r2, r0
 800cb18:	460b      	mov	r3, r1
 800cb1a:	4610      	mov	r0, r2
 800cb1c:	4619      	mov	r1, r3
 800cb1e:	f7f4 f813 	bl	8000b48 <__aeabi_d2f>
 800cb22:	4603      	mov	r3, r0
 800cb24:	4618      	mov	r0, r3
 800cb26:	f003 ff19 	bl	801095c <floorf>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	f7f4 fb6b 	bl	8001208 <__aeabi_f2uiz>
 800cb32:	4603      	mov	r3, r0
 800cb34:	b2da      	uxtb	r2, r3
 800cb36:	4b7b      	ldr	r3, [pc, #492]	; (800cd24 <NX7_PID_Ctrl+0x1284>)
 800cb38:	701a      	strb	r2, [r3, #0]
			if(TS-TC < -1)
 800cb3a:	e213      	b.n	800cf64 <NX7_PID_Ctrl+0x14c4>
		else if(TW <= +35)
 800cb3c:	4b77      	ldr	r3, [pc, #476]	; (800cd1c <NX7_PID_Ctrl+0x127c>)
 800cb3e:	689b      	ldr	r3, [r3, #8]
 800cb40:	4979      	ldr	r1, [pc, #484]	; (800cd28 <NX7_PID_Ctrl+0x1288>)
 800cb42:	4618      	mov	r0, r3
 800cb44:	f7f4 fb06 	bl	8001154 <__aeabi_fcmple>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d100      	bne.n	800cb50 <NX7_PID_Ctrl+0x10b0>
}
 800cb4e:	e209      	b.n	800cf64 <NX7_PID_Ctrl+0x14c4>
			PID_Blower_State = Blower_L1;
 800cb50:	4b74      	ldr	r3, [pc, #464]	; (800cd24 <NX7_PID_Ctrl+0x1284>)
 800cb52:	2201      	movs	r2, #1
 800cb54:	701a      	strb	r2, [r3, #0]
}
 800cb56:	e205      	b.n	800cf64 <NX7_PID_Ctrl+0x14c4>
	else if(TS-TA < -2.5)
 800cb58:	4b6f      	ldr	r3, [pc, #444]	; (800cd18 <NX7_PID_Ctrl+0x1278>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	4a6f      	ldr	r2, [pc, #444]	; (800cd1c <NX7_PID_Ctrl+0x127c>)
 800cb5e:	68d2      	ldr	r2, [r2, #12]
 800cb60:	4611      	mov	r1, r2
 800cb62:	4618      	mov	r0, r3
 800cb64:	f7f4 f844 	bl	8000bf0 <__aeabi_fsub>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	4970      	ldr	r1, [pc, #448]	; (800cd2c <NX7_PID_Ctrl+0x128c>)
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f7f4 fae7 	bl	8001140 <__aeabi_fcmplt>
 800cb72:	4603      	mov	r3, r0
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d04c      	beq.n	800cc12 <NX7_PID_Ctrl+0x1172>
		Blower_K1 = 2.0/25;
 800cb78:	4b6d      	ldr	r3, [pc, #436]	; (800cd30 <NX7_PID_Ctrl+0x1290>)
 800cb7a:	4a6e      	ldr	r2, [pc, #440]	; (800cd34 <NX7_PID_Ctrl+0x1294>)
 800cb7c:	601a      	str	r2, [r3, #0]
		Blower_K2 = 1.6/40;
 800cb7e:	4b6e      	ldr	r3, [pc, #440]	; (800cd38 <NX7_PID_Ctrl+0x1298>)
 800cb80:	4a6e      	ldr	r2, [pc, #440]	; (800cd3c <NX7_PID_Ctrl+0x129c>)
 800cb82:	601a      	str	r2, [r3, #0]
		float blower = Blower_K1*fabsf(PID_Error) + Blower_K2*Blower_X;
 800cb84:	4b6e      	ldr	r3, [pc, #440]	; (800cd40 <NX7_PID_Ctrl+0x12a0>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cb8c:	4a68      	ldr	r2, [pc, #416]	; (800cd30 <NX7_PID_Ctrl+0x1290>)
 800cb8e:	6812      	ldr	r2, [r2, #0]
 800cb90:	4611      	mov	r1, r2
 800cb92:	4618      	mov	r0, r3
 800cb94:	f7f4 f936 	bl	8000e04 <__aeabi_fmul>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	461c      	mov	r4, r3
 800cb9c:	4b66      	ldr	r3, [pc, #408]	; (800cd38 <NX7_PID_Ctrl+0x1298>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	4a68      	ldr	r2, [pc, #416]	; (800cd44 <NX7_PID_Ctrl+0x12a4>)
 800cba2:	6812      	ldr	r2, [r2, #0]
 800cba4:	4611      	mov	r1, r2
 800cba6:	4618      	mov	r0, r3
 800cba8:	f7f4 f92c 	bl	8000e04 <__aeabi_fmul>
 800cbac:	4603      	mov	r3, r0
 800cbae:	4619      	mov	r1, r3
 800cbb0:	4620      	mov	r0, r4
 800cbb2:	f7f4 f81f 	bl	8000bf4 <__addsf3>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	60bb      	str	r3, [r7, #8]
		if(blower > 1.0)	{blower = 1.0;}
 800cbba:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cbbe:	68b8      	ldr	r0, [r7, #8]
 800cbc0:	f7f4 fadc 	bl	800117c <__aeabi_fcmpgt>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d002      	beq.n	800cbd0 <NX7_PID_Ctrl+0x1130>
 800cbca:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800cbce:	60bb      	str	r3, [r7, #8]
		PID_Blower_State = roundf(8*blower);
 800cbd0:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800cbd4:	68b8      	ldr	r0, [r7, #8]
 800cbd6:	f7f4 f915 	bl	8000e04 <__aeabi_fmul>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	4618      	mov	r0, r3
 800cbde:	f003 feff 	bl	80109e0 <roundf>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	f7f4 fb0f 	bl	8001208 <__aeabi_f2uiz>
 800cbea:	4603      	mov	r3, r0
 800cbec:	b2da      	uxtb	r2, r3
 800cbee:	4b4d      	ldr	r3, [pc, #308]	; (800cd24 <NX7_PID_Ctrl+0x1284>)
 800cbf0:	701a      	strb	r2, [r3, #0]
		if(PID_Blower_State < Blower_L1)	{PID_Blower_State = Blower_L1;}
 800cbf2:	4b4c      	ldr	r3, [pc, #304]	; (800cd24 <NX7_PID_Ctrl+0x1284>)
 800cbf4:	781b      	ldrb	r3, [r3, #0]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d102      	bne.n	800cc00 <NX7_PID_Ctrl+0x1160>
 800cbfa:	4b4a      	ldr	r3, [pc, #296]	; (800cd24 <NX7_PID_Ctrl+0x1284>)
 800cbfc:	2201      	movs	r2, #1
 800cbfe:	701a      	strb	r2, [r3, #0]
		if(PID_Blower_State > Blower_L8)	{PID_Blower_State = Blower_L8;}
 800cc00:	4b48      	ldr	r3, [pc, #288]	; (800cd24 <NX7_PID_Ctrl+0x1284>)
 800cc02:	781b      	ldrb	r3, [r3, #0]
 800cc04:	2b08      	cmp	r3, #8
 800cc06:	f240 81ad 	bls.w	800cf64 <NX7_PID_Ctrl+0x14c4>
 800cc0a:	4b46      	ldr	r3, [pc, #280]	; (800cd24 <NX7_PID_Ctrl+0x1284>)
 800cc0c:	2208      	movs	r2, #8
 800cc0e:	701a      	strb	r2, [r3, #0]
}
 800cc10:	e1a8      	b.n	800cf64 <NX7_PID_Ctrl+0x14c4>
	else if((TS-TA >= -2.5) && (TS-TA <= +2.5))
 800cc12:	4b41      	ldr	r3, [pc, #260]	; (800cd18 <NX7_PID_Ctrl+0x1278>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	4a41      	ldr	r2, [pc, #260]	; (800cd1c <NX7_PID_Ctrl+0x127c>)
 800cc18:	68d2      	ldr	r2, [r2, #12]
 800cc1a:	4611      	mov	r1, r2
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f7f3 ffe7 	bl	8000bf0 <__aeabi_fsub>
 800cc22:	4603      	mov	r3, r0
 800cc24:	4941      	ldr	r1, [pc, #260]	; (800cd2c <NX7_PID_Ctrl+0x128c>)
 800cc26:	4618      	mov	r0, r3
 800cc28:	f7f4 fa9e 	bl	8001168 <__aeabi_fcmpge>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d100      	bne.n	800cc34 <NX7_PID_Ctrl+0x1194>
}
 800cc32:	e197      	b.n	800cf64 <NX7_PID_Ctrl+0x14c4>
	else if((TS-TA >= -2.5) && (TS-TA <= +2.5))
 800cc34:	4b38      	ldr	r3, [pc, #224]	; (800cd18 <NX7_PID_Ctrl+0x1278>)
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	4a38      	ldr	r2, [pc, #224]	; (800cd1c <NX7_PID_Ctrl+0x127c>)
 800cc3a:	68d2      	ldr	r2, [r2, #12]
 800cc3c:	4611      	mov	r1, r2
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f7f3 ffd6 	bl	8000bf0 <__aeabi_fsub>
 800cc44:	4603      	mov	r3, r0
 800cc46:	4940      	ldr	r1, [pc, #256]	; (800cd48 <NX7_PID_Ctrl+0x12a8>)
 800cc48:	4618      	mov	r0, r3
 800cc4a:	f7f4 fa83 	bl	8001154 <__aeabi_fcmple>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d100      	bne.n	800cc56 <NX7_PID_Ctrl+0x11b6>
}
 800cc54:	e186      	b.n	800cf64 <NX7_PID_Ctrl+0x14c4>
		if(flag == +1)
 800cc56:	4b3d      	ldr	r3, [pc, #244]	; (800cd4c <NX7_PID_Ctrl+0x12ac>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	2b01      	cmp	r3, #1
 800cc5c:	f040 8131 	bne.w	800cec2 <NX7_PID_Ctrl+0x1422>
			if(TW >= +65)
 800cc60:	4b2e      	ldr	r3, [pc, #184]	; (800cd1c <NX7_PID_Ctrl+0x127c>)
 800cc62:	689b      	ldr	r3, [r3, #8]
 800cc64:	493a      	ldr	r1, [pc, #232]	; (800cd50 <NX7_PID_Ctrl+0x12b0>)
 800cc66:	4618      	mov	r0, r3
 800cc68:	f7f4 fa7e 	bl	8001168 <__aeabi_fcmpge>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d072      	beq.n	800cd58 <NX7_PID_Ctrl+0x12b8>
				Blower_K1 = 1.0/25;
 800cc72:	4b2f      	ldr	r3, [pc, #188]	; (800cd30 <NX7_PID_Ctrl+0x1290>)
 800cc74:	4a31      	ldr	r2, [pc, #196]	; (800cd3c <NX7_PID_Ctrl+0x129c>)
 800cc76:	601a      	str	r2, [r3, #0]
				Blower_K2 = 1.0/40;
 800cc78:	4b2f      	ldr	r3, [pc, #188]	; (800cd38 <NX7_PID_Ctrl+0x1298>)
 800cc7a:	4a36      	ldr	r2, [pc, #216]	; (800cd54 <NX7_PID_Ctrl+0x12b4>)
 800cc7c:	601a      	str	r2, [r3, #0]
				float blower = Blower_K1*fabsf(PID_Error) + Blower_K2*Blower_X;
 800cc7e:	4b30      	ldr	r3, [pc, #192]	; (800cd40 <NX7_PID_Ctrl+0x12a0>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cc86:	4a2a      	ldr	r2, [pc, #168]	; (800cd30 <NX7_PID_Ctrl+0x1290>)
 800cc88:	6812      	ldr	r2, [r2, #0]
 800cc8a:	4611      	mov	r1, r2
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	f7f4 f8b9 	bl	8000e04 <__aeabi_fmul>
 800cc92:	4603      	mov	r3, r0
 800cc94:	461c      	mov	r4, r3
 800cc96:	4b28      	ldr	r3, [pc, #160]	; (800cd38 <NX7_PID_Ctrl+0x1298>)
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	4a2a      	ldr	r2, [pc, #168]	; (800cd44 <NX7_PID_Ctrl+0x12a4>)
 800cc9c:	6812      	ldr	r2, [r2, #0]
 800cc9e:	4611      	mov	r1, r2
 800cca0:	4618      	mov	r0, r3
 800cca2:	f7f4 f8af 	bl	8000e04 <__aeabi_fmul>
 800cca6:	4603      	mov	r3, r0
 800cca8:	4619      	mov	r1, r3
 800ccaa:	4620      	mov	r0, r4
 800ccac:	f7f3 ffa2 	bl	8000bf4 <__addsf3>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	607b      	str	r3, [r7, #4]
				if(blower > 1.0)	{blower = 1.0;}
 800ccb4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f7f4 fa5f 	bl	800117c <__aeabi_fcmpgt>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d002      	beq.n	800ccca <NX7_PID_Ctrl+0x122a>
 800ccc4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800ccc8:	607b      	str	r3, [r7, #4]
				PID_Blower_State = roundf(8*blower);
 800ccca:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f7f4 f898 	bl	8000e04 <__aeabi_fmul>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f003 fe82 	bl	80109e0 <roundf>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	4618      	mov	r0, r3
 800cce0:	f7f4 fa92 	bl	8001208 <__aeabi_f2uiz>
 800cce4:	4603      	mov	r3, r0
 800cce6:	b2da      	uxtb	r2, r3
 800cce8:	4b0e      	ldr	r3, [pc, #56]	; (800cd24 <NX7_PID_Ctrl+0x1284>)
 800ccea:	701a      	strb	r2, [r3, #0]
				if(PID_Blower_State < Blower_L1)	{PID_Blower_State = Blower_L1;}
 800ccec:	4b0d      	ldr	r3, [pc, #52]	; (800cd24 <NX7_PID_Ctrl+0x1284>)
 800ccee:	781b      	ldrb	r3, [r3, #0]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d102      	bne.n	800ccfa <NX7_PID_Ctrl+0x125a>
 800ccf4:	4b0b      	ldr	r3, [pc, #44]	; (800cd24 <NX7_PID_Ctrl+0x1284>)
 800ccf6:	2201      	movs	r2, #1
 800ccf8:	701a      	strb	r2, [r3, #0]
				if(PID_Blower_State > Blower_L8)	{PID_Blower_State = Blower_L8;}
 800ccfa:	4b0a      	ldr	r3, [pc, #40]	; (800cd24 <NX7_PID_Ctrl+0x1284>)
 800ccfc:	781b      	ldrb	r3, [r3, #0]
 800ccfe:	2b08      	cmp	r3, #8
 800cd00:	f240 8130 	bls.w	800cf64 <NX7_PID_Ctrl+0x14c4>
 800cd04:	4b07      	ldr	r3, [pc, #28]	; (800cd24 <NX7_PID_Ctrl+0x1284>)
 800cd06:	2208      	movs	r2, #8
 800cd08:	701a      	strb	r2, [r3, #0]
}
 800cd0a:	e12b      	b.n	800cf64 <NX7_PID_Ctrl+0x14c4>
 800cd0c:	f3af 8000 	nop.w
 800cd10:	9999999a 	.word	0x9999999a
 800cd14:	3fc99999 	.word	0x3fc99999
 800cd18:	20000010 	.word	0x20000010
 800cd1c:	200005a8 	.word	0x200005a8
 800cd20:	40140000 	.word	0x40140000
 800cd24:	200005a0 	.word	0x200005a0
 800cd28:	420c0000 	.word	0x420c0000
 800cd2c:	c0200000 	.word	0xc0200000
 800cd30:	20000238 	.word	0x20000238
 800cd34:	3da3d70a 	.word	0x3da3d70a
 800cd38:	2000023c 	.word	0x2000023c
 800cd3c:	3d23d70a 	.word	0x3d23d70a
 800cd40:	20000224 	.word	0x20000224
 800cd44:	20000240 	.word	0x20000240
 800cd48:	40200000 	.word	0x40200000
 800cd4c:	20000220 	.word	0x20000220
 800cd50:	42820000 	.word	0x42820000
 800cd54:	3ccccccd 	.word	0x3ccccccd
			else if((TW > +35) && (TW < +65))
 800cd58:	4b87      	ldr	r3, [pc, #540]	; (800cf78 <NX7_PID_Ctrl+0x14d8>)
 800cd5a:	689b      	ldr	r3, [r3, #8]
 800cd5c:	4987      	ldr	r1, [pc, #540]	; (800cf7c <NX7_PID_Ctrl+0x14dc>)
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f7f4 fa0c 	bl	800117c <__aeabi_fcmpgt>
 800cd64:	4603      	mov	r3, r0
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	f000 809d 	beq.w	800cea6 <NX7_PID_Ctrl+0x1406>
 800cd6c:	4b82      	ldr	r3, [pc, #520]	; (800cf78 <NX7_PID_Ctrl+0x14d8>)
 800cd6e:	689b      	ldr	r3, [r3, #8]
 800cd70:	4983      	ldr	r1, [pc, #524]	; (800cf80 <NX7_PID_Ctrl+0x14e0>)
 800cd72:	4618      	mov	r0, r3
 800cd74:	f7f4 f9e4 	bl	8001140 <__aeabi_fcmplt>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	f000 8093 	beq.w	800cea6 <NX7_PID_Ctrl+0x1406>
				if(TS-TC < -1)
 800cd80:	4b80      	ldr	r3, [pc, #512]	; (800cf84 <NX7_PID_Ctrl+0x14e4>)
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	4a7c      	ldr	r2, [pc, #496]	; (800cf78 <NX7_PID_Ctrl+0x14d8>)
 800cd86:	6852      	ldr	r2, [r2, #4]
 800cd88:	4611      	mov	r1, r2
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f7f3 ff30 	bl	8000bf0 <__aeabi_fsub>
 800cd90:	4603      	mov	r3, r0
 800cd92:	497d      	ldr	r1, [pc, #500]	; (800cf88 <NX7_PID_Ctrl+0x14e8>)
 800cd94:	4618      	mov	r0, r3
 800cd96:	f7f4 f9d3 	bl	8001140 <__aeabi_fcmplt>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d025      	beq.n	800cdec <NX7_PID_Ctrl+0x134c>
					PID_Blower_State = floorf((0.2*TW)-5);
 800cda0:	4b75      	ldr	r3, [pc, #468]	; (800cf78 <NX7_PID_Ctrl+0x14d8>)
 800cda2:	689b      	ldr	r3, [r3, #8]
 800cda4:	4618      	mov	r0, r3
 800cda6:	f7f3 fb9f 	bl	80004e8 <__aeabi_f2d>
 800cdaa:	a371      	add	r3, pc, #452	; (adr r3, 800cf70 <NX7_PID_Ctrl+0x14d0>)
 800cdac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb0:	f7f3 fbf2 	bl	8000598 <__aeabi_dmul>
 800cdb4:	4602      	mov	r2, r0
 800cdb6:	460b      	mov	r3, r1
 800cdb8:	4610      	mov	r0, r2
 800cdba:	4619      	mov	r1, r3
 800cdbc:	f04f 0200 	mov.w	r2, #0
 800cdc0:	4b72      	ldr	r3, [pc, #456]	; (800cf8c <NX7_PID_Ctrl+0x14ec>)
 800cdc2:	f7f3 fa31 	bl	8000228 <__aeabi_dsub>
 800cdc6:	4602      	mov	r2, r0
 800cdc8:	460b      	mov	r3, r1
 800cdca:	4610      	mov	r0, r2
 800cdcc:	4619      	mov	r1, r3
 800cdce:	f7f3 febb 	bl	8000b48 <__aeabi_d2f>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	4618      	mov	r0, r3
 800cdd6:	f003 fdc1 	bl	801095c <floorf>
 800cdda:	4603      	mov	r3, r0
 800cddc:	4618      	mov	r0, r3
 800cdde:	f7f4 fa13 	bl	8001208 <__aeabi_f2uiz>
 800cde2:	4603      	mov	r3, r0
 800cde4:	b2da      	uxtb	r2, r3
 800cde6:	4b6a      	ldr	r3, [pc, #424]	; (800cf90 <NX7_PID_Ctrl+0x14f0>)
 800cde8:	701a      	strb	r2, [r3, #0]
				if(TS-TC < -1)
 800cdea:	e0bb      	b.n	800cf64 <NX7_PID_Ctrl+0x14c4>
				else if((TS-TC >= -1) && (TS-TC <= +1))
 800cdec:	4b65      	ldr	r3, [pc, #404]	; (800cf84 <NX7_PID_Ctrl+0x14e4>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	4a61      	ldr	r2, [pc, #388]	; (800cf78 <NX7_PID_Ctrl+0x14d8>)
 800cdf2:	6852      	ldr	r2, [r2, #4]
 800cdf4:	4611      	mov	r1, r2
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f7f3 fefa 	bl	8000bf0 <__aeabi_fsub>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	4962      	ldr	r1, [pc, #392]	; (800cf88 <NX7_PID_Ctrl+0x14e8>)
 800ce00:	4618      	mov	r0, r3
 800ce02:	f7f4 f9b1 	bl	8001168 <__aeabi_fcmpge>
 800ce06:	4603      	mov	r3, r0
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d014      	beq.n	800ce36 <NX7_PID_Ctrl+0x1396>
 800ce0c:	4b5d      	ldr	r3, [pc, #372]	; (800cf84 <NX7_PID_Ctrl+0x14e4>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	4a59      	ldr	r2, [pc, #356]	; (800cf78 <NX7_PID_Ctrl+0x14d8>)
 800ce12:	6852      	ldr	r2, [r2, #4]
 800ce14:	4611      	mov	r1, r2
 800ce16:	4618      	mov	r0, r3
 800ce18:	f7f3 feea 	bl	8000bf0 <__aeabi_fsub>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ce22:	4618      	mov	r0, r3
 800ce24:	f7f4 f996 	bl	8001154 <__aeabi_fcmple>
 800ce28:	4603      	mov	r3, r0
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d003      	beq.n	800ce36 <NX7_PID_Ctrl+0x1396>
					PID_Blower_State = Blower_L1;
 800ce2e:	4b58      	ldr	r3, [pc, #352]	; (800cf90 <NX7_PID_Ctrl+0x14f0>)
 800ce30:	2201      	movs	r2, #1
 800ce32:	701a      	strb	r2, [r3, #0]
				if(TS-TC < -1)
 800ce34:	e096      	b.n	800cf64 <NX7_PID_Ctrl+0x14c4>
				else if(TS-TC > +1)
 800ce36:	4b53      	ldr	r3, [pc, #332]	; (800cf84 <NX7_PID_Ctrl+0x14e4>)
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	4a4f      	ldr	r2, [pc, #316]	; (800cf78 <NX7_PID_Ctrl+0x14d8>)
 800ce3c:	6852      	ldr	r2, [r2, #4]
 800ce3e:	4611      	mov	r1, r2
 800ce40:	4618      	mov	r0, r3
 800ce42:	f7f3 fed5 	bl	8000bf0 <__aeabi_fsub>
 800ce46:	4603      	mov	r3, r0
 800ce48:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f7f4 f995 	bl	800117c <__aeabi_fcmpgt>
 800ce52:	4603      	mov	r3, r0
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d100      	bne.n	800ce5a <NX7_PID_Ctrl+0x13ba>
				if(TS-TC < -1)
 800ce58:	e084      	b.n	800cf64 <NX7_PID_Ctrl+0x14c4>
					PID_Blower_State = floorf((0.2*TW)-5);
 800ce5a:	4b47      	ldr	r3, [pc, #284]	; (800cf78 <NX7_PID_Ctrl+0x14d8>)
 800ce5c:	689b      	ldr	r3, [r3, #8]
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f7f3 fb42 	bl	80004e8 <__aeabi_f2d>
 800ce64:	a342      	add	r3, pc, #264	; (adr r3, 800cf70 <NX7_PID_Ctrl+0x14d0>)
 800ce66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce6a:	f7f3 fb95 	bl	8000598 <__aeabi_dmul>
 800ce6e:	4602      	mov	r2, r0
 800ce70:	460b      	mov	r3, r1
 800ce72:	4610      	mov	r0, r2
 800ce74:	4619      	mov	r1, r3
 800ce76:	f04f 0200 	mov.w	r2, #0
 800ce7a:	4b44      	ldr	r3, [pc, #272]	; (800cf8c <NX7_PID_Ctrl+0x14ec>)
 800ce7c:	f7f3 f9d4 	bl	8000228 <__aeabi_dsub>
 800ce80:	4602      	mov	r2, r0
 800ce82:	460b      	mov	r3, r1
 800ce84:	4610      	mov	r0, r2
 800ce86:	4619      	mov	r1, r3
 800ce88:	f7f3 fe5e 	bl	8000b48 <__aeabi_d2f>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f003 fd64 	bl	801095c <floorf>
 800ce94:	4603      	mov	r3, r0
 800ce96:	4618      	mov	r0, r3
 800ce98:	f7f4 f9b6 	bl	8001208 <__aeabi_f2uiz>
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	b2da      	uxtb	r2, r3
 800cea0:	4b3b      	ldr	r3, [pc, #236]	; (800cf90 <NX7_PID_Ctrl+0x14f0>)
 800cea2:	701a      	strb	r2, [r3, #0]
				if(TS-TC < -1)
 800cea4:	e05e      	b.n	800cf64 <NX7_PID_Ctrl+0x14c4>
			else if(TW <= +35)
 800cea6:	4b34      	ldr	r3, [pc, #208]	; (800cf78 <NX7_PID_Ctrl+0x14d8>)
 800cea8:	689b      	ldr	r3, [r3, #8]
 800ceaa:	4934      	ldr	r1, [pc, #208]	; (800cf7c <NX7_PID_Ctrl+0x14dc>)
 800ceac:	4618      	mov	r0, r3
 800ceae:	f7f4 f951 	bl	8001154 <__aeabi_fcmple>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d100      	bne.n	800ceba <NX7_PID_Ctrl+0x141a>
}
 800ceb8:	e054      	b.n	800cf64 <NX7_PID_Ctrl+0x14c4>
				PID_Blower_State = Blower_L1;
 800ceba:	4b35      	ldr	r3, [pc, #212]	; (800cf90 <NX7_PID_Ctrl+0x14f0>)
 800cebc:	2201      	movs	r2, #1
 800cebe:	701a      	strb	r2, [r3, #0]
}
 800cec0:	e050      	b.n	800cf64 <NX7_PID_Ctrl+0x14c4>
		else if(flag == -1)
 800cec2:	4b34      	ldr	r3, [pc, #208]	; (800cf94 <NX7_PID_Ctrl+0x14f4>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ceca:	d14b      	bne.n	800cf64 <NX7_PID_Ctrl+0x14c4>
			Blower_K1 = 2.0/25;
 800cecc:	4b32      	ldr	r3, [pc, #200]	; (800cf98 <NX7_PID_Ctrl+0x14f8>)
 800cece:	4a33      	ldr	r2, [pc, #204]	; (800cf9c <NX7_PID_Ctrl+0x14fc>)
 800ced0:	601a      	str	r2, [r3, #0]
			Blower_K2 = 1.6/40;
 800ced2:	4b33      	ldr	r3, [pc, #204]	; (800cfa0 <NX7_PID_Ctrl+0x1500>)
 800ced4:	4a33      	ldr	r2, [pc, #204]	; (800cfa4 <NX7_PID_Ctrl+0x1504>)
 800ced6:	601a      	str	r2, [r3, #0]
			float blower = Blower_K1*fabsf(PID_Error) + Blower_K2*Blower_X;
 800ced8:	4b33      	ldr	r3, [pc, #204]	; (800cfa8 <NX7_PID_Ctrl+0x1508>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cee0:	4a2d      	ldr	r2, [pc, #180]	; (800cf98 <NX7_PID_Ctrl+0x14f8>)
 800cee2:	6812      	ldr	r2, [r2, #0]
 800cee4:	4611      	mov	r1, r2
 800cee6:	4618      	mov	r0, r3
 800cee8:	f7f3 ff8c 	bl	8000e04 <__aeabi_fmul>
 800ceec:	4603      	mov	r3, r0
 800ceee:	461c      	mov	r4, r3
 800cef0:	4b2b      	ldr	r3, [pc, #172]	; (800cfa0 <NX7_PID_Ctrl+0x1500>)
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	4a2d      	ldr	r2, [pc, #180]	; (800cfac <NX7_PID_Ctrl+0x150c>)
 800cef6:	6812      	ldr	r2, [r2, #0]
 800cef8:	4611      	mov	r1, r2
 800cefa:	4618      	mov	r0, r3
 800cefc:	f7f3 ff82 	bl	8000e04 <__aeabi_fmul>
 800cf00:	4603      	mov	r3, r0
 800cf02:	4619      	mov	r1, r3
 800cf04:	4620      	mov	r0, r4
 800cf06:	f7f3 fe75 	bl	8000bf4 <__addsf3>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	603b      	str	r3, [r7, #0]
			if(blower > 1.0)	{blower = 1.0;}
 800cf0e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cf12:	6838      	ldr	r0, [r7, #0]
 800cf14:	f7f4 f932 	bl	800117c <__aeabi_fcmpgt>
 800cf18:	4603      	mov	r3, r0
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d002      	beq.n	800cf24 <NX7_PID_Ctrl+0x1484>
 800cf1e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800cf22:	603b      	str	r3, [r7, #0]
			PID_Blower_State = roundf(8*blower);
 800cf24:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800cf28:	6838      	ldr	r0, [r7, #0]
 800cf2a:	f7f3 ff6b 	bl	8000e04 <__aeabi_fmul>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	4618      	mov	r0, r3
 800cf32:	f003 fd55 	bl	80109e0 <roundf>
 800cf36:	4603      	mov	r3, r0
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f7f4 f965 	bl	8001208 <__aeabi_f2uiz>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	b2da      	uxtb	r2, r3
 800cf42:	4b13      	ldr	r3, [pc, #76]	; (800cf90 <NX7_PID_Ctrl+0x14f0>)
 800cf44:	701a      	strb	r2, [r3, #0]
			if(PID_Blower_State < Blower_L1)	{PID_Blower_State = Blower_L1;}
 800cf46:	4b12      	ldr	r3, [pc, #72]	; (800cf90 <NX7_PID_Ctrl+0x14f0>)
 800cf48:	781b      	ldrb	r3, [r3, #0]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d102      	bne.n	800cf54 <NX7_PID_Ctrl+0x14b4>
 800cf4e:	4b10      	ldr	r3, [pc, #64]	; (800cf90 <NX7_PID_Ctrl+0x14f0>)
 800cf50:	2201      	movs	r2, #1
 800cf52:	701a      	strb	r2, [r3, #0]
			if(PID_Blower_State > Blower_L8)	{PID_Blower_State = Blower_L8;}
 800cf54:	4b0e      	ldr	r3, [pc, #56]	; (800cf90 <NX7_PID_Ctrl+0x14f0>)
 800cf56:	781b      	ldrb	r3, [r3, #0]
 800cf58:	2b08      	cmp	r3, #8
 800cf5a:	d903      	bls.n	800cf64 <NX7_PID_Ctrl+0x14c4>
 800cf5c:	4b0c      	ldr	r3, [pc, #48]	; (800cf90 <NX7_PID_Ctrl+0x14f0>)
 800cf5e:	2208      	movs	r2, #8
 800cf60:	701a      	strb	r2, [r3, #0]
}
 800cf62:	e7ff      	b.n	800cf64 <NX7_PID_Ctrl+0x14c4>
 800cf64:	bf00      	nop
 800cf66:	3724      	adds	r7, #36	; 0x24
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd90      	pop	{r4, r7, pc}
 800cf6c:	f3af 8000 	nop.w
 800cf70:	9999999a 	.word	0x9999999a
 800cf74:	3fc99999 	.word	0x3fc99999
 800cf78:	200005a8 	.word	0x200005a8
 800cf7c:	420c0000 	.word	0x420c0000
 800cf80:	42820000 	.word	0x42820000
 800cf84:	20000010 	.word	0x20000010
 800cf88:	bf800000 	.word	0xbf800000
 800cf8c:	40140000 	.word	0x40140000
 800cf90:	200005a0 	.word	0x200005a0
 800cf94:	20000220 	.word	0x20000220
 800cf98:	20000238 	.word	0x20000238
 800cf9c:	3da3d70a 	.word	0x3da3d70a
 800cfa0:	2000023c 	.word	0x2000023c
 800cfa4:	3d23d70a 	.word	0x3d23d70a
 800cfa8:	20000224 	.word	0x20000224
 800cfac:	20000240 	.word	0x20000240

0800cfb0 <NX7_PID_Ctrl_Blower>:

/* NX7_PID_Ctrl_Blower -------------------------------------------------------*/
void NX7_PID_Ctrl_Blower(void)
{
 800cfb0:	b480      	push	{r7}
 800cfb2:	af00      	add	r7, sp, #0
	if(Blower_Auto_Ctrl_State == Auto_Ctrl_ON)
 800cfb4:	4b10      	ldr	r3, [pc, #64]	; (800cff8 <NX7_PID_Ctrl_Blower+0x48>)
 800cfb6:	781b      	ldrb	r3, [r3, #0]
 800cfb8:	2b01      	cmp	r3, #1
 800cfba:	d118      	bne.n	800cfee <NX7_PID_Ctrl_Blower+0x3e>
	{
		if(NX7_Blower_State < PID_Blower_State)
 800cfbc:	4b0f      	ldr	r3, [pc, #60]	; (800cffc <NX7_PID_Ctrl_Blower+0x4c>)
 800cfbe:	781a      	ldrb	r2, [r3, #0]
 800cfc0:	4b0f      	ldr	r3, [pc, #60]	; (800d000 <NX7_PID_Ctrl_Blower+0x50>)
 800cfc2:	781b      	ldrb	r3, [r3, #0]
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	d206      	bcs.n	800cfd6 <NX7_PID_Ctrl_Blower+0x26>
		{
			NX7_Blower_State++;
 800cfc8:	4b0c      	ldr	r3, [pc, #48]	; (800cffc <NX7_PID_Ctrl_Blower+0x4c>)
 800cfca:	781b      	ldrb	r3, [r3, #0]
 800cfcc:	3301      	adds	r3, #1
 800cfce:	b2da      	uxtb	r2, r3
 800cfd0:	4b0a      	ldr	r3, [pc, #40]	; (800cffc <NX7_PID_Ctrl_Blower+0x4c>)
 800cfd2:	701a      	strb	r2, [r3, #0]
		else if(NX7_Blower_State > PID_Blower_State)
		{
			NX7_Blower_State--;
		}
	}
}
 800cfd4:	e00b      	b.n	800cfee <NX7_PID_Ctrl_Blower+0x3e>
		else if(NX7_Blower_State > PID_Blower_State)
 800cfd6:	4b09      	ldr	r3, [pc, #36]	; (800cffc <NX7_PID_Ctrl_Blower+0x4c>)
 800cfd8:	781a      	ldrb	r2, [r3, #0]
 800cfda:	4b09      	ldr	r3, [pc, #36]	; (800d000 <NX7_PID_Ctrl_Blower+0x50>)
 800cfdc:	781b      	ldrb	r3, [r3, #0]
 800cfde:	429a      	cmp	r2, r3
 800cfe0:	d905      	bls.n	800cfee <NX7_PID_Ctrl_Blower+0x3e>
			NX7_Blower_State--;
 800cfe2:	4b06      	ldr	r3, [pc, #24]	; (800cffc <NX7_PID_Ctrl_Blower+0x4c>)
 800cfe4:	781b      	ldrb	r3, [r3, #0]
 800cfe6:	3b01      	subs	r3, #1
 800cfe8:	b2da      	uxtb	r2, r3
 800cfea:	4b04      	ldr	r3, [pc, #16]	; (800cffc <NX7_PID_Ctrl_Blower+0x4c>)
 800cfec:	701a      	strb	r2, [r3, #0]
}
 800cfee:	bf00      	nop
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bc80      	pop	{r7}
 800cff4:	4770      	bx	lr
 800cff6:	bf00      	nop
 800cff8:	2000000c 	.word	0x2000000c
 800cffc:	2000020e 	.word	0x2000020e
 800d000:	200005a0 	.word	0x200005a0

0800d004 <NX7_R_DEF_OFF>:
extern	TIM_HandleTypeDef	htim1;

/* Functions body *************************************************************/
/* NX7_R_DEF_OFF -------------------------------------------------------------*/
void NX7_R_DEF_OFF(void)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(R_DEF_Relay_GPIO_Port, R_DEF_Relay_Pin) == GPIO_PIN_SET)
 800d008:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d00c:	480d      	ldr	r0, [pc, #52]	; (800d044 <NX7_R_DEF_OFF+0x40>)
 800d00e:	f7f6 fd37 	bl	8003a80 <HAL_GPIO_ReadPin>
 800d012:	4603      	mov	r3, r0
 800d014:	2b01      	cmp	r3, #1
 800d016:	d112      	bne.n	800d03e <NX7_R_DEF_OFF+0x3a>
	{
		R_DEF_Relay_OFF;
 800d018:	2200      	movs	r2, #0
 800d01a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d01e:	4809      	ldr	r0, [pc, #36]	; (800d044 <NX7_R_DEF_OFF+0x40>)
 800d020:	f7f6 fd45 	bl	8003aae <HAL_GPIO_WritePin>
		R_DEF_LED_OFF;
 800d024:	2200      	movs	r2, #0
 800d026:	2180      	movs	r1, #128	; 0x80
 800d028:	4806      	ldr	r0, [pc, #24]	; (800d044 <NX7_R_DEF_OFF+0x40>)
 800d02a:	f7f6 fd40 	bl	8003aae <HAL_GPIO_WritePin>
		// TIM1 Stop --> R_DEF
		HAL_TIM_Base_Stop_IT(&htim1);
 800d02e:	4806      	ldr	r0, [pc, #24]	; (800d048 <NX7_R_DEF_OFF+0x44>)
 800d030:	f7f8 fde6 	bl	8005c00 <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_UPDATE);
 800d034:	4b04      	ldr	r3, [pc, #16]	; (800d048 <NX7_R_DEF_OFF+0x44>)
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	f06f 0201 	mvn.w	r2, #1
 800d03c:	611a      	str	r2, [r3, #16]
	}
}
 800d03e:	bf00      	nop
 800d040:	bd80      	pop	{r7, pc}
 800d042:	bf00      	nop
 800d044:	40011000 	.word	0x40011000
 800d048:	20000444 	.word	0x20000444

0800d04c <NX7_R_DEF_ON>:

/* NX7_R_DEF_ON --------------------------------------------------------------*/
void NX7_R_DEF_ON(void)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(R_DEF_Relay_GPIO_Port, R_DEF_Relay_Pin) == GPIO_PIN_RESET)
 800d050:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d054:	4813      	ldr	r0, [pc, #76]	; (800d0a4 <NX7_R_DEF_ON+0x58>)
 800d056:	f7f6 fd13 	bl	8003a80 <HAL_GPIO_ReadPin>
 800d05a:	4603      	mov	r3, r0
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d11e      	bne.n	800d09e <NX7_R_DEF_ON+0x52>
	{
		R_DEF_Relay_ON;
 800d060:	2201      	movs	r2, #1
 800d062:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800d066:	480f      	ldr	r0, [pc, #60]	; (800d0a4 <NX7_R_DEF_ON+0x58>)
 800d068:	f7f6 fd21 	bl	8003aae <HAL_GPIO_WritePin>
		R_DEF_LED_ON;
 800d06c:	2201      	movs	r2, #1
 800d06e:	2180      	movs	r1, #128	; 0x80
 800d070:	480c      	ldr	r0, [pc, #48]	; (800d0a4 <NX7_R_DEF_ON+0x58>)
 800d072:	f7f6 fd1c 	bl	8003aae <HAL_GPIO_WritePin>
		// TIM1 Start --> R_DEF
		htim1.Instance->CNT = 0x00;
 800d076:	4b0c      	ldr	r3, [pc, #48]	; (800d0a8 <NX7_R_DEF_ON+0x5c>)
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	2200      	movs	r2, #0
 800d07c:	625a      	str	r2, [r3, #36]	; 0x24
		htim1.Instance->RCR = 0x02;
 800d07e:	4b0a      	ldr	r3, [pc, #40]	; (800d0a8 <NX7_R_DEF_ON+0x5c>)
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	2202      	movs	r2, #2
 800d084:	631a      	str	r2, [r3, #48]	; 0x30
		htim1.Instance->EGR = 0x01;
 800d086:	4b08      	ldr	r3, [pc, #32]	; (800d0a8 <NX7_R_DEF_ON+0x5c>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	2201      	movs	r2, #1
 800d08c:	615a      	str	r2, [r3, #20]
		__HAL_TIM_CLEAR_FLAG(&htim1, TIM_FLAG_UPDATE);
 800d08e:	4b06      	ldr	r3, [pc, #24]	; (800d0a8 <NX7_R_DEF_ON+0x5c>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	f06f 0201 	mvn.w	r2, #1
 800d096:	611a      	str	r2, [r3, #16]
		HAL_TIM_Base_Start_IT(&htim1);
 800d098:	4803      	ldr	r0, [pc, #12]	; (800d0a8 <NX7_R_DEF_ON+0x5c>)
 800d09a:	f7f8 fd57 	bl	8005b4c <HAL_TIM_Base_Start_IT>
	}
}
 800d09e:	bf00      	nop
 800d0a0:	bd80      	pop	{r7, pc}
 800d0a2:	bf00      	nop
 800d0a4:	40011000 	.word	0x40011000
 800d0a8:	20000444 	.word	0x20000444

0800d0ac <NX7_R_DEF_Handler>:

/* NX7_R_DEF_Handler ---------------------------------------------------------*/
void NX7_R_DEF_Handler(R_DEF_State state)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b082      	sub	sp, #8
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	71fb      	strb	r3, [r7, #7]
	switch (state)
 800d0b6:	79fb      	ldrb	r3, [r7, #7]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d002      	beq.n	800d0c2 <NX7_R_DEF_Handler+0x16>
 800d0bc:	2b01      	cmp	r3, #1
 800d0be:	d003      	beq.n	800d0c8 <NX7_R_DEF_Handler+0x1c>
		{
			NX7_R_DEF_ON();
			break;
		}
	}
}
 800d0c0:	e005      	b.n	800d0ce <NX7_R_DEF_Handler+0x22>
			NX7_R_DEF_OFF();
 800d0c2:	f7ff ff9f 	bl	800d004 <NX7_R_DEF_OFF>
			break;
 800d0c6:	e002      	b.n	800d0ce <NX7_R_DEF_Handler+0x22>
			NX7_R_DEF_ON();
 800d0c8:	f7ff ffc0 	bl	800d04c <NX7_R_DEF_ON>
			break;
 800d0cc:	bf00      	nop
}
 800d0ce:	bf00      	nop
 800d0d0:	3708      	adds	r7, #8
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}
	...

0800d0d8 <NX7_Sensors_Handler>:
extern	AC_Temp_State	NX7_AC_Temp_State;

/* Functions body *************************************************************/
/* NX7_Sensors_Handler -------------------------------------------------------*/
void NX7_Sensors_Handler(uint16_t evap, uint16_t cabin, uint16_t water, uint16_t ambient, uint16_t solar)
{
 800d0d8:	b5b0      	push	{r4, r5, r7, lr}
 800d0da:	b092      	sub	sp, #72	; 0x48
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	4604      	mov	r4, r0
 800d0e0:	4608      	mov	r0, r1
 800d0e2:	4611      	mov	r1, r2
 800d0e4:	461a      	mov	r2, r3
 800d0e6:	4623      	mov	r3, r4
 800d0e8:	80fb      	strh	r3, [r7, #6]
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	80bb      	strh	r3, [r7, #4]
 800d0ee:	460b      	mov	r3, r1
 800d0f0:	807b      	strh	r3, [r7, #2]
 800d0f2:	4613      	mov	r3, r2
 800d0f4:	803b      	strh	r3, [r7, #0]
	//--> Digital to Analog Conversion
	float adc1AnlgVal[5];
	adc1AnlgVal[0]	= (evap*3.3)/4095;
 800d0f6:	88fb      	ldrh	r3, [r7, #6]
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	f7f3 f9e3 	bl	80004c4 <__aeabi_i2d>
 800d0fe:	a3ce      	add	r3, pc, #824	; (adr r3, 800d438 <NX7_Sensors_Handler+0x360>)
 800d100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d104:	f7f3 fa48 	bl	8000598 <__aeabi_dmul>
 800d108:	4602      	mov	r2, r0
 800d10a:	460b      	mov	r3, r1
 800d10c:	4610      	mov	r0, r2
 800d10e:	4619      	mov	r1, r3
 800d110:	a3cb      	add	r3, pc, #812	; (adr r3, 800d440 <NX7_Sensors_Handler+0x368>)
 800d112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d116:	f7f3 fb69 	bl	80007ec <__aeabi_ddiv>
 800d11a:	4602      	mov	r2, r0
 800d11c:	460b      	mov	r3, r1
 800d11e:	4610      	mov	r0, r2
 800d120:	4619      	mov	r1, r3
 800d122:	f7f3 fd11 	bl	8000b48 <__aeabi_d2f>
 800d126:	4603      	mov	r3, r0
 800d128:	623b      	str	r3, [r7, #32]
	adc1AnlgVal[1]	= (cabin*3.3)/4095;
 800d12a:	88bb      	ldrh	r3, [r7, #4]
 800d12c:	4618      	mov	r0, r3
 800d12e:	f7f3 f9c9 	bl	80004c4 <__aeabi_i2d>
 800d132:	a3c1      	add	r3, pc, #772	; (adr r3, 800d438 <NX7_Sensors_Handler+0x360>)
 800d134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d138:	f7f3 fa2e 	bl	8000598 <__aeabi_dmul>
 800d13c:	4602      	mov	r2, r0
 800d13e:	460b      	mov	r3, r1
 800d140:	4610      	mov	r0, r2
 800d142:	4619      	mov	r1, r3
 800d144:	a3be      	add	r3, pc, #760	; (adr r3, 800d440 <NX7_Sensors_Handler+0x368>)
 800d146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d14a:	f7f3 fb4f 	bl	80007ec <__aeabi_ddiv>
 800d14e:	4602      	mov	r2, r0
 800d150:	460b      	mov	r3, r1
 800d152:	4610      	mov	r0, r2
 800d154:	4619      	mov	r1, r3
 800d156:	f7f3 fcf7 	bl	8000b48 <__aeabi_d2f>
 800d15a:	4603      	mov	r3, r0
 800d15c:	627b      	str	r3, [r7, #36]	; 0x24
	adc1AnlgVal[2]	= (water*3.3)/4095;
 800d15e:	887b      	ldrh	r3, [r7, #2]
 800d160:	4618      	mov	r0, r3
 800d162:	f7f3 f9af 	bl	80004c4 <__aeabi_i2d>
 800d166:	a3b4      	add	r3, pc, #720	; (adr r3, 800d438 <NX7_Sensors_Handler+0x360>)
 800d168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d16c:	f7f3 fa14 	bl	8000598 <__aeabi_dmul>
 800d170:	4602      	mov	r2, r0
 800d172:	460b      	mov	r3, r1
 800d174:	4610      	mov	r0, r2
 800d176:	4619      	mov	r1, r3
 800d178:	a3b1      	add	r3, pc, #708	; (adr r3, 800d440 <NX7_Sensors_Handler+0x368>)
 800d17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d17e:	f7f3 fb35 	bl	80007ec <__aeabi_ddiv>
 800d182:	4602      	mov	r2, r0
 800d184:	460b      	mov	r3, r1
 800d186:	4610      	mov	r0, r2
 800d188:	4619      	mov	r1, r3
 800d18a:	f7f3 fcdd 	bl	8000b48 <__aeabi_d2f>
 800d18e:	4603      	mov	r3, r0
 800d190:	62bb      	str	r3, [r7, #40]	; 0x28
	adc1AnlgVal[3]	= (ambient*3.3)/4095;
 800d192:	883b      	ldrh	r3, [r7, #0]
 800d194:	4618      	mov	r0, r3
 800d196:	f7f3 f995 	bl	80004c4 <__aeabi_i2d>
 800d19a:	a3a7      	add	r3, pc, #668	; (adr r3, 800d438 <NX7_Sensors_Handler+0x360>)
 800d19c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1a0:	f7f3 f9fa 	bl	8000598 <__aeabi_dmul>
 800d1a4:	4602      	mov	r2, r0
 800d1a6:	460b      	mov	r3, r1
 800d1a8:	4610      	mov	r0, r2
 800d1aa:	4619      	mov	r1, r3
 800d1ac:	a3a4      	add	r3, pc, #656	; (adr r3, 800d440 <NX7_Sensors_Handler+0x368>)
 800d1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b2:	f7f3 fb1b 	bl	80007ec <__aeabi_ddiv>
 800d1b6:	4602      	mov	r2, r0
 800d1b8:	460b      	mov	r3, r1
 800d1ba:	4610      	mov	r0, r2
 800d1bc:	4619      	mov	r1, r3
 800d1be:	f7f3 fcc3 	bl	8000b48 <__aeabi_d2f>
 800d1c2:	4603      	mov	r3, r0
 800d1c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	adc1AnlgVal[4]	= (solar*3.3)/4095;
 800d1c6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f7f3 f97a 	bl	80004c4 <__aeabi_i2d>
 800d1d0:	a399      	add	r3, pc, #612	; (adr r3, 800d438 <NX7_Sensors_Handler+0x360>)
 800d1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1d6:	f7f3 f9df 	bl	8000598 <__aeabi_dmul>
 800d1da:	4602      	mov	r2, r0
 800d1dc:	460b      	mov	r3, r1
 800d1de:	4610      	mov	r0, r2
 800d1e0:	4619      	mov	r1, r3
 800d1e2:	a397      	add	r3, pc, #604	; (adr r3, 800d440 <NX7_Sensors_Handler+0x368>)
 800d1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1e8:	f7f3 fb00 	bl	80007ec <__aeabi_ddiv>
 800d1ec:	4602      	mov	r2, r0
 800d1ee:	460b      	mov	r3, r1
 800d1f0:	4610      	mov	r0, r2
 800d1f2:	4619      	mov	r1, r3
 800d1f4:	f7f3 fca8 	bl	8000b48 <__aeabi_d2f>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	633b      	str	r3, [r7, #48]	; 0x30
	//--> Voltage to Resistance Conversion
	float evapRes		=	(Evap_Bias*adc1AnlgVal[0])/(3.3-adc1AnlgVal[0]);
 800d1fc:	6a3b      	ldr	r3, [r7, #32]
 800d1fe:	4618      	mov	r0, r3
 800d200:	f7f3 f972 	bl	80004e8 <__aeabi_f2d>
 800d204:	a390      	add	r3, pc, #576	; (adr r3, 800d448 <NX7_Sensors_Handler+0x370>)
 800d206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d20a:	f7f3 f9c5 	bl	8000598 <__aeabi_dmul>
 800d20e:	4602      	mov	r2, r0
 800d210:	460b      	mov	r3, r1
 800d212:	4614      	mov	r4, r2
 800d214:	461d      	mov	r5, r3
 800d216:	6a3b      	ldr	r3, [r7, #32]
 800d218:	4618      	mov	r0, r3
 800d21a:	f7f3 f965 	bl	80004e8 <__aeabi_f2d>
 800d21e:	4602      	mov	r2, r0
 800d220:	460b      	mov	r3, r1
 800d222:	a185      	add	r1, pc, #532	; (adr r1, 800d438 <NX7_Sensors_Handler+0x360>)
 800d224:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d228:	f7f2 fffe 	bl	8000228 <__aeabi_dsub>
 800d22c:	4602      	mov	r2, r0
 800d22e:	460b      	mov	r3, r1
 800d230:	4620      	mov	r0, r4
 800d232:	4629      	mov	r1, r5
 800d234:	f7f3 fada 	bl	80007ec <__aeabi_ddiv>
 800d238:	4602      	mov	r2, r0
 800d23a:	460b      	mov	r3, r1
 800d23c:	4610      	mov	r0, r2
 800d23e:	4619      	mov	r1, r3
 800d240:	f7f3 fc82 	bl	8000b48 <__aeabi_d2f>
 800d244:	4603      	mov	r3, r0
 800d246:	647b      	str	r3, [r7, #68]	; 0x44
	float cabinRes		=	(Cabin_Bias*adc1AnlgVal[1])/(3.3-adc1AnlgVal[1]);
 800d248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d24a:	4618      	mov	r0, r3
 800d24c:	f7f3 f94c 	bl	80004e8 <__aeabi_f2d>
 800d250:	a37f      	add	r3, pc, #508	; (adr r3, 800d450 <NX7_Sensors_Handler+0x378>)
 800d252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d256:	f7f3 f99f 	bl	8000598 <__aeabi_dmul>
 800d25a:	4602      	mov	r2, r0
 800d25c:	460b      	mov	r3, r1
 800d25e:	4614      	mov	r4, r2
 800d260:	461d      	mov	r5, r3
 800d262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d264:	4618      	mov	r0, r3
 800d266:	f7f3 f93f 	bl	80004e8 <__aeabi_f2d>
 800d26a:	4602      	mov	r2, r0
 800d26c:	460b      	mov	r3, r1
 800d26e:	a172      	add	r1, pc, #456	; (adr r1, 800d438 <NX7_Sensors_Handler+0x360>)
 800d270:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d274:	f7f2 ffd8 	bl	8000228 <__aeabi_dsub>
 800d278:	4602      	mov	r2, r0
 800d27a:	460b      	mov	r3, r1
 800d27c:	4620      	mov	r0, r4
 800d27e:	4629      	mov	r1, r5
 800d280:	f7f3 fab4 	bl	80007ec <__aeabi_ddiv>
 800d284:	4602      	mov	r2, r0
 800d286:	460b      	mov	r3, r1
 800d288:	4610      	mov	r0, r2
 800d28a:	4619      	mov	r1, r3
 800d28c:	f7f3 fc5c 	bl	8000b48 <__aeabi_d2f>
 800d290:	4603      	mov	r3, r0
 800d292:	643b      	str	r3, [r7, #64]	; 0x40
	float waterRes		=	(Water_Bias*adc1AnlgVal[2])/(3.3-adc1AnlgVal[2]);
 800d294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d296:	4618      	mov	r0, r3
 800d298:	f7f3 f926 	bl	80004e8 <__aeabi_f2d>
 800d29c:	f04f 0200 	mov.w	r2, #0
 800d2a0:	4b75      	ldr	r3, [pc, #468]	; (800d478 <NX7_Sensors_Handler+0x3a0>)
 800d2a2:	f7f3 f979 	bl	8000598 <__aeabi_dmul>
 800d2a6:	4602      	mov	r2, r0
 800d2a8:	460b      	mov	r3, r1
 800d2aa:	4614      	mov	r4, r2
 800d2ac:	461d      	mov	r5, r3
 800d2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	f7f3 f919 	bl	80004e8 <__aeabi_f2d>
 800d2b6:	4602      	mov	r2, r0
 800d2b8:	460b      	mov	r3, r1
 800d2ba:	a15f      	add	r1, pc, #380	; (adr r1, 800d438 <NX7_Sensors_Handler+0x360>)
 800d2bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d2c0:	f7f2 ffb2 	bl	8000228 <__aeabi_dsub>
 800d2c4:	4602      	mov	r2, r0
 800d2c6:	460b      	mov	r3, r1
 800d2c8:	4620      	mov	r0, r4
 800d2ca:	4629      	mov	r1, r5
 800d2cc:	f7f3 fa8e 	bl	80007ec <__aeabi_ddiv>
 800d2d0:	4602      	mov	r2, r0
 800d2d2:	460b      	mov	r3, r1
 800d2d4:	4610      	mov	r0, r2
 800d2d6:	4619      	mov	r1, r3
 800d2d8:	f7f3 fc36 	bl	8000b48 <__aeabi_d2f>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	63fb      	str	r3, [r7, #60]	; 0x3c
	float ambientRes	=	(Ambient_Bias*adc1AnlgVal[3])/(3.3-adc1AnlgVal[3]);
 800d2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	f7f3 f900 	bl	80004e8 <__aeabi_f2d>
 800d2e8:	a357      	add	r3, pc, #348	; (adr r3, 800d448 <NX7_Sensors_Handler+0x370>)
 800d2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ee:	f7f3 f953 	bl	8000598 <__aeabi_dmul>
 800d2f2:	4602      	mov	r2, r0
 800d2f4:	460b      	mov	r3, r1
 800d2f6:	4614      	mov	r4, r2
 800d2f8:	461d      	mov	r5, r3
 800d2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2fc:	4618      	mov	r0, r3
 800d2fe:	f7f3 f8f3 	bl	80004e8 <__aeabi_f2d>
 800d302:	4602      	mov	r2, r0
 800d304:	460b      	mov	r3, r1
 800d306:	a14c      	add	r1, pc, #304	; (adr r1, 800d438 <NX7_Sensors_Handler+0x360>)
 800d308:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d30c:	f7f2 ff8c 	bl	8000228 <__aeabi_dsub>
 800d310:	4602      	mov	r2, r0
 800d312:	460b      	mov	r3, r1
 800d314:	4620      	mov	r0, r4
 800d316:	4629      	mov	r1, r5
 800d318:	f7f3 fa68 	bl	80007ec <__aeabi_ddiv>
 800d31c:	4602      	mov	r2, r0
 800d31e:	460b      	mov	r3, r1
 800d320:	4610      	mov	r0, r2
 800d322:	4619      	mov	r1, r3
 800d324:	f7f3 fc10 	bl	8000b48 <__aeabi_d2f>
 800d328:	4603      	mov	r3, r0
 800d32a:	63bb      	str	r3, [r7, #56]	; 0x38
	float solarRes		=	(Solar_Bias*adc1AnlgVal[4])/(3.3-adc1AnlgVal[4]);
 800d32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d32e:	4618      	mov	r0, r3
 800d330:	f7f3 f8da 	bl	80004e8 <__aeabi_f2d>
 800d334:	a344      	add	r3, pc, #272	; (adr r3, 800d448 <NX7_Sensors_Handler+0x370>)
 800d336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d33a:	f7f3 f92d 	bl	8000598 <__aeabi_dmul>
 800d33e:	4602      	mov	r2, r0
 800d340:	460b      	mov	r3, r1
 800d342:	4614      	mov	r4, r2
 800d344:	461d      	mov	r5, r3
 800d346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d348:	4618      	mov	r0, r3
 800d34a:	f7f3 f8cd 	bl	80004e8 <__aeabi_f2d>
 800d34e:	4602      	mov	r2, r0
 800d350:	460b      	mov	r3, r1
 800d352:	a139      	add	r1, pc, #228	; (adr r1, 800d438 <NX7_Sensors_Handler+0x360>)
 800d354:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d358:	f7f2 ff66 	bl	8000228 <__aeabi_dsub>
 800d35c:	4602      	mov	r2, r0
 800d35e:	460b      	mov	r3, r1
 800d360:	4620      	mov	r0, r4
 800d362:	4629      	mov	r1, r5
 800d364:	f7f3 fa42 	bl	80007ec <__aeabi_ddiv>
 800d368:	4602      	mov	r2, r0
 800d36a:	460b      	mov	r3, r1
 800d36c:	4610      	mov	r0, r2
 800d36e:	4619      	mov	r1, r3
 800d370:	f7f3 fbea 	bl	8000b48 <__aeabi_d2f>
 800d374:	4603      	mov	r3, r0
 800d376:	637b      	str	r3, [r7, #52]	; 0x34
	//--> Resistance Logarithm
	float logVal[5];
	logVal[0]	= logf(evapRes);
 800d378:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d37a:	f003 fb57 	bl	8010a2c <logf>
 800d37e:	4603      	mov	r3, r0
 800d380:	60fb      	str	r3, [r7, #12]
	logVal[1]	= logf(cabinRes);
 800d382:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800d384:	f003 fb52 	bl	8010a2c <logf>
 800d388:	4603      	mov	r3, r0
 800d38a:	613b      	str	r3, [r7, #16]
	logVal[2]	= logf(waterRes);
 800d38c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d38e:	f003 fb4d 	bl	8010a2c <logf>
 800d392:	4603      	mov	r3, r0
 800d394:	617b      	str	r3, [r7, #20]
	logVal[3]	= logf(ambientRes);
 800d396:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d398:	f003 fb48 	bl	8010a2c <logf>
 800d39c:	4603      	mov	r3, r0
 800d39e:	61bb      	str	r3, [r7, #24]
	logVal[4]	= logf(solarRes);
 800d3a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d3a2:	f003 fb43 	bl	8010a2c <logf>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	61fb      	str	r3, [r7, #28]
	//--> Steinhart-Hart Equation
	NX7_CCU_Sensor.Evap_Sensor		=	1 / ((Evap_shA)+(Evap_shB*logVal[0])+(Evap_shC*powf(logVal[0],3)));
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f7f3 f89b 	bl	80004e8 <__aeabi_f2d>
 800d3b2:	a329      	add	r3, pc, #164	; (adr r3, 800d458 <NX7_Sensors_Handler+0x380>)
 800d3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b8:	f7f3 f8ee 	bl	8000598 <__aeabi_dmul>
 800d3bc:	4602      	mov	r2, r0
 800d3be:	460b      	mov	r3, r1
 800d3c0:	4610      	mov	r0, r2
 800d3c2:	4619      	mov	r1, r3
 800d3c4:	a326      	add	r3, pc, #152	; (adr r3, 800d460 <NX7_Sensors_Handler+0x388>)
 800d3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ca:	f7f2 ff2f 	bl	800022c <__adddf3>
 800d3ce:	4602      	mov	r2, r0
 800d3d0:	460b      	mov	r3, r1
 800d3d2:	4614      	mov	r4, r2
 800d3d4:	461d      	mov	r5, r3
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	4928      	ldr	r1, [pc, #160]	; (800d47c <NX7_Sensors_Handler+0x3a4>)
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f003 fb56 	bl	8010a8c <powf>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f7f3 f880 	bl	80004e8 <__aeabi_f2d>
 800d3e8:	a31f      	add	r3, pc, #124	; (adr r3, 800d468 <NX7_Sensors_Handler+0x390>)
 800d3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ee:	f7f3 f8d3 	bl	8000598 <__aeabi_dmul>
 800d3f2:	4602      	mov	r2, r0
 800d3f4:	460b      	mov	r3, r1
 800d3f6:	4620      	mov	r0, r4
 800d3f8:	4629      	mov	r1, r5
 800d3fa:	f7f2 ff17 	bl	800022c <__adddf3>
 800d3fe:	4602      	mov	r2, r0
 800d400:	460b      	mov	r3, r1
 800d402:	f04f 0000 	mov.w	r0, #0
 800d406:	491e      	ldr	r1, [pc, #120]	; (800d480 <NX7_Sensors_Handler+0x3a8>)
 800d408:	f7f3 f9f0 	bl	80007ec <__aeabi_ddiv>
 800d40c:	4602      	mov	r2, r0
 800d40e:	460b      	mov	r3, r1
 800d410:	4610      	mov	r0, r2
 800d412:	4619      	mov	r1, r3
 800d414:	f7f3 fb98 	bl	8000b48 <__aeabi_d2f>
 800d418:	4603      	mov	r3, r0
 800d41a:	4a1a      	ldr	r2, [pc, #104]	; (800d484 <NX7_Sensors_Handler+0x3ac>)
 800d41c:	6013      	str	r3, [r2, #0]
	tempCabin						=	1 / ((Cabin_shA)+(Cabin_shB*logVal[1])+(Cabin_shC*powf(logVal[1],3)));
 800d41e:	693b      	ldr	r3, [r7, #16]
 800d420:	4618      	mov	r0, r3
 800d422:	f7f3 f861 	bl	80004e8 <__aeabi_f2d>
 800d426:	a312      	add	r3, pc, #72	; (adr r3, 800d470 <NX7_Sensors_Handler+0x398>)
 800d428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d42c:	f7f3 f8b4 	bl	8000598 <__aeabi_dmul>
 800d430:	4602      	mov	r2, r0
 800d432:	460b      	mov	r3, r1
 800d434:	e028      	b.n	800d488 <NX7_Sensors_Handler+0x3b0>
 800d436:	bf00      	nop
 800d438:	66666666 	.word	0x66666666
 800d43c:	400a6666 	.word	0x400a6666
 800d440:	00000000 	.word	0x00000000
 800d444:	40affe00 	.word	0x40affe00
 800d448:	00000000 	.word	0x00000000
 800d44c:	40b25c00 	.word	0x40b25c00
 800d450:	00000000 	.word	0x00000000
 800d454:	40c38800 	.word	0x40c38800
 800d458:	2cc68de1 	.word	0x2cc68de1
 800d45c:	3f30b542 	.word	0x3f30b542
 800d460:	150a9b10 	.word	0x150a9b10
 800d464:	3f572ef2 	.word	0x3f572ef2
 800d468:	a7a04521 	.word	0xa7a04521
 800d46c:	3e279c84 	.word	0x3e279c84
 800d470:	f9bcc29a 	.word	0xf9bcc29a
 800d474:	3f307b98 	.word	0x3f307b98
 800d478:	408f4000 	.word	0x408f4000
 800d47c:	40400000 	.word	0x40400000
 800d480:	3ff00000 	.word	0x3ff00000
 800d484:	200005a8 	.word	0x200005a8
 800d488:	4610      	mov	r0, r2
 800d48a:	4619      	mov	r1, r3
 800d48c:	a3b2      	add	r3, pc, #712	; (adr r3, 800d758 <NX7_Sensors_Handler+0x680>)
 800d48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d492:	f7f2 fecb 	bl	800022c <__adddf3>
 800d496:	4602      	mov	r2, r0
 800d498:	460b      	mov	r3, r1
 800d49a:	4614      	mov	r4, r2
 800d49c:	461d      	mov	r5, r3
 800d49e:	693b      	ldr	r3, [r7, #16]
 800d4a0:	49c7      	ldr	r1, [pc, #796]	; (800d7c0 <NX7_Sensors_Handler+0x6e8>)
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f003 faf2 	bl	8010a8c <powf>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f7f3 f81c 	bl	80004e8 <__aeabi_f2d>
 800d4b0:	a3ab      	add	r3, pc, #684	; (adr r3, 800d760 <NX7_Sensors_Handler+0x688>)
 800d4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4b6:	f7f3 f86f 	bl	8000598 <__aeabi_dmul>
 800d4ba:	4602      	mov	r2, r0
 800d4bc:	460b      	mov	r3, r1
 800d4be:	4620      	mov	r0, r4
 800d4c0:	4629      	mov	r1, r5
 800d4c2:	f7f2 feb3 	bl	800022c <__adddf3>
 800d4c6:	4602      	mov	r2, r0
 800d4c8:	460b      	mov	r3, r1
 800d4ca:	f04f 0000 	mov.w	r0, #0
 800d4ce:	49bd      	ldr	r1, [pc, #756]	; (800d7c4 <NX7_Sensors_Handler+0x6ec>)
 800d4d0:	f7f3 f98c 	bl	80007ec <__aeabi_ddiv>
 800d4d4:	4602      	mov	r2, r0
 800d4d6:	460b      	mov	r3, r1
 800d4d8:	4610      	mov	r0, r2
 800d4da:	4619      	mov	r1, r3
 800d4dc:	f7f3 fb34 	bl	8000b48 <__aeabi_d2f>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	4ab9      	ldr	r2, [pc, #740]	; (800d7c8 <NX7_Sensors_Handler+0x6f0>)
 800d4e4:	6013      	str	r3, [r2, #0]
	NX7_CCU_Sensor.Water_Sensor		=	1 / ((Water_shA)+(Water_shB*logVal[2])+(Water_shC*powf(logVal[2],3)));
 800d4e6:	697b      	ldr	r3, [r7, #20]
 800d4e8:	4618      	mov	r0, r3
 800d4ea:	f7f2 fffd 	bl	80004e8 <__aeabi_f2d>
 800d4ee:	a39e      	add	r3, pc, #632	; (adr r3, 800d768 <NX7_Sensors_Handler+0x690>)
 800d4f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4f4:	f7f3 f850 	bl	8000598 <__aeabi_dmul>
 800d4f8:	4602      	mov	r2, r0
 800d4fa:	460b      	mov	r3, r1
 800d4fc:	4610      	mov	r0, r2
 800d4fe:	4619      	mov	r1, r3
 800d500:	a39b      	add	r3, pc, #620	; (adr r3, 800d770 <NX7_Sensors_Handler+0x698>)
 800d502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d506:	f7f2 fe91 	bl	800022c <__adddf3>
 800d50a:	4602      	mov	r2, r0
 800d50c:	460b      	mov	r3, r1
 800d50e:	4614      	mov	r4, r2
 800d510:	461d      	mov	r5, r3
 800d512:	697b      	ldr	r3, [r7, #20]
 800d514:	49aa      	ldr	r1, [pc, #680]	; (800d7c0 <NX7_Sensors_Handler+0x6e8>)
 800d516:	4618      	mov	r0, r3
 800d518:	f003 fab8 	bl	8010a8c <powf>
 800d51c:	4603      	mov	r3, r0
 800d51e:	4618      	mov	r0, r3
 800d520:	f7f2 ffe2 	bl	80004e8 <__aeabi_f2d>
 800d524:	a394      	add	r3, pc, #592	; (adr r3, 800d778 <NX7_Sensors_Handler+0x6a0>)
 800d526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d52a:	f7f3 f835 	bl	8000598 <__aeabi_dmul>
 800d52e:	4602      	mov	r2, r0
 800d530:	460b      	mov	r3, r1
 800d532:	4620      	mov	r0, r4
 800d534:	4629      	mov	r1, r5
 800d536:	f7f2 fe79 	bl	800022c <__adddf3>
 800d53a:	4602      	mov	r2, r0
 800d53c:	460b      	mov	r3, r1
 800d53e:	f04f 0000 	mov.w	r0, #0
 800d542:	49a0      	ldr	r1, [pc, #640]	; (800d7c4 <NX7_Sensors_Handler+0x6ec>)
 800d544:	f7f3 f952 	bl	80007ec <__aeabi_ddiv>
 800d548:	4602      	mov	r2, r0
 800d54a:	460b      	mov	r3, r1
 800d54c:	4610      	mov	r0, r2
 800d54e:	4619      	mov	r1, r3
 800d550:	f7f3 fafa 	bl	8000b48 <__aeabi_d2f>
 800d554:	4603      	mov	r3, r0
 800d556:	4a9d      	ldr	r2, [pc, #628]	; (800d7cc <NX7_Sensors_Handler+0x6f4>)
 800d558:	6093      	str	r3, [r2, #8]
	tempAmbient						=	1 / ((Ambient_shA)+(Ambient_shB*logVal[3])+(Ambient_shC*powf(logVal[3],3)));
 800d55a:	69bb      	ldr	r3, [r7, #24]
 800d55c:	4618      	mov	r0, r3
 800d55e:	f7f2 ffc3 	bl	80004e8 <__aeabi_f2d>
 800d562:	a387      	add	r3, pc, #540	; (adr r3, 800d780 <NX7_Sensors_Handler+0x6a8>)
 800d564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d568:	f7f3 f816 	bl	8000598 <__aeabi_dmul>
 800d56c:	4602      	mov	r2, r0
 800d56e:	460b      	mov	r3, r1
 800d570:	4610      	mov	r0, r2
 800d572:	4619      	mov	r1, r3
 800d574:	a384      	add	r3, pc, #528	; (adr r3, 800d788 <NX7_Sensors_Handler+0x6b0>)
 800d576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d57a:	f7f2 fe57 	bl	800022c <__adddf3>
 800d57e:	4602      	mov	r2, r0
 800d580:	460b      	mov	r3, r1
 800d582:	4614      	mov	r4, r2
 800d584:	461d      	mov	r5, r3
 800d586:	69bb      	ldr	r3, [r7, #24]
 800d588:	498d      	ldr	r1, [pc, #564]	; (800d7c0 <NX7_Sensors_Handler+0x6e8>)
 800d58a:	4618      	mov	r0, r3
 800d58c:	f003 fa7e 	bl	8010a8c <powf>
 800d590:	4603      	mov	r3, r0
 800d592:	4618      	mov	r0, r3
 800d594:	f7f2 ffa8 	bl	80004e8 <__aeabi_f2d>
 800d598:	a37d      	add	r3, pc, #500	; (adr r3, 800d790 <NX7_Sensors_Handler+0x6b8>)
 800d59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d59e:	f7f2 fffb 	bl	8000598 <__aeabi_dmul>
 800d5a2:	4602      	mov	r2, r0
 800d5a4:	460b      	mov	r3, r1
 800d5a6:	4620      	mov	r0, r4
 800d5a8:	4629      	mov	r1, r5
 800d5aa:	f7f2 fe3f 	bl	800022c <__adddf3>
 800d5ae:	4602      	mov	r2, r0
 800d5b0:	460b      	mov	r3, r1
 800d5b2:	f04f 0000 	mov.w	r0, #0
 800d5b6:	4983      	ldr	r1, [pc, #524]	; (800d7c4 <NX7_Sensors_Handler+0x6ec>)
 800d5b8:	f7f3 f918 	bl	80007ec <__aeabi_ddiv>
 800d5bc:	4602      	mov	r2, r0
 800d5be:	460b      	mov	r3, r1
 800d5c0:	4610      	mov	r0, r2
 800d5c2:	4619      	mov	r1, r3
 800d5c4:	f7f3 fac0 	bl	8000b48 <__aeabi_d2f>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	4a81      	ldr	r2, [pc, #516]	; (800d7d0 <NX7_Sensors_Handler+0x6f8>)
 800d5cc:	6013      	str	r3, [r2, #0]
	NX7_CCU_Sensor.Solar_Sensor		=	1 / ((Solar_shA)+(Solar_shB*logVal[4])+(Solar_shC*powf(logVal[4],3)));
 800d5ce:	69fb      	ldr	r3, [r7, #28]
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	f7f2 ff89 	bl	80004e8 <__aeabi_f2d>
 800d5d6:	a370      	add	r3, pc, #448	; (adr r3, 800d798 <NX7_Sensors_Handler+0x6c0>)
 800d5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5dc:	f7f2 ffdc 	bl	8000598 <__aeabi_dmul>
 800d5e0:	4602      	mov	r2, r0
 800d5e2:	460b      	mov	r3, r1
 800d5e4:	4610      	mov	r0, r2
 800d5e6:	4619      	mov	r1, r3
 800d5e8:	a36d      	add	r3, pc, #436	; (adr r3, 800d7a0 <NX7_Sensors_Handler+0x6c8>)
 800d5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5ee:	f7f2 fe1d 	bl	800022c <__adddf3>
 800d5f2:	4602      	mov	r2, r0
 800d5f4:	460b      	mov	r3, r1
 800d5f6:	4614      	mov	r4, r2
 800d5f8:	461d      	mov	r5, r3
 800d5fa:	69fb      	ldr	r3, [r7, #28]
 800d5fc:	4970      	ldr	r1, [pc, #448]	; (800d7c0 <NX7_Sensors_Handler+0x6e8>)
 800d5fe:	4618      	mov	r0, r3
 800d600:	f003 fa44 	bl	8010a8c <powf>
 800d604:	4603      	mov	r3, r0
 800d606:	4618      	mov	r0, r3
 800d608:	f7f2 ff6e 	bl	80004e8 <__aeabi_f2d>
 800d60c:	a366      	add	r3, pc, #408	; (adr r3, 800d7a8 <NX7_Sensors_Handler+0x6d0>)
 800d60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d612:	f7f2 ffc1 	bl	8000598 <__aeabi_dmul>
 800d616:	4602      	mov	r2, r0
 800d618:	460b      	mov	r3, r1
 800d61a:	4620      	mov	r0, r4
 800d61c:	4629      	mov	r1, r5
 800d61e:	f7f2 fe05 	bl	800022c <__adddf3>
 800d622:	4602      	mov	r2, r0
 800d624:	460b      	mov	r3, r1
 800d626:	f04f 0000 	mov.w	r0, #0
 800d62a:	4966      	ldr	r1, [pc, #408]	; (800d7c4 <NX7_Sensors_Handler+0x6ec>)
 800d62c:	f7f3 f8de 	bl	80007ec <__aeabi_ddiv>
 800d630:	4602      	mov	r2, r0
 800d632:	460b      	mov	r3, r1
 800d634:	4610      	mov	r0, r2
 800d636:	4619      	mov	r1, r3
 800d638:	f7f3 fa86 	bl	8000b48 <__aeabi_d2f>
 800d63c:	4603      	mov	r3, r0
 800d63e:	4a63      	ldr	r2, [pc, #396]	; (800d7cc <NX7_Sensors_Handler+0x6f4>)
 800d640:	6113      	str	r3, [r2, #16]
	//--> Kelvin to Celsius Conversion
	NX7_CCU_Sensor.Evap_Sensor		-=	273.15;
 800d642:	4b62      	ldr	r3, [pc, #392]	; (800d7cc <NX7_Sensors_Handler+0x6f4>)
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	4618      	mov	r0, r3
 800d648:	f7f2 ff4e 	bl	80004e8 <__aeabi_f2d>
 800d64c:	a358      	add	r3, pc, #352	; (adr r3, 800d7b0 <NX7_Sensors_Handler+0x6d8>)
 800d64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d652:	f7f2 fde9 	bl	8000228 <__aeabi_dsub>
 800d656:	4602      	mov	r2, r0
 800d658:	460b      	mov	r3, r1
 800d65a:	4610      	mov	r0, r2
 800d65c:	4619      	mov	r1, r3
 800d65e:	f7f3 fa73 	bl	8000b48 <__aeabi_d2f>
 800d662:	4603      	mov	r3, r0
 800d664:	4a59      	ldr	r2, [pc, #356]	; (800d7cc <NX7_Sensors_Handler+0x6f4>)
 800d666:	6013      	str	r3, [r2, #0]
	tempCabin						-=	273.15;
 800d668:	4b57      	ldr	r3, [pc, #348]	; (800d7c8 <NX7_Sensors_Handler+0x6f0>)
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	4618      	mov	r0, r3
 800d66e:	f7f2 ff3b 	bl	80004e8 <__aeabi_f2d>
 800d672:	a34f      	add	r3, pc, #316	; (adr r3, 800d7b0 <NX7_Sensors_Handler+0x6d8>)
 800d674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d678:	f7f2 fdd6 	bl	8000228 <__aeabi_dsub>
 800d67c:	4602      	mov	r2, r0
 800d67e:	460b      	mov	r3, r1
 800d680:	4610      	mov	r0, r2
 800d682:	4619      	mov	r1, r3
 800d684:	f7f3 fa60 	bl	8000b48 <__aeabi_d2f>
 800d688:	4603      	mov	r3, r0
 800d68a:	4a4f      	ldr	r2, [pc, #316]	; (800d7c8 <NX7_Sensors_Handler+0x6f0>)
 800d68c:	6013      	str	r3, [r2, #0]
	NX7_CCU_Sensor.Water_Sensor		-=	273.15;
 800d68e:	4b4f      	ldr	r3, [pc, #316]	; (800d7cc <NX7_Sensors_Handler+0x6f4>)
 800d690:	689b      	ldr	r3, [r3, #8]
 800d692:	4618      	mov	r0, r3
 800d694:	f7f2 ff28 	bl	80004e8 <__aeabi_f2d>
 800d698:	a345      	add	r3, pc, #276	; (adr r3, 800d7b0 <NX7_Sensors_Handler+0x6d8>)
 800d69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d69e:	f7f2 fdc3 	bl	8000228 <__aeabi_dsub>
 800d6a2:	4602      	mov	r2, r0
 800d6a4:	460b      	mov	r3, r1
 800d6a6:	4610      	mov	r0, r2
 800d6a8:	4619      	mov	r1, r3
 800d6aa:	f7f3 fa4d 	bl	8000b48 <__aeabi_d2f>
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	4a46      	ldr	r2, [pc, #280]	; (800d7cc <NX7_Sensors_Handler+0x6f4>)
 800d6b2:	6093      	str	r3, [r2, #8]
	tempAmbient						-=	273.15;
 800d6b4:	4b46      	ldr	r3, [pc, #280]	; (800d7d0 <NX7_Sensors_Handler+0x6f8>)
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	f7f2 ff15 	bl	80004e8 <__aeabi_f2d>
 800d6be:	a33c      	add	r3, pc, #240	; (adr r3, 800d7b0 <NX7_Sensors_Handler+0x6d8>)
 800d6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6c4:	f7f2 fdb0 	bl	8000228 <__aeabi_dsub>
 800d6c8:	4602      	mov	r2, r0
 800d6ca:	460b      	mov	r3, r1
 800d6cc:	4610      	mov	r0, r2
 800d6ce:	4619      	mov	r1, r3
 800d6d0:	f7f3 fa3a 	bl	8000b48 <__aeabi_d2f>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	4a3e      	ldr	r2, [pc, #248]	; (800d7d0 <NX7_Sensors_Handler+0x6f8>)
 800d6d8:	6013      	str	r3, [r2, #0]
	NX7_CCU_Sensor.Solar_Sensor		-=	273.15;
 800d6da:	4b3c      	ldr	r3, [pc, #240]	; (800d7cc <NX7_Sensors_Handler+0x6f4>)
 800d6dc:	691b      	ldr	r3, [r3, #16]
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f7f2 ff02 	bl	80004e8 <__aeabi_f2d>
 800d6e4:	a332      	add	r3, pc, #200	; (adr r3, 800d7b0 <NX7_Sensors_Handler+0x6d8>)
 800d6e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6ea:	f7f2 fd9d 	bl	8000228 <__aeabi_dsub>
 800d6ee:	4602      	mov	r2, r0
 800d6f0:	460b      	mov	r3, r1
 800d6f2:	4610      	mov	r0, r2
 800d6f4:	4619      	mov	r1, r3
 800d6f6:	f7f3 fa27 	bl	8000b48 <__aeabi_d2f>
 800d6fa:	4603      	mov	r3, r0
 800d6fc:	4a33      	ldr	r2, [pc, #204]	; (800d7cc <NX7_Sensors_Handler+0x6f4>)
 800d6fe:	6113      	str	r3, [r2, #16]
	//--> tempCabin & tempAmbient
	if(fabsf(tempCabin-NX7_CCU_Sensor.Cabin_Sensor) > 0.20)
 800d700:	4b31      	ldr	r3, [pc, #196]	; (800d7c8 <NX7_Sensors_Handler+0x6f0>)
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	4a31      	ldr	r2, [pc, #196]	; (800d7cc <NX7_Sensors_Handler+0x6f4>)
 800d706:	6852      	ldr	r2, [r2, #4]
 800d708:	4611      	mov	r1, r2
 800d70a:	4618      	mov	r0, r3
 800d70c:	f7f3 fa70 	bl	8000bf0 <__aeabi_fsub>
 800d710:	4603      	mov	r3, r0
 800d712:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d716:	4618      	mov	r0, r3
 800d718:	f7f2 fee6 	bl	80004e8 <__aeabi_f2d>
 800d71c:	a326      	add	r3, pc, #152	; (adr r3, 800d7b8 <NX7_Sensors_Handler+0x6e0>)
 800d71e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d722:	f7f3 f9c9 	bl	8000ab8 <__aeabi_dcmpgt>
 800d726:	4603      	mov	r3, r0
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d003      	beq.n	800d734 <NX7_Sensors_Handler+0x65c>
	{
		NX7_CCU_Sensor.Cabin_Sensor = tempCabin;
 800d72c:	4b26      	ldr	r3, [pc, #152]	; (800d7c8 <NX7_Sensors_Handler+0x6f0>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	4a26      	ldr	r2, [pc, #152]	; (800d7cc <NX7_Sensors_Handler+0x6f4>)
 800d732:	6053      	str	r3, [r2, #4]
	}
	if(fabsf(tempAmbient-NX7_CCU_Sensor.Ambient_Sensor) > 0.50)
 800d734:	4b26      	ldr	r3, [pc, #152]	; (800d7d0 <NX7_Sensors_Handler+0x6f8>)
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	4a24      	ldr	r2, [pc, #144]	; (800d7cc <NX7_Sensors_Handler+0x6f4>)
 800d73a:	68d2      	ldr	r2, [r2, #12]
 800d73c:	4611      	mov	r1, r2
 800d73e:	4618      	mov	r0, r3
 800d740:	f7f3 fa56 	bl	8000bf0 <__aeabi_fsub>
 800d744:	4603      	mov	r3, r0
 800d746:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d74a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800d74e:	4618      	mov	r0, r3
 800d750:	f7f3 fd14 	bl	800117c <__aeabi_fcmpgt>
 800d754:	e03e      	b.n	800d7d4 <NX7_Sensors_Handler+0x6fc>
 800d756:	bf00      	nop
 800d758:	62048fd1 	.word	0x62048fd1
 800d75c:	3f50febb 	.word	0x3f50febb
 800d760:	c3921495 	.word	0xc3921495
 800d764:	3df6056f 	.word	0x3df6056f
 800d768:	ff246e11 	.word	0xff246e11
 800d76c:	3f3093c6 	.word	0x3f3093c6
 800d770:	ce778815 	.word	0xce778815
 800d774:	3f561af9 	.word	0x3f561af9
 800d778:	8ea43b38 	.word	0x8ea43b38
 800d77c:	3e86f097 	.word	0x3e86f097
 800d780:	28a567c5 	.word	0x28a567c5
 800d784:	3f32e726 	.word	0x3f32e726
 800d788:	ecd22f3c 	.word	0xecd22f3c
 800d78c:	3f529db7 	.word	0x3f529db7
 800d790:	cc7f1d71 	.word	0xcc7f1d71
 800d794:	be1d0156 	.word	0xbe1d0156
 800d798:	ad70d4bd 	.word	0xad70d4bd
 800d79c:	3f30962f 	.word	0x3f30962f
 800d7a0:	48274543 	.word	0x48274543
 800d7a4:	3f50c1b3 	.word	0x3f50c1b3
 800d7a8:	fa322917 	.word	0xfa322917
 800d7ac:	3df203d1 	.word	0x3df203d1
 800d7b0:	66666666 	.word	0x66666666
 800d7b4:	40711266 	.word	0x40711266
 800d7b8:	9999999a 	.word	0x9999999a
 800d7bc:	3fc99999 	.word	0x3fc99999
 800d7c0:	40400000 	.word	0x40400000
 800d7c4:	3ff00000 	.word	0x3ff00000
 800d7c8:	200005bc 	.word	0x200005bc
 800d7cc:	200005a8 	.word	0x200005a8
 800d7d0:	200005a4 	.word	0x200005a4
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d003      	beq.n	800d7e2 <NX7_Sensors_Handler+0x70a>
	{
		NX7_CCU_Sensor.Ambient_Sensor = tempAmbient;
 800d7da:	4b75      	ldr	r3, [pc, #468]	; (800d9b0 <NX7_Sensors_Handler+0x8d8>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	4a75      	ldr	r2, [pc, #468]	; (800d9b4 <NX7_Sensors_Handler+0x8dc>)
 800d7e0:	60d3      	str	r3, [r2, #12]
	}
	//--> Sensor State Detection
	if((adc1AnlgVal[0]<0.10)||(adc1AnlgVal[0]>3.20))	{Evap_Sensor_State = Sensor_Error;}
 800d7e2:	6a3b      	ldr	r3, [r7, #32]
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	f7f2 fe7f 	bl	80004e8 <__aeabi_f2d>
 800d7ea:	a36d      	add	r3, pc, #436	; (adr r3, 800d9a0 <NX7_Sensors_Handler+0x8c8>)
 800d7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7f0:	f7f3 f944 	bl	8000a7c <__aeabi_dcmplt>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d10b      	bne.n	800d812 <NX7_Sensors_Handler+0x73a>
 800d7fa:	6a3b      	ldr	r3, [r7, #32]
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f7f2 fe73 	bl	80004e8 <__aeabi_f2d>
 800d802:	a369      	add	r3, pc, #420	; (adr r3, 800d9a8 <NX7_Sensors_Handler+0x8d0>)
 800d804:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d808:	f7f3 f956 	bl	8000ab8 <__aeabi_dcmpgt>
 800d80c:	4603      	mov	r3, r0
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d003      	beq.n	800d81a <NX7_Sensors_Handler+0x742>
 800d812:	4b69      	ldr	r3, [pc, #420]	; (800d9b8 <NX7_Sensors_Handler+0x8e0>)
 800d814:	2201      	movs	r2, #1
 800d816:	701a      	strb	r2, [r3, #0]
 800d818:	e002      	b.n	800d820 <NX7_Sensors_Handler+0x748>
	else												{Evap_Sensor_State = Sensor_OK;}
 800d81a:	4b67      	ldr	r3, [pc, #412]	; (800d9b8 <NX7_Sensors_Handler+0x8e0>)
 800d81c:	2200      	movs	r2, #0
 800d81e:	701a      	strb	r2, [r3, #0]
	if((adc1AnlgVal[1]<0.10)||(adc1AnlgVal[1]>3.20))	{Cabin_Sensor_State = Sensor_Error;}
 800d820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d822:	4618      	mov	r0, r3
 800d824:	f7f2 fe60 	bl	80004e8 <__aeabi_f2d>
 800d828:	a35d      	add	r3, pc, #372	; (adr r3, 800d9a0 <NX7_Sensors_Handler+0x8c8>)
 800d82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d82e:	f7f3 f925 	bl	8000a7c <__aeabi_dcmplt>
 800d832:	4603      	mov	r3, r0
 800d834:	2b00      	cmp	r3, #0
 800d836:	d10b      	bne.n	800d850 <NX7_Sensors_Handler+0x778>
 800d838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d83a:	4618      	mov	r0, r3
 800d83c:	f7f2 fe54 	bl	80004e8 <__aeabi_f2d>
 800d840:	a359      	add	r3, pc, #356	; (adr r3, 800d9a8 <NX7_Sensors_Handler+0x8d0>)
 800d842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d846:	f7f3 f937 	bl	8000ab8 <__aeabi_dcmpgt>
 800d84a:	4603      	mov	r3, r0
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d003      	beq.n	800d858 <NX7_Sensors_Handler+0x780>
 800d850:	4b5a      	ldr	r3, [pc, #360]	; (800d9bc <NX7_Sensors_Handler+0x8e4>)
 800d852:	2201      	movs	r2, #1
 800d854:	701a      	strb	r2, [r3, #0]
 800d856:	e002      	b.n	800d85e <NX7_Sensors_Handler+0x786>
	else												{Cabin_Sensor_State = Sensor_OK;}
 800d858:	4b58      	ldr	r3, [pc, #352]	; (800d9bc <NX7_Sensors_Handler+0x8e4>)
 800d85a:	2200      	movs	r2, #0
 800d85c:	701a      	strb	r2, [r3, #0]
	if((adc1AnlgVal[2]<0.10)||(adc1AnlgVal[2]>3.20))	{Water_Sensor_State = Sensor_Error;}
 800d85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d860:	4618      	mov	r0, r3
 800d862:	f7f2 fe41 	bl	80004e8 <__aeabi_f2d>
 800d866:	a34e      	add	r3, pc, #312	; (adr r3, 800d9a0 <NX7_Sensors_Handler+0x8c8>)
 800d868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d86c:	f7f3 f906 	bl	8000a7c <__aeabi_dcmplt>
 800d870:	4603      	mov	r3, r0
 800d872:	2b00      	cmp	r3, #0
 800d874:	d10b      	bne.n	800d88e <NX7_Sensors_Handler+0x7b6>
 800d876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d878:	4618      	mov	r0, r3
 800d87a:	f7f2 fe35 	bl	80004e8 <__aeabi_f2d>
 800d87e:	a34a      	add	r3, pc, #296	; (adr r3, 800d9a8 <NX7_Sensors_Handler+0x8d0>)
 800d880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d884:	f7f3 f918 	bl	8000ab8 <__aeabi_dcmpgt>
 800d888:	4603      	mov	r3, r0
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d003      	beq.n	800d896 <NX7_Sensors_Handler+0x7be>
 800d88e:	4b4c      	ldr	r3, [pc, #304]	; (800d9c0 <NX7_Sensors_Handler+0x8e8>)
 800d890:	2201      	movs	r2, #1
 800d892:	701a      	strb	r2, [r3, #0]
 800d894:	e002      	b.n	800d89c <NX7_Sensors_Handler+0x7c4>
	else												{Water_Sensor_State = Sensor_OK;}
 800d896:	4b4a      	ldr	r3, [pc, #296]	; (800d9c0 <NX7_Sensors_Handler+0x8e8>)
 800d898:	2200      	movs	r2, #0
 800d89a:	701a      	strb	r2, [r3, #0]
	if((adc1AnlgVal[3]<0.10)||(adc1AnlgVal[3]>3.20))	{Ambient_Sensor_State = Sensor_Error;}
 800d89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f7f2 fe22 	bl	80004e8 <__aeabi_f2d>
 800d8a4:	a33e      	add	r3, pc, #248	; (adr r3, 800d9a0 <NX7_Sensors_Handler+0x8c8>)
 800d8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8aa:	f7f3 f8e7 	bl	8000a7c <__aeabi_dcmplt>
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d10b      	bne.n	800d8cc <NX7_Sensors_Handler+0x7f4>
 800d8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f7f2 fe16 	bl	80004e8 <__aeabi_f2d>
 800d8bc:	a33a      	add	r3, pc, #232	; (adr r3, 800d9a8 <NX7_Sensors_Handler+0x8d0>)
 800d8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8c2:	f7f3 f8f9 	bl	8000ab8 <__aeabi_dcmpgt>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d003      	beq.n	800d8d4 <NX7_Sensors_Handler+0x7fc>
 800d8cc:	4b3d      	ldr	r3, [pc, #244]	; (800d9c4 <NX7_Sensors_Handler+0x8ec>)
 800d8ce:	2201      	movs	r2, #1
 800d8d0:	701a      	strb	r2, [r3, #0]
 800d8d2:	e002      	b.n	800d8da <NX7_Sensors_Handler+0x802>
	else												{Ambient_Sensor_State = Sensor_OK;}
 800d8d4:	4b3b      	ldr	r3, [pc, #236]	; (800d9c4 <NX7_Sensors_Handler+0x8ec>)
 800d8d6:	2200      	movs	r2, #0
 800d8d8:	701a      	strb	r2, [r3, #0]
	if((adc1AnlgVal[4]<0.10)||(adc1AnlgVal[4]>3.20))	{Solar_Sensor_State = Sensor_Error;}
 800d8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f7f2 fe03 	bl	80004e8 <__aeabi_f2d>
 800d8e2:	a32f      	add	r3, pc, #188	; (adr r3, 800d9a0 <NX7_Sensors_Handler+0x8c8>)
 800d8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8e8:	f7f3 f8c8 	bl	8000a7c <__aeabi_dcmplt>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d10b      	bne.n	800d90a <NX7_Sensors_Handler+0x832>
 800d8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	f7f2 fdf7 	bl	80004e8 <__aeabi_f2d>
 800d8fa:	a32b      	add	r3, pc, #172	; (adr r3, 800d9a8 <NX7_Sensors_Handler+0x8d0>)
 800d8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d900:	f7f3 f8da 	bl	8000ab8 <__aeabi_dcmpgt>
 800d904:	4603      	mov	r3, r0
 800d906:	2b00      	cmp	r3, #0
 800d908:	d003      	beq.n	800d912 <NX7_Sensors_Handler+0x83a>
 800d90a:	4b2f      	ldr	r3, [pc, #188]	; (800d9c8 <NX7_Sensors_Handler+0x8f0>)
 800d90c:	2201      	movs	r2, #1
 800d90e:	701a      	strb	r2, [r3, #0]
 800d910:	e002      	b.n	800d918 <NX7_Sensors_Handler+0x840>
	else												{Solar_Sensor_State = Sensor_OK;}
 800d912:	4b2d      	ldr	r3, [pc, #180]	; (800d9c8 <NX7_Sensors_Handler+0x8f0>)
 800d914:	2200      	movs	r2, #0
 800d916:	701a      	strb	r2, [r3, #0]
	//--> Sensor Default Value
	if(Evap_Sensor_State == Sensor_Error)				{NX7_CCU_Sensor.Evap_Sensor = Evap_Default;}
 800d918:	4b27      	ldr	r3, [pc, #156]	; (800d9b8 <NX7_Sensors_Handler+0x8e0>)
 800d91a:	781b      	ldrb	r3, [r3, #0]
 800d91c:	2b01      	cmp	r3, #1
 800d91e:	d102      	bne.n	800d926 <NX7_Sensors_Handler+0x84e>
 800d920:	4b24      	ldr	r3, [pc, #144]	; (800d9b4 <NX7_Sensors_Handler+0x8dc>)
 800d922:	4a2a      	ldr	r2, [pc, #168]	; (800d9cc <NX7_Sensors_Handler+0x8f4>)
 800d924:	601a      	str	r2, [r3, #0]
	if(Cabin_Sensor_State == Sensor_Error)				{NX7_CCU_Sensor.Cabin_Sensor = Cabin_Default;}
 800d926:	4b25      	ldr	r3, [pc, #148]	; (800d9bc <NX7_Sensors_Handler+0x8e4>)
 800d928:	781b      	ldrb	r3, [r3, #0]
 800d92a:	2b01      	cmp	r3, #1
 800d92c:	d102      	bne.n	800d934 <NX7_Sensors_Handler+0x85c>
 800d92e:	4b21      	ldr	r3, [pc, #132]	; (800d9b4 <NX7_Sensors_Handler+0x8dc>)
 800d930:	4a27      	ldr	r2, [pc, #156]	; (800d9d0 <NX7_Sensors_Handler+0x8f8>)
 800d932:	605a      	str	r2, [r3, #4]
	if(Water_Sensor_State == Sensor_Error)				{NX7_CCU_Sensor.Water_Sensor = Water_Default;}
 800d934:	4b22      	ldr	r3, [pc, #136]	; (800d9c0 <NX7_Sensors_Handler+0x8e8>)
 800d936:	781b      	ldrb	r3, [r3, #0]
 800d938:	2b01      	cmp	r3, #1
 800d93a:	d102      	bne.n	800d942 <NX7_Sensors_Handler+0x86a>
 800d93c:	4b1d      	ldr	r3, [pc, #116]	; (800d9b4 <NX7_Sensors_Handler+0x8dc>)
 800d93e:	4a25      	ldr	r2, [pc, #148]	; (800d9d4 <NX7_Sensors_Handler+0x8fc>)
 800d940:	609a      	str	r2, [r3, #8]
	if(Ambient_Sensor_State == Sensor_Error)			{NX7_CCU_Sensor.Ambient_Sensor = Ambient_Default;}
 800d942:	4b20      	ldr	r3, [pc, #128]	; (800d9c4 <NX7_Sensors_Handler+0x8ec>)
 800d944:	781b      	ldrb	r3, [r3, #0]
 800d946:	2b01      	cmp	r3, #1
 800d948:	d102      	bne.n	800d950 <NX7_Sensors_Handler+0x878>
 800d94a:	4b1a      	ldr	r3, [pc, #104]	; (800d9b4 <NX7_Sensors_Handler+0x8dc>)
 800d94c:	4a20      	ldr	r2, [pc, #128]	; (800d9d0 <NX7_Sensors_Handler+0x8f8>)
 800d94e:	60da      	str	r2, [r3, #12]
	if(Solar_Sensor_State == Sensor_Error)				{NX7_CCU_Sensor.Solar_Sensor = Solar_Default;}
 800d950:	4b1d      	ldr	r3, [pc, #116]	; (800d9c8 <NX7_Sensors_Handler+0x8f0>)
 800d952:	781b      	ldrb	r3, [r3, #0]
 800d954:	2b01      	cmp	r3, #1
 800d956:	d102      	bne.n	800d95e <NX7_Sensors_Handler+0x886>
 800d958:	4b16      	ldr	r3, [pc, #88]	; (800d9b4 <NX7_Sensors_Handler+0x8dc>)
 800d95a:	4a1f      	ldr	r2, [pc, #124]	; (800d9d8 <NX7_Sensors_Handler+0x900>)
 800d95c:	611a      	str	r2, [r3, #16]
	//--> AC_Temp_State Detection
	if(NX7_CCU_Sensor.Evap_Sensor < 0.5)				{NX7_AC_Temp_State = AC_Temp_OFF;}
 800d95e:	4b15      	ldr	r3, [pc, #84]	; (800d9b4 <NX7_Sensors_Handler+0x8dc>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800d966:	4618      	mov	r0, r3
 800d968:	f7f3 fbea 	bl	8001140 <__aeabi_fcmplt>
 800d96c:	4603      	mov	r3, r0
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d002      	beq.n	800d978 <NX7_Sensors_Handler+0x8a0>
 800d972:	4b1a      	ldr	r3, [pc, #104]	; (800d9dc <NX7_Sensors_Handler+0x904>)
 800d974:	2200      	movs	r2, #0
 800d976:	701a      	strb	r2, [r3, #0]
	if(NX7_CCU_Sensor.Evap_Sensor > 3.0)				{NX7_AC_Temp_State = AC_Temp_ON;}
 800d978:	4b0e      	ldr	r3, [pc, #56]	; (800d9b4 <NX7_Sensors_Handler+0x8dc>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	4918      	ldr	r1, [pc, #96]	; (800d9e0 <NX7_Sensors_Handler+0x908>)
 800d97e:	4618      	mov	r0, r3
 800d980:	f7f3 fbfc 	bl	800117c <__aeabi_fcmpgt>
 800d984:	4603      	mov	r3, r0
 800d986:	2b00      	cmp	r3, #0
 800d988:	d100      	bne.n	800d98c <NX7_Sensors_Handler+0x8b4>
}
 800d98a:	e002      	b.n	800d992 <NX7_Sensors_Handler+0x8ba>
	if(NX7_CCU_Sensor.Evap_Sensor > 3.0)				{NX7_AC_Temp_State = AC_Temp_ON;}
 800d98c:	4b13      	ldr	r3, [pc, #76]	; (800d9dc <NX7_Sensors_Handler+0x904>)
 800d98e:	2201      	movs	r2, #1
 800d990:	701a      	strb	r2, [r3, #0]
}
 800d992:	bf00      	nop
 800d994:	3748      	adds	r7, #72	; 0x48
 800d996:	46bd      	mov	sp, r7
 800d998:	bdb0      	pop	{r4, r5, r7, pc}
 800d99a:	bf00      	nop
 800d99c:	f3af 8000 	nop.w
 800d9a0:	9999999a 	.word	0x9999999a
 800d9a4:	3fb99999 	.word	0x3fb99999
 800d9a8:	9999999a 	.word	0x9999999a
 800d9ac:	40099999 	.word	0x40099999
 800d9b0:	200005a4 	.word	0x200005a4
 800d9b4:	200005a8 	.word	0x200005a8
 800d9b8:	20000212 	.word	0x20000212
 800d9bc:	20000213 	.word	0x20000213
 800d9c0:	20000214 	.word	0x20000214
 800d9c4:	2000000d 	.word	0x2000000d
 800d9c8:	20000215 	.word	0x20000215
 800d9cc:	41200000 	.word	0x41200000
 800d9d0:	41c80000 	.word	0x41c80000
 800d9d4:	42960000 	.word	0x42960000
 800d9d8:	42c80000 	.word	0x42c80000
 800d9dc:	20000210 	.word	0x20000210
 800d9e0:	40400000 	.word	0x40400000

0800d9e4 <HAL_TIM_PeriodElapsedCallback>:
extern  Mode_SEG_State  NX7_Mode_SEG_State;

/* Functions body *************************************************************/
/* TIM ISR Handler -----------------------------------------------------------*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b082      	sub	sp, #8
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
	/* TIM1 ISR Handler ------------------------------------------------------*/
	if(htim->Instance == TIM1)
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	4a1e      	ldr	r2, [pc, #120]	; (800da6c <HAL_TIM_PeriodElapsedCallback+0x88>)
 800d9f2:	4293      	cmp	r3, r2
 800d9f4:	d102      	bne.n	800d9fc <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		NX7_R_DEF_State = R_DEF_OFF;
 800d9f6:	4b1e      	ldr	r3, [pc, #120]	; (800da70 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	701a      	strb	r2, [r3, #0]
	}
	/* TIM6 ISR Handler ------------------------------------------------------*/
	if(htim->Instance == TIM6)
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	4a1c      	ldr	r2, [pc, #112]	; (800da74 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800da02:	4293      	cmp	r3, r2
 800da04:	d10c      	bne.n	800da20 <HAL_TIM_PeriodElapsedCallback+0x3c>
	{
		Airmix_MA_Lock_State = MA_Lock_Error;
 800da06:	4b1c      	ldr	r3, [pc, #112]	; (800da78 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800da08:	2201      	movs	r2, #1
 800da0a:	701a      	strb	r2, [r3, #0]
		NX7_Airmix_MA_STP();
 800da0c:	f7f9 fc3c 	bl	8007288 <NX7_Airmix_MA_STP>
		HAL_TIM_Base_Stop_IT(&htim6);
 800da10:	481a      	ldr	r0, [pc, #104]	; (800da7c <HAL_TIM_PeriodElapsedCallback+0x98>)
 800da12:	f7f8 f8f5 	bl	8005c00 <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_CLEAR_FLAG(&htim6, TIM_FLAG_UPDATE);
 800da16:	4b19      	ldr	r3, [pc, #100]	; (800da7c <HAL_TIM_PeriodElapsedCallback+0x98>)
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	f06f 0201 	mvn.w	r2, #1
 800da1e:	611a      	str	r2, [r3, #16]
	}
	/* TIM7 ISR Handler ------------------------------------------------------*/
	if(htim->Instance == TIM7)
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	4a16      	ldr	r2, [pc, #88]	; (800da80 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800da26:	4293      	cmp	r3, r2
 800da28:	d10c      	bne.n	800da44 <HAL_TIM_PeriodElapsedCallback+0x60>
	{
		Mode_MA_Lock_State = MA_Lock_Error;
 800da2a:	4b16      	ldr	r3, [pc, #88]	; (800da84 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800da2c:	2201      	movs	r2, #1
 800da2e:	701a      	strb	r2, [r3, #0]
		NX7_Mode_MA_STP();
 800da30:	f7fd f8e4 	bl	800abfc <NX7_Mode_MA_STP>
		HAL_TIM_Base_Stop_IT(&htim7);
 800da34:	4814      	ldr	r0, [pc, #80]	; (800da88 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800da36:	f7f8 f8e3 	bl	8005c00 <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_CLEAR_FLAG(&htim7, TIM_FLAG_UPDATE);
 800da3a:	4b13      	ldr	r3, [pc, #76]	; (800da88 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	f06f 0201 	mvn.w	r2, #1
 800da42:	611a      	str	r2, [r3, #16]
	}
	/* TIM16 ISR Handler ------------------------------------------------------*/
	if(htim->Instance == TIM16)
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	4a10      	ldr	r2, [pc, #64]	; (800da8c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800da4a:	4293      	cmp	r3, r2
 800da4c:	d10a      	bne.n	800da64 <HAL_TIM_PeriodElapsedCallback+0x80>
	{
		NX7_Mode_SEG_State = Mode_SEG_OFF;
 800da4e:	4b10      	ldr	r3, [pc, #64]	; (800da90 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800da50:	2200      	movs	r2, #0
 800da52:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim16);
 800da54:	480f      	ldr	r0, [pc, #60]	; (800da94 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800da56:	f7f8 f8d3 	bl	8005c00 <HAL_TIM_Base_Stop_IT>
		__HAL_TIM_CLEAR_FLAG(&htim16, TIM_FLAG_UPDATE);
 800da5a:	4b0e      	ldr	r3, [pc, #56]	; (800da94 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	f06f 0201 	mvn.w	r2, #1
 800da62:	611a      	str	r2, [r3, #16]
	}
}
 800da64:	bf00      	nop
 800da66:	3708      	adds	r7, #8
 800da68:	46bd      	mov	sp, r7
 800da6a:	bd80      	pop	{r7, pc}
 800da6c:	40012c00 	.word	0x40012c00
 800da70:	20000211 	.word	0x20000211
 800da74:	40001000 	.word	0x40001000
 800da78:	20000216 	.word	0x20000216
 800da7c:	200003fc 	.word	0x200003fc
 800da80:	40001400 	.word	0x40001400
 800da84:	20000217 	.word	0x20000217
 800da88:	2000052c 	.word	0x2000052c
 800da8c:	40014400 	.word	0x40014400
 800da90:	2000021c 	.word	0x2000021c
 800da94:	200004e4 	.word	0x200004e4

0800da98 <NX7_TLE_Init>:
extern	SPI_HandleTypeDef	hspi1;

/* Functions body *************************************************************/
/* NX7_TLE_Init --------------------------------------------------------------*/
void NX7_TLE_Init(void)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	af00      	add	r7, sp, #0
	TLE_EN_SET;		NX7_Delay(100000);
 800da9c:	2201      	movs	r2, #1
 800da9e:	2140      	movs	r1, #64	; 0x40
 800daa0:	4803      	ldr	r0, [pc, #12]	; (800dab0 <NX7_TLE_Init+0x18>)
 800daa2:	f7f6 f804 	bl	8003aae <HAL_GPIO_WritePin>
 800daa6:	4803      	ldr	r0, [pc, #12]	; (800dab4 <NX7_TLE_Init+0x1c>)
 800daa8:	f7fa f852 	bl	8007b50 <NX7_Delay>
	//NX7_TLE_Ctrl_Register_Write(FW_OL_CTRL, 0xFC);	// Free-wheeling diodes
}
 800daac:	bf00      	nop
 800daae:	bd80      	pop	{r7, pc}
 800dab0:	40010c00 	.word	0x40010c00
 800dab4:	000186a0 	.word	0x000186a0

0800dab8 <NX7_TLE_DeInit>:

/* NX7_TLE_DeInit ------------------------------------------------------------*/
void NX7_TLE_DeInit(void)
{
 800dab8:	b580      	push	{r7, lr}
 800daba:	af00      	add	r7, sp, #0
	TLE_EN_CLR;
 800dabc:	2200      	movs	r2, #0
 800dabe:	2140      	movs	r1, #64	; 0x40
 800dac0:	4802      	ldr	r0, [pc, #8]	; (800dacc <NX7_TLE_DeInit+0x14>)
 800dac2:	f7f5 fff4 	bl	8003aae <HAL_GPIO_WritePin>
}
 800dac6:	bf00      	nop
 800dac8:	bd80      	pop	{r7, pc}
 800daca:	bf00      	nop
 800dacc:	40010c00 	.word	0x40010c00

0800dad0 <NX7_TLE_Ctrl_Register_Read>:

/* NX7_TLE_Ctrl_Register_Read ------------------------------------------------*/
uint8_t NX7_TLE_Ctrl_Register_Read(uint8_t address)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b086      	sub	sp, #24
 800dad4:	af02      	add	r7, sp, #8
 800dad6:	4603      	mov	r3, r0
 800dad8:	71fb      	strb	r3, [r7, #7]
	uint8_t		rxData[2];
	uint8_t		txData[2] = {address,0xFF};
 800dada:	79fb      	ldrb	r3, [r7, #7]
 800dadc:	723b      	strb	r3, [r7, #8]
 800dade:	23ff      	movs	r3, #255	; 0xff
 800dae0:	727b      	strb	r3, [r7, #9]
	TLE_CSN_CLR;	NX7_Delay(500);
 800dae2:	2200      	movs	r2, #0
 800dae4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800dae8:	4811      	ldr	r0, [pc, #68]	; (800db30 <NX7_TLE_Ctrl_Register_Read+0x60>)
 800daea:	f7f5 ffe0 	bl	8003aae <HAL_GPIO_WritePin>
 800daee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800daf2:	f7fa f82d 	bl	8007b50 <NX7_Delay>
	HAL_SPI_TransmitReceive(&hspi1, txData, rxData, 2, 10);
 800daf6:	f107 020c 	add.w	r2, r7, #12
 800dafa:	f107 0108 	add.w	r1, r7, #8
 800dafe:	230a      	movs	r3, #10
 800db00:	9300      	str	r3, [sp, #0]
 800db02:	2302      	movs	r3, #2
 800db04:	480b      	ldr	r0, [pc, #44]	; (800db34 <NX7_TLE_Ctrl_Register_Read+0x64>)
 800db06:	f7f7 fd37 	bl	8005578 <HAL_SPI_TransmitReceive>
	NX7_Delay(500);	TLE_CSN_SET;	NX7_Delay(500);
 800db0a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800db0e:	f7fa f81f 	bl	8007b50 <NX7_Delay>
 800db12:	2201      	movs	r2, #1
 800db14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800db18:	4805      	ldr	r0, [pc, #20]	; (800db30 <NX7_TLE_Ctrl_Register_Read+0x60>)
 800db1a:	f7f5 ffc8 	bl	8003aae <HAL_GPIO_WritePin>
 800db1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800db22:	f7fa f815 	bl	8007b50 <NX7_Delay>
	return rxData[1];
 800db26:	7b7b      	ldrb	r3, [r7, #13]
}
 800db28:	4618      	mov	r0, r3
 800db2a:	3710      	adds	r7, #16
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd80      	pop	{r7, pc}
 800db30:	40010800 	.word	0x40010800
 800db34:	2000048c 	.word	0x2000048c

0800db38 <NX7_TLE_Ctrl_Register_Write>:

/* NX7_TLE_Ctrl_Register_Write -----------------------------------------------*/
uint8_t NX7_TLE_Ctrl_Register_Write(uint8_t address, uint8_t data)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b086      	sub	sp, #24
 800db3c:	af02      	add	r7, sp, #8
 800db3e:	4603      	mov	r3, r0
 800db40:	460a      	mov	r2, r1
 800db42:	71fb      	strb	r3, [r7, #7]
 800db44:	4613      	mov	r3, r2
 800db46:	71bb      	strb	r3, [r7, #6]
	uint8_t		rxData[2];
	uint8_t		txData[2] = {address|0x80,data};
 800db48:	79fb      	ldrb	r3, [r7, #7]
 800db4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800db4e:	b2db      	uxtb	r3, r3
 800db50:	723b      	strb	r3, [r7, #8]
 800db52:	79bb      	ldrb	r3, [r7, #6]
 800db54:	727b      	strb	r3, [r7, #9]
	TLE_CSN_CLR;	NX7_Delay(500);
 800db56:	2200      	movs	r2, #0
 800db58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800db5c:	4811      	ldr	r0, [pc, #68]	; (800dba4 <NX7_TLE_Ctrl_Register_Write+0x6c>)
 800db5e:	f7f5 ffa6 	bl	8003aae <HAL_GPIO_WritePin>
 800db62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800db66:	f7f9 fff3 	bl	8007b50 <NX7_Delay>
	HAL_SPI_TransmitReceive(&hspi1, txData, rxData, 2, 10);
 800db6a:	f107 020c 	add.w	r2, r7, #12
 800db6e:	f107 0108 	add.w	r1, r7, #8
 800db72:	230a      	movs	r3, #10
 800db74:	9300      	str	r3, [sp, #0]
 800db76:	2302      	movs	r3, #2
 800db78:	480b      	ldr	r0, [pc, #44]	; (800dba8 <NX7_TLE_Ctrl_Register_Write+0x70>)
 800db7a:	f7f7 fcfd 	bl	8005578 <HAL_SPI_TransmitReceive>
	NX7_Delay(500);	TLE_CSN_SET;	NX7_Delay(500);
 800db7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800db82:	f7f9 ffe5 	bl	8007b50 <NX7_Delay>
 800db86:	2201      	movs	r2, #1
 800db88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800db8c:	4805      	ldr	r0, [pc, #20]	; (800dba4 <NX7_TLE_Ctrl_Register_Write+0x6c>)
 800db8e:	f7f5 ff8e 	bl	8003aae <HAL_GPIO_WritePin>
 800db92:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800db96:	f7f9 ffdb 	bl	8007b50 <NX7_Delay>
	return rxData[1];
 800db9a:	7b7b      	ldrb	r3, [r7, #13]
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	3710      	adds	r7, #16
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}
 800dba4:	40010800 	.word	0x40010800
 800dba8:	2000048c 	.word	0x2000048c

0800dbac <__errno>:
 800dbac:	4b01      	ldr	r3, [pc, #4]	; (800dbb4 <__errno+0x8>)
 800dbae:	6818      	ldr	r0, [r3, #0]
 800dbb0:	4770      	bx	lr
 800dbb2:	bf00      	nop
 800dbb4:	20000014 	.word	0x20000014

0800dbb8 <__libc_init_array>:
 800dbb8:	b570      	push	{r4, r5, r6, lr}
 800dbba:	2600      	movs	r6, #0
 800dbbc:	4d0c      	ldr	r5, [pc, #48]	; (800dbf0 <__libc_init_array+0x38>)
 800dbbe:	4c0d      	ldr	r4, [pc, #52]	; (800dbf4 <__libc_init_array+0x3c>)
 800dbc0:	1b64      	subs	r4, r4, r5
 800dbc2:	10a4      	asrs	r4, r4, #2
 800dbc4:	42a6      	cmp	r6, r4
 800dbc6:	d109      	bne.n	800dbdc <__libc_init_array+0x24>
 800dbc8:	f003 fd5a 	bl	8011680 <_init>
 800dbcc:	2600      	movs	r6, #0
 800dbce:	4d0a      	ldr	r5, [pc, #40]	; (800dbf8 <__libc_init_array+0x40>)
 800dbd0:	4c0a      	ldr	r4, [pc, #40]	; (800dbfc <__libc_init_array+0x44>)
 800dbd2:	1b64      	subs	r4, r4, r5
 800dbd4:	10a4      	asrs	r4, r4, #2
 800dbd6:	42a6      	cmp	r6, r4
 800dbd8:	d105      	bne.n	800dbe6 <__libc_init_array+0x2e>
 800dbda:	bd70      	pop	{r4, r5, r6, pc}
 800dbdc:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbe0:	4798      	blx	r3
 800dbe2:	3601      	adds	r6, #1
 800dbe4:	e7ee      	b.n	800dbc4 <__libc_init_array+0xc>
 800dbe6:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbea:	4798      	blx	r3
 800dbec:	3601      	adds	r6, #1
 800dbee:	e7f2      	b.n	800dbd6 <__libc_init_array+0x1e>
 800dbf0:	08011afc 	.word	0x08011afc
 800dbf4:	08011afc 	.word	0x08011afc
 800dbf8:	08011afc 	.word	0x08011afc
 800dbfc:	08011b00 	.word	0x08011b00

0800dc00 <memset>:
 800dc00:	4603      	mov	r3, r0
 800dc02:	4402      	add	r2, r0
 800dc04:	4293      	cmp	r3, r2
 800dc06:	d100      	bne.n	800dc0a <memset+0xa>
 800dc08:	4770      	bx	lr
 800dc0a:	f803 1b01 	strb.w	r1, [r3], #1
 800dc0e:	e7f9      	b.n	800dc04 <memset+0x4>

0800dc10 <__cvt>:
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc16:	461f      	mov	r7, r3
 800dc18:	bfbb      	ittet	lt
 800dc1a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800dc1e:	461f      	movlt	r7, r3
 800dc20:	2300      	movge	r3, #0
 800dc22:	232d      	movlt	r3, #45	; 0x2d
 800dc24:	b088      	sub	sp, #32
 800dc26:	4614      	mov	r4, r2
 800dc28:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dc2a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800dc2c:	7013      	strb	r3, [r2, #0]
 800dc2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800dc30:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800dc34:	f023 0820 	bic.w	r8, r3, #32
 800dc38:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dc3c:	d005      	beq.n	800dc4a <__cvt+0x3a>
 800dc3e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800dc42:	d100      	bne.n	800dc46 <__cvt+0x36>
 800dc44:	3501      	adds	r5, #1
 800dc46:	2302      	movs	r3, #2
 800dc48:	e000      	b.n	800dc4c <__cvt+0x3c>
 800dc4a:	2303      	movs	r3, #3
 800dc4c:	aa07      	add	r2, sp, #28
 800dc4e:	9204      	str	r2, [sp, #16]
 800dc50:	aa06      	add	r2, sp, #24
 800dc52:	e9cd a202 	strd	sl, r2, [sp, #8]
 800dc56:	e9cd 3500 	strd	r3, r5, [sp]
 800dc5a:	4622      	mov	r2, r4
 800dc5c:	463b      	mov	r3, r7
 800dc5e:	f000 fcf3 	bl	800e648 <_dtoa_r>
 800dc62:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800dc66:	4606      	mov	r6, r0
 800dc68:	d102      	bne.n	800dc70 <__cvt+0x60>
 800dc6a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dc6c:	07db      	lsls	r3, r3, #31
 800dc6e:	d522      	bpl.n	800dcb6 <__cvt+0xa6>
 800dc70:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dc74:	eb06 0905 	add.w	r9, r6, r5
 800dc78:	d110      	bne.n	800dc9c <__cvt+0x8c>
 800dc7a:	7833      	ldrb	r3, [r6, #0]
 800dc7c:	2b30      	cmp	r3, #48	; 0x30
 800dc7e:	d10a      	bne.n	800dc96 <__cvt+0x86>
 800dc80:	2200      	movs	r2, #0
 800dc82:	2300      	movs	r3, #0
 800dc84:	4620      	mov	r0, r4
 800dc86:	4639      	mov	r1, r7
 800dc88:	f7f2 feee 	bl	8000a68 <__aeabi_dcmpeq>
 800dc8c:	b918      	cbnz	r0, 800dc96 <__cvt+0x86>
 800dc8e:	f1c5 0501 	rsb	r5, r5, #1
 800dc92:	f8ca 5000 	str.w	r5, [sl]
 800dc96:	f8da 3000 	ldr.w	r3, [sl]
 800dc9a:	4499      	add	r9, r3
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	2300      	movs	r3, #0
 800dca0:	4620      	mov	r0, r4
 800dca2:	4639      	mov	r1, r7
 800dca4:	f7f2 fee0 	bl	8000a68 <__aeabi_dcmpeq>
 800dca8:	b108      	cbz	r0, 800dcae <__cvt+0x9e>
 800dcaa:	f8cd 901c 	str.w	r9, [sp, #28]
 800dcae:	2230      	movs	r2, #48	; 0x30
 800dcb0:	9b07      	ldr	r3, [sp, #28]
 800dcb2:	454b      	cmp	r3, r9
 800dcb4:	d307      	bcc.n	800dcc6 <__cvt+0xb6>
 800dcb6:	4630      	mov	r0, r6
 800dcb8:	9b07      	ldr	r3, [sp, #28]
 800dcba:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800dcbc:	1b9b      	subs	r3, r3, r6
 800dcbe:	6013      	str	r3, [r2, #0]
 800dcc0:	b008      	add	sp, #32
 800dcc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcc6:	1c59      	adds	r1, r3, #1
 800dcc8:	9107      	str	r1, [sp, #28]
 800dcca:	701a      	strb	r2, [r3, #0]
 800dccc:	e7f0      	b.n	800dcb0 <__cvt+0xa0>

0800dcce <__exponent>:
 800dcce:	4603      	mov	r3, r0
 800dcd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dcd2:	2900      	cmp	r1, #0
 800dcd4:	f803 2b02 	strb.w	r2, [r3], #2
 800dcd8:	bfb6      	itet	lt
 800dcda:	222d      	movlt	r2, #45	; 0x2d
 800dcdc:	222b      	movge	r2, #43	; 0x2b
 800dcde:	4249      	neglt	r1, r1
 800dce0:	2909      	cmp	r1, #9
 800dce2:	7042      	strb	r2, [r0, #1]
 800dce4:	dd2b      	ble.n	800dd3e <__exponent+0x70>
 800dce6:	f10d 0407 	add.w	r4, sp, #7
 800dcea:	46a4      	mov	ip, r4
 800dcec:	270a      	movs	r7, #10
 800dcee:	fb91 f6f7 	sdiv	r6, r1, r7
 800dcf2:	460a      	mov	r2, r1
 800dcf4:	46a6      	mov	lr, r4
 800dcf6:	fb07 1516 	mls	r5, r7, r6, r1
 800dcfa:	2a63      	cmp	r2, #99	; 0x63
 800dcfc:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800dd00:	4631      	mov	r1, r6
 800dd02:	f104 34ff 	add.w	r4, r4, #4294967295
 800dd06:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800dd0a:	dcf0      	bgt.n	800dcee <__exponent+0x20>
 800dd0c:	3130      	adds	r1, #48	; 0x30
 800dd0e:	f1ae 0502 	sub.w	r5, lr, #2
 800dd12:	f804 1c01 	strb.w	r1, [r4, #-1]
 800dd16:	4629      	mov	r1, r5
 800dd18:	1c44      	adds	r4, r0, #1
 800dd1a:	4561      	cmp	r1, ip
 800dd1c:	d30a      	bcc.n	800dd34 <__exponent+0x66>
 800dd1e:	f10d 0209 	add.w	r2, sp, #9
 800dd22:	eba2 020e 	sub.w	r2, r2, lr
 800dd26:	4565      	cmp	r5, ip
 800dd28:	bf88      	it	hi
 800dd2a:	2200      	movhi	r2, #0
 800dd2c:	4413      	add	r3, r2
 800dd2e:	1a18      	subs	r0, r3, r0
 800dd30:	b003      	add	sp, #12
 800dd32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd34:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd38:	f804 2f01 	strb.w	r2, [r4, #1]!
 800dd3c:	e7ed      	b.n	800dd1a <__exponent+0x4c>
 800dd3e:	2330      	movs	r3, #48	; 0x30
 800dd40:	3130      	adds	r1, #48	; 0x30
 800dd42:	7083      	strb	r3, [r0, #2]
 800dd44:	70c1      	strb	r1, [r0, #3]
 800dd46:	1d03      	adds	r3, r0, #4
 800dd48:	e7f1      	b.n	800dd2e <__exponent+0x60>
	...

0800dd4c <_printf_float>:
 800dd4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd50:	b091      	sub	sp, #68	; 0x44
 800dd52:	460c      	mov	r4, r1
 800dd54:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800dd58:	4616      	mov	r6, r2
 800dd5a:	461f      	mov	r7, r3
 800dd5c:	4605      	mov	r5, r0
 800dd5e:	f001 fa61 	bl	800f224 <_localeconv_r>
 800dd62:	6803      	ldr	r3, [r0, #0]
 800dd64:	4618      	mov	r0, r3
 800dd66:	9309      	str	r3, [sp, #36]	; 0x24
 800dd68:	f7f2 fa52 	bl	8000210 <strlen>
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	930e      	str	r3, [sp, #56]	; 0x38
 800dd70:	f8d8 3000 	ldr.w	r3, [r8]
 800dd74:	900a      	str	r0, [sp, #40]	; 0x28
 800dd76:	3307      	adds	r3, #7
 800dd78:	f023 0307 	bic.w	r3, r3, #7
 800dd7c:	f103 0208 	add.w	r2, r3, #8
 800dd80:	f894 9018 	ldrb.w	r9, [r4, #24]
 800dd84:	f8d4 b000 	ldr.w	fp, [r4]
 800dd88:	f8c8 2000 	str.w	r2, [r8]
 800dd8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd90:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800dd94:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800dd98:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800dd9c:	930b      	str	r3, [sp, #44]	; 0x2c
 800dd9e:	f04f 32ff 	mov.w	r2, #4294967295
 800dda2:	4640      	mov	r0, r8
 800dda4:	4b9c      	ldr	r3, [pc, #624]	; (800e018 <_printf_float+0x2cc>)
 800dda6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dda8:	f7f2 fe90 	bl	8000acc <__aeabi_dcmpun>
 800ddac:	bb70      	cbnz	r0, 800de0c <_printf_float+0xc0>
 800ddae:	f04f 32ff 	mov.w	r2, #4294967295
 800ddb2:	4640      	mov	r0, r8
 800ddb4:	4b98      	ldr	r3, [pc, #608]	; (800e018 <_printf_float+0x2cc>)
 800ddb6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ddb8:	f7f2 fe6a 	bl	8000a90 <__aeabi_dcmple>
 800ddbc:	bb30      	cbnz	r0, 800de0c <_printf_float+0xc0>
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	4640      	mov	r0, r8
 800ddc4:	4651      	mov	r1, sl
 800ddc6:	f7f2 fe59 	bl	8000a7c <__aeabi_dcmplt>
 800ddca:	b110      	cbz	r0, 800ddd2 <_printf_float+0x86>
 800ddcc:	232d      	movs	r3, #45	; 0x2d
 800ddce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ddd2:	4b92      	ldr	r3, [pc, #584]	; (800e01c <_printf_float+0x2d0>)
 800ddd4:	4892      	ldr	r0, [pc, #584]	; (800e020 <_printf_float+0x2d4>)
 800ddd6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800ddda:	bf94      	ite	ls
 800dddc:	4698      	movls	r8, r3
 800ddde:	4680      	movhi	r8, r0
 800dde0:	2303      	movs	r3, #3
 800dde2:	f04f 0a00 	mov.w	sl, #0
 800dde6:	6123      	str	r3, [r4, #16]
 800dde8:	f02b 0304 	bic.w	r3, fp, #4
 800ddec:	6023      	str	r3, [r4, #0]
 800ddee:	4633      	mov	r3, r6
 800ddf0:	4621      	mov	r1, r4
 800ddf2:	4628      	mov	r0, r5
 800ddf4:	9700      	str	r7, [sp, #0]
 800ddf6:	aa0f      	add	r2, sp, #60	; 0x3c
 800ddf8:	f000 f9d4 	bl	800e1a4 <_printf_common>
 800ddfc:	3001      	adds	r0, #1
 800ddfe:	f040 8090 	bne.w	800df22 <_printf_float+0x1d6>
 800de02:	f04f 30ff 	mov.w	r0, #4294967295
 800de06:	b011      	add	sp, #68	; 0x44
 800de08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de0c:	4642      	mov	r2, r8
 800de0e:	4653      	mov	r3, sl
 800de10:	4640      	mov	r0, r8
 800de12:	4651      	mov	r1, sl
 800de14:	f7f2 fe5a 	bl	8000acc <__aeabi_dcmpun>
 800de18:	b148      	cbz	r0, 800de2e <_printf_float+0xe2>
 800de1a:	f1ba 0f00 	cmp.w	sl, #0
 800de1e:	bfb8      	it	lt
 800de20:	232d      	movlt	r3, #45	; 0x2d
 800de22:	4880      	ldr	r0, [pc, #512]	; (800e024 <_printf_float+0x2d8>)
 800de24:	bfb8      	it	lt
 800de26:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800de2a:	4b7f      	ldr	r3, [pc, #508]	; (800e028 <_printf_float+0x2dc>)
 800de2c:	e7d3      	b.n	800ddd6 <_printf_float+0x8a>
 800de2e:	6863      	ldr	r3, [r4, #4]
 800de30:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800de34:	1c5a      	adds	r2, r3, #1
 800de36:	d142      	bne.n	800debe <_printf_float+0x172>
 800de38:	2306      	movs	r3, #6
 800de3a:	6063      	str	r3, [r4, #4]
 800de3c:	2200      	movs	r2, #0
 800de3e:	9206      	str	r2, [sp, #24]
 800de40:	aa0e      	add	r2, sp, #56	; 0x38
 800de42:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800de46:	aa0d      	add	r2, sp, #52	; 0x34
 800de48:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800de4c:	9203      	str	r2, [sp, #12]
 800de4e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800de52:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800de56:	6023      	str	r3, [r4, #0]
 800de58:	6863      	ldr	r3, [r4, #4]
 800de5a:	4642      	mov	r2, r8
 800de5c:	9300      	str	r3, [sp, #0]
 800de5e:	4628      	mov	r0, r5
 800de60:	4653      	mov	r3, sl
 800de62:	910b      	str	r1, [sp, #44]	; 0x2c
 800de64:	f7ff fed4 	bl	800dc10 <__cvt>
 800de68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800de6a:	4680      	mov	r8, r0
 800de6c:	2947      	cmp	r1, #71	; 0x47
 800de6e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800de70:	d108      	bne.n	800de84 <_printf_float+0x138>
 800de72:	1cc8      	adds	r0, r1, #3
 800de74:	db02      	blt.n	800de7c <_printf_float+0x130>
 800de76:	6863      	ldr	r3, [r4, #4]
 800de78:	4299      	cmp	r1, r3
 800de7a:	dd40      	ble.n	800defe <_printf_float+0x1b2>
 800de7c:	f1a9 0902 	sub.w	r9, r9, #2
 800de80:	fa5f f989 	uxtb.w	r9, r9
 800de84:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800de88:	d81f      	bhi.n	800deca <_printf_float+0x17e>
 800de8a:	464a      	mov	r2, r9
 800de8c:	3901      	subs	r1, #1
 800de8e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800de92:	910d      	str	r1, [sp, #52]	; 0x34
 800de94:	f7ff ff1b 	bl	800dcce <__exponent>
 800de98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800de9a:	4682      	mov	sl, r0
 800de9c:	1813      	adds	r3, r2, r0
 800de9e:	2a01      	cmp	r2, #1
 800dea0:	6123      	str	r3, [r4, #16]
 800dea2:	dc02      	bgt.n	800deaa <_printf_float+0x15e>
 800dea4:	6822      	ldr	r2, [r4, #0]
 800dea6:	07d2      	lsls	r2, r2, #31
 800dea8:	d501      	bpl.n	800deae <_printf_float+0x162>
 800deaa:	3301      	adds	r3, #1
 800deac:	6123      	str	r3, [r4, #16]
 800deae:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d09b      	beq.n	800ddee <_printf_float+0xa2>
 800deb6:	232d      	movs	r3, #45	; 0x2d
 800deb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800debc:	e797      	b.n	800ddee <_printf_float+0xa2>
 800debe:	2947      	cmp	r1, #71	; 0x47
 800dec0:	d1bc      	bne.n	800de3c <_printf_float+0xf0>
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d1ba      	bne.n	800de3c <_printf_float+0xf0>
 800dec6:	2301      	movs	r3, #1
 800dec8:	e7b7      	b.n	800de3a <_printf_float+0xee>
 800deca:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800dece:	d118      	bne.n	800df02 <_printf_float+0x1b6>
 800ded0:	2900      	cmp	r1, #0
 800ded2:	6863      	ldr	r3, [r4, #4]
 800ded4:	dd0b      	ble.n	800deee <_printf_float+0x1a2>
 800ded6:	6121      	str	r1, [r4, #16]
 800ded8:	b913      	cbnz	r3, 800dee0 <_printf_float+0x194>
 800deda:	6822      	ldr	r2, [r4, #0]
 800dedc:	07d0      	lsls	r0, r2, #31
 800dede:	d502      	bpl.n	800dee6 <_printf_float+0x19a>
 800dee0:	3301      	adds	r3, #1
 800dee2:	440b      	add	r3, r1
 800dee4:	6123      	str	r3, [r4, #16]
 800dee6:	f04f 0a00 	mov.w	sl, #0
 800deea:	65a1      	str	r1, [r4, #88]	; 0x58
 800deec:	e7df      	b.n	800deae <_printf_float+0x162>
 800deee:	b913      	cbnz	r3, 800def6 <_printf_float+0x1aa>
 800def0:	6822      	ldr	r2, [r4, #0]
 800def2:	07d2      	lsls	r2, r2, #31
 800def4:	d501      	bpl.n	800defa <_printf_float+0x1ae>
 800def6:	3302      	adds	r3, #2
 800def8:	e7f4      	b.n	800dee4 <_printf_float+0x198>
 800defa:	2301      	movs	r3, #1
 800defc:	e7f2      	b.n	800dee4 <_printf_float+0x198>
 800defe:	f04f 0967 	mov.w	r9, #103	; 0x67
 800df02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df04:	4299      	cmp	r1, r3
 800df06:	db05      	blt.n	800df14 <_printf_float+0x1c8>
 800df08:	6823      	ldr	r3, [r4, #0]
 800df0a:	6121      	str	r1, [r4, #16]
 800df0c:	07d8      	lsls	r0, r3, #31
 800df0e:	d5ea      	bpl.n	800dee6 <_printf_float+0x19a>
 800df10:	1c4b      	adds	r3, r1, #1
 800df12:	e7e7      	b.n	800dee4 <_printf_float+0x198>
 800df14:	2900      	cmp	r1, #0
 800df16:	bfcc      	ite	gt
 800df18:	2201      	movgt	r2, #1
 800df1a:	f1c1 0202 	rsble	r2, r1, #2
 800df1e:	4413      	add	r3, r2
 800df20:	e7e0      	b.n	800dee4 <_printf_float+0x198>
 800df22:	6823      	ldr	r3, [r4, #0]
 800df24:	055a      	lsls	r2, r3, #21
 800df26:	d407      	bmi.n	800df38 <_printf_float+0x1ec>
 800df28:	6923      	ldr	r3, [r4, #16]
 800df2a:	4642      	mov	r2, r8
 800df2c:	4631      	mov	r1, r6
 800df2e:	4628      	mov	r0, r5
 800df30:	47b8      	blx	r7
 800df32:	3001      	adds	r0, #1
 800df34:	d12b      	bne.n	800df8e <_printf_float+0x242>
 800df36:	e764      	b.n	800de02 <_printf_float+0xb6>
 800df38:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800df3c:	f240 80dd 	bls.w	800e0fa <_printf_float+0x3ae>
 800df40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800df44:	2200      	movs	r2, #0
 800df46:	2300      	movs	r3, #0
 800df48:	f7f2 fd8e 	bl	8000a68 <__aeabi_dcmpeq>
 800df4c:	2800      	cmp	r0, #0
 800df4e:	d033      	beq.n	800dfb8 <_printf_float+0x26c>
 800df50:	2301      	movs	r3, #1
 800df52:	4631      	mov	r1, r6
 800df54:	4628      	mov	r0, r5
 800df56:	4a35      	ldr	r2, [pc, #212]	; (800e02c <_printf_float+0x2e0>)
 800df58:	47b8      	blx	r7
 800df5a:	3001      	adds	r0, #1
 800df5c:	f43f af51 	beq.w	800de02 <_printf_float+0xb6>
 800df60:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800df64:	429a      	cmp	r2, r3
 800df66:	db02      	blt.n	800df6e <_printf_float+0x222>
 800df68:	6823      	ldr	r3, [r4, #0]
 800df6a:	07d8      	lsls	r0, r3, #31
 800df6c:	d50f      	bpl.n	800df8e <_printf_float+0x242>
 800df6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800df72:	4631      	mov	r1, r6
 800df74:	4628      	mov	r0, r5
 800df76:	47b8      	blx	r7
 800df78:	3001      	adds	r0, #1
 800df7a:	f43f af42 	beq.w	800de02 <_printf_float+0xb6>
 800df7e:	f04f 0800 	mov.w	r8, #0
 800df82:	f104 091a 	add.w	r9, r4, #26
 800df86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df88:	3b01      	subs	r3, #1
 800df8a:	4543      	cmp	r3, r8
 800df8c:	dc09      	bgt.n	800dfa2 <_printf_float+0x256>
 800df8e:	6823      	ldr	r3, [r4, #0]
 800df90:	079b      	lsls	r3, r3, #30
 800df92:	f100 8102 	bmi.w	800e19a <_printf_float+0x44e>
 800df96:	68e0      	ldr	r0, [r4, #12]
 800df98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800df9a:	4298      	cmp	r0, r3
 800df9c:	bfb8      	it	lt
 800df9e:	4618      	movlt	r0, r3
 800dfa0:	e731      	b.n	800de06 <_printf_float+0xba>
 800dfa2:	2301      	movs	r3, #1
 800dfa4:	464a      	mov	r2, r9
 800dfa6:	4631      	mov	r1, r6
 800dfa8:	4628      	mov	r0, r5
 800dfaa:	47b8      	blx	r7
 800dfac:	3001      	adds	r0, #1
 800dfae:	f43f af28 	beq.w	800de02 <_printf_float+0xb6>
 800dfb2:	f108 0801 	add.w	r8, r8, #1
 800dfb6:	e7e6      	b.n	800df86 <_printf_float+0x23a>
 800dfb8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	dc38      	bgt.n	800e030 <_printf_float+0x2e4>
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	4631      	mov	r1, r6
 800dfc2:	4628      	mov	r0, r5
 800dfc4:	4a19      	ldr	r2, [pc, #100]	; (800e02c <_printf_float+0x2e0>)
 800dfc6:	47b8      	blx	r7
 800dfc8:	3001      	adds	r0, #1
 800dfca:	f43f af1a 	beq.w	800de02 <_printf_float+0xb6>
 800dfce:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800dfd2:	4313      	orrs	r3, r2
 800dfd4:	d102      	bne.n	800dfdc <_printf_float+0x290>
 800dfd6:	6823      	ldr	r3, [r4, #0]
 800dfd8:	07d9      	lsls	r1, r3, #31
 800dfda:	d5d8      	bpl.n	800df8e <_printf_float+0x242>
 800dfdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dfe0:	4631      	mov	r1, r6
 800dfe2:	4628      	mov	r0, r5
 800dfe4:	47b8      	blx	r7
 800dfe6:	3001      	adds	r0, #1
 800dfe8:	f43f af0b 	beq.w	800de02 <_printf_float+0xb6>
 800dfec:	f04f 0900 	mov.w	r9, #0
 800dff0:	f104 0a1a 	add.w	sl, r4, #26
 800dff4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dff6:	425b      	negs	r3, r3
 800dff8:	454b      	cmp	r3, r9
 800dffa:	dc01      	bgt.n	800e000 <_printf_float+0x2b4>
 800dffc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dffe:	e794      	b.n	800df2a <_printf_float+0x1de>
 800e000:	2301      	movs	r3, #1
 800e002:	4652      	mov	r2, sl
 800e004:	4631      	mov	r1, r6
 800e006:	4628      	mov	r0, r5
 800e008:	47b8      	blx	r7
 800e00a:	3001      	adds	r0, #1
 800e00c:	f43f aef9 	beq.w	800de02 <_printf_float+0xb6>
 800e010:	f109 0901 	add.w	r9, r9, #1
 800e014:	e7ee      	b.n	800dff4 <_printf_float+0x2a8>
 800e016:	bf00      	nop
 800e018:	7fefffff 	.word	0x7fefffff
 800e01c:	08011700 	.word	0x08011700
 800e020:	08011704 	.word	0x08011704
 800e024:	0801170c 	.word	0x0801170c
 800e028:	08011708 	.word	0x08011708
 800e02c:	08011710 	.word	0x08011710
 800e030:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e032:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e034:	429a      	cmp	r2, r3
 800e036:	bfa8      	it	ge
 800e038:	461a      	movge	r2, r3
 800e03a:	2a00      	cmp	r2, #0
 800e03c:	4691      	mov	r9, r2
 800e03e:	dc37      	bgt.n	800e0b0 <_printf_float+0x364>
 800e040:	f04f 0b00 	mov.w	fp, #0
 800e044:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e048:	f104 021a 	add.w	r2, r4, #26
 800e04c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800e050:	ebaa 0309 	sub.w	r3, sl, r9
 800e054:	455b      	cmp	r3, fp
 800e056:	dc33      	bgt.n	800e0c0 <_printf_float+0x374>
 800e058:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800e05c:	429a      	cmp	r2, r3
 800e05e:	db3b      	blt.n	800e0d8 <_printf_float+0x38c>
 800e060:	6823      	ldr	r3, [r4, #0]
 800e062:	07da      	lsls	r2, r3, #31
 800e064:	d438      	bmi.n	800e0d8 <_printf_float+0x38c>
 800e066:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e068:	990d      	ldr	r1, [sp, #52]	; 0x34
 800e06a:	eba2 030a 	sub.w	r3, r2, sl
 800e06e:	eba2 0901 	sub.w	r9, r2, r1
 800e072:	4599      	cmp	r9, r3
 800e074:	bfa8      	it	ge
 800e076:	4699      	movge	r9, r3
 800e078:	f1b9 0f00 	cmp.w	r9, #0
 800e07c:	dc34      	bgt.n	800e0e8 <_printf_float+0x39c>
 800e07e:	f04f 0800 	mov.w	r8, #0
 800e082:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e086:	f104 0a1a 	add.w	sl, r4, #26
 800e08a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800e08e:	1a9b      	subs	r3, r3, r2
 800e090:	eba3 0309 	sub.w	r3, r3, r9
 800e094:	4543      	cmp	r3, r8
 800e096:	f77f af7a 	ble.w	800df8e <_printf_float+0x242>
 800e09a:	2301      	movs	r3, #1
 800e09c:	4652      	mov	r2, sl
 800e09e:	4631      	mov	r1, r6
 800e0a0:	4628      	mov	r0, r5
 800e0a2:	47b8      	blx	r7
 800e0a4:	3001      	adds	r0, #1
 800e0a6:	f43f aeac 	beq.w	800de02 <_printf_float+0xb6>
 800e0aa:	f108 0801 	add.w	r8, r8, #1
 800e0ae:	e7ec      	b.n	800e08a <_printf_float+0x33e>
 800e0b0:	4613      	mov	r3, r2
 800e0b2:	4631      	mov	r1, r6
 800e0b4:	4642      	mov	r2, r8
 800e0b6:	4628      	mov	r0, r5
 800e0b8:	47b8      	blx	r7
 800e0ba:	3001      	adds	r0, #1
 800e0bc:	d1c0      	bne.n	800e040 <_printf_float+0x2f4>
 800e0be:	e6a0      	b.n	800de02 <_printf_float+0xb6>
 800e0c0:	2301      	movs	r3, #1
 800e0c2:	4631      	mov	r1, r6
 800e0c4:	4628      	mov	r0, r5
 800e0c6:	920b      	str	r2, [sp, #44]	; 0x2c
 800e0c8:	47b8      	blx	r7
 800e0ca:	3001      	adds	r0, #1
 800e0cc:	f43f ae99 	beq.w	800de02 <_printf_float+0xb6>
 800e0d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e0d2:	f10b 0b01 	add.w	fp, fp, #1
 800e0d6:	e7b9      	b.n	800e04c <_printf_float+0x300>
 800e0d8:	4631      	mov	r1, r6
 800e0da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e0de:	4628      	mov	r0, r5
 800e0e0:	47b8      	blx	r7
 800e0e2:	3001      	adds	r0, #1
 800e0e4:	d1bf      	bne.n	800e066 <_printf_float+0x31a>
 800e0e6:	e68c      	b.n	800de02 <_printf_float+0xb6>
 800e0e8:	464b      	mov	r3, r9
 800e0ea:	4631      	mov	r1, r6
 800e0ec:	4628      	mov	r0, r5
 800e0ee:	eb08 020a 	add.w	r2, r8, sl
 800e0f2:	47b8      	blx	r7
 800e0f4:	3001      	adds	r0, #1
 800e0f6:	d1c2      	bne.n	800e07e <_printf_float+0x332>
 800e0f8:	e683      	b.n	800de02 <_printf_float+0xb6>
 800e0fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e0fc:	2a01      	cmp	r2, #1
 800e0fe:	dc01      	bgt.n	800e104 <_printf_float+0x3b8>
 800e100:	07db      	lsls	r3, r3, #31
 800e102:	d537      	bpl.n	800e174 <_printf_float+0x428>
 800e104:	2301      	movs	r3, #1
 800e106:	4642      	mov	r2, r8
 800e108:	4631      	mov	r1, r6
 800e10a:	4628      	mov	r0, r5
 800e10c:	47b8      	blx	r7
 800e10e:	3001      	adds	r0, #1
 800e110:	f43f ae77 	beq.w	800de02 <_printf_float+0xb6>
 800e114:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e118:	4631      	mov	r1, r6
 800e11a:	4628      	mov	r0, r5
 800e11c:	47b8      	blx	r7
 800e11e:	3001      	adds	r0, #1
 800e120:	f43f ae6f 	beq.w	800de02 <_printf_float+0xb6>
 800e124:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e128:	2200      	movs	r2, #0
 800e12a:	2300      	movs	r3, #0
 800e12c:	f7f2 fc9c 	bl	8000a68 <__aeabi_dcmpeq>
 800e130:	b9d8      	cbnz	r0, 800e16a <_printf_float+0x41e>
 800e132:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e134:	f108 0201 	add.w	r2, r8, #1
 800e138:	3b01      	subs	r3, #1
 800e13a:	4631      	mov	r1, r6
 800e13c:	4628      	mov	r0, r5
 800e13e:	47b8      	blx	r7
 800e140:	3001      	adds	r0, #1
 800e142:	d10e      	bne.n	800e162 <_printf_float+0x416>
 800e144:	e65d      	b.n	800de02 <_printf_float+0xb6>
 800e146:	2301      	movs	r3, #1
 800e148:	464a      	mov	r2, r9
 800e14a:	4631      	mov	r1, r6
 800e14c:	4628      	mov	r0, r5
 800e14e:	47b8      	blx	r7
 800e150:	3001      	adds	r0, #1
 800e152:	f43f ae56 	beq.w	800de02 <_printf_float+0xb6>
 800e156:	f108 0801 	add.w	r8, r8, #1
 800e15a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e15c:	3b01      	subs	r3, #1
 800e15e:	4543      	cmp	r3, r8
 800e160:	dcf1      	bgt.n	800e146 <_printf_float+0x3fa>
 800e162:	4653      	mov	r3, sl
 800e164:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e168:	e6e0      	b.n	800df2c <_printf_float+0x1e0>
 800e16a:	f04f 0800 	mov.w	r8, #0
 800e16e:	f104 091a 	add.w	r9, r4, #26
 800e172:	e7f2      	b.n	800e15a <_printf_float+0x40e>
 800e174:	2301      	movs	r3, #1
 800e176:	4642      	mov	r2, r8
 800e178:	e7df      	b.n	800e13a <_printf_float+0x3ee>
 800e17a:	2301      	movs	r3, #1
 800e17c:	464a      	mov	r2, r9
 800e17e:	4631      	mov	r1, r6
 800e180:	4628      	mov	r0, r5
 800e182:	47b8      	blx	r7
 800e184:	3001      	adds	r0, #1
 800e186:	f43f ae3c 	beq.w	800de02 <_printf_float+0xb6>
 800e18a:	f108 0801 	add.w	r8, r8, #1
 800e18e:	68e3      	ldr	r3, [r4, #12]
 800e190:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e192:	1a5b      	subs	r3, r3, r1
 800e194:	4543      	cmp	r3, r8
 800e196:	dcf0      	bgt.n	800e17a <_printf_float+0x42e>
 800e198:	e6fd      	b.n	800df96 <_printf_float+0x24a>
 800e19a:	f04f 0800 	mov.w	r8, #0
 800e19e:	f104 0919 	add.w	r9, r4, #25
 800e1a2:	e7f4      	b.n	800e18e <_printf_float+0x442>

0800e1a4 <_printf_common>:
 800e1a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1a8:	4616      	mov	r6, r2
 800e1aa:	4699      	mov	r9, r3
 800e1ac:	688a      	ldr	r2, [r1, #8]
 800e1ae:	690b      	ldr	r3, [r1, #16]
 800e1b0:	4607      	mov	r7, r0
 800e1b2:	4293      	cmp	r3, r2
 800e1b4:	bfb8      	it	lt
 800e1b6:	4613      	movlt	r3, r2
 800e1b8:	6033      	str	r3, [r6, #0]
 800e1ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e1be:	460c      	mov	r4, r1
 800e1c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e1c4:	b10a      	cbz	r2, 800e1ca <_printf_common+0x26>
 800e1c6:	3301      	adds	r3, #1
 800e1c8:	6033      	str	r3, [r6, #0]
 800e1ca:	6823      	ldr	r3, [r4, #0]
 800e1cc:	0699      	lsls	r1, r3, #26
 800e1ce:	bf42      	ittt	mi
 800e1d0:	6833      	ldrmi	r3, [r6, #0]
 800e1d2:	3302      	addmi	r3, #2
 800e1d4:	6033      	strmi	r3, [r6, #0]
 800e1d6:	6825      	ldr	r5, [r4, #0]
 800e1d8:	f015 0506 	ands.w	r5, r5, #6
 800e1dc:	d106      	bne.n	800e1ec <_printf_common+0x48>
 800e1de:	f104 0a19 	add.w	sl, r4, #25
 800e1e2:	68e3      	ldr	r3, [r4, #12]
 800e1e4:	6832      	ldr	r2, [r6, #0]
 800e1e6:	1a9b      	subs	r3, r3, r2
 800e1e8:	42ab      	cmp	r3, r5
 800e1ea:	dc28      	bgt.n	800e23e <_printf_common+0x9a>
 800e1ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e1f0:	1e13      	subs	r3, r2, #0
 800e1f2:	6822      	ldr	r2, [r4, #0]
 800e1f4:	bf18      	it	ne
 800e1f6:	2301      	movne	r3, #1
 800e1f8:	0692      	lsls	r2, r2, #26
 800e1fa:	d42d      	bmi.n	800e258 <_printf_common+0xb4>
 800e1fc:	4649      	mov	r1, r9
 800e1fe:	4638      	mov	r0, r7
 800e200:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e204:	47c0      	blx	r8
 800e206:	3001      	adds	r0, #1
 800e208:	d020      	beq.n	800e24c <_printf_common+0xa8>
 800e20a:	6823      	ldr	r3, [r4, #0]
 800e20c:	68e5      	ldr	r5, [r4, #12]
 800e20e:	f003 0306 	and.w	r3, r3, #6
 800e212:	2b04      	cmp	r3, #4
 800e214:	bf18      	it	ne
 800e216:	2500      	movne	r5, #0
 800e218:	6832      	ldr	r2, [r6, #0]
 800e21a:	f04f 0600 	mov.w	r6, #0
 800e21e:	68a3      	ldr	r3, [r4, #8]
 800e220:	bf08      	it	eq
 800e222:	1aad      	subeq	r5, r5, r2
 800e224:	6922      	ldr	r2, [r4, #16]
 800e226:	bf08      	it	eq
 800e228:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e22c:	4293      	cmp	r3, r2
 800e22e:	bfc4      	itt	gt
 800e230:	1a9b      	subgt	r3, r3, r2
 800e232:	18ed      	addgt	r5, r5, r3
 800e234:	341a      	adds	r4, #26
 800e236:	42b5      	cmp	r5, r6
 800e238:	d11a      	bne.n	800e270 <_printf_common+0xcc>
 800e23a:	2000      	movs	r0, #0
 800e23c:	e008      	b.n	800e250 <_printf_common+0xac>
 800e23e:	2301      	movs	r3, #1
 800e240:	4652      	mov	r2, sl
 800e242:	4649      	mov	r1, r9
 800e244:	4638      	mov	r0, r7
 800e246:	47c0      	blx	r8
 800e248:	3001      	adds	r0, #1
 800e24a:	d103      	bne.n	800e254 <_printf_common+0xb0>
 800e24c:	f04f 30ff 	mov.w	r0, #4294967295
 800e250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e254:	3501      	adds	r5, #1
 800e256:	e7c4      	b.n	800e1e2 <_printf_common+0x3e>
 800e258:	2030      	movs	r0, #48	; 0x30
 800e25a:	18e1      	adds	r1, r4, r3
 800e25c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e260:	1c5a      	adds	r2, r3, #1
 800e262:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e266:	4422      	add	r2, r4
 800e268:	3302      	adds	r3, #2
 800e26a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e26e:	e7c5      	b.n	800e1fc <_printf_common+0x58>
 800e270:	2301      	movs	r3, #1
 800e272:	4622      	mov	r2, r4
 800e274:	4649      	mov	r1, r9
 800e276:	4638      	mov	r0, r7
 800e278:	47c0      	blx	r8
 800e27a:	3001      	adds	r0, #1
 800e27c:	d0e6      	beq.n	800e24c <_printf_common+0xa8>
 800e27e:	3601      	adds	r6, #1
 800e280:	e7d9      	b.n	800e236 <_printf_common+0x92>
	...

0800e284 <_printf_i>:
 800e284:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e288:	460c      	mov	r4, r1
 800e28a:	7e27      	ldrb	r7, [r4, #24]
 800e28c:	4691      	mov	r9, r2
 800e28e:	2f78      	cmp	r7, #120	; 0x78
 800e290:	4680      	mov	r8, r0
 800e292:	469a      	mov	sl, r3
 800e294:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e296:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e29a:	d807      	bhi.n	800e2ac <_printf_i+0x28>
 800e29c:	2f62      	cmp	r7, #98	; 0x62
 800e29e:	d80a      	bhi.n	800e2b6 <_printf_i+0x32>
 800e2a0:	2f00      	cmp	r7, #0
 800e2a2:	f000 80d9 	beq.w	800e458 <_printf_i+0x1d4>
 800e2a6:	2f58      	cmp	r7, #88	; 0x58
 800e2a8:	f000 80a4 	beq.w	800e3f4 <_printf_i+0x170>
 800e2ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e2b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e2b4:	e03a      	b.n	800e32c <_printf_i+0xa8>
 800e2b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e2ba:	2b15      	cmp	r3, #21
 800e2bc:	d8f6      	bhi.n	800e2ac <_printf_i+0x28>
 800e2be:	a001      	add	r0, pc, #4	; (adr r0, 800e2c4 <_printf_i+0x40>)
 800e2c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e2c4:	0800e31d 	.word	0x0800e31d
 800e2c8:	0800e331 	.word	0x0800e331
 800e2cc:	0800e2ad 	.word	0x0800e2ad
 800e2d0:	0800e2ad 	.word	0x0800e2ad
 800e2d4:	0800e2ad 	.word	0x0800e2ad
 800e2d8:	0800e2ad 	.word	0x0800e2ad
 800e2dc:	0800e331 	.word	0x0800e331
 800e2e0:	0800e2ad 	.word	0x0800e2ad
 800e2e4:	0800e2ad 	.word	0x0800e2ad
 800e2e8:	0800e2ad 	.word	0x0800e2ad
 800e2ec:	0800e2ad 	.word	0x0800e2ad
 800e2f0:	0800e43f 	.word	0x0800e43f
 800e2f4:	0800e361 	.word	0x0800e361
 800e2f8:	0800e421 	.word	0x0800e421
 800e2fc:	0800e2ad 	.word	0x0800e2ad
 800e300:	0800e2ad 	.word	0x0800e2ad
 800e304:	0800e461 	.word	0x0800e461
 800e308:	0800e2ad 	.word	0x0800e2ad
 800e30c:	0800e361 	.word	0x0800e361
 800e310:	0800e2ad 	.word	0x0800e2ad
 800e314:	0800e2ad 	.word	0x0800e2ad
 800e318:	0800e429 	.word	0x0800e429
 800e31c:	680b      	ldr	r3, [r1, #0]
 800e31e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e322:	1d1a      	adds	r2, r3, #4
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	600a      	str	r2, [r1, #0]
 800e328:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e32c:	2301      	movs	r3, #1
 800e32e:	e0a4      	b.n	800e47a <_printf_i+0x1f6>
 800e330:	6825      	ldr	r5, [r4, #0]
 800e332:	6808      	ldr	r0, [r1, #0]
 800e334:	062e      	lsls	r6, r5, #24
 800e336:	f100 0304 	add.w	r3, r0, #4
 800e33a:	d50a      	bpl.n	800e352 <_printf_i+0xce>
 800e33c:	6805      	ldr	r5, [r0, #0]
 800e33e:	600b      	str	r3, [r1, #0]
 800e340:	2d00      	cmp	r5, #0
 800e342:	da03      	bge.n	800e34c <_printf_i+0xc8>
 800e344:	232d      	movs	r3, #45	; 0x2d
 800e346:	426d      	negs	r5, r5
 800e348:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e34c:	230a      	movs	r3, #10
 800e34e:	485e      	ldr	r0, [pc, #376]	; (800e4c8 <_printf_i+0x244>)
 800e350:	e019      	b.n	800e386 <_printf_i+0x102>
 800e352:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e356:	6805      	ldr	r5, [r0, #0]
 800e358:	600b      	str	r3, [r1, #0]
 800e35a:	bf18      	it	ne
 800e35c:	b22d      	sxthne	r5, r5
 800e35e:	e7ef      	b.n	800e340 <_printf_i+0xbc>
 800e360:	680b      	ldr	r3, [r1, #0]
 800e362:	6825      	ldr	r5, [r4, #0]
 800e364:	1d18      	adds	r0, r3, #4
 800e366:	6008      	str	r0, [r1, #0]
 800e368:	0628      	lsls	r0, r5, #24
 800e36a:	d501      	bpl.n	800e370 <_printf_i+0xec>
 800e36c:	681d      	ldr	r5, [r3, #0]
 800e36e:	e002      	b.n	800e376 <_printf_i+0xf2>
 800e370:	0669      	lsls	r1, r5, #25
 800e372:	d5fb      	bpl.n	800e36c <_printf_i+0xe8>
 800e374:	881d      	ldrh	r5, [r3, #0]
 800e376:	2f6f      	cmp	r7, #111	; 0x6f
 800e378:	bf0c      	ite	eq
 800e37a:	2308      	moveq	r3, #8
 800e37c:	230a      	movne	r3, #10
 800e37e:	4852      	ldr	r0, [pc, #328]	; (800e4c8 <_printf_i+0x244>)
 800e380:	2100      	movs	r1, #0
 800e382:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e386:	6866      	ldr	r6, [r4, #4]
 800e388:	2e00      	cmp	r6, #0
 800e38a:	bfa8      	it	ge
 800e38c:	6821      	ldrge	r1, [r4, #0]
 800e38e:	60a6      	str	r6, [r4, #8]
 800e390:	bfa4      	itt	ge
 800e392:	f021 0104 	bicge.w	r1, r1, #4
 800e396:	6021      	strge	r1, [r4, #0]
 800e398:	b90d      	cbnz	r5, 800e39e <_printf_i+0x11a>
 800e39a:	2e00      	cmp	r6, #0
 800e39c:	d04d      	beq.n	800e43a <_printf_i+0x1b6>
 800e39e:	4616      	mov	r6, r2
 800e3a0:	fbb5 f1f3 	udiv	r1, r5, r3
 800e3a4:	fb03 5711 	mls	r7, r3, r1, r5
 800e3a8:	5dc7      	ldrb	r7, [r0, r7]
 800e3aa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e3ae:	462f      	mov	r7, r5
 800e3b0:	42bb      	cmp	r3, r7
 800e3b2:	460d      	mov	r5, r1
 800e3b4:	d9f4      	bls.n	800e3a0 <_printf_i+0x11c>
 800e3b6:	2b08      	cmp	r3, #8
 800e3b8:	d10b      	bne.n	800e3d2 <_printf_i+0x14e>
 800e3ba:	6823      	ldr	r3, [r4, #0]
 800e3bc:	07df      	lsls	r7, r3, #31
 800e3be:	d508      	bpl.n	800e3d2 <_printf_i+0x14e>
 800e3c0:	6923      	ldr	r3, [r4, #16]
 800e3c2:	6861      	ldr	r1, [r4, #4]
 800e3c4:	4299      	cmp	r1, r3
 800e3c6:	bfde      	ittt	le
 800e3c8:	2330      	movle	r3, #48	; 0x30
 800e3ca:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e3ce:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e3d2:	1b92      	subs	r2, r2, r6
 800e3d4:	6122      	str	r2, [r4, #16]
 800e3d6:	464b      	mov	r3, r9
 800e3d8:	4621      	mov	r1, r4
 800e3da:	4640      	mov	r0, r8
 800e3dc:	f8cd a000 	str.w	sl, [sp]
 800e3e0:	aa03      	add	r2, sp, #12
 800e3e2:	f7ff fedf 	bl	800e1a4 <_printf_common>
 800e3e6:	3001      	adds	r0, #1
 800e3e8:	d14c      	bne.n	800e484 <_printf_i+0x200>
 800e3ea:	f04f 30ff 	mov.w	r0, #4294967295
 800e3ee:	b004      	add	sp, #16
 800e3f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3f4:	4834      	ldr	r0, [pc, #208]	; (800e4c8 <_printf_i+0x244>)
 800e3f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e3fa:	680e      	ldr	r6, [r1, #0]
 800e3fc:	6823      	ldr	r3, [r4, #0]
 800e3fe:	f856 5b04 	ldr.w	r5, [r6], #4
 800e402:	061f      	lsls	r7, r3, #24
 800e404:	600e      	str	r6, [r1, #0]
 800e406:	d514      	bpl.n	800e432 <_printf_i+0x1ae>
 800e408:	07d9      	lsls	r1, r3, #31
 800e40a:	bf44      	itt	mi
 800e40c:	f043 0320 	orrmi.w	r3, r3, #32
 800e410:	6023      	strmi	r3, [r4, #0]
 800e412:	b91d      	cbnz	r5, 800e41c <_printf_i+0x198>
 800e414:	6823      	ldr	r3, [r4, #0]
 800e416:	f023 0320 	bic.w	r3, r3, #32
 800e41a:	6023      	str	r3, [r4, #0]
 800e41c:	2310      	movs	r3, #16
 800e41e:	e7af      	b.n	800e380 <_printf_i+0xfc>
 800e420:	6823      	ldr	r3, [r4, #0]
 800e422:	f043 0320 	orr.w	r3, r3, #32
 800e426:	6023      	str	r3, [r4, #0]
 800e428:	2378      	movs	r3, #120	; 0x78
 800e42a:	4828      	ldr	r0, [pc, #160]	; (800e4cc <_printf_i+0x248>)
 800e42c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e430:	e7e3      	b.n	800e3fa <_printf_i+0x176>
 800e432:	065e      	lsls	r6, r3, #25
 800e434:	bf48      	it	mi
 800e436:	b2ad      	uxthmi	r5, r5
 800e438:	e7e6      	b.n	800e408 <_printf_i+0x184>
 800e43a:	4616      	mov	r6, r2
 800e43c:	e7bb      	b.n	800e3b6 <_printf_i+0x132>
 800e43e:	680b      	ldr	r3, [r1, #0]
 800e440:	6826      	ldr	r6, [r4, #0]
 800e442:	1d1d      	adds	r5, r3, #4
 800e444:	6960      	ldr	r0, [r4, #20]
 800e446:	600d      	str	r5, [r1, #0]
 800e448:	0635      	lsls	r5, r6, #24
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	d501      	bpl.n	800e452 <_printf_i+0x1ce>
 800e44e:	6018      	str	r0, [r3, #0]
 800e450:	e002      	b.n	800e458 <_printf_i+0x1d4>
 800e452:	0671      	lsls	r1, r6, #25
 800e454:	d5fb      	bpl.n	800e44e <_printf_i+0x1ca>
 800e456:	8018      	strh	r0, [r3, #0]
 800e458:	2300      	movs	r3, #0
 800e45a:	4616      	mov	r6, r2
 800e45c:	6123      	str	r3, [r4, #16]
 800e45e:	e7ba      	b.n	800e3d6 <_printf_i+0x152>
 800e460:	680b      	ldr	r3, [r1, #0]
 800e462:	1d1a      	adds	r2, r3, #4
 800e464:	600a      	str	r2, [r1, #0]
 800e466:	681e      	ldr	r6, [r3, #0]
 800e468:	2100      	movs	r1, #0
 800e46a:	4630      	mov	r0, r6
 800e46c:	6862      	ldr	r2, [r4, #4]
 800e46e:	f000 fee5 	bl	800f23c <memchr>
 800e472:	b108      	cbz	r0, 800e478 <_printf_i+0x1f4>
 800e474:	1b80      	subs	r0, r0, r6
 800e476:	6060      	str	r0, [r4, #4]
 800e478:	6863      	ldr	r3, [r4, #4]
 800e47a:	6123      	str	r3, [r4, #16]
 800e47c:	2300      	movs	r3, #0
 800e47e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e482:	e7a8      	b.n	800e3d6 <_printf_i+0x152>
 800e484:	4632      	mov	r2, r6
 800e486:	4649      	mov	r1, r9
 800e488:	4640      	mov	r0, r8
 800e48a:	6923      	ldr	r3, [r4, #16]
 800e48c:	47d0      	blx	sl
 800e48e:	3001      	adds	r0, #1
 800e490:	d0ab      	beq.n	800e3ea <_printf_i+0x166>
 800e492:	6823      	ldr	r3, [r4, #0]
 800e494:	079b      	lsls	r3, r3, #30
 800e496:	d413      	bmi.n	800e4c0 <_printf_i+0x23c>
 800e498:	68e0      	ldr	r0, [r4, #12]
 800e49a:	9b03      	ldr	r3, [sp, #12]
 800e49c:	4298      	cmp	r0, r3
 800e49e:	bfb8      	it	lt
 800e4a0:	4618      	movlt	r0, r3
 800e4a2:	e7a4      	b.n	800e3ee <_printf_i+0x16a>
 800e4a4:	2301      	movs	r3, #1
 800e4a6:	4632      	mov	r2, r6
 800e4a8:	4649      	mov	r1, r9
 800e4aa:	4640      	mov	r0, r8
 800e4ac:	47d0      	blx	sl
 800e4ae:	3001      	adds	r0, #1
 800e4b0:	d09b      	beq.n	800e3ea <_printf_i+0x166>
 800e4b2:	3501      	adds	r5, #1
 800e4b4:	68e3      	ldr	r3, [r4, #12]
 800e4b6:	9903      	ldr	r1, [sp, #12]
 800e4b8:	1a5b      	subs	r3, r3, r1
 800e4ba:	42ab      	cmp	r3, r5
 800e4bc:	dcf2      	bgt.n	800e4a4 <_printf_i+0x220>
 800e4be:	e7eb      	b.n	800e498 <_printf_i+0x214>
 800e4c0:	2500      	movs	r5, #0
 800e4c2:	f104 0619 	add.w	r6, r4, #25
 800e4c6:	e7f5      	b.n	800e4b4 <_printf_i+0x230>
 800e4c8:	08011712 	.word	0x08011712
 800e4cc:	08011723 	.word	0x08011723

0800e4d0 <siprintf>:
 800e4d0:	b40e      	push	{r1, r2, r3}
 800e4d2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e4d6:	b500      	push	{lr}
 800e4d8:	b09c      	sub	sp, #112	; 0x70
 800e4da:	ab1d      	add	r3, sp, #116	; 0x74
 800e4dc:	9002      	str	r0, [sp, #8]
 800e4de:	9006      	str	r0, [sp, #24]
 800e4e0:	9107      	str	r1, [sp, #28]
 800e4e2:	9104      	str	r1, [sp, #16]
 800e4e4:	4808      	ldr	r0, [pc, #32]	; (800e508 <siprintf+0x38>)
 800e4e6:	4909      	ldr	r1, [pc, #36]	; (800e50c <siprintf+0x3c>)
 800e4e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4ec:	9105      	str	r1, [sp, #20]
 800e4ee:	6800      	ldr	r0, [r0, #0]
 800e4f0:	a902      	add	r1, sp, #8
 800e4f2:	9301      	str	r3, [sp, #4]
 800e4f4:	f001 fb50 	bl	800fb98 <_svfiprintf_r>
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	9b02      	ldr	r3, [sp, #8]
 800e4fc:	701a      	strb	r2, [r3, #0]
 800e4fe:	b01c      	add	sp, #112	; 0x70
 800e500:	f85d eb04 	ldr.w	lr, [sp], #4
 800e504:	b003      	add	sp, #12
 800e506:	4770      	bx	lr
 800e508:	20000014 	.word	0x20000014
 800e50c:	ffff0208 	.word	0xffff0208

0800e510 <strcat>:
 800e510:	4602      	mov	r2, r0
 800e512:	b510      	push	{r4, lr}
 800e514:	7814      	ldrb	r4, [r2, #0]
 800e516:	4613      	mov	r3, r2
 800e518:	3201      	adds	r2, #1
 800e51a:	2c00      	cmp	r4, #0
 800e51c:	d1fa      	bne.n	800e514 <strcat+0x4>
 800e51e:	3b01      	subs	r3, #1
 800e520:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e524:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e528:	2a00      	cmp	r2, #0
 800e52a:	d1f9      	bne.n	800e520 <strcat+0x10>
 800e52c:	bd10      	pop	{r4, pc}

0800e52e <quorem>:
 800e52e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e532:	6903      	ldr	r3, [r0, #16]
 800e534:	690c      	ldr	r4, [r1, #16]
 800e536:	4607      	mov	r7, r0
 800e538:	42a3      	cmp	r3, r4
 800e53a:	f2c0 8083 	blt.w	800e644 <quorem+0x116>
 800e53e:	3c01      	subs	r4, #1
 800e540:	f100 0514 	add.w	r5, r0, #20
 800e544:	f101 0814 	add.w	r8, r1, #20
 800e548:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e54c:	9301      	str	r3, [sp, #4]
 800e54e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e552:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e556:	3301      	adds	r3, #1
 800e558:	429a      	cmp	r2, r3
 800e55a:	fbb2 f6f3 	udiv	r6, r2, r3
 800e55e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e562:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e566:	d332      	bcc.n	800e5ce <quorem+0xa0>
 800e568:	f04f 0e00 	mov.w	lr, #0
 800e56c:	4640      	mov	r0, r8
 800e56e:	46ac      	mov	ip, r5
 800e570:	46f2      	mov	sl, lr
 800e572:	f850 2b04 	ldr.w	r2, [r0], #4
 800e576:	b293      	uxth	r3, r2
 800e578:	fb06 e303 	mla	r3, r6, r3, lr
 800e57c:	0c12      	lsrs	r2, r2, #16
 800e57e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e582:	fb06 e202 	mla	r2, r6, r2, lr
 800e586:	b29b      	uxth	r3, r3
 800e588:	ebaa 0303 	sub.w	r3, sl, r3
 800e58c:	f8dc a000 	ldr.w	sl, [ip]
 800e590:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e594:	fa1f fa8a 	uxth.w	sl, sl
 800e598:	4453      	add	r3, sl
 800e59a:	fa1f fa82 	uxth.w	sl, r2
 800e59e:	f8dc 2000 	ldr.w	r2, [ip]
 800e5a2:	4581      	cmp	r9, r0
 800e5a4:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800e5a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e5ac:	b29b      	uxth	r3, r3
 800e5ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e5b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e5b6:	f84c 3b04 	str.w	r3, [ip], #4
 800e5ba:	d2da      	bcs.n	800e572 <quorem+0x44>
 800e5bc:	f855 300b 	ldr.w	r3, [r5, fp]
 800e5c0:	b92b      	cbnz	r3, 800e5ce <quorem+0xa0>
 800e5c2:	9b01      	ldr	r3, [sp, #4]
 800e5c4:	3b04      	subs	r3, #4
 800e5c6:	429d      	cmp	r5, r3
 800e5c8:	461a      	mov	r2, r3
 800e5ca:	d32f      	bcc.n	800e62c <quorem+0xfe>
 800e5cc:	613c      	str	r4, [r7, #16]
 800e5ce:	4638      	mov	r0, r7
 800e5d0:	f001 f8ca 	bl	800f768 <__mcmp>
 800e5d4:	2800      	cmp	r0, #0
 800e5d6:	db25      	blt.n	800e624 <quorem+0xf6>
 800e5d8:	4628      	mov	r0, r5
 800e5da:	f04f 0c00 	mov.w	ip, #0
 800e5de:	3601      	adds	r6, #1
 800e5e0:	f858 1b04 	ldr.w	r1, [r8], #4
 800e5e4:	f8d0 e000 	ldr.w	lr, [r0]
 800e5e8:	b28b      	uxth	r3, r1
 800e5ea:	ebac 0303 	sub.w	r3, ip, r3
 800e5ee:	fa1f f28e 	uxth.w	r2, lr
 800e5f2:	4413      	add	r3, r2
 800e5f4:	0c0a      	lsrs	r2, r1, #16
 800e5f6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e5fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e5fe:	b29b      	uxth	r3, r3
 800e600:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e604:	45c1      	cmp	r9, r8
 800e606:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e60a:	f840 3b04 	str.w	r3, [r0], #4
 800e60e:	d2e7      	bcs.n	800e5e0 <quorem+0xb2>
 800e610:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e614:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e618:	b922      	cbnz	r2, 800e624 <quorem+0xf6>
 800e61a:	3b04      	subs	r3, #4
 800e61c:	429d      	cmp	r5, r3
 800e61e:	461a      	mov	r2, r3
 800e620:	d30a      	bcc.n	800e638 <quorem+0x10a>
 800e622:	613c      	str	r4, [r7, #16]
 800e624:	4630      	mov	r0, r6
 800e626:	b003      	add	sp, #12
 800e628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e62c:	6812      	ldr	r2, [r2, #0]
 800e62e:	3b04      	subs	r3, #4
 800e630:	2a00      	cmp	r2, #0
 800e632:	d1cb      	bne.n	800e5cc <quorem+0x9e>
 800e634:	3c01      	subs	r4, #1
 800e636:	e7c6      	b.n	800e5c6 <quorem+0x98>
 800e638:	6812      	ldr	r2, [r2, #0]
 800e63a:	3b04      	subs	r3, #4
 800e63c:	2a00      	cmp	r2, #0
 800e63e:	d1f0      	bne.n	800e622 <quorem+0xf4>
 800e640:	3c01      	subs	r4, #1
 800e642:	e7eb      	b.n	800e61c <quorem+0xee>
 800e644:	2000      	movs	r0, #0
 800e646:	e7ee      	b.n	800e626 <quorem+0xf8>

0800e648 <_dtoa_r>:
 800e648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e64c:	4616      	mov	r6, r2
 800e64e:	461f      	mov	r7, r3
 800e650:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e652:	b099      	sub	sp, #100	; 0x64
 800e654:	4605      	mov	r5, r0
 800e656:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800e65a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800e65e:	b974      	cbnz	r4, 800e67e <_dtoa_r+0x36>
 800e660:	2010      	movs	r0, #16
 800e662:	f000 fde3 	bl	800f22c <malloc>
 800e666:	4602      	mov	r2, r0
 800e668:	6268      	str	r0, [r5, #36]	; 0x24
 800e66a:	b920      	cbnz	r0, 800e676 <_dtoa_r+0x2e>
 800e66c:	21ea      	movs	r1, #234	; 0xea
 800e66e:	4bae      	ldr	r3, [pc, #696]	; (800e928 <_dtoa_r+0x2e0>)
 800e670:	48ae      	ldr	r0, [pc, #696]	; (800e92c <_dtoa_r+0x2e4>)
 800e672:	f001 fba1 	bl	800fdb8 <__assert_func>
 800e676:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e67a:	6004      	str	r4, [r0, #0]
 800e67c:	60c4      	str	r4, [r0, #12]
 800e67e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e680:	6819      	ldr	r1, [r3, #0]
 800e682:	b151      	cbz	r1, 800e69a <_dtoa_r+0x52>
 800e684:	685a      	ldr	r2, [r3, #4]
 800e686:	2301      	movs	r3, #1
 800e688:	4093      	lsls	r3, r2
 800e68a:	604a      	str	r2, [r1, #4]
 800e68c:	608b      	str	r3, [r1, #8]
 800e68e:	4628      	mov	r0, r5
 800e690:	f000 fe30 	bl	800f2f4 <_Bfree>
 800e694:	2200      	movs	r2, #0
 800e696:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e698:	601a      	str	r2, [r3, #0]
 800e69a:	1e3b      	subs	r3, r7, #0
 800e69c:	bfaf      	iteee	ge
 800e69e:	2300      	movge	r3, #0
 800e6a0:	2201      	movlt	r2, #1
 800e6a2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e6a6:	9305      	strlt	r3, [sp, #20]
 800e6a8:	bfa8      	it	ge
 800e6aa:	f8c8 3000 	strge.w	r3, [r8]
 800e6ae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800e6b2:	4b9f      	ldr	r3, [pc, #636]	; (800e930 <_dtoa_r+0x2e8>)
 800e6b4:	bfb8      	it	lt
 800e6b6:	f8c8 2000 	strlt.w	r2, [r8]
 800e6ba:	ea33 0309 	bics.w	r3, r3, r9
 800e6be:	d119      	bne.n	800e6f4 <_dtoa_r+0xac>
 800e6c0:	f242 730f 	movw	r3, #9999	; 0x270f
 800e6c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e6c6:	6013      	str	r3, [r2, #0]
 800e6c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e6cc:	4333      	orrs	r3, r6
 800e6ce:	f000 8580 	beq.w	800f1d2 <_dtoa_r+0xb8a>
 800e6d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e6d4:	b953      	cbnz	r3, 800e6ec <_dtoa_r+0xa4>
 800e6d6:	4b97      	ldr	r3, [pc, #604]	; (800e934 <_dtoa_r+0x2ec>)
 800e6d8:	e022      	b.n	800e720 <_dtoa_r+0xd8>
 800e6da:	4b97      	ldr	r3, [pc, #604]	; (800e938 <_dtoa_r+0x2f0>)
 800e6dc:	9308      	str	r3, [sp, #32]
 800e6de:	3308      	adds	r3, #8
 800e6e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e6e2:	6013      	str	r3, [r2, #0]
 800e6e4:	9808      	ldr	r0, [sp, #32]
 800e6e6:	b019      	add	sp, #100	; 0x64
 800e6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6ec:	4b91      	ldr	r3, [pc, #580]	; (800e934 <_dtoa_r+0x2ec>)
 800e6ee:	9308      	str	r3, [sp, #32]
 800e6f0:	3303      	adds	r3, #3
 800e6f2:	e7f5      	b.n	800e6e0 <_dtoa_r+0x98>
 800e6f4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800e6f8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800e6fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e700:	2200      	movs	r2, #0
 800e702:	2300      	movs	r3, #0
 800e704:	f7f2 f9b0 	bl	8000a68 <__aeabi_dcmpeq>
 800e708:	4680      	mov	r8, r0
 800e70a:	b158      	cbz	r0, 800e724 <_dtoa_r+0xdc>
 800e70c:	2301      	movs	r3, #1
 800e70e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e710:	6013      	str	r3, [r2, #0]
 800e712:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e714:	2b00      	cmp	r3, #0
 800e716:	f000 8559 	beq.w	800f1cc <_dtoa_r+0xb84>
 800e71a:	4888      	ldr	r0, [pc, #544]	; (800e93c <_dtoa_r+0x2f4>)
 800e71c:	6018      	str	r0, [r3, #0]
 800e71e:	1e43      	subs	r3, r0, #1
 800e720:	9308      	str	r3, [sp, #32]
 800e722:	e7df      	b.n	800e6e4 <_dtoa_r+0x9c>
 800e724:	ab16      	add	r3, sp, #88	; 0x58
 800e726:	9301      	str	r3, [sp, #4]
 800e728:	ab17      	add	r3, sp, #92	; 0x5c
 800e72a:	9300      	str	r3, [sp, #0]
 800e72c:	4628      	mov	r0, r5
 800e72e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e732:	f001 f8c5 	bl	800f8c0 <__d2b>
 800e736:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e73a:	4682      	mov	sl, r0
 800e73c:	2c00      	cmp	r4, #0
 800e73e:	d07e      	beq.n	800e83e <_dtoa_r+0x1f6>
 800e740:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e744:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e746:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800e74a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e74e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800e752:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800e756:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800e75a:	2200      	movs	r2, #0
 800e75c:	4b78      	ldr	r3, [pc, #480]	; (800e940 <_dtoa_r+0x2f8>)
 800e75e:	f7f1 fd63 	bl	8000228 <__aeabi_dsub>
 800e762:	a36b      	add	r3, pc, #428	; (adr r3, 800e910 <_dtoa_r+0x2c8>)
 800e764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e768:	f7f1 ff16 	bl	8000598 <__aeabi_dmul>
 800e76c:	a36a      	add	r3, pc, #424	; (adr r3, 800e918 <_dtoa_r+0x2d0>)
 800e76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e772:	f7f1 fd5b 	bl	800022c <__adddf3>
 800e776:	4606      	mov	r6, r0
 800e778:	4620      	mov	r0, r4
 800e77a:	460f      	mov	r7, r1
 800e77c:	f7f1 fea2 	bl	80004c4 <__aeabi_i2d>
 800e780:	a367      	add	r3, pc, #412	; (adr r3, 800e920 <_dtoa_r+0x2d8>)
 800e782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e786:	f7f1 ff07 	bl	8000598 <__aeabi_dmul>
 800e78a:	4602      	mov	r2, r0
 800e78c:	460b      	mov	r3, r1
 800e78e:	4630      	mov	r0, r6
 800e790:	4639      	mov	r1, r7
 800e792:	f7f1 fd4b 	bl	800022c <__adddf3>
 800e796:	4606      	mov	r6, r0
 800e798:	460f      	mov	r7, r1
 800e79a:	f7f2 f9ad 	bl	8000af8 <__aeabi_d2iz>
 800e79e:	2200      	movs	r2, #0
 800e7a0:	4681      	mov	r9, r0
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	4630      	mov	r0, r6
 800e7a6:	4639      	mov	r1, r7
 800e7a8:	f7f2 f968 	bl	8000a7c <__aeabi_dcmplt>
 800e7ac:	b148      	cbz	r0, 800e7c2 <_dtoa_r+0x17a>
 800e7ae:	4648      	mov	r0, r9
 800e7b0:	f7f1 fe88 	bl	80004c4 <__aeabi_i2d>
 800e7b4:	4632      	mov	r2, r6
 800e7b6:	463b      	mov	r3, r7
 800e7b8:	f7f2 f956 	bl	8000a68 <__aeabi_dcmpeq>
 800e7bc:	b908      	cbnz	r0, 800e7c2 <_dtoa_r+0x17a>
 800e7be:	f109 39ff 	add.w	r9, r9, #4294967295
 800e7c2:	f1b9 0f16 	cmp.w	r9, #22
 800e7c6:	d857      	bhi.n	800e878 <_dtoa_r+0x230>
 800e7c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e7cc:	4b5d      	ldr	r3, [pc, #372]	; (800e944 <_dtoa_r+0x2fc>)
 800e7ce:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800e7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7d6:	f7f2 f951 	bl	8000a7c <__aeabi_dcmplt>
 800e7da:	2800      	cmp	r0, #0
 800e7dc:	d04e      	beq.n	800e87c <_dtoa_r+0x234>
 800e7de:	2300      	movs	r3, #0
 800e7e0:	f109 39ff 	add.w	r9, r9, #4294967295
 800e7e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800e7e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e7e8:	1b1c      	subs	r4, r3, r4
 800e7ea:	1e63      	subs	r3, r4, #1
 800e7ec:	9309      	str	r3, [sp, #36]	; 0x24
 800e7ee:	bf49      	itett	mi
 800e7f0:	f1c4 0301 	rsbmi	r3, r4, #1
 800e7f4:	2300      	movpl	r3, #0
 800e7f6:	9306      	strmi	r3, [sp, #24]
 800e7f8:	2300      	movmi	r3, #0
 800e7fa:	bf54      	ite	pl
 800e7fc:	9306      	strpl	r3, [sp, #24]
 800e7fe:	9309      	strmi	r3, [sp, #36]	; 0x24
 800e800:	f1b9 0f00 	cmp.w	r9, #0
 800e804:	db3c      	blt.n	800e880 <_dtoa_r+0x238>
 800e806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e808:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800e80c:	444b      	add	r3, r9
 800e80e:	9309      	str	r3, [sp, #36]	; 0x24
 800e810:	2300      	movs	r3, #0
 800e812:	930a      	str	r3, [sp, #40]	; 0x28
 800e814:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e816:	2b09      	cmp	r3, #9
 800e818:	d86c      	bhi.n	800e8f4 <_dtoa_r+0x2ac>
 800e81a:	2b05      	cmp	r3, #5
 800e81c:	bfc4      	itt	gt
 800e81e:	3b04      	subgt	r3, #4
 800e820:	9322      	strgt	r3, [sp, #136]	; 0x88
 800e822:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e824:	bfc8      	it	gt
 800e826:	2400      	movgt	r4, #0
 800e828:	f1a3 0302 	sub.w	r3, r3, #2
 800e82c:	bfd8      	it	le
 800e82e:	2401      	movle	r4, #1
 800e830:	2b03      	cmp	r3, #3
 800e832:	f200 808b 	bhi.w	800e94c <_dtoa_r+0x304>
 800e836:	e8df f003 	tbb	[pc, r3]
 800e83a:	4f2d      	.short	0x4f2d
 800e83c:	5b4d      	.short	0x5b4d
 800e83e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800e842:	441c      	add	r4, r3
 800e844:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800e848:	2b20      	cmp	r3, #32
 800e84a:	bfc3      	ittte	gt
 800e84c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e850:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800e854:	fa09 f303 	lslgt.w	r3, r9, r3
 800e858:	f1c3 0320 	rsble	r3, r3, #32
 800e85c:	bfc6      	itte	gt
 800e85e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e862:	4318      	orrgt	r0, r3
 800e864:	fa06 f003 	lslle.w	r0, r6, r3
 800e868:	f7f1 fe1c 	bl	80004a4 <__aeabi_ui2d>
 800e86c:	2301      	movs	r3, #1
 800e86e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800e872:	3c01      	subs	r4, #1
 800e874:	9313      	str	r3, [sp, #76]	; 0x4c
 800e876:	e770      	b.n	800e75a <_dtoa_r+0x112>
 800e878:	2301      	movs	r3, #1
 800e87a:	e7b3      	b.n	800e7e4 <_dtoa_r+0x19c>
 800e87c:	900f      	str	r0, [sp, #60]	; 0x3c
 800e87e:	e7b2      	b.n	800e7e6 <_dtoa_r+0x19e>
 800e880:	9b06      	ldr	r3, [sp, #24]
 800e882:	eba3 0309 	sub.w	r3, r3, r9
 800e886:	9306      	str	r3, [sp, #24]
 800e888:	f1c9 0300 	rsb	r3, r9, #0
 800e88c:	930a      	str	r3, [sp, #40]	; 0x28
 800e88e:	2300      	movs	r3, #0
 800e890:	930e      	str	r3, [sp, #56]	; 0x38
 800e892:	e7bf      	b.n	800e814 <_dtoa_r+0x1cc>
 800e894:	2300      	movs	r3, #0
 800e896:	930b      	str	r3, [sp, #44]	; 0x2c
 800e898:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	dc59      	bgt.n	800e952 <_dtoa_r+0x30a>
 800e89e:	f04f 0b01 	mov.w	fp, #1
 800e8a2:	465b      	mov	r3, fp
 800e8a4:	f8cd b008 	str.w	fp, [sp, #8]
 800e8a8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800e8b0:	6042      	str	r2, [r0, #4]
 800e8b2:	2204      	movs	r2, #4
 800e8b4:	f102 0614 	add.w	r6, r2, #20
 800e8b8:	429e      	cmp	r6, r3
 800e8ba:	6841      	ldr	r1, [r0, #4]
 800e8bc:	d94f      	bls.n	800e95e <_dtoa_r+0x316>
 800e8be:	4628      	mov	r0, r5
 800e8c0:	f000 fcd8 	bl	800f274 <_Balloc>
 800e8c4:	9008      	str	r0, [sp, #32]
 800e8c6:	2800      	cmp	r0, #0
 800e8c8:	d14d      	bne.n	800e966 <_dtoa_r+0x31e>
 800e8ca:	4602      	mov	r2, r0
 800e8cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e8d0:	4b1d      	ldr	r3, [pc, #116]	; (800e948 <_dtoa_r+0x300>)
 800e8d2:	e6cd      	b.n	800e670 <_dtoa_r+0x28>
 800e8d4:	2301      	movs	r3, #1
 800e8d6:	e7de      	b.n	800e896 <_dtoa_r+0x24e>
 800e8d8:	2300      	movs	r3, #0
 800e8da:	930b      	str	r3, [sp, #44]	; 0x2c
 800e8dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e8de:	eb09 0b03 	add.w	fp, r9, r3
 800e8e2:	f10b 0301 	add.w	r3, fp, #1
 800e8e6:	2b01      	cmp	r3, #1
 800e8e8:	9302      	str	r3, [sp, #8]
 800e8ea:	bfb8      	it	lt
 800e8ec:	2301      	movlt	r3, #1
 800e8ee:	e7dd      	b.n	800e8ac <_dtoa_r+0x264>
 800e8f0:	2301      	movs	r3, #1
 800e8f2:	e7f2      	b.n	800e8da <_dtoa_r+0x292>
 800e8f4:	2401      	movs	r4, #1
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	940b      	str	r4, [sp, #44]	; 0x2c
 800e8fa:	9322      	str	r3, [sp, #136]	; 0x88
 800e8fc:	f04f 3bff 	mov.w	fp, #4294967295
 800e900:	2200      	movs	r2, #0
 800e902:	2312      	movs	r3, #18
 800e904:	f8cd b008 	str.w	fp, [sp, #8]
 800e908:	9223      	str	r2, [sp, #140]	; 0x8c
 800e90a:	e7cf      	b.n	800e8ac <_dtoa_r+0x264>
 800e90c:	f3af 8000 	nop.w
 800e910:	636f4361 	.word	0x636f4361
 800e914:	3fd287a7 	.word	0x3fd287a7
 800e918:	8b60c8b3 	.word	0x8b60c8b3
 800e91c:	3fc68a28 	.word	0x3fc68a28
 800e920:	509f79fb 	.word	0x509f79fb
 800e924:	3fd34413 	.word	0x3fd34413
 800e928:	08011741 	.word	0x08011741
 800e92c:	08011758 	.word	0x08011758
 800e930:	7ff00000 	.word	0x7ff00000
 800e934:	0801173d 	.word	0x0801173d
 800e938:	08011734 	.word	0x08011734
 800e93c:	08011711 	.word	0x08011711
 800e940:	3ff80000 	.word	0x3ff80000
 800e944:	08011850 	.word	0x08011850
 800e948:	080117b7 	.word	0x080117b7
 800e94c:	2301      	movs	r3, #1
 800e94e:	930b      	str	r3, [sp, #44]	; 0x2c
 800e950:	e7d4      	b.n	800e8fc <_dtoa_r+0x2b4>
 800e952:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800e956:	465b      	mov	r3, fp
 800e958:	f8cd b008 	str.w	fp, [sp, #8]
 800e95c:	e7a6      	b.n	800e8ac <_dtoa_r+0x264>
 800e95e:	3101      	adds	r1, #1
 800e960:	6041      	str	r1, [r0, #4]
 800e962:	0052      	lsls	r2, r2, #1
 800e964:	e7a6      	b.n	800e8b4 <_dtoa_r+0x26c>
 800e966:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e968:	9a08      	ldr	r2, [sp, #32]
 800e96a:	601a      	str	r2, [r3, #0]
 800e96c:	9b02      	ldr	r3, [sp, #8]
 800e96e:	2b0e      	cmp	r3, #14
 800e970:	f200 80a8 	bhi.w	800eac4 <_dtoa_r+0x47c>
 800e974:	2c00      	cmp	r4, #0
 800e976:	f000 80a5 	beq.w	800eac4 <_dtoa_r+0x47c>
 800e97a:	f1b9 0f00 	cmp.w	r9, #0
 800e97e:	dd34      	ble.n	800e9ea <_dtoa_r+0x3a2>
 800e980:	4a9a      	ldr	r2, [pc, #616]	; (800ebec <_dtoa_r+0x5a4>)
 800e982:	f009 030f 	and.w	r3, r9, #15
 800e986:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e98a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800e98e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800e992:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800e996:	ea4f 1429 	mov.w	r4, r9, asr #4
 800e99a:	d016      	beq.n	800e9ca <_dtoa_r+0x382>
 800e99c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e9a0:	4b93      	ldr	r3, [pc, #588]	; (800ebf0 <_dtoa_r+0x5a8>)
 800e9a2:	2703      	movs	r7, #3
 800e9a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e9a8:	f7f1 ff20 	bl	80007ec <__aeabi_ddiv>
 800e9ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e9b0:	f004 040f 	and.w	r4, r4, #15
 800e9b4:	4e8e      	ldr	r6, [pc, #568]	; (800ebf0 <_dtoa_r+0x5a8>)
 800e9b6:	b954      	cbnz	r4, 800e9ce <_dtoa_r+0x386>
 800e9b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e9bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e9c0:	f7f1 ff14 	bl	80007ec <__aeabi_ddiv>
 800e9c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e9c8:	e029      	b.n	800ea1e <_dtoa_r+0x3d6>
 800e9ca:	2702      	movs	r7, #2
 800e9cc:	e7f2      	b.n	800e9b4 <_dtoa_r+0x36c>
 800e9ce:	07e1      	lsls	r1, r4, #31
 800e9d0:	d508      	bpl.n	800e9e4 <_dtoa_r+0x39c>
 800e9d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e9d6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e9da:	f7f1 fddd 	bl	8000598 <__aeabi_dmul>
 800e9de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800e9e2:	3701      	adds	r7, #1
 800e9e4:	1064      	asrs	r4, r4, #1
 800e9e6:	3608      	adds	r6, #8
 800e9e8:	e7e5      	b.n	800e9b6 <_dtoa_r+0x36e>
 800e9ea:	f000 80a5 	beq.w	800eb38 <_dtoa_r+0x4f0>
 800e9ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e9f2:	f1c9 0400 	rsb	r4, r9, #0
 800e9f6:	4b7d      	ldr	r3, [pc, #500]	; (800ebec <_dtoa_r+0x5a4>)
 800e9f8:	f004 020f 	and.w	r2, r4, #15
 800e9fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ea00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea04:	f7f1 fdc8 	bl	8000598 <__aeabi_dmul>
 800ea08:	2702      	movs	r7, #2
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ea10:	4e77      	ldr	r6, [pc, #476]	; (800ebf0 <_dtoa_r+0x5a8>)
 800ea12:	1124      	asrs	r4, r4, #4
 800ea14:	2c00      	cmp	r4, #0
 800ea16:	f040 8084 	bne.w	800eb22 <_dtoa_r+0x4da>
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d1d2      	bne.n	800e9c4 <_dtoa_r+0x37c>
 800ea1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	f000 808b 	beq.w	800eb3c <_dtoa_r+0x4f4>
 800ea26:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800ea2a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800ea2e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ea32:	2200      	movs	r2, #0
 800ea34:	4b6f      	ldr	r3, [pc, #444]	; (800ebf4 <_dtoa_r+0x5ac>)
 800ea36:	f7f2 f821 	bl	8000a7c <__aeabi_dcmplt>
 800ea3a:	2800      	cmp	r0, #0
 800ea3c:	d07e      	beq.n	800eb3c <_dtoa_r+0x4f4>
 800ea3e:	9b02      	ldr	r3, [sp, #8]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d07b      	beq.n	800eb3c <_dtoa_r+0x4f4>
 800ea44:	f1bb 0f00 	cmp.w	fp, #0
 800ea48:	dd38      	ble.n	800eabc <_dtoa_r+0x474>
 800ea4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ea4e:	2200      	movs	r2, #0
 800ea50:	4b69      	ldr	r3, [pc, #420]	; (800ebf8 <_dtoa_r+0x5b0>)
 800ea52:	f7f1 fda1 	bl	8000598 <__aeabi_dmul>
 800ea56:	465c      	mov	r4, fp
 800ea58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ea5c:	f109 38ff 	add.w	r8, r9, #4294967295
 800ea60:	3701      	adds	r7, #1
 800ea62:	4638      	mov	r0, r7
 800ea64:	f7f1 fd2e 	bl	80004c4 <__aeabi_i2d>
 800ea68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea6c:	f7f1 fd94 	bl	8000598 <__aeabi_dmul>
 800ea70:	2200      	movs	r2, #0
 800ea72:	4b62      	ldr	r3, [pc, #392]	; (800ebfc <_dtoa_r+0x5b4>)
 800ea74:	f7f1 fbda 	bl	800022c <__adddf3>
 800ea78:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800ea7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ea80:	9611      	str	r6, [sp, #68]	; 0x44
 800ea82:	2c00      	cmp	r4, #0
 800ea84:	d15d      	bne.n	800eb42 <_dtoa_r+0x4fa>
 800ea86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	4b5c      	ldr	r3, [pc, #368]	; (800ec00 <_dtoa_r+0x5b8>)
 800ea8e:	f7f1 fbcb 	bl	8000228 <__aeabi_dsub>
 800ea92:	4602      	mov	r2, r0
 800ea94:	460b      	mov	r3, r1
 800ea96:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ea9a:	4633      	mov	r3, r6
 800ea9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ea9e:	f7f2 f80b 	bl	8000ab8 <__aeabi_dcmpgt>
 800eaa2:	2800      	cmp	r0, #0
 800eaa4:	f040 829e 	bne.w	800efe4 <_dtoa_r+0x99c>
 800eaa8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eaac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800eaae:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800eab2:	f7f1 ffe3 	bl	8000a7c <__aeabi_dcmplt>
 800eab6:	2800      	cmp	r0, #0
 800eab8:	f040 8292 	bne.w	800efe0 <_dtoa_r+0x998>
 800eabc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800eac0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800eac4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	f2c0 8153 	blt.w	800ed72 <_dtoa_r+0x72a>
 800eacc:	f1b9 0f0e 	cmp.w	r9, #14
 800ead0:	f300 814f 	bgt.w	800ed72 <_dtoa_r+0x72a>
 800ead4:	4b45      	ldr	r3, [pc, #276]	; (800ebec <_dtoa_r+0x5a4>)
 800ead6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800eada:	e9d3 3400 	ldrd	r3, r4, [r3]
 800eade:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800eae2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	f280 80db 	bge.w	800eca0 <_dtoa_r+0x658>
 800eaea:	9b02      	ldr	r3, [sp, #8]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	f300 80d7 	bgt.w	800eca0 <_dtoa_r+0x658>
 800eaf2:	f040 8274 	bne.w	800efde <_dtoa_r+0x996>
 800eaf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eafa:	2200      	movs	r2, #0
 800eafc:	4b40      	ldr	r3, [pc, #256]	; (800ec00 <_dtoa_r+0x5b8>)
 800eafe:	f7f1 fd4b 	bl	8000598 <__aeabi_dmul>
 800eb02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eb06:	f7f1 ffcd 	bl	8000aa4 <__aeabi_dcmpge>
 800eb0a:	9c02      	ldr	r4, [sp, #8]
 800eb0c:	4626      	mov	r6, r4
 800eb0e:	2800      	cmp	r0, #0
 800eb10:	f040 824a 	bne.w	800efa8 <_dtoa_r+0x960>
 800eb14:	2331      	movs	r3, #49	; 0x31
 800eb16:	9f08      	ldr	r7, [sp, #32]
 800eb18:	f109 0901 	add.w	r9, r9, #1
 800eb1c:	f807 3b01 	strb.w	r3, [r7], #1
 800eb20:	e246      	b.n	800efb0 <_dtoa_r+0x968>
 800eb22:	07e2      	lsls	r2, r4, #31
 800eb24:	d505      	bpl.n	800eb32 <_dtoa_r+0x4ea>
 800eb26:	e9d6 2300 	ldrd	r2, r3, [r6]
 800eb2a:	f7f1 fd35 	bl	8000598 <__aeabi_dmul>
 800eb2e:	2301      	movs	r3, #1
 800eb30:	3701      	adds	r7, #1
 800eb32:	1064      	asrs	r4, r4, #1
 800eb34:	3608      	adds	r6, #8
 800eb36:	e76d      	b.n	800ea14 <_dtoa_r+0x3cc>
 800eb38:	2702      	movs	r7, #2
 800eb3a:	e770      	b.n	800ea1e <_dtoa_r+0x3d6>
 800eb3c:	46c8      	mov	r8, r9
 800eb3e:	9c02      	ldr	r4, [sp, #8]
 800eb40:	e78f      	b.n	800ea62 <_dtoa_r+0x41a>
 800eb42:	9908      	ldr	r1, [sp, #32]
 800eb44:	4b29      	ldr	r3, [pc, #164]	; (800ebec <_dtoa_r+0x5a4>)
 800eb46:	4421      	add	r1, r4
 800eb48:	9112      	str	r1, [sp, #72]	; 0x48
 800eb4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800eb4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800eb50:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800eb54:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800eb58:	2900      	cmp	r1, #0
 800eb5a:	d055      	beq.n	800ec08 <_dtoa_r+0x5c0>
 800eb5c:	2000      	movs	r0, #0
 800eb5e:	4929      	ldr	r1, [pc, #164]	; (800ec04 <_dtoa_r+0x5bc>)
 800eb60:	f7f1 fe44 	bl	80007ec <__aeabi_ddiv>
 800eb64:	463b      	mov	r3, r7
 800eb66:	4632      	mov	r2, r6
 800eb68:	f7f1 fb5e 	bl	8000228 <__aeabi_dsub>
 800eb6c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800eb70:	9f08      	ldr	r7, [sp, #32]
 800eb72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eb76:	f7f1 ffbf 	bl	8000af8 <__aeabi_d2iz>
 800eb7a:	4604      	mov	r4, r0
 800eb7c:	f7f1 fca2 	bl	80004c4 <__aeabi_i2d>
 800eb80:	4602      	mov	r2, r0
 800eb82:	460b      	mov	r3, r1
 800eb84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eb88:	f7f1 fb4e 	bl	8000228 <__aeabi_dsub>
 800eb8c:	4602      	mov	r2, r0
 800eb8e:	460b      	mov	r3, r1
 800eb90:	3430      	adds	r4, #48	; 0x30
 800eb92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800eb96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800eb9a:	f807 4b01 	strb.w	r4, [r7], #1
 800eb9e:	f7f1 ff6d 	bl	8000a7c <__aeabi_dcmplt>
 800eba2:	2800      	cmp	r0, #0
 800eba4:	d174      	bne.n	800ec90 <_dtoa_r+0x648>
 800eba6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ebaa:	2000      	movs	r0, #0
 800ebac:	4911      	ldr	r1, [pc, #68]	; (800ebf4 <_dtoa_r+0x5ac>)
 800ebae:	f7f1 fb3b 	bl	8000228 <__aeabi_dsub>
 800ebb2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ebb6:	f7f1 ff61 	bl	8000a7c <__aeabi_dcmplt>
 800ebba:	2800      	cmp	r0, #0
 800ebbc:	f040 80b6 	bne.w	800ed2c <_dtoa_r+0x6e4>
 800ebc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ebc2:	429f      	cmp	r7, r3
 800ebc4:	f43f af7a 	beq.w	800eabc <_dtoa_r+0x474>
 800ebc8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ebcc:	2200      	movs	r2, #0
 800ebce:	4b0a      	ldr	r3, [pc, #40]	; (800ebf8 <_dtoa_r+0x5b0>)
 800ebd0:	f7f1 fce2 	bl	8000598 <__aeabi_dmul>
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ebda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ebde:	4b06      	ldr	r3, [pc, #24]	; (800ebf8 <_dtoa_r+0x5b0>)
 800ebe0:	f7f1 fcda 	bl	8000598 <__aeabi_dmul>
 800ebe4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ebe8:	e7c3      	b.n	800eb72 <_dtoa_r+0x52a>
 800ebea:	bf00      	nop
 800ebec:	08011850 	.word	0x08011850
 800ebf0:	08011828 	.word	0x08011828
 800ebf4:	3ff00000 	.word	0x3ff00000
 800ebf8:	40240000 	.word	0x40240000
 800ebfc:	401c0000 	.word	0x401c0000
 800ec00:	40140000 	.word	0x40140000
 800ec04:	3fe00000 	.word	0x3fe00000
 800ec08:	4630      	mov	r0, r6
 800ec0a:	4639      	mov	r1, r7
 800ec0c:	f7f1 fcc4 	bl	8000598 <__aeabi_dmul>
 800ec10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ec12:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800ec16:	9c08      	ldr	r4, [sp, #32]
 800ec18:	9314      	str	r3, [sp, #80]	; 0x50
 800ec1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ec1e:	f7f1 ff6b 	bl	8000af8 <__aeabi_d2iz>
 800ec22:	9015      	str	r0, [sp, #84]	; 0x54
 800ec24:	f7f1 fc4e 	bl	80004c4 <__aeabi_i2d>
 800ec28:	4602      	mov	r2, r0
 800ec2a:	460b      	mov	r3, r1
 800ec2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ec30:	f7f1 fafa 	bl	8000228 <__aeabi_dsub>
 800ec34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ec36:	4606      	mov	r6, r0
 800ec38:	3330      	adds	r3, #48	; 0x30
 800ec3a:	f804 3b01 	strb.w	r3, [r4], #1
 800ec3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ec40:	460f      	mov	r7, r1
 800ec42:	429c      	cmp	r4, r3
 800ec44:	f04f 0200 	mov.w	r2, #0
 800ec48:	d124      	bne.n	800ec94 <_dtoa_r+0x64c>
 800ec4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ec4e:	4bb3      	ldr	r3, [pc, #716]	; (800ef1c <_dtoa_r+0x8d4>)
 800ec50:	f7f1 faec 	bl	800022c <__adddf3>
 800ec54:	4602      	mov	r2, r0
 800ec56:	460b      	mov	r3, r1
 800ec58:	4630      	mov	r0, r6
 800ec5a:	4639      	mov	r1, r7
 800ec5c:	f7f1 ff2c 	bl	8000ab8 <__aeabi_dcmpgt>
 800ec60:	2800      	cmp	r0, #0
 800ec62:	d162      	bne.n	800ed2a <_dtoa_r+0x6e2>
 800ec64:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ec68:	2000      	movs	r0, #0
 800ec6a:	49ac      	ldr	r1, [pc, #688]	; (800ef1c <_dtoa_r+0x8d4>)
 800ec6c:	f7f1 fadc 	bl	8000228 <__aeabi_dsub>
 800ec70:	4602      	mov	r2, r0
 800ec72:	460b      	mov	r3, r1
 800ec74:	4630      	mov	r0, r6
 800ec76:	4639      	mov	r1, r7
 800ec78:	f7f1 ff00 	bl	8000a7c <__aeabi_dcmplt>
 800ec7c:	2800      	cmp	r0, #0
 800ec7e:	f43f af1d 	beq.w	800eabc <_dtoa_r+0x474>
 800ec82:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800ec84:	1e7b      	subs	r3, r7, #1
 800ec86:	9314      	str	r3, [sp, #80]	; 0x50
 800ec88:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800ec8c:	2b30      	cmp	r3, #48	; 0x30
 800ec8e:	d0f8      	beq.n	800ec82 <_dtoa_r+0x63a>
 800ec90:	46c1      	mov	r9, r8
 800ec92:	e03a      	b.n	800ed0a <_dtoa_r+0x6c2>
 800ec94:	4ba2      	ldr	r3, [pc, #648]	; (800ef20 <_dtoa_r+0x8d8>)
 800ec96:	f7f1 fc7f 	bl	8000598 <__aeabi_dmul>
 800ec9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ec9e:	e7bc      	b.n	800ec1a <_dtoa_r+0x5d2>
 800eca0:	9f08      	ldr	r7, [sp, #32]
 800eca2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800eca6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ecaa:	f7f1 fd9f 	bl	80007ec <__aeabi_ddiv>
 800ecae:	f7f1 ff23 	bl	8000af8 <__aeabi_d2iz>
 800ecb2:	4604      	mov	r4, r0
 800ecb4:	f7f1 fc06 	bl	80004c4 <__aeabi_i2d>
 800ecb8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ecbc:	f7f1 fc6c 	bl	8000598 <__aeabi_dmul>
 800ecc0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800ecc4:	460b      	mov	r3, r1
 800ecc6:	4602      	mov	r2, r0
 800ecc8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eccc:	f7f1 faac 	bl	8000228 <__aeabi_dsub>
 800ecd0:	f807 6b01 	strb.w	r6, [r7], #1
 800ecd4:	9e08      	ldr	r6, [sp, #32]
 800ecd6:	9b02      	ldr	r3, [sp, #8]
 800ecd8:	1bbe      	subs	r6, r7, r6
 800ecda:	42b3      	cmp	r3, r6
 800ecdc:	d13a      	bne.n	800ed54 <_dtoa_r+0x70c>
 800ecde:	4602      	mov	r2, r0
 800ece0:	460b      	mov	r3, r1
 800ece2:	f7f1 faa3 	bl	800022c <__adddf3>
 800ece6:	4602      	mov	r2, r0
 800ece8:	460b      	mov	r3, r1
 800ecea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ecee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ecf2:	f7f1 fee1 	bl	8000ab8 <__aeabi_dcmpgt>
 800ecf6:	bb58      	cbnz	r0, 800ed50 <_dtoa_r+0x708>
 800ecf8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ecfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ed00:	f7f1 feb2 	bl	8000a68 <__aeabi_dcmpeq>
 800ed04:	b108      	cbz	r0, 800ed0a <_dtoa_r+0x6c2>
 800ed06:	07e1      	lsls	r1, r4, #31
 800ed08:	d422      	bmi.n	800ed50 <_dtoa_r+0x708>
 800ed0a:	4628      	mov	r0, r5
 800ed0c:	4651      	mov	r1, sl
 800ed0e:	f000 faf1 	bl	800f2f4 <_Bfree>
 800ed12:	2300      	movs	r3, #0
 800ed14:	703b      	strb	r3, [r7, #0]
 800ed16:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ed18:	f109 0001 	add.w	r0, r9, #1
 800ed1c:	6018      	str	r0, [r3, #0]
 800ed1e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	f43f acdf 	beq.w	800e6e4 <_dtoa_r+0x9c>
 800ed26:	601f      	str	r7, [r3, #0]
 800ed28:	e4dc      	b.n	800e6e4 <_dtoa_r+0x9c>
 800ed2a:	4627      	mov	r7, r4
 800ed2c:	463b      	mov	r3, r7
 800ed2e:	461f      	mov	r7, r3
 800ed30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ed34:	2a39      	cmp	r2, #57	; 0x39
 800ed36:	d107      	bne.n	800ed48 <_dtoa_r+0x700>
 800ed38:	9a08      	ldr	r2, [sp, #32]
 800ed3a:	429a      	cmp	r2, r3
 800ed3c:	d1f7      	bne.n	800ed2e <_dtoa_r+0x6e6>
 800ed3e:	2230      	movs	r2, #48	; 0x30
 800ed40:	9908      	ldr	r1, [sp, #32]
 800ed42:	f108 0801 	add.w	r8, r8, #1
 800ed46:	700a      	strb	r2, [r1, #0]
 800ed48:	781a      	ldrb	r2, [r3, #0]
 800ed4a:	3201      	adds	r2, #1
 800ed4c:	701a      	strb	r2, [r3, #0]
 800ed4e:	e79f      	b.n	800ec90 <_dtoa_r+0x648>
 800ed50:	46c8      	mov	r8, r9
 800ed52:	e7eb      	b.n	800ed2c <_dtoa_r+0x6e4>
 800ed54:	2200      	movs	r2, #0
 800ed56:	4b72      	ldr	r3, [pc, #456]	; (800ef20 <_dtoa_r+0x8d8>)
 800ed58:	f7f1 fc1e 	bl	8000598 <__aeabi_dmul>
 800ed5c:	4602      	mov	r2, r0
 800ed5e:	460b      	mov	r3, r1
 800ed60:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ed64:	2200      	movs	r2, #0
 800ed66:	2300      	movs	r3, #0
 800ed68:	f7f1 fe7e 	bl	8000a68 <__aeabi_dcmpeq>
 800ed6c:	2800      	cmp	r0, #0
 800ed6e:	d098      	beq.n	800eca2 <_dtoa_r+0x65a>
 800ed70:	e7cb      	b.n	800ed0a <_dtoa_r+0x6c2>
 800ed72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ed74:	2a00      	cmp	r2, #0
 800ed76:	f000 80cd 	beq.w	800ef14 <_dtoa_r+0x8cc>
 800ed7a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ed7c:	2a01      	cmp	r2, #1
 800ed7e:	f300 80af 	bgt.w	800eee0 <_dtoa_r+0x898>
 800ed82:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ed84:	2a00      	cmp	r2, #0
 800ed86:	f000 80a7 	beq.w	800eed8 <_dtoa_r+0x890>
 800ed8a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ed8e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ed90:	9f06      	ldr	r7, [sp, #24]
 800ed92:	9a06      	ldr	r2, [sp, #24]
 800ed94:	2101      	movs	r1, #1
 800ed96:	441a      	add	r2, r3
 800ed98:	9206      	str	r2, [sp, #24]
 800ed9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed9c:	4628      	mov	r0, r5
 800ed9e:	441a      	add	r2, r3
 800eda0:	9209      	str	r2, [sp, #36]	; 0x24
 800eda2:	f000 fb61 	bl	800f468 <__i2b>
 800eda6:	4606      	mov	r6, r0
 800eda8:	2f00      	cmp	r7, #0
 800edaa:	dd0c      	ble.n	800edc6 <_dtoa_r+0x77e>
 800edac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edae:	2b00      	cmp	r3, #0
 800edb0:	dd09      	ble.n	800edc6 <_dtoa_r+0x77e>
 800edb2:	42bb      	cmp	r3, r7
 800edb4:	bfa8      	it	ge
 800edb6:	463b      	movge	r3, r7
 800edb8:	9a06      	ldr	r2, [sp, #24]
 800edba:	1aff      	subs	r7, r7, r3
 800edbc:	1ad2      	subs	r2, r2, r3
 800edbe:	9206      	str	r2, [sp, #24]
 800edc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800edc2:	1ad3      	subs	r3, r2, r3
 800edc4:	9309      	str	r3, [sp, #36]	; 0x24
 800edc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800edc8:	b1f3      	cbz	r3, 800ee08 <_dtoa_r+0x7c0>
 800edca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800edcc:	2b00      	cmp	r3, #0
 800edce:	f000 80a9 	beq.w	800ef24 <_dtoa_r+0x8dc>
 800edd2:	2c00      	cmp	r4, #0
 800edd4:	dd10      	ble.n	800edf8 <_dtoa_r+0x7b0>
 800edd6:	4631      	mov	r1, r6
 800edd8:	4622      	mov	r2, r4
 800edda:	4628      	mov	r0, r5
 800eddc:	f000 fbfe 	bl	800f5dc <__pow5mult>
 800ede0:	4652      	mov	r2, sl
 800ede2:	4601      	mov	r1, r0
 800ede4:	4606      	mov	r6, r0
 800ede6:	4628      	mov	r0, r5
 800ede8:	f000 fb54 	bl	800f494 <__multiply>
 800edec:	4680      	mov	r8, r0
 800edee:	4651      	mov	r1, sl
 800edf0:	4628      	mov	r0, r5
 800edf2:	f000 fa7f 	bl	800f2f4 <_Bfree>
 800edf6:	46c2      	mov	sl, r8
 800edf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800edfa:	1b1a      	subs	r2, r3, r4
 800edfc:	d004      	beq.n	800ee08 <_dtoa_r+0x7c0>
 800edfe:	4651      	mov	r1, sl
 800ee00:	4628      	mov	r0, r5
 800ee02:	f000 fbeb 	bl	800f5dc <__pow5mult>
 800ee06:	4682      	mov	sl, r0
 800ee08:	2101      	movs	r1, #1
 800ee0a:	4628      	mov	r0, r5
 800ee0c:	f000 fb2c 	bl	800f468 <__i2b>
 800ee10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ee12:	4604      	mov	r4, r0
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	f340 8087 	ble.w	800ef28 <_dtoa_r+0x8e0>
 800ee1a:	461a      	mov	r2, r3
 800ee1c:	4601      	mov	r1, r0
 800ee1e:	4628      	mov	r0, r5
 800ee20:	f000 fbdc 	bl	800f5dc <__pow5mult>
 800ee24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ee26:	4604      	mov	r4, r0
 800ee28:	2b01      	cmp	r3, #1
 800ee2a:	f340 8080 	ble.w	800ef2e <_dtoa_r+0x8e6>
 800ee2e:	f04f 0800 	mov.w	r8, #0
 800ee32:	6923      	ldr	r3, [r4, #16]
 800ee34:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ee38:	6918      	ldr	r0, [r3, #16]
 800ee3a:	f000 fac7 	bl	800f3cc <__hi0bits>
 800ee3e:	f1c0 0020 	rsb	r0, r0, #32
 800ee42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee44:	4418      	add	r0, r3
 800ee46:	f010 001f 	ands.w	r0, r0, #31
 800ee4a:	f000 8092 	beq.w	800ef72 <_dtoa_r+0x92a>
 800ee4e:	f1c0 0320 	rsb	r3, r0, #32
 800ee52:	2b04      	cmp	r3, #4
 800ee54:	f340 808a 	ble.w	800ef6c <_dtoa_r+0x924>
 800ee58:	f1c0 001c 	rsb	r0, r0, #28
 800ee5c:	9b06      	ldr	r3, [sp, #24]
 800ee5e:	4407      	add	r7, r0
 800ee60:	4403      	add	r3, r0
 800ee62:	9306      	str	r3, [sp, #24]
 800ee64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee66:	4403      	add	r3, r0
 800ee68:	9309      	str	r3, [sp, #36]	; 0x24
 800ee6a:	9b06      	ldr	r3, [sp, #24]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	dd05      	ble.n	800ee7c <_dtoa_r+0x834>
 800ee70:	4651      	mov	r1, sl
 800ee72:	461a      	mov	r2, r3
 800ee74:	4628      	mov	r0, r5
 800ee76:	f000 fc0b 	bl	800f690 <__lshift>
 800ee7a:	4682      	mov	sl, r0
 800ee7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	dd05      	ble.n	800ee8e <_dtoa_r+0x846>
 800ee82:	4621      	mov	r1, r4
 800ee84:	461a      	mov	r2, r3
 800ee86:	4628      	mov	r0, r5
 800ee88:	f000 fc02 	bl	800f690 <__lshift>
 800ee8c:	4604      	mov	r4, r0
 800ee8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d070      	beq.n	800ef76 <_dtoa_r+0x92e>
 800ee94:	4621      	mov	r1, r4
 800ee96:	4650      	mov	r0, sl
 800ee98:	f000 fc66 	bl	800f768 <__mcmp>
 800ee9c:	2800      	cmp	r0, #0
 800ee9e:	da6a      	bge.n	800ef76 <_dtoa_r+0x92e>
 800eea0:	2300      	movs	r3, #0
 800eea2:	4651      	mov	r1, sl
 800eea4:	220a      	movs	r2, #10
 800eea6:	4628      	mov	r0, r5
 800eea8:	f000 fa46 	bl	800f338 <__multadd>
 800eeac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eeae:	4682      	mov	sl, r0
 800eeb0:	f109 39ff 	add.w	r9, r9, #4294967295
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	f000 8193 	beq.w	800f1e0 <_dtoa_r+0xb98>
 800eeba:	4631      	mov	r1, r6
 800eebc:	2300      	movs	r3, #0
 800eebe:	220a      	movs	r2, #10
 800eec0:	4628      	mov	r0, r5
 800eec2:	f000 fa39 	bl	800f338 <__multadd>
 800eec6:	f1bb 0f00 	cmp.w	fp, #0
 800eeca:	4606      	mov	r6, r0
 800eecc:	f300 8093 	bgt.w	800eff6 <_dtoa_r+0x9ae>
 800eed0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800eed2:	2b02      	cmp	r3, #2
 800eed4:	dc57      	bgt.n	800ef86 <_dtoa_r+0x93e>
 800eed6:	e08e      	b.n	800eff6 <_dtoa_r+0x9ae>
 800eed8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800eeda:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800eede:	e756      	b.n	800ed8e <_dtoa_r+0x746>
 800eee0:	9b02      	ldr	r3, [sp, #8]
 800eee2:	1e5c      	subs	r4, r3, #1
 800eee4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eee6:	42a3      	cmp	r3, r4
 800eee8:	bfb7      	itett	lt
 800eeea:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800eeec:	1b1c      	subge	r4, r3, r4
 800eeee:	1ae2      	sublt	r2, r4, r3
 800eef0:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800eef2:	bfbe      	ittt	lt
 800eef4:	940a      	strlt	r4, [sp, #40]	; 0x28
 800eef6:	189b      	addlt	r3, r3, r2
 800eef8:	930e      	strlt	r3, [sp, #56]	; 0x38
 800eefa:	9b02      	ldr	r3, [sp, #8]
 800eefc:	bfb8      	it	lt
 800eefe:	2400      	movlt	r4, #0
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	bfbb      	ittet	lt
 800ef04:	9b06      	ldrlt	r3, [sp, #24]
 800ef06:	9a02      	ldrlt	r2, [sp, #8]
 800ef08:	9f06      	ldrge	r7, [sp, #24]
 800ef0a:	1a9f      	sublt	r7, r3, r2
 800ef0c:	bfac      	ite	ge
 800ef0e:	9b02      	ldrge	r3, [sp, #8]
 800ef10:	2300      	movlt	r3, #0
 800ef12:	e73e      	b.n	800ed92 <_dtoa_r+0x74a>
 800ef14:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ef16:	9f06      	ldr	r7, [sp, #24]
 800ef18:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800ef1a:	e745      	b.n	800eda8 <_dtoa_r+0x760>
 800ef1c:	3fe00000 	.word	0x3fe00000
 800ef20:	40240000 	.word	0x40240000
 800ef24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ef26:	e76a      	b.n	800edfe <_dtoa_r+0x7b6>
 800ef28:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ef2a:	2b01      	cmp	r3, #1
 800ef2c:	dc19      	bgt.n	800ef62 <_dtoa_r+0x91a>
 800ef2e:	9b04      	ldr	r3, [sp, #16]
 800ef30:	b9bb      	cbnz	r3, 800ef62 <_dtoa_r+0x91a>
 800ef32:	9b05      	ldr	r3, [sp, #20]
 800ef34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ef38:	b99b      	cbnz	r3, 800ef62 <_dtoa_r+0x91a>
 800ef3a:	9b05      	ldr	r3, [sp, #20]
 800ef3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ef40:	0d1b      	lsrs	r3, r3, #20
 800ef42:	051b      	lsls	r3, r3, #20
 800ef44:	b183      	cbz	r3, 800ef68 <_dtoa_r+0x920>
 800ef46:	f04f 0801 	mov.w	r8, #1
 800ef4a:	9b06      	ldr	r3, [sp, #24]
 800ef4c:	3301      	adds	r3, #1
 800ef4e:	9306      	str	r3, [sp, #24]
 800ef50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef52:	3301      	adds	r3, #1
 800ef54:	9309      	str	r3, [sp, #36]	; 0x24
 800ef56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	f47f af6a 	bne.w	800ee32 <_dtoa_r+0x7ea>
 800ef5e:	2001      	movs	r0, #1
 800ef60:	e76f      	b.n	800ee42 <_dtoa_r+0x7fa>
 800ef62:	f04f 0800 	mov.w	r8, #0
 800ef66:	e7f6      	b.n	800ef56 <_dtoa_r+0x90e>
 800ef68:	4698      	mov	r8, r3
 800ef6a:	e7f4      	b.n	800ef56 <_dtoa_r+0x90e>
 800ef6c:	f43f af7d 	beq.w	800ee6a <_dtoa_r+0x822>
 800ef70:	4618      	mov	r0, r3
 800ef72:	301c      	adds	r0, #28
 800ef74:	e772      	b.n	800ee5c <_dtoa_r+0x814>
 800ef76:	9b02      	ldr	r3, [sp, #8]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	dc36      	bgt.n	800efea <_dtoa_r+0x9a2>
 800ef7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ef7e:	2b02      	cmp	r3, #2
 800ef80:	dd33      	ble.n	800efea <_dtoa_r+0x9a2>
 800ef82:	f8dd b008 	ldr.w	fp, [sp, #8]
 800ef86:	f1bb 0f00 	cmp.w	fp, #0
 800ef8a:	d10d      	bne.n	800efa8 <_dtoa_r+0x960>
 800ef8c:	4621      	mov	r1, r4
 800ef8e:	465b      	mov	r3, fp
 800ef90:	2205      	movs	r2, #5
 800ef92:	4628      	mov	r0, r5
 800ef94:	f000 f9d0 	bl	800f338 <__multadd>
 800ef98:	4601      	mov	r1, r0
 800ef9a:	4604      	mov	r4, r0
 800ef9c:	4650      	mov	r0, sl
 800ef9e:	f000 fbe3 	bl	800f768 <__mcmp>
 800efa2:	2800      	cmp	r0, #0
 800efa4:	f73f adb6 	bgt.w	800eb14 <_dtoa_r+0x4cc>
 800efa8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800efaa:	9f08      	ldr	r7, [sp, #32]
 800efac:	ea6f 0903 	mvn.w	r9, r3
 800efb0:	f04f 0800 	mov.w	r8, #0
 800efb4:	4621      	mov	r1, r4
 800efb6:	4628      	mov	r0, r5
 800efb8:	f000 f99c 	bl	800f2f4 <_Bfree>
 800efbc:	2e00      	cmp	r6, #0
 800efbe:	f43f aea4 	beq.w	800ed0a <_dtoa_r+0x6c2>
 800efc2:	f1b8 0f00 	cmp.w	r8, #0
 800efc6:	d005      	beq.n	800efd4 <_dtoa_r+0x98c>
 800efc8:	45b0      	cmp	r8, r6
 800efca:	d003      	beq.n	800efd4 <_dtoa_r+0x98c>
 800efcc:	4641      	mov	r1, r8
 800efce:	4628      	mov	r0, r5
 800efd0:	f000 f990 	bl	800f2f4 <_Bfree>
 800efd4:	4631      	mov	r1, r6
 800efd6:	4628      	mov	r0, r5
 800efd8:	f000 f98c 	bl	800f2f4 <_Bfree>
 800efdc:	e695      	b.n	800ed0a <_dtoa_r+0x6c2>
 800efde:	2400      	movs	r4, #0
 800efe0:	4626      	mov	r6, r4
 800efe2:	e7e1      	b.n	800efa8 <_dtoa_r+0x960>
 800efe4:	46c1      	mov	r9, r8
 800efe6:	4626      	mov	r6, r4
 800efe8:	e594      	b.n	800eb14 <_dtoa_r+0x4cc>
 800efea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800efec:	f8dd b008 	ldr.w	fp, [sp, #8]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	f000 80fc 	beq.w	800f1ee <_dtoa_r+0xba6>
 800eff6:	2f00      	cmp	r7, #0
 800eff8:	dd05      	ble.n	800f006 <_dtoa_r+0x9be>
 800effa:	4631      	mov	r1, r6
 800effc:	463a      	mov	r2, r7
 800effe:	4628      	mov	r0, r5
 800f000:	f000 fb46 	bl	800f690 <__lshift>
 800f004:	4606      	mov	r6, r0
 800f006:	f1b8 0f00 	cmp.w	r8, #0
 800f00a:	d05c      	beq.n	800f0c6 <_dtoa_r+0xa7e>
 800f00c:	4628      	mov	r0, r5
 800f00e:	6871      	ldr	r1, [r6, #4]
 800f010:	f000 f930 	bl	800f274 <_Balloc>
 800f014:	4607      	mov	r7, r0
 800f016:	b928      	cbnz	r0, 800f024 <_dtoa_r+0x9dc>
 800f018:	4602      	mov	r2, r0
 800f01a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f01e:	4b7e      	ldr	r3, [pc, #504]	; (800f218 <_dtoa_r+0xbd0>)
 800f020:	f7ff bb26 	b.w	800e670 <_dtoa_r+0x28>
 800f024:	6932      	ldr	r2, [r6, #16]
 800f026:	f106 010c 	add.w	r1, r6, #12
 800f02a:	3202      	adds	r2, #2
 800f02c:	0092      	lsls	r2, r2, #2
 800f02e:	300c      	adds	r0, #12
 800f030:	f000 f912 	bl	800f258 <memcpy>
 800f034:	2201      	movs	r2, #1
 800f036:	4639      	mov	r1, r7
 800f038:	4628      	mov	r0, r5
 800f03a:	f000 fb29 	bl	800f690 <__lshift>
 800f03e:	46b0      	mov	r8, r6
 800f040:	4606      	mov	r6, r0
 800f042:	9b08      	ldr	r3, [sp, #32]
 800f044:	3301      	adds	r3, #1
 800f046:	9302      	str	r3, [sp, #8]
 800f048:	9b08      	ldr	r3, [sp, #32]
 800f04a:	445b      	add	r3, fp
 800f04c:	930a      	str	r3, [sp, #40]	; 0x28
 800f04e:	9b04      	ldr	r3, [sp, #16]
 800f050:	f003 0301 	and.w	r3, r3, #1
 800f054:	9309      	str	r3, [sp, #36]	; 0x24
 800f056:	9b02      	ldr	r3, [sp, #8]
 800f058:	4621      	mov	r1, r4
 800f05a:	4650      	mov	r0, sl
 800f05c:	f103 3bff 	add.w	fp, r3, #4294967295
 800f060:	f7ff fa65 	bl	800e52e <quorem>
 800f064:	4603      	mov	r3, r0
 800f066:	4641      	mov	r1, r8
 800f068:	3330      	adds	r3, #48	; 0x30
 800f06a:	9004      	str	r0, [sp, #16]
 800f06c:	4650      	mov	r0, sl
 800f06e:	930b      	str	r3, [sp, #44]	; 0x2c
 800f070:	f000 fb7a 	bl	800f768 <__mcmp>
 800f074:	4632      	mov	r2, r6
 800f076:	9006      	str	r0, [sp, #24]
 800f078:	4621      	mov	r1, r4
 800f07a:	4628      	mov	r0, r5
 800f07c:	f000 fb90 	bl	800f7a0 <__mdiff>
 800f080:	68c2      	ldr	r2, [r0, #12]
 800f082:	4607      	mov	r7, r0
 800f084:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f086:	bb02      	cbnz	r2, 800f0ca <_dtoa_r+0xa82>
 800f088:	4601      	mov	r1, r0
 800f08a:	4650      	mov	r0, sl
 800f08c:	f000 fb6c 	bl	800f768 <__mcmp>
 800f090:	4602      	mov	r2, r0
 800f092:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f094:	4639      	mov	r1, r7
 800f096:	4628      	mov	r0, r5
 800f098:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800f09c:	f000 f92a 	bl	800f2f4 <_Bfree>
 800f0a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f0a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f0a4:	9f02      	ldr	r7, [sp, #8]
 800f0a6:	ea43 0102 	orr.w	r1, r3, r2
 800f0aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0ac:	430b      	orrs	r3, r1
 800f0ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f0b0:	d10d      	bne.n	800f0ce <_dtoa_r+0xa86>
 800f0b2:	2b39      	cmp	r3, #57	; 0x39
 800f0b4:	d027      	beq.n	800f106 <_dtoa_r+0xabe>
 800f0b6:	9a06      	ldr	r2, [sp, #24]
 800f0b8:	2a00      	cmp	r2, #0
 800f0ba:	dd01      	ble.n	800f0c0 <_dtoa_r+0xa78>
 800f0bc:	9b04      	ldr	r3, [sp, #16]
 800f0be:	3331      	adds	r3, #49	; 0x31
 800f0c0:	f88b 3000 	strb.w	r3, [fp]
 800f0c4:	e776      	b.n	800efb4 <_dtoa_r+0x96c>
 800f0c6:	4630      	mov	r0, r6
 800f0c8:	e7b9      	b.n	800f03e <_dtoa_r+0x9f6>
 800f0ca:	2201      	movs	r2, #1
 800f0cc:	e7e2      	b.n	800f094 <_dtoa_r+0xa4c>
 800f0ce:	9906      	ldr	r1, [sp, #24]
 800f0d0:	2900      	cmp	r1, #0
 800f0d2:	db04      	blt.n	800f0de <_dtoa_r+0xa96>
 800f0d4:	9822      	ldr	r0, [sp, #136]	; 0x88
 800f0d6:	4301      	orrs	r1, r0
 800f0d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f0da:	4301      	orrs	r1, r0
 800f0dc:	d120      	bne.n	800f120 <_dtoa_r+0xad8>
 800f0de:	2a00      	cmp	r2, #0
 800f0e0:	ddee      	ble.n	800f0c0 <_dtoa_r+0xa78>
 800f0e2:	4651      	mov	r1, sl
 800f0e4:	2201      	movs	r2, #1
 800f0e6:	4628      	mov	r0, r5
 800f0e8:	9302      	str	r3, [sp, #8]
 800f0ea:	f000 fad1 	bl	800f690 <__lshift>
 800f0ee:	4621      	mov	r1, r4
 800f0f0:	4682      	mov	sl, r0
 800f0f2:	f000 fb39 	bl	800f768 <__mcmp>
 800f0f6:	2800      	cmp	r0, #0
 800f0f8:	9b02      	ldr	r3, [sp, #8]
 800f0fa:	dc02      	bgt.n	800f102 <_dtoa_r+0xaba>
 800f0fc:	d1e0      	bne.n	800f0c0 <_dtoa_r+0xa78>
 800f0fe:	07da      	lsls	r2, r3, #31
 800f100:	d5de      	bpl.n	800f0c0 <_dtoa_r+0xa78>
 800f102:	2b39      	cmp	r3, #57	; 0x39
 800f104:	d1da      	bne.n	800f0bc <_dtoa_r+0xa74>
 800f106:	2339      	movs	r3, #57	; 0x39
 800f108:	f88b 3000 	strb.w	r3, [fp]
 800f10c:	463b      	mov	r3, r7
 800f10e:	461f      	mov	r7, r3
 800f110:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800f114:	3b01      	subs	r3, #1
 800f116:	2a39      	cmp	r2, #57	; 0x39
 800f118:	d050      	beq.n	800f1bc <_dtoa_r+0xb74>
 800f11a:	3201      	adds	r2, #1
 800f11c:	701a      	strb	r2, [r3, #0]
 800f11e:	e749      	b.n	800efb4 <_dtoa_r+0x96c>
 800f120:	2a00      	cmp	r2, #0
 800f122:	dd03      	ble.n	800f12c <_dtoa_r+0xae4>
 800f124:	2b39      	cmp	r3, #57	; 0x39
 800f126:	d0ee      	beq.n	800f106 <_dtoa_r+0xabe>
 800f128:	3301      	adds	r3, #1
 800f12a:	e7c9      	b.n	800f0c0 <_dtoa_r+0xa78>
 800f12c:	9a02      	ldr	r2, [sp, #8]
 800f12e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f130:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f134:	428a      	cmp	r2, r1
 800f136:	d02a      	beq.n	800f18e <_dtoa_r+0xb46>
 800f138:	4651      	mov	r1, sl
 800f13a:	2300      	movs	r3, #0
 800f13c:	220a      	movs	r2, #10
 800f13e:	4628      	mov	r0, r5
 800f140:	f000 f8fa 	bl	800f338 <__multadd>
 800f144:	45b0      	cmp	r8, r6
 800f146:	4682      	mov	sl, r0
 800f148:	f04f 0300 	mov.w	r3, #0
 800f14c:	f04f 020a 	mov.w	r2, #10
 800f150:	4641      	mov	r1, r8
 800f152:	4628      	mov	r0, r5
 800f154:	d107      	bne.n	800f166 <_dtoa_r+0xb1e>
 800f156:	f000 f8ef 	bl	800f338 <__multadd>
 800f15a:	4680      	mov	r8, r0
 800f15c:	4606      	mov	r6, r0
 800f15e:	9b02      	ldr	r3, [sp, #8]
 800f160:	3301      	adds	r3, #1
 800f162:	9302      	str	r3, [sp, #8]
 800f164:	e777      	b.n	800f056 <_dtoa_r+0xa0e>
 800f166:	f000 f8e7 	bl	800f338 <__multadd>
 800f16a:	4631      	mov	r1, r6
 800f16c:	4680      	mov	r8, r0
 800f16e:	2300      	movs	r3, #0
 800f170:	220a      	movs	r2, #10
 800f172:	4628      	mov	r0, r5
 800f174:	f000 f8e0 	bl	800f338 <__multadd>
 800f178:	4606      	mov	r6, r0
 800f17a:	e7f0      	b.n	800f15e <_dtoa_r+0xb16>
 800f17c:	f1bb 0f00 	cmp.w	fp, #0
 800f180:	bfcc      	ite	gt
 800f182:	465f      	movgt	r7, fp
 800f184:	2701      	movle	r7, #1
 800f186:	f04f 0800 	mov.w	r8, #0
 800f18a:	9a08      	ldr	r2, [sp, #32]
 800f18c:	4417      	add	r7, r2
 800f18e:	4651      	mov	r1, sl
 800f190:	2201      	movs	r2, #1
 800f192:	4628      	mov	r0, r5
 800f194:	9302      	str	r3, [sp, #8]
 800f196:	f000 fa7b 	bl	800f690 <__lshift>
 800f19a:	4621      	mov	r1, r4
 800f19c:	4682      	mov	sl, r0
 800f19e:	f000 fae3 	bl	800f768 <__mcmp>
 800f1a2:	2800      	cmp	r0, #0
 800f1a4:	dcb2      	bgt.n	800f10c <_dtoa_r+0xac4>
 800f1a6:	d102      	bne.n	800f1ae <_dtoa_r+0xb66>
 800f1a8:	9b02      	ldr	r3, [sp, #8]
 800f1aa:	07db      	lsls	r3, r3, #31
 800f1ac:	d4ae      	bmi.n	800f10c <_dtoa_r+0xac4>
 800f1ae:	463b      	mov	r3, r7
 800f1b0:	461f      	mov	r7, r3
 800f1b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f1b6:	2a30      	cmp	r2, #48	; 0x30
 800f1b8:	d0fa      	beq.n	800f1b0 <_dtoa_r+0xb68>
 800f1ba:	e6fb      	b.n	800efb4 <_dtoa_r+0x96c>
 800f1bc:	9a08      	ldr	r2, [sp, #32]
 800f1be:	429a      	cmp	r2, r3
 800f1c0:	d1a5      	bne.n	800f10e <_dtoa_r+0xac6>
 800f1c2:	2331      	movs	r3, #49	; 0x31
 800f1c4:	f109 0901 	add.w	r9, r9, #1
 800f1c8:	7013      	strb	r3, [r2, #0]
 800f1ca:	e6f3      	b.n	800efb4 <_dtoa_r+0x96c>
 800f1cc:	4b13      	ldr	r3, [pc, #76]	; (800f21c <_dtoa_r+0xbd4>)
 800f1ce:	f7ff baa7 	b.w	800e720 <_dtoa_r+0xd8>
 800f1d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	f47f aa80 	bne.w	800e6da <_dtoa_r+0x92>
 800f1da:	4b11      	ldr	r3, [pc, #68]	; (800f220 <_dtoa_r+0xbd8>)
 800f1dc:	f7ff baa0 	b.w	800e720 <_dtoa_r+0xd8>
 800f1e0:	f1bb 0f00 	cmp.w	fp, #0
 800f1e4:	dc03      	bgt.n	800f1ee <_dtoa_r+0xba6>
 800f1e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f1e8:	2b02      	cmp	r3, #2
 800f1ea:	f73f aecc 	bgt.w	800ef86 <_dtoa_r+0x93e>
 800f1ee:	9f08      	ldr	r7, [sp, #32]
 800f1f0:	4621      	mov	r1, r4
 800f1f2:	4650      	mov	r0, sl
 800f1f4:	f7ff f99b 	bl	800e52e <quorem>
 800f1f8:	9a08      	ldr	r2, [sp, #32]
 800f1fa:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f1fe:	f807 3b01 	strb.w	r3, [r7], #1
 800f202:	1aba      	subs	r2, r7, r2
 800f204:	4593      	cmp	fp, r2
 800f206:	ddb9      	ble.n	800f17c <_dtoa_r+0xb34>
 800f208:	4651      	mov	r1, sl
 800f20a:	2300      	movs	r3, #0
 800f20c:	220a      	movs	r2, #10
 800f20e:	4628      	mov	r0, r5
 800f210:	f000 f892 	bl	800f338 <__multadd>
 800f214:	4682      	mov	sl, r0
 800f216:	e7eb      	b.n	800f1f0 <_dtoa_r+0xba8>
 800f218:	080117b7 	.word	0x080117b7
 800f21c:	08011710 	.word	0x08011710
 800f220:	08011734 	.word	0x08011734

0800f224 <_localeconv_r>:
 800f224:	4800      	ldr	r0, [pc, #0]	; (800f228 <_localeconv_r+0x4>)
 800f226:	4770      	bx	lr
 800f228:	20000168 	.word	0x20000168

0800f22c <malloc>:
 800f22c:	4b02      	ldr	r3, [pc, #8]	; (800f238 <malloc+0xc>)
 800f22e:	4601      	mov	r1, r0
 800f230:	6818      	ldr	r0, [r3, #0]
 800f232:	f000 bbfb 	b.w	800fa2c <_malloc_r>
 800f236:	bf00      	nop
 800f238:	20000014 	.word	0x20000014

0800f23c <memchr>:
 800f23c:	4603      	mov	r3, r0
 800f23e:	b510      	push	{r4, lr}
 800f240:	b2c9      	uxtb	r1, r1
 800f242:	4402      	add	r2, r0
 800f244:	4293      	cmp	r3, r2
 800f246:	4618      	mov	r0, r3
 800f248:	d101      	bne.n	800f24e <memchr+0x12>
 800f24a:	2000      	movs	r0, #0
 800f24c:	e003      	b.n	800f256 <memchr+0x1a>
 800f24e:	7804      	ldrb	r4, [r0, #0]
 800f250:	3301      	adds	r3, #1
 800f252:	428c      	cmp	r4, r1
 800f254:	d1f6      	bne.n	800f244 <memchr+0x8>
 800f256:	bd10      	pop	{r4, pc}

0800f258 <memcpy>:
 800f258:	440a      	add	r2, r1
 800f25a:	4291      	cmp	r1, r2
 800f25c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f260:	d100      	bne.n	800f264 <memcpy+0xc>
 800f262:	4770      	bx	lr
 800f264:	b510      	push	{r4, lr}
 800f266:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f26a:	4291      	cmp	r1, r2
 800f26c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f270:	d1f9      	bne.n	800f266 <memcpy+0xe>
 800f272:	bd10      	pop	{r4, pc}

0800f274 <_Balloc>:
 800f274:	b570      	push	{r4, r5, r6, lr}
 800f276:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f278:	4604      	mov	r4, r0
 800f27a:	460d      	mov	r5, r1
 800f27c:	b976      	cbnz	r6, 800f29c <_Balloc+0x28>
 800f27e:	2010      	movs	r0, #16
 800f280:	f7ff ffd4 	bl	800f22c <malloc>
 800f284:	4602      	mov	r2, r0
 800f286:	6260      	str	r0, [r4, #36]	; 0x24
 800f288:	b920      	cbnz	r0, 800f294 <_Balloc+0x20>
 800f28a:	2166      	movs	r1, #102	; 0x66
 800f28c:	4b17      	ldr	r3, [pc, #92]	; (800f2ec <_Balloc+0x78>)
 800f28e:	4818      	ldr	r0, [pc, #96]	; (800f2f0 <_Balloc+0x7c>)
 800f290:	f000 fd92 	bl	800fdb8 <__assert_func>
 800f294:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f298:	6006      	str	r6, [r0, #0]
 800f29a:	60c6      	str	r6, [r0, #12]
 800f29c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f29e:	68f3      	ldr	r3, [r6, #12]
 800f2a0:	b183      	cbz	r3, 800f2c4 <_Balloc+0x50>
 800f2a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f2a4:	68db      	ldr	r3, [r3, #12]
 800f2a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f2aa:	b9b8      	cbnz	r0, 800f2dc <_Balloc+0x68>
 800f2ac:	2101      	movs	r1, #1
 800f2ae:	fa01 f605 	lsl.w	r6, r1, r5
 800f2b2:	1d72      	adds	r2, r6, #5
 800f2b4:	4620      	mov	r0, r4
 800f2b6:	0092      	lsls	r2, r2, #2
 800f2b8:	f000 fb5e 	bl	800f978 <_calloc_r>
 800f2bc:	b160      	cbz	r0, 800f2d8 <_Balloc+0x64>
 800f2be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f2c2:	e00e      	b.n	800f2e2 <_Balloc+0x6e>
 800f2c4:	2221      	movs	r2, #33	; 0x21
 800f2c6:	2104      	movs	r1, #4
 800f2c8:	4620      	mov	r0, r4
 800f2ca:	f000 fb55 	bl	800f978 <_calloc_r>
 800f2ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f2d0:	60f0      	str	r0, [r6, #12]
 800f2d2:	68db      	ldr	r3, [r3, #12]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d1e4      	bne.n	800f2a2 <_Balloc+0x2e>
 800f2d8:	2000      	movs	r0, #0
 800f2da:	bd70      	pop	{r4, r5, r6, pc}
 800f2dc:	6802      	ldr	r2, [r0, #0]
 800f2de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f2e8:	e7f7      	b.n	800f2da <_Balloc+0x66>
 800f2ea:	bf00      	nop
 800f2ec:	08011741 	.word	0x08011741
 800f2f0:	080117c8 	.word	0x080117c8

0800f2f4 <_Bfree>:
 800f2f4:	b570      	push	{r4, r5, r6, lr}
 800f2f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f2f8:	4605      	mov	r5, r0
 800f2fa:	460c      	mov	r4, r1
 800f2fc:	b976      	cbnz	r6, 800f31c <_Bfree+0x28>
 800f2fe:	2010      	movs	r0, #16
 800f300:	f7ff ff94 	bl	800f22c <malloc>
 800f304:	4602      	mov	r2, r0
 800f306:	6268      	str	r0, [r5, #36]	; 0x24
 800f308:	b920      	cbnz	r0, 800f314 <_Bfree+0x20>
 800f30a:	218a      	movs	r1, #138	; 0x8a
 800f30c:	4b08      	ldr	r3, [pc, #32]	; (800f330 <_Bfree+0x3c>)
 800f30e:	4809      	ldr	r0, [pc, #36]	; (800f334 <_Bfree+0x40>)
 800f310:	f000 fd52 	bl	800fdb8 <__assert_func>
 800f314:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f318:	6006      	str	r6, [r0, #0]
 800f31a:	60c6      	str	r6, [r0, #12]
 800f31c:	b13c      	cbz	r4, 800f32e <_Bfree+0x3a>
 800f31e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f320:	6862      	ldr	r2, [r4, #4]
 800f322:	68db      	ldr	r3, [r3, #12]
 800f324:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f328:	6021      	str	r1, [r4, #0]
 800f32a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f32e:	bd70      	pop	{r4, r5, r6, pc}
 800f330:	08011741 	.word	0x08011741
 800f334:	080117c8 	.word	0x080117c8

0800f338 <__multadd>:
 800f338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f33c:	4698      	mov	r8, r3
 800f33e:	460c      	mov	r4, r1
 800f340:	2300      	movs	r3, #0
 800f342:	690e      	ldr	r6, [r1, #16]
 800f344:	4607      	mov	r7, r0
 800f346:	f101 0014 	add.w	r0, r1, #20
 800f34a:	6805      	ldr	r5, [r0, #0]
 800f34c:	3301      	adds	r3, #1
 800f34e:	b2a9      	uxth	r1, r5
 800f350:	fb02 8101 	mla	r1, r2, r1, r8
 800f354:	0c2d      	lsrs	r5, r5, #16
 800f356:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800f35a:	fb02 c505 	mla	r5, r2, r5, ip
 800f35e:	b289      	uxth	r1, r1
 800f360:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800f364:	429e      	cmp	r6, r3
 800f366:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800f36a:	f840 1b04 	str.w	r1, [r0], #4
 800f36e:	dcec      	bgt.n	800f34a <__multadd+0x12>
 800f370:	f1b8 0f00 	cmp.w	r8, #0
 800f374:	d022      	beq.n	800f3bc <__multadd+0x84>
 800f376:	68a3      	ldr	r3, [r4, #8]
 800f378:	42b3      	cmp	r3, r6
 800f37a:	dc19      	bgt.n	800f3b0 <__multadd+0x78>
 800f37c:	6861      	ldr	r1, [r4, #4]
 800f37e:	4638      	mov	r0, r7
 800f380:	3101      	adds	r1, #1
 800f382:	f7ff ff77 	bl	800f274 <_Balloc>
 800f386:	4605      	mov	r5, r0
 800f388:	b928      	cbnz	r0, 800f396 <__multadd+0x5e>
 800f38a:	4602      	mov	r2, r0
 800f38c:	21b5      	movs	r1, #181	; 0xb5
 800f38e:	4b0d      	ldr	r3, [pc, #52]	; (800f3c4 <__multadd+0x8c>)
 800f390:	480d      	ldr	r0, [pc, #52]	; (800f3c8 <__multadd+0x90>)
 800f392:	f000 fd11 	bl	800fdb8 <__assert_func>
 800f396:	6922      	ldr	r2, [r4, #16]
 800f398:	f104 010c 	add.w	r1, r4, #12
 800f39c:	3202      	adds	r2, #2
 800f39e:	0092      	lsls	r2, r2, #2
 800f3a0:	300c      	adds	r0, #12
 800f3a2:	f7ff ff59 	bl	800f258 <memcpy>
 800f3a6:	4621      	mov	r1, r4
 800f3a8:	4638      	mov	r0, r7
 800f3aa:	f7ff ffa3 	bl	800f2f4 <_Bfree>
 800f3ae:	462c      	mov	r4, r5
 800f3b0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800f3b4:	3601      	adds	r6, #1
 800f3b6:	f8c3 8014 	str.w	r8, [r3, #20]
 800f3ba:	6126      	str	r6, [r4, #16]
 800f3bc:	4620      	mov	r0, r4
 800f3be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3c2:	bf00      	nop
 800f3c4:	080117b7 	.word	0x080117b7
 800f3c8:	080117c8 	.word	0x080117c8

0800f3cc <__hi0bits>:
 800f3cc:	0c02      	lsrs	r2, r0, #16
 800f3ce:	0412      	lsls	r2, r2, #16
 800f3d0:	4603      	mov	r3, r0
 800f3d2:	b9ca      	cbnz	r2, 800f408 <__hi0bits+0x3c>
 800f3d4:	0403      	lsls	r3, r0, #16
 800f3d6:	2010      	movs	r0, #16
 800f3d8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800f3dc:	bf04      	itt	eq
 800f3de:	021b      	lsleq	r3, r3, #8
 800f3e0:	3008      	addeq	r0, #8
 800f3e2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800f3e6:	bf04      	itt	eq
 800f3e8:	011b      	lsleq	r3, r3, #4
 800f3ea:	3004      	addeq	r0, #4
 800f3ec:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800f3f0:	bf04      	itt	eq
 800f3f2:	009b      	lsleq	r3, r3, #2
 800f3f4:	3002      	addeq	r0, #2
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	db05      	blt.n	800f406 <__hi0bits+0x3a>
 800f3fa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800f3fe:	f100 0001 	add.w	r0, r0, #1
 800f402:	bf08      	it	eq
 800f404:	2020      	moveq	r0, #32
 800f406:	4770      	bx	lr
 800f408:	2000      	movs	r0, #0
 800f40a:	e7e5      	b.n	800f3d8 <__hi0bits+0xc>

0800f40c <__lo0bits>:
 800f40c:	6803      	ldr	r3, [r0, #0]
 800f40e:	4602      	mov	r2, r0
 800f410:	f013 0007 	ands.w	r0, r3, #7
 800f414:	d00b      	beq.n	800f42e <__lo0bits+0x22>
 800f416:	07d9      	lsls	r1, r3, #31
 800f418:	d422      	bmi.n	800f460 <__lo0bits+0x54>
 800f41a:	0798      	lsls	r0, r3, #30
 800f41c:	bf49      	itett	mi
 800f41e:	085b      	lsrmi	r3, r3, #1
 800f420:	089b      	lsrpl	r3, r3, #2
 800f422:	2001      	movmi	r0, #1
 800f424:	6013      	strmi	r3, [r2, #0]
 800f426:	bf5c      	itt	pl
 800f428:	2002      	movpl	r0, #2
 800f42a:	6013      	strpl	r3, [r2, #0]
 800f42c:	4770      	bx	lr
 800f42e:	b299      	uxth	r1, r3
 800f430:	b909      	cbnz	r1, 800f436 <__lo0bits+0x2a>
 800f432:	2010      	movs	r0, #16
 800f434:	0c1b      	lsrs	r3, r3, #16
 800f436:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f43a:	bf04      	itt	eq
 800f43c:	0a1b      	lsreq	r3, r3, #8
 800f43e:	3008      	addeq	r0, #8
 800f440:	0719      	lsls	r1, r3, #28
 800f442:	bf04      	itt	eq
 800f444:	091b      	lsreq	r3, r3, #4
 800f446:	3004      	addeq	r0, #4
 800f448:	0799      	lsls	r1, r3, #30
 800f44a:	bf04      	itt	eq
 800f44c:	089b      	lsreq	r3, r3, #2
 800f44e:	3002      	addeq	r0, #2
 800f450:	07d9      	lsls	r1, r3, #31
 800f452:	d403      	bmi.n	800f45c <__lo0bits+0x50>
 800f454:	085b      	lsrs	r3, r3, #1
 800f456:	f100 0001 	add.w	r0, r0, #1
 800f45a:	d003      	beq.n	800f464 <__lo0bits+0x58>
 800f45c:	6013      	str	r3, [r2, #0]
 800f45e:	4770      	bx	lr
 800f460:	2000      	movs	r0, #0
 800f462:	4770      	bx	lr
 800f464:	2020      	movs	r0, #32
 800f466:	4770      	bx	lr

0800f468 <__i2b>:
 800f468:	b510      	push	{r4, lr}
 800f46a:	460c      	mov	r4, r1
 800f46c:	2101      	movs	r1, #1
 800f46e:	f7ff ff01 	bl	800f274 <_Balloc>
 800f472:	4602      	mov	r2, r0
 800f474:	b928      	cbnz	r0, 800f482 <__i2b+0x1a>
 800f476:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f47a:	4b04      	ldr	r3, [pc, #16]	; (800f48c <__i2b+0x24>)
 800f47c:	4804      	ldr	r0, [pc, #16]	; (800f490 <__i2b+0x28>)
 800f47e:	f000 fc9b 	bl	800fdb8 <__assert_func>
 800f482:	2301      	movs	r3, #1
 800f484:	6144      	str	r4, [r0, #20]
 800f486:	6103      	str	r3, [r0, #16]
 800f488:	bd10      	pop	{r4, pc}
 800f48a:	bf00      	nop
 800f48c:	080117b7 	.word	0x080117b7
 800f490:	080117c8 	.word	0x080117c8

0800f494 <__multiply>:
 800f494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f498:	4614      	mov	r4, r2
 800f49a:	690a      	ldr	r2, [r1, #16]
 800f49c:	6923      	ldr	r3, [r4, #16]
 800f49e:	460d      	mov	r5, r1
 800f4a0:	429a      	cmp	r2, r3
 800f4a2:	bfbe      	ittt	lt
 800f4a4:	460b      	movlt	r3, r1
 800f4a6:	4625      	movlt	r5, r4
 800f4a8:	461c      	movlt	r4, r3
 800f4aa:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800f4ae:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f4b2:	68ab      	ldr	r3, [r5, #8]
 800f4b4:	6869      	ldr	r1, [r5, #4]
 800f4b6:	eb0a 0709 	add.w	r7, sl, r9
 800f4ba:	42bb      	cmp	r3, r7
 800f4bc:	b085      	sub	sp, #20
 800f4be:	bfb8      	it	lt
 800f4c0:	3101      	addlt	r1, #1
 800f4c2:	f7ff fed7 	bl	800f274 <_Balloc>
 800f4c6:	b930      	cbnz	r0, 800f4d6 <__multiply+0x42>
 800f4c8:	4602      	mov	r2, r0
 800f4ca:	f240 115d 	movw	r1, #349	; 0x15d
 800f4ce:	4b41      	ldr	r3, [pc, #260]	; (800f5d4 <__multiply+0x140>)
 800f4d0:	4841      	ldr	r0, [pc, #260]	; (800f5d8 <__multiply+0x144>)
 800f4d2:	f000 fc71 	bl	800fdb8 <__assert_func>
 800f4d6:	f100 0614 	add.w	r6, r0, #20
 800f4da:	4633      	mov	r3, r6
 800f4dc:	2200      	movs	r2, #0
 800f4de:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800f4e2:	4543      	cmp	r3, r8
 800f4e4:	d31e      	bcc.n	800f524 <__multiply+0x90>
 800f4e6:	f105 0c14 	add.w	ip, r5, #20
 800f4ea:	f104 0314 	add.w	r3, r4, #20
 800f4ee:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800f4f2:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800f4f6:	9202      	str	r2, [sp, #8]
 800f4f8:	ebac 0205 	sub.w	r2, ip, r5
 800f4fc:	3a15      	subs	r2, #21
 800f4fe:	f022 0203 	bic.w	r2, r2, #3
 800f502:	3204      	adds	r2, #4
 800f504:	f105 0115 	add.w	r1, r5, #21
 800f508:	458c      	cmp	ip, r1
 800f50a:	bf38      	it	cc
 800f50c:	2204      	movcc	r2, #4
 800f50e:	9201      	str	r2, [sp, #4]
 800f510:	9a02      	ldr	r2, [sp, #8]
 800f512:	9303      	str	r3, [sp, #12]
 800f514:	429a      	cmp	r2, r3
 800f516:	d808      	bhi.n	800f52a <__multiply+0x96>
 800f518:	2f00      	cmp	r7, #0
 800f51a:	dc55      	bgt.n	800f5c8 <__multiply+0x134>
 800f51c:	6107      	str	r7, [r0, #16]
 800f51e:	b005      	add	sp, #20
 800f520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f524:	f843 2b04 	str.w	r2, [r3], #4
 800f528:	e7db      	b.n	800f4e2 <__multiply+0x4e>
 800f52a:	f8b3 a000 	ldrh.w	sl, [r3]
 800f52e:	f1ba 0f00 	cmp.w	sl, #0
 800f532:	d020      	beq.n	800f576 <__multiply+0xe2>
 800f534:	46b1      	mov	r9, r6
 800f536:	2200      	movs	r2, #0
 800f538:	f105 0e14 	add.w	lr, r5, #20
 800f53c:	f85e 4b04 	ldr.w	r4, [lr], #4
 800f540:	f8d9 b000 	ldr.w	fp, [r9]
 800f544:	b2a1      	uxth	r1, r4
 800f546:	fa1f fb8b 	uxth.w	fp, fp
 800f54a:	fb0a b101 	mla	r1, sl, r1, fp
 800f54e:	4411      	add	r1, r2
 800f550:	f8d9 2000 	ldr.w	r2, [r9]
 800f554:	0c24      	lsrs	r4, r4, #16
 800f556:	0c12      	lsrs	r2, r2, #16
 800f558:	fb0a 2404 	mla	r4, sl, r4, r2
 800f55c:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800f560:	b289      	uxth	r1, r1
 800f562:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800f566:	45f4      	cmp	ip, lr
 800f568:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800f56c:	f849 1b04 	str.w	r1, [r9], #4
 800f570:	d8e4      	bhi.n	800f53c <__multiply+0xa8>
 800f572:	9901      	ldr	r1, [sp, #4]
 800f574:	5072      	str	r2, [r6, r1]
 800f576:	9a03      	ldr	r2, [sp, #12]
 800f578:	3304      	adds	r3, #4
 800f57a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f57e:	f1b9 0f00 	cmp.w	r9, #0
 800f582:	d01f      	beq.n	800f5c4 <__multiply+0x130>
 800f584:	46b6      	mov	lr, r6
 800f586:	f04f 0a00 	mov.w	sl, #0
 800f58a:	6834      	ldr	r4, [r6, #0]
 800f58c:	f105 0114 	add.w	r1, r5, #20
 800f590:	880a      	ldrh	r2, [r1, #0]
 800f592:	f8be b002 	ldrh.w	fp, [lr, #2]
 800f596:	b2a4      	uxth	r4, r4
 800f598:	fb09 b202 	mla	r2, r9, r2, fp
 800f59c:	4492      	add	sl, r2
 800f59e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800f5a2:	f84e 4b04 	str.w	r4, [lr], #4
 800f5a6:	f851 4b04 	ldr.w	r4, [r1], #4
 800f5aa:	f8be 2000 	ldrh.w	r2, [lr]
 800f5ae:	0c24      	lsrs	r4, r4, #16
 800f5b0:	fb09 2404 	mla	r4, r9, r4, r2
 800f5b4:	458c      	cmp	ip, r1
 800f5b6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800f5ba:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f5be:	d8e7      	bhi.n	800f590 <__multiply+0xfc>
 800f5c0:	9a01      	ldr	r2, [sp, #4]
 800f5c2:	50b4      	str	r4, [r6, r2]
 800f5c4:	3604      	adds	r6, #4
 800f5c6:	e7a3      	b.n	800f510 <__multiply+0x7c>
 800f5c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d1a5      	bne.n	800f51c <__multiply+0x88>
 800f5d0:	3f01      	subs	r7, #1
 800f5d2:	e7a1      	b.n	800f518 <__multiply+0x84>
 800f5d4:	080117b7 	.word	0x080117b7
 800f5d8:	080117c8 	.word	0x080117c8

0800f5dc <__pow5mult>:
 800f5dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5e0:	4615      	mov	r5, r2
 800f5e2:	f012 0203 	ands.w	r2, r2, #3
 800f5e6:	4606      	mov	r6, r0
 800f5e8:	460f      	mov	r7, r1
 800f5ea:	d007      	beq.n	800f5fc <__pow5mult+0x20>
 800f5ec:	4c25      	ldr	r4, [pc, #148]	; (800f684 <__pow5mult+0xa8>)
 800f5ee:	3a01      	subs	r2, #1
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f5f6:	f7ff fe9f 	bl	800f338 <__multadd>
 800f5fa:	4607      	mov	r7, r0
 800f5fc:	10ad      	asrs	r5, r5, #2
 800f5fe:	d03d      	beq.n	800f67c <__pow5mult+0xa0>
 800f600:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f602:	b97c      	cbnz	r4, 800f624 <__pow5mult+0x48>
 800f604:	2010      	movs	r0, #16
 800f606:	f7ff fe11 	bl	800f22c <malloc>
 800f60a:	4602      	mov	r2, r0
 800f60c:	6270      	str	r0, [r6, #36]	; 0x24
 800f60e:	b928      	cbnz	r0, 800f61c <__pow5mult+0x40>
 800f610:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f614:	4b1c      	ldr	r3, [pc, #112]	; (800f688 <__pow5mult+0xac>)
 800f616:	481d      	ldr	r0, [pc, #116]	; (800f68c <__pow5mult+0xb0>)
 800f618:	f000 fbce 	bl	800fdb8 <__assert_func>
 800f61c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f620:	6004      	str	r4, [r0, #0]
 800f622:	60c4      	str	r4, [r0, #12]
 800f624:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f628:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f62c:	b94c      	cbnz	r4, 800f642 <__pow5mult+0x66>
 800f62e:	f240 2171 	movw	r1, #625	; 0x271
 800f632:	4630      	mov	r0, r6
 800f634:	f7ff ff18 	bl	800f468 <__i2b>
 800f638:	2300      	movs	r3, #0
 800f63a:	4604      	mov	r4, r0
 800f63c:	f8c8 0008 	str.w	r0, [r8, #8]
 800f640:	6003      	str	r3, [r0, #0]
 800f642:	f04f 0900 	mov.w	r9, #0
 800f646:	07eb      	lsls	r3, r5, #31
 800f648:	d50a      	bpl.n	800f660 <__pow5mult+0x84>
 800f64a:	4639      	mov	r1, r7
 800f64c:	4622      	mov	r2, r4
 800f64e:	4630      	mov	r0, r6
 800f650:	f7ff ff20 	bl	800f494 <__multiply>
 800f654:	4680      	mov	r8, r0
 800f656:	4639      	mov	r1, r7
 800f658:	4630      	mov	r0, r6
 800f65a:	f7ff fe4b 	bl	800f2f4 <_Bfree>
 800f65e:	4647      	mov	r7, r8
 800f660:	106d      	asrs	r5, r5, #1
 800f662:	d00b      	beq.n	800f67c <__pow5mult+0xa0>
 800f664:	6820      	ldr	r0, [r4, #0]
 800f666:	b938      	cbnz	r0, 800f678 <__pow5mult+0x9c>
 800f668:	4622      	mov	r2, r4
 800f66a:	4621      	mov	r1, r4
 800f66c:	4630      	mov	r0, r6
 800f66e:	f7ff ff11 	bl	800f494 <__multiply>
 800f672:	6020      	str	r0, [r4, #0]
 800f674:	f8c0 9000 	str.w	r9, [r0]
 800f678:	4604      	mov	r4, r0
 800f67a:	e7e4      	b.n	800f646 <__pow5mult+0x6a>
 800f67c:	4638      	mov	r0, r7
 800f67e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f682:	bf00      	nop
 800f684:	08011918 	.word	0x08011918
 800f688:	08011741 	.word	0x08011741
 800f68c:	080117c8 	.word	0x080117c8

0800f690 <__lshift>:
 800f690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f694:	460c      	mov	r4, r1
 800f696:	4607      	mov	r7, r0
 800f698:	4691      	mov	r9, r2
 800f69a:	6923      	ldr	r3, [r4, #16]
 800f69c:	6849      	ldr	r1, [r1, #4]
 800f69e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f6a2:	68a3      	ldr	r3, [r4, #8]
 800f6a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f6a8:	f108 0601 	add.w	r6, r8, #1
 800f6ac:	42b3      	cmp	r3, r6
 800f6ae:	db0b      	blt.n	800f6c8 <__lshift+0x38>
 800f6b0:	4638      	mov	r0, r7
 800f6b2:	f7ff fddf 	bl	800f274 <_Balloc>
 800f6b6:	4605      	mov	r5, r0
 800f6b8:	b948      	cbnz	r0, 800f6ce <__lshift+0x3e>
 800f6ba:	4602      	mov	r2, r0
 800f6bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f6c0:	4b27      	ldr	r3, [pc, #156]	; (800f760 <__lshift+0xd0>)
 800f6c2:	4828      	ldr	r0, [pc, #160]	; (800f764 <__lshift+0xd4>)
 800f6c4:	f000 fb78 	bl	800fdb8 <__assert_func>
 800f6c8:	3101      	adds	r1, #1
 800f6ca:	005b      	lsls	r3, r3, #1
 800f6cc:	e7ee      	b.n	800f6ac <__lshift+0x1c>
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	f100 0114 	add.w	r1, r0, #20
 800f6d4:	f100 0210 	add.w	r2, r0, #16
 800f6d8:	4618      	mov	r0, r3
 800f6da:	4553      	cmp	r3, sl
 800f6dc:	db33      	blt.n	800f746 <__lshift+0xb6>
 800f6de:	6920      	ldr	r0, [r4, #16]
 800f6e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f6e4:	f104 0314 	add.w	r3, r4, #20
 800f6e8:	f019 091f 	ands.w	r9, r9, #31
 800f6ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f6f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f6f4:	d02b      	beq.n	800f74e <__lshift+0xbe>
 800f6f6:	468a      	mov	sl, r1
 800f6f8:	2200      	movs	r2, #0
 800f6fa:	f1c9 0e20 	rsb	lr, r9, #32
 800f6fe:	6818      	ldr	r0, [r3, #0]
 800f700:	fa00 f009 	lsl.w	r0, r0, r9
 800f704:	4302      	orrs	r2, r0
 800f706:	f84a 2b04 	str.w	r2, [sl], #4
 800f70a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f70e:	459c      	cmp	ip, r3
 800f710:	fa22 f20e 	lsr.w	r2, r2, lr
 800f714:	d8f3      	bhi.n	800f6fe <__lshift+0x6e>
 800f716:	ebac 0304 	sub.w	r3, ip, r4
 800f71a:	3b15      	subs	r3, #21
 800f71c:	f023 0303 	bic.w	r3, r3, #3
 800f720:	3304      	adds	r3, #4
 800f722:	f104 0015 	add.w	r0, r4, #21
 800f726:	4584      	cmp	ip, r0
 800f728:	bf38      	it	cc
 800f72a:	2304      	movcc	r3, #4
 800f72c:	50ca      	str	r2, [r1, r3]
 800f72e:	b10a      	cbz	r2, 800f734 <__lshift+0xa4>
 800f730:	f108 0602 	add.w	r6, r8, #2
 800f734:	3e01      	subs	r6, #1
 800f736:	4638      	mov	r0, r7
 800f738:	4621      	mov	r1, r4
 800f73a:	612e      	str	r6, [r5, #16]
 800f73c:	f7ff fdda 	bl	800f2f4 <_Bfree>
 800f740:	4628      	mov	r0, r5
 800f742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f746:	f842 0f04 	str.w	r0, [r2, #4]!
 800f74a:	3301      	adds	r3, #1
 800f74c:	e7c5      	b.n	800f6da <__lshift+0x4a>
 800f74e:	3904      	subs	r1, #4
 800f750:	f853 2b04 	ldr.w	r2, [r3], #4
 800f754:	459c      	cmp	ip, r3
 800f756:	f841 2f04 	str.w	r2, [r1, #4]!
 800f75a:	d8f9      	bhi.n	800f750 <__lshift+0xc0>
 800f75c:	e7ea      	b.n	800f734 <__lshift+0xa4>
 800f75e:	bf00      	nop
 800f760:	080117b7 	.word	0x080117b7
 800f764:	080117c8 	.word	0x080117c8

0800f768 <__mcmp>:
 800f768:	4603      	mov	r3, r0
 800f76a:	690a      	ldr	r2, [r1, #16]
 800f76c:	6900      	ldr	r0, [r0, #16]
 800f76e:	b530      	push	{r4, r5, lr}
 800f770:	1a80      	subs	r0, r0, r2
 800f772:	d10d      	bne.n	800f790 <__mcmp+0x28>
 800f774:	3314      	adds	r3, #20
 800f776:	3114      	adds	r1, #20
 800f778:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f77c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f780:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f784:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f788:	4295      	cmp	r5, r2
 800f78a:	d002      	beq.n	800f792 <__mcmp+0x2a>
 800f78c:	d304      	bcc.n	800f798 <__mcmp+0x30>
 800f78e:	2001      	movs	r0, #1
 800f790:	bd30      	pop	{r4, r5, pc}
 800f792:	42a3      	cmp	r3, r4
 800f794:	d3f4      	bcc.n	800f780 <__mcmp+0x18>
 800f796:	e7fb      	b.n	800f790 <__mcmp+0x28>
 800f798:	f04f 30ff 	mov.w	r0, #4294967295
 800f79c:	e7f8      	b.n	800f790 <__mcmp+0x28>
	...

0800f7a0 <__mdiff>:
 800f7a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7a4:	460c      	mov	r4, r1
 800f7a6:	4606      	mov	r6, r0
 800f7a8:	4611      	mov	r1, r2
 800f7aa:	4620      	mov	r0, r4
 800f7ac:	4692      	mov	sl, r2
 800f7ae:	f7ff ffdb 	bl	800f768 <__mcmp>
 800f7b2:	1e05      	subs	r5, r0, #0
 800f7b4:	d111      	bne.n	800f7da <__mdiff+0x3a>
 800f7b6:	4629      	mov	r1, r5
 800f7b8:	4630      	mov	r0, r6
 800f7ba:	f7ff fd5b 	bl	800f274 <_Balloc>
 800f7be:	4602      	mov	r2, r0
 800f7c0:	b928      	cbnz	r0, 800f7ce <__mdiff+0x2e>
 800f7c2:	f240 2132 	movw	r1, #562	; 0x232
 800f7c6:	4b3c      	ldr	r3, [pc, #240]	; (800f8b8 <__mdiff+0x118>)
 800f7c8:	483c      	ldr	r0, [pc, #240]	; (800f8bc <__mdiff+0x11c>)
 800f7ca:	f000 faf5 	bl	800fdb8 <__assert_func>
 800f7ce:	2301      	movs	r3, #1
 800f7d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f7d4:	4610      	mov	r0, r2
 800f7d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7da:	bfa4      	itt	ge
 800f7dc:	4653      	movge	r3, sl
 800f7de:	46a2      	movge	sl, r4
 800f7e0:	4630      	mov	r0, r6
 800f7e2:	f8da 1004 	ldr.w	r1, [sl, #4]
 800f7e6:	bfa6      	itte	ge
 800f7e8:	461c      	movge	r4, r3
 800f7ea:	2500      	movge	r5, #0
 800f7ec:	2501      	movlt	r5, #1
 800f7ee:	f7ff fd41 	bl	800f274 <_Balloc>
 800f7f2:	4602      	mov	r2, r0
 800f7f4:	b918      	cbnz	r0, 800f7fe <__mdiff+0x5e>
 800f7f6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f7fa:	4b2f      	ldr	r3, [pc, #188]	; (800f8b8 <__mdiff+0x118>)
 800f7fc:	e7e4      	b.n	800f7c8 <__mdiff+0x28>
 800f7fe:	f100 0814 	add.w	r8, r0, #20
 800f802:	f8da 7010 	ldr.w	r7, [sl, #16]
 800f806:	60c5      	str	r5, [r0, #12]
 800f808:	f04f 0c00 	mov.w	ip, #0
 800f80c:	f10a 0514 	add.w	r5, sl, #20
 800f810:	f10a 0010 	add.w	r0, sl, #16
 800f814:	46c2      	mov	sl, r8
 800f816:	6926      	ldr	r6, [r4, #16]
 800f818:	f104 0914 	add.w	r9, r4, #20
 800f81c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 800f820:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f824:	f850 bf04 	ldr.w	fp, [r0, #4]!
 800f828:	f859 3b04 	ldr.w	r3, [r9], #4
 800f82c:	fa1f f18b 	uxth.w	r1, fp
 800f830:	4461      	add	r1, ip
 800f832:	fa1f fc83 	uxth.w	ip, r3
 800f836:	0c1b      	lsrs	r3, r3, #16
 800f838:	eba1 010c 	sub.w	r1, r1, ip
 800f83c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f840:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800f844:	b289      	uxth	r1, r1
 800f846:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800f84a:	454e      	cmp	r6, r9
 800f84c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800f850:	f84a 3b04 	str.w	r3, [sl], #4
 800f854:	d8e6      	bhi.n	800f824 <__mdiff+0x84>
 800f856:	1b33      	subs	r3, r6, r4
 800f858:	3b15      	subs	r3, #21
 800f85a:	f023 0303 	bic.w	r3, r3, #3
 800f85e:	3415      	adds	r4, #21
 800f860:	3304      	adds	r3, #4
 800f862:	42a6      	cmp	r6, r4
 800f864:	bf38      	it	cc
 800f866:	2304      	movcc	r3, #4
 800f868:	441d      	add	r5, r3
 800f86a:	4443      	add	r3, r8
 800f86c:	461e      	mov	r6, r3
 800f86e:	462c      	mov	r4, r5
 800f870:	4574      	cmp	r4, lr
 800f872:	d30e      	bcc.n	800f892 <__mdiff+0xf2>
 800f874:	f10e 0103 	add.w	r1, lr, #3
 800f878:	1b49      	subs	r1, r1, r5
 800f87a:	f021 0103 	bic.w	r1, r1, #3
 800f87e:	3d03      	subs	r5, #3
 800f880:	45ae      	cmp	lr, r5
 800f882:	bf38      	it	cc
 800f884:	2100      	movcc	r1, #0
 800f886:	4419      	add	r1, r3
 800f888:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800f88c:	b18b      	cbz	r3, 800f8b2 <__mdiff+0x112>
 800f88e:	6117      	str	r7, [r2, #16]
 800f890:	e7a0      	b.n	800f7d4 <__mdiff+0x34>
 800f892:	f854 8b04 	ldr.w	r8, [r4], #4
 800f896:	fa1f f188 	uxth.w	r1, r8
 800f89a:	4461      	add	r1, ip
 800f89c:	1408      	asrs	r0, r1, #16
 800f89e:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 800f8a2:	b289      	uxth	r1, r1
 800f8a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f8a8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f8ac:	f846 1b04 	str.w	r1, [r6], #4
 800f8b0:	e7de      	b.n	800f870 <__mdiff+0xd0>
 800f8b2:	3f01      	subs	r7, #1
 800f8b4:	e7e8      	b.n	800f888 <__mdiff+0xe8>
 800f8b6:	bf00      	nop
 800f8b8:	080117b7 	.word	0x080117b7
 800f8bc:	080117c8 	.word	0x080117c8

0800f8c0 <__d2b>:
 800f8c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800f8c4:	2101      	movs	r1, #1
 800f8c6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800f8ca:	4690      	mov	r8, r2
 800f8cc:	461d      	mov	r5, r3
 800f8ce:	f7ff fcd1 	bl	800f274 <_Balloc>
 800f8d2:	4604      	mov	r4, r0
 800f8d4:	b930      	cbnz	r0, 800f8e4 <__d2b+0x24>
 800f8d6:	4602      	mov	r2, r0
 800f8d8:	f240 310a 	movw	r1, #778	; 0x30a
 800f8dc:	4b24      	ldr	r3, [pc, #144]	; (800f970 <__d2b+0xb0>)
 800f8de:	4825      	ldr	r0, [pc, #148]	; (800f974 <__d2b+0xb4>)
 800f8e0:	f000 fa6a 	bl	800fdb8 <__assert_func>
 800f8e4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800f8e8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800f8ec:	bb2d      	cbnz	r5, 800f93a <__d2b+0x7a>
 800f8ee:	9301      	str	r3, [sp, #4]
 800f8f0:	f1b8 0300 	subs.w	r3, r8, #0
 800f8f4:	d026      	beq.n	800f944 <__d2b+0x84>
 800f8f6:	4668      	mov	r0, sp
 800f8f8:	9300      	str	r3, [sp, #0]
 800f8fa:	f7ff fd87 	bl	800f40c <__lo0bits>
 800f8fe:	9900      	ldr	r1, [sp, #0]
 800f900:	b1f0      	cbz	r0, 800f940 <__d2b+0x80>
 800f902:	9a01      	ldr	r2, [sp, #4]
 800f904:	f1c0 0320 	rsb	r3, r0, #32
 800f908:	fa02 f303 	lsl.w	r3, r2, r3
 800f90c:	430b      	orrs	r3, r1
 800f90e:	40c2      	lsrs	r2, r0
 800f910:	6163      	str	r3, [r4, #20]
 800f912:	9201      	str	r2, [sp, #4]
 800f914:	9b01      	ldr	r3, [sp, #4]
 800f916:	2b00      	cmp	r3, #0
 800f918:	bf14      	ite	ne
 800f91a:	2102      	movne	r1, #2
 800f91c:	2101      	moveq	r1, #1
 800f91e:	61a3      	str	r3, [r4, #24]
 800f920:	6121      	str	r1, [r4, #16]
 800f922:	b1c5      	cbz	r5, 800f956 <__d2b+0x96>
 800f924:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f928:	4405      	add	r5, r0
 800f92a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f92e:	603d      	str	r5, [r7, #0]
 800f930:	6030      	str	r0, [r6, #0]
 800f932:	4620      	mov	r0, r4
 800f934:	b002      	add	sp, #8
 800f936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f93a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f93e:	e7d6      	b.n	800f8ee <__d2b+0x2e>
 800f940:	6161      	str	r1, [r4, #20]
 800f942:	e7e7      	b.n	800f914 <__d2b+0x54>
 800f944:	a801      	add	r0, sp, #4
 800f946:	f7ff fd61 	bl	800f40c <__lo0bits>
 800f94a:	2101      	movs	r1, #1
 800f94c:	9b01      	ldr	r3, [sp, #4]
 800f94e:	6121      	str	r1, [r4, #16]
 800f950:	6163      	str	r3, [r4, #20]
 800f952:	3020      	adds	r0, #32
 800f954:	e7e5      	b.n	800f922 <__d2b+0x62>
 800f956:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800f95a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f95e:	6038      	str	r0, [r7, #0]
 800f960:	6918      	ldr	r0, [r3, #16]
 800f962:	f7ff fd33 	bl	800f3cc <__hi0bits>
 800f966:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800f96a:	6031      	str	r1, [r6, #0]
 800f96c:	e7e1      	b.n	800f932 <__d2b+0x72>
 800f96e:	bf00      	nop
 800f970:	080117b7 	.word	0x080117b7
 800f974:	080117c8 	.word	0x080117c8

0800f978 <_calloc_r>:
 800f978:	b538      	push	{r3, r4, r5, lr}
 800f97a:	fb02 f501 	mul.w	r5, r2, r1
 800f97e:	4629      	mov	r1, r5
 800f980:	f000 f854 	bl	800fa2c <_malloc_r>
 800f984:	4604      	mov	r4, r0
 800f986:	b118      	cbz	r0, 800f990 <_calloc_r+0x18>
 800f988:	462a      	mov	r2, r5
 800f98a:	2100      	movs	r1, #0
 800f98c:	f7fe f938 	bl	800dc00 <memset>
 800f990:	4620      	mov	r0, r4
 800f992:	bd38      	pop	{r3, r4, r5, pc}

0800f994 <_free_r>:
 800f994:	b538      	push	{r3, r4, r5, lr}
 800f996:	4605      	mov	r5, r0
 800f998:	2900      	cmp	r1, #0
 800f99a:	d043      	beq.n	800fa24 <_free_r+0x90>
 800f99c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f9a0:	1f0c      	subs	r4, r1, #4
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	bfb8      	it	lt
 800f9a6:	18e4      	addlt	r4, r4, r3
 800f9a8:	f000 fa62 	bl	800fe70 <__malloc_lock>
 800f9ac:	4a1e      	ldr	r2, [pc, #120]	; (800fa28 <_free_r+0x94>)
 800f9ae:	6813      	ldr	r3, [r2, #0]
 800f9b0:	4610      	mov	r0, r2
 800f9b2:	b933      	cbnz	r3, 800f9c2 <_free_r+0x2e>
 800f9b4:	6063      	str	r3, [r4, #4]
 800f9b6:	6014      	str	r4, [r2, #0]
 800f9b8:	4628      	mov	r0, r5
 800f9ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f9be:	f000 ba5d 	b.w	800fe7c <__malloc_unlock>
 800f9c2:	42a3      	cmp	r3, r4
 800f9c4:	d90a      	bls.n	800f9dc <_free_r+0x48>
 800f9c6:	6821      	ldr	r1, [r4, #0]
 800f9c8:	1862      	adds	r2, r4, r1
 800f9ca:	4293      	cmp	r3, r2
 800f9cc:	bf01      	itttt	eq
 800f9ce:	681a      	ldreq	r2, [r3, #0]
 800f9d0:	685b      	ldreq	r3, [r3, #4]
 800f9d2:	1852      	addeq	r2, r2, r1
 800f9d4:	6022      	streq	r2, [r4, #0]
 800f9d6:	6063      	str	r3, [r4, #4]
 800f9d8:	6004      	str	r4, [r0, #0]
 800f9da:	e7ed      	b.n	800f9b8 <_free_r+0x24>
 800f9dc:	461a      	mov	r2, r3
 800f9de:	685b      	ldr	r3, [r3, #4]
 800f9e0:	b10b      	cbz	r3, 800f9e6 <_free_r+0x52>
 800f9e2:	42a3      	cmp	r3, r4
 800f9e4:	d9fa      	bls.n	800f9dc <_free_r+0x48>
 800f9e6:	6811      	ldr	r1, [r2, #0]
 800f9e8:	1850      	adds	r0, r2, r1
 800f9ea:	42a0      	cmp	r0, r4
 800f9ec:	d10b      	bne.n	800fa06 <_free_r+0x72>
 800f9ee:	6820      	ldr	r0, [r4, #0]
 800f9f0:	4401      	add	r1, r0
 800f9f2:	1850      	adds	r0, r2, r1
 800f9f4:	4283      	cmp	r3, r0
 800f9f6:	6011      	str	r1, [r2, #0]
 800f9f8:	d1de      	bne.n	800f9b8 <_free_r+0x24>
 800f9fa:	6818      	ldr	r0, [r3, #0]
 800f9fc:	685b      	ldr	r3, [r3, #4]
 800f9fe:	4401      	add	r1, r0
 800fa00:	6011      	str	r1, [r2, #0]
 800fa02:	6053      	str	r3, [r2, #4]
 800fa04:	e7d8      	b.n	800f9b8 <_free_r+0x24>
 800fa06:	d902      	bls.n	800fa0e <_free_r+0x7a>
 800fa08:	230c      	movs	r3, #12
 800fa0a:	602b      	str	r3, [r5, #0]
 800fa0c:	e7d4      	b.n	800f9b8 <_free_r+0x24>
 800fa0e:	6820      	ldr	r0, [r4, #0]
 800fa10:	1821      	adds	r1, r4, r0
 800fa12:	428b      	cmp	r3, r1
 800fa14:	bf01      	itttt	eq
 800fa16:	6819      	ldreq	r1, [r3, #0]
 800fa18:	685b      	ldreq	r3, [r3, #4]
 800fa1a:	1809      	addeq	r1, r1, r0
 800fa1c:	6021      	streq	r1, [r4, #0]
 800fa1e:	6063      	str	r3, [r4, #4]
 800fa20:	6054      	str	r4, [r2, #4]
 800fa22:	e7c9      	b.n	800f9b8 <_free_r+0x24>
 800fa24:	bd38      	pop	{r3, r4, r5, pc}
 800fa26:	bf00      	nop
 800fa28:	20000244 	.word	0x20000244

0800fa2c <_malloc_r>:
 800fa2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa2e:	1ccd      	adds	r5, r1, #3
 800fa30:	f025 0503 	bic.w	r5, r5, #3
 800fa34:	3508      	adds	r5, #8
 800fa36:	2d0c      	cmp	r5, #12
 800fa38:	bf38      	it	cc
 800fa3a:	250c      	movcc	r5, #12
 800fa3c:	2d00      	cmp	r5, #0
 800fa3e:	4606      	mov	r6, r0
 800fa40:	db01      	blt.n	800fa46 <_malloc_r+0x1a>
 800fa42:	42a9      	cmp	r1, r5
 800fa44:	d903      	bls.n	800fa4e <_malloc_r+0x22>
 800fa46:	230c      	movs	r3, #12
 800fa48:	6033      	str	r3, [r6, #0]
 800fa4a:	2000      	movs	r0, #0
 800fa4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa4e:	f000 fa0f 	bl	800fe70 <__malloc_lock>
 800fa52:	4921      	ldr	r1, [pc, #132]	; (800fad8 <_malloc_r+0xac>)
 800fa54:	680a      	ldr	r2, [r1, #0]
 800fa56:	4614      	mov	r4, r2
 800fa58:	b99c      	cbnz	r4, 800fa82 <_malloc_r+0x56>
 800fa5a:	4f20      	ldr	r7, [pc, #128]	; (800fadc <_malloc_r+0xb0>)
 800fa5c:	683b      	ldr	r3, [r7, #0]
 800fa5e:	b923      	cbnz	r3, 800fa6a <_malloc_r+0x3e>
 800fa60:	4621      	mov	r1, r4
 800fa62:	4630      	mov	r0, r6
 800fa64:	f000 f998 	bl	800fd98 <_sbrk_r>
 800fa68:	6038      	str	r0, [r7, #0]
 800fa6a:	4629      	mov	r1, r5
 800fa6c:	4630      	mov	r0, r6
 800fa6e:	f000 f993 	bl	800fd98 <_sbrk_r>
 800fa72:	1c43      	adds	r3, r0, #1
 800fa74:	d123      	bne.n	800fabe <_malloc_r+0x92>
 800fa76:	230c      	movs	r3, #12
 800fa78:	4630      	mov	r0, r6
 800fa7a:	6033      	str	r3, [r6, #0]
 800fa7c:	f000 f9fe 	bl	800fe7c <__malloc_unlock>
 800fa80:	e7e3      	b.n	800fa4a <_malloc_r+0x1e>
 800fa82:	6823      	ldr	r3, [r4, #0]
 800fa84:	1b5b      	subs	r3, r3, r5
 800fa86:	d417      	bmi.n	800fab8 <_malloc_r+0x8c>
 800fa88:	2b0b      	cmp	r3, #11
 800fa8a:	d903      	bls.n	800fa94 <_malloc_r+0x68>
 800fa8c:	6023      	str	r3, [r4, #0]
 800fa8e:	441c      	add	r4, r3
 800fa90:	6025      	str	r5, [r4, #0]
 800fa92:	e004      	b.n	800fa9e <_malloc_r+0x72>
 800fa94:	6863      	ldr	r3, [r4, #4]
 800fa96:	42a2      	cmp	r2, r4
 800fa98:	bf0c      	ite	eq
 800fa9a:	600b      	streq	r3, [r1, #0]
 800fa9c:	6053      	strne	r3, [r2, #4]
 800fa9e:	4630      	mov	r0, r6
 800faa0:	f000 f9ec 	bl	800fe7c <__malloc_unlock>
 800faa4:	f104 000b 	add.w	r0, r4, #11
 800faa8:	1d23      	adds	r3, r4, #4
 800faaa:	f020 0007 	bic.w	r0, r0, #7
 800faae:	1ac2      	subs	r2, r0, r3
 800fab0:	d0cc      	beq.n	800fa4c <_malloc_r+0x20>
 800fab2:	1a1b      	subs	r3, r3, r0
 800fab4:	50a3      	str	r3, [r4, r2]
 800fab6:	e7c9      	b.n	800fa4c <_malloc_r+0x20>
 800fab8:	4622      	mov	r2, r4
 800faba:	6864      	ldr	r4, [r4, #4]
 800fabc:	e7cc      	b.n	800fa58 <_malloc_r+0x2c>
 800fabe:	1cc4      	adds	r4, r0, #3
 800fac0:	f024 0403 	bic.w	r4, r4, #3
 800fac4:	42a0      	cmp	r0, r4
 800fac6:	d0e3      	beq.n	800fa90 <_malloc_r+0x64>
 800fac8:	1a21      	subs	r1, r4, r0
 800faca:	4630      	mov	r0, r6
 800facc:	f000 f964 	bl	800fd98 <_sbrk_r>
 800fad0:	3001      	adds	r0, #1
 800fad2:	d1dd      	bne.n	800fa90 <_malloc_r+0x64>
 800fad4:	e7cf      	b.n	800fa76 <_malloc_r+0x4a>
 800fad6:	bf00      	nop
 800fad8:	20000244 	.word	0x20000244
 800fadc:	20000248 	.word	0x20000248

0800fae0 <__ssputs_r>:
 800fae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fae4:	688e      	ldr	r6, [r1, #8]
 800fae6:	4682      	mov	sl, r0
 800fae8:	429e      	cmp	r6, r3
 800faea:	460c      	mov	r4, r1
 800faec:	4690      	mov	r8, r2
 800faee:	461f      	mov	r7, r3
 800faf0:	d838      	bhi.n	800fb64 <__ssputs_r+0x84>
 800faf2:	898a      	ldrh	r2, [r1, #12]
 800faf4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800faf8:	d032      	beq.n	800fb60 <__ssputs_r+0x80>
 800fafa:	6825      	ldr	r5, [r4, #0]
 800fafc:	6909      	ldr	r1, [r1, #16]
 800fafe:	3301      	adds	r3, #1
 800fb00:	eba5 0901 	sub.w	r9, r5, r1
 800fb04:	6965      	ldr	r5, [r4, #20]
 800fb06:	444b      	add	r3, r9
 800fb08:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fb0c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fb10:	106d      	asrs	r5, r5, #1
 800fb12:	429d      	cmp	r5, r3
 800fb14:	bf38      	it	cc
 800fb16:	461d      	movcc	r5, r3
 800fb18:	0553      	lsls	r3, r2, #21
 800fb1a:	d531      	bpl.n	800fb80 <__ssputs_r+0xa0>
 800fb1c:	4629      	mov	r1, r5
 800fb1e:	f7ff ff85 	bl	800fa2c <_malloc_r>
 800fb22:	4606      	mov	r6, r0
 800fb24:	b950      	cbnz	r0, 800fb3c <__ssputs_r+0x5c>
 800fb26:	230c      	movs	r3, #12
 800fb28:	f04f 30ff 	mov.w	r0, #4294967295
 800fb2c:	f8ca 3000 	str.w	r3, [sl]
 800fb30:	89a3      	ldrh	r3, [r4, #12]
 800fb32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb36:	81a3      	strh	r3, [r4, #12]
 800fb38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb3c:	464a      	mov	r2, r9
 800fb3e:	6921      	ldr	r1, [r4, #16]
 800fb40:	f7ff fb8a 	bl	800f258 <memcpy>
 800fb44:	89a3      	ldrh	r3, [r4, #12]
 800fb46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fb4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb4e:	81a3      	strh	r3, [r4, #12]
 800fb50:	6126      	str	r6, [r4, #16]
 800fb52:	444e      	add	r6, r9
 800fb54:	6026      	str	r6, [r4, #0]
 800fb56:	463e      	mov	r6, r7
 800fb58:	6165      	str	r5, [r4, #20]
 800fb5a:	eba5 0509 	sub.w	r5, r5, r9
 800fb5e:	60a5      	str	r5, [r4, #8]
 800fb60:	42be      	cmp	r6, r7
 800fb62:	d900      	bls.n	800fb66 <__ssputs_r+0x86>
 800fb64:	463e      	mov	r6, r7
 800fb66:	4632      	mov	r2, r6
 800fb68:	4641      	mov	r1, r8
 800fb6a:	6820      	ldr	r0, [r4, #0]
 800fb6c:	f000 f966 	bl	800fe3c <memmove>
 800fb70:	68a3      	ldr	r3, [r4, #8]
 800fb72:	6822      	ldr	r2, [r4, #0]
 800fb74:	1b9b      	subs	r3, r3, r6
 800fb76:	4432      	add	r2, r6
 800fb78:	2000      	movs	r0, #0
 800fb7a:	60a3      	str	r3, [r4, #8]
 800fb7c:	6022      	str	r2, [r4, #0]
 800fb7e:	e7db      	b.n	800fb38 <__ssputs_r+0x58>
 800fb80:	462a      	mov	r2, r5
 800fb82:	f000 f981 	bl	800fe88 <_realloc_r>
 800fb86:	4606      	mov	r6, r0
 800fb88:	2800      	cmp	r0, #0
 800fb8a:	d1e1      	bne.n	800fb50 <__ssputs_r+0x70>
 800fb8c:	4650      	mov	r0, sl
 800fb8e:	6921      	ldr	r1, [r4, #16]
 800fb90:	f7ff ff00 	bl	800f994 <_free_r>
 800fb94:	e7c7      	b.n	800fb26 <__ssputs_r+0x46>
	...

0800fb98 <_svfiprintf_r>:
 800fb98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb9c:	4698      	mov	r8, r3
 800fb9e:	898b      	ldrh	r3, [r1, #12]
 800fba0:	4607      	mov	r7, r0
 800fba2:	061b      	lsls	r3, r3, #24
 800fba4:	460d      	mov	r5, r1
 800fba6:	4614      	mov	r4, r2
 800fba8:	b09d      	sub	sp, #116	; 0x74
 800fbaa:	d50e      	bpl.n	800fbca <_svfiprintf_r+0x32>
 800fbac:	690b      	ldr	r3, [r1, #16]
 800fbae:	b963      	cbnz	r3, 800fbca <_svfiprintf_r+0x32>
 800fbb0:	2140      	movs	r1, #64	; 0x40
 800fbb2:	f7ff ff3b 	bl	800fa2c <_malloc_r>
 800fbb6:	6028      	str	r0, [r5, #0]
 800fbb8:	6128      	str	r0, [r5, #16]
 800fbba:	b920      	cbnz	r0, 800fbc6 <_svfiprintf_r+0x2e>
 800fbbc:	230c      	movs	r3, #12
 800fbbe:	603b      	str	r3, [r7, #0]
 800fbc0:	f04f 30ff 	mov.w	r0, #4294967295
 800fbc4:	e0d1      	b.n	800fd6a <_svfiprintf_r+0x1d2>
 800fbc6:	2340      	movs	r3, #64	; 0x40
 800fbc8:	616b      	str	r3, [r5, #20]
 800fbca:	2300      	movs	r3, #0
 800fbcc:	9309      	str	r3, [sp, #36]	; 0x24
 800fbce:	2320      	movs	r3, #32
 800fbd0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fbd4:	2330      	movs	r3, #48	; 0x30
 800fbd6:	f04f 0901 	mov.w	r9, #1
 800fbda:	f8cd 800c 	str.w	r8, [sp, #12]
 800fbde:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800fd84 <_svfiprintf_r+0x1ec>
 800fbe2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fbe6:	4623      	mov	r3, r4
 800fbe8:	469a      	mov	sl, r3
 800fbea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fbee:	b10a      	cbz	r2, 800fbf4 <_svfiprintf_r+0x5c>
 800fbf0:	2a25      	cmp	r2, #37	; 0x25
 800fbf2:	d1f9      	bne.n	800fbe8 <_svfiprintf_r+0x50>
 800fbf4:	ebba 0b04 	subs.w	fp, sl, r4
 800fbf8:	d00b      	beq.n	800fc12 <_svfiprintf_r+0x7a>
 800fbfa:	465b      	mov	r3, fp
 800fbfc:	4622      	mov	r2, r4
 800fbfe:	4629      	mov	r1, r5
 800fc00:	4638      	mov	r0, r7
 800fc02:	f7ff ff6d 	bl	800fae0 <__ssputs_r>
 800fc06:	3001      	adds	r0, #1
 800fc08:	f000 80aa 	beq.w	800fd60 <_svfiprintf_r+0x1c8>
 800fc0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fc0e:	445a      	add	r2, fp
 800fc10:	9209      	str	r2, [sp, #36]	; 0x24
 800fc12:	f89a 3000 	ldrb.w	r3, [sl]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	f000 80a2 	beq.w	800fd60 <_svfiprintf_r+0x1c8>
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	f04f 32ff 	mov.w	r2, #4294967295
 800fc22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fc26:	f10a 0a01 	add.w	sl, sl, #1
 800fc2a:	9304      	str	r3, [sp, #16]
 800fc2c:	9307      	str	r3, [sp, #28]
 800fc2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fc32:	931a      	str	r3, [sp, #104]	; 0x68
 800fc34:	4654      	mov	r4, sl
 800fc36:	2205      	movs	r2, #5
 800fc38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc3c:	4851      	ldr	r0, [pc, #324]	; (800fd84 <_svfiprintf_r+0x1ec>)
 800fc3e:	f7ff fafd 	bl	800f23c <memchr>
 800fc42:	9a04      	ldr	r2, [sp, #16]
 800fc44:	b9d8      	cbnz	r0, 800fc7e <_svfiprintf_r+0xe6>
 800fc46:	06d0      	lsls	r0, r2, #27
 800fc48:	bf44      	itt	mi
 800fc4a:	2320      	movmi	r3, #32
 800fc4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc50:	0711      	lsls	r1, r2, #28
 800fc52:	bf44      	itt	mi
 800fc54:	232b      	movmi	r3, #43	; 0x2b
 800fc56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fc5a:	f89a 3000 	ldrb.w	r3, [sl]
 800fc5e:	2b2a      	cmp	r3, #42	; 0x2a
 800fc60:	d015      	beq.n	800fc8e <_svfiprintf_r+0xf6>
 800fc62:	4654      	mov	r4, sl
 800fc64:	2000      	movs	r0, #0
 800fc66:	f04f 0c0a 	mov.w	ip, #10
 800fc6a:	9a07      	ldr	r2, [sp, #28]
 800fc6c:	4621      	mov	r1, r4
 800fc6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fc72:	3b30      	subs	r3, #48	; 0x30
 800fc74:	2b09      	cmp	r3, #9
 800fc76:	d94e      	bls.n	800fd16 <_svfiprintf_r+0x17e>
 800fc78:	b1b0      	cbz	r0, 800fca8 <_svfiprintf_r+0x110>
 800fc7a:	9207      	str	r2, [sp, #28]
 800fc7c:	e014      	b.n	800fca8 <_svfiprintf_r+0x110>
 800fc7e:	eba0 0308 	sub.w	r3, r0, r8
 800fc82:	fa09 f303 	lsl.w	r3, r9, r3
 800fc86:	4313      	orrs	r3, r2
 800fc88:	46a2      	mov	sl, r4
 800fc8a:	9304      	str	r3, [sp, #16]
 800fc8c:	e7d2      	b.n	800fc34 <_svfiprintf_r+0x9c>
 800fc8e:	9b03      	ldr	r3, [sp, #12]
 800fc90:	1d19      	adds	r1, r3, #4
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	9103      	str	r1, [sp, #12]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	bfbb      	ittet	lt
 800fc9a:	425b      	neglt	r3, r3
 800fc9c:	f042 0202 	orrlt.w	r2, r2, #2
 800fca0:	9307      	strge	r3, [sp, #28]
 800fca2:	9307      	strlt	r3, [sp, #28]
 800fca4:	bfb8      	it	lt
 800fca6:	9204      	strlt	r2, [sp, #16]
 800fca8:	7823      	ldrb	r3, [r4, #0]
 800fcaa:	2b2e      	cmp	r3, #46	; 0x2e
 800fcac:	d10c      	bne.n	800fcc8 <_svfiprintf_r+0x130>
 800fcae:	7863      	ldrb	r3, [r4, #1]
 800fcb0:	2b2a      	cmp	r3, #42	; 0x2a
 800fcb2:	d135      	bne.n	800fd20 <_svfiprintf_r+0x188>
 800fcb4:	9b03      	ldr	r3, [sp, #12]
 800fcb6:	3402      	adds	r4, #2
 800fcb8:	1d1a      	adds	r2, r3, #4
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	9203      	str	r2, [sp, #12]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	bfb8      	it	lt
 800fcc2:	f04f 33ff 	movlt.w	r3, #4294967295
 800fcc6:	9305      	str	r3, [sp, #20]
 800fcc8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fd94 <_svfiprintf_r+0x1fc>
 800fccc:	2203      	movs	r2, #3
 800fcce:	4650      	mov	r0, sl
 800fcd0:	7821      	ldrb	r1, [r4, #0]
 800fcd2:	f7ff fab3 	bl	800f23c <memchr>
 800fcd6:	b140      	cbz	r0, 800fcea <_svfiprintf_r+0x152>
 800fcd8:	2340      	movs	r3, #64	; 0x40
 800fcda:	eba0 000a 	sub.w	r0, r0, sl
 800fcde:	fa03 f000 	lsl.w	r0, r3, r0
 800fce2:	9b04      	ldr	r3, [sp, #16]
 800fce4:	3401      	adds	r4, #1
 800fce6:	4303      	orrs	r3, r0
 800fce8:	9304      	str	r3, [sp, #16]
 800fcea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fcee:	2206      	movs	r2, #6
 800fcf0:	4825      	ldr	r0, [pc, #148]	; (800fd88 <_svfiprintf_r+0x1f0>)
 800fcf2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fcf6:	f7ff faa1 	bl	800f23c <memchr>
 800fcfa:	2800      	cmp	r0, #0
 800fcfc:	d038      	beq.n	800fd70 <_svfiprintf_r+0x1d8>
 800fcfe:	4b23      	ldr	r3, [pc, #140]	; (800fd8c <_svfiprintf_r+0x1f4>)
 800fd00:	bb1b      	cbnz	r3, 800fd4a <_svfiprintf_r+0x1b2>
 800fd02:	9b03      	ldr	r3, [sp, #12]
 800fd04:	3307      	adds	r3, #7
 800fd06:	f023 0307 	bic.w	r3, r3, #7
 800fd0a:	3308      	adds	r3, #8
 800fd0c:	9303      	str	r3, [sp, #12]
 800fd0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd10:	4433      	add	r3, r6
 800fd12:	9309      	str	r3, [sp, #36]	; 0x24
 800fd14:	e767      	b.n	800fbe6 <_svfiprintf_r+0x4e>
 800fd16:	460c      	mov	r4, r1
 800fd18:	2001      	movs	r0, #1
 800fd1a:	fb0c 3202 	mla	r2, ip, r2, r3
 800fd1e:	e7a5      	b.n	800fc6c <_svfiprintf_r+0xd4>
 800fd20:	2300      	movs	r3, #0
 800fd22:	f04f 0c0a 	mov.w	ip, #10
 800fd26:	4619      	mov	r1, r3
 800fd28:	3401      	adds	r4, #1
 800fd2a:	9305      	str	r3, [sp, #20]
 800fd2c:	4620      	mov	r0, r4
 800fd2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fd32:	3a30      	subs	r2, #48	; 0x30
 800fd34:	2a09      	cmp	r2, #9
 800fd36:	d903      	bls.n	800fd40 <_svfiprintf_r+0x1a8>
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d0c5      	beq.n	800fcc8 <_svfiprintf_r+0x130>
 800fd3c:	9105      	str	r1, [sp, #20]
 800fd3e:	e7c3      	b.n	800fcc8 <_svfiprintf_r+0x130>
 800fd40:	4604      	mov	r4, r0
 800fd42:	2301      	movs	r3, #1
 800fd44:	fb0c 2101 	mla	r1, ip, r1, r2
 800fd48:	e7f0      	b.n	800fd2c <_svfiprintf_r+0x194>
 800fd4a:	ab03      	add	r3, sp, #12
 800fd4c:	9300      	str	r3, [sp, #0]
 800fd4e:	462a      	mov	r2, r5
 800fd50:	4638      	mov	r0, r7
 800fd52:	4b0f      	ldr	r3, [pc, #60]	; (800fd90 <_svfiprintf_r+0x1f8>)
 800fd54:	a904      	add	r1, sp, #16
 800fd56:	f7fd fff9 	bl	800dd4c <_printf_float>
 800fd5a:	1c42      	adds	r2, r0, #1
 800fd5c:	4606      	mov	r6, r0
 800fd5e:	d1d6      	bne.n	800fd0e <_svfiprintf_r+0x176>
 800fd60:	89ab      	ldrh	r3, [r5, #12]
 800fd62:	065b      	lsls	r3, r3, #25
 800fd64:	f53f af2c 	bmi.w	800fbc0 <_svfiprintf_r+0x28>
 800fd68:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fd6a:	b01d      	add	sp, #116	; 0x74
 800fd6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd70:	ab03      	add	r3, sp, #12
 800fd72:	9300      	str	r3, [sp, #0]
 800fd74:	462a      	mov	r2, r5
 800fd76:	4638      	mov	r0, r7
 800fd78:	4b05      	ldr	r3, [pc, #20]	; (800fd90 <_svfiprintf_r+0x1f8>)
 800fd7a:	a904      	add	r1, sp, #16
 800fd7c:	f7fe fa82 	bl	800e284 <_printf_i>
 800fd80:	e7eb      	b.n	800fd5a <_svfiprintf_r+0x1c2>
 800fd82:	bf00      	nop
 800fd84:	08011924 	.word	0x08011924
 800fd88:	0801192e 	.word	0x0801192e
 800fd8c:	0800dd4d 	.word	0x0800dd4d
 800fd90:	0800fae1 	.word	0x0800fae1
 800fd94:	0801192a 	.word	0x0801192a

0800fd98 <_sbrk_r>:
 800fd98:	b538      	push	{r3, r4, r5, lr}
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	4d05      	ldr	r5, [pc, #20]	; (800fdb4 <_sbrk_r+0x1c>)
 800fd9e:	4604      	mov	r4, r0
 800fda0:	4608      	mov	r0, r1
 800fda2:	602b      	str	r3, [r5, #0]
 800fda4:	f7f2 fae2 	bl	800236c <_sbrk>
 800fda8:	1c43      	adds	r3, r0, #1
 800fdaa:	d102      	bne.n	800fdb2 <_sbrk_r+0x1a>
 800fdac:	682b      	ldr	r3, [r5, #0]
 800fdae:	b103      	cbz	r3, 800fdb2 <_sbrk_r+0x1a>
 800fdb0:	6023      	str	r3, [r4, #0]
 800fdb2:	bd38      	pop	{r3, r4, r5, pc}
 800fdb4:	200005c0 	.word	0x200005c0

0800fdb8 <__assert_func>:
 800fdb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fdba:	4614      	mov	r4, r2
 800fdbc:	461a      	mov	r2, r3
 800fdbe:	4b09      	ldr	r3, [pc, #36]	; (800fde4 <__assert_func+0x2c>)
 800fdc0:	4605      	mov	r5, r0
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	68d8      	ldr	r0, [r3, #12]
 800fdc6:	b14c      	cbz	r4, 800fddc <__assert_func+0x24>
 800fdc8:	4b07      	ldr	r3, [pc, #28]	; (800fde8 <__assert_func+0x30>)
 800fdca:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fdce:	9100      	str	r1, [sp, #0]
 800fdd0:	462b      	mov	r3, r5
 800fdd2:	4906      	ldr	r1, [pc, #24]	; (800fdec <__assert_func+0x34>)
 800fdd4:	f000 f80e 	bl	800fdf4 <fiprintf>
 800fdd8:	f000 faa2 	bl	8010320 <abort>
 800fddc:	4b04      	ldr	r3, [pc, #16]	; (800fdf0 <__assert_func+0x38>)
 800fdde:	461c      	mov	r4, r3
 800fde0:	e7f3      	b.n	800fdca <__assert_func+0x12>
 800fde2:	bf00      	nop
 800fde4:	20000014 	.word	0x20000014
 800fde8:	08011935 	.word	0x08011935
 800fdec:	08011942 	.word	0x08011942
 800fdf0:	08011970 	.word	0x08011970

0800fdf4 <fiprintf>:
 800fdf4:	b40e      	push	{r1, r2, r3}
 800fdf6:	b503      	push	{r0, r1, lr}
 800fdf8:	4601      	mov	r1, r0
 800fdfa:	ab03      	add	r3, sp, #12
 800fdfc:	4805      	ldr	r0, [pc, #20]	; (800fe14 <fiprintf+0x20>)
 800fdfe:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe02:	6800      	ldr	r0, [r0, #0]
 800fe04:	9301      	str	r3, [sp, #4]
 800fe06:	f000 f88d 	bl	800ff24 <_vfiprintf_r>
 800fe0a:	b002      	add	sp, #8
 800fe0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe10:	b003      	add	sp, #12
 800fe12:	4770      	bx	lr
 800fe14:	20000014 	.word	0x20000014

0800fe18 <__ascii_mbtowc>:
 800fe18:	b082      	sub	sp, #8
 800fe1a:	b901      	cbnz	r1, 800fe1e <__ascii_mbtowc+0x6>
 800fe1c:	a901      	add	r1, sp, #4
 800fe1e:	b142      	cbz	r2, 800fe32 <__ascii_mbtowc+0x1a>
 800fe20:	b14b      	cbz	r3, 800fe36 <__ascii_mbtowc+0x1e>
 800fe22:	7813      	ldrb	r3, [r2, #0]
 800fe24:	600b      	str	r3, [r1, #0]
 800fe26:	7812      	ldrb	r2, [r2, #0]
 800fe28:	1e10      	subs	r0, r2, #0
 800fe2a:	bf18      	it	ne
 800fe2c:	2001      	movne	r0, #1
 800fe2e:	b002      	add	sp, #8
 800fe30:	4770      	bx	lr
 800fe32:	4610      	mov	r0, r2
 800fe34:	e7fb      	b.n	800fe2e <__ascii_mbtowc+0x16>
 800fe36:	f06f 0001 	mvn.w	r0, #1
 800fe3a:	e7f8      	b.n	800fe2e <__ascii_mbtowc+0x16>

0800fe3c <memmove>:
 800fe3c:	4288      	cmp	r0, r1
 800fe3e:	b510      	push	{r4, lr}
 800fe40:	eb01 0402 	add.w	r4, r1, r2
 800fe44:	d902      	bls.n	800fe4c <memmove+0x10>
 800fe46:	4284      	cmp	r4, r0
 800fe48:	4623      	mov	r3, r4
 800fe4a:	d807      	bhi.n	800fe5c <memmove+0x20>
 800fe4c:	1e43      	subs	r3, r0, #1
 800fe4e:	42a1      	cmp	r1, r4
 800fe50:	d008      	beq.n	800fe64 <memmove+0x28>
 800fe52:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fe56:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fe5a:	e7f8      	b.n	800fe4e <memmove+0x12>
 800fe5c:	4601      	mov	r1, r0
 800fe5e:	4402      	add	r2, r0
 800fe60:	428a      	cmp	r2, r1
 800fe62:	d100      	bne.n	800fe66 <memmove+0x2a>
 800fe64:	bd10      	pop	{r4, pc}
 800fe66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fe6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fe6e:	e7f7      	b.n	800fe60 <memmove+0x24>

0800fe70 <__malloc_lock>:
 800fe70:	4801      	ldr	r0, [pc, #4]	; (800fe78 <__malloc_lock+0x8>)
 800fe72:	f000 bc15 	b.w	80106a0 <__retarget_lock_acquire_recursive>
 800fe76:	bf00      	nop
 800fe78:	200005c8 	.word	0x200005c8

0800fe7c <__malloc_unlock>:
 800fe7c:	4801      	ldr	r0, [pc, #4]	; (800fe84 <__malloc_unlock+0x8>)
 800fe7e:	f000 bc10 	b.w	80106a2 <__retarget_lock_release_recursive>
 800fe82:	bf00      	nop
 800fe84:	200005c8 	.word	0x200005c8

0800fe88 <_realloc_r>:
 800fe88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe8a:	4607      	mov	r7, r0
 800fe8c:	4614      	mov	r4, r2
 800fe8e:	460e      	mov	r6, r1
 800fe90:	b921      	cbnz	r1, 800fe9c <_realloc_r+0x14>
 800fe92:	4611      	mov	r1, r2
 800fe94:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800fe98:	f7ff bdc8 	b.w	800fa2c <_malloc_r>
 800fe9c:	b922      	cbnz	r2, 800fea8 <_realloc_r+0x20>
 800fe9e:	f7ff fd79 	bl	800f994 <_free_r>
 800fea2:	4625      	mov	r5, r4
 800fea4:	4628      	mov	r0, r5
 800fea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fea8:	f000 fc60 	bl	801076c <_malloc_usable_size_r>
 800feac:	42a0      	cmp	r0, r4
 800feae:	d20f      	bcs.n	800fed0 <_realloc_r+0x48>
 800feb0:	4621      	mov	r1, r4
 800feb2:	4638      	mov	r0, r7
 800feb4:	f7ff fdba 	bl	800fa2c <_malloc_r>
 800feb8:	4605      	mov	r5, r0
 800feba:	2800      	cmp	r0, #0
 800febc:	d0f2      	beq.n	800fea4 <_realloc_r+0x1c>
 800febe:	4631      	mov	r1, r6
 800fec0:	4622      	mov	r2, r4
 800fec2:	f7ff f9c9 	bl	800f258 <memcpy>
 800fec6:	4631      	mov	r1, r6
 800fec8:	4638      	mov	r0, r7
 800feca:	f7ff fd63 	bl	800f994 <_free_r>
 800fece:	e7e9      	b.n	800fea4 <_realloc_r+0x1c>
 800fed0:	4635      	mov	r5, r6
 800fed2:	e7e7      	b.n	800fea4 <_realloc_r+0x1c>

0800fed4 <__sfputc_r>:
 800fed4:	6893      	ldr	r3, [r2, #8]
 800fed6:	b410      	push	{r4}
 800fed8:	3b01      	subs	r3, #1
 800feda:	2b00      	cmp	r3, #0
 800fedc:	6093      	str	r3, [r2, #8]
 800fede:	da07      	bge.n	800fef0 <__sfputc_r+0x1c>
 800fee0:	6994      	ldr	r4, [r2, #24]
 800fee2:	42a3      	cmp	r3, r4
 800fee4:	db01      	blt.n	800feea <__sfputc_r+0x16>
 800fee6:	290a      	cmp	r1, #10
 800fee8:	d102      	bne.n	800fef0 <__sfputc_r+0x1c>
 800feea:	bc10      	pop	{r4}
 800feec:	f000 b94a 	b.w	8010184 <__swbuf_r>
 800fef0:	6813      	ldr	r3, [r2, #0]
 800fef2:	1c58      	adds	r0, r3, #1
 800fef4:	6010      	str	r0, [r2, #0]
 800fef6:	7019      	strb	r1, [r3, #0]
 800fef8:	4608      	mov	r0, r1
 800fefa:	bc10      	pop	{r4}
 800fefc:	4770      	bx	lr

0800fefe <__sfputs_r>:
 800fefe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff00:	4606      	mov	r6, r0
 800ff02:	460f      	mov	r7, r1
 800ff04:	4614      	mov	r4, r2
 800ff06:	18d5      	adds	r5, r2, r3
 800ff08:	42ac      	cmp	r4, r5
 800ff0a:	d101      	bne.n	800ff10 <__sfputs_r+0x12>
 800ff0c:	2000      	movs	r0, #0
 800ff0e:	e007      	b.n	800ff20 <__sfputs_r+0x22>
 800ff10:	463a      	mov	r2, r7
 800ff12:	4630      	mov	r0, r6
 800ff14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff18:	f7ff ffdc 	bl	800fed4 <__sfputc_r>
 800ff1c:	1c43      	adds	r3, r0, #1
 800ff1e:	d1f3      	bne.n	800ff08 <__sfputs_r+0xa>
 800ff20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ff24 <_vfiprintf_r>:
 800ff24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff28:	460d      	mov	r5, r1
 800ff2a:	4614      	mov	r4, r2
 800ff2c:	4698      	mov	r8, r3
 800ff2e:	4606      	mov	r6, r0
 800ff30:	b09d      	sub	sp, #116	; 0x74
 800ff32:	b118      	cbz	r0, 800ff3c <_vfiprintf_r+0x18>
 800ff34:	6983      	ldr	r3, [r0, #24]
 800ff36:	b90b      	cbnz	r3, 800ff3c <_vfiprintf_r+0x18>
 800ff38:	f000 fb14 	bl	8010564 <__sinit>
 800ff3c:	4b89      	ldr	r3, [pc, #548]	; (8010164 <_vfiprintf_r+0x240>)
 800ff3e:	429d      	cmp	r5, r3
 800ff40:	d11b      	bne.n	800ff7a <_vfiprintf_r+0x56>
 800ff42:	6875      	ldr	r5, [r6, #4]
 800ff44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ff46:	07d9      	lsls	r1, r3, #31
 800ff48:	d405      	bmi.n	800ff56 <_vfiprintf_r+0x32>
 800ff4a:	89ab      	ldrh	r3, [r5, #12]
 800ff4c:	059a      	lsls	r2, r3, #22
 800ff4e:	d402      	bmi.n	800ff56 <_vfiprintf_r+0x32>
 800ff50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ff52:	f000 fba5 	bl	80106a0 <__retarget_lock_acquire_recursive>
 800ff56:	89ab      	ldrh	r3, [r5, #12]
 800ff58:	071b      	lsls	r3, r3, #28
 800ff5a:	d501      	bpl.n	800ff60 <_vfiprintf_r+0x3c>
 800ff5c:	692b      	ldr	r3, [r5, #16]
 800ff5e:	b9eb      	cbnz	r3, 800ff9c <_vfiprintf_r+0x78>
 800ff60:	4629      	mov	r1, r5
 800ff62:	4630      	mov	r0, r6
 800ff64:	f000 f96e 	bl	8010244 <__swsetup_r>
 800ff68:	b1c0      	cbz	r0, 800ff9c <_vfiprintf_r+0x78>
 800ff6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ff6c:	07dc      	lsls	r4, r3, #31
 800ff6e:	d50e      	bpl.n	800ff8e <_vfiprintf_r+0x6a>
 800ff70:	f04f 30ff 	mov.w	r0, #4294967295
 800ff74:	b01d      	add	sp, #116	; 0x74
 800ff76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff7a:	4b7b      	ldr	r3, [pc, #492]	; (8010168 <_vfiprintf_r+0x244>)
 800ff7c:	429d      	cmp	r5, r3
 800ff7e:	d101      	bne.n	800ff84 <_vfiprintf_r+0x60>
 800ff80:	68b5      	ldr	r5, [r6, #8]
 800ff82:	e7df      	b.n	800ff44 <_vfiprintf_r+0x20>
 800ff84:	4b79      	ldr	r3, [pc, #484]	; (801016c <_vfiprintf_r+0x248>)
 800ff86:	429d      	cmp	r5, r3
 800ff88:	bf08      	it	eq
 800ff8a:	68f5      	ldreq	r5, [r6, #12]
 800ff8c:	e7da      	b.n	800ff44 <_vfiprintf_r+0x20>
 800ff8e:	89ab      	ldrh	r3, [r5, #12]
 800ff90:	0598      	lsls	r0, r3, #22
 800ff92:	d4ed      	bmi.n	800ff70 <_vfiprintf_r+0x4c>
 800ff94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ff96:	f000 fb84 	bl	80106a2 <__retarget_lock_release_recursive>
 800ff9a:	e7e9      	b.n	800ff70 <_vfiprintf_r+0x4c>
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	9309      	str	r3, [sp, #36]	; 0x24
 800ffa0:	2320      	movs	r3, #32
 800ffa2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ffa6:	2330      	movs	r3, #48	; 0x30
 800ffa8:	f04f 0901 	mov.w	r9, #1
 800ffac:	f8cd 800c 	str.w	r8, [sp, #12]
 800ffb0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8010170 <_vfiprintf_r+0x24c>
 800ffb4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ffb8:	4623      	mov	r3, r4
 800ffba:	469a      	mov	sl, r3
 800ffbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ffc0:	b10a      	cbz	r2, 800ffc6 <_vfiprintf_r+0xa2>
 800ffc2:	2a25      	cmp	r2, #37	; 0x25
 800ffc4:	d1f9      	bne.n	800ffba <_vfiprintf_r+0x96>
 800ffc6:	ebba 0b04 	subs.w	fp, sl, r4
 800ffca:	d00b      	beq.n	800ffe4 <_vfiprintf_r+0xc0>
 800ffcc:	465b      	mov	r3, fp
 800ffce:	4622      	mov	r2, r4
 800ffd0:	4629      	mov	r1, r5
 800ffd2:	4630      	mov	r0, r6
 800ffd4:	f7ff ff93 	bl	800fefe <__sfputs_r>
 800ffd8:	3001      	adds	r0, #1
 800ffda:	f000 80aa 	beq.w	8010132 <_vfiprintf_r+0x20e>
 800ffde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ffe0:	445a      	add	r2, fp
 800ffe2:	9209      	str	r2, [sp, #36]	; 0x24
 800ffe4:	f89a 3000 	ldrb.w	r3, [sl]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	f000 80a2 	beq.w	8010132 <_vfiprintf_r+0x20e>
 800ffee:	2300      	movs	r3, #0
 800fff0:	f04f 32ff 	mov.w	r2, #4294967295
 800fff4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fff8:	f10a 0a01 	add.w	sl, sl, #1
 800fffc:	9304      	str	r3, [sp, #16]
 800fffe:	9307      	str	r3, [sp, #28]
 8010000:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010004:	931a      	str	r3, [sp, #104]	; 0x68
 8010006:	4654      	mov	r4, sl
 8010008:	2205      	movs	r2, #5
 801000a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801000e:	4858      	ldr	r0, [pc, #352]	; (8010170 <_vfiprintf_r+0x24c>)
 8010010:	f7ff f914 	bl	800f23c <memchr>
 8010014:	9a04      	ldr	r2, [sp, #16]
 8010016:	b9d8      	cbnz	r0, 8010050 <_vfiprintf_r+0x12c>
 8010018:	06d1      	lsls	r1, r2, #27
 801001a:	bf44      	itt	mi
 801001c:	2320      	movmi	r3, #32
 801001e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010022:	0713      	lsls	r3, r2, #28
 8010024:	bf44      	itt	mi
 8010026:	232b      	movmi	r3, #43	; 0x2b
 8010028:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801002c:	f89a 3000 	ldrb.w	r3, [sl]
 8010030:	2b2a      	cmp	r3, #42	; 0x2a
 8010032:	d015      	beq.n	8010060 <_vfiprintf_r+0x13c>
 8010034:	4654      	mov	r4, sl
 8010036:	2000      	movs	r0, #0
 8010038:	f04f 0c0a 	mov.w	ip, #10
 801003c:	9a07      	ldr	r2, [sp, #28]
 801003e:	4621      	mov	r1, r4
 8010040:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010044:	3b30      	subs	r3, #48	; 0x30
 8010046:	2b09      	cmp	r3, #9
 8010048:	d94e      	bls.n	80100e8 <_vfiprintf_r+0x1c4>
 801004a:	b1b0      	cbz	r0, 801007a <_vfiprintf_r+0x156>
 801004c:	9207      	str	r2, [sp, #28]
 801004e:	e014      	b.n	801007a <_vfiprintf_r+0x156>
 8010050:	eba0 0308 	sub.w	r3, r0, r8
 8010054:	fa09 f303 	lsl.w	r3, r9, r3
 8010058:	4313      	orrs	r3, r2
 801005a:	46a2      	mov	sl, r4
 801005c:	9304      	str	r3, [sp, #16]
 801005e:	e7d2      	b.n	8010006 <_vfiprintf_r+0xe2>
 8010060:	9b03      	ldr	r3, [sp, #12]
 8010062:	1d19      	adds	r1, r3, #4
 8010064:	681b      	ldr	r3, [r3, #0]
 8010066:	9103      	str	r1, [sp, #12]
 8010068:	2b00      	cmp	r3, #0
 801006a:	bfbb      	ittet	lt
 801006c:	425b      	neglt	r3, r3
 801006e:	f042 0202 	orrlt.w	r2, r2, #2
 8010072:	9307      	strge	r3, [sp, #28]
 8010074:	9307      	strlt	r3, [sp, #28]
 8010076:	bfb8      	it	lt
 8010078:	9204      	strlt	r2, [sp, #16]
 801007a:	7823      	ldrb	r3, [r4, #0]
 801007c:	2b2e      	cmp	r3, #46	; 0x2e
 801007e:	d10c      	bne.n	801009a <_vfiprintf_r+0x176>
 8010080:	7863      	ldrb	r3, [r4, #1]
 8010082:	2b2a      	cmp	r3, #42	; 0x2a
 8010084:	d135      	bne.n	80100f2 <_vfiprintf_r+0x1ce>
 8010086:	9b03      	ldr	r3, [sp, #12]
 8010088:	3402      	adds	r4, #2
 801008a:	1d1a      	adds	r2, r3, #4
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	9203      	str	r2, [sp, #12]
 8010090:	2b00      	cmp	r3, #0
 8010092:	bfb8      	it	lt
 8010094:	f04f 33ff 	movlt.w	r3, #4294967295
 8010098:	9305      	str	r3, [sp, #20]
 801009a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010180 <_vfiprintf_r+0x25c>
 801009e:	2203      	movs	r2, #3
 80100a0:	4650      	mov	r0, sl
 80100a2:	7821      	ldrb	r1, [r4, #0]
 80100a4:	f7ff f8ca 	bl	800f23c <memchr>
 80100a8:	b140      	cbz	r0, 80100bc <_vfiprintf_r+0x198>
 80100aa:	2340      	movs	r3, #64	; 0x40
 80100ac:	eba0 000a 	sub.w	r0, r0, sl
 80100b0:	fa03 f000 	lsl.w	r0, r3, r0
 80100b4:	9b04      	ldr	r3, [sp, #16]
 80100b6:	3401      	adds	r4, #1
 80100b8:	4303      	orrs	r3, r0
 80100ba:	9304      	str	r3, [sp, #16]
 80100bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100c0:	2206      	movs	r2, #6
 80100c2:	482c      	ldr	r0, [pc, #176]	; (8010174 <_vfiprintf_r+0x250>)
 80100c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80100c8:	f7ff f8b8 	bl	800f23c <memchr>
 80100cc:	2800      	cmp	r0, #0
 80100ce:	d03f      	beq.n	8010150 <_vfiprintf_r+0x22c>
 80100d0:	4b29      	ldr	r3, [pc, #164]	; (8010178 <_vfiprintf_r+0x254>)
 80100d2:	bb1b      	cbnz	r3, 801011c <_vfiprintf_r+0x1f8>
 80100d4:	9b03      	ldr	r3, [sp, #12]
 80100d6:	3307      	adds	r3, #7
 80100d8:	f023 0307 	bic.w	r3, r3, #7
 80100dc:	3308      	adds	r3, #8
 80100de:	9303      	str	r3, [sp, #12]
 80100e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80100e2:	443b      	add	r3, r7
 80100e4:	9309      	str	r3, [sp, #36]	; 0x24
 80100e6:	e767      	b.n	800ffb8 <_vfiprintf_r+0x94>
 80100e8:	460c      	mov	r4, r1
 80100ea:	2001      	movs	r0, #1
 80100ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80100f0:	e7a5      	b.n	801003e <_vfiprintf_r+0x11a>
 80100f2:	2300      	movs	r3, #0
 80100f4:	f04f 0c0a 	mov.w	ip, #10
 80100f8:	4619      	mov	r1, r3
 80100fa:	3401      	adds	r4, #1
 80100fc:	9305      	str	r3, [sp, #20]
 80100fe:	4620      	mov	r0, r4
 8010100:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010104:	3a30      	subs	r2, #48	; 0x30
 8010106:	2a09      	cmp	r2, #9
 8010108:	d903      	bls.n	8010112 <_vfiprintf_r+0x1ee>
 801010a:	2b00      	cmp	r3, #0
 801010c:	d0c5      	beq.n	801009a <_vfiprintf_r+0x176>
 801010e:	9105      	str	r1, [sp, #20]
 8010110:	e7c3      	b.n	801009a <_vfiprintf_r+0x176>
 8010112:	4604      	mov	r4, r0
 8010114:	2301      	movs	r3, #1
 8010116:	fb0c 2101 	mla	r1, ip, r1, r2
 801011a:	e7f0      	b.n	80100fe <_vfiprintf_r+0x1da>
 801011c:	ab03      	add	r3, sp, #12
 801011e:	9300      	str	r3, [sp, #0]
 8010120:	462a      	mov	r2, r5
 8010122:	4630      	mov	r0, r6
 8010124:	4b15      	ldr	r3, [pc, #84]	; (801017c <_vfiprintf_r+0x258>)
 8010126:	a904      	add	r1, sp, #16
 8010128:	f7fd fe10 	bl	800dd4c <_printf_float>
 801012c:	4607      	mov	r7, r0
 801012e:	1c78      	adds	r0, r7, #1
 8010130:	d1d6      	bne.n	80100e0 <_vfiprintf_r+0x1bc>
 8010132:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010134:	07d9      	lsls	r1, r3, #31
 8010136:	d405      	bmi.n	8010144 <_vfiprintf_r+0x220>
 8010138:	89ab      	ldrh	r3, [r5, #12]
 801013a:	059a      	lsls	r2, r3, #22
 801013c:	d402      	bmi.n	8010144 <_vfiprintf_r+0x220>
 801013e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010140:	f000 faaf 	bl	80106a2 <__retarget_lock_release_recursive>
 8010144:	89ab      	ldrh	r3, [r5, #12]
 8010146:	065b      	lsls	r3, r3, #25
 8010148:	f53f af12 	bmi.w	800ff70 <_vfiprintf_r+0x4c>
 801014c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801014e:	e711      	b.n	800ff74 <_vfiprintf_r+0x50>
 8010150:	ab03      	add	r3, sp, #12
 8010152:	9300      	str	r3, [sp, #0]
 8010154:	462a      	mov	r2, r5
 8010156:	4630      	mov	r0, r6
 8010158:	4b08      	ldr	r3, [pc, #32]	; (801017c <_vfiprintf_r+0x258>)
 801015a:	a904      	add	r1, sp, #16
 801015c:	f7fe f892 	bl	800e284 <_printf_i>
 8010160:	e7e4      	b.n	801012c <_vfiprintf_r+0x208>
 8010162:	bf00      	nop
 8010164:	08011a9c 	.word	0x08011a9c
 8010168:	08011abc 	.word	0x08011abc
 801016c:	08011a7c 	.word	0x08011a7c
 8010170:	08011924 	.word	0x08011924
 8010174:	0801192e 	.word	0x0801192e
 8010178:	0800dd4d 	.word	0x0800dd4d
 801017c:	0800feff 	.word	0x0800feff
 8010180:	0801192a 	.word	0x0801192a

08010184 <__swbuf_r>:
 8010184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010186:	460e      	mov	r6, r1
 8010188:	4614      	mov	r4, r2
 801018a:	4605      	mov	r5, r0
 801018c:	b118      	cbz	r0, 8010196 <__swbuf_r+0x12>
 801018e:	6983      	ldr	r3, [r0, #24]
 8010190:	b90b      	cbnz	r3, 8010196 <__swbuf_r+0x12>
 8010192:	f000 f9e7 	bl	8010564 <__sinit>
 8010196:	4b21      	ldr	r3, [pc, #132]	; (801021c <__swbuf_r+0x98>)
 8010198:	429c      	cmp	r4, r3
 801019a:	d12b      	bne.n	80101f4 <__swbuf_r+0x70>
 801019c:	686c      	ldr	r4, [r5, #4]
 801019e:	69a3      	ldr	r3, [r4, #24]
 80101a0:	60a3      	str	r3, [r4, #8]
 80101a2:	89a3      	ldrh	r3, [r4, #12]
 80101a4:	071a      	lsls	r2, r3, #28
 80101a6:	d52f      	bpl.n	8010208 <__swbuf_r+0x84>
 80101a8:	6923      	ldr	r3, [r4, #16]
 80101aa:	b36b      	cbz	r3, 8010208 <__swbuf_r+0x84>
 80101ac:	6923      	ldr	r3, [r4, #16]
 80101ae:	6820      	ldr	r0, [r4, #0]
 80101b0:	b2f6      	uxtb	r6, r6
 80101b2:	1ac0      	subs	r0, r0, r3
 80101b4:	6963      	ldr	r3, [r4, #20]
 80101b6:	4637      	mov	r7, r6
 80101b8:	4283      	cmp	r3, r0
 80101ba:	dc04      	bgt.n	80101c6 <__swbuf_r+0x42>
 80101bc:	4621      	mov	r1, r4
 80101be:	4628      	mov	r0, r5
 80101c0:	f000 f93c 	bl	801043c <_fflush_r>
 80101c4:	bb30      	cbnz	r0, 8010214 <__swbuf_r+0x90>
 80101c6:	68a3      	ldr	r3, [r4, #8]
 80101c8:	3001      	adds	r0, #1
 80101ca:	3b01      	subs	r3, #1
 80101cc:	60a3      	str	r3, [r4, #8]
 80101ce:	6823      	ldr	r3, [r4, #0]
 80101d0:	1c5a      	adds	r2, r3, #1
 80101d2:	6022      	str	r2, [r4, #0]
 80101d4:	701e      	strb	r6, [r3, #0]
 80101d6:	6963      	ldr	r3, [r4, #20]
 80101d8:	4283      	cmp	r3, r0
 80101da:	d004      	beq.n	80101e6 <__swbuf_r+0x62>
 80101dc:	89a3      	ldrh	r3, [r4, #12]
 80101de:	07db      	lsls	r3, r3, #31
 80101e0:	d506      	bpl.n	80101f0 <__swbuf_r+0x6c>
 80101e2:	2e0a      	cmp	r6, #10
 80101e4:	d104      	bne.n	80101f0 <__swbuf_r+0x6c>
 80101e6:	4621      	mov	r1, r4
 80101e8:	4628      	mov	r0, r5
 80101ea:	f000 f927 	bl	801043c <_fflush_r>
 80101ee:	b988      	cbnz	r0, 8010214 <__swbuf_r+0x90>
 80101f0:	4638      	mov	r0, r7
 80101f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80101f4:	4b0a      	ldr	r3, [pc, #40]	; (8010220 <__swbuf_r+0x9c>)
 80101f6:	429c      	cmp	r4, r3
 80101f8:	d101      	bne.n	80101fe <__swbuf_r+0x7a>
 80101fa:	68ac      	ldr	r4, [r5, #8]
 80101fc:	e7cf      	b.n	801019e <__swbuf_r+0x1a>
 80101fe:	4b09      	ldr	r3, [pc, #36]	; (8010224 <__swbuf_r+0xa0>)
 8010200:	429c      	cmp	r4, r3
 8010202:	bf08      	it	eq
 8010204:	68ec      	ldreq	r4, [r5, #12]
 8010206:	e7ca      	b.n	801019e <__swbuf_r+0x1a>
 8010208:	4621      	mov	r1, r4
 801020a:	4628      	mov	r0, r5
 801020c:	f000 f81a 	bl	8010244 <__swsetup_r>
 8010210:	2800      	cmp	r0, #0
 8010212:	d0cb      	beq.n	80101ac <__swbuf_r+0x28>
 8010214:	f04f 37ff 	mov.w	r7, #4294967295
 8010218:	e7ea      	b.n	80101f0 <__swbuf_r+0x6c>
 801021a:	bf00      	nop
 801021c:	08011a9c 	.word	0x08011a9c
 8010220:	08011abc 	.word	0x08011abc
 8010224:	08011a7c 	.word	0x08011a7c

08010228 <__ascii_wctomb>:
 8010228:	4603      	mov	r3, r0
 801022a:	4608      	mov	r0, r1
 801022c:	b141      	cbz	r1, 8010240 <__ascii_wctomb+0x18>
 801022e:	2aff      	cmp	r2, #255	; 0xff
 8010230:	d904      	bls.n	801023c <__ascii_wctomb+0x14>
 8010232:	228a      	movs	r2, #138	; 0x8a
 8010234:	f04f 30ff 	mov.w	r0, #4294967295
 8010238:	601a      	str	r2, [r3, #0]
 801023a:	4770      	bx	lr
 801023c:	2001      	movs	r0, #1
 801023e:	700a      	strb	r2, [r1, #0]
 8010240:	4770      	bx	lr
	...

08010244 <__swsetup_r>:
 8010244:	4b32      	ldr	r3, [pc, #200]	; (8010310 <__swsetup_r+0xcc>)
 8010246:	b570      	push	{r4, r5, r6, lr}
 8010248:	681d      	ldr	r5, [r3, #0]
 801024a:	4606      	mov	r6, r0
 801024c:	460c      	mov	r4, r1
 801024e:	b125      	cbz	r5, 801025a <__swsetup_r+0x16>
 8010250:	69ab      	ldr	r3, [r5, #24]
 8010252:	b913      	cbnz	r3, 801025a <__swsetup_r+0x16>
 8010254:	4628      	mov	r0, r5
 8010256:	f000 f985 	bl	8010564 <__sinit>
 801025a:	4b2e      	ldr	r3, [pc, #184]	; (8010314 <__swsetup_r+0xd0>)
 801025c:	429c      	cmp	r4, r3
 801025e:	d10f      	bne.n	8010280 <__swsetup_r+0x3c>
 8010260:	686c      	ldr	r4, [r5, #4]
 8010262:	89a3      	ldrh	r3, [r4, #12]
 8010264:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010268:	0719      	lsls	r1, r3, #28
 801026a:	d42c      	bmi.n	80102c6 <__swsetup_r+0x82>
 801026c:	06dd      	lsls	r5, r3, #27
 801026e:	d411      	bmi.n	8010294 <__swsetup_r+0x50>
 8010270:	2309      	movs	r3, #9
 8010272:	6033      	str	r3, [r6, #0]
 8010274:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010278:	f04f 30ff 	mov.w	r0, #4294967295
 801027c:	81a3      	strh	r3, [r4, #12]
 801027e:	e03e      	b.n	80102fe <__swsetup_r+0xba>
 8010280:	4b25      	ldr	r3, [pc, #148]	; (8010318 <__swsetup_r+0xd4>)
 8010282:	429c      	cmp	r4, r3
 8010284:	d101      	bne.n	801028a <__swsetup_r+0x46>
 8010286:	68ac      	ldr	r4, [r5, #8]
 8010288:	e7eb      	b.n	8010262 <__swsetup_r+0x1e>
 801028a:	4b24      	ldr	r3, [pc, #144]	; (801031c <__swsetup_r+0xd8>)
 801028c:	429c      	cmp	r4, r3
 801028e:	bf08      	it	eq
 8010290:	68ec      	ldreq	r4, [r5, #12]
 8010292:	e7e6      	b.n	8010262 <__swsetup_r+0x1e>
 8010294:	0758      	lsls	r0, r3, #29
 8010296:	d512      	bpl.n	80102be <__swsetup_r+0x7a>
 8010298:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801029a:	b141      	cbz	r1, 80102ae <__swsetup_r+0x6a>
 801029c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80102a0:	4299      	cmp	r1, r3
 80102a2:	d002      	beq.n	80102aa <__swsetup_r+0x66>
 80102a4:	4630      	mov	r0, r6
 80102a6:	f7ff fb75 	bl	800f994 <_free_r>
 80102aa:	2300      	movs	r3, #0
 80102ac:	6363      	str	r3, [r4, #52]	; 0x34
 80102ae:	89a3      	ldrh	r3, [r4, #12]
 80102b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80102b4:	81a3      	strh	r3, [r4, #12]
 80102b6:	2300      	movs	r3, #0
 80102b8:	6063      	str	r3, [r4, #4]
 80102ba:	6923      	ldr	r3, [r4, #16]
 80102bc:	6023      	str	r3, [r4, #0]
 80102be:	89a3      	ldrh	r3, [r4, #12]
 80102c0:	f043 0308 	orr.w	r3, r3, #8
 80102c4:	81a3      	strh	r3, [r4, #12]
 80102c6:	6923      	ldr	r3, [r4, #16]
 80102c8:	b94b      	cbnz	r3, 80102de <__swsetup_r+0x9a>
 80102ca:	89a3      	ldrh	r3, [r4, #12]
 80102cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80102d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80102d4:	d003      	beq.n	80102de <__swsetup_r+0x9a>
 80102d6:	4621      	mov	r1, r4
 80102d8:	4630      	mov	r0, r6
 80102da:	f000 fa07 	bl	80106ec <__smakebuf_r>
 80102de:	89a0      	ldrh	r0, [r4, #12]
 80102e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80102e4:	f010 0301 	ands.w	r3, r0, #1
 80102e8:	d00a      	beq.n	8010300 <__swsetup_r+0xbc>
 80102ea:	2300      	movs	r3, #0
 80102ec:	60a3      	str	r3, [r4, #8]
 80102ee:	6963      	ldr	r3, [r4, #20]
 80102f0:	425b      	negs	r3, r3
 80102f2:	61a3      	str	r3, [r4, #24]
 80102f4:	6923      	ldr	r3, [r4, #16]
 80102f6:	b943      	cbnz	r3, 801030a <__swsetup_r+0xc6>
 80102f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80102fc:	d1ba      	bne.n	8010274 <__swsetup_r+0x30>
 80102fe:	bd70      	pop	{r4, r5, r6, pc}
 8010300:	0781      	lsls	r1, r0, #30
 8010302:	bf58      	it	pl
 8010304:	6963      	ldrpl	r3, [r4, #20]
 8010306:	60a3      	str	r3, [r4, #8]
 8010308:	e7f4      	b.n	80102f4 <__swsetup_r+0xb0>
 801030a:	2000      	movs	r0, #0
 801030c:	e7f7      	b.n	80102fe <__swsetup_r+0xba>
 801030e:	bf00      	nop
 8010310:	20000014 	.word	0x20000014
 8010314:	08011a9c 	.word	0x08011a9c
 8010318:	08011abc 	.word	0x08011abc
 801031c:	08011a7c 	.word	0x08011a7c

08010320 <abort>:
 8010320:	2006      	movs	r0, #6
 8010322:	b508      	push	{r3, lr}
 8010324:	f000 fa52 	bl	80107cc <raise>
 8010328:	2001      	movs	r0, #1
 801032a:	f7f1 ffac 	bl	8002286 <_exit>
	...

08010330 <__sflush_r>:
 8010330:	898a      	ldrh	r2, [r1, #12]
 8010332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010336:	4605      	mov	r5, r0
 8010338:	0710      	lsls	r0, r2, #28
 801033a:	460c      	mov	r4, r1
 801033c:	d458      	bmi.n	80103f0 <__sflush_r+0xc0>
 801033e:	684b      	ldr	r3, [r1, #4]
 8010340:	2b00      	cmp	r3, #0
 8010342:	dc05      	bgt.n	8010350 <__sflush_r+0x20>
 8010344:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010346:	2b00      	cmp	r3, #0
 8010348:	dc02      	bgt.n	8010350 <__sflush_r+0x20>
 801034a:	2000      	movs	r0, #0
 801034c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010350:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010352:	2e00      	cmp	r6, #0
 8010354:	d0f9      	beq.n	801034a <__sflush_r+0x1a>
 8010356:	2300      	movs	r3, #0
 8010358:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801035c:	682f      	ldr	r7, [r5, #0]
 801035e:	602b      	str	r3, [r5, #0]
 8010360:	d032      	beq.n	80103c8 <__sflush_r+0x98>
 8010362:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010364:	89a3      	ldrh	r3, [r4, #12]
 8010366:	075a      	lsls	r2, r3, #29
 8010368:	d505      	bpl.n	8010376 <__sflush_r+0x46>
 801036a:	6863      	ldr	r3, [r4, #4]
 801036c:	1ac0      	subs	r0, r0, r3
 801036e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010370:	b10b      	cbz	r3, 8010376 <__sflush_r+0x46>
 8010372:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010374:	1ac0      	subs	r0, r0, r3
 8010376:	2300      	movs	r3, #0
 8010378:	4602      	mov	r2, r0
 801037a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801037c:	4628      	mov	r0, r5
 801037e:	6a21      	ldr	r1, [r4, #32]
 8010380:	47b0      	blx	r6
 8010382:	1c43      	adds	r3, r0, #1
 8010384:	89a3      	ldrh	r3, [r4, #12]
 8010386:	d106      	bne.n	8010396 <__sflush_r+0x66>
 8010388:	6829      	ldr	r1, [r5, #0]
 801038a:	291d      	cmp	r1, #29
 801038c:	d82c      	bhi.n	80103e8 <__sflush_r+0xb8>
 801038e:	4a2a      	ldr	r2, [pc, #168]	; (8010438 <__sflush_r+0x108>)
 8010390:	40ca      	lsrs	r2, r1
 8010392:	07d6      	lsls	r6, r2, #31
 8010394:	d528      	bpl.n	80103e8 <__sflush_r+0xb8>
 8010396:	2200      	movs	r2, #0
 8010398:	6062      	str	r2, [r4, #4]
 801039a:	6922      	ldr	r2, [r4, #16]
 801039c:	04d9      	lsls	r1, r3, #19
 801039e:	6022      	str	r2, [r4, #0]
 80103a0:	d504      	bpl.n	80103ac <__sflush_r+0x7c>
 80103a2:	1c42      	adds	r2, r0, #1
 80103a4:	d101      	bne.n	80103aa <__sflush_r+0x7a>
 80103a6:	682b      	ldr	r3, [r5, #0]
 80103a8:	b903      	cbnz	r3, 80103ac <__sflush_r+0x7c>
 80103aa:	6560      	str	r0, [r4, #84]	; 0x54
 80103ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80103ae:	602f      	str	r7, [r5, #0]
 80103b0:	2900      	cmp	r1, #0
 80103b2:	d0ca      	beq.n	801034a <__sflush_r+0x1a>
 80103b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80103b8:	4299      	cmp	r1, r3
 80103ba:	d002      	beq.n	80103c2 <__sflush_r+0x92>
 80103bc:	4628      	mov	r0, r5
 80103be:	f7ff fae9 	bl	800f994 <_free_r>
 80103c2:	2000      	movs	r0, #0
 80103c4:	6360      	str	r0, [r4, #52]	; 0x34
 80103c6:	e7c1      	b.n	801034c <__sflush_r+0x1c>
 80103c8:	6a21      	ldr	r1, [r4, #32]
 80103ca:	2301      	movs	r3, #1
 80103cc:	4628      	mov	r0, r5
 80103ce:	47b0      	blx	r6
 80103d0:	1c41      	adds	r1, r0, #1
 80103d2:	d1c7      	bne.n	8010364 <__sflush_r+0x34>
 80103d4:	682b      	ldr	r3, [r5, #0]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d0c4      	beq.n	8010364 <__sflush_r+0x34>
 80103da:	2b1d      	cmp	r3, #29
 80103dc:	d001      	beq.n	80103e2 <__sflush_r+0xb2>
 80103de:	2b16      	cmp	r3, #22
 80103e0:	d101      	bne.n	80103e6 <__sflush_r+0xb6>
 80103e2:	602f      	str	r7, [r5, #0]
 80103e4:	e7b1      	b.n	801034a <__sflush_r+0x1a>
 80103e6:	89a3      	ldrh	r3, [r4, #12]
 80103e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80103ec:	81a3      	strh	r3, [r4, #12]
 80103ee:	e7ad      	b.n	801034c <__sflush_r+0x1c>
 80103f0:	690f      	ldr	r7, [r1, #16]
 80103f2:	2f00      	cmp	r7, #0
 80103f4:	d0a9      	beq.n	801034a <__sflush_r+0x1a>
 80103f6:	0793      	lsls	r3, r2, #30
 80103f8:	bf18      	it	ne
 80103fa:	2300      	movne	r3, #0
 80103fc:	680e      	ldr	r6, [r1, #0]
 80103fe:	bf08      	it	eq
 8010400:	694b      	ldreq	r3, [r1, #20]
 8010402:	eba6 0807 	sub.w	r8, r6, r7
 8010406:	600f      	str	r7, [r1, #0]
 8010408:	608b      	str	r3, [r1, #8]
 801040a:	f1b8 0f00 	cmp.w	r8, #0
 801040e:	dd9c      	ble.n	801034a <__sflush_r+0x1a>
 8010410:	4643      	mov	r3, r8
 8010412:	463a      	mov	r2, r7
 8010414:	4628      	mov	r0, r5
 8010416:	6a21      	ldr	r1, [r4, #32]
 8010418:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801041a:	47b0      	blx	r6
 801041c:	2800      	cmp	r0, #0
 801041e:	dc06      	bgt.n	801042e <__sflush_r+0xfe>
 8010420:	89a3      	ldrh	r3, [r4, #12]
 8010422:	f04f 30ff 	mov.w	r0, #4294967295
 8010426:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801042a:	81a3      	strh	r3, [r4, #12]
 801042c:	e78e      	b.n	801034c <__sflush_r+0x1c>
 801042e:	4407      	add	r7, r0
 8010430:	eba8 0800 	sub.w	r8, r8, r0
 8010434:	e7e9      	b.n	801040a <__sflush_r+0xda>
 8010436:	bf00      	nop
 8010438:	20400001 	.word	0x20400001

0801043c <_fflush_r>:
 801043c:	b538      	push	{r3, r4, r5, lr}
 801043e:	690b      	ldr	r3, [r1, #16]
 8010440:	4605      	mov	r5, r0
 8010442:	460c      	mov	r4, r1
 8010444:	b913      	cbnz	r3, 801044c <_fflush_r+0x10>
 8010446:	2500      	movs	r5, #0
 8010448:	4628      	mov	r0, r5
 801044a:	bd38      	pop	{r3, r4, r5, pc}
 801044c:	b118      	cbz	r0, 8010456 <_fflush_r+0x1a>
 801044e:	6983      	ldr	r3, [r0, #24]
 8010450:	b90b      	cbnz	r3, 8010456 <_fflush_r+0x1a>
 8010452:	f000 f887 	bl	8010564 <__sinit>
 8010456:	4b14      	ldr	r3, [pc, #80]	; (80104a8 <_fflush_r+0x6c>)
 8010458:	429c      	cmp	r4, r3
 801045a:	d11b      	bne.n	8010494 <_fflush_r+0x58>
 801045c:	686c      	ldr	r4, [r5, #4]
 801045e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d0ef      	beq.n	8010446 <_fflush_r+0xa>
 8010466:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010468:	07d0      	lsls	r0, r2, #31
 801046a:	d404      	bmi.n	8010476 <_fflush_r+0x3a>
 801046c:	0599      	lsls	r1, r3, #22
 801046e:	d402      	bmi.n	8010476 <_fflush_r+0x3a>
 8010470:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010472:	f000 f915 	bl	80106a0 <__retarget_lock_acquire_recursive>
 8010476:	4628      	mov	r0, r5
 8010478:	4621      	mov	r1, r4
 801047a:	f7ff ff59 	bl	8010330 <__sflush_r>
 801047e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010480:	4605      	mov	r5, r0
 8010482:	07da      	lsls	r2, r3, #31
 8010484:	d4e0      	bmi.n	8010448 <_fflush_r+0xc>
 8010486:	89a3      	ldrh	r3, [r4, #12]
 8010488:	059b      	lsls	r3, r3, #22
 801048a:	d4dd      	bmi.n	8010448 <_fflush_r+0xc>
 801048c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801048e:	f000 f908 	bl	80106a2 <__retarget_lock_release_recursive>
 8010492:	e7d9      	b.n	8010448 <_fflush_r+0xc>
 8010494:	4b05      	ldr	r3, [pc, #20]	; (80104ac <_fflush_r+0x70>)
 8010496:	429c      	cmp	r4, r3
 8010498:	d101      	bne.n	801049e <_fflush_r+0x62>
 801049a:	68ac      	ldr	r4, [r5, #8]
 801049c:	e7df      	b.n	801045e <_fflush_r+0x22>
 801049e:	4b04      	ldr	r3, [pc, #16]	; (80104b0 <_fflush_r+0x74>)
 80104a0:	429c      	cmp	r4, r3
 80104a2:	bf08      	it	eq
 80104a4:	68ec      	ldreq	r4, [r5, #12]
 80104a6:	e7da      	b.n	801045e <_fflush_r+0x22>
 80104a8:	08011a9c 	.word	0x08011a9c
 80104ac:	08011abc 	.word	0x08011abc
 80104b0:	08011a7c 	.word	0x08011a7c

080104b4 <std>:
 80104b4:	2300      	movs	r3, #0
 80104b6:	b510      	push	{r4, lr}
 80104b8:	4604      	mov	r4, r0
 80104ba:	e9c0 3300 	strd	r3, r3, [r0]
 80104be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80104c2:	6083      	str	r3, [r0, #8]
 80104c4:	8181      	strh	r1, [r0, #12]
 80104c6:	6643      	str	r3, [r0, #100]	; 0x64
 80104c8:	81c2      	strh	r2, [r0, #14]
 80104ca:	6183      	str	r3, [r0, #24]
 80104cc:	4619      	mov	r1, r3
 80104ce:	2208      	movs	r2, #8
 80104d0:	305c      	adds	r0, #92	; 0x5c
 80104d2:	f7fd fb95 	bl	800dc00 <memset>
 80104d6:	4b05      	ldr	r3, [pc, #20]	; (80104ec <std+0x38>)
 80104d8:	6224      	str	r4, [r4, #32]
 80104da:	6263      	str	r3, [r4, #36]	; 0x24
 80104dc:	4b04      	ldr	r3, [pc, #16]	; (80104f0 <std+0x3c>)
 80104de:	62a3      	str	r3, [r4, #40]	; 0x28
 80104e0:	4b04      	ldr	r3, [pc, #16]	; (80104f4 <std+0x40>)
 80104e2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80104e4:	4b04      	ldr	r3, [pc, #16]	; (80104f8 <std+0x44>)
 80104e6:	6323      	str	r3, [r4, #48]	; 0x30
 80104e8:	bd10      	pop	{r4, pc}
 80104ea:	bf00      	nop
 80104ec:	08010805 	.word	0x08010805
 80104f0:	08010827 	.word	0x08010827
 80104f4:	0801085f 	.word	0x0801085f
 80104f8:	08010883 	.word	0x08010883

080104fc <_cleanup_r>:
 80104fc:	4901      	ldr	r1, [pc, #4]	; (8010504 <_cleanup_r+0x8>)
 80104fe:	f000 b8af 	b.w	8010660 <_fwalk_reent>
 8010502:	bf00      	nop
 8010504:	0801043d 	.word	0x0801043d

08010508 <__sfmoreglue>:
 8010508:	b570      	push	{r4, r5, r6, lr}
 801050a:	2568      	movs	r5, #104	; 0x68
 801050c:	1e4a      	subs	r2, r1, #1
 801050e:	4355      	muls	r5, r2
 8010510:	460e      	mov	r6, r1
 8010512:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010516:	f7ff fa89 	bl	800fa2c <_malloc_r>
 801051a:	4604      	mov	r4, r0
 801051c:	b140      	cbz	r0, 8010530 <__sfmoreglue+0x28>
 801051e:	2100      	movs	r1, #0
 8010520:	e9c0 1600 	strd	r1, r6, [r0]
 8010524:	300c      	adds	r0, #12
 8010526:	60a0      	str	r0, [r4, #8]
 8010528:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801052c:	f7fd fb68 	bl	800dc00 <memset>
 8010530:	4620      	mov	r0, r4
 8010532:	bd70      	pop	{r4, r5, r6, pc}

08010534 <__sfp_lock_acquire>:
 8010534:	4801      	ldr	r0, [pc, #4]	; (801053c <__sfp_lock_acquire+0x8>)
 8010536:	f000 b8b3 	b.w	80106a0 <__retarget_lock_acquire_recursive>
 801053a:	bf00      	nop
 801053c:	200005cc 	.word	0x200005cc

08010540 <__sfp_lock_release>:
 8010540:	4801      	ldr	r0, [pc, #4]	; (8010548 <__sfp_lock_release+0x8>)
 8010542:	f000 b8ae 	b.w	80106a2 <__retarget_lock_release_recursive>
 8010546:	bf00      	nop
 8010548:	200005cc 	.word	0x200005cc

0801054c <__sinit_lock_acquire>:
 801054c:	4801      	ldr	r0, [pc, #4]	; (8010554 <__sinit_lock_acquire+0x8>)
 801054e:	f000 b8a7 	b.w	80106a0 <__retarget_lock_acquire_recursive>
 8010552:	bf00      	nop
 8010554:	200005c7 	.word	0x200005c7

08010558 <__sinit_lock_release>:
 8010558:	4801      	ldr	r0, [pc, #4]	; (8010560 <__sinit_lock_release+0x8>)
 801055a:	f000 b8a2 	b.w	80106a2 <__retarget_lock_release_recursive>
 801055e:	bf00      	nop
 8010560:	200005c7 	.word	0x200005c7

08010564 <__sinit>:
 8010564:	b510      	push	{r4, lr}
 8010566:	4604      	mov	r4, r0
 8010568:	f7ff fff0 	bl	801054c <__sinit_lock_acquire>
 801056c:	69a3      	ldr	r3, [r4, #24]
 801056e:	b11b      	cbz	r3, 8010578 <__sinit+0x14>
 8010570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010574:	f7ff bff0 	b.w	8010558 <__sinit_lock_release>
 8010578:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801057c:	6523      	str	r3, [r4, #80]	; 0x50
 801057e:	4b13      	ldr	r3, [pc, #76]	; (80105cc <__sinit+0x68>)
 8010580:	4a13      	ldr	r2, [pc, #76]	; (80105d0 <__sinit+0x6c>)
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	62a2      	str	r2, [r4, #40]	; 0x28
 8010586:	42a3      	cmp	r3, r4
 8010588:	bf08      	it	eq
 801058a:	2301      	moveq	r3, #1
 801058c:	4620      	mov	r0, r4
 801058e:	bf08      	it	eq
 8010590:	61a3      	streq	r3, [r4, #24]
 8010592:	f000 f81f 	bl	80105d4 <__sfp>
 8010596:	6060      	str	r0, [r4, #4]
 8010598:	4620      	mov	r0, r4
 801059a:	f000 f81b 	bl	80105d4 <__sfp>
 801059e:	60a0      	str	r0, [r4, #8]
 80105a0:	4620      	mov	r0, r4
 80105a2:	f000 f817 	bl	80105d4 <__sfp>
 80105a6:	2200      	movs	r2, #0
 80105a8:	2104      	movs	r1, #4
 80105aa:	60e0      	str	r0, [r4, #12]
 80105ac:	6860      	ldr	r0, [r4, #4]
 80105ae:	f7ff ff81 	bl	80104b4 <std>
 80105b2:	2201      	movs	r2, #1
 80105b4:	2109      	movs	r1, #9
 80105b6:	68a0      	ldr	r0, [r4, #8]
 80105b8:	f7ff ff7c 	bl	80104b4 <std>
 80105bc:	2202      	movs	r2, #2
 80105be:	2112      	movs	r1, #18
 80105c0:	68e0      	ldr	r0, [r4, #12]
 80105c2:	f7ff ff77 	bl	80104b4 <std>
 80105c6:	2301      	movs	r3, #1
 80105c8:	61a3      	str	r3, [r4, #24]
 80105ca:	e7d1      	b.n	8010570 <__sinit+0xc>
 80105cc:	080116fc 	.word	0x080116fc
 80105d0:	080104fd 	.word	0x080104fd

080105d4 <__sfp>:
 80105d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105d6:	4607      	mov	r7, r0
 80105d8:	f7ff ffac 	bl	8010534 <__sfp_lock_acquire>
 80105dc:	4b1e      	ldr	r3, [pc, #120]	; (8010658 <__sfp+0x84>)
 80105de:	681e      	ldr	r6, [r3, #0]
 80105e0:	69b3      	ldr	r3, [r6, #24]
 80105e2:	b913      	cbnz	r3, 80105ea <__sfp+0x16>
 80105e4:	4630      	mov	r0, r6
 80105e6:	f7ff ffbd 	bl	8010564 <__sinit>
 80105ea:	3648      	adds	r6, #72	; 0x48
 80105ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80105f0:	3b01      	subs	r3, #1
 80105f2:	d503      	bpl.n	80105fc <__sfp+0x28>
 80105f4:	6833      	ldr	r3, [r6, #0]
 80105f6:	b30b      	cbz	r3, 801063c <__sfp+0x68>
 80105f8:	6836      	ldr	r6, [r6, #0]
 80105fa:	e7f7      	b.n	80105ec <__sfp+0x18>
 80105fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010600:	b9d5      	cbnz	r5, 8010638 <__sfp+0x64>
 8010602:	4b16      	ldr	r3, [pc, #88]	; (801065c <__sfp+0x88>)
 8010604:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010608:	60e3      	str	r3, [r4, #12]
 801060a:	6665      	str	r5, [r4, #100]	; 0x64
 801060c:	f000 f847 	bl	801069e <__retarget_lock_init_recursive>
 8010610:	f7ff ff96 	bl	8010540 <__sfp_lock_release>
 8010614:	2208      	movs	r2, #8
 8010616:	4629      	mov	r1, r5
 8010618:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801061c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010620:	6025      	str	r5, [r4, #0]
 8010622:	61a5      	str	r5, [r4, #24]
 8010624:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010628:	f7fd faea 	bl	800dc00 <memset>
 801062c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010630:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010634:	4620      	mov	r0, r4
 8010636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010638:	3468      	adds	r4, #104	; 0x68
 801063a:	e7d9      	b.n	80105f0 <__sfp+0x1c>
 801063c:	2104      	movs	r1, #4
 801063e:	4638      	mov	r0, r7
 8010640:	f7ff ff62 	bl	8010508 <__sfmoreglue>
 8010644:	4604      	mov	r4, r0
 8010646:	6030      	str	r0, [r6, #0]
 8010648:	2800      	cmp	r0, #0
 801064a:	d1d5      	bne.n	80105f8 <__sfp+0x24>
 801064c:	f7ff ff78 	bl	8010540 <__sfp_lock_release>
 8010650:	230c      	movs	r3, #12
 8010652:	603b      	str	r3, [r7, #0]
 8010654:	e7ee      	b.n	8010634 <__sfp+0x60>
 8010656:	bf00      	nop
 8010658:	080116fc 	.word	0x080116fc
 801065c:	ffff0001 	.word	0xffff0001

08010660 <_fwalk_reent>:
 8010660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010664:	4606      	mov	r6, r0
 8010666:	4688      	mov	r8, r1
 8010668:	2700      	movs	r7, #0
 801066a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801066e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010672:	f1b9 0901 	subs.w	r9, r9, #1
 8010676:	d505      	bpl.n	8010684 <_fwalk_reent+0x24>
 8010678:	6824      	ldr	r4, [r4, #0]
 801067a:	2c00      	cmp	r4, #0
 801067c:	d1f7      	bne.n	801066e <_fwalk_reent+0xe>
 801067e:	4638      	mov	r0, r7
 8010680:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010684:	89ab      	ldrh	r3, [r5, #12]
 8010686:	2b01      	cmp	r3, #1
 8010688:	d907      	bls.n	801069a <_fwalk_reent+0x3a>
 801068a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801068e:	3301      	adds	r3, #1
 8010690:	d003      	beq.n	801069a <_fwalk_reent+0x3a>
 8010692:	4629      	mov	r1, r5
 8010694:	4630      	mov	r0, r6
 8010696:	47c0      	blx	r8
 8010698:	4307      	orrs	r7, r0
 801069a:	3568      	adds	r5, #104	; 0x68
 801069c:	e7e9      	b.n	8010672 <_fwalk_reent+0x12>

0801069e <__retarget_lock_init_recursive>:
 801069e:	4770      	bx	lr

080106a0 <__retarget_lock_acquire_recursive>:
 80106a0:	4770      	bx	lr

080106a2 <__retarget_lock_release_recursive>:
 80106a2:	4770      	bx	lr

080106a4 <__swhatbuf_r>:
 80106a4:	b570      	push	{r4, r5, r6, lr}
 80106a6:	460e      	mov	r6, r1
 80106a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106ac:	4614      	mov	r4, r2
 80106ae:	2900      	cmp	r1, #0
 80106b0:	461d      	mov	r5, r3
 80106b2:	b096      	sub	sp, #88	; 0x58
 80106b4:	da07      	bge.n	80106c6 <__swhatbuf_r+0x22>
 80106b6:	2300      	movs	r3, #0
 80106b8:	602b      	str	r3, [r5, #0]
 80106ba:	89b3      	ldrh	r3, [r6, #12]
 80106bc:	061a      	lsls	r2, r3, #24
 80106be:	d410      	bmi.n	80106e2 <__swhatbuf_r+0x3e>
 80106c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80106c4:	e00e      	b.n	80106e4 <__swhatbuf_r+0x40>
 80106c6:	466a      	mov	r2, sp
 80106c8:	f000 f902 	bl	80108d0 <_fstat_r>
 80106cc:	2800      	cmp	r0, #0
 80106ce:	dbf2      	blt.n	80106b6 <__swhatbuf_r+0x12>
 80106d0:	9a01      	ldr	r2, [sp, #4]
 80106d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80106d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80106da:	425a      	negs	r2, r3
 80106dc:	415a      	adcs	r2, r3
 80106de:	602a      	str	r2, [r5, #0]
 80106e0:	e7ee      	b.n	80106c0 <__swhatbuf_r+0x1c>
 80106e2:	2340      	movs	r3, #64	; 0x40
 80106e4:	2000      	movs	r0, #0
 80106e6:	6023      	str	r3, [r4, #0]
 80106e8:	b016      	add	sp, #88	; 0x58
 80106ea:	bd70      	pop	{r4, r5, r6, pc}

080106ec <__smakebuf_r>:
 80106ec:	898b      	ldrh	r3, [r1, #12]
 80106ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80106f0:	079d      	lsls	r5, r3, #30
 80106f2:	4606      	mov	r6, r0
 80106f4:	460c      	mov	r4, r1
 80106f6:	d507      	bpl.n	8010708 <__smakebuf_r+0x1c>
 80106f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80106fc:	6023      	str	r3, [r4, #0]
 80106fe:	6123      	str	r3, [r4, #16]
 8010700:	2301      	movs	r3, #1
 8010702:	6163      	str	r3, [r4, #20]
 8010704:	b002      	add	sp, #8
 8010706:	bd70      	pop	{r4, r5, r6, pc}
 8010708:	466a      	mov	r2, sp
 801070a:	ab01      	add	r3, sp, #4
 801070c:	f7ff ffca 	bl	80106a4 <__swhatbuf_r>
 8010710:	9900      	ldr	r1, [sp, #0]
 8010712:	4605      	mov	r5, r0
 8010714:	4630      	mov	r0, r6
 8010716:	f7ff f989 	bl	800fa2c <_malloc_r>
 801071a:	b948      	cbnz	r0, 8010730 <__smakebuf_r+0x44>
 801071c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010720:	059a      	lsls	r2, r3, #22
 8010722:	d4ef      	bmi.n	8010704 <__smakebuf_r+0x18>
 8010724:	f023 0303 	bic.w	r3, r3, #3
 8010728:	f043 0302 	orr.w	r3, r3, #2
 801072c:	81a3      	strh	r3, [r4, #12]
 801072e:	e7e3      	b.n	80106f8 <__smakebuf_r+0xc>
 8010730:	4b0d      	ldr	r3, [pc, #52]	; (8010768 <__smakebuf_r+0x7c>)
 8010732:	62b3      	str	r3, [r6, #40]	; 0x28
 8010734:	89a3      	ldrh	r3, [r4, #12]
 8010736:	6020      	str	r0, [r4, #0]
 8010738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801073c:	81a3      	strh	r3, [r4, #12]
 801073e:	9b00      	ldr	r3, [sp, #0]
 8010740:	6120      	str	r0, [r4, #16]
 8010742:	6163      	str	r3, [r4, #20]
 8010744:	9b01      	ldr	r3, [sp, #4]
 8010746:	b15b      	cbz	r3, 8010760 <__smakebuf_r+0x74>
 8010748:	4630      	mov	r0, r6
 801074a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801074e:	f000 f8d1 	bl	80108f4 <_isatty_r>
 8010752:	b128      	cbz	r0, 8010760 <__smakebuf_r+0x74>
 8010754:	89a3      	ldrh	r3, [r4, #12]
 8010756:	f023 0303 	bic.w	r3, r3, #3
 801075a:	f043 0301 	orr.w	r3, r3, #1
 801075e:	81a3      	strh	r3, [r4, #12]
 8010760:	89a0      	ldrh	r0, [r4, #12]
 8010762:	4305      	orrs	r5, r0
 8010764:	81a5      	strh	r5, [r4, #12]
 8010766:	e7cd      	b.n	8010704 <__smakebuf_r+0x18>
 8010768:	080104fd 	.word	0x080104fd

0801076c <_malloc_usable_size_r>:
 801076c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010770:	1f18      	subs	r0, r3, #4
 8010772:	2b00      	cmp	r3, #0
 8010774:	bfbc      	itt	lt
 8010776:	580b      	ldrlt	r3, [r1, r0]
 8010778:	18c0      	addlt	r0, r0, r3
 801077a:	4770      	bx	lr

0801077c <_raise_r>:
 801077c:	291f      	cmp	r1, #31
 801077e:	b538      	push	{r3, r4, r5, lr}
 8010780:	4604      	mov	r4, r0
 8010782:	460d      	mov	r5, r1
 8010784:	d904      	bls.n	8010790 <_raise_r+0x14>
 8010786:	2316      	movs	r3, #22
 8010788:	6003      	str	r3, [r0, #0]
 801078a:	f04f 30ff 	mov.w	r0, #4294967295
 801078e:	bd38      	pop	{r3, r4, r5, pc}
 8010790:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010792:	b112      	cbz	r2, 801079a <_raise_r+0x1e>
 8010794:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010798:	b94b      	cbnz	r3, 80107ae <_raise_r+0x32>
 801079a:	4620      	mov	r0, r4
 801079c:	f000 f830 	bl	8010800 <_getpid_r>
 80107a0:	462a      	mov	r2, r5
 80107a2:	4601      	mov	r1, r0
 80107a4:	4620      	mov	r0, r4
 80107a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80107aa:	f000 b817 	b.w	80107dc <_kill_r>
 80107ae:	2b01      	cmp	r3, #1
 80107b0:	d00a      	beq.n	80107c8 <_raise_r+0x4c>
 80107b2:	1c59      	adds	r1, r3, #1
 80107b4:	d103      	bne.n	80107be <_raise_r+0x42>
 80107b6:	2316      	movs	r3, #22
 80107b8:	6003      	str	r3, [r0, #0]
 80107ba:	2001      	movs	r0, #1
 80107bc:	e7e7      	b.n	801078e <_raise_r+0x12>
 80107be:	2400      	movs	r4, #0
 80107c0:	4628      	mov	r0, r5
 80107c2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80107c6:	4798      	blx	r3
 80107c8:	2000      	movs	r0, #0
 80107ca:	e7e0      	b.n	801078e <_raise_r+0x12>

080107cc <raise>:
 80107cc:	4b02      	ldr	r3, [pc, #8]	; (80107d8 <raise+0xc>)
 80107ce:	4601      	mov	r1, r0
 80107d0:	6818      	ldr	r0, [r3, #0]
 80107d2:	f7ff bfd3 	b.w	801077c <_raise_r>
 80107d6:	bf00      	nop
 80107d8:	20000014 	.word	0x20000014

080107dc <_kill_r>:
 80107dc:	b538      	push	{r3, r4, r5, lr}
 80107de:	2300      	movs	r3, #0
 80107e0:	4d06      	ldr	r5, [pc, #24]	; (80107fc <_kill_r+0x20>)
 80107e2:	4604      	mov	r4, r0
 80107e4:	4608      	mov	r0, r1
 80107e6:	4611      	mov	r1, r2
 80107e8:	602b      	str	r3, [r5, #0]
 80107ea:	f7f1 fd3c 	bl	8002266 <_kill>
 80107ee:	1c43      	adds	r3, r0, #1
 80107f0:	d102      	bne.n	80107f8 <_kill_r+0x1c>
 80107f2:	682b      	ldr	r3, [r5, #0]
 80107f4:	b103      	cbz	r3, 80107f8 <_kill_r+0x1c>
 80107f6:	6023      	str	r3, [r4, #0]
 80107f8:	bd38      	pop	{r3, r4, r5, pc}
 80107fa:	bf00      	nop
 80107fc:	200005c0 	.word	0x200005c0

08010800 <_getpid_r>:
 8010800:	f7f1 bd2a 	b.w	8002258 <_getpid>

08010804 <__sread>:
 8010804:	b510      	push	{r4, lr}
 8010806:	460c      	mov	r4, r1
 8010808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801080c:	f000 f894 	bl	8010938 <_read_r>
 8010810:	2800      	cmp	r0, #0
 8010812:	bfab      	itete	ge
 8010814:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010816:	89a3      	ldrhlt	r3, [r4, #12]
 8010818:	181b      	addge	r3, r3, r0
 801081a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801081e:	bfac      	ite	ge
 8010820:	6563      	strge	r3, [r4, #84]	; 0x54
 8010822:	81a3      	strhlt	r3, [r4, #12]
 8010824:	bd10      	pop	{r4, pc}

08010826 <__swrite>:
 8010826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801082a:	461f      	mov	r7, r3
 801082c:	898b      	ldrh	r3, [r1, #12]
 801082e:	4605      	mov	r5, r0
 8010830:	05db      	lsls	r3, r3, #23
 8010832:	460c      	mov	r4, r1
 8010834:	4616      	mov	r6, r2
 8010836:	d505      	bpl.n	8010844 <__swrite+0x1e>
 8010838:	2302      	movs	r3, #2
 801083a:	2200      	movs	r2, #0
 801083c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010840:	f000 f868 	bl	8010914 <_lseek_r>
 8010844:	89a3      	ldrh	r3, [r4, #12]
 8010846:	4632      	mov	r2, r6
 8010848:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801084c:	81a3      	strh	r3, [r4, #12]
 801084e:	4628      	mov	r0, r5
 8010850:	463b      	mov	r3, r7
 8010852:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010856:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801085a:	f000 b817 	b.w	801088c <_write_r>

0801085e <__sseek>:
 801085e:	b510      	push	{r4, lr}
 8010860:	460c      	mov	r4, r1
 8010862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010866:	f000 f855 	bl	8010914 <_lseek_r>
 801086a:	1c43      	adds	r3, r0, #1
 801086c:	89a3      	ldrh	r3, [r4, #12]
 801086e:	bf15      	itete	ne
 8010870:	6560      	strne	r0, [r4, #84]	; 0x54
 8010872:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010876:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801087a:	81a3      	strheq	r3, [r4, #12]
 801087c:	bf18      	it	ne
 801087e:	81a3      	strhne	r3, [r4, #12]
 8010880:	bd10      	pop	{r4, pc}

08010882 <__sclose>:
 8010882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010886:	f000 b813 	b.w	80108b0 <_close_r>
	...

0801088c <_write_r>:
 801088c:	b538      	push	{r3, r4, r5, lr}
 801088e:	4604      	mov	r4, r0
 8010890:	4608      	mov	r0, r1
 8010892:	4611      	mov	r1, r2
 8010894:	2200      	movs	r2, #0
 8010896:	4d05      	ldr	r5, [pc, #20]	; (80108ac <_write_r+0x20>)
 8010898:	602a      	str	r2, [r5, #0]
 801089a:	461a      	mov	r2, r3
 801089c:	f7f1 fd1a 	bl	80022d4 <_write>
 80108a0:	1c43      	adds	r3, r0, #1
 80108a2:	d102      	bne.n	80108aa <_write_r+0x1e>
 80108a4:	682b      	ldr	r3, [r5, #0]
 80108a6:	b103      	cbz	r3, 80108aa <_write_r+0x1e>
 80108a8:	6023      	str	r3, [r4, #0]
 80108aa:	bd38      	pop	{r3, r4, r5, pc}
 80108ac:	200005c0 	.word	0x200005c0

080108b0 <_close_r>:
 80108b0:	b538      	push	{r3, r4, r5, lr}
 80108b2:	2300      	movs	r3, #0
 80108b4:	4d05      	ldr	r5, [pc, #20]	; (80108cc <_close_r+0x1c>)
 80108b6:	4604      	mov	r4, r0
 80108b8:	4608      	mov	r0, r1
 80108ba:	602b      	str	r3, [r5, #0]
 80108bc:	f7f1 fd26 	bl	800230c <_close>
 80108c0:	1c43      	adds	r3, r0, #1
 80108c2:	d102      	bne.n	80108ca <_close_r+0x1a>
 80108c4:	682b      	ldr	r3, [r5, #0]
 80108c6:	b103      	cbz	r3, 80108ca <_close_r+0x1a>
 80108c8:	6023      	str	r3, [r4, #0]
 80108ca:	bd38      	pop	{r3, r4, r5, pc}
 80108cc:	200005c0 	.word	0x200005c0

080108d0 <_fstat_r>:
 80108d0:	b538      	push	{r3, r4, r5, lr}
 80108d2:	2300      	movs	r3, #0
 80108d4:	4d06      	ldr	r5, [pc, #24]	; (80108f0 <_fstat_r+0x20>)
 80108d6:	4604      	mov	r4, r0
 80108d8:	4608      	mov	r0, r1
 80108da:	4611      	mov	r1, r2
 80108dc:	602b      	str	r3, [r5, #0]
 80108de:	f7f1 fd20 	bl	8002322 <_fstat>
 80108e2:	1c43      	adds	r3, r0, #1
 80108e4:	d102      	bne.n	80108ec <_fstat_r+0x1c>
 80108e6:	682b      	ldr	r3, [r5, #0]
 80108e8:	b103      	cbz	r3, 80108ec <_fstat_r+0x1c>
 80108ea:	6023      	str	r3, [r4, #0]
 80108ec:	bd38      	pop	{r3, r4, r5, pc}
 80108ee:	bf00      	nop
 80108f0:	200005c0 	.word	0x200005c0

080108f4 <_isatty_r>:
 80108f4:	b538      	push	{r3, r4, r5, lr}
 80108f6:	2300      	movs	r3, #0
 80108f8:	4d05      	ldr	r5, [pc, #20]	; (8010910 <_isatty_r+0x1c>)
 80108fa:	4604      	mov	r4, r0
 80108fc:	4608      	mov	r0, r1
 80108fe:	602b      	str	r3, [r5, #0]
 8010900:	f7f1 fd1e 	bl	8002340 <_isatty>
 8010904:	1c43      	adds	r3, r0, #1
 8010906:	d102      	bne.n	801090e <_isatty_r+0x1a>
 8010908:	682b      	ldr	r3, [r5, #0]
 801090a:	b103      	cbz	r3, 801090e <_isatty_r+0x1a>
 801090c:	6023      	str	r3, [r4, #0]
 801090e:	bd38      	pop	{r3, r4, r5, pc}
 8010910:	200005c0 	.word	0x200005c0

08010914 <_lseek_r>:
 8010914:	b538      	push	{r3, r4, r5, lr}
 8010916:	4604      	mov	r4, r0
 8010918:	4608      	mov	r0, r1
 801091a:	4611      	mov	r1, r2
 801091c:	2200      	movs	r2, #0
 801091e:	4d05      	ldr	r5, [pc, #20]	; (8010934 <_lseek_r+0x20>)
 8010920:	602a      	str	r2, [r5, #0]
 8010922:	461a      	mov	r2, r3
 8010924:	f7f1 fd16 	bl	8002354 <_lseek>
 8010928:	1c43      	adds	r3, r0, #1
 801092a:	d102      	bne.n	8010932 <_lseek_r+0x1e>
 801092c:	682b      	ldr	r3, [r5, #0]
 801092e:	b103      	cbz	r3, 8010932 <_lseek_r+0x1e>
 8010930:	6023      	str	r3, [r4, #0]
 8010932:	bd38      	pop	{r3, r4, r5, pc}
 8010934:	200005c0 	.word	0x200005c0

08010938 <_read_r>:
 8010938:	b538      	push	{r3, r4, r5, lr}
 801093a:	4604      	mov	r4, r0
 801093c:	4608      	mov	r0, r1
 801093e:	4611      	mov	r1, r2
 8010940:	2200      	movs	r2, #0
 8010942:	4d05      	ldr	r5, [pc, #20]	; (8010958 <_read_r+0x20>)
 8010944:	602a      	str	r2, [r5, #0]
 8010946:	461a      	mov	r2, r3
 8010948:	f7f1 fca7 	bl	800229a <_read>
 801094c:	1c43      	adds	r3, r0, #1
 801094e:	d102      	bne.n	8010956 <_read_r+0x1e>
 8010950:	682b      	ldr	r3, [r5, #0]
 8010952:	b103      	cbz	r3, 8010956 <_read_r+0x1e>
 8010954:	6023      	str	r3, [r4, #0]
 8010956:	bd38      	pop	{r3, r4, r5, pc}
 8010958:	200005c0 	.word	0x200005c0

0801095c <floorf>:
 801095c:	b570      	push	{r4, r5, r6, lr}
 801095e:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8010962:	3d7f      	subs	r5, #127	; 0x7f
 8010964:	2d16      	cmp	r5, #22
 8010966:	4601      	mov	r1, r0
 8010968:	4604      	mov	r4, r0
 801096a:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 801096e:	dc26      	bgt.n	80109be <floorf+0x62>
 8010970:	2d00      	cmp	r5, #0
 8010972:	da0e      	bge.n	8010992 <floorf+0x36>
 8010974:	4917      	ldr	r1, [pc, #92]	; (80109d4 <floorf+0x78>)
 8010976:	f7f0 f93d 	bl	8000bf4 <__addsf3>
 801097a:	2100      	movs	r1, #0
 801097c:	f7f0 fbfe 	bl	800117c <__aeabi_fcmpgt>
 8010980:	b128      	cbz	r0, 801098e <floorf+0x32>
 8010982:	2c00      	cmp	r4, #0
 8010984:	da23      	bge.n	80109ce <floorf+0x72>
 8010986:	4b14      	ldr	r3, [pc, #80]	; (80109d8 <floorf+0x7c>)
 8010988:	2e00      	cmp	r6, #0
 801098a:	bf18      	it	ne
 801098c:	461c      	movne	r4, r3
 801098e:	4621      	mov	r1, r4
 8010990:	e01b      	b.n	80109ca <floorf+0x6e>
 8010992:	4e12      	ldr	r6, [pc, #72]	; (80109dc <floorf+0x80>)
 8010994:	412e      	asrs	r6, r5
 8010996:	4230      	tst	r0, r6
 8010998:	d017      	beq.n	80109ca <floorf+0x6e>
 801099a:	490e      	ldr	r1, [pc, #56]	; (80109d4 <floorf+0x78>)
 801099c:	f7f0 f92a 	bl	8000bf4 <__addsf3>
 80109a0:	2100      	movs	r1, #0
 80109a2:	f7f0 fbeb 	bl	800117c <__aeabi_fcmpgt>
 80109a6:	2800      	cmp	r0, #0
 80109a8:	d0f1      	beq.n	801098e <floorf+0x32>
 80109aa:	2c00      	cmp	r4, #0
 80109ac:	bfbe      	ittt	lt
 80109ae:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 80109b2:	fa43 f505 	asrlt.w	r5, r3, r5
 80109b6:	1964      	addlt	r4, r4, r5
 80109b8:	ea24 0406 	bic.w	r4, r4, r6
 80109bc:	e7e7      	b.n	801098e <floorf+0x32>
 80109be:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 80109c2:	d302      	bcc.n	80109ca <floorf+0x6e>
 80109c4:	f7f0 f916 	bl	8000bf4 <__addsf3>
 80109c8:	4601      	mov	r1, r0
 80109ca:	4608      	mov	r0, r1
 80109cc:	bd70      	pop	{r4, r5, r6, pc}
 80109ce:	2400      	movs	r4, #0
 80109d0:	e7dd      	b.n	801098e <floorf+0x32>
 80109d2:	bf00      	nop
 80109d4:	7149f2ca 	.word	0x7149f2ca
 80109d8:	bf800000 	.word	0xbf800000
 80109dc:	007fffff 	.word	0x007fffff

080109e0 <roundf>:
 80109e0:	b508      	push	{r3, lr}
 80109e2:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80109e6:	3b7f      	subs	r3, #127	; 0x7f
 80109e8:	2b16      	cmp	r3, #22
 80109ea:	4601      	mov	r1, r0
 80109ec:	4602      	mov	r2, r0
 80109ee:	dc14      	bgt.n	8010a1a <roundf+0x3a>
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	da07      	bge.n	8010a04 <roundf+0x24>
 80109f4:	3301      	adds	r3, #1
 80109f6:	f000 4100 	and.w	r1, r0, #2147483648	; 0x80000000
 80109fa:	d101      	bne.n	8010a00 <roundf+0x20>
 80109fc:	f041 517e 	orr.w	r1, r1, #1065353216	; 0x3f800000
 8010a00:	4608      	mov	r0, r1
 8010a02:	bd08      	pop	{r3, pc}
 8010a04:	4808      	ldr	r0, [pc, #32]	; (8010a28 <roundf+0x48>)
 8010a06:	4118      	asrs	r0, r3
 8010a08:	4201      	tst	r1, r0
 8010a0a:	d0f9      	beq.n	8010a00 <roundf+0x20>
 8010a0c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010a10:	4119      	asrs	r1, r3
 8010a12:	4411      	add	r1, r2
 8010a14:	ea21 0100 	bic.w	r1, r1, r0
 8010a18:	e7f2      	b.n	8010a00 <roundf+0x20>
 8010a1a:	2b80      	cmp	r3, #128	; 0x80
 8010a1c:	d1f0      	bne.n	8010a00 <roundf+0x20>
 8010a1e:	f7f0 f8e9 	bl	8000bf4 <__addsf3>
 8010a22:	4601      	mov	r1, r0
 8010a24:	e7ec      	b.n	8010a00 <roundf+0x20>
 8010a26:	bf00      	nop
 8010a28:	007fffff 	.word	0x007fffff

08010a2c <logf>:
 8010a2c:	b538      	push	{r3, r4, r5, lr}
 8010a2e:	4604      	mov	r4, r0
 8010a30:	f000 f8b0 	bl	8010b94 <__ieee754_logf>
 8010a34:	4b12      	ldr	r3, [pc, #72]	; (8010a80 <logf+0x54>)
 8010a36:	4605      	mov	r5, r0
 8010a38:	f993 3000 	ldrsb.w	r3, [r3]
 8010a3c:	3301      	adds	r3, #1
 8010a3e:	d013      	beq.n	8010a68 <logf+0x3c>
 8010a40:	4621      	mov	r1, r4
 8010a42:	4620      	mov	r0, r4
 8010a44:	f7f0 fba4 	bl	8001190 <__aeabi_fcmpun>
 8010a48:	b970      	cbnz	r0, 8010a68 <logf+0x3c>
 8010a4a:	2100      	movs	r1, #0
 8010a4c:	4620      	mov	r0, r4
 8010a4e:	f7f0 fb95 	bl	800117c <__aeabi_fcmpgt>
 8010a52:	b948      	cbnz	r0, 8010a68 <logf+0x3c>
 8010a54:	2100      	movs	r1, #0
 8010a56:	4620      	mov	r0, r4
 8010a58:	f7f0 fb68 	bl	800112c <__aeabi_fcmpeq>
 8010a5c:	b130      	cbz	r0, 8010a6c <logf+0x40>
 8010a5e:	f7fd f8a5 	bl	800dbac <__errno>
 8010a62:	2322      	movs	r3, #34	; 0x22
 8010a64:	4d07      	ldr	r5, [pc, #28]	; (8010a84 <logf+0x58>)
 8010a66:	6003      	str	r3, [r0, #0]
 8010a68:	4628      	mov	r0, r5
 8010a6a:	bd38      	pop	{r3, r4, r5, pc}
 8010a6c:	f7fd f89e 	bl	800dbac <__errno>
 8010a70:	2321      	movs	r3, #33	; 0x21
 8010a72:	6003      	str	r3, [r0, #0]
 8010a74:	4804      	ldr	r0, [pc, #16]	; (8010a88 <logf+0x5c>)
 8010a76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a7a:	f000 bd5f 	b.w	801153c <nanf>
 8010a7e:	bf00      	nop
 8010a80:	200001e4 	.word	0x200001e4
 8010a84:	ff800000 	.word	0xff800000
 8010a88:	08011970 	.word	0x08011970

08010a8c <powf>:
 8010a8c:	b570      	push	{r4, r5, r6, lr}
 8010a8e:	4606      	mov	r6, r0
 8010a90:	460d      	mov	r5, r1
 8010a92:	f000 f9a3 	bl	8010ddc <__ieee754_powf>
 8010a96:	4b3d      	ldr	r3, [pc, #244]	; (8010b8c <powf+0x100>)
 8010a98:	4604      	mov	r4, r0
 8010a9a:	f993 3000 	ldrsb.w	r3, [r3]
 8010a9e:	3301      	adds	r3, #1
 8010aa0:	d00f      	beq.n	8010ac2 <powf+0x36>
 8010aa2:	4629      	mov	r1, r5
 8010aa4:	4628      	mov	r0, r5
 8010aa6:	f7f0 fb73 	bl	8001190 <__aeabi_fcmpun>
 8010aaa:	b950      	cbnz	r0, 8010ac2 <powf+0x36>
 8010aac:	4631      	mov	r1, r6
 8010aae:	4630      	mov	r0, r6
 8010ab0:	f7f0 fb6e 	bl	8001190 <__aeabi_fcmpun>
 8010ab4:	2100      	movs	r1, #0
 8010ab6:	b130      	cbz	r0, 8010ac6 <powf+0x3a>
 8010ab8:	4628      	mov	r0, r5
 8010aba:	f7f0 fb37 	bl	800112c <__aeabi_fcmpeq>
 8010abe:	2800      	cmp	r0, #0
 8010ac0:	d161      	bne.n	8010b86 <powf+0xfa>
 8010ac2:	4620      	mov	r0, r4
 8010ac4:	bd70      	pop	{r4, r5, r6, pc}
 8010ac6:	4630      	mov	r0, r6
 8010ac8:	f7f0 fb30 	bl	800112c <__aeabi_fcmpeq>
 8010acc:	b1b0      	cbz	r0, 8010afc <powf+0x70>
 8010ace:	2100      	movs	r1, #0
 8010ad0:	4628      	mov	r0, r5
 8010ad2:	f7f0 fb2b 	bl	800112c <__aeabi_fcmpeq>
 8010ad6:	2800      	cmp	r0, #0
 8010ad8:	d155      	bne.n	8010b86 <powf+0xfa>
 8010ada:	4628      	mov	r0, r5
 8010adc:	f000 fd26 	bl	801152c <finitef>
 8010ae0:	2800      	cmp	r0, #0
 8010ae2:	d0ee      	beq.n	8010ac2 <powf+0x36>
 8010ae4:	2100      	movs	r1, #0
 8010ae6:	4628      	mov	r0, r5
 8010ae8:	f7f0 fb2a 	bl	8001140 <__aeabi_fcmplt>
 8010aec:	2800      	cmp	r0, #0
 8010aee:	d0e8      	beq.n	8010ac2 <powf+0x36>
 8010af0:	f7fd f85c 	bl	800dbac <__errno>
 8010af4:	2321      	movs	r3, #33	; 0x21
 8010af6:	6003      	str	r3, [r0, #0]
 8010af8:	4c25      	ldr	r4, [pc, #148]	; (8010b90 <powf+0x104>)
 8010afa:	e7e2      	b.n	8010ac2 <powf+0x36>
 8010afc:	4620      	mov	r0, r4
 8010afe:	f000 fd15 	bl	801152c <finitef>
 8010b02:	bb50      	cbnz	r0, 8010b5a <powf+0xce>
 8010b04:	4630      	mov	r0, r6
 8010b06:	f000 fd11 	bl	801152c <finitef>
 8010b0a:	b330      	cbz	r0, 8010b5a <powf+0xce>
 8010b0c:	4628      	mov	r0, r5
 8010b0e:	f000 fd0d 	bl	801152c <finitef>
 8010b12:	b310      	cbz	r0, 8010b5a <powf+0xce>
 8010b14:	4621      	mov	r1, r4
 8010b16:	4620      	mov	r0, r4
 8010b18:	f7f0 fb3a 	bl	8001190 <__aeabi_fcmpun>
 8010b1c:	b148      	cbz	r0, 8010b32 <powf+0xa6>
 8010b1e:	f7fd f845 	bl	800dbac <__errno>
 8010b22:	2321      	movs	r3, #33	; 0x21
 8010b24:	2100      	movs	r1, #0
 8010b26:	6003      	str	r3, [r0, #0]
 8010b28:	4608      	mov	r0, r1
 8010b2a:	f7f0 fa1f 	bl	8000f6c <__aeabi_fdiv>
 8010b2e:	4604      	mov	r4, r0
 8010b30:	e7c7      	b.n	8010ac2 <powf+0x36>
 8010b32:	f7fd f83b 	bl	800dbac <__errno>
 8010b36:	2322      	movs	r3, #34	; 0x22
 8010b38:	2100      	movs	r1, #0
 8010b3a:	6003      	str	r3, [r0, #0]
 8010b3c:	4630      	mov	r0, r6
 8010b3e:	f7f0 faff 	bl	8001140 <__aeabi_fcmplt>
 8010b42:	b138      	cbz	r0, 8010b54 <powf+0xc8>
 8010b44:	4628      	mov	r0, r5
 8010b46:	f000 fcfd 	bl	8011544 <rintf>
 8010b4a:	4629      	mov	r1, r5
 8010b4c:	f7f0 faee 	bl	800112c <__aeabi_fcmpeq>
 8010b50:	2800      	cmp	r0, #0
 8010b52:	d0d1      	beq.n	8010af8 <powf+0x6c>
 8010b54:	f04f 44ff 	mov.w	r4, #2139095040	; 0x7f800000
 8010b58:	e7b3      	b.n	8010ac2 <powf+0x36>
 8010b5a:	2100      	movs	r1, #0
 8010b5c:	4620      	mov	r0, r4
 8010b5e:	f7f0 fae5 	bl	800112c <__aeabi_fcmpeq>
 8010b62:	2800      	cmp	r0, #0
 8010b64:	d0ad      	beq.n	8010ac2 <powf+0x36>
 8010b66:	4630      	mov	r0, r6
 8010b68:	f000 fce0 	bl	801152c <finitef>
 8010b6c:	2800      	cmp	r0, #0
 8010b6e:	d0a8      	beq.n	8010ac2 <powf+0x36>
 8010b70:	4628      	mov	r0, r5
 8010b72:	f000 fcdb 	bl	801152c <finitef>
 8010b76:	2800      	cmp	r0, #0
 8010b78:	d0a3      	beq.n	8010ac2 <powf+0x36>
 8010b7a:	f7fd f817 	bl	800dbac <__errno>
 8010b7e:	2322      	movs	r3, #34	; 0x22
 8010b80:	2400      	movs	r4, #0
 8010b82:	6003      	str	r3, [r0, #0]
 8010b84:	e79d      	b.n	8010ac2 <powf+0x36>
 8010b86:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
 8010b8a:	e79a      	b.n	8010ac2 <powf+0x36>
 8010b8c:	200001e4 	.word	0x200001e4
 8010b90:	ff800000 	.word	0xff800000

08010b94 <__ieee754_logf>:
 8010b94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8010b98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b9c:	4601      	mov	r1, r0
 8010b9e:	4603      	mov	r3, r0
 8010ba0:	d106      	bne.n	8010bb0 <__ieee754_logf+0x1c>
 8010ba2:	2100      	movs	r1, #0
 8010ba4:	f04f 404c 	mov.w	r0, #3422552064	; 0xcc000000
 8010ba8:	f7f0 f9e0 	bl	8000f6c <__aeabi_fdiv>
 8010bac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bb0:	2800      	cmp	r0, #0
 8010bb2:	da03      	bge.n	8010bbc <__ieee754_logf+0x28>
 8010bb4:	f7f0 f81c 	bl	8000bf0 <__aeabi_fsub>
 8010bb8:	2100      	movs	r1, #0
 8010bba:	e7f5      	b.n	8010ba8 <__ieee754_logf+0x14>
 8010bbc:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8010bc0:	db02      	blt.n	8010bc8 <__ieee754_logf+0x34>
 8010bc2:	f7f0 f817 	bl	8000bf4 <__addsf3>
 8010bc6:	e7f1      	b.n	8010bac <__ieee754_logf+0x18>
 8010bc8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8010bcc:	da35      	bge.n	8010c3a <__ieee754_logf+0xa6>
 8010bce:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8010bd2:	f7f0 f917 	bl	8000e04 <__aeabi_fmul>
 8010bd6:	f06f 0218 	mvn.w	r2, #24
 8010bda:	4603      	mov	r3, r0
 8010bdc:	f3c3 0416 	ubfx	r4, r3, #0, #23
 8010be0:	15de      	asrs	r6, r3, #23
 8010be2:	4b71      	ldr	r3, [pc, #452]	; (8010da8 <__ieee754_logf+0x214>)
 8010be4:	3e7f      	subs	r6, #127	; 0x7f
 8010be6:	4423      	add	r3, r4
 8010be8:	f403 0000 	and.w	r0, r3, #8388608	; 0x800000
 8010bec:	f080 507e 	eor.w	r0, r0, #1065353216	; 0x3f800000
 8010bf0:	4416      	add	r6, r2
 8010bf2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8010bf6:	4320      	orrs	r0, r4
 8010bf8:	eb06 56d3 	add.w	r6, r6, r3, lsr #23
 8010bfc:	f7ef fff8 	bl	8000bf0 <__aeabi_fsub>
 8010c00:	4b6a      	ldr	r3, [pc, #424]	; (8010dac <__ieee754_logf+0x218>)
 8010c02:	f104 020f 	add.w	r2, r4, #15
 8010c06:	4013      	ands	r3, r2
 8010c08:	4605      	mov	r5, r0
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d13a      	bne.n	8010c84 <__ieee754_logf+0xf0>
 8010c0e:	2100      	movs	r1, #0
 8010c10:	f7f0 fa8c 	bl	800112c <__aeabi_fcmpeq>
 8010c14:	b198      	cbz	r0, 8010c3e <__ieee754_logf+0xaa>
 8010c16:	2e00      	cmp	r6, #0
 8010c18:	f000 80c4 	beq.w	8010da4 <__ieee754_logf+0x210>
 8010c1c:	4630      	mov	r0, r6
 8010c1e:	f7f0 f89d 	bl	8000d5c <__aeabi_i2f>
 8010c22:	4963      	ldr	r1, [pc, #396]	; (8010db0 <__ieee754_logf+0x21c>)
 8010c24:	4605      	mov	r5, r0
 8010c26:	f7f0 f8ed 	bl	8000e04 <__aeabi_fmul>
 8010c2a:	4962      	ldr	r1, [pc, #392]	; (8010db4 <__ieee754_logf+0x220>)
 8010c2c:	4604      	mov	r4, r0
 8010c2e:	4628      	mov	r0, r5
 8010c30:	f7f0 f8e8 	bl	8000e04 <__aeabi_fmul>
 8010c34:	4601      	mov	r1, r0
 8010c36:	4620      	mov	r0, r4
 8010c38:	e7c3      	b.n	8010bc2 <__ieee754_logf+0x2e>
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	e7ce      	b.n	8010bdc <__ieee754_logf+0x48>
 8010c3e:	495e      	ldr	r1, [pc, #376]	; (8010db8 <__ieee754_logf+0x224>)
 8010c40:	4628      	mov	r0, r5
 8010c42:	f7f0 f8df 	bl	8000e04 <__aeabi_fmul>
 8010c46:	4601      	mov	r1, r0
 8010c48:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8010c4c:	f7ef ffd0 	bl	8000bf0 <__aeabi_fsub>
 8010c50:	4629      	mov	r1, r5
 8010c52:	4604      	mov	r4, r0
 8010c54:	4628      	mov	r0, r5
 8010c56:	f7f0 f8d5 	bl	8000e04 <__aeabi_fmul>
 8010c5a:	4601      	mov	r1, r0
 8010c5c:	4620      	mov	r0, r4
 8010c5e:	f7f0 f8d1 	bl	8000e04 <__aeabi_fmul>
 8010c62:	4604      	mov	r4, r0
 8010c64:	b90e      	cbnz	r6, 8010c6a <__ieee754_logf+0xd6>
 8010c66:	4621      	mov	r1, r4
 8010c68:	e06f      	b.n	8010d4a <__ieee754_logf+0x1b6>
 8010c6a:	4630      	mov	r0, r6
 8010c6c:	f7f0 f876 	bl	8000d5c <__aeabi_i2f>
 8010c70:	494f      	ldr	r1, [pc, #316]	; (8010db0 <__ieee754_logf+0x21c>)
 8010c72:	4607      	mov	r7, r0
 8010c74:	f7f0 f8c6 	bl	8000e04 <__aeabi_fmul>
 8010c78:	4606      	mov	r6, r0
 8010c7a:	4638      	mov	r0, r7
 8010c7c:	494d      	ldr	r1, [pc, #308]	; (8010db4 <__ieee754_logf+0x220>)
 8010c7e:	f7f0 f8c1 	bl	8000e04 <__aeabi_fmul>
 8010c82:	e072      	b.n	8010d6a <__ieee754_logf+0x1d6>
 8010c84:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8010c88:	f7ef ffb4 	bl	8000bf4 <__addsf3>
 8010c8c:	4601      	mov	r1, r0
 8010c8e:	4628      	mov	r0, r5
 8010c90:	f7f0 f96c 	bl	8000f6c <__aeabi_fdiv>
 8010c94:	4681      	mov	r9, r0
 8010c96:	4630      	mov	r0, r6
 8010c98:	f7f0 f860 	bl	8000d5c <__aeabi_i2f>
 8010c9c:	4649      	mov	r1, r9
 8010c9e:	4680      	mov	r8, r0
 8010ca0:	4648      	mov	r0, r9
 8010ca2:	f7f0 f8af 	bl	8000e04 <__aeabi_fmul>
 8010ca6:	4601      	mov	r1, r0
 8010ca8:	4683      	mov	fp, r0
 8010caa:	f7f0 f8ab 	bl	8000e04 <__aeabi_fmul>
 8010cae:	4607      	mov	r7, r0
 8010cb0:	4942      	ldr	r1, [pc, #264]	; (8010dbc <__ieee754_logf+0x228>)
 8010cb2:	f7f0 f8a7 	bl	8000e04 <__aeabi_fmul>
 8010cb6:	4942      	ldr	r1, [pc, #264]	; (8010dc0 <__ieee754_logf+0x22c>)
 8010cb8:	f7ef ff9c 	bl	8000bf4 <__addsf3>
 8010cbc:	4639      	mov	r1, r7
 8010cbe:	f7f0 f8a1 	bl	8000e04 <__aeabi_fmul>
 8010cc2:	4940      	ldr	r1, [pc, #256]	; (8010dc4 <__ieee754_logf+0x230>)
 8010cc4:	f7ef ff96 	bl	8000bf4 <__addsf3>
 8010cc8:	4639      	mov	r1, r7
 8010cca:	f7f0 f89b 	bl	8000e04 <__aeabi_fmul>
 8010cce:	493e      	ldr	r1, [pc, #248]	; (8010dc8 <__ieee754_logf+0x234>)
 8010cd0:	f7ef ff90 	bl	8000bf4 <__addsf3>
 8010cd4:	4659      	mov	r1, fp
 8010cd6:	f7f0 f895 	bl	8000e04 <__aeabi_fmul>
 8010cda:	493c      	ldr	r1, [pc, #240]	; (8010dcc <__ieee754_logf+0x238>)
 8010cdc:	4683      	mov	fp, r0
 8010cde:	4638      	mov	r0, r7
 8010ce0:	f7f0 f890 	bl	8000e04 <__aeabi_fmul>
 8010ce4:	493a      	ldr	r1, [pc, #232]	; (8010dd0 <__ieee754_logf+0x23c>)
 8010ce6:	f7ef ff85 	bl	8000bf4 <__addsf3>
 8010cea:	4639      	mov	r1, r7
 8010cec:	f7f0 f88a 	bl	8000e04 <__aeabi_fmul>
 8010cf0:	4938      	ldr	r1, [pc, #224]	; (8010dd4 <__ieee754_logf+0x240>)
 8010cf2:	f7ef ff7f 	bl	8000bf4 <__addsf3>
 8010cf6:	4639      	mov	r1, r7
 8010cf8:	f7f0 f884 	bl	8000e04 <__aeabi_fmul>
 8010cfc:	4601      	mov	r1, r0
 8010cfe:	4658      	mov	r0, fp
 8010d00:	f7ef ff78 	bl	8000bf4 <__addsf3>
 8010d04:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8010dd8 <__ieee754_logf+0x244>
 8010d08:	f5c4 1357 	rsb	r3, r4, #3522560	; 0x35c000
 8010d0c:	44a2      	add	sl, r4
 8010d0e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8010d12:	ea43 030a 	orr.w	r3, r3, sl
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	4607      	mov	r7, r0
 8010d1a:	dd30      	ble.n	8010d7e <__ieee754_logf+0x1ea>
 8010d1c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8010d20:	4628      	mov	r0, r5
 8010d22:	f7f0 f86f 	bl	8000e04 <__aeabi_fmul>
 8010d26:	4629      	mov	r1, r5
 8010d28:	f7f0 f86c 	bl	8000e04 <__aeabi_fmul>
 8010d2c:	4601      	mov	r1, r0
 8010d2e:	4604      	mov	r4, r0
 8010d30:	4638      	mov	r0, r7
 8010d32:	f7ef ff5f 	bl	8000bf4 <__addsf3>
 8010d36:	4649      	mov	r1, r9
 8010d38:	f7f0 f864 	bl	8000e04 <__aeabi_fmul>
 8010d3c:	4607      	mov	r7, r0
 8010d3e:	b946      	cbnz	r6, 8010d52 <__ieee754_logf+0x1be>
 8010d40:	4601      	mov	r1, r0
 8010d42:	4620      	mov	r0, r4
 8010d44:	f7ef ff54 	bl	8000bf0 <__aeabi_fsub>
 8010d48:	4601      	mov	r1, r0
 8010d4a:	4628      	mov	r0, r5
 8010d4c:	f7ef ff50 	bl	8000bf0 <__aeabi_fsub>
 8010d50:	e72c      	b.n	8010bac <__ieee754_logf+0x18>
 8010d52:	4917      	ldr	r1, [pc, #92]	; (8010db0 <__ieee754_logf+0x21c>)
 8010d54:	4640      	mov	r0, r8
 8010d56:	f7f0 f855 	bl	8000e04 <__aeabi_fmul>
 8010d5a:	4916      	ldr	r1, [pc, #88]	; (8010db4 <__ieee754_logf+0x220>)
 8010d5c:	4606      	mov	r6, r0
 8010d5e:	4640      	mov	r0, r8
 8010d60:	f7f0 f850 	bl	8000e04 <__aeabi_fmul>
 8010d64:	4639      	mov	r1, r7
 8010d66:	f7ef ff45 	bl	8000bf4 <__addsf3>
 8010d6a:	4601      	mov	r1, r0
 8010d6c:	4620      	mov	r0, r4
 8010d6e:	f7ef ff3f 	bl	8000bf0 <__aeabi_fsub>
 8010d72:	4629      	mov	r1, r5
 8010d74:	f7ef ff3c 	bl	8000bf0 <__aeabi_fsub>
 8010d78:	4601      	mov	r1, r0
 8010d7a:	4630      	mov	r0, r6
 8010d7c:	e7e6      	b.n	8010d4c <__ieee754_logf+0x1b8>
 8010d7e:	4601      	mov	r1, r0
 8010d80:	4628      	mov	r0, r5
 8010d82:	f7ef ff35 	bl	8000bf0 <__aeabi_fsub>
 8010d86:	4649      	mov	r1, r9
 8010d88:	f7f0 f83c 	bl	8000e04 <__aeabi_fmul>
 8010d8c:	4604      	mov	r4, r0
 8010d8e:	2e00      	cmp	r6, #0
 8010d90:	f43f af69 	beq.w	8010c66 <__ieee754_logf+0xd2>
 8010d94:	4906      	ldr	r1, [pc, #24]	; (8010db0 <__ieee754_logf+0x21c>)
 8010d96:	4640      	mov	r0, r8
 8010d98:	f7f0 f834 	bl	8000e04 <__aeabi_fmul>
 8010d9c:	4905      	ldr	r1, [pc, #20]	; (8010db4 <__ieee754_logf+0x220>)
 8010d9e:	4606      	mov	r6, r0
 8010da0:	4640      	mov	r0, r8
 8010da2:	e76c      	b.n	8010c7e <__ieee754_logf+0xea>
 8010da4:	2000      	movs	r0, #0
 8010da6:	e701      	b.n	8010bac <__ieee754_logf+0x18>
 8010da8:	004afb20 	.word	0x004afb20
 8010dac:	007ffff0 	.word	0x007ffff0
 8010db0:	3f317180 	.word	0x3f317180
 8010db4:	3717f7d1 	.word	0x3717f7d1
 8010db8:	3eaaaaab 	.word	0x3eaaaaab
 8010dbc:	3e178897 	.word	0x3e178897
 8010dc0:	3e3a3325 	.word	0x3e3a3325
 8010dc4:	3e924925 	.word	0x3e924925
 8010dc8:	3f2aaaab 	.word	0x3f2aaaab
 8010dcc:	3e1cd04f 	.word	0x3e1cd04f
 8010dd0:	3e638e29 	.word	0x3e638e29
 8010dd4:	3ecccccd 	.word	0x3ecccccd
 8010dd8:	ffcf5c30 	.word	0xffcf5c30

08010ddc <__ieee754_powf>:
 8010ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010de0:	f031 4800 	bics.w	r8, r1, #2147483648	; 0x80000000
 8010de4:	4682      	mov	sl, r0
 8010de6:	460f      	mov	r7, r1
 8010de8:	460c      	mov	r4, r1
 8010dea:	b087      	sub	sp, #28
 8010dec:	f000 832a 	beq.w	8011444 <__ieee754_powf+0x668>
 8010df0:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8010df4:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8010df8:	4681      	mov	r9, r0
 8010dfa:	dc06      	bgt.n	8010e0a <__ieee754_powf+0x2e>
 8010dfc:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8010e00:	dd09      	ble.n	8010e16 <__ieee754_powf+0x3a>
 8010e02:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8010e06:	f000 831d 	beq.w	8011444 <__ieee754_powf+0x668>
 8010e0a:	4884      	ldr	r0, [pc, #528]	; (801101c <__ieee754_powf+0x240>)
 8010e0c:	b007      	add	sp, #28
 8010e0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e12:	f000 bb93 	b.w	801153c <nanf>
 8010e16:	2800      	cmp	r0, #0
 8010e18:	da20      	bge.n	8010e5c <__ieee754_powf+0x80>
 8010e1a:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8010e1e:	da2e      	bge.n	8010e7e <__ieee754_powf+0xa2>
 8010e20:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8010e24:	f2c0 8313 	blt.w	801144e <__ieee754_powf+0x672>
 8010e28:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8010e2c:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8010e30:	fa48 f503 	asr.w	r5, r8, r3
 8010e34:	fa05 f303 	lsl.w	r3, r5, r3
 8010e38:	4543      	cmp	r3, r8
 8010e3a:	f040 8308 	bne.w	801144e <__ieee754_powf+0x672>
 8010e3e:	f005 0501 	and.w	r5, r5, #1
 8010e42:	f1c5 0502 	rsb	r5, r5, #2
 8010e46:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8010e4a:	d11f      	bne.n	8010e8c <__ieee754_powf+0xb0>
 8010e4c:	2c00      	cmp	r4, #0
 8010e4e:	4651      	mov	r1, sl
 8010e50:	da11      	bge.n	8010e76 <__ieee754_powf+0x9a>
 8010e52:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8010e56:	f7f0 f889 	bl	8000f6c <__aeabi_fdiv>
 8010e5a:	e01e      	b.n	8010e9a <__ieee754_powf+0xbe>
 8010e5c:	2500      	movs	r5, #0
 8010e5e:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8010e62:	d1f0      	bne.n	8010e46 <__ieee754_powf+0x6a>
 8010e64:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8010e68:	f000 82ec 	beq.w	8011444 <__ieee754_powf+0x668>
 8010e6c:	dd09      	ble.n	8010e82 <__ieee754_powf+0xa6>
 8010e6e:	2c00      	cmp	r4, #0
 8010e70:	f280 82eb 	bge.w	801144a <__ieee754_powf+0x66e>
 8010e74:	2100      	movs	r1, #0
 8010e76:	4608      	mov	r0, r1
 8010e78:	b007      	add	sp, #28
 8010e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e7e:	2502      	movs	r5, #2
 8010e80:	e7ed      	b.n	8010e5e <__ieee754_powf+0x82>
 8010e82:	2c00      	cmp	r4, #0
 8010e84:	daf6      	bge.n	8010e74 <__ieee754_powf+0x98>
 8010e86:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 8010e8a:	e7f4      	b.n	8010e76 <__ieee754_powf+0x9a>
 8010e8c:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8010e90:	d105      	bne.n	8010e9e <__ieee754_powf+0xc2>
 8010e92:	4651      	mov	r1, sl
 8010e94:	4608      	mov	r0, r1
 8010e96:	f7ef ffb5 	bl	8000e04 <__aeabi_fmul>
 8010e9a:	4601      	mov	r1, r0
 8010e9c:	e7eb      	b.n	8010e76 <__ieee754_powf+0x9a>
 8010e9e:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8010ea2:	4650      	mov	r0, sl
 8010ea4:	d107      	bne.n	8010eb6 <__ieee754_powf+0xda>
 8010ea6:	f1b9 0f00 	cmp.w	r9, #0
 8010eaa:	db04      	blt.n	8010eb6 <__ieee754_powf+0xda>
 8010eac:	b007      	add	sp, #28
 8010eae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010eb2:	f000 bae7 	b.w	8011484 <__ieee754_sqrtf>
 8010eb6:	f000 fb36 	bl	8011526 <fabsf>
 8010eba:	4601      	mov	r1, r0
 8010ebc:	b126      	cbz	r6, 8010ec8 <__ieee754_powf+0xec>
 8010ebe:	f029 4340 	bic.w	r3, r9, #3221225472	; 0xc0000000
 8010ec2:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8010ec6:	d118      	bne.n	8010efa <__ieee754_powf+0x11e>
 8010ec8:	2c00      	cmp	r4, #0
 8010eca:	da04      	bge.n	8010ed6 <__ieee754_powf+0xfa>
 8010ecc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8010ed0:	f7f0 f84c 	bl	8000f6c <__aeabi_fdiv>
 8010ed4:	4601      	mov	r1, r0
 8010ed6:	f1b9 0f00 	cmp.w	r9, #0
 8010eda:	dacc      	bge.n	8010e76 <__ieee754_powf+0x9a>
 8010edc:	f1a6 567e 	sub.w	r6, r6, #1065353216	; 0x3f800000
 8010ee0:	ea56 0305 	orrs.w	r3, r6, r5
 8010ee4:	d104      	bne.n	8010ef0 <__ieee754_powf+0x114>
 8010ee6:	4608      	mov	r0, r1
 8010ee8:	f7ef fe82 	bl	8000bf0 <__aeabi_fsub>
 8010eec:	4601      	mov	r1, r0
 8010eee:	e7b2      	b.n	8010e56 <__ieee754_powf+0x7a>
 8010ef0:	2d01      	cmp	r5, #1
 8010ef2:	d1c0      	bne.n	8010e76 <__ieee754_powf+0x9a>
 8010ef4:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
 8010ef8:	e7cf      	b.n	8010e9a <__ieee754_powf+0xbe>
 8010efa:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 8010efe:	3b01      	subs	r3, #1
 8010f00:	9302      	str	r3, [sp, #8]
 8010f02:	432b      	orrs	r3, r5
 8010f04:	d101      	bne.n	8010f0a <__ieee754_powf+0x12e>
 8010f06:	4651      	mov	r1, sl
 8010f08:	e7ed      	b.n	8010ee6 <__ieee754_powf+0x10a>
 8010f0a:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8010f0e:	f340 8097 	ble.w	8011040 <__ieee754_powf+0x264>
 8010f12:	4b43      	ldr	r3, [pc, #268]	; (8011020 <__ieee754_powf+0x244>)
 8010f14:	429e      	cmp	r6, r3
 8010f16:	dc03      	bgt.n	8010f20 <__ieee754_powf+0x144>
 8010f18:	2c00      	cmp	r4, #0
 8010f1a:	daab      	bge.n	8010e74 <__ieee754_powf+0x98>
 8010f1c:	4941      	ldr	r1, [pc, #260]	; (8011024 <__ieee754_powf+0x248>)
 8010f1e:	e7b9      	b.n	8010e94 <__ieee754_powf+0xb8>
 8010f20:	4b41      	ldr	r3, [pc, #260]	; (8011028 <__ieee754_powf+0x24c>)
 8010f22:	429e      	cmp	r6, r3
 8010f24:	dd02      	ble.n	8010f2c <__ieee754_powf+0x150>
 8010f26:	2c00      	cmp	r4, #0
 8010f28:	dcf8      	bgt.n	8010f1c <__ieee754_powf+0x140>
 8010f2a:	e7a3      	b.n	8010e74 <__ieee754_powf+0x98>
 8010f2c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8010f30:	f7ef fe5e 	bl	8000bf0 <__aeabi_fsub>
 8010f34:	493d      	ldr	r1, [pc, #244]	; (801102c <__ieee754_powf+0x250>)
 8010f36:	4606      	mov	r6, r0
 8010f38:	f7ef ff64 	bl	8000e04 <__aeabi_fmul>
 8010f3c:	493c      	ldr	r1, [pc, #240]	; (8011030 <__ieee754_powf+0x254>)
 8010f3e:	4680      	mov	r8, r0
 8010f40:	4630      	mov	r0, r6
 8010f42:	f7ef ff5f 	bl	8000e04 <__aeabi_fmul>
 8010f46:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 8010f4a:	4681      	mov	r9, r0
 8010f4c:	4630      	mov	r0, r6
 8010f4e:	f7ef ff59 	bl	8000e04 <__aeabi_fmul>
 8010f52:	4601      	mov	r1, r0
 8010f54:	4837      	ldr	r0, [pc, #220]	; (8011034 <__ieee754_powf+0x258>)
 8010f56:	f7ef fe4b 	bl	8000bf0 <__aeabi_fsub>
 8010f5a:	4631      	mov	r1, r6
 8010f5c:	f7ef ff52 	bl	8000e04 <__aeabi_fmul>
 8010f60:	4601      	mov	r1, r0
 8010f62:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8010f66:	f7ef fe43 	bl	8000bf0 <__aeabi_fsub>
 8010f6a:	4631      	mov	r1, r6
 8010f6c:	4682      	mov	sl, r0
 8010f6e:	4630      	mov	r0, r6
 8010f70:	f7ef ff48 	bl	8000e04 <__aeabi_fmul>
 8010f74:	4601      	mov	r1, r0
 8010f76:	4650      	mov	r0, sl
 8010f78:	f7ef ff44 	bl	8000e04 <__aeabi_fmul>
 8010f7c:	492e      	ldr	r1, [pc, #184]	; (8011038 <__ieee754_powf+0x25c>)
 8010f7e:	f7ef ff41 	bl	8000e04 <__aeabi_fmul>
 8010f82:	4601      	mov	r1, r0
 8010f84:	4648      	mov	r0, r9
 8010f86:	f7ef fe33 	bl	8000bf0 <__aeabi_fsub>
 8010f8a:	4601      	mov	r1, r0
 8010f8c:	4606      	mov	r6, r0
 8010f8e:	4640      	mov	r0, r8
 8010f90:	f7ef fe30 	bl	8000bf4 <__addsf3>
 8010f94:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 8010f98:	f029 090f 	bic.w	r9, r9, #15
 8010f9c:	4641      	mov	r1, r8
 8010f9e:	4648      	mov	r0, r9
 8010fa0:	f7ef fe26 	bl	8000bf0 <__aeabi_fsub>
 8010fa4:	4601      	mov	r1, r0
 8010fa6:	4630      	mov	r0, r6
 8010fa8:	f7ef fe22 	bl	8000bf0 <__aeabi_fsub>
 8010fac:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8010fb0:	9b02      	ldr	r3, [sp, #8]
 8010fb2:	3d01      	subs	r5, #1
 8010fb4:	f024 040f 	bic.w	r4, r4, #15
 8010fb8:	432b      	orrs	r3, r5
 8010fba:	4606      	mov	r6, r0
 8010fbc:	4621      	mov	r1, r4
 8010fbe:	4638      	mov	r0, r7
 8010fc0:	bf14      	ite	ne
 8010fc2:	f04f 557e 	movne.w	r5, #1065353216	; 0x3f800000
 8010fc6:	4d1d      	ldreq	r5, [pc, #116]	; (801103c <__ieee754_powf+0x260>)
 8010fc8:	f7ef fe12 	bl	8000bf0 <__aeabi_fsub>
 8010fcc:	4649      	mov	r1, r9
 8010fce:	f7ef ff19 	bl	8000e04 <__aeabi_fmul>
 8010fd2:	4639      	mov	r1, r7
 8010fd4:	4680      	mov	r8, r0
 8010fd6:	4630      	mov	r0, r6
 8010fd8:	f7ef ff14 	bl	8000e04 <__aeabi_fmul>
 8010fdc:	4601      	mov	r1, r0
 8010fde:	4640      	mov	r0, r8
 8010fe0:	f7ef fe08 	bl	8000bf4 <__addsf3>
 8010fe4:	4621      	mov	r1, r4
 8010fe6:	4606      	mov	r6, r0
 8010fe8:	4648      	mov	r0, r9
 8010fea:	f7ef ff0b 	bl	8000e04 <__aeabi_fmul>
 8010fee:	4601      	mov	r1, r0
 8010ff0:	4607      	mov	r7, r0
 8010ff2:	4681      	mov	r9, r0
 8010ff4:	4630      	mov	r0, r6
 8010ff6:	f7ef fdfd 	bl	8000bf4 <__addsf3>
 8010ffa:	2800      	cmp	r0, #0
 8010ffc:	4682      	mov	sl, r0
 8010ffe:	4680      	mov	r8, r0
 8011000:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 8011004:	f340 8202 	ble.w	801140c <__ieee754_powf+0x630>
 8011008:	f1b4 4f86 	cmp.w	r4, #1124073472	; 0x43000000
 801100c:	f340 8150 	ble.w	80112b0 <__ieee754_powf+0x4d4>
 8011010:	4904      	ldr	r1, [pc, #16]	; (8011024 <__ieee754_powf+0x248>)
 8011012:	4628      	mov	r0, r5
 8011014:	f7ef fef6 	bl	8000e04 <__aeabi_fmul>
 8011018:	4902      	ldr	r1, [pc, #8]	; (8011024 <__ieee754_powf+0x248>)
 801101a:	e73c      	b.n	8010e96 <__ieee754_powf+0xba>
 801101c:	08011970 	.word	0x08011970
 8011020:	3f7ffff7 	.word	0x3f7ffff7
 8011024:	7149f2ca 	.word	0x7149f2ca
 8011028:	3f800007 	.word	0x3f800007
 801102c:	3fb8aa00 	.word	0x3fb8aa00
 8011030:	36eca570 	.word	0x36eca570
 8011034:	3eaaaaab 	.word	0x3eaaaaab
 8011038:	3fb8aa3b 	.word	0x3fb8aa3b
 801103c:	bf800000 	.word	0xbf800000
 8011040:	f019 4fff 	tst.w	r9, #2139095040	; 0x7f800000
 8011044:	f040 8111 	bne.w	801126a <__ieee754_powf+0x48e>
 8011048:	f04f 4197 	mov.w	r1, #1266679808	; 0x4b800000
 801104c:	f7ef feda 	bl	8000e04 <__aeabi_fmul>
 8011050:	f06f 0217 	mvn.w	r2, #23
 8011054:	4606      	mov	r6, r0
 8011056:	15f3      	asrs	r3, r6, #23
 8011058:	3b7f      	subs	r3, #127	; 0x7f
 801105a:	4413      	add	r3, r2
 801105c:	9301      	str	r3, [sp, #4]
 801105e:	4b85      	ldr	r3, [pc, #532]	; (8011274 <__ieee754_powf+0x498>)
 8011060:	f3c6 0016 	ubfx	r0, r6, #0, #23
 8011064:	4298      	cmp	r0, r3
 8011066:	f040 567e 	orr.w	r6, r0, #1065353216	; 0x3f800000
 801106a:	dd08      	ble.n	801107e <__ieee754_powf+0x2a2>
 801106c:	4b82      	ldr	r3, [pc, #520]	; (8011278 <__ieee754_powf+0x49c>)
 801106e:	4298      	cmp	r0, r3
 8011070:	f340 80fd 	ble.w	801126e <__ieee754_powf+0x492>
 8011074:	9b01      	ldr	r3, [sp, #4]
 8011076:	f5a6 0600 	sub.w	r6, r6, #8388608	; 0x800000
 801107a:	3301      	adds	r3, #1
 801107c:	9301      	str	r3, [sp, #4]
 801107e:	2300      	movs	r3, #0
 8011080:	9300      	str	r3, [sp, #0]
 8011082:	9900      	ldr	r1, [sp, #0]
 8011084:	4a7d      	ldr	r2, [pc, #500]	; (801127c <__ieee754_powf+0x4a0>)
 8011086:	4630      	mov	r0, r6
 8011088:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801108c:	9603      	str	r6, [sp, #12]
 801108e:	4611      	mov	r1, r2
 8011090:	9205      	str	r2, [sp, #20]
 8011092:	f7ef fdad 	bl	8000bf0 <__aeabi_fsub>
 8011096:	9a05      	ldr	r2, [sp, #20]
 8011098:	9b03      	ldr	r3, [sp, #12]
 801109a:	4683      	mov	fp, r0
 801109c:	4619      	mov	r1, r3
 801109e:	4610      	mov	r0, r2
 80110a0:	9203      	str	r2, [sp, #12]
 80110a2:	9304      	str	r3, [sp, #16]
 80110a4:	f7ef fda6 	bl	8000bf4 <__addsf3>
 80110a8:	4601      	mov	r1, r0
 80110aa:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80110ae:	f7ef ff5d 	bl	8000f6c <__aeabi_fdiv>
 80110b2:	4682      	mov	sl, r0
 80110b4:	4601      	mov	r1, r0
 80110b6:	4658      	mov	r0, fp
 80110b8:	f7ef fea4 	bl	8000e04 <__aeabi_fmul>
 80110bc:	1076      	asrs	r6, r6, #1
 80110be:	9b00      	ldr	r3, [sp, #0]
 80110c0:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 80110c4:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 80110c8:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
 80110cc:	f029 090f 	bic.w	r9, r9, #15
 80110d0:	eb06 5643 	add.w	r6, r6, r3, lsl #21
 80110d4:	4680      	mov	r8, r0
 80110d6:	4631      	mov	r1, r6
 80110d8:	4648      	mov	r0, r9
 80110da:	f7ef fe93 	bl	8000e04 <__aeabi_fmul>
 80110de:	4601      	mov	r1, r0
 80110e0:	4658      	mov	r0, fp
 80110e2:	f7ef fd85 	bl	8000bf0 <__aeabi_fsub>
 80110e6:	9a03      	ldr	r2, [sp, #12]
 80110e8:	4683      	mov	fp, r0
 80110ea:	4611      	mov	r1, r2
 80110ec:	4630      	mov	r0, r6
 80110ee:	f7ef fd7f 	bl	8000bf0 <__aeabi_fsub>
 80110f2:	9b04      	ldr	r3, [sp, #16]
 80110f4:	4601      	mov	r1, r0
 80110f6:	4618      	mov	r0, r3
 80110f8:	f7ef fd7a 	bl	8000bf0 <__aeabi_fsub>
 80110fc:	4649      	mov	r1, r9
 80110fe:	f7ef fe81 	bl	8000e04 <__aeabi_fmul>
 8011102:	4601      	mov	r1, r0
 8011104:	4658      	mov	r0, fp
 8011106:	f7ef fd73 	bl	8000bf0 <__aeabi_fsub>
 801110a:	4651      	mov	r1, sl
 801110c:	f7ef fe7a 	bl	8000e04 <__aeabi_fmul>
 8011110:	4641      	mov	r1, r8
 8011112:	4682      	mov	sl, r0
 8011114:	4640      	mov	r0, r8
 8011116:	f7ef fe75 	bl	8000e04 <__aeabi_fmul>
 801111a:	4606      	mov	r6, r0
 801111c:	4958      	ldr	r1, [pc, #352]	; (8011280 <__ieee754_powf+0x4a4>)
 801111e:	f7ef fe71 	bl	8000e04 <__aeabi_fmul>
 8011122:	4958      	ldr	r1, [pc, #352]	; (8011284 <__ieee754_powf+0x4a8>)
 8011124:	f7ef fd66 	bl	8000bf4 <__addsf3>
 8011128:	4631      	mov	r1, r6
 801112a:	f7ef fe6b 	bl	8000e04 <__aeabi_fmul>
 801112e:	4956      	ldr	r1, [pc, #344]	; (8011288 <__ieee754_powf+0x4ac>)
 8011130:	f7ef fd60 	bl	8000bf4 <__addsf3>
 8011134:	4631      	mov	r1, r6
 8011136:	f7ef fe65 	bl	8000e04 <__aeabi_fmul>
 801113a:	4954      	ldr	r1, [pc, #336]	; (801128c <__ieee754_powf+0x4b0>)
 801113c:	f7ef fd5a 	bl	8000bf4 <__addsf3>
 8011140:	4631      	mov	r1, r6
 8011142:	f7ef fe5f 	bl	8000e04 <__aeabi_fmul>
 8011146:	4952      	ldr	r1, [pc, #328]	; (8011290 <__ieee754_powf+0x4b4>)
 8011148:	f7ef fd54 	bl	8000bf4 <__addsf3>
 801114c:	4631      	mov	r1, r6
 801114e:	f7ef fe59 	bl	8000e04 <__aeabi_fmul>
 8011152:	4950      	ldr	r1, [pc, #320]	; (8011294 <__ieee754_powf+0x4b8>)
 8011154:	f7ef fd4e 	bl	8000bf4 <__addsf3>
 8011158:	4631      	mov	r1, r6
 801115a:	4683      	mov	fp, r0
 801115c:	4630      	mov	r0, r6
 801115e:	f7ef fe51 	bl	8000e04 <__aeabi_fmul>
 8011162:	4601      	mov	r1, r0
 8011164:	4658      	mov	r0, fp
 8011166:	f7ef fe4d 	bl	8000e04 <__aeabi_fmul>
 801116a:	4606      	mov	r6, r0
 801116c:	4649      	mov	r1, r9
 801116e:	4640      	mov	r0, r8
 8011170:	f7ef fd40 	bl	8000bf4 <__addsf3>
 8011174:	4651      	mov	r1, sl
 8011176:	f7ef fe45 	bl	8000e04 <__aeabi_fmul>
 801117a:	4631      	mov	r1, r6
 801117c:	f7ef fd3a 	bl	8000bf4 <__addsf3>
 8011180:	4649      	mov	r1, r9
 8011182:	4683      	mov	fp, r0
 8011184:	4648      	mov	r0, r9
 8011186:	f7ef fe3d 	bl	8000e04 <__aeabi_fmul>
 801118a:	4943      	ldr	r1, [pc, #268]	; (8011298 <__ieee754_powf+0x4bc>)
 801118c:	9003      	str	r0, [sp, #12]
 801118e:	f7ef fd31 	bl	8000bf4 <__addsf3>
 8011192:	4659      	mov	r1, fp
 8011194:	f7ef fd2e 	bl	8000bf4 <__addsf3>
 8011198:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 801119c:	f026 060f 	bic.w	r6, r6, #15
 80111a0:	4631      	mov	r1, r6
 80111a2:	4648      	mov	r0, r9
 80111a4:	f7ef fe2e 	bl	8000e04 <__aeabi_fmul>
 80111a8:	493b      	ldr	r1, [pc, #236]	; (8011298 <__ieee754_powf+0x4bc>)
 80111aa:	4681      	mov	r9, r0
 80111ac:	4630      	mov	r0, r6
 80111ae:	f7ef fd1f 	bl	8000bf0 <__aeabi_fsub>
 80111b2:	9b03      	ldr	r3, [sp, #12]
 80111b4:	4619      	mov	r1, r3
 80111b6:	f7ef fd1b 	bl	8000bf0 <__aeabi_fsub>
 80111ba:	4601      	mov	r1, r0
 80111bc:	4658      	mov	r0, fp
 80111be:	f7ef fd17 	bl	8000bf0 <__aeabi_fsub>
 80111c2:	4641      	mov	r1, r8
 80111c4:	f7ef fe1e 	bl	8000e04 <__aeabi_fmul>
 80111c8:	4631      	mov	r1, r6
 80111ca:	4680      	mov	r8, r0
 80111cc:	4650      	mov	r0, sl
 80111ce:	f7ef fe19 	bl	8000e04 <__aeabi_fmul>
 80111d2:	4601      	mov	r1, r0
 80111d4:	4640      	mov	r0, r8
 80111d6:	f7ef fd0d 	bl	8000bf4 <__addsf3>
 80111da:	4682      	mov	sl, r0
 80111dc:	4601      	mov	r1, r0
 80111de:	4648      	mov	r0, r9
 80111e0:	f7ef fd08 	bl	8000bf4 <__addsf3>
 80111e4:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 80111e8:	f026 060f 	bic.w	r6, r6, #15
 80111ec:	4630      	mov	r0, r6
 80111ee:	492b      	ldr	r1, [pc, #172]	; (801129c <__ieee754_powf+0x4c0>)
 80111f0:	f7ef fe08 	bl	8000e04 <__aeabi_fmul>
 80111f4:	4649      	mov	r1, r9
 80111f6:	4680      	mov	r8, r0
 80111f8:	4630      	mov	r0, r6
 80111fa:	f7ef fcf9 	bl	8000bf0 <__aeabi_fsub>
 80111fe:	4601      	mov	r1, r0
 8011200:	4650      	mov	r0, sl
 8011202:	f7ef fcf5 	bl	8000bf0 <__aeabi_fsub>
 8011206:	4926      	ldr	r1, [pc, #152]	; (80112a0 <__ieee754_powf+0x4c4>)
 8011208:	f7ef fdfc 	bl	8000e04 <__aeabi_fmul>
 801120c:	4925      	ldr	r1, [pc, #148]	; (80112a4 <__ieee754_powf+0x4c8>)
 801120e:	4681      	mov	r9, r0
 8011210:	4630      	mov	r0, r6
 8011212:	f7ef fdf7 	bl	8000e04 <__aeabi_fmul>
 8011216:	4601      	mov	r1, r0
 8011218:	4648      	mov	r0, r9
 801121a:	f7ef fceb 	bl	8000bf4 <__addsf3>
 801121e:	4b22      	ldr	r3, [pc, #136]	; (80112a8 <__ieee754_powf+0x4cc>)
 8011220:	9a00      	ldr	r2, [sp, #0]
 8011222:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011226:	f7ef fce5 	bl	8000bf4 <__addsf3>
 801122a:	4606      	mov	r6, r0
 801122c:	9801      	ldr	r0, [sp, #4]
 801122e:	f7ef fd95 	bl	8000d5c <__aeabi_i2f>
 8011232:	4682      	mov	sl, r0
 8011234:	4b1d      	ldr	r3, [pc, #116]	; (80112ac <__ieee754_powf+0x4d0>)
 8011236:	9a00      	ldr	r2, [sp, #0]
 8011238:	4631      	mov	r1, r6
 801123a:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 801123e:	4640      	mov	r0, r8
 8011240:	f7ef fcd8 	bl	8000bf4 <__addsf3>
 8011244:	4659      	mov	r1, fp
 8011246:	f7ef fcd5 	bl	8000bf4 <__addsf3>
 801124a:	4651      	mov	r1, sl
 801124c:	f7ef fcd2 	bl	8000bf4 <__addsf3>
 8011250:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 8011254:	f029 090f 	bic.w	r9, r9, #15
 8011258:	4651      	mov	r1, sl
 801125a:	4648      	mov	r0, r9
 801125c:	f7ef fcc8 	bl	8000bf0 <__aeabi_fsub>
 8011260:	4659      	mov	r1, fp
 8011262:	f7ef fcc5 	bl	8000bf0 <__aeabi_fsub>
 8011266:	4641      	mov	r1, r8
 8011268:	e69a      	b.n	8010fa0 <__ieee754_powf+0x1c4>
 801126a:	2200      	movs	r2, #0
 801126c:	e6f3      	b.n	8011056 <__ieee754_powf+0x27a>
 801126e:	2301      	movs	r3, #1
 8011270:	e706      	b.n	8011080 <__ieee754_powf+0x2a4>
 8011272:	bf00      	nop
 8011274:	001cc471 	.word	0x001cc471
 8011278:	005db3d6 	.word	0x005db3d6
 801127c:	08011adc 	.word	0x08011adc
 8011280:	3e53f142 	.word	0x3e53f142
 8011284:	3e6c3255 	.word	0x3e6c3255
 8011288:	3e8ba305 	.word	0x3e8ba305
 801128c:	3eaaaaab 	.word	0x3eaaaaab
 8011290:	3edb6db7 	.word	0x3edb6db7
 8011294:	3f19999a 	.word	0x3f19999a
 8011298:	40400000 	.word	0x40400000
 801129c:	3f763800 	.word	0x3f763800
 80112a0:	3f76384f 	.word	0x3f76384f
 80112a4:	369dc3a0 	.word	0x369dc3a0
 80112a8:	08011aec 	.word	0x08011aec
 80112ac:	08011ae4 	.word	0x08011ae4
 80112b0:	f040 80c0 	bne.w	8011434 <__ieee754_powf+0x658>
 80112b4:	4967      	ldr	r1, [pc, #412]	; (8011454 <__ieee754_powf+0x678>)
 80112b6:	4630      	mov	r0, r6
 80112b8:	f7ef fc9c 	bl	8000bf4 <__addsf3>
 80112bc:	4639      	mov	r1, r7
 80112be:	4681      	mov	r9, r0
 80112c0:	4650      	mov	r0, sl
 80112c2:	f7ef fc95 	bl	8000bf0 <__aeabi_fsub>
 80112c6:	4601      	mov	r1, r0
 80112c8:	4648      	mov	r0, r9
 80112ca:	f7ef ff57 	bl	800117c <__aeabi_fcmpgt>
 80112ce:	2800      	cmp	r0, #0
 80112d0:	f47f ae9e 	bne.w	8011010 <__ieee754_powf+0x234>
 80112d4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80112d8:	15e4      	asrs	r4, r4, #23
 80112da:	3c7e      	subs	r4, #126	; 0x7e
 80112dc:	4123      	asrs	r3, r4
 80112de:	4443      	add	r3, r8
 80112e0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80112e4:	495c      	ldr	r1, [pc, #368]	; (8011458 <__ieee754_powf+0x67c>)
 80112e6:	3a7f      	subs	r2, #127	; 0x7f
 80112e8:	f3c3 0416 	ubfx	r4, r3, #0, #23
 80112ec:	4111      	asrs	r1, r2
 80112ee:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 80112f2:	f1c2 0217 	rsb	r2, r2, #23
 80112f6:	4114      	asrs	r4, r2
 80112f8:	f1b8 0f00 	cmp.w	r8, #0
 80112fc:	4638      	mov	r0, r7
 80112fe:	ea23 0101 	bic.w	r1, r3, r1
 8011302:	bfb8      	it	lt
 8011304:	4264      	neglt	r4, r4
 8011306:	f7ef fc73 	bl	8000bf0 <__aeabi_fsub>
 801130a:	4681      	mov	r9, r0
 801130c:	4631      	mov	r1, r6
 801130e:	4648      	mov	r0, r9
 8011310:	f7ef fc70 	bl	8000bf4 <__addsf3>
 8011314:	f420 677f 	bic.w	r7, r0, #4080	; 0xff0
 8011318:	f027 070f 	bic.w	r7, r7, #15
 801131c:	4638      	mov	r0, r7
 801131e:	494f      	ldr	r1, [pc, #316]	; (801145c <__ieee754_powf+0x680>)
 8011320:	f7ef fd70 	bl	8000e04 <__aeabi_fmul>
 8011324:	4649      	mov	r1, r9
 8011326:	4680      	mov	r8, r0
 8011328:	4638      	mov	r0, r7
 801132a:	f7ef fc61 	bl	8000bf0 <__aeabi_fsub>
 801132e:	4601      	mov	r1, r0
 8011330:	4630      	mov	r0, r6
 8011332:	f7ef fc5d 	bl	8000bf0 <__aeabi_fsub>
 8011336:	494a      	ldr	r1, [pc, #296]	; (8011460 <__ieee754_powf+0x684>)
 8011338:	f7ef fd64 	bl	8000e04 <__aeabi_fmul>
 801133c:	4949      	ldr	r1, [pc, #292]	; (8011464 <__ieee754_powf+0x688>)
 801133e:	4606      	mov	r6, r0
 8011340:	4638      	mov	r0, r7
 8011342:	f7ef fd5f 	bl	8000e04 <__aeabi_fmul>
 8011346:	4601      	mov	r1, r0
 8011348:	4630      	mov	r0, r6
 801134a:	f7ef fc53 	bl	8000bf4 <__addsf3>
 801134e:	4607      	mov	r7, r0
 8011350:	4601      	mov	r1, r0
 8011352:	4640      	mov	r0, r8
 8011354:	f7ef fc4e 	bl	8000bf4 <__addsf3>
 8011358:	4641      	mov	r1, r8
 801135a:	4606      	mov	r6, r0
 801135c:	f7ef fc48 	bl	8000bf0 <__aeabi_fsub>
 8011360:	4601      	mov	r1, r0
 8011362:	4638      	mov	r0, r7
 8011364:	f7ef fc44 	bl	8000bf0 <__aeabi_fsub>
 8011368:	4631      	mov	r1, r6
 801136a:	4680      	mov	r8, r0
 801136c:	4630      	mov	r0, r6
 801136e:	f7ef fd49 	bl	8000e04 <__aeabi_fmul>
 8011372:	4607      	mov	r7, r0
 8011374:	493c      	ldr	r1, [pc, #240]	; (8011468 <__ieee754_powf+0x68c>)
 8011376:	f7ef fd45 	bl	8000e04 <__aeabi_fmul>
 801137a:	493c      	ldr	r1, [pc, #240]	; (801146c <__ieee754_powf+0x690>)
 801137c:	f7ef fc38 	bl	8000bf0 <__aeabi_fsub>
 8011380:	4639      	mov	r1, r7
 8011382:	f7ef fd3f 	bl	8000e04 <__aeabi_fmul>
 8011386:	493a      	ldr	r1, [pc, #232]	; (8011470 <__ieee754_powf+0x694>)
 8011388:	f7ef fc34 	bl	8000bf4 <__addsf3>
 801138c:	4639      	mov	r1, r7
 801138e:	f7ef fd39 	bl	8000e04 <__aeabi_fmul>
 8011392:	4938      	ldr	r1, [pc, #224]	; (8011474 <__ieee754_powf+0x698>)
 8011394:	f7ef fc2c 	bl	8000bf0 <__aeabi_fsub>
 8011398:	4639      	mov	r1, r7
 801139a:	f7ef fd33 	bl	8000e04 <__aeabi_fmul>
 801139e:	4936      	ldr	r1, [pc, #216]	; (8011478 <__ieee754_powf+0x69c>)
 80113a0:	f7ef fc28 	bl	8000bf4 <__addsf3>
 80113a4:	4639      	mov	r1, r7
 80113a6:	f7ef fd2d 	bl	8000e04 <__aeabi_fmul>
 80113aa:	4601      	mov	r1, r0
 80113ac:	4630      	mov	r0, r6
 80113ae:	f7ef fc1f 	bl	8000bf0 <__aeabi_fsub>
 80113b2:	4607      	mov	r7, r0
 80113b4:	4601      	mov	r1, r0
 80113b6:	4630      	mov	r0, r6
 80113b8:	f7ef fd24 	bl	8000e04 <__aeabi_fmul>
 80113bc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80113c0:	4681      	mov	r9, r0
 80113c2:	4638      	mov	r0, r7
 80113c4:	f7ef fc14 	bl	8000bf0 <__aeabi_fsub>
 80113c8:	4601      	mov	r1, r0
 80113ca:	4648      	mov	r0, r9
 80113cc:	f7ef fdce 	bl	8000f6c <__aeabi_fdiv>
 80113d0:	4641      	mov	r1, r8
 80113d2:	4607      	mov	r7, r0
 80113d4:	4630      	mov	r0, r6
 80113d6:	f7ef fd15 	bl	8000e04 <__aeabi_fmul>
 80113da:	4641      	mov	r1, r8
 80113dc:	f7ef fc0a 	bl	8000bf4 <__addsf3>
 80113e0:	4601      	mov	r1, r0
 80113e2:	4638      	mov	r0, r7
 80113e4:	f7ef fc04 	bl	8000bf0 <__aeabi_fsub>
 80113e8:	4631      	mov	r1, r6
 80113ea:	f7ef fc01 	bl	8000bf0 <__aeabi_fsub>
 80113ee:	4601      	mov	r1, r0
 80113f0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80113f4:	f7ef fbfc 	bl	8000bf0 <__aeabi_fsub>
 80113f8:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 80113fc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011400:	da1e      	bge.n	8011440 <__ieee754_powf+0x664>
 8011402:	4621      	mov	r1, r4
 8011404:	f000 f8f0 	bl	80115e8 <scalbnf>
 8011408:	4629      	mov	r1, r5
 801140a:	e544      	b.n	8010e96 <__ieee754_powf+0xba>
 801140c:	4b1b      	ldr	r3, [pc, #108]	; (801147c <__ieee754_powf+0x6a0>)
 801140e:	429c      	cmp	r4, r3
 8011410:	dd05      	ble.n	801141e <__ieee754_powf+0x642>
 8011412:	491b      	ldr	r1, [pc, #108]	; (8011480 <__ieee754_powf+0x6a4>)
 8011414:	4628      	mov	r0, r5
 8011416:	f7ef fcf5 	bl	8000e04 <__aeabi_fmul>
 801141a:	4919      	ldr	r1, [pc, #100]	; (8011480 <__ieee754_powf+0x6a4>)
 801141c:	e53b      	b.n	8010e96 <__ieee754_powf+0xba>
 801141e:	d109      	bne.n	8011434 <__ieee754_powf+0x658>
 8011420:	4639      	mov	r1, r7
 8011422:	f7ef fbe5 	bl	8000bf0 <__aeabi_fsub>
 8011426:	4631      	mov	r1, r6
 8011428:	f7ef fe9e 	bl	8001168 <__aeabi_fcmpge>
 801142c:	2800      	cmp	r0, #0
 801142e:	f43f af51 	beq.w	80112d4 <__ieee754_powf+0x4f8>
 8011432:	e7ee      	b.n	8011412 <__ieee754_powf+0x636>
 8011434:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8011438:	f73f af4c 	bgt.w	80112d4 <__ieee754_powf+0x4f8>
 801143c:	2400      	movs	r4, #0
 801143e:	e765      	b.n	801130c <__ieee754_powf+0x530>
 8011440:	4618      	mov	r0, r3
 8011442:	e7e1      	b.n	8011408 <__ieee754_powf+0x62c>
 8011444:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8011448:	e515      	b.n	8010e76 <__ieee754_powf+0x9a>
 801144a:	4639      	mov	r1, r7
 801144c:	e513      	b.n	8010e76 <__ieee754_powf+0x9a>
 801144e:	2500      	movs	r5, #0
 8011450:	e4f9      	b.n	8010e46 <__ieee754_powf+0x6a>
 8011452:	bf00      	nop
 8011454:	3338aa3c 	.word	0x3338aa3c
 8011458:	007fffff 	.word	0x007fffff
 801145c:	3f317200 	.word	0x3f317200
 8011460:	3f317218 	.word	0x3f317218
 8011464:	35bfbe8c 	.word	0x35bfbe8c
 8011468:	3331bb4c 	.word	0x3331bb4c
 801146c:	35ddea0e 	.word	0x35ddea0e
 8011470:	388ab355 	.word	0x388ab355
 8011474:	3b360b61 	.word	0x3b360b61
 8011478:	3e2aaaab 	.word	0x3e2aaaab
 801147c:	43160000 	.word	0x43160000
 8011480:	0da24260 	.word	0x0da24260

08011484 <__ieee754_sqrtf>:
 8011484:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8011488:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801148c:	b570      	push	{r4, r5, r6, lr}
 801148e:	4603      	mov	r3, r0
 8011490:	4604      	mov	r4, r0
 8011492:	d309      	bcc.n	80114a8 <__ieee754_sqrtf+0x24>
 8011494:	4601      	mov	r1, r0
 8011496:	f7ef fcb5 	bl	8000e04 <__aeabi_fmul>
 801149a:	4601      	mov	r1, r0
 801149c:	4620      	mov	r0, r4
 801149e:	f7ef fba9 	bl	8000bf4 <__addsf3>
 80114a2:	4604      	mov	r4, r0
 80114a4:	4620      	mov	r0, r4
 80114a6:	bd70      	pop	{r4, r5, r6, pc}
 80114a8:	2a00      	cmp	r2, #0
 80114aa:	d0fb      	beq.n	80114a4 <__ieee754_sqrtf+0x20>
 80114ac:	2800      	cmp	r0, #0
 80114ae:	da06      	bge.n	80114be <__ieee754_sqrtf+0x3a>
 80114b0:	4601      	mov	r1, r0
 80114b2:	f7ef fb9d 	bl	8000bf0 <__aeabi_fsub>
 80114b6:	4601      	mov	r1, r0
 80114b8:	f7ef fd58 	bl	8000f6c <__aeabi_fdiv>
 80114bc:	e7f1      	b.n	80114a2 <__ieee754_sqrtf+0x1e>
 80114be:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 80114c2:	ea4f 51e0 	mov.w	r1, r0, asr #23
 80114c6:	d029      	beq.n	801151c <__ieee754_sqrtf+0x98>
 80114c8:	f3c3 0216 	ubfx	r2, r3, #0, #23
 80114cc:	07cb      	lsls	r3, r1, #31
 80114ce:	f04f 0300 	mov.w	r3, #0
 80114d2:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 80114d6:	f04f 0419 	mov.w	r4, #25
 80114da:	461e      	mov	r6, r3
 80114dc:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80114e0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80114e4:	bf58      	it	pl
 80114e6:	0052      	lslpl	r2, r2, #1
 80114e8:	1040      	asrs	r0, r0, #1
 80114ea:	0052      	lsls	r2, r2, #1
 80114ec:	1875      	adds	r5, r6, r1
 80114ee:	4295      	cmp	r5, r2
 80114f0:	bfde      	ittt	le
 80114f2:	186e      	addle	r6, r5, r1
 80114f4:	1b52      	suble	r2, r2, r5
 80114f6:	185b      	addle	r3, r3, r1
 80114f8:	3c01      	subs	r4, #1
 80114fa:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80114fe:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8011502:	d1f3      	bne.n	80114ec <__ieee754_sqrtf+0x68>
 8011504:	b112      	cbz	r2, 801150c <__ieee754_sqrtf+0x88>
 8011506:	3301      	adds	r3, #1
 8011508:	f023 0301 	bic.w	r3, r3, #1
 801150c:	105c      	asrs	r4, r3, #1
 801150e:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8011512:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 8011516:	e7c5      	b.n	80114a4 <__ieee754_sqrtf+0x20>
 8011518:	005b      	lsls	r3, r3, #1
 801151a:	3201      	adds	r2, #1
 801151c:	0218      	lsls	r0, r3, #8
 801151e:	d5fb      	bpl.n	8011518 <__ieee754_sqrtf+0x94>
 8011520:	3a01      	subs	r2, #1
 8011522:	1a89      	subs	r1, r1, r2
 8011524:	e7d0      	b.n	80114c8 <__ieee754_sqrtf+0x44>

08011526 <fabsf>:
 8011526:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801152a:	4770      	bx	lr

0801152c <finitef>:
 801152c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8011530:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8011534:	bfac      	ite	ge
 8011536:	2000      	movge	r0, #0
 8011538:	2001      	movlt	r0, #1
 801153a:	4770      	bx	lr

0801153c <nanf>:
 801153c:	4800      	ldr	r0, [pc, #0]	; (8011540 <nanf+0x4>)
 801153e:	4770      	bx	lr
 8011540:	7fc00000 	.word	0x7fc00000

08011544 <rintf>:
 8011544:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011546:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 801154a:	3d7f      	subs	r5, #127	; 0x7f
 801154c:	2d16      	cmp	r5, #22
 801154e:	4601      	mov	r1, r0
 8011550:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8011554:	dc3c      	bgt.n	80115d0 <rintf+0x8c>
 8011556:	b1e2      	cbz	r2, 8011592 <rintf+0x4e>
 8011558:	2d00      	cmp	r5, #0
 801155a:	4602      	mov	r2, r0
 801155c:	ea4f 74d0 	mov.w	r4, r0, lsr #31
 8011560:	da1a      	bge.n	8011598 <rintf+0x54>
 8011562:	4a1f      	ldr	r2, [pc, #124]	; (80115e0 <rintf+0x9c>)
 8011564:	f3c0 0116 	ubfx	r1, r0, #0, #23
 8011568:	4249      	negs	r1, r1
 801156a:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
 801156e:	0d03      	lsrs	r3, r0, #20
 8011570:	0a49      	lsrs	r1, r1, #9
 8011572:	051b      	lsls	r3, r3, #20
 8011574:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8011578:	4319      	orrs	r1, r3
 801157a:	4628      	mov	r0, r5
 801157c:	f7ef fb3a 	bl	8000bf4 <__addsf3>
 8011580:	9001      	str	r0, [sp, #4]
 8011582:	4629      	mov	r1, r5
 8011584:	9801      	ldr	r0, [sp, #4]
 8011586:	f7ef fb33 	bl	8000bf0 <__aeabi_fsub>
 801158a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801158e:	ea40 71c4 	orr.w	r1, r0, r4, lsl #31
 8011592:	4608      	mov	r0, r1
 8011594:	b003      	add	sp, #12
 8011596:	bd30      	pop	{r4, r5, pc}
 8011598:	4b12      	ldr	r3, [pc, #72]	; (80115e4 <rintf+0xa0>)
 801159a:	412b      	asrs	r3, r5
 801159c:	4218      	tst	r0, r3
 801159e:	d0f8      	beq.n	8011592 <rintf+0x4e>
 80115a0:	0859      	lsrs	r1, r3, #1
 80115a2:	ea10 0353 	ands.w	r3, r0, r3, lsr #1
 80115a6:	d006      	beq.n	80115b6 <rintf+0x72>
 80115a8:	ea20 0201 	bic.w	r2, r0, r1
 80115ac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80115b0:	fa41 f505 	asr.w	r5, r1, r5
 80115b4:	432a      	orrs	r2, r5
 80115b6:	4b0a      	ldr	r3, [pc, #40]	; (80115e0 <rintf+0x9c>)
 80115b8:	4611      	mov	r1, r2
 80115ba:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 80115be:	4620      	mov	r0, r4
 80115c0:	f7ef fb18 	bl	8000bf4 <__addsf3>
 80115c4:	9001      	str	r0, [sp, #4]
 80115c6:	4621      	mov	r1, r4
 80115c8:	9801      	ldr	r0, [sp, #4]
 80115ca:	f7ef fb11 	bl	8000bf0 <__aeabi_fsub>
 80115ce:	e004      	b.n	80115da <rintf+0x96>
 80115d0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80115d4:	d3dd      	bcc.n	8011592 <rintf+0x4e>
 80115d6:	f7ef fb0d 	bl	8000bf4 <__addsf3>
 80115da:	4601      	mov	r1, r0
 80115dc:	e7d9      	b.n	8011592 <rintf+0x4e>
 80115de:	bf00      	nop
 80115e0:	08011af4 	.word	0x08011af4
 80115e4:	007fffff 	.word	0x007fffff

080115e8 <scalbnf>:
 80115e8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80115ec:	b538      	push	{r3, r4, r5, lr}
 80115ee:	4603      	mov	r3, r0
 80115f0:	460d      	mov	r5, r1
 80115f2:	4604      	mov	r4, r0
 80115f4:	d02a      	beq.n	801164c <scalbnf+0x64>
 80115f6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80115fa:	d304      	bcc.n	8011606 <scalbnf+0x1e>
 80115fc:	4601      	mov	r1, r0
 80115fe:	f7ef faf9 	bl	8000bf4 <__addsf3>
 8011602:	4603      	mov	r3, r0
 8011604:	e022      	b.n	801164c <scalbnf+0x64>
 8011606:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 801160a:	d117      	bne.n	801163c <scalbnf+0x54>
 801160c:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 8011610:	f7ef fbf8 	bl	8000e04 <__aeabi_fmul>
 8011614:	4a17      	ldr	r2, [pc, #92]	; (8011674 <scalbnf+0x8c>)
 8011616:	4603      	mov	r3, r0
 8011618:	4295      	cmp	r5, r2
 801161a:	db0b      	blt.n	8011634 <scalbnf+0x4c>
 801161c:	4604      	mov	r4, r0
 801161e:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8011622:	3a19      	subs	r2, #25
 8011624:	442a      	add	r2, r5
 8011626:	2afe      	cmp	r2, #254	; 0xfe
 8011628:	dd0a      	ble.n	8011640 <scalbnf+0x58>
 801162a:	4913      	ldr	r1, [pc, #76]	; (8011678 <scalbnf+0x90>)
 801162c:	4618      	mov	r0, r3
 801162e:	f361 001e 	bfi	r0, r1, #0, #31
 8011632:	e000      	b.n	8011636 <scalbnf+0x4e>
 8011634:	4911      	ldr	r1, [pc, #68]	; (801167c <scalbnf+0x94>)
 8011636:	f7ef fbe5 	bl	8000e04 <__aeabi_fmul>
 801163a:	e7e2      	b.n	8011602 <scalbnf+0x1a>
 801163c:	0dd2      	lsrs	r2, r2, #23
 801163e:	e7f1      	b.n	8011624 <scalbnf+0x3c>
 8011640:	2a00      	cmp	r2, #0
 8011642:	dd05      	ble.n	8011650 <scalbnf+0x68>
 8011644:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 8011648:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 801164c:	4618      	mov	r0, r3
 801164e:	bd38      	pop	{r3, r4, r5, pc}
 8011650:	f112 0f16 	cmn.w	r2, #22
 8011654:	da05      	bge.n	8011662 <scalbnf+0x7a>
 8011656:	f24c 3250 	movw	r2, #50000	; 0xc350
 801165a:	4295      	cmp	r5, r2
 801165c:	dce5      	bgt.n	801162a <scalbnf+0x42>
 801165e:	4907      	ldr	r1, [pc, #28]	; (801167c <scalbnf+0x94>)
 8011660:	e7e4      	b.n	801162c <scalbnf+0x44>
 8011662:	3219      	adds	r2, #25
 8011664:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8011668:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 801166c:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 8011670:	e7e1      	b.n	8011636 <scalbnf+0x4e>
 8011672:	bf00      	nop
 8011674:	ffff3cb0 	.word	0xffff3cb0
 8011678:	7149f2ca 	.word	0x7149f2ca
 801167c:	0da24260 	.word	0x0da24260

08011680 <_init>:
 8011680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011682:	bf00      	nop
 8011684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011686:	bc08      	pop	{r3}
 8011688:	469e      	mov	lr, r3
 801168a:	4770      	bx	lr

0801168c <_fini>:
 801168c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801168e:	bf00      	nop
 8011690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011692:	bc08      	pop	{r3}
 8011694:	469e      	mov	lr, r3
 8011696:	4770      	bx	lr
