
SP100_SW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014c18  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000994  08014cd8  08014cd8  00024cd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801566c  0801566c  0003020c  2**0
                  CONTENTS
  4 .ARM          00000000  0801566c  0801566c  0003020c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801566c  0801566c  0003020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801566c  0801566c  0002566c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015670  08015670  00025670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08015674  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000460  2000020c  08015880  0003020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000066c  08015880  0003066c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019025  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e07  00000000  00000000  00049259  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001590  00000000  00000000  0004d060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001438  00000000  00000000  0004e5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021d4e  00000000  00000000  0004fa28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fc37  00000000  00000000  00071776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000beb29  00000000  00000000  000913ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014fed6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006148  00000000  00000000  0014ff28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000020c 	.word	0x2000020c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08014cc0 	.word	0x08014cc0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000210 	.word	0x20000210
 8000104:	08014cc0 	.word	0x08014cc0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fe1d 	bl	800207c <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fd6d 	bl	8001f2c <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fe0f 	bl	800207c <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fe05 	bl	800207c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fd95 	bl	8001fb0 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fd8b 	bl	8001fb0 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fb6d 	bl	8000b90 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 faf9 	bl	8000ab8 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fb5f 	bl	8000b90 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fb55 	bl	8000b90 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fb05 	bl	8000b04 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fafb 	bl	8000b04 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_f2uiz>:
 800051c:	219e      	movs	r1, #158	; 0x9e
 800051e:	b510      	push	{r4, lr}
 8000520:	05c9      	lsls	r1, r1, #23
 8000522:	1c04      	adds	r4, r0, #0
 8000524:	f7ff fff0 	bl	8000508 <__aeabi_fcmpge>
 8000528:	2800      	cmp	r0, #0
 800052a:	d103      	bne.n	8000534 <__aeabi_f2uiz+0x18>
 800052c:	1c20      	adds	r0, r4, #0
 800052e:	f000 fe5d 	bl	80011ec <__aeabi_f2iz>
 8000532:	bd10      	pop	{r4, pc}
 8000534:	219e      	movs	r1, #158	; 0x9e
 8000536:	1c20      	adds	r0, r4, #0
 8000538:	05c9      	lsls	r1, r1, #23
 800053a:	f000 fc93 	bl	8000e64 <__aeabi_fsub>
 800053e:	f000 fe55 	bl	80011ec <__aeabi_f2iz>
 8000542:	2380      	movs	r3, #128	; 0x80
 8000544:	061b      	lsls	r3, r3, #24
 8000546:	469c      	mov	ip, r3
 8000548:	4460      	add	r0, ip
 800054a:	e7f2      	b.n	8000532 <__aeabi_f2uiz+0x16>

0800054c <__aeabi_fadd>:
 800054c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800054e:	46c6      	mov	lr, r8
 8000550:	0243      	lsls	r3, r0, #9
 8000552:	0a5b      	lsrs	r3, r3, #9
 8000554:	024e      	lsls	r6, r1, #9
 8000556:	0045      	lsls	r5, r0, #1
 8000558:	004f      	lsls	r7, r1, #1
 800055a:	00da      	lsls	r2, r3, #3
 800055c:	0fc4      	lsrs	r4, r0, #31
 800055e:	469c      	mov	ip, r3
 8000560:	0a70      	lsrs	r0, r6, #9
 8000562:	4690      	mov	r8, r2
 8000564:	b500      	push	{lr}
 8000566:	0e2d      	lsrs	r5, r5, #24
 8000568:	0e3f      	lsrs	r7, r7, #24
 800056a:	0fc9      	lsrs	r1, r1, #31
 800056c:	09b6      	lsrs	r6, r6, #6
 800056e:	428c      	cmp	r4, r1
 8000570:	d04b      	beq.n	800060a <__aeabi_fadd+0xbe>
 8000572:	1bea      	subs	r2, r5, r7
 8000574:	2a00      	cmp	r2, #0
 8000576:	dd36      	ble.n	80005e6 <__aeabi_fadd+0x9a>
 8000578:	2f00      	cmp	r7, #0
 800057a:	d061      	beq.n	8000640 <__aeabi_fadd+0xf4>
 800057c:	2dff      	cmp	r5, #255	; 0xff
 800057e:	d100      	bne.n	8000582 <__aeabi_fadd+0x36>
 8000580:	e0ad      	b.n	80006de <__aeabi_fadd+0x192>
 8000582:	2380      	movs	r3, #128	; 0x80
 8000584:	04db      	lsls	r3, r3, #19
 8000586:	431e      	orrs	r6, r3
 8000588:	2a1b      	cmp	r2, #27
 800058a:	dc00      	bgt.n	800058e <__aeabi_fadd+0x42>
 800058c:	e0d3      	b.n	8000736 <__aeabi_fadd+0x1ea>
 800058e:	2001      	movs	r0, #1
 8000590:	4643      	mov	r3, r8
 8000592:	1a18      	subs	r0, r3, r0
 8000594:	0143      	lsls	r3, r0, #5
 8000596:	d400      	bmi.n	800059a <__aeabi_fadd+0x4e>
 8000598:	e08c      	b.n	80006b4 <__aeabi_fadd+0x168>
 800059a:	0180      	lsls	r0, r0, #6
 800059c:	0987      	lsrs	r7, r0, #6
 800059e:	0038      	movs	r0, r7
 80005a0:	f002 fd48 	bl	8003034 <__clzsi2>
 80005a4:	3805      	subs	r0, #5
 80005a6:	4087      	lsls	r7, r0
 80005a8:	4285      	cmp	r5, r0
 80005aa:	dc00      	bgt.n	80005ae <__aeabi_fadd+0x62>
 80005ac:	e0b6      	b.n	800071c <__aeabi_fadd+0x1d0>
 80005ae:	1a2d      	subs	r5, r5, r0
 80005b0:	48b3      	ldr	r0, [pc, #716]	; (8000880 <__aeabi_fadd+0x334>)
 80005b2:	4038      	ands	r0, r7
 80005b4:	0743      	lsls	r3, r0, #29
 80005b6:	d004      	beq.n	80005c2 <__aeabi_fadd+0x76>
 80005b8:	230f      	movs	r3, #15
 80005ba:	4003      	ands	r3, r0
 80005bc:	2b04      	cmp	r3, #4
 80005be:	d000      	beq.n	80005c2 <__aeabi_fadd+0x76>
 80005c0:	3004      	adds	r0, #4
 80005c2:	0143      	lsls	r3, r0, #5
 80005c4:	d400      	bmi.n	80005c8 <__aeabi_fadd+0x7c>
 80005c6:	e078      	b.n	80006ba <__aeabi_fadd+0x16e>
 80005c8:	1c6a      	adds	r2, r5, #1
 80005ca:	2dfe      	cmp	r5, #254	; 0xfe
 80005cc:	d065      	beq.n	800069a <__aeabi_fadd+0x14e>
 80005ce:	0180      	lsls	r0, r0, #6
 80005d0:	0a43      	lsrs	r3, r0, #9
 80005d2:	469c      	mov	ip, r3
 80005d4:	b2d2      	uxtb	r2, r2
 80005d6:	4663      	mov	r3, ip
 80005d8:	05d0      	lsls	r0, r2, #23
 80005da:	4318      	orrs	r0, r3
 80005dc:	07e4      	lsls	r4, r4, #31
 80005de:	4320      	orrs	r0, r4
 80005e0:	bc80      	pop	{r7}
 80005e2:	46b8      	mov	r8, r7
 80005e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005e6:	2a00      	cmp	r2, #0
 80005e8:	d035      	beq.n	8000656 <__aeabi_fadd+0x10a>
 80005ea:	1b7a      	subs	r2, r7, r5
 80005ec:	2d00      	cmp	r5, #0
 80005ee:	d000      	beq.n	80005f2 <__aeabi_fadd+0xa6>
 80005f0:	e0af      	b.n	8000752 <__aeabi_fadd+0x206>
 80005f2:	4643      	mov	r3, r8
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d100      	bne.n	80005fa <__aeabi_fadd+0xae>
 80005f8:	e0a7      	b.n	800074a <__aeabi_fadd+0x1fe>
 80005fa:	1e53      	subs	r3, r2, #1
 80005fc:	2a01      	cmp	r2, #1
 80005fe:	d100      	bne.n	8000602 <__aeabi_fadd+0xb6>
 8000600:	e12f      	b.n	8000862 <__aeabi_fadd+0x316>
 8000602:	2aff      	cmp	r2, #255	; 0xff
 8000604:	d069      	beq.n	80006da <__aeabi_fadd+0x18e>
 8000606:	001a      	movs	r2, r3
 8000608:	e0aa      	b.n	8000760 <__aeabi_fadd+0x214>
 800060a:	1be9      	subs	r1, r5, r7
 800060c:	2900      	cmp	r1, #0
 800060e:	dd70      	ble.n	80006f2 <__aeabi_fadd+0x1a6>
 8000610:	2f00      	cmp	r7, #0
 8000612:	d037      	beq.n	8000684 <__aeabi_fadd+0x138>
 8000614:	2dff      	cmp	r5, #255	; 0xff
 8000616:	d062      	beq.n	80006de <__aeabi_fadd+0x192>
 8000618:	2380      	movs	r3, #128	; 0x80
 800061a:	04db      	lsls	r3, r3, #19
 800061c:	431e      	orrs	r6, r3
 800061e:	291b      	cmp	r1, #27
 8000620:	dc00      	bgt.n	8000624 <__aeabi_fadd+0xd8>
 8000622:	e0b0      	b.n	8000786 <__aeabi_fadd+0x23a>
 8000624:	2001      	movs	r0, #1
 8000626:	4440      	add	r0, r8
 8000628:	0143      	lsls	r3, r0, #5
 800062a:	d543      	bpl.n	80006b4 <__aeabi_fadd+0x168>
 800062c:	3501      	adds	r5, #1
 800062e:	2dff      	cmp	r5, #255	; 0xff
 8000630:	d033      	beq.n	800069a <__aeabi_fadd+0x14e>
 8000632:	2301      	movs	r3, #1
 8000634:	4a93      	ldr	r2, [pc, #588]	; (8000884 <__aeabi_fadd+0x338>)
 8000636:	4003      	ands	r3, r0
 8000638:	0840      	lsrs	r0, r0, #1
 800063a:	4010      	ands	r0, r2
 800063c:	4318      	orrs	r0, r3
 800063e:	e7b9      	b.n	80005b4 <__aeabi_fadd+0x68>
 8000640:	2e00      	cmp	r6, #0
 8000642:	d100      	bne.n	8000646 <__aeabi_fadd+0xfa>
 8000644:	e083      	b.n	800074e <__aeabi_fadd+0x202>
 8000646:	1e51      	subs	r1, r2, #1
 8000648:	2a01      	cmp	r2, #1
 800064a:	d100      	bne.n	800064e <__aeabi_fadd+0x102>
 800064c:	e0d8      	b.n	8000800 <__aeabi_fadd+0x2b4>
 800064e:	2aff      	cmp	r2, #255	; 0xff
 8000650:	d045      	beq.n	80006de <__aeabi_fadd+0x192>
 8000652:	000a      	movs	r2, r1
 8000654:	e798      	b.n	8000588 <__aeabi_fadd+0x3c>
 8000656:	27fe      	movs	r7, #254	; 0xfe
 8000658:	1c6a      	adds	r2, r5, #1
 800065a:	4217      	tst	r7, r2
 800065c:	d000      	beq.n	8000660 <__aeabi_fadd+0x114>
 800065e:	e086      	b.n	800076e <__aeabi_fadd+0x222>
 8000660:	2d00      	cmp	r5, #0
 8000662:	d000      	beq.n	8000666 <__aeabi_fadd+0x11a>
 8000664:	e0b7      	b.n	80007d6 <__aeabi_fadd+0x28a>
 8000666:	4643      	mov	r3, r8
 8000668:	2b00      	cmp	r3, #0
 800066a:	d100      	bne.n	800066e <__aeabi_fadd+0x122>
 800066c:	e0f3      	b.n	8000856 <__aeabi_fadd+0x30a>
 800066e:	2200      	movs	r2, #0
 8000670:	2e00      	cmp	r6, #0
 8000672:	d0b0      	beq.n	80005d6 <__aeabi_fadd+0x8a>
 8000674:	1b98      	subs	r0, r3, r6
 8000676:	0143      	lsls	r3, r0, #5
 8000678:	d400      	bmi.n	800067c <__aeabi_fadd+0x130>
 800067a:	e0fa      	b.n	8000872 <__aeabi_fadd+0x326>
 800067c:	4643      	mov	r3, r8
 800067e:	000c      	movs	r4, r1
 8000680:	1af0      	subs	r0, r6, r3
 8000682:	e797      	b.n	80005b4 <__aeabi_fadd+0x68>
 8000684:	2e00      	cmp	r6, #0
 8000686:	d100      	bne.n	800068a <__aeabi_fadd+0x13e>
 8000688:	e0c8      	b.n	800081c <__aeabi_fadd+0x2d0>
 800068a:	1e4a      	subs	r2, r1, #1
 800068c:	2901      	cmp	r1, #1
 800068e:	d100      	bne.n	8000692 <__aeabi_fadd+0x146>
 8000690:	e0ae      	b.n	80007f0 <__aeabi_fadd+0x2a4>
 8000692:	29ff      	cmp	r1, #255	; 0xff
 8000694:	d023      	beq.n	80006de <__aeabi_fadd+0x192>
 8000696:	0011      	movs	r1, r2
 8000698:	e7c1      	b.n	800061e <__aeabi_fadd+0xd2>
 800069a:	2300      	movs	r3, #0
 800069c:	22ff      	movs	r2, #255	; 0xff
 800069e:	469c      	mov	ip, r3
 80006a0:	e799      	b.n	80005d6 <__aeabi_fadd+0x8a>
 80006a2:	21fe      	movs	r1, #254	; 0xfe
 80006a4:	1c6a      	adds	r2, r5, #1
 80006a6:	4211      	tst	r1, r2
 80006a8:	d077      	beq.n	800079a <__aeabi_fadd+0x24e>
 80006aa:	2aff      	cmp	r2, #255	; 0xff
 80006ac:	d0f5      	beq.n	800069a <__aeabi_fadd+0x14e>
 80006ae:	0015      	movs	r5, r2
 80006b0:	4446      	add	r6, r8
 80006b2:	0870      	lsrs	r0, r6, #1
 80006b4:	0743      	lsls	r3, r0, #29
 80006b6:	d000      	beq.n	80006ba <__aeabi_fadd+0x16e>
 80006b8:	e77e      	b.n	80005b8 <__aeabi_fadd+0x6c>
 80006ba:	08c3      	lsrs	r3, r0, #3
 80006bc:	2dff      	cmp	r5, #255	; 0xff
 80006be:	d00e      	beq.n	80006de <__aeabi_fadd+0x192>
 80006c0:	025b      	lsls	r3, r3, #9
 80006c2:	0a5b      	lsrs	r3, r3, #9
 80006c4:	469c      	mov	ip, r3
 80006c6:	b2ea      	uxtb	r2, r5
 80006c8:	e785      	b.n	80005d6 <__aeabi_fadd+0x8a>
 80006ca:	2e00      	cmp	r6, #0
 80006cc:	d007      	beq.n	80006de <__aeabi_fadd+0x192>
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	03d2      	lsls	r2, r2, #15
 80006d2:	4213      	tst	r3, r2
 80006d4:	d003      	beq.n	80006de <__aeabi_fadd+0x192>
 80006d6:	4210      	tst	r0, r2
 80006d8:	d101      	bne.n	80006de <__aeabi_fadd+0x192>
 80006da:	000c      	movs	r4, r1
 80006dc:	0003      	movs	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d0db      	beq.n	800069a <__aeabi_fadd+0x14e>
 80006e2:	2080      	movs	r0, #128	; 0x80
 80006e4:	03c0      	lsls	r0, r0, #15
 80006e6:	4318      	orrs	r0, r3
 80006e8:	0240      	lsls	r0, r0, #9
 80006ea:	0a43      	lsrs	r3, r0, #9
 80006ec:	469c      	mov	ip, r3
 80006ee:	22ff      	movs	r2, #255	; 0xff
 80006f0:	e771      	b.n	80005d6 <__aeabi_fadd+0x8a>
 80006f2:	2900      	cmp	r1, #0
 80006f4:	d0d5      	beq.n	80006a2 <__aeabi_fadd+0x156>
 80006f6:	1b7a      	subs	r2, r7, r5
 80006f8:	2d00      	cmp	r5, #0
 80006fa:	d160      	bne.n	80007be <__aeabi_fadd+0x272>
 80006fc:	4643      	mov	r3, r8
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d024      	beq.n	800074c <__aeabi_fadd+0x200>
 8000702:	1e53      	subs	r3, r2, #1
 8000704:	2a01      	cmp	r2, #1
 8000706:	d073      	beq.n	80007f0 <__aeabi_fadd+0x2a4>
 8000708:	2aff      	cmp	r2, #255	; 0xff
 800070a:	d0e7      	beq.n	80006dc <__aeabi_fadd+0x190>
 800070c:	001a      	movs	r2, r3
 800070e:	2a1b      	cmp	r2, #27
 8000710:	dc00      	bgt.n	8000714 <__aeabi_fadd+0x1c8>
 8000712:	e085      	b.n	8000820 <__aeabi_fadd+0x2d4>
 8000714:	2001      	movs	r0, #1
 8000716:	003d      	movs	r5, r7
 8000718:	1980      	adds	r0, r0, r6
 800071a:	e785      	b.n	8000628 <__aeabi_fadd+0xdc>
 800071c:	2320      	movs	r3, #32
 800071e:	003a      	movs	r2, r7
 8000720:	1b45      	subs	r5, r0, r5
 8000722:	0038      	movs	r0, r7
 8000724:	3501      	adds	r5, #1
 8000726:	40ea      	lsrs	r2, r5
 8000728:	1b5d      	subs	r5, r3, r5
 800072a:	40a8      	lsls	r0, r5
 800072c:	1e43      	subs	r3, r0, #1
 800072e:	4198      	sbcs	r0, r3
 8000730:	2500      	movs	r5, #0
 8000732:	4310      	orrs	r0, r2
 8000734:	e73e      	b.n	80005b4 <__aeabi_fadd+0x68>
 8000736:	2320      	movs	r3, #32
 8000738:	0030      	movs	r0, r6
 800073a:	1a9b      	subs	r3, r3, r2
 800073c:	0031      	movs	r1, r6
 800073e:	4098      	lsls	r0, r3
 8000740:	40d1      	lsrs	r1, r2
 8000742:	1e43      	subs	r3, r0, #1
 8000744:	4198      	sbcs	r0, r3
 8000746:	4308      	orrs	r0, r1
 8000748:	e722      	b.n	8000590 <__aeabi_fadd+0x44>
 800074a:	000c      	movs	r4, r1
 800074c:	0003      	movs	r3, r0
 800074e:	0015      	movs	r5, r2
 8000750:	e7b4      	b.n	80006bc <__aeabi_fadd+0x170>
 8000752:	2fff      	cmp	r7, #255	; 0xff
 8000754:	d0c1      	beq.n	80006da <__aeabi_fadd+0x18e>
 8000756:	2380      	movs	r3, #128	; 0x80
 8000758:	4640      	mov	r0, r8
 800075a:	04db      	lsls	r3, r3, #19
 800075c:	4318      	orrs	r0, r3
 800075e:	4680      	mov	r8, r0
 8000760:	2a1b      	cmp	r2, #27
 8000762:	dd51      	ble.n	8000808 <__aeabi_fadd+0x2bc>
 8000764:	2001      	movs	r0, #1
 8000766:	000c      	movs	r4, r1
 8000768:	003d      	movs	r5, r7
 800076a:	1a30      	subs	r0, r6, r0
 800076c:	e712      	b.n	8000594 <__aeabi_fadd+0x48>
 800076e:	4643      	mov	r3, r8
 8000770:	1b9f      	subs	r7, r3, r6
 8000772:	017b      	lsls	r3, r7, #5
 8000774:	d42b      	bmi.n	80007ce <__aeabi_fadd+0x282>
 8000776:	2f00      	cmp	r7, #0
 8000778:	d000      	beq.n	800077c <__aeabi_fadd+0x230>
 800077a:	e710      	b.n	800059e <__aeabi_fadd+0x52>
 800077c:	2300      	movs	r3, #0
 800077e:	2400      	movs	r4, #0
 8000780:	2200      	movs	r2, #0
 8000782:	469c      	mov	ip, r3
 8000784:	e727      	b.n	80005d6 <__aeabi_fadd+0x8a>
 8000786:	2320      	movs	r3, #32
 8000788:	0032      	movs	r2, r6
 800078a:	0030      	movs	r0, r6
 800078c:	40ca      	lsrs	r2, r1
 800078e:	1a59      	subs	r1, r3, r1
 8000790:	4088      	lsls	r0, r1
 8000792:	1e43      	subs	r3, r0, #1
 8000794:	4198      	sbcs	r0, r3
 8000796:	4310      	orrs	r0, r2
 8000798:	e745      	b.n	8000626 <__aeabi_fadd+0xda>
 800079a:	2d00      	cmp	r5, #0
 800079c:	d14a      	bne.n	8000834 <__aeabi_fadd+0x2e8>
 800079e:	4643      	mov	r3, r8
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d063      	beq.n	800086c <__aeabi_fadd+0x320>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2e00      	cmp	r6, #0
 80007a8:	d100      	bne.n	80007ac <__aeabi_fadd+0x260>
 80007aa:	e714      	b.n	80005d6 <__aeabi_fadd+0x8a>
 80007ac:	0030      	movs	r0, r6
 80007ae:	4440      	add	r0, r8
 80007b0:	0143      	lsls	r3, r0, #5
 80007b2:	d400      	bmi.n	80007b6 <__aeabi_fadd+0x26a>
 80007b4:	e77e      	b.n	80006b4 <__aeabi_fadd+0x168>
 80007b6:	4b32      	ldr	r3, [pc, #200]	; (8000880 <__aeabi_fadd+0x334>)
 80007b8:	3501      	adds	r5, #1
 80007ba:	4018      	ands	r0, r3
 80007bc:	e77a      	b.n	80006b4 <__aeabi_fadd+0x168>
 80007be:	2fff      	cmp	r7, #255	; 0xff
 80007c0:	d08c      	beq.n	80006dc <__aeabi_fadd+0x190>
 80007c2:	2380      	movs	r3, #128	; 0x80
 80007c4:	4641      	mov	r1, r8
 80007c6:	04db      	lsls	r3, r3, #19
 80007c8:	4319      	orrs	r1, r3
 80007ca:	4688      	mov	r8, r1
 80007cc:	e79f      	b.n	800070e <__aeabi_fadd+0x1c2>
 80007ce:	4643      	mov	r3, r8
 80007d0:	000c      	movs	r4, r1
 80007d2:	1af7      	subs	r7, r6, r3
 80007d4:	e6e3      	b.n	800059e <__aeabi_fadd+0x52>
 80007d6:	4642      	mov	r2, r8
 80007d8:	2a00      	cmp	r2, #0
 80007da:	d000      	beq.n	80007de <__aeabi_fadd+0x292>
 80007dc:	e775      	b.n	80006ca <__aeabi_fadd+0x17e>
 80007de:	2e00      	cmp	r6, #0
 80007e0:	d000      	beq.n	80007e4 <__aeabi_fadd+0x298>
 80007e2:	e77a      	b.n	80006da <__aeabi_fadd+0x18e>
 80007e4:	2380      	movs	r3, #128	; 0x80
 80007e6:	03db      	lsls	r3, r3, #15
 80007e8:	2400      	movs	r4, #0
 80007ea:	469c      	mov	ip, r3
 80007ec:	22ff      	movs	r2, #255	; 0xff
 80007ee:	e6f2      	b.n	80005d6 <__aeabi_fadd+0x8a>
 80007f0:	0030      	movs	r0, r6
 80007f2:	4440      	add	r0, r8
 80007f4:	2501      	movs	r5, #1
 80007f6:	0143      	lsls	r3, r0, #5
 80007f8:	d400      	bmi.n	80007fc <__aeabi_fadd+0x2b0>
 80007fa:	e75b      	b.n	80006b4 <__aeabi_fadd+0x168>
 80007fc:	2502      	movs	r5, #2
 80007fe:	e718      	b.n	8000632 <__aeabi_fadd+0xe6>
 8000800:	4643      	mov	r3, r8
 8000802:	2501      	movs	r5, #1
 8000804:	1b98      	subs	r0, r3, r6
 8000806:	e6c5      	b.n	8000594 <__aeabi_fadd+0x48>
 8000808:	2320      	movs	r3, #32
 800080a:	4644      	mov	r4, r8
 800080c:	4640      	mov	r0, r8
 800080e:	40d4      	lsrs	r4, r2
 8000810:	1a9a      	subs	r2, r3, r2
 8000812:	4090      	lsls	r0, r2
 8000814:	1e43      	subs	r3, r0, #1
 8000816:	4198      	sbcs	r0, r3
 8000818:	4320      	orrs	r0, r4
 800081a:	e7a4      	b.n	8000766 <__aeabi_fadd+0x21a>
 800081c:	000d      	movs	r5, r1
 800081e:	e74d      	b.n	80006bc <__aeabi_fadd+0x170>
 8000820:	2320      	movs	r3, #32
 8000822:	4641      	mov	r1, r8
 8000824:	4640      	mov	r0, r8
 8000826:	40d1      	lsrs	r1, r2
 8000828:	1a9a      	subs	r2, r3, r2
 800082a:	4090      	lsls	r0, r2
 800082c:	1e43      	subs	r3, r0, #1
 800082e:	4198      	sbcs	r0, r3
 8000830:	4308      	orrs	r0, r1
 8000832:	e770      	b.n	8000716 <__aeabi_fadd+0x1ca>
 8000834:	4642      	mov	r2, r8
 8000836:	2a00      	cmp	r2, #0
 8000838:	d100      	bne.n	800083c <__aeabi_fadd+0x2f0>
 800083a:	e74f      	b.n	80006dc <__aeabi_fadd+0x190>
 800083c:	2e00      	cmp	r6, #0
 800083e:	d100      	bne.n	8000842 <__aeabi_fadd+0x2f6>
 8000840:	e74d      	b.n	80006de <__aeabi_fadd+0x192>
 8000842:	2280      	movs	r2, #128	; 0x80
 8000844:	03d2      	lsls	r2, r2, #15
 8000846:	4213      	tst	r3, r2
 8000848:	d100      	bne.n	800084c <__aeabi_fadd+0x300>
 800084a:	e748      	b.n	80006de <__aeabi_fadd+0x192>
 800084c:	4210      	tst	r0, r2
 800084e:	d000      	beq.n	8000852 <__aeabi_fadd+0x306>
 8000850:	e745      	b.n	80006de <__aeabi_fadd+0x192>
 8000852:	0003      	movs	r3, r0
 8000854:	e743      	b.n	80006de <__aeabi_fadd+0x192>
 8000856:	2e00      	cmp	r6, #0
 8000858:	d090      	beq.n	800077c <__aeabi_fadd+0x230>
 800085a:	000c      	movs	r4, r1
 800085c:	4684      	mov	ip, r0
 800085e:	2200      	movs	r2, #0
 8000860:	e6b9      	b.n	80005d6 <__aeabi_fadd+0x8a>
 8000862:	4643      	mov	r3, r8
 8000864:	000c      	movs	r4, r1
 8000866:	1af0      	subs	r0, r6, r3
 8000868:	3501      	adds	r5, #1
 800086a:	e693      	b.n	8000594 <__aeabi_fadd+0x48>
 800086c:	4684      	mov	ip, r0
 800086e:	2200      	movs	r2, #0
 8000870:	e6b1      	b.n	80005d6 <__aeabi_fadd+0x8a>
 8000872:	2800      	cmp	r0, #0
 8000874:	d000      	beq.n	8000878 <__aeabi_fadd+0x32c>
 8000876:	e71d      	b.n	80006b4 <__aeabi_fadd+0x168>
 8000878:	2300      	movs	r3, #0
 800087a:	2400      	movs	r4, #0
 800087c:	469c      	mov	ip, r3
 800087e:	e6aa      	b.n	80005d6 <__aeabi_fadd+0x8a>
 8000880:	fbffffff 	.word	0xfbffffff
 8000884:	7dffffff 	.word	0x7dffffff

08000888 <__aeabi_fdiv>:
 8000888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800088a:	464f      	mov	r7, r9
 800088c:	4646      	mov	r6, r8
 800088e:	46d6      	mov	lr, sl
 8000890:	0245      	lsls	r5, r0, #9
 8000892:	b5c0      	push	{r6, r7, lr}
 8000894:	0047      	lsls	r7, r0, #1
 8000896:	1c0c      	adds	r4, r1, #0
 8000898:	0a6d      	lsrs	r5, r5, #9
 800089a:	0e3f      	lsrs	r7, r7, #24
 800089c:	0fc6      	lsrs	r6, r0, #31
 800089e:	2f00      	cmp	r7, #0
 80008a0:	d100      	bne.n	80008a4 <__aeabi_fdiv+0x1c>
 80008a2:	e070      	b.n	8000986 <__aeabi_fdiv+0xfe>
 80008a4:	2fff      	cmp	r7, #255	; 0xff
 80008a6:	d100      	bne.n	80008aa <__aeabi_fdiv+0x22>
 80008a8:	e075      	b.n	8000996 <__aeabi_fdiv+0x10e>
 80008aa:	00eb      	lsls	r3, r5, #3
 80008ac:	2580      	movs	r5, #128	; 0x80
 80008ae:	04ed      	lsls	r5, r5, #19
 80008b0:	431d      	orrs	r5, r3
 80008b2:	2300      	movs	r3, #0
 80008b4:	4699      	mov	r9, r3
 80008b6:	469a      	mov	sl, r3
 80008b8:	3f7f      	subs	r7, #127	; 0x7f
 80008ba:	0260      	lsls	r0, r4, #9
 80008bc:	0a43      	lsrs	r3, r0, #9
 80008be:	4698      	mov	r8, r3
 80008c0:	0063      	lsls	r3, r4, #1
 80008c2:	0e1b      	lsrs	r3, r3, #24
 80008c4:	0fe4      	lsrs	r4, r4, #31
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d04e      	beq.n	8000968 <__aeabi_fdiv+0xe0>
 80008ca:	2bff      	cmp	r3, #255	; 0xff
 80008cc:	d046      	beq.n	800095c <__aeabi_fdiv+0xd4>
 80008ce:	4642      	mov	r2, r8
 80008d0:	00d0      	lsls	r0, r2, #3
 80008d2:	2280      	movs	r2, #128	; 0x80
 80008d4:	04d2      	lsls	r2, r2, #19
 80008d6:	4302      	orrs	r2, r0
 80008d8:	4690      	mov	r8, r2
 80008da:	2200      	movs	r2, #0
 80008dc:	3b7f      	subs	r3, #127	; 0x7f
 80008de:	0031      	movs	r1, r6
 80008e0:	1aff      	subs	r7, r7, r3
 80008e2:	464b      	mov	r3, r9
 80008e4:	4061      	eors	r1, r4
 80008e6:	b2c9      	uxtb	r1, r1
 80008e8:	4313      	orrs	r3, r2
 80008ea:	2b0f      	cmp	r3, #15
 80008ec:	d900      	bls.n	80008f0 <__aeabi_fdiv+0x68>
 80008ee:	e0b5      	b.n	8000a5c <__aeabi_fdiv+0x1d4>
 80008f0:	486e      	ldr	r0, [pc, #440]	; (8000aac <__aeabi_fdiv+0x224>)
 80008f2:	009b      	lsls	r3, r3, #2
 80008f4:	58c3      	ldr	r3, [r0, r3]
 80008f6:	469f      	mov	pc, r3
 80008f8:	2300      	movs	r3, #0
 80008fa:	4698      	mov	r8, r3
 80008fc:	0026      	movs	r6, r4
 80008fe:	4645      	mov	r5, r8
 8000900:	4692      	mov	sl, r2
 8000902:	4653      	mov	r3, sl
 8000904:	2b02      	cmp	r3, #2
 8000906:	d100      	bne.n	800090a <__aeabi_fdiv+0x82>
 8000908:	e089      	b.n	8000a1e <__aeabi_fdiv+0x196>
 800090a:	2b03      	cmp	r3, #3
 800090c:	d100      	bne.n	8000910 <__aeabi_fdiv+0x88>
 800090e:	e09e      	b.n	8000a4e <__aeabi_fdiv+0x1c6>
 8000910:	2b01      	cmp	r3, #1
 8000912:	d018      	beq.n	8000946 <__aeabi_fdiv+0xbe>
 8000914:	003b      	movs	r3, r7
 8000916:	337f      	adds	r3, #127	; 0x7f
 8000918:	2b00      	cmp	r3, #0
 800091a:	dd69      	ble.n	80009f0 <__aeabi_fdiv+0x168>
 800091c:	076a      	lsls	r2, r5, #29
 800091e:	d004      	beq.n	800092a <__aeabi_fdiv+0xa2>
 8000920:	220f      	movs	r2, #15
 8000922:	402a      	ands	r2, r5
 8000924:	2a04      	cmp	r2, #4
 8000926:	d000      	beq.n	800092a <__aeabi_fdiv+0xa2>
 8000928:	3504      	adds	r5, #4
 800092a:	012a      	lsls	r2, r5, #4
 800092c:	d503      	bpl.n	8000936 <__aeabi_fdiv+0xae>
 800092e:	4b60      	ldr	r3, [pc, #384]	; (8000ab0 <__aeabi_fdiv+0x228>)
 8000930:	401d      	ands	r5, r3
 8000932:	003b      	movs	r3, r7
 8000934:	3380      	adds	r3, #128	; 0x80
 8000936:	2bfe      	cmp	r3, #254	; 0xfe
 8000938:	dd00      	ble.n	800093c <__aeabi_fdiv+0xb4>
 800093a:	e070      	b.n	8000a1e <__aeabi_fdiv+0x196>
 800093c:	01ad      	lsls	r5, r5, #6
 800093e:	0a6d      	lsrs	r5, r5, #9
 8000940:	b2d8      	uxtb	r0, r3
 8000942:	e002      	b.n	800094a <__aeabi_fdiv+0xc2>
 8000944:	000e      	movs	r6, r1
 8000946:	2000      	movs	r0, #0
 8000948:	2500      	movs	r5, #0
 800094a:	05c0      	lsls	r0, r0, #23
 800094c:	4328      	orrs	r0, r5
 800094e:	07f6      	lsls	r6, r6, #31
 8000950:	4330      	orrs	r0, r6
 8000952:	bce0      	pop	{r5, r6, r7}
 8000954:	46ba      	mov	sl, r7
 8000956:	46b1      	mov	r9, r6
 8000958:	46a8      	mov	r8, r5
 800095a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800095c:	4643      	mov	r3, r8
 800095e:	2b00      	cmp	r3, #0
 8000960:	d13f      	bne.n	80009e2 <__aeabi_fdiv+0x15a>
 8000962:	2202      	movs	r2, #2
 8000964:	3fff      	subs	r7, #255	; 0xff
 8000966:	e003      	b.n	8000970 <__aeabi_fdiv+0xe8>
 8000968:	4643      	mov	r3, r8
 800096a:	2b00      	cmp	r3, #0
 800096c:	d12d      	bne.n	80009ca <__aeabi_fdiv+0x142>
 800096e:	2201      	movs	r2, #1
 8000970:	0031      	movs	r1, r6
 8000972:	464b      	mov	r3, r9
 8000974:	4061      	eors	r1, r4
 8000976:	b2c9      	uxtb	r1, r1
 8000978:	4313      	orrs	r3, r2
 800097a:	2b0f      	cmp	r3, #15
 800097c:	d834      	bhi.n	80009e8 <__aeabi_fdiv+0x160>
 800097e:	484d      	ldr	r0, [pc, #308]	; (8000ab4 <__aeabi_fdiv+0x22c>)
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	58c3      	ldr	r3, [r0, r3]
 8000984:	469f      	mov	pc, r3
 8000986:	2d00      	cmp	r5, #0
 8000988:	d113      	bne.n	80009b2 <__aeabi_fdiv+0x12a>
 800098a:	2304      	movs	r3, #4
 800098c:	4699      	mov	r9, r3
 800098e:	3b03      	subs	r3, #3
 8000990:	2700      	movs	r7, #0
 8000992:	469a      	mov	sl, r3
 8000994:	e791      	b.n	80008ba <__aeabi_fdiv+0x32>
 8000996:	2d00      	cmp	r5, #0
 8000998:	d105      	bne.n	80009a6 <__aeabi_fdiv+0x11e>
 800099a:	2308      	movs	r3, #8
 800099c:	4699      	mov	r9, r3
 800099e:	3b06      	subs	r3, #6
 80009a0:	27ff      	movs	r7, #255	; 0xff
 80009a2:	469a      	mov	sl, r3
 80009a4:	e789      	b.n	80008ba <__aeabi_fdiv+0x32>
 80009a6:	230c      	movs	r3, #12
 80009a8:	4699      	mov	r9, r3
 80009aa:	3b09      	subs	r3, #9
 80009ac:	27ff      	movs	r7, #255	; 0xff
 80009ae:	469a      	mov	sl, r3
 80009b0:	e783      	b.n	80008ba <__aeabi_fdiv+0x32>
 80009b2:	0028      	movs	r0, r5
 80009b4:	f002 fb3e 	bl	8003034 <__clzsi2>
 80009b8:	2776      	movs	r7, #118	; 0x76
 80009ba:	1f43      	subs	r3, r0, #5
 80009bc:	409d      	lsls	r5, r3
 80009be:	2300      	movs	r3, #0
 80009c0:	427f      	negs	r7, r7
 80009c2:	4699      	mov	r9, r3
 80009c4:	469a      	mov	sl, r3
 80009c6:	1a3f      	subs	r7, r7, r0
 80009c8:	e777      	b.n	80008ba <__aeabi_fdiv+0x32>
 80009ca:	4640      	mov	r0, r8
 80009cc:	f002 fb32 	bl	8003034 <__clzsi2>
 80009d0:	4642      	mov	r2, r8
 80009d2:	1f43      	subs	r3, r0, #5
 80009d4:	409a      	lsls	r2, r3
 80009d6:	2376      	movs	r3, #118	; 0x76
 80009d8:	425b      	negs	r3, r3
 80009da:	4690      	mov	r8, r2
 80009dc:	1a1b      	subs	r3, r3, r0
 80009de:	2200      	movs	r2, #0
 80009e0:	e77d      	b.n	80008de <__aeabi_fdiv+0x56>
 80009e2:	23ff      	movs	r3, #255	; 0xff
 80009e4:	2203      	movs	r2, #3
 80009e6:	e77a      	b.n	80008de <__aeabi_fdiv+0x56>
 80009e8:	000e      	movs	r6, r1
 80009ea:	20ff      	movs	r0, #255	; 0xff
 80009ec:	2500      	movs	r5, #0
 80009ee:	e7ac      	b.n	800094a <__aeabi_fdiv+0xc2>
 80009f0:	2001      	movs	r0, #1
 80009f2:	1ac0      	subs	r0, r0, r3
 80009f4:	281b      	cmp	r0, #27
 80009f6:	dca6      	bgt.n	8000946 <__aeabi_fdiv+0xbe>
 80009f8:	379e      	adds	r7, #158	; 0x9e
 80009fa:	002a      	movs	r2, r5
 80009fc:	40bd      	lsls	r5, r7
 80009fe:	40c2      	lsrs	r2, r0
 8000a00:	1e6b      	subs	r3, r5, #1
 8000a02:	419d      	sbcs	r5, r3
 8000a04:	4315      	orrs	r5, r2
 8000a06:	076b      	lsls	r3, r5, #29
 8000a08:	d004      	beq.n	8000a14 <__aeabi_fdiv+0x18c>
 8000a0a:	230f      	movs	r3, #15
 8000a0c:	402b      	ands	r3, r5
 8000a0e:	2b04      	cmp	r3, #4
 8000a10:	d000      	beq.n	8000a14 <__aeabi_fdiv+0x18c>
 8000a12:	3504      	adds	r5, #4
 8000a14:	016b      	lsls	r3, r5, #5
 8000a16:	d544      	bpl.n	8000aa2 <__aeabi_fdiv+0x21a>
 8000a18:	2001      	movs	r0, #1
 8000a1a:	2500      	movs	r5, #0
 8000a1c:	e795      	b.n	800094a <__aeabi_fdiv+0xc2>
 8000a1e:	20ff      	movs	r0, #255	; 0xff
 8000a20:	2500      	movs	r5, #0
 8000a22:	e792      	b.n	800094a <__aeabi_fdiv+0xc2>
 8000a24:	2580      	movs	r5, #128	; 0x80
 8000a26:	2600      	movs	r6, #0
 8000a28:	20ff      	movs	r0, #255	; 0xff
 8000a2a:	03ed      	lsls	r5, r5, #15
 8000a2c:	e78d      	b.n	800094a <__aeabi_fdiv+0xc2>
 8000a2e:	2300      	movs	r3, #0
 8000a30:	4698      	mov	r8, r3
 8000a32:	2080      	movs	r0, #128	; 0x80
 8000a34:	03c0      	lsls	r0, r0, #15
 8000a36:	4205      	tst	r5, r0
 8000a38:	d009      	beq.n	8000a4e <__aeabi_fdiv+0x1c6>
 8000a3a:	4643      	mov	r3, r8
 8000a3c:	4203      	tst	r3, r0
 8000a3e:	d106      	bne.n	8000a4e <__aeabi_fdiv+0x1c6>
 8000a40:	4645      	mov	r5, r8
 8000a42:	4305      	orrs	r5, r0
 8000a44:	026d      	lsls	r5, r5, #9
 8000a46:	0026      	movs	r6, r4
 8000a48:	20ff      	movs	r0, #255	; 0xff
 8000a4a:	0a6d      	lsrs	r5, r5, #9
 8000a4c:	e77d      	b.n	800094a <__aeabi_fdiv+0xc2>
 8000a4e:	2080      	movs	r0, #128	; 0x80
 8000a50:	03c0      	lsls	r0, r0, #15
 8000a52:	4305      	orrs	r5, r0
 8000a54:	026d      	lsls	r5, r5, #9
 8000a56:	20ff      	movs	r0, #255	; 0xff
 8000a58:	0a6d      	lsrs	r5, r5, #9
 8000a5a:	e776      	b.n	800094a <__aeabi_fdiv+0xc2>
 8000a5c:	4642      	mov	r2, r8
 8000a5e:	016b      	lsls	r3, r5, #5
 8000a60:	0150      	lsls	r0, r2, #5
 8000a62:	4283      	cmp	r3, r0
 8000a64:	d219      	bcs.n	8000a9a <__aeabi_fdiv+0x212>
 8000a66:	221b      	movs	r2, #27
 8000a68:	2500      	movs	r5, #0
 8000a6a:	3f01      	subs	r7, #1
 8000a6c:	2601      	movs	r6, #1
 8000a6e:	001c      	movs	r4, r3
 8000a70:	006d      	lsls	r5, r5, #1
 8000a72:	005b      	lsls	r3, r3, #1
 8000a74:	2c00      	cmp	r4, #0
 8000a76:	db01      	blt.n	8000a7c <__aeabi_fdiv+0x1f4>
 8000a78:	4298      	cmp	r0, r3
 8000a7a:	d801      	bhi.n	8000a80 <__aeabi_fdiv+0x1f8>
 8000a7c:	1a1b      	subs	r3, r3, r0
 8000a7e:	4335      	orrs	r5, r6
 8000a80:	3a01      	subs	r2, #1
 8000a82:	2a00      	cmp	r2, #0
 8000a84:	d1f3      	bne.n	8000a6e <__aeabi_fdiv+0x1e6>
 8000a86:	1e5a      	subs	r2, r3, #1
 8000a88:	4193      	sbcs	r3, r2
 8000a8a:	431d      	orrs	r5, r3
 8000a8c:	003b      	movs	r3, r7
 8000a8e:	337f      	adds	r3, #127	; 0x7f
 8000a90:	000e      	movs	r6, r1
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	dd00      	ble.n	8000a98 <__aeabi_fdiv+0x210>
 8000a96:	e741      	b.n	800091c <__aeabi_fdiv+0x94>
 8000a98:	e7aa      	b.n	80009f0 <__aeabi_fdiv+0x168>
 8000a9a:	221a      	movs	r2, #26
 8000a9c:	2501      	movs	r5, #1
 8000a9e:	1a1b      	subs	r3, r3, r0
 8000aa0:	e7e4      	b.n	8000a6c <__aeabi_fdiv+0x1e4>
 8000aa2:	01ad      	lsls	r5, r5, #6
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	0a6d      	lsrs	r5, r5, #9
 8000aa8:	e74f      	b.n	800094a <__aeabi_fdiv+0xc2>
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	08014d24 	.word	0x08014d24
 8000ab0:	f7ffffff 	.word	0xf7ffffff
 8000ab4:	08014d64 	.word	0x08014d64

08000ab8 <__eqsf2>:
 8000ab8:	b570      	push	{r4, r5, r6, lr}
 8000aba:	0042      	lsls	r2, r0, #1
 8000abc:	0245      	lsls	r5, r0, #9
 8000abe:	024e      	lsls	r6, r1, #9
 8000ac0:	004c      	lsls	r4, r1, #1
 8000ac2:	0fc3      	lsrs	r3, r0, #31
 8000ac4:	0a6d      	lsrs	r5, r5, #9
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	0e12      	lsrs	r2, r2, #24
 8000aca:	0a76      	lsrs	r6, r6, #9
 8000acc:	0e24      	lsrs	r4, r4, #24
 8000ace:	0fc9      	lsrs	r1, r1, #31
 8000ad0:	2aff      	cmp	r2, #255	; 0xff
 8000ad2:	d006      	beq.n	8000ae2 <__eqsf2+0x2a>
 8000ad4:	2cff      	cmp	r4, #255	; 0xff
 8000ad6:	d003      	beq.n	8000ae0 <__eqsf2+0x28>
 8000ad8:	42a2      	cmp	r2, r4
 8000ada:	d101      	bne.n	8000ae0 <__eqsf2+0x28>
 8000adc:	42b5      	cmp	r5, r6
 8000ade:	d006      	beq.n	8000aee <__eqsf2+0x36>
 8000ae0:	bd70      	pop	{r4, r5, r6, pc}
 8000ae2:	2d00      	cmp	r5, #0
 8000ae4:	d1fc      	bne.n	8000ae0 <__eqsf2+0x28>
 8000ae6:	2cff      	cmp	r4, #255	; 0xff
 8000ae8:	d1fa      	bne.n	8000ae0 <__eqsf2+0x28>
 8000aea:	2e00      	cmp	r6, #0
 8000aec:	d1f8      	bne.n	8000ae0 <__eqsf2+0x28>
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d006      	beq.n	8000b00 <__eqsf2+0x48>
 8000af2:	2001      	movs	r0, #1
 8000af4:	2a00      	cmp	r2, #0
 8000af6:	d1f3      	bne.n	8000ae0 <__eqsf2+0x28>
 8000af8:	0028      	movs	r0, r5
 8000afa:	1e43      	subs	r3, r0, #1
 8000afc:	4198      	sbcs	r0, r3
 8000afe:	e7ef      	b.n	8000ae0 <__eqsf2+0x28>
 8000b00:	2000      	movs	r0, #0
 8000b02:	e7ed      	b.n	8000ae0 <__eqsf2+0x28>

08000b04 <__gesf2>:
 8000b04:	b570      	push	{r4, r5, r6, lr}
 8000b06:	0042      	lsls	r2, r0, #1
 8000b08:	0245      	lsls	r5, r0, #9
 8000b0a:	024e      	lsls	r6, r1, #9
 8000b0c:	004c      	lsls	r4, r1, #1
 8000b0e:	0fc3      	lsrs	r3, r0, #31
 8000b10:	0a6d      	lsrs	r5, r5, #9
 8000b12:	0e12      	lsrs	r2, r2, #24
 8000b14:	0a76      	lsrs	r6, r6, #9
 8000b16:	0e24      	lsrs	r4, r4, #24
 8000b18:	0fc8      	lsrs	r0, r1, #31
 8000b1a:	2aff      	cmp	r2, #255	; 0xff
 8000b1c:	d01b      	beq.n	8000b56 <__gesf2+0x52>
 8000b1e:	2cff      	cmp	r4, #255	; 0xff
 8000b20:	d00e      	beq.n	8000b40 <__gesf2+0x3c>
 8000b22:	2a00      	cmp	r2, #0
 8000b24:	d11b      	bne.n	8000b5e <__gesf2+0x5a>
 8000b26:	2c00      	cmp	r4, #0
 8000b28:	d101      	bne.n	8000b2e <__gesf2+0x2a>
 8000b2a:	2e00      	cmp	r6, #0
 8000b2c:	d01c      	beq.n	8000b68 <__gesf2+0x64>
 8000b2e:	2d00      	cmp	r5, #0
 8000b30:	d00c      	beq.n	8000b4c <__gesf2+0x48>
 8000b32:	4283      	cmp	r3, r0
 8000b34:	d01c      	beq.n	8000b70 <__gesf2+0x6c>
 8000b36:	2102      	movs	r1, #2
 8000b38:	1e58      	subs	r0, r3, #1
 8000b3a:	4008      	ands	r0, r1
 8000b3c:	3801      	subs	r0, #1
 8000b3e:	bd70      	pop	{r4, r5, r6, pc}
 8000b40:	2e00      	cmp	r6, #0
 8000b42:	d122      	bne.n	8000b8a <__gesf2+0x86>
 8000b44:	2a00      	cmp	r2, #0
 8000b46:	d1f4      	bne.n	8000b32 <__gesf2+0x2e>
 8000b48:	2d00      	cmp	r5, #0
 8000b4a:	d1f2      	bne.n	8000b32 <__gesf2+0x2e>
 8000b4c:	2800      	cmp	r0, #0
 8000b4e:	d1f6      	bne.n	8000b3e <__gesf2+0x3a>
 8000b50:	2001      	movs	r0, #1
 8000b52:	4240      	negs	r0, r0
 8000b54:	e7f3      	b.n	8000b3e <__gesf2+0x3a>
 8000b56:	2d00      	cmp	r5, #0
 8000b58:	d117      	bne.n	8000b8a <__gesf2+0x86>
 8000b5a:	2cff      	cmp	r4, #255	; 0xff
 8000b5c:	d0f0      	beq.n	8000b40 <__gesf2+0x3c>
 8000b5e:	2c00      	cmp	r4, #0
 8000b60:	d1e7      	bne.n	8000b32 <__gesf2+0x2e>
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d1e5      	bne.n	8000b32 <__gesf2+0x2e>
 8000b66:	e7e6      	b.n	8000b36 <__gesf2+0x32>
 8000b68:	2000      	movs	r0, #0
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	d0e7      	beq.n	8000b3e <__gesf2+0x3a>
 8000b6e:	e7e2      	b.n	8000b36 <__gesf2+0x32>
 8000b70:	42a2      	cmp	r2, r4
 8000b72:	dc05      	bgt.n	8000b80 <__gesf2+0x7c>
 8000b74:	dbea      	blt.n	8000b4c <__gesf2+0x48>
 8000b76:	42b5      	cmp	r5, r6
 8000b78:	d802      	bhi.n	8000b80 <__gesf2+0x7c>
 8000b7a:	d3e7      	bcc.n	8000b4c <__gesf2+0x48>
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	e7de      	b.n	8000b3e <__gesf2+0x3a>
 8000b80:	4243      	negs	r3, r0
 8000b82:	4158      	adcs	r0, r3
 8000b84:	0040      	lsls	r0, r0, #1
 8000b86:	3801      	subs	r0, #1
 8000b88:	e7d9      	b.n	8000b3e <__gesf2+0x3a>
 8000b8a:	2002      	movs	r0, #2
 8000b8c:	4240      	negs	r0, r0
 8000b8e:	e7d6      	b.n	8000b3e <__gesf2+0x3a>

08000b90 <__lesf2>:
 8000b90:	b570      	push	{r4, r5, r6, lr}
 8000b92:	0042      	lsls	r2, r0, #1
 8000b94:	0245      	lsls	r5, r0, #9
 8000b96:	024e      	lsls	r6, r1, #9
 8000b98:	004c      	lsls	r4, r1, #1
 8000b9a:	0fc3      	lsrs	r3, r0, #31
 8000b9c:	0a6d      	lsrs	r5, r5, #9
 8000b9e:	0e12      	lsrs	r2, r2, #24
 8000ba0:	0a76      	lsrs	r6, r6, #9
 8000ba2:	0e24      	lsrs	r4, r4, #24
 8000ba4:	0fc8      	lsrs	r0, r1, #31
 8000ba6:	2aff      	cmp	r2, #255	; 0xff
 8000ba8:	d00b      	beq.n	8000bc2 <__lesf2+0x32>
 8000baa:	2cff      	cmp	r4, #255	; 0xff
 8000bac:	d00d      	beq.n	8000bca <__lesf2+0x3a>
 8000bae:	2a00      	cmp	r2, #0
 8000bb0:	d11f      	bne.n	8000bf2 <__lesf2+0x62>
 8000bb2:	2c00      	cmp	r4, #0
 8000bb4:	d116      	bne.n	8000be4 <__lesf2+0x54>
 8000bb6:	2e00      	cmp	r6, #0
 8000bb8:	d114      	bne.n	8000be4 <__lesf2+0x54>
 8000bba:	2000      	movs	r0, #0
 8000bbc:	2d00      	cmp	r5, #0
 8000bbe:	d010      	beq.n	8000be2 <__lesf2+0x52>
 8000bc0:	e009      	b.n	8000bd6 <__lesf2+0x46>
 8000bc2:	2d00      	cmp	r5, #0
 8000bc4:	d10c      	bne.n	8000be0 <__lesf2+0x50>
 8000bc6:	2cff      	cmp	r4, #255	; 0xff
 8000bc8:	d113      	bne.n	8000bf2 <__lesf2+0x62>
 8000bca:	2e00      	cmp	r6, #0
 8000bcc:	d108      	bne.n	8000be0 <__lesf2+0x50>
 8000bce:	2a00      	cmp	r2, #0
 8000bd0:	d008      	beq.n	8000be4 <__lesf2+0x54>
 8000bd2:	4283      	cmp	r3, r0
 8000bd4:	d012      	beq.n	8000bfc <__lesf2+0x6c>
 8000bd6:	2102      	movs	r1, #2
 8000bd8:	1e58      	subs	r0, r3, #1
 8000bda:	4008      	ands	r0, r1
 8000bdc:	3801      	subs	r0, #1
 8000bde:	e000      	b.n	8000be2 <__lesf2+0x52>
 8000be0:	2002      	movs	r0, #2
 8000be2:	bd70      	pop	{r4, r5, r6, pc}
 8000be4:	2d00      	cmp	r5, #0
 8000be6:	d1f4      	bne.n	8000bd2 <__lesf2+0x42>
 8000be8:	2800      	cmp	r0, #0
 8000bea:	d1fa      	bne.n	8000be2 <__lesf2+0x52>
 8000bec:	2001      	movs	r0, #1
 8000bee:	4240      	negs	r0, r0
 8000bf0:	e7f7      	b.n	8000be2 <__lesf2+0x52>
 8000bf2:	2c00      	cmp	r4, #0
 8000bf4:	d1ed      	bne.n	8000bd2 <__lesf2+0x42>
 8000bf6:	2e00      	cmp	r6, #0
 8000bf8:	d1eb      	bne.n	8000bd2 <__lesf2+0x42>
 8000bfa:	e7ec      	b.n	8000bd6 <__lesf2+0x46>
 8000bfc:	42a2      	cmp	r2, r4
 8000bfe:	dc05      	bgt.n	8000c0c <__lesf2+0x7c>
 8000c00:	dbf2      	blt.n	8000be8 <__lesf2+0x58>
 8000c02:	42b5      	cmp	r5, r6
 8000c04:	d802      	bhi.n	8000c0c <__lesf2+0x7c>
 8000c06:	d3ef      	bcc.n	8000be8 <__lesf2+0x58>
 8000c08:	2000      	movs	r0, #0
 8000c0a:	e7ea      	b.n	8000be2 <__lesf2+0x52>
 8000c0c:	4243      	negs	r3, r0
 8000c0e:	4158      	adcs	r0, r3
 8000c10:	0040      	lsls	r0, r0, #1
 8000c12:	3801      	subs	r0, #1
 8000c14:	e7e5      	b.n	8000be2 <__lesf2+0x52>
 8000c16:	46c0      	nop			; (mov r8, r8)

08000c18 <__aeabi_fmul>:
 8000c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c1a:	464f      	mov	r7, r9
 8000c1c:	4646      	mov	r6, r8
 8000c1e:	46d6      	mov	lr, sl
 8000c20:	0244      	lsls	r4, r0, #9
 8000c22:	0045      	lsls	r5, r0, #1
 8000c24:	b5c0      	push	{r6, r7, lr}
 8000c26:	0a64      	lsrs	r4, r4, #9
 8000c28:	1c0f      	adds	r7, r1, #0
 8000c2a:	0e2d      	lsrs	r5, r5, #24
 8000c2c:	0fc6      	lsrs	r6, r0, #31
 8000c2e:	2d00      	cmp	r5, #0
 8000c30:	d100      	bne.n	8000c34 <__aeabi_fmul+0x1c>
 8000c32:	e08d      	b.n	8000d50 <__aeabi_fmul+0x138>
 8000c34:	2dff      	cmp	r5, #255	; 0xff
 8000c36:	d100      	bne.n	8000c3a <__aeabi_fmul+0x22>
 8000c38:	e092      	b.n	8000d60 <__aeabi_fmul+0x148>
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	2080      	movs	r0, #128	; 0x80
 8000c3e:	4699      	mov	r9, r3
 8000c40:	469a      	mov	sl, r3
 8000c42:	00e4      	lsls	r4, r4, #3
 8000c44:	04c0      	lsls	r0, r0, #19
 8000c46:	4304      	orrs	r4, r0
 8000c48:	3d7f      	subs	r5, #127	; 0x7f
 8000c4a:	0278      	lsls	r0, r7, #9
 8000c4c:	0a43      	lsrs	r3, r0, #9
 8000c4e:	4698      	mov	r8, r3
 8000c50:	007b      	lsls	r3, r7, #1
 8000c52:	0e1b      	lsrs	r3, r3, #24
 8000c54:	0fff      	lsrs	r7, r7, #31
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d100      	bne.n	8000c5c <__aeabi_fmul+0x44>
 8000c5a:	e070      	b.n	8000d3e <__aeabi_fmul+0x126>
 8000c5c:	2bff      	cmp	r3, #255	; 0xff
 8000c5e:	d100      	bne.n	8000c62 <__aeabi_fmul+0x4a>
 8000c60:	e086      	b.n	8000d70 <__aeabi_fmul+0x158>
 8000c62:	4642      	mov	r2, r8
 8000c64:	00d0      	lsls	r0, r2, #3
 8000c66:	2280      	movs	r2, #128	; 0x80
 8000c68:	3b7f      	subs	r3, #127	; 0x7f
 8000c6a:	18ed      	adds	r5, r5, r3
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	04d2      	lsls	r2, r2, #19
 8000c70:	4302      	orrs	r2, r0
 8000c72:	4690      	mov	r8, r2
 8000c74:	469c      	mov	ip, r3
 8000c76:	0031      	movs	r1, r6
 8000c78:	464b      	mov	r3, r9
 8000c7a:	4079      	eors	r1, r7
 8000c7c:	1c68      	adds	r0, r5, #1
 8000c7e:	2b0f      	cmp	r3, #15
 8000c80:	d81c      	bhi.n	8000cbc <__aeabi_fmul+0xa4>
 8000c82:	4a76      	ldr	r2, [pc, #472]	; (8000e5c <__aeabi_fmul+0x244>)
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	58d3      	ldr	r3, [r2, r3]
 8000c88:	469f      	mov	pc, r3
 8000c8a:	0039      	movs	r1, r7
 8000c8c:	4644      	mov	r4, r8
 8000c8e:	46e2      	mov	sl, ip
 8000c90:	4653      	mov	r3, sl
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	d00f      	beq.n	8000cb6 <__aeabi_fmul+0x9e>
 8000c96:	2b03      	cmp	r3, #3
 8000c98:	d100      	bne.n	8000c9c <__aeabi_fmul+0x84>
 8000c9a:	e0d7      	b.n	8000e4c <__aeabi_fmul+0x234>
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d137      	bne.n	8000d10 <__aeabi_fmul+0xf8>
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	2400      	movs	r4, #0
 8000ca4:	05c0      	lsls	r0, r0, #23
 8000ca6:	4320      	orrs	r0, r4
 8000ca8:	07c9      	lsls	r1, r1, #31
 8000caa:	4308      	orrs	r0, r1
 8000cac:	bce0      	pop	{r5, r6, r7}
 8000cae:	46ba      	mov	sl, r7
 8000cb0:	46b1      	mov	r9, r6
 8000cb2:	46a8      	mov	r8, r5
 8000cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cb6:	20ff      	movs	r0, #255	; 0xff
 8000cb8:	2400      	movs	r4, #0
 8000cba:	e7f3      	b.n	8000ca4 <__aeabi_fmul+0x8c>
 8000cbc:	0c26      	lsrs	r6, r4, #16
 8000cbe:	0424      	lsls	r4, r4, #16
 8000cc0:	0c22      	lsrs	r2, r4, #16
 8000cc2:	4644      	mov	r4, r8
 8000cc4:	0424      	lsls	r4, r4, #16
 8000cc6:	0c24      	lsrs	r4, r4, #16
 8000cc8:	4643      	mov	r3, r8
 8000cca:	0027      	movs	r7, r4
 8000ccc:	0c1b      	lsrs	r3, r3, #16
 8000cce:	4357      	muls	r7, r2
 8000cd0:	4374      	muls	r4, r6
 8000cd2:	435a      	muls	r2, r3
 8000cd4:	435e      	muls	r6, r3
 8000cd6:	1912      	adds	r2, r2, r4
 8000cd8:	0c3b      	lsrs	r3, r7, #16
 8000cda:	189b      	adds	r3, r3, r2
 8000cdc:	429c      	cmp	r4, r3
 8000cde:	d903      	bls.n	8000ce8 <__aeabi_fmul+0xd0>
 8000ce0:	2280      	movs	r2, #128	; 0x80
 8000ce2:	0252      	lsls	r2, r2, #9
 8000ce4:	4694      	mov	ip, r2
 8000ce6:	4466      	add	r6, ip
 8000ce8:	043f      	lsls	r7, r7, #16
 8000cea:	041a      	lsls	r2, r3, #16
 8000cec:	0c3f      	lsrs	r7, r7, #16
 8000cee:	19d2      	adds	r2, r2, r7
 8000cf0:	0194      	lsls	r4, r2, #6
 8000cf2:	1e67      	subs	r7, r4, #1
 8000cf4:	41bc      	sbcs	r4, r7
 8000cf6:	0c1b      	lsrs	r3, r3, #16
 8000cf8:	0e92      	lsrs	r2, r2, #26
 8000cfa:	199b      	adds	r3, r3, r6
 8000cfc:	4314      	orrs	r4, r2
 8000cfe:	019b      	lsls	r3, r3, #6
 8000d00:	431c      	orrs	r4, r3
 8000d02:	011b      	lsls	r3, r3, #4
 8000d04:	d400      	bmi.n	8000d08 <__aeabi_fmul+0xf0>
 8000d06:	e09b      	b.n	8000e40 <__aeabi_fmul+0x228>
 8000d08:	2301      	movs	r3, #1
 8000d0a:	0862      	lsrs	r2, r4, #1
 8000d0c:	401c      	ands	r4, r3
 8000d0e:	4314      	orrs	r4, r2
 8000d10:	0002      	movs	r2, r0
 8000d12:	327f      	adds	r2, #127	; 0x7f
 8000d14:	2a00      	cmp	r2, #0
 8000d16:	dd64      	ble.n	8000de2 <__aeabi_fmul+0x1ca>
 8000d18:	0763      	lsls	r3, r4, #29
 8000d1a:	d004      	beq.n	8000d26 <__aeabi_fmul+0x10e>
 8000d1c:	230f      	movs	r3, #15
 8000d1e:	4023      	ands	r3, r4
 8000d20:	2b04      	cmp	r3, #4
 8000d22:	d000      	beq.n	8000d26 <__aeabi_fmul+0x10e>
 8000d24:	3404      	adds	r4, #4
 8000d26:	0123      	lsls	r3, r4, #4
 8000d28:	d503      	bpl.n	8000d32 <__aeabi_fmul+0x11a>
 8000d2a:	0002      	movs	r2, r0
 8000d2c:	4b4c      	ldr	r3, [pc, #304]	; (8000e60 <__aeabi_fmul+0x248>)
 8000d2e:	3280      	adds	r2, #128	; 0x80
 8000d30:	401c      	ands	r4, r3
 8000d32:	2afe      	cmp	r2, #254	; 0xfe
 8000d34:	dcbf      	bgt.n	8000cb6 <__aeabi_fmul+0x9e>
 8000d36:	01a4      	lsls	r4, r4, #6
 8000d38:	0a64      	lsrs	r4, r4, #9
 8000d3a:	b2d0      	uxtb	r0, r2
 8000d3c:	e7b2      	b.n	8000ca4 <__aeabi_fmul+0x8c>
 8000d3e:	4643      	mov	r3, r8
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d13d      	bne.n	8000dc0 <__aeabi_fmul+0x1a8>
 8000d44:	464a      	mov	r2, r9
 8000d46:	3301      	adds	r3, #1
 8000d48:	431a      	orrs	r2, r3
 8000d4a:	4691      	mov	r9, r2
 8000d4c:	469c      	mov	ip, r3
 8000d4e:	e792      	b.n	8000c76 <__aeabi_fmul+0x5e>
 8000d50:	2c00      	cmp	r4, #0
 8000d52:	d129      	bne.n	8000da8 <__aeabi_fmul+0x190>
 8000d54:	2304      	movs	r3, #4
 8000d56:	4699      	mov	r9, r3
 8000d58:	3b03      	subs	r3, #3
 8000d5a:	2500      	movs	r5, #0
 8000d5c:	469a      	mov	sl, r3
 8000d5e:	e774      	b.n	8000c4a <__aeabi_fmul+0x32>
 8000d60:	2c00      	cmp	r4, #0
 8000d62:	d11b      	bne.n	8000d9c <__aeabi_fmul+0x184>
 8000d64:	2308      	movs	r3, #8
 8000d66:	4699      	mov	r9, r3
 8000d68:	3b06      	subs	r3, #6
 8000d6a:	25ff      	movs	r5, #255	; 0xff
 8000d6c:	469a      	mov	sl, r3
 8000d6e:	e76c      	b.n	8000c4a <__aeabi_fmul+0x32>
 8000d70:	4643      	mov	r3, r8
 8000d72:	35ff      	adds	r5, #255	; 0xff
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d10b      	bne.n	8000d90 <__aeabi_fmul+0x178>
 8000d78:	2302      	movs	r3, #2
 8000d7a:	464a      	mov	r2, r9
 8000d7c:	431a      	orrs	r2, r3
 8000d7e:	4691      	mov	r9, r2
 8000d80:	469c      	mov	ip, r3
 8000d82:	e778      	b.n	8000c76 <__aeabi_fmul+0x5e>
 8000d84:	4653      	mov	r3, sl
 8000d86:	0031      	movs	r1, r6
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d000      	beq.n	8000d8e <__aeabi_fmul+0x176>
 8000d8c:	e783      	b.n	8000c96 <__aeabi_fmul+0x7e>
 8000d8e:	e792      	b.n	8000cb6 <__aeabi_fmul+0x9e>
 8000d90:	2303      	movs	r3, #3
 8000d92:	464a      	mov	r2, r9
 8000d94:	431a      	orrs	r2, r3
 8000d96:	4691      	mov	r9, r2
 8000d98:	469c      	mov	ip, r3
 8000d9a:	e76c      	b.n	8000c76 <__aeabi_fmul+0x5e>
 8000d9c:	230c      	movs	r3, #12
 8000d9e:	4699      	mov	r9, r3
 8000da0:	3b09      	subs	r3, #9
 8000da2:	25ff      	movs	r5, #255	; 0xff
 8000da4:	469a      	mov	sl, r3
 8000da6:	e750      	b.n	8000c4a <__aeabi_fmul+0x32>
 8000da8:	0020      	movs	r0, r4
 8000daa:	f002 f943 	bl	8003034 <__clzsi2>
 8000dae:	2576      	movs	r5, #118	; 0x76
 8000db0:	1f43      	subs	r3, r0, #5
 8000db2:	409c      	lsls	r4, r3
 8000db4:	2300      	movs	r3, #0
 8000db6:	426d      	negs	r5, r5
 8000db8:	4699      	mov	r9, r3
 8000dba:	469a      	mov	sl, r3
 8000dbc:	1a2d      	subs	r5, r5, r0
 8000dbe:	e744      	b.n	8000c4a <__aeabi_fmul+0x32>
 8000dc0:	4640      	mov	r0, r8
 8000dc2:	f002 f937 	bl	8003034 <__clzsi2>
 8000dc6:	4642      	mov	r2, r8
 8000dc8:	1f43      	subs	r3, r0, #5
 8000dca:	409a      	lsls	r2, r3
 8000dcc:	2300      	movs	r3, #0
 8000dce:	1a2d      	subs	r5, r5, r0
 8000dd0:	4690      	mov	r8, r2
 8000dd2:	469c      	mov	ip, r3
 8000dd4:	3d76      	subs	r5, #118	; 0x76
 8000dd6:	e74e      	b.n	8000c76 <__aeabi_fmul+0x5e>
 8000dd8:	2480      	movs	r4, #128	; 0x80
 8000dda:	2100      	movs	r1, #0
 8000ddc:	20ff      	movs	r0, #255	; 0xff
 8000dde:	03e4      	lsls	r4, r4, #15
 8000de0:	e760      	b.n	8000ca4 <__aeabi_fmul+0x8c>
 8000de2:	2301      	movs	r3, #1
 8000de4:	1a9b      	subs	r3, r3, r2
 8000de6:	2b1b      	cmp	r3, #27
 8000de8:	dd00      	ble.n	8000dec <__aeabi_fmul+0x1d4>
 8000dea:	e759      	b.n	8000ca0 <__aeabi_fmul+0x88>
 8000dec:	0022      	movs	r2, r4
 8000dee:	309e      	adds	r0, #158	; 0x9e
 8000df0:	40da      	lsrs	r2, r3
 8000df2:	4084      	lsls	r4, r0
 8000df4:	0013      	movs	r3, r2
 8000df6:	1e62      	subs	r2, r4, #1
 8000df8:	4194      	sbcs	r4, r2
 8000dfa:	431c      	orrs	r4, r3
 8000dfc:	0763      	lsls	r3, r4, #29
 8000dfe:	d004      	beq.n	8000e0a <__aeabi_fmul+0x1f2>
 8000e00:	230f      	movs	r3, #15
 8000e02:	4023      	ands	r3, r4
 8000e04:	2b04      	cmp	r3, #4
 8000e06:	d000      	beq.n	8000e0a <__aeabi_fmul+0x1f2>
 8000e08:	3404      	adds	r4, #4
 8000e0a:	0163      	lsls	r3, r4, #5
 8000e0c:	d51a      	bpl.n	8000e44 <__aeabi_fmul+0x22c>
 8000e0e:	2001      	movs	r0, #1
 8000e10:	2400      	movs	r4, #0
 8000e12:	e747      	b.n	8000ca4 <__aeabi_fmul+0x8c>
 8000e14:	2080      	movs	r0, #128	; 0x80
 8000e16:	03c0      	lsls	r0, r0, #15
 8000e18:	4204      	tst	r4, r0
 8000e1a:	d009      	beq.n	8000e30 <__aeabi_fmul+0x218>
 8000e1c:	4643      	mov	r3, r8
 8000e1e:	4203      	tst	r3, r0
 8000e20:	d106      	bne.n	8000e30 <__aeabi_fmul+0x218>
 8000e22:	4644      	mov	r4, r8
 8000e24:	4304      	orrs	r4, r0
 8000e26:	0264      	lsls	r4, r4, #9
 8000e28:	0039      	movs	r1, r7
 8000e2a:	20ff      	movs	r0, #255	; 0xff
 8000e2c:	0a64      	lsrs	r4, r4, #9
 8000e2e:	e739      	b.n	8000ca4 <__aeabi_fmul+0x8c>
 8000e30:	2080      	movs	r0, #128	; 0x80
 8000e32:	03c0      	lsls	r0, r0, #15
 8000e34:	4304      	orrs	r4, r0
 8000e36:	0264      	lsls	r4, r4, #9
 8000e38:	0031      	movs	r1, r6
 8000e3a:	20ff      	movs	r0, #255	; 0xff
 8000e3c:	0a64      	lsrs	r4, r4, #9
 8000e3e:	e731      	b.n	8000ca4 <__aeabi_fmul+0x8c>
 8000e40:	0028      	movs	r0, r5
 8000e42:	e765      	b.n	8000d10 <__aeabi_fmul+0xf8>
 8000e44:	01a4      	lsls	r4, r4, #6
 8000e46:	2000      	movs	r0, #0
 8000e48:	0a64      	lsrs	r4, r4, #9
 8000e4a:	e72b      	b.n	8000ca4 <__aeabi_fmul+0x8c>
 8000e4c:	2080      	movs	r0, #128	; 0x80
 8000e4e:	03c0      	lsls	r0, r0, #15
 8000e50:	4304      	orrs	r4, r0
 8000e52:	0264      	lsls	r4, r4, #9
 8000e54:	20ff      	movs	r0, #255	; 0xff
 8000e56:	0a64      	lsrs	r4, r4, #9
 8000e58:	e724      	b.n	8000ca4 <__aeabi_fmul+0x8c>
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	08014da4 	.word	0x08014da4
 8000e60:	f7ffffff 	.word	0xf7ffffff

08000e64 <__aeabi_fsub>:
 8000e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e66:	46ce      	mov	lr, r9
 8000e68:	4647      	mov	r7, r8
 8000e6a:	0243      	lsls	r3, r0, #9
 8000e6c:	0a5b      	lsrs	r3, r3, #9
 8000e6e:	024e      	lsls	r6, r1, #9
 8000e70:	00da      	lsls	r2, r3, #3
 8000e72:	4694      	mov	ip, r2
 8000e74:	0a72      	lsrs	r2, r6, #9
 8000e76:	4691      	mov	r9, r2
 8000e78:	0045      	lsls	r5, r0, #1
 8000e7a:	004a      	lsls	r2, r1, #1
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	0e2d      	lsrs	r5, r5, #24
 8000e80:	001f      	movs	r7, r3
 8000e82:	0fc4      	lsrs	r4, r0, #31
 8000e84:	0e12      	lsrs	r2, r2, #24
 8000e86:	0fc9      	lsrs	r1, r1, #31
 8000e88:	09b6      	lsrs	r6, r6, #6
 8000e8a:	2aff      	cmp	r2, #255	; 0xff
 8000e8c:	d05b      	beq.n	8000f46 <__aeabi_fsub+0xe2>
 8000e8e:	2001      	movs	r0, #1
 8000e90:	4041      	eors	r1, r0
 8000e92:	428c      	cmp	r4, r1
 8000e94:	d039      	beq.n	8000f0a <__aeabi_fsub+0xa6>
 8000e96:	1aa8      	subs	r0, r5, r2
 8000e98:	2800      	cmp	r0, #0
 8000e9a:	dd5a      	ble.n	8000f52 <__aeabi_fsub+0xee>
 8000e9c:	2a00      	cmp	r2, #0
 8000e9e:	d06a      	beq.n	8000f76 <__aeabi_fsub+0x112>
 8000ea0:	2dff      	cmp	r5, #255	; 0xff
 8000ea2:	d100      	bne.n	8000ea6 <__aeabi_fsub+0x42>
 8000ea4:	e0d9      	b.n	800105a <__aeabi_fsub+0x1f6>
 8000ea6:	2280      	movs	r2, #128	; 0x80
 8000ea8:	04d2      	lsls	r2, r2, #19
 8000eaa:	4316      	orrs	r6, r2
 8000eac:	281b      	cmp	r0, #27
 8000eae:	dc00      	bgt.n	8000eb2 <__aeabi_fsub+0x4e>
 8000eb0:	e0e9      	b.n	8001086 <__aeabi_fsub+0x222>
 8000eb2:	2001      	movs	r0, #1
 8000eb4:	4663      	mov	r3, ip
 8000eb6:	1a18      	subs	r0, r3, r0
 8000eb8:	0143      	lsls	r3, r0, #5
 8000eba:	d400      	bmi.n	8000ebe <__aeabi_fsub+0x5a>
 8000ebc:	e0b4      	b.n	8001028 <__aeabi_fsub+0x1c4>
 8000ebe:	0180      	lsls	r0, r0, #6
 8000ec0:	0987      	lsrs	r7, r0, #6
 8000ec2:	0038      	movs	r0, r7
 8000ec4:	f002 f8b6 	bl	8003034 <__clzsi2>
 8000ec8:	3805      	subs	r0, #5
 8000eca:	4087      	lsls	r7, r0
 8000ecc:	4285      	cmp	r5, r0
 8000ece:	dc00      	bgt.n	8000ed2 <__aeabi_fsub+0x6e>
 8000ed0:	e0cc      	b.n	800106c <__aeabi_fsub+0x208>
 8000ed2:	1a2d      	subs	r5, r5, r0
 8000ed4:	48b5      	ldr	r0, [pc, #724]	; (80011ac <__aeabi_fsub+0x348>)
 8000ed6:	4038      	ands	r0, r7
 8000ed8:	0743      	lsls	r3, r0, #29
 8000eda:	d004      	beq.n	8000ee6 <__aeabi_fsub+0x82>
 8000edc:	230f      	movs	r3, #15
 8000ede:	4003      	ands	r3, r0
 8000ee0:	2b04      	cmp	r3, #4
 8000ee2:	d000      	beq.n	8000ee6 <__aeabi_fsub+0x82>
 8000ee4:	3004      	adds	r0, #4
 8000ee6:	0143      	lsls	r3, r0, #5
 8000ee8:	d400      	bmi.n	8000eec <__aeabi_fsub+0x88>
 8000eea:	e0a0      	b.n	800102e <__aeabi_fsub+0x1ca>
 8000eec:	1c6a      	adds	r2, r5, #1
 8000eee:	2dfe      	cmp	r5, #254	; 0xfe
 8000ef0:	d100      	bne.n	8000ef4 <__aeabi_fsub+0x90>
 8000ef2:	e08d      	b.n	8001010 <__aeabi_fsub+0x1ac>
 8000ef4:	0180      	lsls	r0, r0, #6
 8000ef6:	0a47      	lsrs	r7, r0, #9
 8000ef8:	b2d2      	uxtb	r2, r2
 8000efa:	05d0      	lsls	r0, r2, #23
 8000efc:	4338      	orrs	r0, r7
 8000efe:	07e4      	lsls	r4, r4, #31
 8000f00:	4320      	orrs	r0, r4
 8000f02:	bcc0      	pop	{r6, r7}
 8000f04:	46b9      	mov	r9, r7
 8000f06:	46b0      	mov	r8, r6
 8000f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f0a:	1aa8      	subs	r0, r5, r2
 8000f0c:	4680      	mov	r8, r0
 8000f0e:	2800      	cmp	r0, #0
 8000f10:	dd45      	ble.n	8000f9e <__aeabi_fsub+0x13a>
 8000f12:	2a00      	cmp	r2, #0
 8000f14:	d070      	beq.n	8000ff8 <__aeabi_fsub+0x194>
 8000f16:	2dff      	cmp	r5, #255	; 0xff
 8000f18:	d100      	bne.n	8000f1c <__aeabi_fsub+0xb8>
 8000f1a:	e09e      	b.n	800105a <__aeabi_fsub+0x1f6>
 8000f1c:	2380      	movs	r3, #128	; 0x80
 8000f1e:	04db      	lsls	r3, r3, #19
 8000f20:	431e      	orrs	r6, r3
 8000f22:	4643      	mov	r3, r8
 8000f24:	2b1b      	cmp	r3, #27
 8000f26:	dc00      	bgt.n	8000f2a <__aeabi_fsub+0xc6>
 8000f28:	e0d2      	b.n	80010d0 <__aeabi_fsub+0x26c>
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	4460      	add	r0, ip
 8000f2e:	0143      	lsls	r3, r0, #5
 8000f30:	d57a      	bpl.n	8001028 <__aeabi_fsub+0x1c4>
 8000f32:	3501      	adds	r5, #1
 8000f34:	2dff      	cmp	r5, #255	; 0xff
 8000f36:	d06b      	beq.n	8001010 <__aeabi_fsub+0x1ac>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	4a9d      	ldr	r2, [pc, #628]	; (80011b0 <__aeabi_fsub+0x34c>)
 8000f3c:	4003      	ands	r3, r0
 8000f3e:	0840      	lsrs	r0, r0, #1
 8000f40:	4010      	ands	r0, r2
 8000f42:	4318      	orrs	r0, r3
 8000f44:	e7c8      	b.n	8000ed8 <__aeabi_fsub+0x74>
 8000f46:	2e00      	cmp	r6, #0
 8000f48:	d020      	beq.n	8000f8c <__aeabi_fsub+0x128>
 8000f4a:	428c      	cmp	r4, r1
 8000f4c:	d023      	beq.n	8000f96 <__aeabi_fsub+0x132>
 8000f4e:	0028      	movs	r0, r5
 8000f50:	38ff      	subs	r0, #255	; 0xff
 8000f52:	2800      	cmp	r0, #0
 8000f54:	d039      	beq.n	8000fca <__aeabi_fsub+0x166>
 8000f56:	1b57      	subs	r7, r2, r5
 8000f58:	2d00      	cmp	r5, #0
 8000f5a:	d000      	beq.n	8000f5e <__aeabi_fsub+0xfa>
 8000f5c:	e09d      	b.n	800109a <__aeabi_fsub+0x236>
 8000f5e:	4663      	mov	r3, ip
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d100      	bne.n	8000f66 <__aeabi_fsub+0x102>
 8000f64:	e0db      	b.n	800111e <__aeabi_fsub+0x2ba>
 8000f66:	1e7b      	subs	r3, r7, #1
 8000f68:	2f01      	cmp	r7, #1
 8000f6a:	d100      	bne.n	8000f6e <__aeabi_fsub+0x10a>
 8000f6c:	e10d      	b.n	800118a <__aeabi_fsub+0x326>
 8000f6e:	2fff      	cmp	r7, #255	; 0xff
 8000f70:	d071      	beq.n	8001056 <__aeabi_fsub+0x1f2>
 8000f72:	001f      	movs	r7, r3
 8000f74:	e098      	b.n	80010a8 <__aeabi_fsub+0x244>
 8000f76:	2e00      	cmp	r6, #0
 8000f78:	d100      	bne.n	8000f7c <__aeabi_fsub+0x118>
 8000f7a:	e0a7      	b.n	80010cc <__aeabi_fsub+0x268>
 8000f7c:	1e42      	subs	r2, r0, #1
 8000f7e:	2801      	cmp	r0, #1
 8000f80:	d100      	bne.n	8000f84 <__aeabi_fsub+0x120>
 8000f82:	e0e6      	b.n	8001152 <__aeabi_fsub+0x2ee>
 8000f84:	28ff      	cmp	r0, #255	; 0xff
 8000f86:	d068      	beq.n	800105a <__aeabi_fsub+0x1f6>
 8000f88:	0010      	movs	r0, r2
 8000f8a:	e78f      	b.n	8000eac <__aeabi_fsub+0x48>
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	4041      	eors	r1, r0
 8000f90:	42a1      	cmp	r1, r4
 8000f92:	d000      	beq.n	8000f96 <__aeabi_fsub+0x132>
 8000f94:	e77f      	b.n	8000e96 <__aeabi_fsub+0x32>
 8000f96:	20ff      	movs	r0, #255	; 0xff
 8000f98:	4240      	negs	r0, r0
 8000f9a:	4680      	mov	r8, r0
 8000f9c:	44a8      	add	r8, r5
 8000f9e:	4640      	mov	r0, r8
 8000fa0:	2800      	cmp	r0, #0
 8000fa2:	d038      	beq.n	8001016 <__aeabi_fsub+0x1b2>
 8000fa4:	1b51      	subs	r1, r2, r5
 8000fa6:	2d00      	cmp	r5, #0
 8000fa8:	d100      	bne.n	8000fac <__aeabi_fsub+0x148>
 8000faa:	e0ae      	b.n	800110a <__aeabi_fsub+0x2a6>
 8000fac:	2aff      	cmp	r2, #255	; 0xff
 8000fae:	d100      	bne.n	8000fb2 <__aeabi_fsub+0x14e>
 8000fb0:	e0df      	b.n	8001172 <__aeabi_fsub+0x30e>
 8000fb2:	2380      	movs	r3, #128	; 0x80
 8000fb4:	4660      	mov	r0, ip
 8000fb6:	04db      	lsls	r3, r3, #19
 8000fb8:	4318      	orrs	r0, r3
 8000fba:	4684      	mov	ip, r0
 8000fbc:	291b      	cmp	r1, #27
 8000fbe:	dc00      	bgt.n	8000fc2 <__aeabi_fsub+0x15e>
 8000fc0:	e0d9      	b.n	8001176 <__aeabi_fsub+0x312>
 8000fc2:	2001      	movs	r0, #1
 8000fc4:	0015      	movs	r5, r2
 8000fc6:	1980      	adds	r0, r0, r6
 8000fc8:	e7b1      	b.n	8000f2e <__aeabi_fsub+0xca>
 8000fca:	20fe      	movs	r0, #254	; 0xfe
 8000fcc:	1c6a      	adds	r2, r5, #1
 8000fce:	4210      	tst	r0, r2
 8000fd0:	d171      	bne.n	80010b6 <__aeabi_fsub+0x252>
 8000fd2:	2d00      	cmp	r5, #0
 8000fd4:	d000      	beq.n	8000fd8 <__aeabi_fsub+0x174>
 8000fd6:	e0a6      	b.n	8001126 <__aeabi_fsub+0x2c2>
 8000fd8:	4663      	mov	r3, ip
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d100      	bne.n	8000fe0 <__aeabi_fsub+0x17c>
 8000fde:	e0d9      	b.n	8001194 <__aeabi_fsub+0x330>
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2e00      	cmp	r6, #0
 8000fe4:	d100      	bne.n	8000fe8 <__aeabi_fsub+0x184>
 8000fe6:	e788      	b.n	8000efa <__aeabi_fsub+0x96>
 8000fe8:	1b98      	subs	r0, r3, r6
 8000fea:	0143      	lsls	r3, r0, #5
 8000fec:	d400      	bmi.n	8000ff0 <__aeabi_fsub+0x18c>
 8000fee:	e0e1      	b.n	80011b4 <__aeabi_fsub+0x350>
 8000ff0:	4663      	mov	r3, ip
 8000ff2:	000c      	movs	r4, r1
 8000ff4:	1af0      	subs	r0, r6, r3
 8000ff6:	e76f      	b.n	8000ed8 <__aeabi_fsub+0x74>
 8000ff8:	2e00      	cmp	r6, #0
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_fsub+0x19a>
 8000ffc:	e0b7      	b.n	800116e <__aeabi_fsub+0x30a>
 8000ffe:	0002      	movs	r2, r0
 8001000:	3a01      	subs	r2, #1
 8001002:	2801      	cmp	r0, #1
 8001004:	d100      	bne.n	8001008 <__aeabi_fsub+0x1a4>
 8001006:	e09c      	b.n	8001142 <__aeabi_fsub+0x2de>
 8001008:	28ff      	cmp	r0, #255	; 0xff
 800100a:	d026      	beq.n	800105a <__aeabi_fsub+0x1f6>
 800100c:	4690      	mov	r8, r2
 800100e:	e788      	b.n	8000f22 <__aeabi_fsub+0xbe>
 8001010:	22ff      	movs	r2, #255	; 0xff
 8001012:	2700      	movs	r7, #0
 8001014:	e771      	b.n	8000efa <__aeabi_fsub+0x96>
 8001016:	20fe      	movs	r0, #254	; 0xfe
 8001018:	1c6a      	adds	r2, r5, #1
 800101a:	4210      	tst	r0, r2
 800101c:	d064      	beq.n	80010e8 <__aeabi_fsub+0x284>
 800101e:	2aff      	cmp	r2, #255	; 0xff
 8001020:	d0f6      	beq.n	8001010 <__aeabi_fsub+0x1ac>
 8001022:	0015      	movs	r5, r2
 8001024:	4466      	add	r6, ip
 8001026:	0870      	lsrs	r0, r6, #1
 8001028:	0743      	lsls	r3, r0, #29
 800102a:	d000      	beq.n	800102e <__aeabi_fsub+0x1ca>
 800102c:	e756      	b.n	8000edc <__aeabi_fsub+0x78>
 800102e:	08c3      	lsrs	r3, r0, #3
 8001030:	2dff      	cmp	r5, #255	; 0xff
 8001032:	d012      	beq.n	800105a <__aeabi_fsub+0x1f6>
 8001034:	025b      	lsls	r3, r3, #9
 8001036:	0a5f      	lsrs	r7, r3, #9
 8001038:	b2ea      	uxtb	r2, r5
 800103a:	e75e      	b.n	8000efa <__aeabi_fsub+0x96>
 800103c:	4662      	mov	r2, ip
 800103e:	2a00      	cmp	r2, #0
 8001040:	d100      	bne.n	8001044 <__aeabi_fsub+0x1e0>
 8001042:	e096      	b.n	8001172 <__aeabi_fsub+0x30e>
 8001044:	2e00      	cmp	r6, #0
 8001046:	d008      	beq.n	800105a <__aeabi_fsub+0x1f6>
 8001048:	2280      	movs	r2, #128	; 0x80
 800104a:	03d2      	lsls	r2, r2, #15
 800104c:	4213      	tst	r3, r2
 800104e:	d004      	beq.n	800105a <__aeabi_fsub+0x1f6>
 8001050:	4648      	mov	r0, r9
 8001052:	4210      	tst	r0, r2
 8001054:	d101      	bne.n	800105a <__aeabi_fsub+0x1f6>
 8001056:	000c      	movs	r4, r1
 8001058:	464b      	mov	r3, r9
 800105a:	2b00      	cmp	r3, #0
 800105c:	d0d8      	beq.n	8001010 <__aeabi_fsub+0x1ac>
 800105e:	2780      	movs	r7, #128	; 0x80
 8001060:	03ff      	lsls	r7, r7, #15
 8001062:	431f      	orrs	r7, r3
 8001064:	027f      	lsls	r7, r7, #9
 8001066:	22ff      	movs	r2, #255	; 0xff
 8001068:	0a7f      	lsrs	r7, r7, #9
 800106a:	e746      	b.n	8000efa <__aeabi_fsub+0x96>
 800106c:	2320      	movs	r3, #32
 800106e:	003a      	movs	r2, r7
 8001070:	1b45      	subs	r5, r0, r5
 8001072:	0038      	movs	r0, r7
 8001074:	3501      	adds	r5, #1
 8001076:	40ea      	lsrs	r2, r5
 8001078:	1b5d      	subs	r5, r3, r5
 800107a:	40a8      	lsls	r0, r5
 800107c:	1e43      	subs	r3, r0, #1
 800107e:	4198      	sbcs	r0, r3
 8001080:	2500      	movs	r5, #0
 8001082:	4310      	orrs	r0, r2
 8001084:	e728      	b.n	8000ed8 <__aeabi_fsub+0x74>
 8001086:	2320      	movs	r3, #32
 8001088:	1a1b      	subs	r3, r3, r0
 800108a:	0032      	movs	r2, r6
 800108c:	409e      	lsls	r6, r3
 800108e:	40c2      	lsrs	r2, r0
 8001090:	0030      	movs	r0, r6
 8001092:	1e43      	subs	r3, r0, #1
 8001094:	4198      	sbcs	r0, r3
 8001096:	4310      	orrs	r0, r2
 8001098:	e70c      	b.n	8000eb4 <__aeabi_fsub+0x50>
 800109a:	2aff      	cmp	r2, #255	; 0xff
 800109c:	d0db      	beq.n	8001056 <__aeabi_fsub+0x1f2>
 800109e:	2380      	movs	r3, #128	; 0x80
 80010a0:	4660      	mov	r0, ip
 80010a2:	04db      	lsls	r3, r3, #19
 80010a4:	4318      	orrs	r0, r3
 80010a6:	4684      	mov	ip, r0
 80010a8:	2f1b      	cmp	r7, #27
 80010aa:	dd56      	ble.n	800115a <__aeabi_fsub+0x2f6>
 80010ac:	2001      	movs	r0, #1
 80010ae:	000c      	movs	r4, r1
 80010b0:	0015      	movs	r5, r2
 80010b2:	1a30      	subs	r0, r6, r0
 80010b4:	e700      	b.n	8000eb8 <__aeabi_fsub+0x54>
 80010b6:	4663      	mov	r3, ip
 80010b8:	1b9f      	subs	r7, r3, r6
 80010ba:	017b      	lsls	r3, r7, #5
 80010bc:	d43d      	bmi.n	800113a <__aeabi_fsub+0x2d6>
 80010be:	2f00      	cmp	r7, #0
 80010c0:	d000      	beq.n	80010c4 <__aeabi_fsub+0x260>
 80010c2:	e6fe      	b.n	8000ec2 <__aeabi_fsub+0x5e>
 80010c4:	2400      	movs	r4, #0
 80010c6:	2200      	movs	r2, #0
 80010c8:	2700      	movs	r7, #0
 80010ca:	e716      	b.n	8000efa <__aeabi_fsub+0x96>
 80010cc:	0005      	movs	r5, r0
 80010ce:	e7af      	b.n	8001030 <__aeabi_fsub+0x1cc>
 80010d0:	0032      	movs	r2, r6
 80010d2:	4643      	mov	r3, r8
 80010d4:	4641      	mov	r1, r8
 80010d6:	40da      	lsrs	r2, r3
 80010d8:	2320      	movs	r3, #32
 80010da:	1a5b      	subs	r3, r3, r1
 80010dc:	409e      	lsls	r6, r3
 80010de:	0030      	movs	r0, r6
 80010e0:	1e43      	subs	r3, r0, #1
 80010e2:	4198      	sbcs	r0, r3
 80010e4:	4310      	orrs	r0, r2
 80010e6:	e721      	b.n	8000f2c <__aeabi_fsub+0xc8>
 80010e8:	2d00      	cmp	r5, #0
 80010ea:	d1a7      	bne.n	800103c <__aeabi_fsub+0x1d8>
 80010ec:	4663      	mov	r3, ip
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d059      	beq.n	80011a6 <__aeabi_fsub+0x342>
 80010f2:	2200      	movs	r2, #0
 80010f4:	2e00      	cmp	r6, #0
 80010f6:	d100      	bne.n	80010fa <__aeabi_fsub+0x296>
 80010f8:	e6ff      	b.n	8000efa <__aeabi_fsub+0x96>
 80010fa:	0030      	movs	r0, r6
 80010fc:	4460      	add	r0, ip
 80010fe:	0143      	lsls	r3, r0, #5
 8001100:	d592      	bpl.n	8001028 <__aeabi_fsub+0x1c4>
 8001102:	4b2a      	ldr	r3, [pc, #168]	; (80011ac <__aeabi_fsub+0x348>)
 8001104:	3501      	adds	r5, #1
 8001106:	4018      	ands	r0, r3
 8001108:	e78e      	b.n	8001028 <__aeabi_fsub+0x1c4>
 800110a:	4663      	mov	r3, ip
 800110c:	2b00      	cmp	r3, #0
 800110e:	d047      	beq.n	80011a0 <__aeabi_fsub+0x33c>
 8001110:	1e4b      	subs	r3, r1, #1
 8001112:	2901      	cmp	r1, #1
 8001114:	d015      	beq.n	8001142 <__aeabi_fsub+0x2de>
 8001116:	29ff      	cmp	r1, #255	; 0xff
 8001118:	d02b      	beq.n	8001172 <__aeabi_fsub+0x30e>
 800111a:	0019      	movs	r1, r3
 800111c:	e74e      	b.n	8000fbc <__aeabi_fsub+0x158>
 800111e:	000c      	movs	r4, r1
 8001120:	464b      	mov	r3, r9
 8001122:	003d      	movs	r5, r7
 8001124:	e784      	b.n	8001030 <__aeabi_fsub+0x1cc>
 8001126:	4662      	mov	r2, ip
 8001128:	2a00      	cmp	r2, #0
 800112a:	d18b      	bne.n	8001044 <__aeabi_fsub+0x1e0>
 800112c:	2e00      	cmp	r6, #0
 800112e:	d192      	bne.n	8001056 <__aeabi_fsub+0x1f2>
 8001130:	2780      	movs	r7, #128	; 0x80
 8001132:	2400      	movs	r4, #0
 8001134:	22ff      	movs	r2, #255	; 0xff
 8001136:	03ff      	lsls	r7, r7, #15
 8001138:	e6df      	b.n	8000efa <__aeabi_fsub+0x96>
 800113a:	4663      	mov	r3, ip
 800113c:	000c      	movs	r4, r1
 800113e:	1af7      	subs	r7, r6, r3
 8001140:	e6bf      	b.n	8000ec2 <__aeabi_fsub+0x5e>
 8001142:	0030      	movs	r0, r6
 8001144:	4460      	add	r0, ip
 8001146:	2501      	movs	r5, #1
 8001148:	0143      	lsls	r3, r0, #5
 800114a:	d400      	bmi.n	800114e <__aeabi_fsub+0x2ea>
 800114c:	e76c      	b.n	8001028 <__aeabi_fsub+0x1c4>
 800114e:	2502      	movs	r5, #2
 8001150:	e6f2      	b.n	8000f38 <__aeabi_fsub+0xd4>
 8001152:	4663      	mov	r3, ip
 8001154:	2501      	movs	r5, #1
 8001156:	1b98      	subs	r0, r3, r6
 8001158:	e6ae      	b.n	8000eb8 <__aeabi_fsub+0x54>
 800115a:	2320      	movs	r3, #32
 800115c:	4664      	mov	r4, ip
 800115e:	4660      	mov	r0, ip
 8001160:	40fc      	lsrs	r4, r7
 8001162:	1bdf      	subs	r7, r3, r7
 8001164:	40b8      	lsls	r0, r7
 8001166:	1e43      	subs	r3, r0, #1
 8001168:	4198      	sbcs	r0, r3
 800116a:	4320      	orrs	r0, r4
 800116c:	e79f      	b.n	80010ae <__aeabi_fsub+0x24a>
 800116e:	0005      	movs	r5, r0
 8001170:	e75e      	b.n	8001030 <__aeabi_fsub+0x1cc>
 8001172:	464b      	mov	r3, r9
 8001174:	e771      	b.n	800105a <__aeabi_fsub+0x1f6>
 8001176:	2320      	movs	r3, #32
 8001178:	4665      	mov	r5, ip
 800117a:	4660      	mov	r0, ip
 800117c:	40cd      	lsrs	r5, r1
 800117e:	1a59      	subs	r1, r3, r1
 8001180:	4088      	lsls	r0, r1
 8001182:	1e43      	subs	r3, r0, #1
 8001184:	4198      	sbcs	r0, r3
 8001186:	4328      	orrs	r0, r5
 8001188:	e71c      	b.n	8000fc4 <__aeabi_fsub+0x160>
 800118a:	4663      	mov	r3, ip
 800118c:	000c      	movs	r4, r1
 800118e:	2501      	movs	r5, #1
 8001190:	1af0      	subs	r0, r6, r3
 8001192:	e691      	b.n	8000eb8 <__aeabi_fsub+0x54>
 8001194:	2e00      	cmp	r6, #0
 8001196:	d095      	beq.n	80010c4 <__aeabi_fsub+0x260>
 8001198:	000c      	movs	r4, r1
 800119a:	464f      	mov	r7, r9
 800119c:	2200      	movs	r2, #0
 800119e:	e6ac      	b.n	8000efa <__aeabi_fsub+0x96>
 80011a0:	464b      	mov	r3, r9
 80011a2:	000d      	movs	r5, r1
 80011a4:	e744      	b.n	8001030 <__aeabi_fsub+0x1cc>
 80011a6:	464f      	mov	r7, r9
 80011a8:	2200      	movs	r2, #0
 80011aa:	e6a6      	b.n	8000efa <__aeabi_fsub+0x96>
 80011ac:	fbffffff 	.word	0xfbffffff
 80011b0:	7dffffff 	.word	0x7dffffff
 80011b4:	2800      	cmp	r0, #0
 80011b6:	d000      	beq.n	80011ba <__aeabi_fsub+0x356>
 80011b8:	e736      	b.n	8001028 <__aeabi_fsub+0x1c4>
 80011ba:	2400      	movs	r4, #0
 80011bc:	2700      	movs	r7, #0
 80011be:	e69c      	b.n	8000efa <__aeabi_fsub+0x96>

080011c0 <__aeabi_fcmpun>:
 80011c0:	0243      	lsls	r3, r0, #9
 80011c2:	024a      	lsls	r2, r1, #9
 80011c4:	0040      	lsls	r0, r0, #1
 80011c6:	0049      	lsls	r1, r1, #1
 80011c8:	0a5b      	lsrs	r3, r3, #9
 80011ca:	0a52      	lsrs	r2, r2, #9
 80011cc:	0e09      	lsrs	r1, r1, #24
 80011ce:	0e00      	lsrs	r0, r0, #24
 80011d0:	28ff      	cmp	r0, #255	; 0xff
 80011d2:	d006      	beq.n	80011e2 <__aeabi_fcmpun+0x22>
 80011d4:	2000      	movs	r0, #0
 80011d6:	29ff      	cmp	r1, #255	; 0xff
 80011d8:	d102      	bne.n	80011e0 <__aeabi_fcmpun+0x20>
 80011da:	1e53      	subs	r3, r2, #1
 80011dc:	419a      	sbcs	r2, r3
 80011de:	0010      	movs	r0, r2
 80011e0:	4770      	bx	lr
 80011e2:	38fe      	subs	r0, #254	; 0xfe
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1fb      	bne.n	80011e0 <__aeabi_fcmpun+0x20>
 80011e8:	e7f4      	b.n	80011d4 <__aeabi_fcmpun+0x14>
 80011ea:	46c0      	nop			; (mov r8, r8)

080011ec <__aeabi_f2iz>:
 80011ec:	0241      	lsls	r1, r0, #9
 80011ee:	0042      	lsls	r2, r0, #1
 80011f0:	0fc3      	lsrs	r3, r0, #31
 80011f2:	0a49      	lsrs	r1, r1, #9
 80011f4:	2000      	movs	r0, #0
 80011f6:	0e12      	lsrs	r2, r2, #24
 80011f8:	2a7e      	cmp	r2, #126	; 0x7e
 80011fa:	dd03      	ble.n	8001204 <__aeabi_f2iz+0x18>
 80011fc:	2a9d      	cmp	r2, #157	; 0x9d
 80011fe:	dd02      	ble.n	8001206 <__aeabi_f2iz+0x1a>
 8001200:	4a09      	ldr	r2, [pc, #36]	; (8001228 <__aeabi_f2iz+0x3c>)
 8001202:	1898      	adds	r0, r3, r2
 8001204:	4770      	bx	lr
 8001206:	2080      	movs	r0, #128	; 0x80
 8001208:	0400      	lsls	r0, r0, #16
 800120a:	4301      	orrs	r1, r0
 800120c:	2a95      	cmp	r2, #149	; 0x95
 800120e:	dc07      	bgt.n	8001220 <__aeabi_f2iz+0x34>
 8001210:	2096      	movs	r0, #150	; 0x96
 8001212:	1a82      	subs	r2, r0, r2
 8001214:	40d1      	lsrs	r1, r2
 8001216:	4248      	negs	r0, r1
 8001218:	2b00      	cmp	r3, #0
 800121a:	d1f3      	bne.n	8001204 <__aeabi_f2iz+0x18>
 800121c:	0008      	movs	r0, r1
 800121e:	e7f1      	b.n	8001204 <__aeabi_f2iz+0x18>
 8001220:	3a96      	subs	r2, #150	; 0x96
 8001222:	4091      	lsls	r1, r2
 8001224:	e7f7      	b.n	8001216 <__aeabi_f2iz+0x2a>
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	7fffffff 	.word	0x7fffffff

0800122c <__aeabi_i2f>:
 800122c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800122e:	2800      	cmp	r0, #0
 8001230:	d013      	beq.n	800125a <__aeabi_i2f+0x2e>
 8001232:	17c3      	asrs	r3, r0, #31
 8001234:	18c6      	adds	r6, r0, r3
 8001236:	405e      	eors	r6, r3
 8001238:	0fc4      	lsrs	r4, r0, #31
 800123a:	0030      	movs	r0, r6
 800123c:	f001 fefa 	bl	8003034 <__clzsi2>
 8001240:	239e      	movs	r3, #158	; 0x9e
 8001242:	0005      	movs	r5, r0
 8001244:	1a1b      	subs	r3, r3, r0
 8001246:	2b96      	cmp	r3, #150	; 0x96
 8001248:	dc0f      	bgt.n	800126a <__aeabi_i2f+0x3e>
 800124a:	2808      	cmp	r0, #8
 800124c:	dd01      	ble.n	8001252 <__aeabi_i2f+0x26>
 800124e:	3d08      	subs	r5, #8
 8001250:	40ae      	lsls	r6, r5
 8001252:	0276      	lsls	r6, r6, #9
 8001254:	0a76      	lsrs	r6, r6, #9
 8001256:	b2d8      	uxtb	r0, r3
 8001258:	e002      	b.n	8001260 <__aeabi_i2f+0x34>
 800125a:	2400      	movs	r4, #0
 800125c:	2000      	movs	r0, #0
 800125e:	2600      	movs	r6, #0
 8001260:	05c0      	lsls	r0, r0, #23
 8001262:	4330      	orrs	r0, r6
 8001264:	07e4      	lsls	r4, r4, #31
 8001266:	4320      	orrs	r0, r4
 8001268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800126a:	2b99      	cmp	r3, #153	; 0x99
 800126c:	dd0c      	ble.n	8001288 <__aeabi_i2f+0x5c>
 800126e:	2205      	movs	r2, #5
 8001270:	0031      	movs	r1, r6
 8001272:	1a12      	subs	r2, r2, r0
 8001274:	40d1      	lsrs	r1, r2
 8001276:	000a      	movs	r2, r1
 8001278:	0001      	movs	r1, r0
 800127a:	0030      	movs	r0, r6
 800127c:	311b      	adds	r1, #27
 800127e:	4088      	lsls	r0, r1
 8001280:	1e41      	subs	r1, r0, #1
 8001282:	4188      	sbcs	r0, r1
 8001284:	4302      	orrs	r2, r0
 8001286:	0016      	movs	r6, r2
 8001288:	2d05      	cmp	r5, #5
 800128a:	dc12      	bgt.n	80012b2 <__aeabi_i2f+0x86>
 800128c:	0031      	movs	r1, r6
 800128e:	4f0d      	ldr	r7, [pc, #52]	; (80012c4 <__aeabi_i2f+0x98>)
 8001290:	4039      	ands	r1, r7
 8001292:	0772      	lsls	r2, r6, #29
 8001294:	d009      	beq.n	80012aa <__aeabi_i2f+0x7e>
 8001296:	200f      	movs	r0, #15
 8001298:	4030      	ands	r0, r6
 800129a:	2804      	cmp	r0, #4
 800129c:	d005      	beq.n	80012aa <__aeabi_i2f+0x7e>
 800129e:	3104      	adds	r1, #4
 80012a0:	014a      	lsls	r2, r1, #5
 80012a2:	d502      	bpl.n	80012aa <__aeabi_i2f+0x7e>
 80012a4:	239f      	movs	r3, #159	; 0x9f
 80012a6:	4039      	ands	r1, r7
 80012a8:	1b5b      	subs	r3, r3, r5
 80012aa:	0189      	lsls	r1, r1, #6
 80012ac:	0a4e      	lsrs	r6, r1, #9
 80012ae:	b2d8      	uxtb	r0, r3
 80012b0:	e7d6      	b.n	8001260 <__aeabi_i2f+0x34>
 80012b2:	1f6a      	subs	r2, r5, #5
 80012b4:	4096      	lsls	r6, r2
 80012b6:	0031      	movs	r1, r6
 80012b8:	4f02      	ldr	r7, [pc, #8]	; (80012c4 <__aeabi_i2f+0x98>)
 80012ba:	4039      	ands	r1, r7
 80012bc:	0772      	lsls	r2, r6, #29
 80012be:	d0f4      	beq.n	80012aa <__aeabi_i2f+0x7e>
 80012c0:	e7e9      	b.n	8001296 <__aeabi_i2f+0x6a>
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	fbffffff 	.word	0xfbffffff

080012c8 <__aeabi_dadd>:
 80012c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012ca:	464f      	mov	r7, r9
 80012cc:	4646      	mov	r6, r8
 80012ce:	46d6      	mov	lr, sl
 80012d0:	000d      	movs	r5, r1
 80012d2:	0004      	movs	r4, r0
 80012d4:	b5c0      	push	{r6, r7, lr}
 80012d6:	001f      	movs	r7, r3
 80012d8:	0011      	movs	r1, r2
 80012da:	0328      	lsls	r0, r5, #12
 80012dc:	0f62      	lsrs	r2, r4, #29
 80012de:	0a40      	lsrs	r0, r0, #9
 80012e0:	4310      	orrs	r0, r2
 80012e2:	007a      	lsls	r2, r7, #1
 80012e4:	0d52      	lsrs	r2, r2, #21
 80012e6:	00e3      	lsls	r3, r4, #3
 80012e8:	033c      	lsls	r4, r7, #12
 80012ea:	4691      	mov	r9, r2
 80012ec:	0a64      	lsrs	r4, r4, #9
 80012ee:	0ffa      	lsrs	r2, r7, #31
 80012f0:	0f4f      	lsrs	r7, r1, #29
 80012f2:	006e      	lsls	r6, r5, #1
 80012f4:	4327      	orrs	r7, r4
 80012f6:	4692      	mov	sl, r2
 80012f8:	46b8      	mov	r8, r7
 80012fa:	0d76      	lsrs	r6, r6, #21
 80012fc:	0fed      	lsrs	r5, r5, #31
 80012fe:	00c9      	lsls	r1, r1, #3
 8001300:	4295      	cmp	r5, r2
 8001302:	d100      	bne.n	8001306 <__aeabi_dadd+0x3e>
 8001304:	e099      	b.n	800143a <__aeabi_dadd+0x172>
 8001306:	464c      	mov	r4, r9
 8001308:	1b34      	subs	r4, r6, r4
 800130a:	46a4      	mov	ip, r4
 800130c:	2c00      	cmp	r4, #0
 800130e:	dc00      	bgt.n	8001312 <__aeabi_dadd+0x4a>
 8001310:	e07c      	b.n	800140c <__aeabi_dadd+0x144>
 8001312:	464a      	mov	r2, r9
 8001314:	2a00      	cmp	r2, #0
 8001316:	d100      	bne.n	800131a <__aeabi_dadd+0x52>
 8001318:	e0b8      	b.n	800148c <__aeabi_dadd+0x1c4>
 800131a:	4ac5      	ldr	r2, [pc, #788]	; (8001630 <__aeabi_dadd+0x368>)
 800131c:	4296      	cmp	r6, r2
 800131e:	d100      	bne.n	8001322 <__aeabi_dadd+0x5a>
 8001320:	e11c      	b.n	800155c <__aeabi_dadd+0x294>
 8001322:	2280      	movs	r2, #128	; 0x80
 8001324:	003c      	movs	r4, r7
 8001326:	0412      	lsls	r2, r2, #16
 8001328:	4314      	orrs	r4, r2
 800132a:	46a0      	mov	r8, r4
 800132c:	4662      	mov	r2, ip
 800132e:	2a38      	cmp	r2, #56	; 0x38
 8001330:	dd00      	ble.n	8001334 <__aeabi_dadd+0x6c>
 8001332:	e161      	b.n	80015f8 <__aeabi_dadd+0x330>
 8001334:	2a1f      	cmp	r2, #31
 8001336:	dd00      	ble.n	800133a <__aeabi_dadd+0x72>
 8001338:	e1cc      	b.n	80016d4 <__aeabi_dadd+0x40c>
 800133a:	4664      	mov	r4, ip
 800133c:	2220      	movs	r2, #32
 800133e:	1b12      	subs	r2, r2, r4
 8001340:	4644      	mov	r4, r8
 8001342:	4094      	lsls	r4, r2
 8001344:	000f      	movs	r7, r1
 8001346:	46a1      	mov	r9, r4
 8001348:	4664      	mov	r4, ip
 800134a:	4091      	lsls	r1, r2
 800134c:	40e7      	lsrs	r7, r4
 800134e:	464c      	mov	r4, r9
 8001350:	1e4a      	subs	r2, r1, #1
 8001352:	4191      	sbcs	r1, r2
 8001354:	433c      	orrs	r4, r7
 8001356:	4642      	mov	r2, r8
 8001358:	4321      	orrs	r1, r4
 800135a:	4664      	mov	r4, ip
 800135c:	40e2      	lsrs	r2, r4
 800135e:	1a80      	subs	r0, r0, r2
 8001360:	1a5c      	subs	r4, r3, r1
 8001362:	42a3      	cmp	r3, r4
 8001364:	419b      	sbcs	r3, r3
 8001366:	425f      	negs	r7, r3
 8001368:	1bc7      	subs	r7, r0, r7
 800136a:	023b      	lsls	r3, r7, #8
 800136c:	d400      	bmi.n	8001370 <__aeabi_dadd+0xa8>
 800136e:	e0d0      	b.n	8001512 <__aeabi_dadd+0x24a>
 8001370:	027f      	lsls	r7, r7, #9
 8001372:	0a7f      	lsrs	r7, r7, #9
 8001374:	2f00      	cmp	r7, #0
 8001376:	d100      	bne.n	800137a <__aeabi_dadd+0xb2>
 8001378:	e0ff      	b.n	800157a <__aeabi_dadd+0x2b2>
 800137a:	0038      	movs	r0, r7
 800137c:	f001 fe5a 	bl	8003034 <__clzsi2>
 8001380:	0001      	movs	r1, r0
 8001382:	3908      	subs	r1, #8
 8001384:	2320      	movs	r3, #32
 8001386:	0022      	movs	r2, r4
 8001388:	1a5b      	subs	r3, r3, r1
 800138a:	408f      	lsls	r7, r1
 800138c:	40da      	lsrs	r2, r3
 800138e:	408c      	lsls	r4, r1
 8001390:	4317      	orrs	r7, r2
 8001392:	42b1      	cmp	r1, r6
 8001394:	da00      	bge.n	8001398 <__aeabi_dadd+0xd0>
 8001396:	e0ff      	b.n	8001598 <__aeabi_dadd+0x2d0>
 8001398:	1b89      	subs	r1, r1, r6
 800139a:	1c4b      	adds	r3, r1, #1
 800139c:	2b1f      	cmp	r3, #31
 800139e:	dd00      	ble.n	80013a2 <__aeabi_dadd+0xda>
 80013a0:	e0a8      	b.n	80014f4 <__aeabi_dadd+0x22c>
 80013a2:	2220      	movs	r2, #32
 80013a4:	0039      	movs	r1, r7
 80013a6:	1ad2      	subs	r2, r2, r3
 80013a8:	0020      	movs	r0, r4
 80013aa:	4094      	lsls	r4, r2
 80013ac:	4091      	lsls	r1, r2
 80013ae:	40d8      	lsrs	r0, r3
 80013b0:	1e62      	subs	r2, r4, #1
 80013b2:	4194      	sbcs	r4, r2
 80013b4:	40df      	lsrs	r7, r3
 80013b6:	2600      	movs	r6, #0
 80013b8:	4301      	orrs	r1, r0
 80013ba:	430c      	orrs	r4, r1
 80013bc:	0763      	lsls	r3, r4, #29
 80013be:	d009      	beq.n	80013d4 <__aeabi_dadd+0x10c>
 80013c0:	230f      	movs	r3, #15
 80013c2:	4023      	ands	r3, r4
 80013c4:	2b04      	cmp	r3, #4
 80013c6:	d005      	beq.n	80013d4 <__aeabi_dadd+0x10c>
 80013c8:	1d23      	adds	r3, r4, #4
 80013ca:	42a3      	cmp	r3, r4
 80013cc:	41a4      	sbcs	r4, r4
 80013ce:	4264      	negs	r4, r4
 80013d0:	193f      	adds	r7, r7, r4
 80013d2:	001c      	movs	r4, r3
 80013d4:	023b      	lsls	r3, r7, #8
 80013d6:	d400      	bmi.n	80013da <__aeabi_dadd+0x112>
 80013d8:	e09e      	b.n	8001518 <__aeabi_dadd+0x250>
 80013da:	4b95      	ldr	r3, [pc, #596]	; (8001630 <__aeabi_dadd+0x368>)
 80013dc:	3601      	adds	r6, #1
 80013de:	429e      	cmp	r6, r3
 80013e0:	d100      	bne.n	80013e4 <__aeabi_dadd+0x11c>
 80013e2:	e0b7      	b.n	8001554 <__aeabi_dadd+0x28c>
 80013e4:	4a93      	ldr	r2, [pc, #588]	; (8001634 <__aeabi_dadd+0x36c>)
 80013e6:	08e4      	lsrs	r4, r4, #3
 80013e8:	4017      	ands	r7, r2
 80013ea:	077b      	lsls	r3, r7, #29
 80013ec:	0571      	lsls	r1, r6, #21
 80013ee:	027f      	lsls	r7, r7, #9
 80013f0:	4323      	orrs	r3, r4
 80013f2:	0b3f      	lsrs	r7, r7, #12
 80013f4:	0d4a      	lsrs	r2, r1, #21
 80013f6:	0512      	lsls	r2, r2, #20
 80013f8:	433a      	orrs	r2, r7
 80013fa:	07ed      	lsls	r5, r5, #31
 80013fc:	432a      	orrs	r2, r5
 80013fe:	0018      	movs	r0, r3
 8001400:	0011      	movs	r1, r2
 8001402:	bce0      	pop	{r5, r6, r7}
 8001404:	46ba      	mov	sl, r7
 8001406:	46b1      	mov	r9, r6
 8001408:	46a8      	mov	r8, r5
 800140a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800140c:	2c00      	cmp	r4, #0
 800140e:	d04b      	beq.n	80014a8 <__aeabi_dadd+0x1e0>
 8001410:	464c      	mov	r4, r9
 8001412:	1ba4      	subs	r4, r4, r6
 8001414:	46a4      	mov	ip, r4
 8001416:	2e00      	cmp	r6, #0
 8001418:	d000      	beq.n	800141c <__aeabi_dadd+0x154>
 800141a:	e123      	b.n	8001664 <__aeabi_dadd+0x39c>
 800141c:	0004      	movs	r4, r0
 800141e:	431c      	orrs	r4, r3
 8001420:	d100      	bne.n	8001424 <__aeabi_dadd+0x15c>
 8001422:	e1af      	b.n	8001784 <__aeabi_dadd+0x4bc>
 8001424:	4662      	mov	r2, ip
 8001426:	1e54      	subs	r4, r2, #1
 8001428:	2a01      	cmp	r2, #1
 800142a:	d100      	bne.n	800142e <__aeabi_dadd+0x166>
 800142c:	e215      	b.n	800185a <__aeabi_dadd+0x592>
 800142e:	4d80      	ldr	r5, [pc, #512]	; (8001630 <__aeabi_dadd+0x368>)
 8001430:	45ac      	cmp	ip, r5
 8001432:	d100      	bne.n	8001436 <__aeabi_dadd+0x16e>
 8001434:	e1c8      	b.n	80017c8 <__aeabi_dadd+0x500>
 8001436:	46a4      	mov	ip, r4
 8001438:	e11b      	b.n	8001672 <__aeabi_dadd+0x3aa>
 800143a:	464a      	mov	r2, r9
 800143c:	1ab2      	subs	r2, r6, r2
 800143e:	4694      	mov	ip, r2
 8001440:	2a00      	cmp	r2, #0
 8001442:	dc00      	bgt.n	8001446 <__aeabi_dadd+0x17e>
 8001444:	e0ac      	b.n	80015a0 <__aeabi_dadd+0x2d8>
 8001446:	464a      	mov	r2, r9
 8001448:	2a00      	cmp	r2, #0
 800144a:	d043      	beq.n	80014d4 <__aeabi_dadd+0x20c>
 800144c:	4a78      	ldr	r2, [pc, #480]	; (8001630 <__aeabi_dadd+0x368>)
 800144e:	4296      	cmp	r6, r2
 8001450:	d100      	bne.n	8001454 <__aeabi_dadd+0x18c>
 8001452:	e1af      	b.n	80017b4 <__aeabi_dadd+0x4ec>
 8001454:	2280      	movs	r2, #128	; 0x80
 8001456:	003c      	movs	r4, r7
 8001458:	0412      	lsls	r2, r2, #16
 800145a:	4314      	orrs	r4, r2
 800145c:	46a0      	mov	r8, r4
 800145e:	4662      	mov	r2, ip
 8001460:	2a38      	cmp	r2, #56	; 0x38
 8001462:	dc67      	bgt.n	8001534 <__aeabi_dadd+0x26c>
 8001464:	2a1f      	cmp	r2, #31
 8001466:	dc00      	bgt.n	800146a <__aeabi_dadd+0x1a2>
 8001468:	e15f      	b.n	800172a <__aeabi_dadd+0x462>
 800146a:	4647      	mov	r7, r8
 800146c:	3a20      	subs	r2, #32
 800146e:	40d7      	lsrs	r7, r2
 8001470:	4662      	mov	r2, ip
 8001472:	2a20      	cmp	r2, #32
 8001474:	d005      	beq.n	8001482 <__aeabi_dadd+0x1ba>
 8001476:	4664      	mov	r4, ip
 8001478:	2240      	movs	r2, #64	; 0x40
 800147a:	1b12      	subs	r2, r2, r4
 800147c:	4644      	mov	r4, r8
 800147e:	4094      	lsls	r4, r2
 8001480:	4321      	orrs	r1, r4
 8001482:	1e4a      	subs	r2, r1, #1
 8001484:	4191      	sbcs	r1, r2
 8001486:	000c      	movs	r4, r1
 8001488:	433c      	orrs	r4, r7
 800148a:	e057      	b.n	800153c <__aeabi_dadd+0x274>
 800148c:	003a      	movs	r2, r7
 800148e:	430a      	orrs	r2, r1
 8001490:	d100      	bne.n	8001494 <__aeabi_dadd+0x1cc>
 8001492:	e105      	b.n	80016a0 <__aeabi_dadd+0x3d8>
 8001494:	0022      	movs	r2, r4
 8001496:	3a01      	subs	r2, #1
 8001498:	2c01      	cmp	r4, #1
 800149a:	d100      	bne.n	800149e <__aeabi_dadd+0x1d6>
 800149c:	e182      	b.n	80017a4 <__aeabi_dadd+0x4dc>
 800149e:	4c64      	ldr	r4, [pc, #400]	; (8001630 <__aeabi_dadd+0x368>)
 80014a0:	45a4      	cmp	ip, r4
 80014a2:	d05b      	beq.n	800155c <__aeabi_dadd+0x294>
 80014a4:	4694      	mov	ip, r2
 80014a6:	e741      	b.n	800132c <__aeabi_dadd+0x64>
 80014a8:	4c63      	ldr	r4, [pc, #396]	; (8001638 <__aeabi_dadd+0x370>)
 80014aa:	1c77      	adds	r7, r6, #1
 80014ac:	4227      	tst	r7, r4
 80014ae:	d000      	beq.n	80014b2 <__aeabi_dadd+0x1ea>
 80014b0:	e0c4      	b.n	800163c <__aeabi_dadd+0x374>
 80014b2:	0004      	movs	r4, r0
 80014b4:	431c      	orrs	r4, r3
 80014b6:	2e00      	cmp	r6, #0
 80014b8:	d000      	beq.n	80014bc <__aeabi_dadd+0x1f4>
 80014ba:	e169      	b.n	8001790 <__aeabi_dadd+0x4c8>
 80014bc:	2c00      	cmp	r4, #0
 80014be:	d100      	bne.n	80014c2 <__aeabi_dadd+0x1fa>
 80014c0:	e1bf      	b.n	8001842 <__aeabi_dadd+0x57a>
 80014c2:	4644      	mov	r4, r8
 80014c4:	430c      	orrs	r4, r1
 80014c6:	d000      	beq.n	80014ca <__aeabi_dadd+0x202>
 80014c8:	e1d0      	b.n	800186c <__aeabi_dadd+0x5a4>
 80014ca:	0742      	lsls	r2, r0, #29
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	4313      	orrs	r3, r2
 80014d0:	08c0      	lsrs	r0, r0, #3
 80014d2:	e029      	b.n	8001528 <__aeabi_dadd+0x260>
 80014d4:	003a      	movs	r2, r7
 80014d6:	430a      	orrs	r2, r1
 80014d8:	d100      	bne.n	80014dc <__aeabi_dadd+0x214>
 80014da:	e170      	b.n	80017be <__aeabi_dadd+0x4f6>
 80014dc:	4662      	mov	r2, ip
 80014de:	4664      	mov	r4, ip
 80014e0:	3a01      	subs	r2, #1
 80014e2:	2c01      	cmp	r4, #1
 80014e4:	d100      	bne.n	80014e8 <__aeabi_dadd+0x220>
 80014e6:	e0e0      	b.n	80016aa <__aeabi_dadd+0x3e2>
 80014e8:	4c51      	ldr	r4, [pc, #324]	; (8001630 <__aeabi_dadd+0x368>)
 80014ea:	45a4      	cmp	ip, r4
 80014ec:	d100      	bne.n	80014f0 <__aeabi_dadd+0x228>
 80014ee:	e161      	b.n	80017b4 <__aeabi_dadd+0x4ec>
 80014f0:	4694      	mov	ip, r2
 80014f2:	e7b4      	b.n	800145e <__aeabi_dadd+0x196>
 80014f4:	003a      	movs	r2, r7
 80014f6:	391f      	subs	r1, #31
 80014f8:	40ca      	lsrs	r2, r1
 80014fa:	0011      	movs	r1, r2
 80014fc:	2b20      	cmp	r3, #32
 80014fe:	d003      	beq.n	8001508 <__aeabi_dadd+0x240>
 8001500:	2240      	movs	r2, #64	; 0x40
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	409f      	lsls	r7, r3
 8001506:	433c      	orrs	r4, r7
 8001508:	1e63      	subs	r3, r4, #1
 800150a:	419c      	sbcs	r4, r3
 800150c:	2700      	movs	r7, #0
 800150e:	2600      	movs	r6, #0
 8001510:	430c      	orrs	r4, r1
 8001512:	0763      	lsls	r3, r4, #29
 8001514:	d000      	beq.n	8001518 <__aeabi_dadd+0x250>
 8001516:	e753      	b.n	80013c0 <__aeabi_dadd+0xf8>
 8001518:	46b4      	mov	ip, r6
 800151a:	08e4      	lsrs	r4, r4, #3
 800151c:	077b      	lsls	r3, r7, #29
 800151e:	4323      	orrs	r3, r4
 8001520:	08f8      	lsrs	r0, r7, #3
 8001522:	4a43      	ldr	r2, [pc, #268]	; (8001630 <__aeabi_dadd+0x368>)
 8001524:	4594      	cmp	ip, r2
 8001526:	d01d      	beq.n	8001564 <__aeabi_dadd+0x29c>
 8001528:	4662      	mov	r2, ip
 800152a:	0307      	lsls	r7, r0, #12
 800152c:	0552      	lsls	r2, r2, #21
 800152e:	0b3f      	lsrs	r7, r7, #12
 8001530:	0d52      	lsrs	r2, r2, #21
 8001532:	e760      	b.n	80013f6 <__aeabi_dadd+0x12e>
 8001534:	4644      	mov	r4, r8
 8001536:	430c      	orrs	r4, r1
 8001538:	1e62      	subs	r2, r4, #1
 800153a:	4194      	sbcs	r4, r2
 800153c:	18e4      	adds	r4, r4, r3
 800153e:	429c      	cmp	r4, r3
 8001540:	419b      	sbcs	r3, r3
 8001542:	425f      	negs	r7, r3
 8001544:	183f      	adds	r7, r7, r0
 8001546:	023b      	lsls	r3, r7, #8
 8001548:	d5e3      	bpl.n	8001512 <__aeabi_dadd+0x24a>
 800154a:	4b39      	ldr	r3, [pc, #228]	; (8001630 <__aeabi_dadd+0x368>)
 800154c:	3601      	adds	r6, #1
 800154e:	429e      	cmp	r6, r3
 8001550:	d000      	beq.n	8001554 <__aeabi_dadd+0x28c>
 8001552:	e0b5      	b.n	80016c0 <__aeabi_dadd+0x3f8>
 8001554:	0032      	movs	r2, r6
 8001556:	2700      	movs	r7, #0
 8001558:	2300      	movs	r3, #0
 800155a:	e74c      	b.n	80013f6 <__aeabi_dadd+0x12e>
 800155c:	0742      	lsls	r2, r0, #29
 800155e:	08db      	lsrs	r3, r3, #3
 8001560:	4313      	orrs	r3, r2
 8001562:	08c0      	lsrs	r0, r0, #3
 8001564:	001a      	movs	r2, r3
 8001566:	4302      	orrs	r2, r0
 8001568:	d100      	bne.n	800156c <__aeabi_dadd+0x2a4>
 800156a:	e1e1      	b.n	8001930 <__aeabi_dadd+0x668>
 800156c:	2780      	movs	r7, #128	; 0x80
 800156e:	033f      	lsls	r7, r7, #12
 8001570:	4307      	orrs	r7, r0
 8001572:	033f      	lsls	r7, r7, #12
 8001574:	4a2e      	ldr	r2, [pc, #184]	; (8001630 <__aeabi_dadd+0x368>)
 8001576:	0b3f      	lsrs	r7, r7, #12
 8001578:	e73d      	b.n	80013f6 <__aeabi_dadd+0x12e>
 800157a:	0020      	movs	r0, r4
 800157c:	f001 fd5a 	bl	8003034 <__clzsi2>
 8001580:	0001      	movs	r1, r0
 8001582:	3118      	adds	r1, #24
 8001584:	291f      	cmp	r1, #31
 8001586:	dc00      	bgt.n	800158a <__aeabi_dadd+0x2c2>
 8001588:	e6fc      	b.n	8001384 <__aeabi_dadd+0xbc>
 800158a:	3808      	subs	r0, #8
 800158c:	4084      	lsls	r4, r0
 800158e:	0027      	movs	r7, r4
 8001590:	2400      	movs	r4, #0
 8001592:	42b1      	cmp	r1, r6
 8001594:	db00      	blt.n	8001598 <__aeabi_dadd+0x2d0>
 8001596:	e6ff      	b.n	8001398 <__aeabi_dadd+0xd0>
 8001598:	4a26      	ldr	r2, [pc, #152]	; (8001634 <__aeabi_dadd+0x36c>)
 800159a:	1a76      	subs	r6, r6, r1
 800159c:	4017      	ands	r7, r2
 800159e:	e70d      	b.n	80013bc <__aeabi_dadd+0xf4>
 80015a0:	2a00      	cmp	r2, #0
 80015a2:	d02f      	beq.n	8001604 <__aeabi_dadd+0x33c>
 80015a4:	464a      	mov	r2, r9
 80015a6:	1b92      	subs	r2, r2, r6
 80015a8:	4694      	mov	ip, r2
 80015aa:	2e00      	cmp	r6, #0
 80015ac:	d100      	bne.n	80015b0 <__aeabi_dadd+0x2e8>
 80015ae:	e0ad      	b.n	800170c <__aeabi_dadd+0x444>
 80015b0:	4a1f      	ldr	r2, [pc, #124]	; (8001630 <__aeabi_dadd+0x368>)
 80015b2:	4591      	cmp	r9, r2
 80015b4:	d100      	bne.n	80015b8 <__aeabi_dadd+0x2f0>
 80015b6:	e10f      	b.n	80017d8 <__aeabi_dadd+0x510>
 80015b8:	2280      	movs	r2, #128	; 0x80
 80015ba:	0412      	lsls	r2, r2, #16
 80015bc:	4310      	orrs	r0, r2
 80015be:	4662      	mov	r2, ip
 80015c0:	2a38      	cmp	r2, #56	; 0x38
 80015c2:	dd00      	ble.n	80015c6 <__aeabi_dadd+0x2fe>
 80015c4:	e10f      	b.n	80017e6 <__aeabi_dadd+0x51e>
 80015c6:	2a1f      	cmp	r2, #31
 80015c8:	dd00      	ble.n	80015cc <__aeabi_dadd+0x304>
 80015ca:	e180      	b.n	80018ce <__aeabi_dadd+0x606>
 80015cc:	4664      	mov	r4, ip
 80015ce:	2220      	movs	r2, #32
 80015d0:	001e      	movs	r6, r3
 80015d2:	1b12      	subs	r2, r2, r4
 80015d4:	4667      	mov	r7, ip
 80015d6:	0004      	movs	r4, r0
 80015d8:	4093      	lsls	r3, r2
 80015da:	4094      	lsls	r4, r2
 80015dc:	40fe      	lsrs	r6, r7
 80015de:	1e5a      	subs	r2, r3, #1
 80015e0:	4193      	sbcs	r3, r2
 80015e2:	40f8      	lsrs	r0, r7
 80015e4:	4334      	orrs	r4, r6
 80015e6:	431c      	orrs	r4, r3
 80015e8:	4480      	add	r8, r0
 80015ea:	1864      	adds	r4, r4, r1
 80015ec:	428c      	cmp	r4, r1
 80015ee:	41bf      	sbcs	r7, r7
 80015f0:	427f      	negs	r7, r7
 80015f2:	464e      	mov	r6, r9
 80015f4:	4447      	add	r7, r8
 80015f6:	e7a6      	b.n	8001546 <__aeabi_dadd+0x27e>
 80015f8:	4642      	mov	r2, r8
 80015fa:	430a      	orrs	r2, r1
 80015fc:	0011      	movs	r1, r2
 80015fe:	1e4a      	subs	r2, r1, #1
 8001600:	4191      	sbcs	r1, r2
 8001602:	e6ad      	b.n	8001360 <__aeabi_dadd+0x98>
 8001604:	4c0c      	ldr	r4, [pc, #48]	; (8001638 <__aeabi_dadd+0x370>)
 8001606:	1c72      	adds	r2, r6, #1
 8001608:	4222      	tst	r2, r4
 800160a:	d000      	beq.n	800160e <__aeabi_dadd+0x346>
 800160c:	e0a1      	b.n	8001752 <__aeabi_dadd+0x48a>
 800160e:	0002      	movs	r2, r0
 8001610:	431a      	orrs	r2, r3
 8001612:	2e00      	cmp	r6, #0
 8001614:	d000      	beq.n	8001618 <__aeabi_dadd+0x350>
 8001616:	e0fa      	b.n	800180e <__aeabi_dadd+0x546>
 8001618:	2a00      	cmp	r2, #0
 800161a:	d100      	bne.n	800161e <__aeabi_dadd+0x356>
 800161c:	e145      	b.n	80018aa <__aeabi_dadd+0x5e2>
 800161e:	003a      	movs	r2, r7
 8001620:	430a      	orrs	r2, r1
 8001622:	d000      	beq.n	8001626 <__aeabi_dadd+0x35e>
 8001624:	e146      	b.n	80018b4 <__aeabi_dadd+0x5ec>
 8001626:	0742      	lsls	r2, r0, #29
 8001628:	08db      	lsrs	r3, r3, #3
 800162a:	4313      	orrs	r3, r2
 800162c:	08c0      	lsrs	r0, r0, #3
 800162e:	e77b      	b.n	8001528 <__aeabi_dadd+0x260>
 8001630:	000007ff 	.word	0x000007ff
 8001634:	ff7fffff 	.word	0xff7fffff
 8001638:	000007fe 	.word	0x000007fe
 800163c:	4647      	mov	r7, r8
 800163e:	1a5c      	subs	r4, r3, r1
 8001640:	1bc2      	subs	r2, r0, r7
 8001642:	42a3      	cmp	r3, r4
 8001644:	41bf      	sbcs	r7, r7
 8001646:	427f      	negs	r7, r7
 8001648:	46b9      	mov	r9, r7
 800164a:	0017      	movs	r7, r2
 800164c:	464a      	mov	r2, r9
 800164e:	1abf      	subs	r7, r7, r2
 8001650:	023a      	lsls	r2, r7, #8
 8001652:	d500      	bpl.n	8001656 <__aeabi_dadd+0x38e>
 8001654:	e08d      	b.n	8001772 <__aeabi_dadd+0x4aa>
 8001656:	0023      	movs	r3, r4
 8001658:	433b      	orrs	r3, r7
 800165a:	d000      	beq.n	800165e <__aeabi_dadd+0x396>
 800165c:	e68a      	b.n	8001374 <__aeabi_dadd+0xac>
 800165e:	2000      	movs	r0, #0
 8001660:	2500      	movs	r5, #0
 8001662:	e761      	b.n	8001528 <__aeabi_dadd+0x260>
 8001664:	4cb4      	ldr	r4, [pc, #720]	; (8001938 <__aeabi_dadd+0x670>)
 8001666:	45a1      	cmp	r9, r4
 8001668:	d100      	bne.n	800166c <__aeabi_dadd+0x3a4>
 800166a:	e0ad      	b.n	80017c8 <__aeabi_dadd+0x500>
 800166c:	2480      	movs	r4, #128	; 0x80
 800166e:	0424      	lsls	r4, r4, #16
 8001670:	4320      	orrs	r0, r4
 8001672:	4664      	mov	r4, ip
 8001674:	2c38      	cmp	r4, #56	; 0x38
 8001676:	dc3d      	bgt.n	80016f4 <__aeabi_dadd+0x42c>
 8001678:	4662      	mov	r2, ip
 800167a:	2c1f      	cmp	r4, #31
 800167c:	dd00      	ble.n	8001680 <__aeabi_dadd+0x3b8>
 800167e:	e0b7      	b.n	80017f0 <__aeabi_dadd+0x528>
 8001680:	2520      	movs	r5, #32
 8001682:	001e      	movs	r6, r3
 8001684:	1b2d      	subs	r5, r5, r4
 8001686:	0004      	movs	r4, r0
 8001688:	40ab      	lsls	r3, r5
 800168a:	40ac      	lsls	r4, r5
 800168c:	40d6      	lsrs	r6, r2
 800168e:	40d0      	lsrs	r0, r2
 8001690:	4642      	mov	r2, r8
 8001692:	1e5d      	subs	r5, r3, #1
 8001694:	41ab      	sbcs	r3, r5
 8001696:	4334      	orrs	r4, r6
 8001698:	1a12      	subs	r2, r2, r0
 800169a:	4690      	mov	r8, r2
 800169c:	4323      	orrs	r3, r4
 800169e:	e02c      	b.n	80016fa <__aeabi_dadd+0x432>
 80016a0:	0742      	lsls	r2, r0, #29
 80016a2:	08db      	lsrs	r3, r3, #3
 80016a4:	4313      	orrs	r3, r2
 80016a6:	08c0      	lsrs	r0, r0, #3
 80016a8:	e73b      	b.n	8001522 <__aeabi_dadd+0x25a>
 80016aa:	185c      	adds	r4, r3, r1
 80016ac:	429c      	cmp	r4, r3
 80016ae:	419b      	sbcs	r3, r3
 80016b0:	4440      	add	r0, r8
 80016b2:	425b      	negs	r3, r3
 80016b4:	18c7      	adds	r7, r0, r3
 80016b6:	2601      	movs	r6, #1
 80016b8:	023b      	lsls	r3, r7, #8
 80016ba:	d400      	bmi.n	80016be <__aeabi_dadd+0x3f6>
 80016bc:	e729      	b.n	8001512 <__aeabi_dadd+0x24a>
 80016be:	2602      	movs	r6, #2
 80016c0:	4a9e      	ldr	r2, [pc, #632]	; (800193c <__aeabi_dadd+0x674>)
 80016c2:	0863      	lsrs	r3, r4, #1
 80016c4:	4017      	ands	r7, r2
 80016c6:	2201      	movs	r2, #1
 80016c8:	4014      	ands	r4, r2
 80016ca:	431c      	orrs	r4, r3
 80016cc:	07fb      	lsls	r3, r7, #31
 80016ce:	431c      	orrs	r4, r3
 80016d0:	087f      	lsrs	r7, r7, #1
 80016d2:	e673      	b.n	80013bc <__aeabi_dadd+0xf4>
 80016d4:	4644      	mov	r4, r8
 80016d6:	3a20      	subs	r2, #32
 80016d8:	40d4      	lsrs	r4, r2
 80016da:	4662      	mov	r2, ip
 80016dc:	2a20      	cmp	r2, #32
 80016de:	d005      	beq.n	80016ec <__aeabi_dadd+0x424>
 80016e0:	4667      	mov	r7, ip
 80016e2:	2240      	movs	r2, #64	; 0x40
 80016e4:	1bd2      	subs	r2, r2, r7
 80016e6:	4647      	mov	r7, r8
 80016e8:	4097      	lsls	r7, r2
 80016ea:	4339      	orrs	r1, r7
 80016ec:	1e4a      	subs	r2, r1, #1
 80016ee:	4191      	sbcs	r1, r2
 80016f0:	4321      	orrs	r1, r4
 80016f2:	e635      	b.n	8001360 <__aeabi_dadd+0x98>
 80016f4:	4303      	orrs	r3, r0
 80016f6:	1e58      	subs	r0, r3, #1
 80016f8:	4183      	sbcs	r3, r0
 80016fa:	1acc      	subs	r4, r1, r3
 80016fc:	42a1      	cmp	r1, r4
 80016fe:	41bf      	sbcs	r7, r7
 8001700:	4643      	mov	r3, r8
 8001702:	427f      	negs	r7, r7
 8001704:	4655      	mov	r5, sl
 8001706:	464e      	mov	r6, r9
 8001708:	1bdf      	subs	r7, r3, r7
 800170a:	e62e      	b.n	800136a <__aeabi_dadd+0xa2>
 800170c:	0002      	movs	r2, r0
 800170e:	431a      	orrs	r2, r3
 8001710:	d100      	bne.n	8001714 <__aeabi_dadd+0x44c>
 8001712:	e0bd      	b.n	8001890 <__aeabi_dadd+0x5c8>
 8001714:	4662      	mov	r2, ip
 8001716:	4664      	mov	r4, ip
 8001718:	3a01      	subs	r2, #1
 800171a:	2c01      	cmp	r4, #1
 800171c:	d100      	bne.n	8001720 <__aeabi_dadd+0x458>
 800171e:	e0e5      	b.n	80018ec <__aeabi_dadd+0x624>
 8001720:	4c85      	ldr	r4, [pc, #532]	; (8001938 <__aeabi_dadd+0x670>)
 8001722:	45a4      	cmp	ip, r4
 8001724:	d058      	beq.n	80017d8 <__aeabi_dadd+0x510>
 8001726:	4694      	mov	ip, r2
 8001728:	e749      	b.n	80015be <__aeabi_dadd+0x2f6>
 800172a:	4664      	mov	r4, ip
 800172c:	2220      	movs	r2, #32
 800172e:	1b12      	subs	r2, r2, r4
 8001730:	4644      	mov	r4, r8
 8001732:	4094      	lsls	r4, r2
 8001734:	000f      	movs	r7, r1
 8001736:	46a1      	mov	r9, r4
 8001738:	4664      	mov	r4, ip
 800173a:	4091      	lsls	r1, r2
 800173c:	40e7      	lsrs	r7, r4
 800173e:	464c      	mov	r4, r9
 8001740:	1e4a      	subs	r2, r1, #1
 8001742:	4191      	sbcs	r1, r2
 8001744:	433c      	orrs	r4, r7
 8001746:	4642      	mov	r2, r8
 8001748:	430c      	orrs	r4, r1
 800174a:	4661      	mov	r1, ip
 800174c:	40ca      	lsrs	r2, r1
 800174e:	1880      	adds	r0, r0, r2
 8001750:	e6f4      	b.n	800153c <__aeabi_dadd+0x274>
 8001752:	4c79      	ldr	r4, [pc, #484]	; (8001938 <__aeabi_dadd+0x670>)
 8001754:	42a2      	cmp	r2, r4
 8001756:	d100      	bne.n	800175a <__aeabi_dadd+0x492>
 8001758:	e6fd      	b.n	8001556 <__aeabi_dadd+0x28e>
 800175a:	1859      	adds	r1, r3, r1
 800175c:	4299      	cmp	r1, r3
 800175e:	419b      	sbcs	r3, r3
 8001760:	4440      	add	r0, r8
 8001762:	425f      	negs	r7, r3
 8001764:	19c7      	adds	r7, r0, r7
 8001766:	07fc      	lsls	r4, r7, #31
 8001768:	0849      	lsrs	r1, r1, #1
 800176a:	0016      	movs	r6, r2
 800176c:	430c      	orrs	r4, r1
 800176e:	087f      	lsrs	r7, r7, #1
 8001770:	e6cf      	b.n	8001512 <__aeabi_dadd+0x24a>
 8001772:	1acc      	subs	r4, r1, r3
 8001774:	42a1      	cmp	r1, r4
 8001776:	41bf      	sbcs	r7, r7
 8001778:	4643      	mov	r3, r8
 800177a:	427f      	negs	r7, r7
 800177c:	1a18      	subs	r0, r3, r0
 800177e:	4655      	mov	r5, sl
 8001780:	1bc7      	subs	r7, r0, r7
 8001782:	e5f7      	b.n	8001374 <__aeabi_dadd+0xac>
 8001784:	08c9      	lsrs	r1, r1, #3
 8001786:	077b      	lsls	r3, r7, #29
 8001788:	4655      	mov	r5, sl
 800178a:	430b      	orrs	r3, r1
 800178c:	08f8      	lsrs	r0, r7, #3
 800178e:	e6c8      	b.n	8001522 <__aeabi_dadd+0x25a>
 8001790:	2c00      	cmp	r4, #0
 8001792:	d000      	beq.n	8001796 <__aeabi_dadd+0x4ce>
 8001794:	e081      	b.n	800189a <__aeabi_dadd+0x5d2>
 8001796:	4643      	mov	r3, r8
 8001798:	430b      	orrs	r3, r1
 800179a:	d115      	bne.n	80017c8 <__aeabi_dadd+0x500>
 800179c:	2080      	movs	r0, #128	; 0x80
 800179e:	2500      	movs	r5, #0
 80017a0:	0300      	lsls	r0, r0, #12
 80017a2:	e6e3      	b.n	800156c <__aeabi_dadd+0x2a4>
 80017a4:	1a5c      	subs	r4, r3, r1
 80017a6:	42a3      	cmp	r3, r4
 80017a8:	419b      	sbcs	r3, r3
 80017aa:	1bc7      	subs	r7, r0, r7
 80017ac:	425b      	negs	r3, r3
 80017ae:	2601      	movs	r6, #1
 80017b0:	1aff      	subs	r7, r7, r3
 80017b2:	e5da      	b.n	800136a <__aeabi_dadd+0xa2>
 80017b4:	0742      	lsls	r2, r0, #29
 80017b6:	08db      	lsrs	r3, r3, #3
 80017b8:	4313      	orrs	r3, r2
 80017ba:	08c0      	lsrs	r0, r0, #3
 80017bc:	e6d2      	b.n	8001564 <__aeabi_dadd+0x29c>
 80017be:	0742      	lsls	r2, r0, #29
 80017c0:	08db      	lsrs	r3, r3, #3
 80017c2:	4313      	orrs	r3, r2
 80017c4:	08c0      	lsrs	r0, r0, #3
 80017c6:	e6ac      	b.n	8001522 <__aeabi_dadd+0x25a>
 80017c8:	4643      	mov	r3, r8
 80017ca:	4642      	mov	r2, r8
 80017cc:	08c9      	lsrs	r1, r1, #3
 80017ce:	075b      	lsls	r3, r3, #29
 80017d0:	4655      	mov	r5, sl
 80017d2:	430b      	orrs	r3, r1
 80017d4:	08d0      	lsrs	r0, r2, #3
 80017d6:	e6c5      	b.n	8001564 <__aeabi_dadd+0x29c>
 80017d8:	4643      	mov	r3, r8
 80017da:	4642      	mov	r2, r8
 80017dc:	075b      	lsls	r3, r3, #29
 80017de:	08c9      	lsrs	r1, r1, #3
 80017e0:	430b      	orrs	r3, r1
 80017e2:	08d0      	lsrs	r0, r2, #3
 80017e4:	e6be      	b.n	8001564 <__aeabi_dadd+0x29c>
 80017e6:	4303      	orrs	r3, r0
 80017e8:	001c      	movs	r4, r3
 80017ea:	1e63      	subs	r3, r4, #1
 80017ec:	419c      	sbcs	r4, r3
 80017ee:	e6fc      	b.n	80015ea <__aeabi_dadd+0x322>
 80017f0:	0002      	movs	r2, r0
 80017f2:	3c20      	subs	r4, #32
 80017f4:	40e2      	lsrs	r2, r4
 80017f6:	0014      	movs	r4, r2
 80017f8:	4662      	mov	r2, ip
 80017fa:	2a20      	cmp	r2, #32
 80017fc:	d003      	beq.n	8001806 <__aeabi_dadd+0x53e>
 80017fe:	2540      	movs	r5, #64	; 0x40
 8001800:	1aad      	subs	r5, r5, r2
 8001802:	40a8      	lsls	r0, r5
 8001804:	4303      	orrs	r3, r0
 8001806:	1e58      	subs	r0, r3, #1
 8001808:	4183      	sbcs	r3, r0
 800180a:	4323      	orrs	r3, r4
 800180c:	e775      	b.n	80016fa <__aeabi_dadd+0x432>
 800180e:	2a00      	cmp	r2, #0
 8001810:	d0e2      	beq.n	80017d8 <__aeabi_dadd+0x510>
 8001812:	003a      	movs	r2, r7
 8001814:	430a      	orrs	r2, r1
 8001816:	d0cd      	beq.n	80017b4 <__aeabi_dadd+0x4ec>
 8001818:	0742      	lsls	r2, r0, #29
 800181a:	08db      	lsrs	r3, r3, #3
 800181c:	4313      	orrs	r3, r2
 800181e:	2280      	movs	r2, #128	; 0x80
 8001820:	08c0      	lsrs	r0, r0, #3
 8001822:	0312      	lsls	r2, r2, #12
 8001824:	4210      	tst	r0, r2
 8001826:	d006      	beq.n	8001836 <__aeabi_dadd+0x56e>
 8001828:	08fc      	lsrs	r4, r7, #3
 800182a:	4214      	tst	r4, r2
 800182c:	d103      	bne.n	8001836 <__aeabi_dadd+0x56e>
 800182e:	0020      	movs	r0, r4
 8001830:	08cb      	lsrs	r3, r1, #3
 8001832:	077a      	lsls	r2, r7, #29
 8001834:	4313      	orrs	r3, r2
 8001836:	0f5a      	lsrs	r2, r3, #29
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	0752      	lsls	r2, r2, #29
 800183c:	08db      	lsrs	r3, r3, #3
 800183e:	4313      	orrs	r3, r2
 8001840:	e690      	b.n	8001564 <__aeabi_dadd+0x29c>
 8001842:	4643      	mov	r3, r8
 8001844:	430b      	orrs	r3, r1
 8001846:	d100      	bne.n	800184a <__aeabi_dadd+0x582>
 8001848:	e709      	b.n	800165e <__aeabi_dadd+0x396>
 800184a:	4643      	mov	r3, r8
 800184c:	4642      	mov	r2, r8
 800184e:	08c9      	lsrs	r1, r1, #3
 8001850:	075b      	lsls	r3, r3, #29
 8001852:	4655      	mov	r5, sl
 8001854:	430b      	orrs	r3, r1
 8001856:	08d0      	lsrs	r0, r2, #3
 8001858:	e666      	b.n	8001528 <__aeabi_dadd+0x260>
 800185a:	1acc      	subs	r4, r1, r3
 800185c:	42a1      	cmp	r1, r4
 800185e:	4189      	sbcs	r1, r1
 8001860:	1a3f      	subs	r7, r7, r0
 8001862:	4249      	negs	r1, r1
 8001864:	4655      	mov	r5, sl
 8001866:	2601      	movs	r6, #1
 8001868:	1a7f      	subs	r7, r7, r1
 800186a:	e57e      	b.n	800136a <__aeabi_dadd+0xa2>
 800186c:	4642      	mov	r2, r8
 800186e:	1a5c      	subs	r4, r3, r1
 8001870:	1a87      	subs	r7, r0, r2
 8001872:	42a3      	cmp	r3, r4
 8001874:	4192      	sbcs	r2, r2
 8001876:	4252      	negs	r2, r2
 8001878:	1abf      	subs	r7, r7, r2
 800187a:	023a      	lsls	r2, r7, #8
 800187c:	d53d      	bpl.n	80018fa <__aeabi_dadd+0x632>
 800187e:	1acc      	subs	r4, r1, r3
 8001880:	42a1      	cmp	r1, r4
 8001882:	4189      	sbcs	r1, r1
 8001884:	4643      	mov	r3, r8
 8001886:	4249      	negs	r1, r1
 8001888:	1a1f      	subs	r7, r3, r0
 800188a:	4655      	mov	r5, sl
 800188c:	1a7f      	subs	r7, r7, r1
 800188e:	e595      	b.n	80013bc <__aeabi_dadd+0xf4>
 8001890:	077b      	lsls	r3, r7, #29
 8001892:	08c9      	lsrs	r1, r1, #3
 8001894:	430b      	orrs	r3, r1
 8001896:	08f8      	lsrs	r0, r7, #3
 8001898:	e643      	b.n	8001522 <__aeabi_dadd+0x25a>
 800189a:	4644      	mov	r4, r8
 800189c:	08db      	lsrs	r3, r3, #3
 800189e:	430c      	orrs	r4, r1
 80018a0:	d130      	bne.n	8001904 <__aeabi_dadd+0x63c>
 80018a2:	0742      	lsls	r2, r0, #29
 80018a4:	4313      	orrs	r3, r2
 80018a6:	08c0      	lsrs	r0, r0, #3
 80018a8:	e65c      	b.n	8001564 <__aeabi_dadd+0x29c>
 80018aa:	077b      	lsls	r3, r7, #29
 80018ac:	08c9      	lsrs	r1, r1, #3
 80018ae:	430b      	orrs	r3, r1
 80018b0:	08f8      	lsrs	r0, r7, #3
 80018b2:	e639      	b.n	8001528 <__aeabi_dadd+0x260>
 80018b4:	185c      	adds	r4, r3, r1
 80018b6:	429c      	cmp	r4, r3
 80018b8:	419b      	sbcs	r3, r3
 80018ba:	4440      	add	r0, r8
 80018bc:	425b      	negs	r3, r3
 80018be:	18c7      	adds	r7, r0, r3
 80018c0:	023b      	lsls	r3, r7, #8
 80018c2:	d400      	bmi.n	80018c6 <__aeabi_dadd+0x5fe>
 80018c4:	e625      	b.n	8001512 <__aeabi_dadd+0x24a>
 80018c6:	4b1d      	ldr	r3, [pc, #116]	; (800193c <__aeabi_dadd+0x674>)
 80018c8:	2601      	movs	r6, #1
 80018ca:	401f      	ands	r7, r3
 80018cc:	e621      	b.n	8001512 <__aeabi_dadd+0x24a>
 80018ce:	0004      	movs	r4, r0
 80018d0:	3a20      	subs	r2, #32
 80018d2:	40d4      	lsrs	r4, r2
 80018d4:	4662      	mov	r2, ip
 80018d6:	2a20      	cmp	r2, #32
 80018d8:	d004      	beq.n	80018e4 <__aeabi_dadd+0x61c>
 80018da:	2240      	movs	r2, #64	; 0x40
 80018dc:	4666      	mov	r6, ip
 80018de:	1b92      	subs	r2, r2, r6
 80018e0:	4090      	lsls	r0, r2
 80018e2:	4303      	orrs	r3, r0
 80018e4:	1e5a      	subs	r2, r3, #1
 80018e6:	4193      	sbcs	r3, r2
 80018e8:	431c      	orrs	r4, r3
 80018ea:	e67e      	b.n	80015ea <__aeabi_dadd+0x322>
 80018ec:	185c      	adds	r4, r3, r1
 80018ee:	428c      	cmp	r4, r1
 80018f0:	4189      	sbcs	r1, r1
 80018f2:	4440      	add	r0, r8
 80018f4:	4249      	negs	r1, r1
 80018f6:	1847      	adds	r7, r0, r1
 80018f8:	e6dd      	b.n	80016b6 <__aeabi_dadd+0x3ee>
 80018fa:	0023      	movs	r3, r4
 80018fc:	433b      	orrs	r3, r7
 80018fe:	d100      	bne.n	8001902 <__aeabi_dadd+0x63a>
 8001900:	e6ad      	b.n	800165e <__aeabi_dadd+0x396>
 8001902:	e606      	b.n	8001512 <__aeabi_dadd+0x24a>
 8001904:	0744      	lsls	r4, r0, #29
 8001906:	4323      	orrs	r3, r4
 8001908:	2480      	movs	r4, #128	; 0x80
 800190a:	08c0      	lsrs	r0, r0, #3
 800190c:	0324      	lsls	r4, r4, #12
 800190e:	4220      	tst	r0, r4
 8001910:	d008      	beq.n	8001924 <__aeabi_dadd+0x65c>
 8001912:	4642      	mov	r2, r8
 8001914:	08d6      	lsrs	r6, r2, #3
 8001916:	4226      	tst	r6, r4
 8001918:	d104      	bne.n	8001924 <__aeabi_dadd+0x65c>
 800191a:	4655      	mov	r5, sl
 800191c:	0030      	movs	r0, r6
 800191e:	08cb      	lsrs	r3, r1, #3
 8001920:	0751      	lsls	r1, r2, #29
 8001922:	430b      	orrs	r3, r1
 8001924:	0f5a      	lsrs	r2, r3, #29
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	08db      	lsrs	r3, r3, #3
 800192a:	0752      	lsls	r2, r2, #29
 800192c:	4313      	orrs	r3, r2
 800192e:	e619      	b.n	8001564 <__aeabi_dadd+0x29c>
 8001930:	2300      	movs	r3, #0
 8001932:	4a01      	ldr	r2, [pc, #4]	; (8001938 <__aeabi_dadd+0x670>)
 8001934:	001f      	movs	r7, r3
 8001936:	e55e      	b.n	80013f6 <__aeabi_dadd+0x12e>
 8001938:	000007ff 	.word	0x000007ff
 800193c:	ff7fffff 	.word	0xff7fffff

08001940 <__aeabi_ddiv>:
 8001940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001942:	4657      	mov	r7, sl
 8001944:	464e      	mov	r6, r9
 8001946:	4645      	mov	r5, r8
 8001948:	46de      	mov	lr, fp
 800194a:	b5e0      	push	{r5, r6, r7, lr}
 800194c:	4681      	mov	r9, r0
 800194e:	0005      	movs	r5, r0
 8001950:	030c      	lsls	r4, r1, #12
 8001952:	0048      	lsls	r0, r1, #1
 8001954:	4692      	mov	sl, r2
 8001956:	001f      	movs	r7, r3
 8001958:	b085      	sub	sp, #20
 800195a:	0b24      	lsrs	r4, r4, #12
 800195c:	0d40      	lsrs	r0, r0, #21
 800195e:	0fce      	lsrs	r6, r1, #31
 8001960:	2800      	cmp	r0, #0
 8001962:	d100      	bne.n	8001966 <__aeabi_ddiv+0x26>
 8001964:	e156      	b.n	8001c14 <__aeabi_ddiv+0x2d4>
 8001966:	4bd4      	ldr	r3, [pc, #848]	; (8001cb8 <__aeabi_ddiv+0x378>)
 8001968:	4298      	cmp	r0, r3
 800196a:	d100      	bne.n	800196e <__aeabi_ddiv+0x2e>
 800196c:	e172      	b.n	8001c54 <__aeabi_ddiv+0x314>
 800196e:	0f6b      	lsrs	r3, r5, #29
 8001970:	00e4      	lsls	r4, r4, #3
 8001972:	431c      	orrs	r4, r3
 8001974:	2380      	movs	r3, #128	; 0x80
 8001976:	041b      	lsls	r3, r3, #16
 8001978:	4323      	orrs	r3, r4
 800197a:	4698      	mov	r8, r3
 800197c:	4bcf      	ldr	r3, [pc, #828]	; (8001cbc <__aeabi_ddiv+0x37c>)
 800197e:	00ed      	lsls	r5, r5, #3
 8001980:	469b      	mov	fp, r3
 8001982:	2300      	movs	r3, #0
 8001984:	4699      	mov	r9, r3
 8001986:	4483      	add	fp, r0
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	033c      	lsls	r4, r7, #12
 800198c:	007b      	lsls	r3, r7, #1
 800198e:	4650      	mov	r0, sl
 8001990:	0b24      	lsrs	r4, r4, #12
 8001992:	0d5b      	lsrs	r3, r3, #21
 8001994:	0fff      	lsrs	r7, r7, #31
 8001996:	2b00      	cmp	r3, #0
 8001998:	d100      	bne.n	800199c <__aeabi_ddiv+0x5c>
 800199a:	e11f      	b.n	8001bdc <__aeabi_ddiv+0x29c>
 800199c:	4ac6      	ldr	r2, [pc, #792]	; (8001cb8 <__aeabi_ddiv+0x378>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d100      	bne.n	80019a4 <__aeabi_ddiv+0x64>
 80019a2:	e162      	b.n	8001c6a <__aeabi_ddiv+0x32a>
 80019a4:	49c5      	ldr	r1, [pc, #788]	; (8001cbc <__aeabi_ddiv+0x37c>)
 80019a6:	0f42      	lsrs	r2, r0, #29
 80019a8:	468c      	mov	ip, r1
 80019aa:	00e4      	lsls	r4, r4, #3
 80019ac:	4659      	mov	r1, fp
 80019ae:	4314      	orrs	r4, r2
 80019b0:	2280      	movs	r2, #128	; 0x80
 80019b2:	4463      	add	r3, ip
 80019b4:	0412      	lsls	r2, r2, #16
 80019b6:	1acb      	subs	r3, r1, r3
 80019b8:	4314      	orrs	r4, r2
 80019ba:	469b      	mov	fp, r3
 80019bc:	00c2      	lsls	r2, r0, #3
 80019be:	2000      	movs	r0, #0
 80019c0:	0033      	movs	r3, r6
 80019c2:	407b      	eors	r3, r7
 80019c4:	469a      	mov	sl, r3
 80019c6:	464b      	mov	r3, r9
 80019c8:	2b0f      	cmp	r3, #15
 80019ca:	d827      	bhi.n	8001a1c <__aeabi_ddiv+0xdc>
 80019cc:	49bc      	ldr	r1, [pc, #752]	; (8001cc0 <__aeabi_ddiv+0x380>)
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	58cb      	ldr	r3, [r1, r3]
 80019d2:	469f      	mov	pc, r3
 80019d4:	46b2      	mov	sl, r6
 80019d6:	9b00      	ldr	r3, [sp, #0]
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d016      	beq.n	8001a0a <__aeabi_ddiv+0xca>
 80019dc:	2b03      	cmp	r3, #3
 80019de:	d100      	bne.n	80019e2 <__aeabi_ddiv+0xa2>
 80019e0:	e28e      	b.n	8001f00 <__aeabi_ddiv+0x5c0>
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d000      	beq.n	80019e8 <__aeabi_ddiv+0xa8>
 80019e6:	e0d9      	b.n	8001b9c <__aeabi_ddiv+0x25c>
 80019e8:	2300      	movs	r3, #0
 80019ea:	2400      	movs	r4, #0
 80019ec:	2500      	movs	r5, #0
 80019ee:	4652      	mov	r2, sl
 80019f0:	051b      	lsls	r3, r3, #20
 80019f2:	4323      	orrs	r3, r4
 80019f4:	07d2      	lsls	r2, r2, #31
 80019f6:	4313      	orrs	r3, r2
 80019f8:	0028      	movs	r0, r5
 80019fa:	0019      	movs	r1, r3
 80019fc:	b005      	add	sp, #20
 80019fe:	bcf0      	pop	{r4, r5, r6, r7}
 8001a00:	46bb      	mov	fp, r7
 8001a02:	46b2      	mov	sl, r6
 8001a04:	46a9      	mov	r9, r5
 8001a06:	46a0      	mov	r8, r4
 8001a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a0a:	2400      	movs	r4, #0
 8001a0c:	2500      	movs	r5, #0
 8001a0e:	4baa      	ldr	r3, [pc, #680]	; (8001cb8 <__aeabi_ddiv+0x378>)
 8001a10:	e7ed      	b.n	80019ee <__aeabi_ddiv+0xae>
 8001a12:	46ba      	mov	sl, r7
 8001a14:	46a0      	mov	r8, r4
 8001a16:	0015      	movs	r5, r2
 8001a18:	9000      	str	r0, [sp, #0]
 8001a1a:	e7dc      	b.n	80019d6 <__aeabi_ddiv+0x96>
 8001a1c:	4544      	cmp	r4, r8
 8001a1e:	d200      	bcs.n	8001a22 <__aeabi_ddiv+0xe2>
 8001a20:	e1c7      	b.n	8001db2 <__aeabi_ddiv+0x472>
 8001a22:	d100      	bne.n	8001a26 <__aeabi_ddiv+0xe6>
 8001a24:	e1c2      	b.n	8001dac <__aeabi_ddiv+0x46c>
 8001a26:	2301      	movs	r3, #1
 8001a28:	425b      	negs	r3, r3
 8001a2a:	469c      	mov	ip, r3
 8001a2c:	002e      	movs	r6, r5
 8001a2e:	4640      	mov	r0, r8
 8001a30:	2500      	movs	r5, #0
 8001a32:	44e3      	add	fp, ip
 8001a34:	0223      	lsls	r3, r4, #8
 8001a36:	0e14      	lsrs	r4, r2, #24
 8001a38:	431c      	orrs	r4, r3
 8001a3a:	0c1b      	lsrs	r3, r3, #16
 8001a3c:	4699      	mov	r9, r3
 8001a3e:	0423      	lsls	r3, r4, #16
 8001a40:	0c1f      	lsrs	r7, r3, #16
 8001a42:	0212      	lsls	r2, r2, #8
 8001a44:	4649      	mov	r1, r9
 8001a46:	9200      	str	r2, [sp, #0]
 8001a48:	9701      	str	r7, [sp, #4]
 8001a4a:	f7fe fbff 	bl	800024c <__aeabi_uidivmod>
 8001a4e:	0002      	movs	r2, r0
 8001a50:	437a      	muls	r2, r7
 8001a52:	040b      	lsls	r3, r1, #16
 8001a54:	0c31      	lsrs	r1, r6, #16
 8001a56:	4680      	mov	r8, r0
 8001a58:	4319      	orrs	r1, r3
 8001a5a:	428a      	cmp	r2, r1
 8001a5c:	d907      	bls.n	8001a6e <__aeabi_ddiv+0x12e>
 8001a5e:	2301      	movs	r3, #1
 8001a60:	425b      	negs	r3, r3
 8001a62:	469c      	mov	ip, r3
 8001a64:	1909      	adds	r1, r1, r4
 8001a66:	44e0      	add	r8, ip
 8001a68:	428c      	cmp	r4, r1
 8001a6a:	d800      	bhi.n	8001a6e <__aeabi_ddiv+0x12e>
 8001a6c:	e207      	b.n	8001e7e <__aeabi_ddiv+0x53e>
 8001a6e:	1a88      	subs	r0, r1, r2
 8001a70:	4649      	mov	r1, r9
 8001a72:	f7fe fbeb 	bl	800024c <__aeabi_uidivmod>
 8001a76:	0409      	lsls	r1, r1, #16
 8001a78:	468c      	mov	ip, r1
 8001a7a:	0431      	lsls	r1, r6, #16
 8001a7c:	4666      	mov	r6, ip
 8001a7e:	9a01      	ldr	r2, [sp, #4]
 8001a80:	0c09      	lsrs	r1, r1, #16
 8001a82:	4342      	muls	r2, r0
 8001a84:	0003      	movs	r3, r0
 8001a86:	4331      	orrs	r1, r6
 8001a88:	428a      	cmp	r2, r1
 8001a8a:	d904      	bls.n	8001a96 <__aeabi_ddiv+0x156>
 8001a8c:	1909      	adds	r1, r1, r4
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	428c      	cmp	r4, r1
 8001a92:	d800      	bhi.n	8001a96 <__aeabi_ddiv+0x156>
 8001a94:	e1ed      	b.n	8001e72 <__aeabi_ddiv+0x532>
 8001a96:	1a88      	subs	r0, r1, r2
 8001a98:	4642      	mov	r2, r8
 8001a9a:	0412      	lsls	r2, r2, #16
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	4690      	mov	r8, r2
 8001aa0:	4641      	mov	r1, r8
 8001aa2:	9b00      	ldr	r3, [sp, #0]
 8001aa4:	040e      	lsls	r6, r1, #16
 8001aa6:	0c1b      	lsrs	r3, r3, #16
 8001aa8:	001f      	movs	r7, r3
 8001aaa:	9302      	str	r3, [sp, #8]
 8001aac:	9b00      	ldr	r3, [sp, #0]
 8001aae:	0c36      	lsrs	r6, r6, #16
 8001ab0:	041b      	lsls	r3, r3, #16
 8001ab2:	0c19      	lsrs	r1, r3, #16
 8001ab4:	000b      	movs	r3, r1
 8001ab6:	4373      	muls	r3, r6
 8001ab8:	0c12      	lsrs	r2, r2, #16
 8001aba:	437e      	muls	r6, r7
 8001abc:	9103      	str	r1, [sp, #12]
 8001abe:	4351      	muls	r1, r2
 8001ac0:	437a      	muls	r2, r7
 8001ac2:	0c1f      	lsrs	r7, r3, #16
 8001ac4:	46bc      	mov	ip, r7
 8001ac6:	1876      	adds	r6, r6, r1
 8001ac8:	4466      	add	r6, ip
 8001aca:	42b1      	cmp	r1, r6
 8001acc:	d903      	bls.n	8001ad6 <__aeabi_ddiv+0x196>
 8001ace:	2180      	movs	r1, #128	; 0x80
 8001ad0:	0249      	lsls	r1, r1, #9
 8001ad2:	468c      	mov	ip, r1
 8001ad4:	4462      	add	r2, ip
 8001ad6:	0c31      	lsrs	r1, r6, #16
 8001ad8:	188a      	adds	r2, r1, r2
 8001ada:	0431      	lsls	r1, r6, #16
 8001adc:	041e      	lsls	r6, r3, #16
 8001ade:	0c36      	lsrs	r6, r6, #16
 8001ae0:	198e      	adds	r6, r1, r6
 8001ae2:	4290      	cmp	r0, r2
 8001ae4:	d302      	bcc.n	8001aec <__aeabi_ddiv+0x1ac>
 8001ae6:	d112      	bne.n	8001b0e <__aeabi_ddiv+0x1ce>
 8001ae8:	42b5      	cmp	r5, r6
 8001aea:	d210      	bcs.n	8001b0e <__aeabi_ddiv+0x1ce>
 8001aec:	4643      	mov	r3, r8
 8001aee:	1e59      	subs	r1, r3, #1
 8001af0:	9b00      	ldr	r3, [sp, #0]
 8001af2:	469c      	mov	ip, r3
 8001af4:	4465      	add	r5, ip
 8001af6:	001f      	movs	r7, r3
 8001af8:	429d      	cmp	r5, r3
 8001afa:	419b      	sbcs	r3, r3
 8001afc:	425b      	negs	r3, r3
 8001afe:	191b      	adds	r3, r3, r4
 8001b00:	18c0      	adds	r0, r0, r3
 8001b02:	4284      	cmp	r4, r0
 8001b04:	d200      	bcs.n	8001b08 <__aeabi_ddiv+0x1c8>
 8001b06:	e1a0      	b.n	8001e4a <__aeabi_ddiv+0x50a>
 8001b08:	d100      	bne.n	8001b0c <__aeabi_ddiv+0x1cc>
 8001b0a:	e19b      	b.n	8001e44 <__aeabi_ddiv+0x504>
 8001b0c:	4688      	mov	r8, r1
 8001b0e:	1bae      	subs	r6, r5, r6
 8001b10:	42b5      	cmp	r5, r6
 8001b12:	41ad      	sbcs	r5, r5
 8001b14:	1a80      	subs	r0, r0, r2
 8001b16:	426d      	negs	r5, r5
 8001b18:	1b40      	subs	r0, r0, r5
 8001b1a:	4284      	cmp	r4, r0
 8001b1c:	d100      	bne.n	8001b20 <__aeabi_ddiv+0x1e0>
 8001b1e:	e1d5      	b.n	8001ecc <__aeabi_ddiv+0x58c>
 8001b20:	4649      	mov	r1, r9
 8001b22:	f7fe fb93 	bl	800024c <__aeabi_uidivmod>
 8001b26:	9a01      	ldr	r2, [sp, #4]
 8001b28:	040b      	lsls	r3, r1, #16
 8001b2a:	4342      	muls	r2, r0
 8001b2c:	0c31      	lsrs	r1, r6, #16
 8001b2e:	0005      	movs	r5, r0
 8001b30:	4319      	orrs	r1, r3
 8001b32:	428a      	cmp	r2, r1
 8001b34:	d900      	bls.n	8001b38 <__aeabi_ddiv+0x1f8>
 8001b36:	e16c      	b.n	8001e12 <__aeabi_ddiv+0x4d2>
 8001b38:	1a88      	subs	r0, r1, r2
 8001b3a:	4649      	mov	r1, r9
 8001b3c:	f7fe fb86 	bl	800024c <__aeabi_uidivmod>
 8001b40:	9a01      	ldr	r2, [sp, #4]
 8001b42:	0436      	lsls	r6, r6, #16
 8001b44:	4342      	muls	r2, r0
 8001b46:	0409      	lsls	r1, r1, #16
 8001b48:	0c36      	lsrs	r6, r6, #16
 8001b4a:	0003      	movs	r3, r0
 8001b4c:	430e      	orrs	r6, r1
 8001b4e:	42b2      	cmp	r2, r6
 8001b50:	d900      	bls.n	8001b54 <__aeabi_ddiv+0x214>
 8001b52:	e153      	b.n	8001dfc <__aeabi_ddiv+0x4bc>
 8001b54:	9803      	ldr	r0, [sp, #12]
 8001b56:	1ab6      	subs	r6, r6, r2
 8001b58:	0002      	movs	r2, r0
 8001b5a:	042d      	lsls	r5, r5, #16
 8001b5c:	431d      	orrs	r5, r3
 8001b5e:	9f02      	ldr	r7, [sp, #8]
 8001b60:	042b      	lsls	r3, r5, #16
 8001b62:	0c1b      	lsrs	r3, r3, #16
 8001b64:	435a      	muls	r2, r3
 8001b66:	437b      	muls	r3, r7
 8001b68:	469c      	mov	ip, r3
 8001b6a:	0c29      	lsrs	r1, r5, #16
 8001b6c:	4348      	muls	r0, r1
 8001b6e:	0c13      	lsrs	r3, r2, #16
 8001b70:	4484      	add	ip, r0
 8001b72:	4463      	add	r3, ip
 8001b74:	4379      	muls	r1, r7
 8001b76:	4298      	cmp	r0, r3
 8001b78:	d903      	bls.n	8001b82 <__aeabi_ddiv+0x242>
 8001b7a:	2080      	movs	r0, #128	; 0x80
 8001b7c:	0240      	lsls	r0, r0, #9
 8001b7e:	4684      	mov	ip, r0
 8001b80:	4461      	add	r1, ip
 8001b82:	0c18      	lsrs	r0, r3, #16
 8001b84:	0412      	lsls	r2, r2, #16
 8001b86:	041b      	lsls	r3, r3, #16
 8001b88:	0c12      	lsrs	r2, r2, #16
 8001b8a:	1841      	adds	r1, r0, r1
 8001b8c:	189b      	adds	r3, r3, r2
 8001b8e:	428e      	cmp	r6, r1
 8001b90:	d200      	bcs.n	8001b94 <__aeabi_ddiv+0x254>
 8001b92:	e0ff      	b.n	8001d94 <__aeabi_ddiv+0x454>
 8001b94:	d100      	bne.n	8001b98 <__aeabi_ddiv+0x258>
 8001b96:	e0fa      	b.n	8001d8e <__aeabi_ddiv+0x44e>
 8001b98:	2301      	movs	r3, #1
 8001b9a:	431d      	orrs	r5, r3
 8001b9c:	4a49      	ldr	r2, [pc, #292]	; (8001cc4 <__aeabi_ddiv+0x384>)
 8001b9e:	445a      	add	r2, fp
 8001ba0:	2a00      	cmp	r2, #0
 8001ba2:	dc00      	bgt.n	8001ba6 <__aeabi_ddiv+0x266>
 8001ba4:	e0aa      	b.n	8001cfc <__aeabi_ddiv+0x3bc>
 8001ba6:	076b      	lsls	r3, r5, #29
 8001ba8:	d000      	beq.n	8001bac <__aeabi_ddiv+0x26c>
 8001baa:	e13d      	b.n	8001e28 <__aeabi_ddiv+0x4e8>
 8001bac:	08ed      	lsrs	r5, r5, #3
 8001bae:	4643      	mov	r3, r8
 8001bb0:	01db      	lsls	r3, r3, #7
 8001bb2:	d506      	bpl.n	8001bc2 <__aeabi_ddiv+0x282>
 8001bb4:	4642      	mov	r2, r8
 8001bb6:	4b44      	ldr	r3, [pc, #272]	; (8001cc8 <__aeabi_ddiv+0x388>)
 8001bb8:	401a      	ands	r2, r3
 8001bba:	4690      	mov	r8, r2
 8001bbc:	2280      	movs	r2, #128	; 0x80
 8001bbe:	00d2      	lsls	r2, r2, #3
 8001bc0:	445a      	add	r2, fp
 8001bc2:	4b42      	ldr	r3, [pc, #264]	; (8001ccc <__aeabi_ddiv+0x38c>)
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	dd00      	ble.n	8001bca <__aeabi_ddiv+0x28a>
 8001bc8:	e71f      	b.n	8001a0a <__aeabi_ddiv+0xca>
 8001bca:	4643      	mov	r3, r8
 8001bcc:	075b      	lsls	r3, r3, #29
 8001bce:	431d      	orrs	r5, r3
 8001bd0:	4643      	mov	r3, r8
 8001bd2:	0552      	lsls	r2, r2, #21
 8001bd4:	025c      	lsls	r4, r3, #9
 8001bd6:	0b24      	lsrs	r4, r4, #12
 8001bd8:	0d53      	lsrs	r3, r2, #21
 8001bda:	e708      	b.n	80019ee <__aeabi_ddiv+0xae>
 8001bdc:	4652      	mov	r2, sl
 8001bde:	4322      	orrs	r2, r4
 8001be0:	d100      	bne.n	8001be4 <__aeabi_ddiv+0x2a4>
 8001be2:	e07b      	b.n	8001cdc <__aeabi_ddiv+0x39c>
 8001be4:	2c00      	cmp	r4, #0
 8001be6:	d100      	bne.n	8001bea <__aeabi_ddiv+0x2aa>
 8001be8:	e0fa      	b.n	8001de0 <__aeabi_ddiv+0x4a0>
 8001bea:	0020      	movs	r0, r4
 8001bec:	f001 fa22 	bl	8003034 <__clzsi2>
 8001bf0:	0002      	movs	r2, r0
 8001bf2:	3a0b      	subs	r2, #11
 8001bf4:	231d      	movs	r3, #29
 8001bf6:	0001      	movs	r1, r0
 8001bf8:	1a9b      	subs	r3, r3, r2
 8001bfa:	4652      	mov	r2, sl
 8001bfc:	3908      	subs	r1, #8
 8001bfe:	40da      	lsrs	r2, r3
 8001c00:	408c      	lsls	r4, r1
 8001c02:	4314      	orrs	r4, r2
 8001c04:	4652      	mov	r2, sl
 8001c06:	408a      	lsls	r2, r1
 8001c08:	4b31      	ldr	r3, [pc, #196]	; (8001cd0 <__aeabi_ddiv+0x390>)
 8001c0a:	4458      	add	r0, fp
 8001c0c:	469b      	mov	fp, r3
 8001c0e:	4483      	add	fp, r0
 8001c10:	2000      	movs	r0, #0
 8001c12:	e6d5      	b.n	80019c0 <__aeabi_ddiv+0x80>
 8001c14:	464b      	mov	r3, r9
 8001c16:	4323      	orrs	r3, r4
 8001c18:	4698      	mov	r8, r3
 8001c1a:	d044      	beq.n	8001ca6 <__aeabi_ddiv+0x366>
 8001c1c:	2c00      	cmp	r4, #0
 8001c1e:	d100      	bne.n	8001c22 <__aeabi_ddiv+0x2e2>
 8001c20:	e0ce      	b.n	8001dc0 <__aeabi_ddiv+0x480>
 8001c22:	0020      	movs	r0, r4
 8001c24:	f001 fa06 	bl	8003034 <__clzsi2>
 8001c28:	0001      	movs	r1, r0
 8001c2a:	0002      	movs	r2, r0
 8001c2c:	390b      	subs	r1, #11
 8001c2e:	231d      	movs	r3, #29
 8001c30:	1a5b      	subs	r3, r3, r1
 8001c32:	4649      	mov	r1, r9
 8001c34:	0010      	movs	r0, r2
 8001c36:	40d9      	lsrs	r1, r3
 8001c38:	3808      	subs	r0, #8
 8001c3a:	4084      	lsls	r4, r0
 8001c3c:	000b      	movs	r3, r1
 8001c3e:	464d      	mov	r5, r9
 8001c40:	4323      	orrs	r3, r4
 8001c42:	4698      	mov	r8, r3
 8001c44:	4085      	lsls	r5, r0
 8001c46:	4823      	ldr	r0, [pc, #140]	; (8001cd4 <__aeabi_ddiv+0x394>)
 8001c48:	1a83      	subs	r3, r0, r2
 8001c4a:	469b      	mov	fp, r3
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	4699      	mov	r9, r3
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	e69a      	b.n	800198a <__aeabi_ddiv+0x4a>
 8001c54:	464b      	mov	r3, r9
 8001c56:	4323      	orrs	r3, r4
 8001c58:	4698      	mov	r8, r3
 8001c5a:	d11d      	bne.n	8001c98 <__aeabi_ddiv+0x358>
 8001c5c:	2308      	movs	r3, #8
 8001c5e:	4699      	mov	r9, r3
 8001c60:	3b06      	subs	r3, #6
 8001c62:	2500      	movs	r5, #0
 8001c64:	4683      	mov	fp, r0
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	e68f      	b.n	800198a <__aeabi_ddiv+0x4a>
 8001c6a:	4652      	mov	r2, sl
 8001c6c:	4322      	orrs	r2, r4
 8001c6e:	d109      	bne.n	8001c84 <__aeabi_ddiv+0x344>
 8001c70:	2302      	movs	r3, #2
 8001c72:	4649      	mov	r1, r9
 8001c74:	4319      	orrs	r1, r3
 8001c76:	4b18      	ldr	r3, [pc, #96]	; (8001cd8 <__aeabi_ddiv+0x398>)
 8001c78:	4689      	mov	r9, r1
 8001c7a:	469c      	mov	ip, r3
 8001c7c:	2400      	movs	r4, #0
 8001c7e:	2002      	movs	r0, #2
 8001c80:	44e3      	add	fp, ip
 8001c82:	e69d      	b.n	80019c0 <__aeabi_ddiv+0x80>
 8001c84:	2303      	movs	r3, #3
 8001c86:	464a      	mov	r2, r9
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <__aeabi_ddiv+0x398>)
 8001c8c:	4691      	mov	r9, r2
 8001c8e:	469c      	mov	ip, r3
 8001c90:	4652      	mov	r2, sl
 8001c92:	2003      	movs	r0, #3
 8001c94:	44e3      	add	fp, ip
 8001c96:	e693      	b.n	80019c0 <__aeabi_ddiv+0x80>
 8001c98:	230c      	movs	r3, #12
 8001c9a:	4699      	mov	r9, r3
 8001c9c:	3b09      	subs	r3, #9
 8001c9e:	46a0      	mov	r8, r4
 8001ca0:	4683      	mov	fp, r0
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	e671      	b.n	800198a <__aeabi_ddiv+0x4a>
 8001ca6:	2304      	movs	r3, #4
 8001ca8:	4699      	mov	r9, r3
 8001caa:	2300      	movs	r3, #0
 8001cac:	469b      	mov	fp, r3
 8001cae:	3301      	adds	r3, #1
 8001cb0:	2500      	movs	r5, #0
 8001cb2:	9300      	str	r3, [sp, #0]
 8001cb4:	e669      	b.n	800198a <__aeabi_ddiv+0x4a>
 8001cb6:	46c0      	nop			; (mov r8, r8)
 8001cb8:	000007ff 	.word	0x000007ff
 8001cbc:	fffffc01 	.word	0xfffffc01
 8001cc0:	08014de4 	.word	0x08014de4
 8001cc4:	000003ff 	.word	0x000003ff
 8001cc8:	feffffff 	.word	0xfeffffff
 8001ccc:	000007fe 	.word	0x000007fe
 8001cd0:	000003f3 	.word	0x000003f3
 8001cd4:	fffffc0d 	.word	0xfffffc0d
 8001cd8:	fffff801 	.word	0xfffff801
 8001cdc:	4649      	mov	r1, r9
 8001cde:	2301      	movs	r3, #1
 8001ce0:	4319      	orrs	r1, r3
 8001ce2:	4689      	mov	r9, r1
 8001ce4:	2400      	movs	r4, #0
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	e66a      	b.n	80019c0 <__aeabi_ddiv+0x80>
 8001cea:	2300      	movs	r3, #0
 8001cec:	2480      	movs	r4, #128	; 0x80
 8001cee:	469a      	mov	sl, r3
 8001cf0:	2500      	movs	r5, #0
 8001cf2:	4b8a      	ldr	r3, [pc, #552]	; (8001f1c <__aeabi_ddiv+0x5dc>)
 8001cf4:	0324      	lsls	r4, r4, #12
 8001cf6:	e67a      	b.n	80019ee <__aeabi_ddiv+0xae>
 8001cf8:	2501      	movs	r5, #1
 8001cfa:	426d      	negs	r5, r5
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	1a9b      	subs	r3, r3, r2
 8001d00:	2b38      	cmp	r3, #56	; 0x38
 8001d02:	dd00      	ble.n	8001d06 <__aeabi_ddiv+0x3c6>
 8001d04:	e670      	b.n	80019e8 <__aeabi_ddiv+0xa8>
 8001d06:	2b1f      	cmp	r3, #31
 8001d08:	dc00      	bgt.n	8001d0c <__aeabi_ddiv+0x3cc>
 8001d0a:	e0bf      	b.n	8001e8c <__aeabi_ddiv+0x54c>
 8001d0c:	211f      	movs	r1, #31
 8001d0e:	4249      	negs	r1, r1
 8001d10:	1a8a      	subs	r2, r1, r2
 8001d12:	4641      	mov	r1, r8
 8001d14:	40d1      	lsrs	r1, r2
 8001d16:	000a      	movs	r2, r1
 8001d18:	2b20      	cmp	r3, #32
 8001d1a:	d004      	beq.n	8001d26 <__aeabi_ddiv+0x3e6>
 8001d1c:	4641      	mov	r1, r8
 8001d1e:	4b80      	ldr	r3, [pc, #512]	; (8001f20 <__aeabi_ddiv+0x5e0>)
 8001d20:	445b      	add	r3, fp
 8001d22:	4099      	lsls	r1, r3
 8001d24:	430d      	orrs	r5, r1
 8001d26:	1e6b      	subs	r3, r5, #1
 8001d28:	419d      	sbcs	r5, r3
 8001d2a:	2307      	movs	r3, #7
 8001d2c:	432a      	orrs	r2, r5
 8001d2e:	001d      	movs	r5, r3
 8001d30:	2400      	movs	r4, #0
 8001d32:	4015      	ands	r5, r2
 8001d34:	4213      	tst	r3, r2
 8001d36:	d100      	bne.n	8001d3a <__aeabi_ddiv+0x3fa>
 8001d38:	e0d4      	b.n	8001ee4 <__aeabi_ddiv+0x5a4>
 8001d3a:	210f      	movs	r1, #15
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	4011      	ands	r1, r2
 8001d40:	2904      	cmp	r1, #4
 8001d42:	d100      	bne.n	8001d46 <__aeabi_ddiv+0x406>
 8001d44:	e0cb      	b.n	8001ede <__aeabi_ddiv+0x59e>
 8001d46:	1d11      	adds	r1, r2, #4
 8001d48:	4291      	cmp	r1, r2
 8001d4a:	4192      	sbcs	r2, r2
 8001d4c:	4252      	negs	r2, r2
 8001d4e:	189b      	adds	r3, r3, r2
 8001d50:	000a      	movs	r2, r1
 8001d52:	0219      	lsls	r1, r3, #8
 8001d54:	d400      	bmi.n	8001d58 <__aeabi_ddiv+0x418>
 8001d56:	e0c2      	b.n	8001ede <__aeabi_ddiv+0x59e>
 8001d58:	2301      	movs	r3, #1
 8001d5a:	2400      	movs	r4, #0
 8001d5c:	2500      	movs	r5, #0
 8001d5e:	e646      	b.n	80019ee <__aeabi_ddiv+0xae>
 8001d60:	2380      	movs	r3, #128	; 0x80
 8001d62:	4641      	mov	r1, r8
 8001d64:	031b      	lsls	r3, r3, #12
 8001d66:	4219      	tst	r1, r3
 8001d68:	d008      	beq.n	8001d7c <__aeabi_ddiv+0x43c>
 8001d6a:	421c      	tst	r4, r3
 8001d6c:	d106      	bne.n	8001d7c <__aeabi_ddiv+0x43c>
 8001d6e:	431c      	orrs	r4, r3
 8001d70:	0324      	lsls	r4, r4, #12
 8001d72:	46ba      	mov	sl, r7
 8001d74:	0015      	movs	r5, r2
 8001d76:	4b69      	ldr	r3, [pc, #420]	; (8001f1c <__aeabi_ddiv+0x5dc>)
 8001d78:	0b24      	lsrs	r4, r4, #12
 8001d7a:	e638      	b.n	80019ee <__aeabi_ddiv+0xae>
 8001d7c:	2480      	movs	r4, #128	; 0x80
 8001d7e:	4643      	mov	r3, r8
 8001d80:	0324      	lsls	r4, r4, #12
 8001d82:	431c      	orrs	r4, r3
 8001d84:	0324      	lsls	r4, r4, #12
 8001d86:	46b2      	mov	sl, r6
 8001d88:	4b64      	ldr	r3, [pc, #400]	; (8001f1c <__aeabi_ddiv+0x5dc>)
 8001d8a:	0b24      	lsrs	r4, r4, #12
 8001d8c:	e62f      	b.n	80019ee <__aeabi_ddiv+0xae>
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d100      	bne.n	8001d94 <__aeabi_ddiv+0x454>
 8001d92:	e703      	b.n	8001b9c <__aeabi_ddiv+0x25c>
 8001d94:	19a6      	adds	r6, r4, r6
 8001d96:	1e68      	subs	r0, r5, #1
 8001d98:	42a6      	cmp	r6, r4
 8001d9a:	d200      	bcs.n	8001d9e <__aeabi_ddiv+0x45e>
 8001d9c:	e08d      	b.n	8001eba <__aeabi_ddiv+0x57a>
 8001d9e:	428e      	cmp	r6, r1
 8001da0:	d200      	bcs.n	8001da4 <__aeabi_ddiv+0x464>
 8001da2:	e0a3      	b.n	8001eec <__aeabi_ddiv+0x5ac>
 8001da4:	d100      	bne.n	8001da8 <__aeabi_ddiv+0x468>
 8001da6:	e0b3      	b.n	8001f10 <__aeabi_ddiv+0x5d0>
 8001da8:	0005      	movs	r5, r0
 8001daa:	e6f5      	b.n	8001b98 <__aeabi_ddiv+0x258>
 8001dac:	42aa      	cmp	r2, r5
 8001dae:	d900      	bls.n	8001db2 <__aeabi_ddiv+0x472>
 8001db0:	e639      	b.n	8001a26 <__aeabi_ddiv+0xe6>
 8001db2:	4643      	mov	r3, r8
 8001db4:	07de      	lsls	r6, r3, #31
 8001db6:	0858      	lsrs	r0, r3, #1
 8001db8:	086b      	lsrs	r3, r5, #1
 8001dba:	431e      	orrs	r6, r3
 8001dbc:	07ed      	lsls	r5, r5, #31
 8001dbe:	e639      	b.n	8001a34 <__aeabi_ddiv+0xf4>
 8001dc0:	4648      	mov	r0, r9
 8001dc2:	f001 f937 	bl	8003034 <__clzsi2>
 8001dc6:	0001      	movs	r1, r0
 8001dc8:	0002      	movs	r2, r0
 8001dca:	3115      	adds	r1, #21
 8001dcc:	3220      	adds	r2, #32
 8001dce:	291c      	cmp	r1, #28
 8001dd0:	dc00      	bgt.n	8001dd4 <__aeabi_ddiv+0x494>
 8001dd2:	e72c      	b.n	8001c2e <__aeabi_ddiv+0x2ee>
 8001dd4:	464b      	mov	r3, r9
 8001dd6:	3808      	subs	r0, #8
 8001dd8:	4083      	lsls	r3, r0
 8001dda:	2500      	movs	r5, #0
 8001ddc:	4698      	mov	r8, r3
 8001dde:	e732      	b.n	8001c46 <__aeabi_ddiv+0x306>
 8001de0:	f001 f928 	bl	8003034 <__clzsi2>
 8001de4:	0003      	movs	r3, r0
 8001de6:	001a      	movs	r2, r3
 8001de8:	3215      	adds	r2, #21
 8001dea:	3020      	adds	r0, #32
 8001dec:	2a1c      	cmp	r2, #28
 8001dee:	dc00      	bgt.n	8001df2 <__aeabi_ddiv+0x4b2>
 8001df0:	e700      	b.n	8001bf4 <__aeabi_ddiv+0x2b4>
 8001df2:	4654      	mov	r4, sl
 8001df4:	3b08      	subs	r3, #8
 8001df6:	2200      	movs	r2, #0
 8001df8:	409c      	lsls	r4, r3
 8001dfa:	e705      	b.n	8001c08 <__aeabi_ddiv+0x2c8>
 8001dfc:	1936      	adds	r6, r6, r4
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	42b4      	cmp	r4, r6
 8001e02:	d900      	bls.n	8001e06 <__aeabi_ddiv+0x4c6>
 8001e04:	e6a6      	b.n	8001b54 <__aeabi_ddiv+0x214>
 8001e06:	42b2      	cmp	r2, r6
 8001e08:	d800      	bhi.n	8001e0c <__aeabi_ddiv+0x4cc>
 8001e0a:	e6a3      	b.n	8001b54 <__aeabi_ddiv+0x214>
 8001e0c:	1e83      	subs	r3, r0, #2
 8001e0e:	1936      	adds	r6, r6, r4
 8001e10:	e6a0      	b.n	8001b54 <__aeabi_ddiv+0x214>
 8001e12:	1909      	adds	r1, r1, r4
 8001e14:	3d01      	subs	r5, #1
 8001e16:	428c      	cmp	r4, r1
 8001e18:	d900      	bls.n	8001e1c <__aeabi_ddiv+0x4dc>
 8001e1a:	e68d      	b.n	8001b38 <__aeabi_ddiv+0x1f8>
 8001e1c:	428a      	cmp	r2, r1
 8001e1e:	d800      	bhi.n	8001e22 <__aeabi_ddiv+0x4e2>
 8001e20:	e68a      	b.n	8001b38 <__aeabi_ddiv+0x1f8>
 8001e22:	1e85      	subs	r5, r0, #2
 8001e24:	1909      	adds	r1, r1, r4
 8001e26:	e687      	b.n	8001b38 <__aeabi_ddiv+0x1f8>
 8001e28:	230f      	movs	r3, #15
 8001e2a:	402b      	ands	r3, r5
 8001e2c:	2b04      	cmp	r3, #4
 8001e2e:	d100      	bne.n	8001e32 <__aeabi_ddiv+0x4f2>
 8001e30:	e6bc      	b.n	8001bac <__aeabi_ddiv+0x26c>
 8001e32:	2305      	movs	r3, #5
 8001e34:	425b      	negs	r3, r3
 8001e36:	42ab      	cmp	r3, r5
 8001e38:	419b      	sbcs	r3, r3
 8001e3a:	3504      	adds	r5, #4
 8001e3c:	425b      	negs	r3, r3
 8001e3e:	08ed      	lsrs	r5, r5, #3
 8001e40:	4498      	add	r8, r3
 8001e42:	e6b4      	b.n	8001bae <__aeabi_ddiv+0x26e>
 8001e44:	42af      	cmp	r7, r5
 8001e46:	d900      	bls.n	8001e4a <__aeabi_ddiv+0x50a>
 8001e48:	e660      	b.n	8001b0c <__aeabi_ddiv+0x1cc>
 8001e4a:	4282      	cmp	r2, r0
 8001e4c:	d804      	bhi.n	8001e58 <__aeabi_ddiv+0x518>
 8001e4e:	d000      	beq.n	8001e52 <__aeabi_ddiv+0x512>
 8001e50:	e65c      	b.n	8001b0c <__aeabi_ddiv+0x1cc>
 8001e52:	42ae      	cmp	r6, r5
 8001e54:	d800      	bhi.n	8001e58 <__aeabi_ddiv+0x518>
 8001e56:	e659      	b.n	8001b0c <__aeabi_ddiv+0x1cc>
 8001e58:	2302      	movs	r3, #2
 8001e5a:	425b      	negs	r3, r3
 8001e5c:	469c      	mov	ip, r3
 8001e5e:	9b00      	ldr	r3, [sp, #0]
 8001e60:	44e0      	add	r8, ip
 8001e62:	469c      	mov	ip, r3
 8001e64:	4465      	add	r5, ip
 8001e66:	429d      	cmp	r5, r3
 8001e68:	419b      	sbcs	r3, r3
 8001e6a:	425b      	negs	r3, r3
 8001e6c:	191b      	adds	r3, r3, r4
 8001e6e:	18c0      	adds	r0, r0, r3
 8001e70:	e64d      	b.n	8001b0e <__aeabi_ddiv+0x1ce>
 8001e72:	428a      	cmp	r2, r1
 8001e74:	d800      	bhi.n	8001e78 <__aeabi_ddiv+0x538>
 8001e76:	e60e      	b.n	8001a96 <__aeabi_ddiv+0x156>
 8001e78:	1e83      	subs	r3, r0, #2
 8001e7a:	1909      	adds	r1, r1, r4
 8001e7c:	e60b      	b.n	8001a96 <__aeabi_ddiv+0x156>
 8001e7e:	428a      	cmp	r2, r1
 8001e80:	d800      	bhi.n	8001e84 <__aeabi_ddiv+0x544>
 8001e82:	e5f4      	b.n	8001a6e <__aeabi_ddiv+0x12e>
 8001e84:	1e83      	subs	r3, r0, #2
 8001e86:	4698      	mov	r8, r3
 8001e88:	1909      	adds	r1, r1, r4
 8001e8a:	e5f0      	b.n	8001a6e <__aeabi_ddiv+0x12e>
 8001e8c:	4925      	ldr	r1, [pc, #148]	; (8001f24 <__aeabi_ddiv+0x5e4>)
 8001e8e:	0028      	movs	r0, r5
 8001e90:	4459      	add	r1, fp
 8001e92:	408d      	lsls	r5, r1
 8001e94:	4642      	mov	r2, r8
 8001e96:	408a      	lsls	r2, r1
 8001e98:	1e69      	subs	r1, r5, #1
 8001e9a:	418d      	sbcs	r5, r1
 8001e9c:	4641      	mov	r1, r8
 8001e9e:	40d8      	lsrs	r0, r3
 8001ea0:	40d9      	lsrs	r1, r3
 8001ea2:	4302      	orrs	r2, r0
 8001ea4:	432a      	orrs	r2, r5
 8001ea6:	000b      	movs	r3, r1
 8001ea8:	0751      	lsls	r1, r2, #29
 8001eaa:	d100      	bne.n	8001eae <__aeabi_ddiv+0x56e>
 8001eac:	e751      	b.n	8001d52 <__aeabi_ddiv+0x412>
 8001eae:	210f      	movs	r1, #15
 8001eb0:	4011      	ands	r1, r2
 8001eb2:	2904      	cmp	r1, #4
 8001eb4:	d000      	beq.n	8001eb8 <__aeabi_ddiv+0x578>
 8001eb6:	e746      	b.n	8001d46 <__aeabi_ddiv+0x406>
 8001eb8:	e74b      	b.n	8001d52 <__aeabi_ddiv+0x412>
 8001eba:	0005      	movs	r5, r0
 8001ebc:	428e      	cmp	r6, r1
 8001ebe:	d000      	beq.n	8001ec2 <__aeabi_ddiv+0x582>
 8001ec0:	e66a      	b.n	8001b98 <__aeabi_ddiv+0x258>
 8001ec2:	9a00      	ldr	r2, [sp, #0]
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d000      	beq.n	8001eca <__aeabi_ddiv+0x58a>
 8001ec8:	e666      	b.n	8001b98 <__aeabi_ddiv+0x258>
 8001eca:	e667      	b.n	8001b9c <__aeabi_ddiv+0x25c>
 8001ecc:	4a16      	ldr	r2, [pc, #88]	; (8001f28 <__aeabi_ddiv+0x5e8>)
 8001ece:	445a      	add	r2, fp
 8001ed0:	2a00      	cmp	r2, #0
 8001ed2:	dc00      	bgt.n	8001ed6 <__aeabi_ddiv+0x596>
 8001ed4:	e710      	b.n	8001cf8 <__aeabi_ddiv+0x3b8>
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	2500      	movs	r5, #0
 8001eda:	4498      	add	r8, r3
 8001edc:	e667      	b.n	8001bae <__aeabi_ddiv+0x26e>
 8001ede:	075d      	lsls	r5, r3, #29
 8001ee0:	025b      	lsls	r3, r3, #9
 8001ee2:	0b1c      	lsrs	r4, r3, #12
 8001ee4:	08d2      	lsrs	r2, r2, #3
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	4315      	orrs	r5, r2
 8001eea:	e580      	b.n	80019ee <__aeabi_ddiv+0xae>
 8001eec:	9800      	ldr	r0, [sp, #0]
 8001eee:	3d02      	subs	r5, #2
 8001ef0:	0042      	lsls	r2, r0, #1
 8001ef2:	4282      	cmp	r2, r0
 8001ef4:	41bf      	sbcs	r7, r7
 8001ef6:	427f      	negs	r7, r7
 8001ef8:	193c      	adds	r4, r7, r4
 8001efa:	1936      	adds	r6, r6, r4
 8001efc:	9200      	str	r2, [sp, #0]
 8001efe:	e7dd      	b.n	8001ebc <__aeabi_ddiv+0x57c>
 8001f00:	2480      	movs	r4, #128	; 0x80
 8001f02:	4643      	mov	r3, r8
 8001f04:	0324      	lsls	r4, r4, #12
 8001f06:	431c      	orrs	r4, r3
 8001f08:	0324      	lsls	r4, r4, #12
 8001f0a:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <__aeabi_ddiv+0x5dc>)
 8001f0c:	0b24      	lsrs	r4, r4, #12
 8001f0e:	e56e      	b.n	80019ee <__aeabi_ddiv+0xae>
 8001f10:	9a00      	ldr	r2, [sp, #0]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d3ea      	bcc.n	8001eec <__aeabi_ddiv+0x5ac>
 8001f16:	0005      	movs	r5, r0
 8001f18:	e7d3      	b.n	8001ec2 <__aeabi_ddiv+0x582>
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	000007ff 	.word	0x000007ff
 8001f20:	0000043e 	.word	0x0000043e
 8001f24:	0000041e 	.word	0x0000041e
 8001f28:	000003ff 	.word	0x000003ff

08001f2c <__eqdf2>:
 8001f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f2e:	464e      	mov	r6, r9
 8001f30:	4645      	mov	r5, r8
 8001f32:	46de      	mov	lr, fp
 8001f34:	4657      	mov	r7, sl
 8001f36:	4690      	mov	r8, r2
 8001f38:	b5e0      	push	{r5, r6, r7, lr}
 8001f3a:	0017      	movs	r7, r2
 8001f3c:	031a      	lsls	r2, r3, #12
 8001f3e:	0b12      	lsrs	r2, r2, #12
 8001f40:	0005      	movs	r5, r0
 8001f42:	4684      	mov	ip, r0
 8001f44:	4819      	ldr	r0, [pc, #100]	; (8001fac <__eqdf2+0x80>)
 8001f46:	030e      	lsls	r6, r1, #12
 8001f48:	004c      	lsls	r4, r1, #1
 8001f4a:	4691      	mov	r9, r2
 8001f4c:	005a      	lsls	r2, r3, #1
 8001f4e:	0fdb      	lsrs	r3, r3, #31
 8001f50:	469b      	mov	fp, r3
 8001f52:	0b36      	lsrs	r6, r6, #12
 8001f54:	0d64      	lsrs	r4, r4, #21
 8001f56:	0fc9      	lsrs	r1, r1, #31
 8001f58:	0d52      	lsrs	r2, r2, #21
 8001f5a:	4284      	cmp	r4, r0
 8001f5c:	d019      	beq.n	8001f92 <__eqdf2+0x66>
 8001f5e:	4282      	cmp	r2, r0
 8001f60:	d010      	beq.n	8001f84 <__eqdf2+0x58>
 8001f62:	2001      	movs	r0, #1
 8001f64:	4294      	cmp	r4, r2
 8001f66:	d10e      	bne.n	8001f86 <__eqdf2+0x5a>
 8001f68:	454e      	cmp	r6, r9
 8001f6a:	d10c      	bne.n	8001f86 <__eqdf2+0x5a>
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	45c4      	cmp	ip, r8
 8001f70:	d109      	bne.n	8001f86 <__eqdf2+0x5a>
 8001f72:	4559      	cmp	r1, fp
 8001f74:	d017      	beq.n	8001fa6 <__eqdf2+0x7a>
 8001f76:	2c00      	cmp	r4, #0
 8001f78:	d105      	bne.n	8001f86 <__eqdf2+0x5a>
 8001f7a:	0030      	movs	r0, r6
 8001f7c:	4328      	orrs	r0, r5
 8001f7e:	1e43      	subs	r3, r0, #1
 8001f80:	4198      	sbcs	r0, r3
 8001f82:	e000      	b.n	8001f86 <__eqdf2+0x5a>
 8001f84:	2001      	movs	r0, #1
 8001f86:	bcf0      	pop	{r4, r5, r6, r7}
 8001f88:	46bb      	mov	fp, r7
 8001f8a:	46b2      	mov	sl, r6
 8001f8c:	46a9      	mov	r9, r5
 8001f8e:	46a0      	mov	r8, r4
 8001f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f92:	0033      	movs	r3, r6
 8001f94:	2001      	movs	r0, #1
 8001f96:	432b      	orrs	r3, r5
 8001f98:	d1f5      	bne.n	8001f86 <__eqdf2+0x5a>
 8001f9a:	42a2      	cmp	r2, r4
 8001f9c:	d1f3      	bne.n	8001f86 <__eqdf2+0x5a>
 8001f9e:	464b      	mov	r3, r9
 8001fa0:	433b      	orrs	r3, r7
 8001fa2:	d1f0      	bne.n	8001f86 <__eqdf2+0x5a>
 8001fa4:	e7e2      	b.n	8001f6c <__eqdf2+0x40>
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	e7ed      	b.n	8001f86 <__eqdf2+0x5a>
 8001faa:	46c0      	nop			; (mov r8, r8)
 8001fac:	000007ff 	.word	0x000007ff

08001fb0 <__gedf2>:
 8001fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fb2:	4647      	mov	r7, r8
 8001fb4:	46ce      	mov	lr, r9
 8001fb6:	0004      	movs	r4, r0
 8001fb8:	0018      	movs	r0, r3
 8001fba:	0016      	movs	r6, r2
 8001fbc:	031b      	lsls	r3, r3, #12
 8001fbe:	0b1b      	lsrs	r3, r3, #12
 8001fc0:	4d2d      	ldr	r5, [pc, #180]	; (8002078 <__gedf2+0xc8>)
 8001fc2:	004a      	lsls	r2, r1, #1
 8001fc4:	4699      	mov	r9, r3
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	0043      	lsls	r3, r0, #1
 8001fca:	030f      	lsls	r7, r1, #12
 8001fcc:	46a4      	mov	ip, r4
 8001fce:	46b0      	mov	r8, r6
 8001fd0:	0b3f      	lsrs	r7, r7, #12
 8001fd2:	0d52      	lsrs	r2, r2, #21
 8001fd4:	0fc9      	lsrs	r1, r1, #31
 8001fd6:	0d5b      	lsrs	r3, r3, #21
 8001fd8:	0fc0      	lsrs	r0, r0, #31
 8001fda:	42aa      	cmp	r2, r5
 8001fdc:	d021      	beq.n	8002022 <__gedf2+0x72>
 8001fde:	42ab      	cmp	r3, r5
 8001fe0:	d013      	beq.n	800200a <__gedf2+0x5a>
 8001fe2:	2a00      	cmp	r2, #0
 8001fe4:	d122      	bne.n	800202c <__gedf2+0x7c>
 8001fe6:	433c      	orrs	r4, r7
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d102      	bne.n	8001ff2 <__gedf2+0x42>
 8001fec:	464d      	mov	r5, r9
 8001fee:	432e      	orrs	r6, r5
 8001ff0:	d022      	beq.n	8002038 <__gedf2+0x88>
 8001ff2:	2c00      	cmp	r4, #0
 8001ff4:	d010      	beq.n	8002018 <__gedf2+0x68>
 8001ff6:	4281      	cmp	r1, r0
 8001ff8:	d022      	beq.n	8002040 <__gedf2+0x90>
 8001ffa:	2002      	movs	r0, #2
 8001ffc:	3901      	subs	r1, #1
 8001ffe:	4008      	ands	r0, r1
 8002000:	3801      	subs	r0, #1
 8002002:	bcc0      	pop	{r6, r7}
 8002004:	46b9      	mov	r9, r7
 8002006:	46b0      	mov	r8, r6
 8002008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800200a:	464d      	mov	r5, r9
 800200c:	432e      	orrs	r6, r5
 800200e:	d129      	bne.n	8002064 <__gedf2+0xb4>
 8002010:	2a00      	cmp	r2, #0
 8002012:	d1f0      	bne.n	8001ff6 <__gedf2+0x46>
 8002014:	433c      	orrs	r4, r7
 8002016:	d1ee      	bne.n	8001ff6 <__gedf2+0x46>
 8002018:	2800      	cmp	r0, #0
 800201a:	d1f2      	bne.n	8002002 <__gedf2+0x52>
 800201c:	2001      	movs	r0, #1
 800201e:	4240      	negs	r0, r0
 8002020:	e7ef      	b.n	8002002 <__gedf2+0x52>
 8002022:	003d      	movs	r5, r7
 8002024:	4325      	orrs	r5, r4
 8002026:	d11d      	bne.n	8002064 <__gedf2+0xb4>
 8002028:	4293      	cmp	r3, r2
 800202a:	d0ee      	beq.n	800200a <__gedf2+0x5a>
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1e2      	bne.n	8001ff6 <__gedf2+0x46>
 8002030:	464c      	mov	r4, r9
 8002032:	4326      	orrs	r6, r4
 8002034:	d1df      	bne.n	8001ff6 <__gedf2+0x46>
 8002036:	e7e0      	b.n	8001ffa <__gedf2+0x4a>
 8002038:	2000      	movs	r0, #0
 800203a:	2c00      	cmp	r4, #0
 800203c:	d0e1      	beq.n	8002002 <__gedf2+0x52>
 800203e:	e7dc      	b.n	8001ffa <__gedf2+0x4a>
 8002040:	429a      	cmp	r2, r3
 8002042:	dc0a      	bgt.n	800205a <__gedf2+0xaa>
 8002044:	dbe8      	blt.n	8002018 <__gedf2+0x68>
 8002046:	454f      	cmp	r7, r9
 8002048:	d8d7      	bhi.n	8001ffa <__gedf2+0x4a>
 800204a:	d00e      	beq.n	800206a <__gedf2+0xba>
 800204c:	2000      	movs	r0, #0
 800204e:	454f      	cmp	r7, r9
 8002050:	d2d7      	bcs.n	8002002 <__gedf2+0x52>
 8002052:	2900      	cmp	r1, #0
 8002054:	d0e2      	beq.n	800201c <__gedf2+0x6c>
 8002056:	0008      	movs	r0, r1
 8002058:	e7d3      	b.n	8002002 <__gedf2+0x52>
 800205a:	4243      	negs	r3, r0
 800205c:	4158      	adcs	r0, r3
 800205e:	0040      	lsls	r0, r0, #1
 8002060:	3801      	subs	r0, #1
 8002062:	e7ce      	b.n	8002002 <__gedf2+0x52>
 8002064:	2002      	movs	r0, #2
 8002066:	4240      	negs	r0, r0
 8002068:	e7cb      	b.n	8002002 <__gedf2+0x52>
 800206a:	45c4      	cmp	ip, r8
 800206c:	d8c5      	bhi.n	8001ffa <__gedf2+0x4a>
 800206e:	2000      	movs	r0, #0
 8002070:	45c4      	cmp	ip, r8
 8002072:	d2c6      	bcs.n	8002002 <__gedf2+0x52>
 8002074:	e7ed      	b.n	8002052 <__gedf2+0xa2>
 8002076:	46c0      	nop			; (mov r8, r8)
 8002078:	000007ff 	.word	0x000007ff

0800207c <__ledf2>:
 800207c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800207e:	4647      	mov	r7, r8
 8002080:	46ce      	mov	lr, r9
 8002082:	0004      	movs	r4, r0
 8002084:	0018      	movs	r0, r3
 8002086:	0016      	movs	r6, r2
 8002088:	031b      	lsls	r3, r3, #12
 800208a:	0b1b      	lsrs	r3, r3, #12
 800208c:	4d2c      	ldr	r5, [pc, #176]	; (8002140 <__ledf2+0xc4>)
 800208e:	004a      	lsls	r2, r1, #1
 8002090:	4699      	mov	r9, r3
 8002092:	b580      	push	{r7, lr}
 8002094:	0043      	lsls	r3, r0, #1
 8002096:	030f      	lsls	r7, r1, #12
 8002098:	46a4      	mov	ip, r4
 800209a:	46b0      	mov	r8, r6
 800209c:	0b3f      	lsrs	r7, r7, #12
 800209e:	0d52      	lsrs	r2, r2, #21
 80020a0:	0fc9      	lsrs	r1, r1, #31
 80020a2:	0d5b      	lsrs	r3, r3, #21
 80020a4:	0fc0      	lsrs	r0, r0, #31
 80020a6:	42aa      	cmp	r2, r5
 80020a8:	d00d      	beq.n	80020c6 <__ledf2+0x4a>
 80020aa:	42ab      	cmp	r3, r5
 80020ac:	d010      	beq.n	80020d0 <__ledf2+0x54>
 80020ae:	2a00      	cmp	r2, #0
 80020b0:	d127      	bne.n	8002102 <__ledf2+0x86>
 80020b2:	433c      	orrs	r4, r7
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d111      	bne.n	80020dc <__ledf2+0x60>
 80020b8:	464d      	mov	r5, r9
 80020ba:	432e      	orrs	r6, r5
 80020bc:	d10e      	bne.n	80020dc <__ledf2+0x60>
 80020be:	2000      	movs	r0, #0
 80020c0:	2c00      	cmp	r4, #0
 80020c2:	d015      	beq.n	80020f0 <__ledf2+0x74>
 80020c4:	e00e      	b.n	80020e4 <__ledf2+0x68>
 80020c6:	003d      	movs	r5, r7
 80020c8:	4325      	orrs	r5, r4
 80020ca:	d110      	bne.n	80020ee <__ledf2+0x72>
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d118      	bne.n	8002102 <__ledf2+0x86>
 80020d0:	464d      	mov	r5, r9
 80020d2:	432e      	orrs	r6, r5
 80020d4:	d10b      	bne.n	80020ee <__ledf2+0x72>
 80020d6:	2a00      	cmp	r2, #0
 80020d8:	d102      	bne.n	80020e0 <__ledf2+0x64>
 80020da:	433c      	orrs	r4, r7
 80020dc:	2c00      	cmp	r4, #0
 80020de:	d00b      	beq.n	80020f8 <__ledf2+0x7c>
 80020e0:	4281      	cmp	r1, r0
 80020e2:	d014      	beq.n	800210e <__ledf2+0x92>
 80020e4:	2002      	movs	r0, #2
 80020e6:	3901      	subs	r1, #1
 80020e8:	4008      	ands	r0, r1
 80020ea:	3801      	subs	r0, #1
 80020ec:	e000      	b.n	80020f0 <__ledf2+0x74>
 80020ee:	2002      	movs	r0, #2
 80020f0:	bcc0      	pop	{r6, r7}
 80020f2:	46b9      	mov	r9, r7
 80020f4:	46b0      	mov	r8, r6
 80020f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020f8:	2800      	cmp	r0, #0
 80020fa:	d1f9      	bne.n	80020f0 <__ledf2+0x74>
 80020fc:	2001      	movs	r0, #1
 80020fe:	4240      	negs	r0, r0
 8002100:	e7f6      	b.n	80020f0 <__ledf2+0x74>
 8002102:	2b00      	cmp	r3, #0
 8002104:	d1ec      	bne.n	80020e0 <__ledf2+0x64>
 8002106:	464c      	mov	r4, r9
 8002108:	4326      	orrs	r6, r4
 800210a:	d1e9      	bne.n	80020e0 <__ledf2+0x64>
 800210c:	e7ea      	b.n	80020e4 <__ledf2+0x68>
 800210e:	429a      	cmp	r2, r3
 8002110:	dd04      	ble.n	800211c <__ledf2+0xa0>
 8002112:	4243      	negs	r3, r0
 8002114:	4158      	adcs	r0, r3
 8002116:	0040      	lsls	r0, r0, #1
 8002118:	3801      	subs	r0, #1
 800211a:	e7e9      	b.n	80020f0 <__ledf2+0x74>
 800211c:	429a      	cmp	r2, r3
 800211e:	dbeb      	blt.n	80020f8 <__ledf2+0x7c>
 8002120:	454f      	cmp	r7, r9
 8002122:	d8df      	bhi.n	80020e4 <__ledf2+0x68>
 8002124:	d006      	beq.n	8002134 <__ledf2+0xb8>
 8002126:	2000      	movs	r0, #0
 8002128:	454f      	cmp	r7, r9
 800212a:	d2e1      	bcs.n	80020f0 <__ledf2+0x74>
 800212c:	2900      	cmp	r1, #0
 800212e:	d0e5      	beq.n	80020fc <__ledf2+0x80>
 8002130:	0008      	movs	r0, r1
 8002132:	e7dd      	b.n	80020f0 <__ledf2+0x74>
 8002134:	45c4      	cmp	ip, r8
 8002136:	d8d5      	bhi.n	80020e4 <__ledf2+0x68>
 8002138:	2000      	movs	r0, #0
 800213a:	45c4      	cmp	ip, r8
 800213c:	d2d8      	bcs.n	80020f0 <__ledf2+0x74>
 800213e:	e7f5      	b.n	800212c <__ledf2+0xb0>
 8002140:	000007ff 	.word	0x000007ff

08002144 <__aeabi_dmul>:
 8002144:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002146:	4657      	mov	r7, sl
 8002148:	464e      	mov	r6, r9
 800214a:	4645      	mov	r5, r8
 800214c:	46de      	mov	lr, fp
 800214e:	b5e0      	push	{r5, r6, r7, lr}
 8002150:	4698      	mov	r8, r3
 8002152:	030c      	lsls	r4, r1, #12
 8002154:	004b      	lsls	r3, r1, #1
 8002156:	0006      	movs	r6, r0
 8002158:	4692      	mov	sl, r2
 800215a:	b087      	sub	sp, #28
 800215c:	0b24      	lsrs	r4, r4, #12
 800215e:	0d5b      	lsrs	r3, r3, #21
 8002160:	0fcf      	lsrs	r7, r1, #31
 8002162:	2b00      	cmp	r3, #0
 8002164:	d100      	bne.n	8002168 <__aeabi_dmul+0x24>
 8002166:	e15c      	b.n	8002422 <__aeabi_dmul+0x2de>
 8002168:	4ad9      	ldr	r2, [pc, #868]	; (80024d0 <__aeabi_dmul+0x38c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d100      	bne.n	8002170 <__aeabi_dmul+0x2c>
 800216e:	e175      	b.n	800245c <__aeabi_dmul+0x318>
 8002170:	0f42      	lsrs	r2, r0, #29
 8002172:	00e4      	lsls	r4, r4, #3
 8002174:	4314      	orrs	r4, r2
 8002176:	2280      	movs	r2, #128	; 0x80
 8002178:	0412      	lsls	r2, r2, #16
 800217a:	4314      	orrs	r4, r2
 800217c:	4ad5      	ldr	r2, [pc, #852]	; (80024d4 <__aeabi_dmul+0x390>)
 800217e:	00c5      	lsls	r5, r0, #3
 8002180:	4694      	mov	ip, r2
 8002182:	4463      	add	r3, ip
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	2300      	movs	r3, #0
 8002188:	4699      	mov	r9, r3
 800218a:	469b      	mov	fp, r3
 800218c:	4643      	mov	r3, r8
 800218e:	4642      	mov	r2, r8
 8002190:	031e      	lsls	r6, r3, #12
 8002192:	0fd2      	lsrs	r2, r2, #31
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	4650      	mov	r0, sl
 8002198:	4690      	mov	r8, r2
 800219a:	0b36      	lsrs	r6, r6, #12
 800219c:	0d5b      	lsrs	r3, r3, #21
 800219e:	d100      	bne.n	80021a2 <__aeabi_dmul+0x5e>
 80021a0:	e120      	b.n	80023e4 <__aeabi_dmul+0x2a0>
 80021a2:	4acb      	ldr	r2, [pc, #812]	; (80024d0 <__aeabi_dmul+0x38c>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d100      	bne.n	80021aa <__aeabi_dmul+0x66>
 80021a8:	e162      	b.n	8002470 <__aeabi_dmul+0x32c>
 80021aa:	49ca      	ldr	r1, [pc, #808]	; (80024d4 <__aeabi_dmul+0x390>)
 80021ac:	0f42      	lsrs	r2, r0, #29
 80021ae:	468c      	mov	ip, r1
 80021b0:	9900      	ldr	r1, [sp, #0]
 80021b2:	4463      	add	r3, ip
 80021b4:	00f6      	lsls	r6, r6, #3
 80021b6:	468c      	mov	ip, r1
 80021b8:	4316      	orrs	r6, r2
 80021ba:	2280      	movs	r2, #128	; 0x80
 80021bc:	449c      	add	ip, r3
 80021be:	0412      	lsls	r2, r2, #16
 80021c0:	4663      	mov	r3, ip
 80021c2:	4316      	orrs	r6, r2
 80021c4:	00c2      	lsls	r2, r0, #3
 80021c6:	2000      	movs	r0, #0
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	9900      	ldr	r1, [sp, #0]
 80021cc:	4643      	mov	r3, r8
 80021ce:	3101      	adds	r1, #1
 80021d0:	468c      	mov	ip, r1
 80021d2:	4649      	mov	r1, r9
 80021d4:	407b      	eors	r3, r7
 80021d6:	9301      	str	r3, [sp, #4]
 80021d8:	290f      	cmp	r1, #15
 80021da:	d826      	bhi.n	800222a <__aeabi_dmul+0xe6>
 80021dc:	4bbe      	ldr	r3, [pc, #760]	; (80024d8 <__aeabi_dmul+0x394>)
 80021de:	0089      	lsls	r1, r1, #2
 80021e0:	5859      	ldr	r1, [r3, r1]
 80021e2:	468f      	mov	pc, r1
 80021e4:	4643      	mov	r3, r8
 80021e6:	9301      	str	r3, [sp, #4]
 80021e8:	0034      	movs	r4, r6
 80021ea:	0015      	movs	r5, r2
 80021ec:	4683      	mov	fp, r0
 80021ee:	465b      	mov	r3, fp
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d016      	beq.n	8002222 <__aeabi_dmul+0xde>
 80021f4:	2b03      	cmp	r3, #3
 80021f6:	d100      	bne.n	80021fa <__aeabi_dmul+0xb6>
 80021f8:	e203      	b.n	8002602 <__aeabi_dmul+0x4be>
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d000      	beq.n	8002200 <__aeabi_dmul+0xbc>
 80021fe:	e0cd      	b.n	800239c <__aeabi_dmul+0x258>
 8002200:	2200      	movs	r2, #0
 8002202:	2400      	movs	r4, #0
 8002204:	2500      	movs	r5, #0
 8002206:	9b01      	ldr	r3, [sp, #4]
 8002208:	0512      	lsls	r2, r2, #20
 800220a:	4322      	orrs	r2, r4
 800220c:	07db      	lsls	r3, r3, #31
 800220e:	431a      	orrs	r2, r3
 8002210:	0028      	movs	r0, r5
 8002212:	0011      	movs	r1, r2
 8002214:	b007      	add	sp, #28
 8002216:	bcf0      	pop	{r4, r5, r6, r7}
 8002218:	46bb      	mov	fp, r7
 800221a:	46b2      	mov	sl, r6
 800221c:	46a9      	mov	r9, r5
 800221e:	46a0      	mov	r8, r4
 8002220:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002222:	2400      	movs	r4, #0
 8002224:	2500      	movs	r5, #0
 8002226:	4aaa      	ldr	r2, [pc, #680]	; (80024d0 <__aeabi_dmul+0x38c>)
 8002228:	e7ed      	b.n	8002206 <__aeabi_dmul+0xc2>
 800222a:	0c28      	lsrs	r0, r5, #16
 800222c:	042d      	lsls	r5, r5, #16
 800222e:	0c2d      	lsrs	r5, r5, #16
 8002230:	002b      	movs	r3, r5
 8002232:	0c11      	lsrs	r1, r2, #16
 8002234:	0412      	lsls	r2, r2, #16
 8002236:	0c12      	lsrs	r2, r2, #16
 8002238:	4353      	muls	r3, r2
 800223a:	4698      	mov	r8, r3
 800223c:	0013      	movs	r3, r2
 800223e:	002f      	movs	r7, r5
 8002240:	4343      	muls	r3, r0
 8002242:	4699      	mov	r9, r3
 8002244:	434f      	muls	r7, r1
 8002246:	444f      	add	r7, r9
 8002248:	46bb      	mov	fp, r7
 800224a:	4647      	mov	r7, r8
 800224c:	000b      	movs	r3, r1
 800224e:	0c3f      	lsrs	r7, r7, #16
 8002250:	46ba      	mov	sl, r7
 8002252:	4343      	muls	r3, r0
 8002254:	44da      	add	sl, fp
 8002256:	9302      	str	r3, [sp, #8]
 8002258:	45d1      	cmp	r9, sl
 800225a:	d904      	bls.n	8002266 <__aeabi_dmul+0x122>
 800225c:	2780      	movs	r7, #128	; 0x80
 800225e:	027f      	lsls	r7, r7, #9
 8002260:	46b9      	mov	r9, r7
 8002262:	444b      	add	r3, r9
 8002264:	9302      	str	r3, [sp, #8]
 8002266:	4653      	mov	r3, sl
 8002268:	0c1b      	lsrs	r3, r3, #16
 800226a:	469b      	mov	fp, r3
 800226c:	4653      	mov	r3, sl
 800226e:	041f      	lsls	r7, r3, #16
 8002270:	4643      	mov	r3, r8
 8002272:	041b      	lsls	r3, r3, #16
 8002274:	0c1b      	lsrs	r3, r3, #16
 8002276:	4698      	mov	r8, r3
 8002278:	003b      	movs	r3, r7
 800227a:	4443      	add	r3, r8
 800227c:	9304      	str	r3, [sp, #16]
 800227e:	0c33      	lsrs	r3, r6, #16
 8002280:	0436      	lsls	r6, r6, #16
 8002282:	0c36      	lsrs	r6, r6, #16
 8002284:	4698      	mov	r8, r3
 8002286:	0033      	movs	r3, r6
 8002288:	4343      	muls	r3, r0
 800228a:	4699      	mov	r9, r3
 800228c:	4643      	mov	r3, r8
 800228e:	4343      	muls	r3, r0
 8002290:	002f      	movs	r7, r5
 8002292:	469a      	mov	sl, r3
 8002294:	4643      	mov	r3, r8
 8002296:	4377      	muls	r7, r6
 8002298:	435d      	muls	r5, r3
 800229a:	0c38      	lsrs	r0, r7, #16
 800229c:	444d      	add	r5, r9
 800229e:	1945      	adds	r5, r0, r5
 80022a0:	45a9      	cmp	r9, r5
 80022a2:	d903      	bls.n	80022ac <__aeabi_dmul+0x168>
 80022a4:	2380      	movs	r3, #128	; 0x80
 80022a6:	025b      	lsls	r3, r3, #9
 80022a8:	4699      	mov	r9, r3
 80022aa:	44ca      	add	sl, r9
 80022ac:	043f      	lsls	r7, r7, #16
 80022ae:	0c28      	lsrs	r0, r5, #16
 80022b0:	0c3f      	lsrs	r7, r7, #16
 80022b2:	042d      	lsls	r5, r5, #16
 80022b4:	19ed      	adds	r5, r5, r7
 80022b6:	0c27      	lsrs	r7, r4, #16
 80022b8:	0424      	lsls	r4, r4, #16
 80022ba:	0c24      	lsrs	r4, r4, #16
 80022bc:	0003      	movs	r3, r0
 80022be:	0020      	movs	r0, r4
 80022c0:	4350      	muls	r0, r2
 80022c2:	437a      	muls	r2, r7
 80022c4:	4691      	mov	r9, r2
 80022c6:	003a      	movs	r2, r7
 80022c8:	4453      	add	r3, sl
 80022ca:	9305      	str	r3, [sp, #20]
 80022cc:	0c03      	lsrs	r3, r0, #16
 80022ce:	469a      	mov	sl, r3
 80022d0:	434a      	muls	r2, r1
 80022d2:	4361      	muls	r1, r4
 80022d4:	4449      	add	r1, r9
 80022d6:	4451      	add	r1, sl
 80022d8:	44ab      	add	fp, r5
 80022da:	4589      	cmp	r9, r1
 80022dc:	d903      	bls.n	80022e6 <__aeabi_dmul+0x1a2>
 80022de:	2380      	movs	r3, #128	; 0x80
 80022e0:	025b      	lsls	r3, r3, #9
 80022e2:	4699      	mov	r9, r3
 80022e4:	444a      	add	r2, r9
 80022e6:	0400      	lsls	r0, r0, #16
 80022e8:	0c0b      	lsrs	r3, r1, #16
 80022ea:	0c00      	lsrs	r0, r0, #16
 80022ec:	0409      	lsls	r1, r1, #16
 80022ee:	1809      	adds	r1, r1, r0
 80022f0:	0020      	movs	r0, r4
 80022f2:	4699      	mov	r9, r3
 80022f4:	4643      	mov	r3, r8
 80022f6:	4370      	muls	r0, r6
 80022f8:	435c      	muls	r4, r3
 80022fa:	437e      	muls	r6, r7
 80022fc:	435f      	muls	r7, r3
 80022fe:	0c03      	lsrs	r3, r0, #16
 8002300:	4698      	mov	r8, r3
 8002302:	19a4      	adds	r4, r4, r6
 8002304:	4444      	add	r4, r8
 8002306:	444a      	add	r2, r9
 8002308:	9703      	str	r7, [sp, #12]
 800230a:	42a6      	cmp	r6, r4
 800230c:	d904      	bls.n	8002318 <__aeabi_dmul+0x1d4>
 800230e:	2380      	movs	r3, #128	; 0x80
 8002310:	025b      	lsls	r3, r3, #9
 8002312:	4698      	mov	r8, r3
 8002314:	4447      	add	r7, r8
 8002316:	9703      	str	r7, [sp, #12]
 8002318:	0423      	lsls	r3, r4, #16
 800231a:	9e02      	ldr	r6, [sp, #8]
 800231c:	469a      	mov	sl, r3
 800231e:	9b05      	ldr	r3, [sp, #20]
 8002320:	445e      	add	r6, fp
 8002322:	4698      	mov	r8, r3
 8002324:	42ae      	cmp	r6, r5
 8002326:	41ad      	sbcs	r5, r5
 8002328:	1876      	adds	r6, r6, r1
 800232a:	428e      	cmp	r6, r1
 800232c:	4189      	sbcs	r1, r1
 800232e:	0400      	lsls	r0, r0, #16
 8002330:	0c00      	lsrs	r0, r0, #16
 8002332:	4450      	add	r0, sl
 8002334:	4440      	add	r0, r8
 8002336:	426d      	negs	r5, r5
 8002338:	1947      	adds	r7, r0, r5
 800233a:	46b8      	mov	r8, r7
 800233c:	4693      	mov	fp, r2
 800233e:	4249      	negs	r1, r1
 8002340:	4689      	mov	r9, r1
 8002342:	44c3      	add	fp, r8
 8002344:	44d9      	add	r9, fp
 8002346:	4298      	cmp	r0, r3
 8002348:	4180      	sbcs	r0, r0
 800234a:	45a8      	cmp	r8, r5
 800234c:	41ad      	sbcs	r5, r5
 800234e:	4593      	cmp	fp, r2
 8002350:	4192      	sbcs	r2, r2
 8002352:	4589      	cmp	r9, r1
 8002354:	4189      	sbcs	r1, r1
 8002356:	426d      	negs	r5, r5
 8002358:	4240      	negs	r0, r0
 800235a:	4328      	orrs	r0, r5
 800235c:	0c24      	lsrs	r4, r4, #16
 800235e:	4252      	negs	r2, r2
 8002360:	4249      	negs	r1, r1
 8002362:	430a      	orrs	r2, r1
 8002364:	9b03      	ldr	r3, [sp, #12]
 8002366:	1900      	adds	r0, r0, r4
 8002368:	1880      	adds	r0, r0, r2
 800236a:	18c7      	adds	r7, r0, r3
 800236c:	464b      	mov	r3, r9
 800236e:	0ddc      	lsrs	r4, r3, #23
 8002370:	9b04      	ldr	r3, [sp, #16]
 8002372:	0275      	lsls	r5, r6, #9
 8002374:	431d      	orrs	r5, r3
 8002376:	1e6a      	subs	r2, r5, #1
 8002378:	4195      	sbcs	r5, r2
 800237a:	464b      	mov	r3, r9
 800237c:	0df6      	lsrs	r6, r6, #23
 800237e:	027f      	lsls	r7, r7, #9
 8002380:	4335      	orrs	r5, r6
 8002382:	025a      	lsls	r2, r3, #9
 8002384:	433c      	orrs	r4, r7
 8002386:	4315      	orrs	r5, r2
 8002388:	01fb      	lsls	r3, r7, #7
 800238a:	d400      	bmi.n	800238e <__aeabi_dmul+0x24a>
 800238c:	e11c      	b.n	80025c8 <__aeabi_dmul+0x484>
 800238e:	2101      	movs	r1, #1
 8002390:	086a      	lsrs	r2, r5, #1
 8002392:	400d      	ands	r5, r1
 8002394:	4315      	orrs	r5, r2
 8002396:	07e2      	lsls	r2, r4, #31
 8002398:	4315      	orrs	r5, r2
 800239a:	0864      	lsrs	r4, r4, #1
 800239c:	494f      	ldr	r1, [pc, #316]	; (80024dc <__aeabi_dmul+0x398>)
 800239e:	4461      	add	r1, ip
 80023a0:	2900      	cmp	r1, #0
 80023a2:	dc00      	bgt.n	80023a6 <__aeabi_dmul+0x262>
 80023a4:	e0b0      	b.n	8002508 <__aeabi_dmul+0x3c4>
 80023a6:	076b      	lsls	r3, r5, #29
 80023a8:	d009      	beq.n	80023be <__aeabi_dmul+0x27a>
 80023aa:	220f      	movs	r2, #15
 80023ac:	402a      	ands	r2, r5
 80023ae:	2a04      	cmp	r2, #4
 80023b0:	d005      	beq.n	80023be <__aeabi_dmul+0x27a>
 80023b2:	1d2a      	adds	r2, r5, #4
 80023b4:	42aa      	cmp	r2, r5
 80023b6:	41ad      	sbcs	r5, r5
 80023b8:	426d      	negs	r5, r5
 80023ba:	1964      	adds	r4, r4, r5
 80023bc:	0015      	movs	r5, r2
 80023be:	01e3      	lsls	r3, r4, #7
 80023c0:	d504      	bpl.n	80023cc <__aeabi_dmul+0x288>
 80023c2:	2180      	movs	r1, #128	; 0x80
 80023c4:	4a46      	ldr	r2, [pc, #280]	; (80024e0 <__aeabi_dmul+0x39c>)
 80023c6:	00c9      	lsls	r1, r1, #3
 80023c8:	4014      	ands	r4, r2
 80023ca:	4461      	add	r1, ip
 80023cc:	4a45      	ldr	r2, [pc, #276]	; (80024e4 <__aeabi_dmul+0x3a0>)
 80023ce:	4291      	cmp	r1, r2
 80023d0:	dd00      	ble.n	80023d4 <__aeabi_dmul+0x290>
 80023d2:	e726      	b.n	8002222 <__aeabi_dmul+0xde>
 80023d4:	0762      	lsls	r2, r4, #29
 80023d6:	08ed      	lsrs	r5, r5, #3
 80023d8:	0264      	lsls	r4, r4, #9
 80023da:	0549      	lsls	r1, r1, #21
 80023dc:	4315      	orrs	r5, r2
 80023de:	0b24      	lsrs	r4, r4, #12
 80023e0:	0d4a      	lsrs	r2, r1, #21
 80023e2:	e710      	b.n	8002206 <__aeabi_dmul+0xc2>
 80023e4:	4652      	mov	r2, sl
 80023e6:	4332      	orrs	r2, r6
 80023e8:	d100      	bne.n	80023ec <__aeabi_dmul+0x2a8>
 80023ea:	e07f      	b.n	80024ec <__aeabi_dmul+0x3a8>
 80023ec:	2e00      	cmp	r6, #0
 80023ee:	d100      	bne.n	80023f2 <__aeabi_dmul+0x2ae>
 80023f0:	e0dc      	b.n	80025ac <__aeabi_dmul+0x468>
 80023f2:	0030      	movs	r0, r6
 80023f4:	f000 fe1e 	bl	8003034 <__clzsi2>
 80023f8:	0002      	movs	r2, r0
 80023fa:	3a0b      	subs	r2, #11
 80023fc:	231d      	movs	r3, #29
 80023fe:	0001      	movs	r1, r0
 8002400:	1a9b      	subs	r3, r3, r2
 8002402:	4652      	mov	r2, sl
 8002404:	3908      	subs	r1, #8
 8002406:	40da      	lsrs	r2, r3
 8002408:	408e      	lsls	r6, r1
 800240a:	4316      	orrs	r6, r2
 800240c:	4652      	mov	r2, sl
 800240e:	408a      	lsls	r2, r1
 8002410:	9b00      	ldr	r3, [sp, #0]
 8002412:	4935      	ldr	r1, [pc, #212]	; (80024e8 <__aeabi_dmul+0x3a4>)
 8002414:	1a18      	subs	r0, r3, r0
 8002416:	0003      	movs	r3, r0
 8002418:	468c      	mov	ip, r1
 800241a:	4463      	add	r3, ip
 800241c:	2000      	movs	r0, #0
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	e6d3      	b.n	80021ca <__aeabi_dmul+0x86>
 8002422:	0025      	movs	r5, r4
 8002424:	4305      	orrs	r5, r0
 8002426:	d04a      	beq.n	80024be <__aeabi_dmul+0x37a>
 8002428:	2c00      	cmp	r4, #0
 800242a:	d100      	bne.n	800242e <__aeabi_dmul+0x2ea>
 800242c:	e0b0      	b.n	8002590 <__aeabi_dmul+0x44c>
 800242e:	0020      	movs	r0, r4
 8002430:	f000 fe00 	bl	8003034 <__clzsi2>
 8002434:	0001      	movs	r1, r0
 8002436:	0002      	movs	r2, r0
 8002438:	390b      	subs	r1, #11
 800243a:	231d      	movs	r3, #29
 800243c:	0010      	movs	r0, r2
 800243e:	1a5b      	subs	r3, r3, r1
 8002440:	0031      	movs	r1, r6
 8002442:	0035      	movs	r5, r6
 8002444:	3808      	subs	r0, #8
 8002446:	4084      	lsls	r4, r0
 8002448:	40d9      	lsrs	r1, r3
 800244a:	4085      	lsls	r5, r0
 800244c:	430c      	orrs	r4, r1
 800244e:	4826      	ldr	r0, [pc, #152]	; (80024e8 <__aeabi_dmul+0x3a4>)
 8002450:	1a83      	subs	r3, r0, r2
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	2300      	movs	r3, #0
 8002456:	4699      	mov	r9, r3
 8002458:	469b      	mov	fp, r3
 800245a:	e697      	b.n	800218c <__aeabi_dmul+0x48>
 800245c:	0005      	movs	r5, r0
 800245e:	4325      	orrs	r5, r4
 8002460:	d126      	bne.n	80024b0 <__aeabi_dmul+0x36c>
 8002462:	2208      	movs	r2, #8
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	2302      	movs	r3, #2
 8002468:	2400      	movs	r4, #0
 800246a:	4691      	mov	r9, r2
 800246c:	469b      	mov	fp, r3
 800246e:	e68d      	b.n	800218c <__aeabi_dmul+0x48>
 8002470:	4652      	mov	r2, sl
 8002472:	9b00      	ldr	r3, [sp, #0]
 8002474:	4332      	orrs	r2, r6
 8002476:	d110      	bne.n	800249a <__aeabi_dmul+0x356>
 8002478:	4915      	ldr	r1, [pc, #84]	; (80024d0 <__aeabi_dmul+0x38c>)
 800247a:	2600      	movs	r6, #0
 800247c:	468c      	mov	ip, r1
 800247e:	4463      	add	r3, ip
 8002480:	4649      	mov	r1, r9
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	2302      	movs	r3, #2
 8002486:	4319      	orrs	r1, r3
 8002488:	4689      	mov	r9, r1
 800248a:	2002      	movs	r0, #2
 800248c:	e69d      	b.n	80021ca <__aeabi_dmul+0x86>
 800248e:	465b      	mov	r3, fp
 8002490:	9701      	str	r7, [sp, #4]
 8002492:	2b02      	cmp	r3, #2
 8002494:	d000      	beq.n	8002498 <__aeabi_dmul+0x354>
 8002496:	e6ad      	b.n	80021f4 <__aeabi_dmul+0xb0>
 8002498:	e6c3      	b.n	8002222 <__aeabi_dmul+0xde>
 800249a:	4a0d      	ldr	r2, [pc, #52]	; (80024d0 <__aeabi_dmul+0x38c>)
 800249c:	2003      	movs	r0, #3
 800249e:	4694      	mov	ip, r2
 80024a0:	4463      	add	r3, ip
 80024a2:	464a      	mov	r2, r9
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	2303      	movs	r3, #3
 80024a8:	431a      	orrs	r2, r3
 80024aa:	4691      	mov	r9, r2
 80024ac:	4652      	mov	r2, sl
 80024ae:	e68c      	b.n	80021ca <__aeabi_dmul+0x86>
 80024b0:	220c      	movs	r2, #12
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	2303      	movs	r3, #3
 80024b6:	0005      	movs	r5, r0
 80024b8:	4691      	mov	r9, r2
 80024ba:	469b      	mov	fp, r3
 80024bc:	e666      	b.n	800218c <__aeabi_dmul+0x48>
 80024be:	2304      	movs	r3, #4
 80024c0:	4699      	mov	r9, r3
 80024c2:	2300      	movs	r3, #0
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	3301      	adds	r3, #1
 80024c8:	2400      	movs	r4, #0
 80024ca:	469b      	mov	fp, r3
 80024cc:	e65e      	b.n	800218c <__aeabi_dmul+0x48>
 80024ce:	46c0      	nop			; (mov r8, r8)
 80024d0:	000007ff 	.word	0x000007ff
 80024d4:	fffffc01 	.word	0xfffffc01
 80024d8:	08014e24 	.word	0x08014e24
 80024dc:	000003ff 	.word	0x000003ff
 80024e0:	feffffff 	.word	0xfeffffff
 80024e4:	000007fe 	.word	0x000007fe
 80024e8:	fffffc0d 	.word	0xfffffc0d
 80024ec:	4649      	mov	r1, r9
 80024ee:	2301      	movs	r3, #1
 80024f0:	4319      	orrs	r1, r3
 80024f2:	4689      	mov	r9, r1
 80024f4:	2600      	movs	r6, #0
 80024f6:	2001      	movs	r0, #1
 80024f8:	e667      	b.n	80021ca <__aeabi_dmul+0x86>
 80024fa:	2300      	movs	r3, #0
 80024fc:	2480      	movs	r4, #128	; 0x80
 80024fe:	2500      	movs	r5, #0
 8002500:	4a43      	ldr	r2, [pc, #268]	; (8002610 <__aeabi_dmul+0x4cc>)
 8002502:	9301      	str	r3, [sp, #4]
 8002504:	0324      	lsls	r4, r4, #12
 8002506:	e67e      	b.n	8002206 <__aeabi_dmul+0xc2>
 8002508:	2001      	movs	r0, #1
 800250a:	1a40      	subs	r0, r0, r1
 800250c:	2838      	cmp	r0, #56	; 0x38
 800250e:	dd00      	ble.n	8002512 <__aeabi_dmul+0x3ce>
 8002510:	e676      	b.n	8002200 <__aeabi_dmul+0xbc>
 8002512:	281f      	cmp	r0, #31
 8002514:	dd5b      	ble.n	80025ce <__aeabi_dmul+0x48a>
 8002516:	221f      	movs	r2, #31
 8002518:	0023      	movs	r3, r4
 800251a:	4252      	negs	r2, r2
 800251c:	1a51      	subs	r1, r2, r1
 800251e:	40cb      	lsrs	r3, r1
 8002520:	0019      	movs	r1, r3
 8002522:	2820      	cmp	r0, #32
 8002524:	d003      	beq.n	800252e <__aeabi_dmul+0x3ea>
 8002526:	4a3b      	ldr	r2, [pc, #236]	; (8002614 <__aeabi_dmul+0x4d0>)
 8002528:	4462      	add	r2, ip
 800252a:	4094      	lsls	r4, r2
 800252c:	4325      	orrs	r5, r4
 800252e:	1e6a      	subs	r2, r5, #1
 8002530:	4195      	sbcs	r5, r2
 8002532:	002a      	movs	r2, r5
 8002534:	430a      	orrs	r2, r1
 8002536:	2107      	movs	r1, #7
 8002538:	000d      	movs	r5, r1
 800253a:	2400      	movs	r4, #0
 800253c:	4015      	ands	r5, r2
 800253e:	4211      	tst	r1, r2
 8002540:	d05b      	beq.n	80025fa <__aeabi_dmul+0x4b6>
 8002542:	210f      	movs	r1, #15
 8002544:	2400      	movs	r4, #0
 8002546:	4011      	ands	r1, r2
 8002548:	2904      	cmp	r1, #4
 800254a:	d053      	beq.n	80025f4 <__aeabi_dmul+0x4b0>
 800254c:	1d11      	adds	r1, r2, #4
 800254e:	4291      	cmp	r1, r2
 8002550:	4192      	sbcs	r2, r2
 8002552:	4252      	negs	r2, r2
 8002554:	18a4      	adds	r4, r4, r2
 8002556:	000a      	movs	r2, r1
 8002558:	0223      	lsls	r3, r4, #8
 800255a:	d54b      	bpl.n	80025f4 <__aeabi_dmul+0x4b0>
 800255c:	2201      	movs	r2, #1
 800255e:	2400      	movs	r4, #0
 8002560:	2500      	movs	r5, #0
 8002562:	e650      	b.n	8002206 <__aeabi_dmul+0xc2>
 8002564:	2380      	movs	r3, #128	; 0x80
 8002566:	031b      	lsls	r3, r3, #12
 8002568:	421c      	tst	r4, r3
 800256a:	d009      	beq.n	8002580 <__aeabi_dmul+0x43c>
 800256c:	421e      	tst	r6, r3
 800256e:	d107      	bne.n	8002580 <__aeabi_dmul+0x43c>
 8002570:	4333      	orrs	r3, r6
 8002572:	031c      	lsls	r4, r3, #12
 8002574:	4643      	mov	r3, r8
 8002576:	0015      	movs	r5, r2
 8002578:	0b24      	lsrs	r4, r4, #12
 800257a:	4a25      	ldr	r2, [pc, #148]	; (8002610 <__aeabi_dmul+0x4cc>)
 800257c:	9301      	str	r3, [sp, #4]
 800257e:	e642      	b.n	8002206 <__aeabi_dmul+0xc2>
 8002580:	2280      	movs	r2, #128	; 0x80
 8002582:	0312      	lsls	r2, r2, #12
 8002584:	4314      	orrs	r4, r2
 8002586:	0324      	lsls	r4, r4, #12
 8002588:	4a21      	ldr	r2, [pc, #132]	; (8002610 <__aeabi_dmul+0x4cc>)
 800258a:	0b24      	lsrs	r4, r4, #12
 800258c:	9701      	str	r7, [sp, #4]
 800258e:	e63a      	b.n	8002206 <__aeabi_dmul+0xc2>
 8002590:	f000 fd50 	bl	8003034 <__clzsi2>
 8002594:	0001      	movs	r1, r0
 8002596:	0002      	movs	r2, r0
 8002598:	3115      	adds	r1, #21
 800259a:	3220      	adds	r2, #32
 800259c:	291c      	cmp	r1, #28
 800259e:	dc00      	bgt.n	80025a2 <__aeabi_dmul+0x45e>
 80025a0:	e74b      	b.n	800243a <__aeabi_dmul+0x2f6>
 80025a2:	0034      	movs	r4, r6
 80025a4:	3808      	subs	r0, #8
 80025a6:	2500      	movs	r5, #0
 80025a8:	4084      	lsls	r4, r0
 80025aa:	e750      	b.n	800244e <__aeabi_dmul+0x30a>
 80025ac:	f000 fd42 	bl	8003034 <__clzsi2>
 80025b0:	0003      	movs	r3, r0
 80025b2:	001a      	movs	r2, r3
 80025b4:	3215      	adds	r2, #21
 80025b6:	3020      	adds	r0, #32
 80025b8:	2a1c      	cmp	r2, #28
 80025ba:	dc00      	bgt.n	80025be <__aeabi_dmul+0x47a>
 80025bc:	e71e      	b.n	80023fc <__aeabi_dmul+0x2b8>
 80025be:	4656      	mov	r6, sl
 80025c0:	3b08      	subs	r3, #8
 80025c2:	2200      	movs	r2, #0
 80025c4:	409e      	lsls	r6, r3
 80025c6:	e723      	b.n	8002410 <__aeabi_dmul+0x2cc>
 80025c8:	9b00      	ldr	r3, [sp, #0]
 80025ca:	469c      	mov	ip, r3
 80025cc:	e6e6      	b.n	800239c <__aeabi_dmul+0x258>
 80025ce:	4912      	ldr	r1, [pc, #72]	; (8002618 <__aeabi_dmul+0x4d4>)
 80025d0:	0022      	movs	r2, r4
 80025d2:	4461      	add	r1, ip
 80025d4:	002e      	movs	r6, r5
 80025d6:	408d      	lsls	r5, r1
 80025d8:	408a      	lsls	r2, r1
 80025da:	40c6      	lsrs	r6, r0
 80025dc:	1e69      	subs	r1, r5, #1
 80025de:	418d      	sbcs	r5, r1
 80025e0:	4332      	orrs	r2, r6
 80025e2:	432a      	orrs	r2, r5
 80025e4:	40c4      	lsrs	r4, r0
 80025e6:	0753      	lsls	r3, r2, #29
 80025e8:	d0b6      	beq.n	8002558 <__aeabi_dmul+0x414>
 80025ea:	210f      	movs	r1, #15
 80025ec:	4011      	ands	r1, r2
 80025ee:	2904      	cmp	r1, #4
 80025f0:	d1ac      	bne.n	800254c <__aeabi_dmul+0x408>
 80025f2:	e7b1      	b.n	8002558 <__aeabi_dmul+0x414>
 80025f4:	0765      	lsls	r5, r4, #29
 80025f6:	0264      	lsls	r4, r4, #9
 80025f8:	0b24      	lsrs	r4, r4, #12
 80025fa:	08d2      	lsrs	r2, r2, #3
 80025fc:	4315      	orrs	r5, r2
 80025fe:	2200      	movs	r2, #0
 8002600:	e601      	b.n	8002206 <__aeabi_dmul+0xc2>
 8002602:	2280      	movs	r2, #128	; 0x80
 8002604:	0312      	lsls	r2, r2, #12
 8002606:	4314      	orrs	r4, r2
 8002608:	0324      	lsls	r4, r4, #12
 800260a:	4a01      	ldr	r2, [pc, #4]	; (8002610 <__aeabi_dmul+0x4cc>)
 800260c:	0b24      	lsrs	r4, r4, #12
 800260e:	e5fa      	b.n	8002206 <__aeabi_dmul+0xc2>
 8002610:	000007ff 	.word	0x000007ff
 8002614:	0000043e 	.word	0x0000043e
 8002618:	0000041e 	.word	0x0000041e

0800261c <__aeabi_dsub>:
 800261c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800261e:	4657      	mov	r7, sl
 8002620:	464e      	mov	r6, r9
 8002622:	4645      	mov	r5, r8
 8002624:	46de      	mov	lr, fp
 8002626:	b5e0      	push	{r5, r6, r7, lr}
 8002628:	001e      	movs	r6, r3
 800262a:	0017      	movs	r7, r2
 800262c:	004a      	lsls	r2, r1, #1
 800262e:	030b      	lsls	r3, r1, #12
 8002630:	0d52      	lsrs	r2, r2, #21
 8002632:	0a5b      	lsrs	r3, r3, #9
 8002634:	4690      	mov	r8, r2
 8002636:	0f42      	lsrs	r2, r0, #29
 8002638:	431a      	orrs	r2, r3
 800263a:	0fcd      	lsrs	r5, r1, #31
 800263c:	4ccd      	ldr	r4, [pc, #820]	; (8002974 <__aeabi_dsub+0x358>)
 800263e:	0331      	lsls	r1, r6, #12
 8002640:	00c3      	lsls	r3, r0, #3
 8002642:	4694      	mov	ip, r2
 8002644:	0070      	lsls	r0, r6, #1
 8002646:	0f7a      	lsrs	r2, r7, #29
 8002648:	0a49      	lsrs	r1, r1, #9
 800264a:	00ff      	lsls	r7, r7, #3
 800264c:	469a      	mov	sl, r3
 800264e:	46b9      	mov	r9, r7
 8002650:	0d40      	lsrs	r0, r0, #21
 8002652:	0ff6      	lsrs	r6, r6, #31
 8002654:	4311      	orrs	r1, r2
 8002656:	42a0      	cmp	r0, r4
 8002658:	d100      	bne.n	800265c <__aeabi_dsub+0x40>
 800265a:	e0b1      	b.n	80027c0 <__aeabi_dsub+0x1a4>
 800265c:	2201      	movs	r2, #1
 800265e:	4056      	eors	r6, r2
 8002660:	46b3      	mov	fp, r6
 8002662:	42b5      	cmp	r5, r6
 8002664:	d100      	bne.n	8002668 <__aeabi_dsub+0x4c>
 8002666:	e088      	b.n	800277a <__aeabi_dsub+0x15e>
 8002668:	4642      	mov	r2, r8
 800266a:	1a12      	subs	r2, r2, r0
 800266c:	2a00      	cmp	r2, #0
 800266e:	dc00      	bgt.n	8002672 <__aeabi_dsub+0x56>
 8002670:	e0ae      	b.n	80027d0 <__aeabi_dsub+0x1b4>
 8002672:	2800      	cmp	r0, #0
 8002674:	d100      	bne.n	8002678 <__aeabi_dsub+0x5c>
 8002676:	e0c1      	b.n	80027fc <__aeabi_dsub+0x1e0>
 8002678:	48be      	ldr	r0, [pc, #760]	; (8002974 <__aeabi_dsub+0x358>)
 800267a:	4580      	cmp	r8, r0
 800267c:	d100      	bne.n	8002680 <__aeabi_dsub+0x64>
 800267e:	e151      	b.n	8002924 <__aeabi_dsub+0x308>
 8002680:	2080      	movs	r0, #128	; 0x80
 8002682:	0400      	lsls	r0, r0, #16
 8002684:	4301      	orrs	r1, r0
 8002686:	2a38      	cmp	r2, #56	; 0x38
 8002688:	dd00      	ble.n	800268c <__aeabi_dsub+0x70>
 800268a:	e17b      	b.n	8002984 <__aeabi_dsub+0x368>
 800268c:	2a1f      	cmp	r2, #31
 800268e:	dd00      	ble.n	8002692 <__aeabi_dsub+0x76>
 8002690:	e1ee      	b.n	8002a70 <__aeabi_dsub+0x454>
 8002692:	2020      	movs	r0, #32
 8002694:	003e      	movs	r6, r7
 8002696:	1a80      	subs	r0, r0, r2
 8002698:	000c      	movs	r4, r1
 800269a:	40d6      	lsrs	r6, r2
 800269c:	40d1      	lsrs	r1, r2
 800269e:	4087      	lsls	r7, r0
 80026a0:	4662      	mov	r2, ip
 80026a2:	4084      	lsls	r4, r0
 80026a4:	1a52      	subs	r2, r2, r1
 80026a6:	1e78      	subs	r0, r7, #1
 80026a8:	4187      	sbcs	r7, r0
 80026aa:	4694      	mov	ip, r2
 80026ac:	4334      	orrs	r4, r6
 80026ae:	4327      	orrs	r7, r4
 80026b0:	1bdc      	subs	r4, r3, r7
 80026b2:	42a3      	cmp	r3, r4
 80026b4:	419b      	sbcs	r3, r3
 80026b6:	4662      	mov	r2, ip
 80026b8:	425b      	negs	r3, r3
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	4699      	mov	r9, r3
 80026be:	464b      	mov	r3, r9
 80026c0:	021b      	lsls	r3, r3, #8
 80026c2:	d400      	bmi.n	80026c6 <__aeabi_dsub+0xaa>
 80026c4:	e118      	b.n	80028f8 <__aeabi_dsub+0x2dc>
 80026c6:	464b      	mov	r3, r9
 80026c8:	0258      	lsls	r0, r3, #9
 80026ca:	0a43      	lsrs	r3, r0, #9
 80026cc:	4699      	mov	r9, r3
 80026ce:	464b      	mov	r3, r9
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d100      	bne.n	80026d6 <__aeabi_dsub+0xba>
 80026d4:	e137      	b.n	8002946 <__aeabi_dsub+0x32a>
 80026d6:	4648      	mov	r0, r9
 80026d8:	f000 fcac 	bl	8003034 <__clzsi2>
 80026dc:	0001      	movs	r1, r0
 80026de:	3908      	subs	r1, #8
 80026e0:	2320      	movs	r3, #32
 80026e2:	0022      	movs	r2, r4
 80026e4:	4648      	mov	r0, r9
 80026e6:	1a5b      	subs	r3, r3, r1
 80026e8:	40da      	lsrs	r2, r3
 80026ea:	4088      	lsls	r0, r1
 80026ec:	408c      	lsls	r4, r1
 80026ee:	4643      	mov	r3, r8
 80026f0:	4310      	orrs	r0, r2
 80026f2:	4588      	cmp	r8, r1
 80026f4:	dd00      	ble.n	80026f8 <__aeabi_dsub+0xdc>
 80026f6:	e136      	b.n	8002966 <__aeabi_dsub+0x34a>
 80026f8:	1ac9      	subs	r1, r1, r3
 80026fa:	1c4b      	adds	r3, r1, #1
 80026fc:	2b1f      	cmp	r3, #31
 80026fe:	dd00      	ble.n	8002702 <__aeabi_dsub+0xe6>
 8002700:	e0ea      	b.n	80028d8 <__aeabi_dsub+0x2bc>
 8002702:	2220      	movs	r2, #32
 8002704:	0026      	movs	r6, r4
 8002706:	1ad2      	subs	r2, r2, r3
 8002708:	0001      	movs	r1, r0
 800270a:	4094      	lsls	r4, r2
 800270c:	40de      	lsrs	r6, r3
 800270e:	40d8      	lsrs	r0, r3
 8002710:	2300      	movs	r3, #0
 8002712:	4091      	lsls	r1, r2
 8002714:	1e62      	subs	r2, r4, #1
 8002716:	4194      	sbcs	r4, r2
 8002718:	4681      	mov	r9, r0
 800271a:	4698      	mov	r8, r3
 800271c:	4331      	orrs	r1, r6
 800271e:	430c      	orrs	r4, r1
 8002720:	0763      	lsls	r3, r4, #29
 8002722:	d009      	beq.n	8002738 <__aeabi_dsub+0x11c>
 8002724:	230f      	movs	r3, #15
 8002726:	4023      	ands	r3, r4
 8002728:	2b04      	cmp	r3, #4
 800272a:	d005      	beq.n	8002738 <__aeabi_dsub+0x11c>
 800272c:	1d23      	adds	r3, r4, #4
 800272e:	42a3      	cmp	r3, r4
 8002730:	41a4      	sbcs	r4, r4
 8002732:	4264      	negs	r4, r4
 8002734:	44a1      	add	r9, r4
 8002736:	001c      	movs	r4, r3
 8002738:	464b      	mov	r3, r9
 800273a:	021b      	lsls	r3, r3, #8
 800273c:	d400      	bmi.n	8002740 <__aeabi_dsub+0x124>
 800273e:	e0de      	b.n	80028fe <__aeabi_dsub+0x2e2>
 8002740:	4641      	mov	r1, r8
 8002742:	4b8c      	ldr	r3, [pc, #560]	; (8002974 <__aeabi_dsub+0x358>)
 8002744:	3101      	adds	r1, #1
 8002746:	4299      	cmp	r1, r3
 8002748:	d100      	bne.n	800274c <__aeabi_dsub+0x130>
 800274a:	e0e7      	b.n	800291c <__aeabi_dsub+0x300>
 800274c:	464b      	mov	r3, r9
 800274e:	488a      	ldr	r0, [pc, #552]	; (8002978 <__aeabi_dsub+0x35c>)
 8002750:	08e4      	lsrs	r4, r4, #3
 8002752:	4003      	ands	r3, r0
 8002754:	0018      	movs	r0, r3
 8002756:	0549      	lsls	r1, r1, #21
 8002758:	075b      	lsls	r3, r3, #29
 800275a:	0240      	lsls	r0, r0, #9
 800275c:	4323      	orrs	r3, r4
 800275e:	0d4a      	lsrs	r2, r1, #21
 8002760:	0b04      	lsrs	r4, r0, #12
 8002762:	0512      	lsls	r2, r2, #20
 8002764:	07ed      	lsls	r5, r5, #31
 8002766:	4322      	orrs	r2, r4
 8002768:	432a      	orrs	r2, r5
 800276a:	0018      	movs	r0, r3
 800276c:	0011      	movs	r1, r2
 800276e:	bcf0      	pop	{r4, r5, r6, r7}
 8002770:	46bb      	mov	fp, r7
 8002772:	46b2      	mov	sl, r6
 8002774:	46a9      	mov	r9, r5
 8002776:	46a0      	mov	r8, r4
 8002778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800277a:	4642      	mov	r2, r8
 800277c:	1a12      	subs	r2, r2, r0
 800277e:	2a00      	cmp	r2, #0
 8002780:	dd52      	ble.n	8002828 <__aeabi_dsub+0x20c>
 8002782:	2800      	cmp	r0, #0
 8002784:	d100      	bne.n	8002788 <__aeabi_dsub+0x16c>
 8002786:	e09c      	b.n	80028c2 <__aeabi_dsub+0x2a6>
 8002788:	45a0      	cmp	r8, r4
 800278a:	d100      	bne.n	800278e <__aeabi_dsub+0x172>
 800278c:	e0ca      	b.n	8002924 <__aeabi_dsub+0x308>
 800278e:	2080      	movs	r0, #128	; 0x80
 8002790:	0400      	lsls	r0, r0, #16
 8002792:	4301      	orrs	r1, r0
 8002794:	2a38      	cmp	r2, #56	; 0x38
 8002796:	dd00      	ble.n	800279a <__aeabi_dsub+0x17e>
 8002798:	e149      	b.n	8002a2e <__aeabi_dsub+0x412>
 800279a:	2a1f      	cmp	r2, #31
 800279c:	dc00      	bgt.n	80027a0 <__aeabi_dsub+0x184>
 800279e:	e197      	b.n	8002ad0 <__aeabi_dsub+0x4b4>
 80027a0:	0010      	movs	r0, r2
 80027a2:	000e      	movs	r6, r1
 80027a4:	3820      	subs	r0, #32
 80027a6:	40c6      	lsrs	r6, r0
 80027a8:	2a20      	cmp	r2, #32
 80027aa:	d004      	beq.n	80027b6 <__aeabi_dsub+0x19a>
 80027ac:	2040      	movs	r0, #64	; 0x40
 80027ae:	1a82      	subs	r2, r0, r2
 80027b0:	4091      	lsls	r1, r2
 80027b2:	430f      	orrs	r7, r1
 80027b4:	46b9      	mov	r9, r7
 80027b6:	464c      	mov	r4, r9
 80027b8:	1e62      	subs	r2, r4, #1
 80027ba:	4194      	sbcs	r4, r2
 80027bc:	4334      	orrs	r4, r6
 80027be:	e13a      	b.n	8002a36 <__aeabi_dsub+0x41a>
 80027c0:	000a      	movs	r2, r1
 80027c2:	433a      	orrs	r2, r7
 80027c4:	d028      	beq.n	8002818 <__aeabi_dsub+0x1fc>
 80027c6:	46b3      	mov	fp, r6
 80027c8:	42b5      	cmp	r5, r6
 80027ca:	d02b      	beq.n	8002824 <__aeabi_dsub+0x208>
 80027cc:	4a6b      	ldr	r2, [pc, #428]	; (800297c <__aeabi_dsub+0x360>)
 80027ce:	4442      	add	r2, r8
 80027d0:	2a00      	cmp	r2, #0
 80027d2:	d05d      	beq.n	8002890 <__aeabi_dsub+0x274>
 80027d4:	4642      	mov	r2, r8
 80027d6:	4644      	mov	r4, r8
 80027d8:	1a82      	subs	r2, r0, r2
 80027da:	2c00      	cmp	r4, #0
 80027dc:	d000      	beq.n	80027e0 <__aeabi_dsub+0x1c4>
 80027de:	e0f5      	b.n	80029cc <__aeabi_dsub+0x3b0>
 80027e0:	4665      	mov	r5, ip
 80027e2:	431d      	orrs	r5, r3
 80027e4:	d100      	bne.n	80027e8 <__aeabi_dsub+0x1cc>
 80027e6:	e19c      	b.n	8002b22 <__aeabi_dsub+0x506>
 80027e8:	1e55      	subs	r5, r2, #1
 80027ea:	2a01      	cmp	r2, #1
 80027ec:	d100      	bne.n	80027f0 <__aeabi_dsub+0x1d4>
 80027ee:	e1fb      	b.n	8002be8 <__aeabi_dsub+0x5cc>
 80027f0:	4c60      	ldr	r4, [pc, #384]	; (8002974 <__aeabi_dsub+0x358>)
 80027f2:	42a2      	cmp	r2, r4
 80027f4:	d100      	bne.n	80027f8 <__aeabi_dsub+0x1dc>
 80027f6:	e1bd      	b.n	8002b74 <__aeabi_dsub+0x558>
 80027f8:	002a      	movs	r2, r5
 80027fa:	e0f0      	b.n	80029de <__aeabi_dsub+0x3c2>
 80027fc:	0008      	movs	r0, r1
 80027fe:	4338      	orrs	r0, r7
 8002800:	d100      	bne.n	8002804 <__aeabi_dsub+0x1e8>
 8002802:	e0c3      	b.n	800298c <__aeabi_dsub+0x370>
 8002804:	1e50      	subs	r0, r2, #1
 8002806:	2a01      	cmp	r2, #1
 8002808:	d100      	bne.n	800280c <__aeabi_dsub+0x1f0>
 800280a:	e1a8      	b.n	8002b5e <__aeabi_dsub+0x542>
 800280c:	4c59      	ldr	r4, [pc, #356]	; (8002974 <__aeabi_dsub+0x358>)
 800280e:	42a2      	cmp	r2, r4
 8002810:	d100      	bne.n	8002814 <__aeabi_dsub+0x1f8>
 8002812:	e087      	b.n	8002924 <__aeabi_dsub+0x308>
 8002814:	0002      	movs	r2, r0
 8002816:	e736      	b.n	8002686 <__aeabi_dsub+0x6a>
 8002818:	2201      	movs	r2, #1
 800281a:	4056      	eors	r6, r2
 800281c:	46b3      	mov	fp, r6
 800281e:	42b5      	cmp	r5, r6
 8002820:	d000      	beq.n	8002824 <__aeabi_dsub+0x208>
 8002822:	e721      	b.n	8002668 <__aeabi_dsub+0x4c>
 8002824:	4a55      	ldr	r2, [pc, #340]	; (800297c <__aeabi_dsub+0x360>)
 8002826:	4442      	add	r2, r8
 8002828:	2a00      	cmp	r2, #0
 800282a:	d100      	bne.n	800282e <__aeabi_dsub+0x212>
 800282c:	e0b5      	b.n	800299a <__aeabi_dsub+0x37e>
 800282e:	4642      	mov	r2, r8
 8002830:	4644      	mov	r4, r8
 8002832:	1a82      	subs	r2, r0, r2
 8002834:	2c00      	cmp	r4, #0
 8002836:	d100      	bne.n	800283a <__aeabi_dsub+0x21e>
 8002838:	e138      	b.n	8002aac <__aeabi_dsub+0x490>
 800283a:	4e4e      	ldr	r6, [pc, #312]	; (8002974 <__aeabi_dsub+0x358>)
 800283c:	42b0      	cmp	r0, r6
 800283e:	d100      	bne.n	8002842 <__aeabi_dsub+0x226>
 8002840:	e1de      	b.n	8002c00 <__aeabi_dsub+0x5e4>
 8002842:	2680      	movs	r6, #128	; 0x80
 8002844:	4664      	mov	r4, ip
 8002846:	0436      	lsls	r6, r6, #16
 8002848:	4334      	orrs	r4, r6
 800284a:	46a4      	mov	ip, r4
 800284c:	2a38      	cmp	r2, #56	; 0x38
 800284e:	dd00      	ble.n	8002852 <__aeabi_dsub+0x236>
 8002850:	e196      	b.n	8002b80 <__aeabi_dsub+0x564>
 8002852:	2a1f      	cmp	r2, #31
 8002854:	dd00      	ble.n	8002858 <__aeabi_dsub+0x23c>
 8002856:	e224      	b.n	8002ca2 <__aeabi_dsub+0x686>
 8002858:	2620      	movs	r6, #32
 800285a:	1ab4      	subs	r4, r6, r2
 800285c:	46a2      	mov	sl, r4
 800285e:	4664      	mov	r4, ip
 8002860:	4656      	mov	r6, sl
 8002862:	40b4      	lsls	r4, r6
 8002864:	46a1      	mov	r9, r4
 8002866:	001c      	movs	r4, r3
 8002868:	464e      	mov	r6, r9
 800286a:	40d4      	lsrs	r4, r2
 800286c:	4326      	orrs	r6, r4
 800286e:	0034      	movs	r4, r6
 8002870:	4656      	mov	r6, sl
 8002872:	40b3      	lsls	r3, r6
 8002874:	1e5e      	subs	r6, r3, #1
 8002876:	41b3      	sbcs	r3, r6
 8002878:	431c      	orrs	r4, r3
 800287a:	4663      	mov	r3, ip
 800287c:	40d3      	lsrs	r3, r2
 800287e:	18c9      	adds	r1, r1, r3
 8002880:	19e4      	adds	r4, r4, r7
 8002882:	42bc      	cmp	r4, r7
 8002884:	41bf      	sbcs	r7, r7
 8002886:	427f      	negs	r7, r7
 8002888:	46b9      	mov	r9, r7
 800288a:	4680      	mov	r8, r0
 800288c:	4489      	add	r9, r1
 800288e:	e0d8      	b.n	8002a42 <__aeabi_dsub+0x426>
 8002890:	4640      	mov	r0, r8
 8002892:	4c3b      	ldr	r4, [pc, #236]	; (8002980 <__aeabi_dsub+0x364>)
 8002894:	3001      	adds	r0, #1
 8002896:	4220      	tst	r0, r4
 8002898:	d000      	beq.n	800289c <__aeabi_dsub+0x280>
 800289a:	e0b4      	b.n	8002a06 <__aeabi_dsub+0x3ea>
 800289c:	4640      	mov	r0, r8
 800289e:	2800      	cmp	r0, #0
 80028a0:	d000      	beq.n	80028a4 <__aeabi_dsub+0x288>
 80028a2:	e144      	b.n	8002b2e <__aeabi_dsub+0x512>
 80028a4:	4660      	mov	r0, ip
 80028a6:	4318      	orrs	r0, r3
 80028a8:	d100      	bne.n	80028ac <__aeabi_dsub+0x290>
 80028aa:	e190      	b.n	8002bce <__aeabi_dsub+0x5b2>
 80028ac:	0008      	movs	r0, r1
 80028ae:	4338      	orrs	r0, r7
 80028b0:	d000      	beq.n	80028b4 <__aeabi_dsub+0x298>
 80028b2:	e1aa      	b.n	8002c0a <__aeabi_dsub+0x5ee>
 80028b4:	4661      	mov	r1, ip
 80028b6:	08db      	lsrs	r3, r3, #3
 80028b8:	0749      	lsls	r1, r1, #29
 80028ba:	430b      	orrs	r3, r1
 80028bc:	4661      	mov	r1, ip
 80028be:	08cc      	lsrs	r4, r1, #3
 80028c0:	e027      	b.n	8002912 <__aeabi_dsub+0x2f6>
 80028c2:	0008      	movs	r0, r1
 80028c4:	4338      	orrs	r0, r7
 80028c6:	d061      	beq.n	800298c <__aeabi_dsub+0x370>
 80028c8:	1e50      	subs	r0, r2, #1
 80028ca:	2a01      	cmp	r2, #1
 80028cc:	d100      	bne.n	80028d0 <__aeabi_dsub+0x2b4>
 80028ce:	e139      	b.n	8002b44 <__aeabi_dsub+0x528>
 80028d0:	42a2      	cmp	r2, r4
 80028d2:	d027      	beq.n	8002924 <__aeabi_dsub+0x308>
 80028d4:	0002      	movs	r2, r0
 80028d6:	e75d      	b.n	8002794 <__aeabi_dsub+0x178>
 80028d8:	0002      	movs	r2, r0
 80028da:	391f      	subs	r1, #31
 80028dc:	40ca      	lsrs	r2, r1
 80028de:	0011      	movs	r1, r2
 80028e0:	2b20      	cmp	r3, #32
 80028e2:	d003      	beq.n	80028ec <__aeabi_dsub+0x2d0>
 80028e4:	2240      	movs	r2, #64	; 0x40
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	4098      	lsls	r0, r3
 80028ea:	4304      	orrs	r4, r0
 80028ec:	1e63      	subs	r3, r4, #1
 80028ee:	419c      	sbcs	r4, r3
 80028f0:	2300      	movs	r3, #0
 80028f2:	4699      	mov	r9, r3
 80028f4:	4698      	mov	r8, r3
 80028f6:	430c      	orrs	r4, r1
 80028f8:	0763      	lsls	r3, r4, #29
 80028fa:	d000      	beq.n	80028fe <__aeabi_dsub+0x2e2>
 80028fc:	e712      	b.n	8002724 <__aeabi_dsub+0x108>
 80028fe:	464b      	mov	r3, r9
 8002900:	464a      	mov	r2, r9
 8002902:	08e4      	lsrs	r4, r4, #3
 8002904:	075b      	lsls	r3, r3, #29
 8002906:	4323      	orrs	r3, r4
 8002908:	08d4      	lsrs	r4, r2, #3
 800290a:	4642      	mov	r2, r8
 800290c:	4919      	ldr	r1, [pc, #100]	; (8002974 <__aeabi_dsub+0x358>)
 800290e:	428a      	cmp	r2, r1
 8002910:	d00e      	beq.n	8002930 <__aeabi_dsub+0x314>
 8002912:	0324      	lsls	r4, r4, #12
 8002914:	0552      	lsls	r2, r2, #21
 8002916:	0b24      	lsrs	r4, r4, #12
 8002918:	0d52      	lsrs	r2, r2, #21
 800291a:	e722      	b.n	8002762 <__aeabi_dsub+0x146>
 800291c:	000a      	movs	r2, r1
 800291e:	2400      	movs	r4, #0
 8002920:	2300      	movs	r3, #0
 8002922:	e71e      	b.n	8002762 <__aeabi_dsub+0x146>
 8002924:	08db      	lsrs	r3, r3, #3
 8002926:	4662      	mov	r2, ip
 8002928:	0752      	lsls	r2, r2, #29
 800292a:	4313      	orrs	r3, r2
 800292c:	4662      	mov	r2, ip
 800292e:	08d4      	lsrs	r4, r2, #3
 8002930:	001a      	movs	r2, r3
 8002932:	4322      	orrs	r2, r4
 8002934:	d100      	bne.n	8002938 <__aeabi_dsub+0x31c>
 8002936:	e1fc      	b.n	8002d32 <__aeabi_dsub+0x716>
 8002938:	2280      	movs	r2, #128	; 0x80
 800293a:	0312      	lsls	r2, r2, #12
 800293c:	4314      	orrs	r4, r2
 800293e:	0324      	lsls	r4, r4, #12
 8002940:	4a0c      	ldr	r2, [pc, #48]	; (8002974 <__aeabi_dsub+0x358>)
 8002942:	0b24      	lsrs	r4, r4, #12
 8002944:	e70d      	b.n	8002762 <__aeabi_dsub+0x146>
 8002946:	0020      	movs	r0, r4
 8002948:	f000 fb74 	bl	8003034 <__clzsi2>
 800294c:	0001      	movs	r1, r0
 800294e:	3118      	adds	r1, #24
 8002950:	291f      	cmp	r1, #31
 8002952:	dc00      	bgt.n	8002956 <__aeabi_dsub+0x33a>
 8002954:	e6c4      	b.n	80026e0 <__aeabi_dsub+0xc4>
 8002956:	3808      	subs	r0, #8
 8002958:	4084      	lsls	r4, r0
 800295a:	4643      	mov	r3, r8
 800295c:	0020      	movs	r0, r4
 800295e:	2400      	movs	r4, #0
 8002960:	4588      	cmp	r8, r1
 8002962:	dc00      	bgt.n	8002966 <__aeabi_dsub+0x34a>
 8002964:	e6c8      	b.n	80026f8 <__aeabi_dsub+0xdc>
 8002966:	4a04      	ldr	r2, [pc, #16]	; (8002978 <__aeabi_dsub+0x35c>)
 8002968:	1a5b      	subs	r3, r3, r1
 800296a:	4010      	ands	r0, r2
 800296c:	4698      	mov	r8, r3
 800296e:	4681      	mov	r9, r0
 8002970:	e6d6      	b.n	8002720 <__aeabi_dsub+0x104>
 8002972:	46c0      	nop			; (mov r8, r8)
 8002974:	000007ff 	.word	0x000007ff
 8002978:	ff7fffff 	.word	0xff7fffff
 800297c:	fffff801 	.word	0xfffff801
 8002980:	000007fe 	.word	0x000007fe
 8002984:	430f      	orrs	r7, r1
 8002986:	1e7a      	subs	r2, r7, #1
 8002988:	4197      	sbcs	r7, r2
 800298a:	e691      	b.n	80026b0 <__aeabi_dsub+0x94>
 800298c:	4661      	mov	r1, ip
 800298e:	08db      	lsrs	r3, r3, #3
 8002990:	0749      	lsls	r1, r1, #29
 8002992:	430b      	orrs	r3, r1
 8002994:	4661      	mov	r1, ip
 8002996:	08cc      	lsrs	r4, r1, #3
 8002998:	e7b8      	b.n	800290c <__aeabi_dsub+0x2f0>
 800299a:	4640      	mov	r0, r8
 800299c:	4cd3      	ldr	r4, [pc, #844]	; (8002cec <__aeabi_dsub+0x6d0>)
 800299e:	3001      	adds	r0, #1
 80029a0:	4220      	tst	r0, r4
 80029a2:	d000      	beq.n	80029a6 <__aeabi_dsub+0x38a>
 80029a4:	e0a2      	b.n	8002aec <__aeabi_dsub+0x4d0>
 80029a6:	4640      	mov	r0, r8
 80029a8:	2800      	cmp	r0, #0
 80029aa:	d000      	beq.n	80029ae <__aeabi_dsub+0x392>
 80029ac:	e101      	b.n	8002bb2 <__aeabi_dsub+0x596>
 80029ae:	4660      	mov	r0, ip
 80029b0:	4318      	orrs	r0, r3
 80029b2:	d100      	bne.n	80029b6 <__aeabi_dsub+0x39a>
 80029b4:	e15e      	b.n	8002c74 <__aeabi_dsub+0x658>
 80029b6:	0008      	movs	r0, r1
 80029b8:	4338      	orrs	r0, r7
 80029ba:	d000      	beq.n	80029be <__aeabi_dsub+0x3a2>
 80029bc:	e15f      	b.n	8002c7e <__aeabi_dsub+0x662>
 80029be:	4661      	mov	r1, ip
 80029c0:	08db      	lsrs	r3, r3, #3
 80029c2:	0749      	lsls	r1, r1, #29
 80029c4:	430b      	orrs	r3, r1
 80029c6:	4661      	mov	r1, ip
 80029c8:	08cc      	lsrs	r4, r1, #3
 80029ca:	e7a2      	b.n	8002912 <__aeabi_dsub+0x2f6>
 80029cc:	4dc8      	ldr	r5, [pc, #800]	; (8002cf0 <__aeabi_dsub+0x6d4>)
 80029ce:	42a8      	cmp	r0, r5
 80029d0:	d100      	bne.n	80029d4 <__aeabi_dsub+0x3b8>
 80029d2:	e0cf      	b.n	8002b74 <__aeabi_dsub+0x558>
 80029d4:	2580      	movs	r5, #128	; 0x80
 80029d6:	4664      	mov	r4, ip
 80029d8:	042d      	lsls	r5, r5, #16
 80029da:	432c      	orrs	r4, r5
 80029dc:	46a4      	mov	ip, r4
 80029de:	2a38      	cmp	r2, #56	; 0x38
 80029e0:	dc56      	bgt.n	8002a90 <__aeabi_dsub+0x474>
 80029e2:	2a1f      	cmp	r2, #31
 80029e4:	dd00      	ble.n	80029e8 <__aeabi_dsub+0x3cc>
 80029e6:	e0d1      	b.n	8002b8c <__aeabi_dsub+0x570>
 80029e8:	2520      	movs	r5, #32
 80029ea:	001e      	movs	r6, r3
 80029ec:	1aad      	subs	r5, r5, r2
 80029ee:	4664      	mov	r4, ip
 80029f0:	40ab      	lsls	r3, r5
 80029f2:	40ac      	lsls	r4, r5
 80029f4:	40d6      	lsrs	r6, r2
 80029f6:	1e5d      	subs	r5, r3, #1
 80029f8:	41ab      	sbcs	r3, r5
 80029fa:	4334      	orrs	r4, r6
 80029fc:	4323      	orrs	r3, r4
 80029fe:	4664      	mov	r4, ip
 8002a00:	40d4      	lsrs	r4, r2
 8002a02:	1b09      	subs	r1, r1, r4
 8002a04:	e049      	b.n	8002a9a <__aeabi_dsub+0x47e>
 8002a06:	4660      	mov	r0, ip
 8002a08:	1bdc      	subs	r4, r3, r7
 8002a0a:	1a46      	subs	r6, r0, r1
 8002a0c:	42a3      	cmp	r3, r4
 8002a0e:	4180      	sbcs	r0, r0
 8002a10:	4240      	negs	r0, r0
 8002a12:	4681      	mov	r9, r0
 8002a14:	0030      	movs	r0, r6
 8002a16:	464e      	mov	r6, r9
 8002a18:	1b80      	subs	r0, r0, r6
 8002a1a:	4681      	mov	r9, r0
 8002a1c:	0200      	lsls	r0, r0, #8
 8002a1e:	d476      	bmi.n	8002b0e <__aeabi_dsub+0x4f2>
 8002a20:	464b      	mov	r3, r9
 8002a22:	4323      	orrs	r3, r4
 8002a24:	d000      	beq.n	8002a28 <__aeabi_dsub+0x40c>
 8002a26:	e652      	b.n	80026ce <__aeabi_dsub+0xb2>
 8002a28:	2400      	movs	r4, #0
 8002a2a:	2500      	movs	r5, #0
 8002a2c:	e771      	b.n	8002912 <__aeabi_dsub+0x2f6>
 8002a2e:	4339      	orrs	r1, r7
 8002a30:	000c      	movs	r4, r1
 8002a32:	1e62      	subs	r2, r4, #1
 8002a34:	4194      	sbcs	r4, r2
 8002a36:	18e4      	adds	r4, r4, r3
 8002a38:	429c      	cmp	r4, r3
 8002a3a:	419b      	sbcs	r3, r3
 8002a3c:	425b      	negs	r3, r3
 8002a3e:	4463      	add	r3, ip
 8002a40:	4699      	mov	r9, r3
 8002a42:	464b      	mov	r3, r9
 8002a44:	021b      	lsls	r3, r3, #8
 8002a46:	d400      	bmi.n	8002a4a <__aeabi_dsub+0x42e>
 8002a48:	e756      	b.n	80028f8 <__aeabi_dsub+0x2dc>
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	469c      	mov	ip, r3
 8002a4e:	4ba8      	ldr	r3, [pc, #672]	; (8002cf0 <__aeabi_dsub+0x6d4>)
 8002a50:	44e0      	add	r8, ip
 8002a52:	4598      	cmp	r8, r3
 8002a54:	d038      	beq.n	8002ac8 <__aeabi_dsub+0x4ac>
 8002a56:	464b      	mov	r3, r9
 8002a58:	48a6      	ldr	r0, [pc, #664]	; (8002cf4 <__aeabi_dsub+0x6d8>)
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	4003      	ands	r3, r0
 8002a5e:	0018      	movs	r0, r3
 8002a60:	0863      	lsrs	r3, r4, #1
 8002a62:	4014      	ands	r4, r2
 8002a64:	431c      	orrs	r4, r3
 8002a66:	07c3      	lsls	r3, r0, #31
 8002a68:	431c      	orrs	r4, r3
 8002a6a:	0843      	lsrs	r3, r0, #1
 8002a6c:	4699      	mov	r9, r3
 8002a6e:	e657      	b.n	8002720 <__aeabi_dsub+0x104>
 8002a70:	0010      	movs	r0, r2
 8002a72:	000e      	movs	r6, r1
 8002a74:	3820      	subs	r0, #32
 8002a76:	40c6      	lsrs	r6, r0
 8002a78:	2a20      	cmp	r2, #32
 8002a7a:	d004      	beq.n	8002a86 <__aeabi_dsub+0x46a>
 8002a7c:	2040      	movs	r0, #64	; 0x40
 8002a7e:	1a82      	subs	r2, r0, r2
 8002a80:	4091      	lsls	r1, r2
 8002a82:	430f      	orrs	r7, r1
 8002a84:	46b9      	mov	r9, r7
 8002a86:	464f      	mov	r7, r9
 8002a88:	1e7a      	subs	r2, r7, #1
 8002a8a:	4197      	sbcs	r7, r2
 8002a8c:	4337      	orrs	r7, r6
 8002a8e:	e60f      	b.n	80026b0 <__aeabi_dsub+0x94>
 8002a90:	4662      	mov	r2, ip
 8002a92:	431a      	orrs	r2, r3
 8002a94:	0013      	movs	r3, r2
 8002a96:	1e5a      	subs	r2, r3, #1
 8002a98:	4193      	sbcs	r3, r2
 8002a9a:	1afc      	subs	r4, r7, r3
 8002a9c:	42a7      	cmp	r7, r4
 8002a9e:	41bf      	sbcs	r7, r7
 8002aa0:	427f      	negs	r7, r7
 8002aa2:	1bcb      	subs	r3, r1, r7
 8002aa4:	4699      	mov	r9, r3
 8002aa6:	465d      	mov	r5, fp
 8002aa8:	4680      	mov	r8, r0
 8002aaa:	e608      	b.n	80026be <__aeabi_dsub+0xa2>
 8002aac:	4666      	mov	r6, ip
 8002aae:	431e      	orrs	r6, r3
 8002ab0:	d100      	bne.n	8002ab4 <__aeabi_dsub+0x498>
 8002ab2:	e0be      	b.n	8002c32 <__aeabi_dsub+0x616>
 8002ab4:	1e56      	subs	r6, r2, #1
 8002ab6:	2a01      	cmp	r2, #1
 8002ab8:	d100      	bne.n	8002abc <__aeabi_dsub+0x4a0>
 8002aba:	e109      	b.n	8002cd0 <__aeabi_dsub+0x6b4>
 8002abc:	4c8c      	ldr	r4, [pc, #560]	; (8002cf0 <__aeabi_dsub+0x6d4>)
 8002abe:	42a2      	cmp	r2, r4
 8002ac0:	d100      	bne.n	8002ac4 <__aeabi_dsub+0x4a8>
 8002ac2:	e119      	b.n	8002cf8 <__aeabi_dsub+0x6dc>
 8002ac4:	0032      	movs	r2, r6
 8002ac6:	e6c1      	b.n	800284c <__aeabi_dsub+0x230>
 8002ac8:	4642      	mov	r2, r8
 8002aca:	2400      	movs	r4, #0
 8002acc:	2300      	movs	r3, #0
 8002ace:	e648      	b.n	8002762 <__aeabi_dsub+0x146>
 8002ad0:	2020      	movs	r0, #32
 8002ad2:	000c      	movs	r4, r1
 8002ad4:	1a80      	subs	r0, r0, r2
 8002ad6:	003e      	movs	r6, r7
 8002ad8:	4087      	lsls	r7, r0
 8002ada:	4084      	lsls	r4, r0
 8002adc:	40d6      	lsrs	r6, r2
 8002ade:	1e78      	subs	r0, r7, #1
 8002ae0:	4187      	sbcs	r7, r0
 8002ae2:	40d1      	lsrs	r1, r2
 8002ae4:	4334      	orrs	r4, r6
 8002ae6:	433c      	orrs	r4, r7
 8002ae8:	448c      	add	ip, r1
 8002aea:	e7a4      	b.n	8002a36 <__aeabi_dsub+0x41a>
 8002aec:	4a80      	ldr	r2, [pc, #512]	; (8002cf0 <__aeabi_dsub+0x6d4>)
 8002aee:	4290      	cmp	r0, r2
 8002af0:	d100      	bne.n	8002af4 <__aeabi_dsub+0x4d8>
 8002af2:	e0e9      	b.n	8002cc8 <__aeabi_dsub+0x6ac>
 8002af4:	19df      	adds	r7, r3, r7
 8002af6:	429f      	cmp	r7, r3
 8002af8:	419b      	sbcs	r3, r3
 8002afa:	4461      	add	r1, ip
 8002afc:	425b      	negs	r3, r3
 8002afe:	18c9      	adds	r1, r1, r3
 8002b00:	07cc      	lsls	r4, r1, #31
 8002b02:	087f      	lsrs	r7, r7, #1
 8002b04:	084b      	lsrs	r3, r1, #1
 8002b06:	4699      	mov	r9, r3
 8002b08:	4680      	mov	r8, r0
 8002b0a:	433c      	orrs	r4, r7
 8002b0c:	e6f4      	b.n	80028f8 <__aeabi_dsub+0x2dc>
 8002b0e:	1afc      	subs	r4, r7, r3
 8002b10:	42a7      	cmp	r7, r4
 8002b12:	41bf      	sbcs	r7, r7
 8002b14:	4663      	mov	r3, ip
 8002b16:	427f      	negs	r7, r7
 8002b18:	1ac9      	subs	r1, r1, r3
 8002b1a:	1bcb      	subs	r3, r1, r7
 8002b1c:	4699      	mov	r9, r3
 8002b1e:	465d      	mov	r5, fp
 8002b20:	e5d5      	b.n	80026ce <__aeabi_dsub+0xb2>
 8002b22:	08ff      	lsrs	r7, r7, #3
 8002b24:	074b      	lsls	r3, r1, #29
 8002b26:	465d      	mov	r5, fp
 8002b28:	433b      	orrs	r3, r7
 8002b2a:	08cc      	lsrs	r4, r1, #3
 8002b2c:	e6ee      	b.n	800290c <__aeabi_dsub+0x2f0>
 8002b2e:	4662      	mov	r2, ip
 8002b30:	431a      	orrs	r2, r3
 8002b32:	d000      	beq.n	8002b36 <__aeabi_dsub+0x51a>
 8002b34:	e082      	b.n	8002c3c <__aeabi_dsub+0x620>
 8002b36:	000b      	movs	r3, r1
 8002b38:	433b      	orrs	r3, r7
 8002b3a:	d11b      	bne.n	8002b74 <__aeabi_dsub+0x558>
 8002b3c:	2480      	movs	r4, #128	; 0x80
 8002b3e:	2500      	movs	r5, #0
 8002b40:	0324      	lsls	r4, r4, #12
 8002b42:	e6f9      	b.n	8002938 <__aeabi_dsub+0x31c>
 8002b44:	19dc      	adds	r4, r3, r7
 8002b46:	429c      	cmp	r4, r3
 8002b48:	419b      	sbcs	r3, r3
 8002b4a:	4461      	add	r1, ip
 8002b4c:	4689      	mov	r9, r1
 8002b4e:	425b      	negs	r3, r3
 8002b50:	4499      	add	r9, r3
 8002b52:	464b      	mov	r3, r9
 8002b54:	021b      	lsls	r3, r3, #8
 8002b56:	d444      	bmi.n	8002be2 <__aeabi_dsub+0x5c6>
 8002b58:	2301      	movs	r3, #1
 8002b5a:	4698      	mov	r8, r3
 8002b5c:	e6cc      	b.n	80028f8 <__aeabi_dsub+0x2dc>
 8002b5e:	1bdc      	subs	r4, r3, r7
 8002b60:	4662      	mov	r2, ip
 8002b62:	42a3      	cmp	r3, r4
 8002b64:	419b      	sbcs	r3, r3
 8002b66:	1a51      	subs	r1, r2, r1
 8002b68:	425b      	negs	r3, r3
 8002b6a:	1acb      	subs	r3, r1, r3
 8002b6c:	4699      	mov	r9, r3
 8002b6e:	2301      	movs	r3, #1
 8002b70:	4698      	mov	r8, r3
 8002b72:	e5a4      	b.n	80026be <__aeabi_dsub+0xa2>
 8002b74:	08ff      	lsrs	r7, r7, #3
 8002b76:	074b      	lsls	r3, r1, #29
 8002b78:	465d      	mov	r5, fp
 8002b7a:	433b      	orrs	r3, r7
 8002b7c:	08cc      	lsrs	r4, r1, #3
 8002b7e:	e6d7      	b.n	8002930 <__aeabi_dsub+0x314>
 8002b80:	4662      	mov	r2, ip
 8002b82:	431a      	orrs	r2, r3
 8002b84:	0014      	movs	r4, r2
 8002b86:	1e63      	subs	r3, r4, #1
 8002b88:	419c      	sbcs	r4, r3
 8002b8a:	e679      	b.n	8002880 <__aeabi_dsub+0x264>
 8002b8c:	0015      	movs	r5, r2
 8002b8e:	4664      	mov	r4, ip
 8002b90:	3d20      	subs	r5, #32
 8002b92:	40ec      	lsrs	r4, r5
 8002b94:	46a0      	mov	r8, r4
 8002b96:	2a20      	cmp	r2, #32
 8002b98:	d005      	beq.n	8002ba6 <__aeabi_dsub+0x58a>
 8002b9a:	2540      	movs	r5, #64	; 0x40
 8002b9c:	4664      	mov	r4, ip
 8002b9e:	1aaa      	subs	r2, r5, r2
 8002ba0:	4094      	lsls	r4, r2
 8002ba2:	4323      	orrs	r3, r4
 8002ba4:	469a      	mov	sl, r3
 8002ba6:	4654      	mov	r4, sl
 8002ba8:	1e63      	subs	r3, r4, #1
 8002baa:	419c      	sbcs	r4, r3
 8002bac:	4643      	mov	r3, r8
 8002bae:	4323      	orrs	r3, r4
 8002bb0:	e773      	b.n	8002a9a <__aeabi_dsub+0x47e>
 8002bb2:	4662      	mov	r2, ip
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	d023      	beq.n	8002c00 <__aeabi_dsub+0x5e4>
 8002bb8:	000a      	movs	r2, r1
 8002bba:	433a      	orrs	r2, r7
 8002bbc:	d000      	beq.n	8002bc0 <__aeabi_dsub+0x5a4>
 8002bbe:	e0a0      	b.n	8002d02 <__aeabi_dsub+0x6e6>
 8002bc0:	4662      	mov	r2, ip
 8002bc2:	08db      	lsrs	r3, r3, #3
 8002bc4:	0752      	lsls	r2, r2, #29
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	4662      	mov	r2, ip
 8002bca:	08d4      	lsrs	r4, r2, #3
 8002bcc:	e6b0      	b.n	8002930 <__aeabi_dsub+0x314>
 8002bce:	000b      	movs	r3, r1
 8002bd0:	433b      	orrs	r3, r7
 8002bd2:	d100      	bne.n	8002bd6 <__aeabi_dsub+0x5ba>
 8002bd4:	e728      	b.n	8002a28 <__aeabi_dsub+0x40c>
 8002bd6:	08ff      	lsrs	r7, r7, #3
 8002bd8:	074b      	lsls	r3, r1, #29
 8002bda:	465d      	mov	r5, fp
 8002bdc:	433b      	orrs	r3, r7
 8002bde:	08cc      	lsrs	r4, r1, #3
 8002be0:	e697      	b.n	8002912 <__aeabi_dsub+0x2f6>
 8002be2:	2302      	movs	r3, #2
 8002be4:	4698      	mov	r8, r3
 8002be6:	e736      	b.n	8002a56 <__aeabi_dsub+0x43a>
 8002be8:	1afc      	subs	r4, r7, r3
 8002bea:	42a7      	cmp	r7, r4
 8002bec:	41bf      	sbcs	r7, r7
 8002bee:	4663      	mov	r3, ip
 8002bf0:	427f      	negs	r7, r7
 8002bf2:	1ac9      	subs	r1, r1, r3
 8002bf4:	1bcb      	subs	r3, r1, r7
 8002bf6:	4699      	mov	r9, r3
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	465d      	mov	r5, fp
 8002bfc:	4698      	mov	r8, r3
 8002bfe:	e55e      	b.n	80026be <__aeabi_dsub+0xa2>
 8002c00:	074b      	lsls	r3, r1, #29
 8002c02:	08ff      	lsrs	r7, r7, #3
 8002c04:	433b      	orrs	r3, r7
 8002c06:	08cc      	lsrs	r4, r1, #3
 8002c08:	e692      	b.n	8002930 <__aeabi_dsub+0x314>
 8002c0a:	1bdc      	subs	r4, r3, r7
 8002c0c:	4660      	mov	r0, ip
 8002c0e:	42a3      	cmp	r3, r4
 8002c10:	41b6      	sbcs	r6, r6
 8002c12:	1a40      	subs	r0, r0, r1
 8002c14:	4276      	negs	r6, r6
 8002c16:	1b80      	subs	r0, r0, r6
 8002c18:	4681      	mov	r9, r0
 8002c1a:	0200      	lsls	r0, r0, #8
 8002c1c:	d560      	bpl.n	8002ce0 <__aeabi_dsub+0x6c4>
 8002c1e:	1afc      	subs	r4, r7, r3
 8002c20:	42a7      	cmp	r7, r4
 8002c22:	41bf      	sbcs	r7, r7
 8002c24:	4663      	mov	r3, ip
 8002c26:	427f      	negs	r7, r7
 8002c28:	1ac9      	subs	r1, r1, r3
 8002c2a:	1bcb      	subs	r3, r1, r7
 8002c2c:	4699      	mov	r9, r3
 8002c2e:	465d      	mov	r5, fp
 8002c30:	e576      	b.n	8002720 <__aeabi_dsub+0x104>
 8002c32:	08ff      	lsrs	r7, r7, #3
 8002c34:	074b      	lsls	r3, r1, #29
 8002c36:	433b      	orrs	r3, r7
 8002c38:	08cc      	lsrs	r4, r1, #3
 8002c3a:	e667      	b.n	800290c <__aeabi_dsub+0x2f0>
 8002c3c:	000a      	movs	r2, r1
 8002c3e:	08db      	lsrs	r3, r3, #3
 8002c40:	433a      	orrs	r2, r7
 8002c42:	d100      	bne.n	8002c46 <__aeabi_dsub+0x62a>
 8002c44:	e66f      	b.n	8002926 <__aeabi_dsub+0x30a>
 8002c46:	4662      	mov	r2, ip
 8002c48:	0752      	lsls	r2, r2, #29
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	4662      	mov	r2, ip
 8002c4e:	08d4      	lsrs	r4, r2, #3
 8002c50:	2280      	movs	r2, #128	; 0x80
 8002c52:	0312      	lsls	r2, r2, #12
 8002c54:	4214      	tst	r4, r2
 8002c56:	d007      	beq.n	8002c68 <__aeabi_dsub+0x64c>
 8002c58:	08c8      	lsrs	r0, r1, #3
 8002c5a:	4210      	tst	r0, r2
 8002c5c:	d104      	bne.n	8002c68 <__aeabi_dsub+0x64c>
 8002c5e:	465d      	mov	r5, fp
 8002c60:	0004      	movs	r4, r0
 8002c62:	08fb      	lsrs	r3, r7, #3
 8002c64:	0749      	lsls	r1, r1, #29
 8002c66:	430b      	orrs	r3, r1
 8002c68:	0f5a      	lsrs	r2, r3, #29
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	08db      	lsrs	r3, r3, #3
 8002c6e:	0752      	lsls	r2, r2, #29
 8002c70:	4313      	orrs	r3, r2
 8002c72:	e65d      	b.n	8002930 <__aeabi_dsub+0x314>
 8002c74:	074b      	lsls	r3, r1, #29
 8002c76:	08ff      	lsrs	r7, r7, #3
 8002c78:	433b      	orrs	r3, r7
 8002c7a:	08cc      	lsrs	r4, r1, #3
 8002c7c:	e649      	b.n	8002912 <__aeabi_dsub+0x2f6>
 8002c7e:	19dc      	adds	r4, r3, r7
 8002c80:	429c      	cmp	r4, r3
 8002c82:	419b      	sbcs	r3, r3
 8002c84:	4461      	add	r1, ip
 8002c86:	4689      	mov	r9, r1
 8002c88:	425b      	negs	r3, r3
 8002c8a:	4499      	add	r9, r3
 8002c8c:	464b      	mov	r3, r9
 8002c8e:	021b      	lsls	r3, r3, #8
 8002c90:	d400      	bmi.n	8002c94 <__aeabi_dsub+0x678>
 8002c92:	e631      	b.n	80028f8 <__aeabi_dsub+0x2dc>
 8002c94:	464a      	mov	r2, r9
 8002c96:	4b17      	ldr	r3, [pc, #92]	; (8002cf4 <__aeabi_dsub+0x6d8>)
 8002c98:	401a      	ands	r2, r3
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	4691      	mov	r9, r2
 8002c9e:	4698      	mov	r8, r3
 8002ca0:	e62a      	b.n	80028f8 <__aeabi_dsub+0x2dc>
 8002ca2:	0016      	movs	r6, r2
 8002ca4:	4664      	mov	r4, ip
 8002ca6:	3e20      	subs	r6, #32
 8002ca8:	40f4      	lsrs	r4, r6
 8002caa:	46a0      	mov	r8, r4
 8002cac:	2a20      	cmp	r2, #32
 8002cae:	d005      	beq.n	8002cbc <__aeabi_dsub+0x6a0>
 8002cb0:	2640      	movs	r6, #64	; 0x40
 8002cb2:	4664      	mov	r4, ip
 8002cb4:	1ab2      	subs	r2, r6, r2
 8002cb6:	4094      	lsls	r4, r2
 8002cb8:	4323      	orrs	r3, r4
 8002cba:	469a      	mov	sl, r3
 8002cbc:	4654      	mov	r4, sl
 8002cbe:	1e63      	subs	r3, r4, #1
 8002cc0:	419c      	sbcs	r4, r3
 8002cc2:	4643      	mov	r3, r8
 8002cc4:	431c      	orrs	r4, r3
 8002cc6:	e5db      	b.n	8002880 <__aeabi_dsub+0x264>
 8002cc8:	0002      	movs	r2, r0
 8002cca:	2400      	movs	r4, #0
 8002ccc:	2300      	movs	r3, #0
 8002cce:	e548      	b.n	8002762 <__aeabi_dsub+0x146>
 8002cd0:	19dc      	adds	r4, r3, r7
 8002cd2:	42bc      	cmp	r4, r7
 8002cd4:	41bf      	sbcs	r7, r7
 8002cd6:	4461      	add	r1, ip
 8002cd8:	4689      	mov	r9, r1
 8002cda:	427f      	negs	r7, r7
 8002cdc:	44b9      	add	r9, r7
 8002cde:	e738      	b.n	8002b52 <__aeabi_dsub+0x536>
 8002ce0:	464b      	mov	r3, r9
 8002ce2:	4323      	orrs	r3, r4
 8002ce4:	d100      	bne.n	8002ce8 <__aeabi_dsub+0x6cc>
 8002ce6:	e69f      	b.n	8002a28 <__aeabi_dsub+0x40c>
 8002ce8:	e606      	b.n	80028f8 <__aeabi_dsub+0x2dc>
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	000007fe 	.word	0x000007fe
 8002cf0:	000007ff 	.word	0x000007ff
 8002cf4:	ff7fffff 	.word	0xff7fffff
 8002cf8:	08ff      	lsrs	r7, r7, #3
 8002cfa:	074b      	lsls	r3, r1, #29
 8002cfc:	433b      	orrs	r3, r7
 8002cfe:	08cc      	lsrs	r4, r1, #3
 8002d00:	e616      	b.n	8002930 <__aeabi_dsub+0x314>
 8002d02:	4662      	mov	r2, ip
 8002d04:	08db      	lsrs	r3, r3, #3
 8002d06:	0752      	lsls	r2, r2, #29
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	4662      	mov	r2, ip
 8002d0c:	08d4      	lsrs	r4, r2, #3
 8002d0e:	2280      	movs	r2, #128	; 0x80
 8002d10:	0312      	lsls	r2, r2, #12
 8002d12:	4214      	tst	r4, r2
 8002d14:	d007      	beq.n	8002d26 <__aeabi_dsub+0x70a>
 8002d16:	08c8      	lsrs	r0, r1, #3
 8002d18:	4210      	tst	r0, r2
 8002d1a:	d104      	bne.n	8002d26 <__aeabi_dsub+0x70a>
 8002d1c:	465d      	mov	r5, fp
 8002d1e:	0004      	movs	r4, r0
 8002d20:	08fb      	lsrs	r3, r7, #3
 8002d22:	0749      	lsls	r1, r1, #29
 8002d24:	430b      	orrs	r3, r1
 8002d26:	0f5a      	lsrs	r2, r3, #29
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	0752      	lsls	r2, r2, #29
 8002d2c:	08db      	lsrs	r3, r3, #3
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	e5fe      	b.n	8002930 <__aeabi_dsub+0x314>
 8002d32:	2300      	movs	r3, #0
 8002d34:	4a01      	ldr	r2, [pc, #4]	; (8002d3c <__aeabi_dsub+0x720>)
 8002d36:	001c      	movs	r4, r3
 8002d38:	e513      	b.n	8002762 <__aeabi_dsub+0x146>
 8002d3a:	46c0      	nop			; (mov r8, r8)
 8002d3c:	000007ff 	.word	0x000007ff

08002d40 <__aeabi_dcmpun>:
 8002d40:	b570      	push	{r4, r5, r6, lr}
 8002d42:	0005      	movs	r5, r0
 8002d44:	480c      	ldr	r0, [pc, #48]	; (8002d78 <__aeabi_dcmpun+0x38>)
 8002d46:	031c      	lsls	r4, r3, #12
 8002d48:	0016      	movs	r6, r2
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	030a      	lsls	r2, r1, #12
 8002d4e:	0049      	lsls	r1, r1, #1
 8002d50:	0b12      	lsrs	r2, r2, #12
 8002d52:	0d49      	lsrs	r1, r1, #21
 8002d54:	0b24      	lsrs	r4, r4, #12
 8002d56:	0d5b      	lsrs	r3, r3, #21
 8002d58:	4281      	cmp	r1, r0
 8002d5a:	d008      	beq.n	8002d6e <__aeabi_dcmpun+0x2e>
 8002d5c:	4a06      	ldr	r2, [pc, #24]	; (8002d78 <__aeabi_dcmpun+0x38>)
 8002d5e:	2000      	movs	r0, #0
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d103      	bne.n	8002d6c <__aeabi_dcmpun+0x2c>
 8002d64:	0020      	movs	r0, r4
 8002d66:	4330      	orrs	r0, r6
 8002d68:	1e43      	subs	r3, r0, #1
 8002d6a:	4198      	sbcs	r0, r3
 8002d6c:	bd70      	pop	{r4, r5, r6, pc}
 8002d6e:	2001      	movs	r0, #1
 8002d70:	432a      	orrs	r2, r5
 8002d72:	d1fb      	bne.n	8002d6c <__aeabi_dcmpun+0x2c>
 8002d74:	e7f2      	b.n	8002d5c <__aeabi_dcmpun+0x1c>
 8002d76:	46c0      	nop			; (mov r8, r8)
 8002d78:	000007ff 	.word	0x000007ff

08002d7c <__aeabi_d2iz>:
 8002d7c:	000a      	movs	r2, r1
 8002d7e:	b530      	push	{r4, r5, lr}
 8002d80:	4c13      	ldr	r4, [pc, #76]	; (8002dd0 <__aeabi_d2iz+0x54>)
 8002d82:	0053      	lsls	r3, r2, #1
 8002d84:	0309      	lsls	r1, r1, #12
 8002d86:	0005      	movs	r5, r0
 8002d88:	0b09      	lsrs	r1, r1, #12
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	0d5b      	lsrs	r3, r3, #21
 8002d8e:	0fd2      	lsrs	r2, r2, #31
 8002d90:	42a3      	cmp	r3, r4
 8002d92:	dd04      	ble.n	8002d9e <__aeabi_d2iz+0x22>
 8002d94:	480f      	ldr	r0, [pc, #60]	; (8002dd4 <__aeabi_d2iz+0x58>)
 8002d96:	4283      	cmp	r3, r0
 8002d98:	dd02      	ble.n	8002da0 <__aeabi_d2iz+0x24>
 8002d9a:	4b0f      	ldr	r3, [pc, #60]	; (8002dd8 <__aeabi_d2iz+0x5c>)
 8002d9c:	18d0      	adds	r0, r2, r3
 8002d9e:	bd30      	pop	{r4, r5, pc}
 8002da0:	2080      	movs	r0, #128	; 0x80
 8002da2:	0340      	lsls	r0, r0, #13
 8002da4:	4301      	orrs	r1, r0
 8002da6:	480d      	ldr	r0, [pc, #52]	; (8002ddc <__aeabi_d2iz+0x60>)
 8002da8:	1ac0      	subs	r0, r0, r3
 8002daa:	281f      	cmp	r0, #31
 8002dac:	dd08      	ble.n	8002dc0 <__aeabi_d2iz+0x44>
 8002dae:	480c      	ldr	r0, [pc, #48]	; (8002de0 <__aeabi_d2iz+0x64>)
 8002db0:	1ac3      	subs	r3, r0, r3
 8002db2:	40d9      	lsrs	r1, r3
 8002db4:	000b      	movs	r3, r1
 8002db6:	4258      	negs	r0, r3
 8002db8:	2a00      	cmp	r2, #0
 8002dba:	d1f0      	bne.n	8002d9e <__aeabi_d2iz+0x22>
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	e7ee      	b.n	8002d9e <__aeabi_d2iz+0x22>
 8002dc0:	4c08      	ldr	r4, [pc, #32]	; (8002de4 <__aeabi_d2iz+0x68>)
 8002dc2:	40c5      	lsrs	r5, r0
 8002dc4:	46a4      	mov	ip, r4
 8002dc6:	4463      	add	r3, ip
 8002dc8:	4099      	lsls	r1, r3
 8002dca:	000b      	movs	r3, r1
 8002dcc:	432b      	orrs	r3, r5
 8002dce:	e7f2      	b.n	8002db6 <__aeabi_d2iz+0x3a>
 8002dd0:	000003fe 	.word	0x000003fe
 8002dd4:	0000041d 	.word	0x0000041d
 8002dd8:	7fffffff 	.word	0x7fffffff
 8002ddc:	00000433 	.word	0x00000433
 8002de0:	00000413 	.word	0x00000413
 8002de4:	fffffbed 	.word	0xfffffbed

08002de8 <__aeabi_i2d>:
 8002de8:	b570      	push	{r4, r5, r6, lr}
 8002dea:	2800      	cmp	r0, #0
 8002dec:	d016      	beq.n	8002e1c <__aeabi_i2d+0x34>
 8002dee:	17c3      	asrs	r3, r0, #31
 8002df0:	18c5      	adds	r5, r0, r3
 8002df2:	405d      	eors	r5, r3
 8002df4:	0fc4      	lsrs	r4, r0, #31
 8002df6:	0028      	movs	r0, r5
 8002df8:	f000 f91c 	bl	8003034 <__clzsi2>
 8002dfc:	4a11      	ldr	r2, [pc, #68]	; (8002e44 <__aeabi_i2d+0x5c>)
 8002dfe:	1a12      	subs	r2, r2, r0
 8002e00:	280a      	cmp	r0, #10
 8002e02:	dc16      	bgt.n	8002e32 <__aeabi_i2d+0x4a>
 8002e04:	0003      	movs	r3, r0
 8002e06:	002e      	movs	r6, r5
 8002e08:	3315      	adds	r3, #21
 8002e0a:	409e      	lsls	r6, r3
 8002e0c:	230b      	movs	r3, #11
 8002e0e:	1a18      	subs	r0, r3, r0
 8002e10:	40c5      	lsrs	r5, r0
 8002e12:	0552      	lsls	r2, r2, #21
 8002e14:	032d      	lsls	r5, r5, #12
 8002e16:	0b2d      	lsrs	r5, r5, #12
 8002e18:	0d53      	lsrs	r3, r2, #21
 8002e1a:	e003      	b.n	8002e24 <__aeabi_i2d+0x3c>
 8002e1c:	2400      	movs	r4, #0
 8002e1e:	2300      	movs	r3, #0
 8002e20:	2500      	movs	r5, #0
 8002e22:	2600      	movs	r6, #0
 8002e24:	051b      	lsls	r3, r3, #20
 8002e26:	432b      	orrs	r3, r5
 8002e28:	07e4      	lsls	r4, r4, #31
 8002e2a:	4323      	orrs	r3, r4
 8002e2c:	0030      	movs	r0, r6
 8002e2e:	0019      	movs	r1, r3
 8002e30:	bd70      	pop	{r4, r5, r6, pc}
 8002e32:	380b      	subs	r0, #11
 8002e34:	4085      	lsls	r5, r0
 8002e36:	0552      	lsls	r2, r2, #21
 8002e38:	032d      	lsls	r5, r5, #12
 8002e3a:	2600      	movs	r6, #0
 8002e3c:	0b2d      	lsrs	r5, r5, #12
 8002e3e:	0d53      	lsrs	r3, r2, #21
 8002e40:	e7f0      	b.n	8002e24 <__aeabi_i2d+0x3c>
 8002e42:	46c0      	nop			; (mov r8, r8)
 8002e44:	0000041e 	.word	0x0000041e

08002e48 <__aeabi_ui2d>:
 8002e48:	b510      	push	{r4, lr}
 8002e4a:	1e04      	subs	r4, r0, #0
 8002e4c:	d010      	beq.n	8002e70 <__aeabi_ui2d+0x28>
 8002e4e:	f000 f8f1 	bl	8003034 <__clzsi2>
 8002e52:	4b0f      	ldr	r3, [pc, #60]	; (8002e90 <__aeabi_ui2d+0x48>)
 8002e54:	1a1b      	subs	r3, r3, r0
 8002e56:	280a      	cmp	r0, #10
 8002e58:	dc11      	bgt.n	8002e7e <__aeabi_ui2d+0x36>
 8002e5a:	220b      	movs	r2, #11
 8002e5c:	0021      	movs	r1, r4
 8002e5e:	1a12      	subs	r2, r2, r0
 8002e60:	40d1      	lsrs	r1, r2
 8002e62:	3015      	adds	r0, #21
 8002e64:	030a      	lsls	r2, r1, #12
 8002e66:	055b      	lsls	r3, r3, #21
 8002e68:	4084      	lsls	r4, r0
 8002e6a:	0b12      	lsrs	r2, r2, #12
 8002e6c:	0d5b      	lsrs	r3, r3, #21
 8002e6e:	e001      	b.n	8002e74 <__aeabi_ui2d+0x2c>
 8002e70:	2300      	movs	r3, #0
 8002e72:	2200      	movs	r2, #0
 8002e74:	051b      	lsls	r3, r3, #20
 8002e76:	4313      	orrs	r3, r2
 8002e78:	0020      	movs	r0, r4
 8002e7a:	0019      	movs	r1, r3
 8002e7c:	bd10      	pop	{r4, pc}
 8002e7e:	0022      	movs	r2, r4
 8002e80:	380b      	subs	r0, #11
 8002e82:	4082      	lsls	r2, r0
 8002e84:	055b      	lsls	r3, r3, #21
 8002e86:	0312      	lsls	r2, r2, #12
 8002e88:	2400      	movs	r4, #0
 8002e8a:	0b12      	lsrs	r2, r2, #12
 8002e8c:	0d5b      	lsrs	r3, r3, #21
 8002e8e:	e7f1      	b.n	8002e74 <__aeabi_ui2d+0x2c>
 8002e90:	0000041e 	.word	0x0000041e

08002e94 <__aeabi_f2d>:
 8002e94:	b570      	push	{r4, r5, r6, lr}
 8002e96:	0043      	lsls	r3, r0, #1
 8002e98:	0246      	lsls	r6, r0, #9
 8002e9a:	0fc4      	lsrs	r4, r0, #31
 8002e9c:	20fe      	movs	r0, #254	; 0xfe
 8002e9e:	0e1b      	lsrs	r3, r3, #24
 8002ea0:	1c59      	adds	r1, r3, #1
 8002ea2:	0a75      	lsrs	r5, r6, #9
 8002ea4:	4208      	tst	r0, r1
 8002ea6:	d00c      	beq.n	8002ec2 <__aeabi_f2d+0x2e>
 8002ea8:	22e0      	movs	r2, #224	; 0xe0
 8002eaa:	0092      	lsls	r2, r2, #2
 8002eac:	4694      	mov	ip, r2
 8002eae:	076d      	lsls	r5, r5, #29
 8002eb0:	0b36      	lsrs	r6, r6, #12
 8002eb2:	4463      	add	r3, ip
 8002eb4:	051b      	lsls	r3, r3, #20
 8002eb6:	4333      	orrs	r3, r6
 8002eb8:	07e4      	lsls	r4, r4, #31
 8002eba:	4323      	orrs	r3, r4
 8002ebc:	0028      	movs	r0, r5
 8002ebe:	0019      	movs	r1, r3
 8002ec0:	bd70      	pop	{r4, r5, r6, pc}
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d114      	bne.n	8002ef0 <__aeabi_f2d+0x5c>
 8002ec6:	2d00      	cmp	r5, #0
 8002ec8:	d01b      	beq.n	8002f02 <__aeabi_f2d+0x6e>
 8002eca:	0028      	movs	r0, r5
 8002ecc:	f000 f8b2 	bl	8003034 <__clzsi2>
 8002ed0:	280a      	cmp	r0, #10
 8002ed2:	dc1c      	bgt.n	8002f0e <__aeabi_f2d+0x7a>
 8002ed4:	230b      	movs	r3, #11
 8002ed6:	002e      	movs	r6, r5
 8002ed8:	1a1b      	subs	r3, r3, r0
 8002eda:	40de      	lsrs	r6, r3
 8002edc:	0003      	movs	r3, r0
 8002ede:	3315      	adds	r3, #21
 8002ee0:	409d      	lsls	r5, r3
 8002ee2:	4a0e      	ldr	r2, [pc, #56]	; (8002f1c <__aeabi_f2d+0x88>)
 8002ee4:	0336      	lsls	r6, r6, #12
 8002ee6:	1a12      	subs	r2, r2, r0
 8002ee8:	0552      	lsls	r2, r2, #21
 8002eea:	0b36      	lsrs	r6, r6, #12
 8002eec:	0d53      	lsrs	r3, r2, #21
 8002eee:	e7e1      	b.n	8002eb4 <__aeabi_f2d+0x20>
 8002ef0:	2d00      	cmp	r5, #0
 8002ef2:	d009      	beq.n	8002f08 <__aeabi_f2d+0x74>
 8002ef4:	2280      	movs	r2, #128	; 0x80
 8002ef6:	0b36      	lsrs	r6, r6, #12
 8002ef8:	0312      	lsls	r2, r2, #12
 8002efa:	4b09      	ldr	r3, [pc, #36]	; (8002f20 <__aeabi_f2d+0x8c>)
 8002efc:	076d      	lsls	r5, r5, #29
 8002efe:	4316      	orrs	r6, r2
 8002f00:	e7d8      	b.n	8002eb4 <__aeabi_f2d+0x20>
 8002f02:	2300      	movs	r3, #0
 8002f04:	2600      	movs	r6, #0
 8002f06:	e7d5      	b.n	8002eb4 <__aeabi_f2d+0x20>
 8002f08:	2600      	movs	r6, #0
 8002f0a:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <__aeabi_f2d+0x8c>)
 8002f0c:	e7d2      	b.n	8002eb4 <__aeabi_f2d+0x20>
 8002f0e:	0003      	movs	r3, r0
 8002f10:	3b0b      	subs	r3, #11
 8002f12:	409d      	lsls	r5, r3
 8002f14:	002e      	movs	r6, r5
 8002f16:	2500      	movs	r5, #0
 8002f18:	e7e3      	b.n	8002ee2 <__aeabi_f2d+0x4e>
 8002f1a:	46c0      	nop			; (mov r8, r8)
 8002f1c:	00000389 	.word	0x00000389
 8002f20:	000007ff 	.word	0x000007ff

08002f24 <__aeabi_d2f>:
 8002f24:	0002      	movs	r2, r0
 8002f26:	004b      	lsls	r3, r1, #1
 8002f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f2a:	0d5b      	lsrs	r3, r3, #21
 8002f2c:	030c      	lsls	r4, r1, #12
 8002f2e:	4e3d      	ldr	r6, [pc, #244]	; (8003024 <__aeabi_d2f+0x100>)
 8002f30:	0a64      	lsrs	r4, r4, #9
 8002f32:	0f40      	lsrs	r0, r0, #29
 8002f34:	1c5f      	adds	r7, r3, #1
 8002f36:	0fc9      	lsrs	r1, r1, #31
 8002f38:	4304      	orrs	r4, r0
 8002f3a:	00d5      	lsls	r5, r2, #3
 8002f3c:	4237      	tst	r7, r6
 8002f3e:	d00a      	beq.n	8002f56 <__aeabi_d2f+0x32>
 8002f40:	4839      	ldr	r0, [pc, #228]	; (8003028 <__aeabi_d2f+0x104>)
 8002f42:	181e      	adds	r6, r3, r0
 8002f44:	2efe      	cmp	r6, #254	; 0xfe
 8002f46:	dd16      	ble.n	8002f76 <__aeabi_d2f+0x52>
 8002f48:	20ff      	movs	r0, #255	; 0xff
 8002f4a:	2400      	movs	r4, #0
 8002f4c:	05c0      	lsls	r0, r0, #23
 8002f4e:	4320      	orrs	r0, r4
 8002f50:	07c9      	lsls	r1, r1, #31
 8002f52:	4308      	orrs	r0, r1
 8002f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d106      	bne.n	8002f68 <__aeabi_d2f+0x44>
 8002f5a:	432c      	orrs	r4, r5
 8002f5c:	d026      	beq.n	8002fac <__aeabi_d2f+0x88>
 8002f5e:	2205      	movs	r2, #5
 8002f60:	0192      	lsls	r2, r2, #6
 8002f62:	0a54      	lsrs	r4, r2, #9
 8002f64:	b2d8      	uxtb	r0, r3
 8002f66:	e7f1      	b.n	8002f4c <__aeabi_d2f+0x28>
 8002f68:	4325      	orrs	r5, r4
 8002f6a:	d0ed      	beq.n	8002f48 <__aeabi_d2f+0x24>
 8002f6c:	2080      	movs	r0, #128	; 0x80
 8002f6e:	03c0      	lsls	r0, r0, #15
 8002f70:	4304      	orrs	r4, r0
 8002f72:	20ff      	movs	r0, #255	; 0xff
 8002f74:	e7ea      	b.n	8002f4c <__aeabi_d2f+0x28>
 8002f76:	2e00      	cmp	r6, #0
 8002f78:	dd1b      	ble.n	8002fb2 <__aeabi_d2f+0x8e>
 8002f7a:	0192      	lsls	r2, r2, #6
 8002f7c:	1e53      	subs	r3, r2, #1
 8002f7e:	419a      	sbcs	r2, r3
 8002f80:	00e4      	lsls	r4, r4, #3
 8002f82:	0f6d      	lsrs	r5, r5, #29
 8002f84:	4322      	orrs	r2, r4
 8002f86:	432a      	orrs	r2, r5
 8002f88:	0753      	lsls	r3, r2, #29
 8002f8a:	d048      	beq.n	800301e <__aeabi_d2f+0xfa>
 8002f8c:	230f      	movs	r3, #15
 8002f8e:	4013      	ands	r3, r2
 8002f90:	2b04      	cmp	r3, #4
 8002f92:	d000      	beq.n	8002f96 <__aeabi_d2f+0x72>
 8002f94:	3204      	adds	r2, #4
 8002f96:	2380      	movs	r3, #128	; 0x80
 8002f98:	04db      	lsls	r3, r3, #19
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	d03f      	beq.n	800301e <__aeabi_d2f+0xfa>
 8002f9e:	1c70      	adds	r0, r6, #1
 8002fa0:	2efe      	cmp	r6, #254	; 0xfe
 8002fa2:	d0d1      	beq.n	8002f48 <__aeabi_d2f+0x24>
 8002fa4:	0192      	lsls	r2, r2, #6
 8002fa6:	0a54      	lsrs	r4, r2, #9
 8002fa8:	b2c0      	uxtb	r0, r0
 8002faa:	e7cf      	b.n	8002f4c <__aeabi_d2f+0x28>
 8002fac:	2000      	movs	r0, #0
 8002fae:	2400      	movs	r4, #0
 8002fb0:	e7cc      	b.n	8002f4c <__aeabi_d2f+0x28>
 8002fb2:	0032      	movs	r2, r6
 8002fb4:	3217      	adds	r2, #23
 8002fb6:	db22      	blt.n	8002ffe <__aeabi_d2f+0xda>
 8002fb8:	2080      	movs	r0, #128	; 0x80
 8002fba:	0400      	lsls	r0, r0, #16
 8002fbc:	4320      	orrs	r0, r4
 8002fbe:	241e      	movs	r4, #30
 8002fc0:	1ba4      	subs	r4, r4, r6
 8002fc2:	2c1f      	cmp	r4, #31
 8002fc4:	dd1d      	ble.n	8003002 <__aeabi_d2f+0xde>
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	4252      	negs	r2, r2
 8002fca:	1b96      	subs	r6, r2, r6
 8002fcc:	0002      	movs	r2, r0
 8002fce:	40f2      	lsrs	r2, r6
 8002fd0:	0016      	movs	r6, r2
 8002fd2:	2c20      	cmp	r4, #32
 8002fd4:	d004      	beq.n	8002fe0 <__aeabi_d2f+0xbc>
 8002fd6:	4a15      	ldr	r2, [pc, #84]	; (800302c <__aeabi_d2f+0x108>)
 8002fd8:	4694      	mov	ip, r2
 8002fda:	4463      	add	r3, ip
 8002fdc:	4098      	lsls	r0, r3
 8002fde:	4305      	orrs	r5, r0
 8002fe0:	002a      	movs	r2, r5
 8002fe2:	1e53      	subs	r3, r2, #1
 8002fe4:	419a      	sbcs	r2, r3
 8002fe6:	4332      	orrs	r2, r6
 8002fe8:	2600      	movs	r6, #0
 8002fea:	0753      	lsls	r3, r2, #29
 8002fec:	d1ce      	bne.n	8002f8c <__aeabi_d2f+0x68>
 8002fee:	2480      	movs	r4, #128	; 0x80
 8002ff0:	0013      	movs	r3, r2
 8002ff2:	04e4      	lsls	r4, r4, #19
 8002ff4:	2001      	movs	r0, #1
 8002ff6:	4023      	ands	r3, r4
 8002ff8:	4222      	tst	r2, r4
 8002ffa:	d1d3      	bne.n	8002fa4 <__aeabi_d2f+0x80>
 8002ffc:	e7b0      	b.n	8002f60 <__aeabi_d2f+0x3c>
 8002ffe:	2300      	movs	r3, #0
 8003000:	e7ad      	b.n	8002f5e <__aeabi_d2f+0x3a>
 8003002:	4a0b      	ldr	r2, [pc, #44]	; (8003030 <__aeabi_d2f+0x10c>)
 8003004:	4694      	mov	ip, r2
 8003006:	002a      	movs	r2, r5
 8003008:	40e2      	lsrs	r2, r4
 800300a:	0014      	movs	r4, r2
 800300c:	002a      	movs	r2, r5
 800300e:	4463      	add	r3, ip
 8003010:	409a      	lsls	r2, r3
 8003012:	4098      	lsls	r0, r3
 8003014:	1e55      	subs	r5, r2, #1
 8003016:	41aa      	sbcs	r2, r5
 8003018:	4302      	orrs	r2, r0
 800301a:	4322      	orrs	r2, r4
 800301c:	e7e4      	b.n	8002fe8 <__aeabi_d2f+0xc4>
 800301e:	0033      	movs	r3, r6
 8003020:	e79e      	b.n	8002f60 <__aeabi_d2f+0x3c>
 8003022:	46c0      	nop			; (mov r8, r8)
 8003024:	000007fe 	.word	0x000007fe
 8003028:	fffffc80 	.word	0xfffffc80
 800302c:	fffffca2 	.word	0xfffffca2
 8003030:	fffffc82 	.word	0xfffffc82

08003034 <__clzsi2>:
 8003034:	211c      	movs	r1, #28
 8003036:	2301      	movs	r3, #1
 8003038:	041b      	lsls	r3, r3, #16
 800303a:	4298      	cmp	r0, r3
 800303c:	d301      	bcc.n	8003042 <__clzsi2+0xe>
 800303e:	0c00      	lsrs	r0, r0, #16
 8003040:	3910      	subs	r1, #16
 8003042:	0a1b      	lsrs	r3, r3, #8
 8003044:	4298      	cmp	r0, r3
 8003046:	d301      	bcc.n	800304c <__clzsi2+0x18>
 8003048:	0a00      	lsrs	r0, r0, #8
 800304a:	3908      	subs	r1, #8
 800304c:	091b      	lsrs	r3, r3, #4
 800304e:	4298      	cmp	r0, r3
 8003050:	d301      	bcc.n	8003056 <__clzsi2+0x22>
 8003052:	0900      	lsrs	r0, r0, #4
 8003054:	3904      	subs	r1, #4
 8003056:	a202      	add	r2, pc, #8	; (adr r2, 8003060 <__clzsi2+0x2c>)
 8003058:	5c10      	ldrb	r0, [r2, r0]
 800305a:	1840      	adds	r0, r0, r1
 800305c:	4770      	bx	lr
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	02020304 	.word	0x02020304
 8003064:	01010101 	.word	0x01010101
	...

08003070 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003074:	f001 f980 	bl	8004378 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003078:	f000 f81f 	bl	80030ba <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800307c:	f000 fc04 	bl	8003888 <MX_GPIO_Init>
  MX_DMA_Init();
 8003080:	f000 fbe4 	bl	800384c <MX_DMA_Init>
  MX_ADC_Init();
 8003084:	f000 f862 	bl	800314c <MX_ADC_Init>
  MX_DAC_Init();
 8003088:	f000 f90a 	bl	80032a0 <MX_DAC_Init>
  MX_I2C2_Init();
 800308c:	f000 f936 	bl	80032fc <MX_I2C2_Init>
  MX_SPI1_Init();
 8003090:	f000 f974 	bl	800337c <MX_SPI1_Init>
  MX_TIM1_Init();
 8003094:	f000 f9b0 	bl	80033f8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8003098:	f000 fa06 	bl	80034a8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800309c:	f000 fa5a 	bl	8003554 <MX_TIM3_Init>
  MX_TIM6_Init();
 80030a0:	f000 fad6 	bl	8003650 <MX_TIM6_Init>
  MX_TIM7_Init();
 80030a4:	f000 fb12 	bl	80036cc <MX_TIM7_Init>
  MX_TIM14_Init();
 80030a8:	f000 fb4e 	bl	8003748 <MX_TIM14_Init>
  MX_TIM15_Init();
 80030ac:	f000 fb74 	bl	8003798 <MX_TIM15_Init>

  /* USER CODE BEGIN 2 */
  SP100_CCU_Init();
 80030b0:	f005 fda1 	bl	8008bf6 <SP100_CCU_Init>
  SP100_CCU_Infinite_Loop();
 80030b4:	f005 fe8c 	bl	8008dd0 <SP100_CCU_Infinite_Loop>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80030b8:	e7fe      	b.n	80030b8 <main+0x48>

080030ba <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80030ba:	b590      	push	{r4, r7, lr}
 80030bc:	b093      	sub	sp, #76	; 0x4c
 80030be:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030c0:	2414      	movs	r4, #20
 80030c2:	193b      	adds	r3, r7, r4
 80030c4:	0018      	movs	r0, r3
 80030c6:	2334      	movs	r3, #52	; 0x34
 80030c8:	001a      	movs	r2, r3
 80030ca:	2100      	movs	r1, #0
 80030cc:	f00d ffce 	bl	801106c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030d0:	1d3b      	adds	r3, r7, #4
 80030d2:	0018      	movs	r0, r3
 80030d4:	2310      	movs	r3, #16
 80030d6:	001a      	movs	r2, r3
 80030d8:	2100      	movs	r1, #0
 80030da:	f00d ffc7 	bl	801106c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80030de:	0021      	movs	r1, r4
 80030e0:	187b      	adds	r3, r7, r1
 80030e2:	2201      	movs	r2, #1
 80030e4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80030e6:	187b      	adds	r3, r7, r1
 80030e8:	2201      	movs	r2, #1
 80030ea:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030ec:	187b      	adds	r3, r7, r1
 80030ee:	2202      	movs	r2, #2
 80030f0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030f2:	187b      	adds	r3, r7, r1
 80030f4:	2280      	movs	r2, #128	; 0x80
 80030f6:	0252      	lsls	r2, r2, #9
 80030f8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 80030fa:	187b      	adds	r3, r7, r1
 80030fc:	2280      	movs	r2, #128	; 0x80
 80030fe:	02d2      	lsls	r2, r2, #11
 8003100:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8003102:	187b      	adds	r3, r7, r1
 8003104:	2200      	movs	r2, #0
 8003106:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003108:	187b      	adds	r3, r7, r1
 800310a:	0018      	movs	r0, r3
 800310c:	f003 fb38 	bl	8006780 <HAL_RCC_OscConfig>
 8003110:	1e03      	subs	r3, r0, #0
 8003112:	d001      	beq.n	8003118 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8003114:	f000 fd02 	bl	8003b1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003118:	1d3b      	adds	r3, r7, #4
 800311a:	2207      	movs	r2, #7
 800311c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800311e:	1d3b      	adds	r3, r7, #4
 8003120:	2202      	movs	r2, #2
 8003122:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003124:	1d3b      	adds	r3, r7, #4
 8003126:	2200      	movs	r2, #0
 8003128:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800312a:	1d3b      	adds	r3, r7, #4
 800312c:	2200      	movs	r2, #0
 800312e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003130:	1d3b      	adds	r3, r7, #4
 8003132:	2100      	movs	r1, #0
 8003134:	0018      	movs	r0, r3
 8003136:	f003 fea9 	bl	8006e8c <HAL_RCC_ClockConfig>
 800313a:	1e03      	subs	r3, r0, #0
 800313c:	d001      	beq.n	8003142 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800313e:	f000 fced 	bl	8003b1c <Error_Handler>
  }
}
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	46bd      	mov	sp, r7
 8003146:	b013      	add	sp, #76	; 0x4c
 8003148:	bd90      	pop	{r4, r7, pc}
	...

0800314c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003152:	1d3b      	adds	r3, r7, #4
 8003154:	0018      	movs	r0, r3
 8003156:	230c      	movs	r3, #12
 8003158:	001a      	movs	r2, r3
 800315a:	2100      	movs	r1, #0
 800315c:	f00d ff86 	bl	801106c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8003160:	4b4d      	ldr	r3, [pc, #308]	; (8003298 <MX_ADC_Init+0x14c>)
 8003162:	4a4e      	ldr	r2, [pc, #312]	; (800329c <MX_ADC_Init+0x150>)
 8003164:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003166:	4b4c      	ldr	r3, [pc, #304]	; (8003298 <MX_ADC_Init+0x14c>)
 8003168:	2280      	movs	r2, #128	; 0x80
 800316a:	0612      	lsls	r2, r2, #24
 800316c:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800316e:	4b4a      	ldr	r3, [pc, #296]	; (8003298 <MX_ADC_Init+0x14c>)
 8003170:	2200      	movs	r2, #0
 8003172:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003174:	4b48      	ldr	r3, [pc, #288]	; (8003298 <MX_ADC_Init+0x14c>)
 8003176:	2200      	movs	r2, #0
 8003178:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800317a:	4b47      	ldr	r3, [pc, #284]	; (8003298 <MX_ADC_Init+0x14c>)
 800317c:	2201      	movs	r2, #1
 800317e:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003180:	4b45      	ldr	r3, [pc, #276]	; (8003298 <MX_ADC_Init+0x14c>)
 8003182:	2204      	movs	r2, #4
 8003184:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003186:	4b44      	ldr	r3, [pc, #272]	; (8003298 <MX_ADC_Init+0x14c>)
 8003188:	2200      	movs	r2, #0
 800318a:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800318c:	4b42      	ldr	r3, [pc, #264]	; (8003298 <MX_ADC_Init+0x14c>)
 800318e:	2200      	movs	r2, #0
 8003190:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8003192:	4b41      	ldr	r3, [pc, #260]	; (8003298 <MX_ADC_Init+0x14c>)
 8003194:	2200      	movs	r2, #0
 8003196:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8003198:	4b3f      	ldr	r3, [pc, #252]	; (8003298 <MX_ADC_Init+0x14c>)
 800319a:	2200      	movs	r2, #0
 800319c:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_TRGO;
 800319e:	4b3e      	ldr	r3, [pc, #248]	; (8003298 <MX_ADC_Init+0x14c>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80031a4:	4b3c      	ldr	r3, [pc, #240]	; (8003298 <MX_ADC_Init+0x14c>)
 80031a6:	2280      	movs	r2, #128	; 0x80
 80031a8:	00d2      	lsls	r2, r2, #3
 80031aa:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80031ac:	4b3a      	ldr	r3, [pc, #232]	; (8003298 <MX_ADC_Init+0x14c>)
 80031ae:	2224      	movs	r2, #36	; 0x24
 80031b0:	2101      	movs	r1, #1
 80031b2:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80031b4:	4b38      	ldr	r3, [pc, #224]	; (8003298 <MX_ADC_Init+0x14c>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80031ba:	4b37      	ldr	r3, [pc, #220]	; (8003298 <MX_ADC_Init+0x14c>)
 80031bc:	0018      	movs	r0, r3
 80031be:	f001 f93f 	bl	8004440 <HAL_ADC_Init>
 80031c2:	1e03      	subs	r3, r0, #0
 80031c4:	d001      	beq.n	80031ca <MX_ADC_Init+0x7e>
  {
    Error_Handler();
 80031c6:	f000 fca9 	bl	8003b1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80031ca:	1d3b      	adds	r3, r7, #4
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80031d0:	1d3b      	adds	r3, r7, #4
 80031d2:	2280      	movs	r2, #128	; 0x80
 80031d4:	0152      	lsls	r2, r2, #5
 80031d6:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80031d8:	1d3b      	adds	r3, r7, #4
 80031da:	2207      	movs	r2, #7
 80031dc:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80031de:	1d3a      	adds	r2, r7, #4
 80031e0:	4b2d      	ldr	r3, [pc, #180]	; (8003298 <MX_ADC_Init+0x14c>)
 80031e2:	0011      	movs	r1, r2
 80031e4:	0018      	movs	r0, r3
 80031e6:	f001 fc33 	bl	8004a50 <HAL_ADC_ConfigChannel>
 80031ea:	1e03      	subs	r3, r0, #0
 80031ec:	d001      	beq.n	80031f2 <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80031ee:	f000 fc95 	bl	8003b1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80031f2:	1d3b      	adds	r3, r7, #4
 80031f4:	2201      	movs	r2, #1
 80031f6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80031f8:	1d3a      	adds	r2, r7, #4
 80031fa:	4b27      	ldr	r3, [pc, #156]	; (8003298 <MX_ADC_Init+0x14c>)
 80031fc:	0011      	movs	r1, r2
 80031fe:	0018      	movs	r0, r3
 8003200:	f001 fc26 	bl	8004a50 <HAL_ADC_ConfigChannel>
 8003204:	1e03      	subs	r3, r0, #0
 8003206:	d001      	beq.n	800320c <MX_ADC_Init+0xc0>
  {
    Error_Handler();
 8003208:	f000 fc88 	bl	8003b1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800320c:	1d3b      	adds	r3, r7, #4
 800320e:	2202      	movs	r2, #2
 8003210:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003212:	1d3a      	adds	r2, r7, #4
 8003214:	4b20      	ldr	r3, [pc, #128]	; (8003298 <MX_ADC_Init+0x14c>)
 8003216:	0011      	movs	r1, r2
 8003218:	0018      	movs	r0, r3
 800321a:	f001 fc19 	bl	8004a50 <HAL_ADC_ConfigChannel>
 800321e:	1e03      	subs	r3, r0, #0
 8003220:	d001      	beq.n	8003226 <MX_ADC_Init+0xda>
  {
    Error_Handler();
 8003222:	f000 fc7b 	bl	8003b1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003226:	1d3b      	adds	r3, r7, #4
 8003228:	2203      	movs	r2, #3
 800322a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800322c:	1d3a      	adds	r2, r7, #4
 800322e:	4b1a      	ldr	r3, [pc, #104]	; (8003298 <MX_ADC_Init+0x14c>)
 8003230:	0011      	movs	r1, r2
 8003232:	0018      	movs	r0, r3
 8003234:	f001 fc0c 	bl	8004a50 <HAL_ADC_ConfigChannel>
 8003238:	1e03      	subs	r3, r0, #0
 800323a:	d001      	beq.n	8003240 <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 800323c:	f000 fc6e 	bl	8003b1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003240:	1d3b      	adds	r3, r7, #4
 8003242:	2205      	movs	r2, #5
 8003244:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003246:	1d3a      	adds	r2, r7, #4
 8003248:	4b13      	ldr	r3, [pc, #76]	; (8003298 <MX_ADC_Init+0x14c>)
 800324a:	0011      	movs	r1, r2
 800324c:	0018      	movs	r0, r3
 800324e:	f001 fbff 	bl	8004a50 <HAL_ADC_ConfigChannel>
 8003252:	1e03      	subs	r3, r0, #0
 8003254:	d001      	beq.n	800325a <MX_ADC_Init+0x10e>
  {
    Error_Handler();
 8003256:	f000 fc61 	bl	8003b1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800325a:	1d3b      	adds	r3, r7, #4
 800325c:	2206      	movs	r2, #6
 800325e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003260:	1d3a      	adds	r2, r7, #4
 8003262:	4b0d      	ldr	r3, [pc, #52]	; (8003298 <MX_ADC_Init+0x14c>)
 8003264:	0011      	movs	r1, r2
 8003266:	0018      	movs	r0, r3
 8003268:	f001 fbf2 	bl	8004a50 <HAL_ADC_ConfigChannel>
 800326c:	1e03      	subs	r3, r0, #0
 800326e:	d001      	beq.n	8003274 <MX_ADC_Init+0x128>
  {
    Error_Handler();
 8003270:	f000 fc54 	bl	8003b1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003274:	1d3b      	adds	r3, r7, #4
 8003276:	2207      	movs	r2, #7
 8003278:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800327a:	1d3a      	adds	r2, r7, #4
 800327c:	4b06      	ldr	r3, [pc, #24]	; (8003298 <MX_ADC_Init+0x14c>)
 800327e:	0011      	movs	r1, r2
 8003280:	0018      	movs	r0, r3
 8003282:	f001 fbe5 	bl	8004a50 <HAL_ADC_ConfigChannel>
 8003286:	1e03      	subs	r3, r0, #0
 8003288:	d001      	beq.n	800328e <MX_ADC_Init+0x142>
  {
    Error_Handler();
 800328a:	f000 fc47 	bl	8003b1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800328e:	46c0      	nop			; (mov r8, r8)
 8003290:	46bd      	mov	sp, r7
 8003292:	b004      	add	sp, #16
 8003294:	bd80      	pop	{r7, pc}
 8003296:	46c0      	nop			; (mov r8, r8)
 8003298:	20000228 	.word	0x20000228
 800329c:	40012400 	.word	0x40012400

080032a0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80032a6:	003b      	movs	r3, r7
 80032a8:	0018      	movs	r0, r3
 80032aa:	2308      	movs	r3, #8
 80032ac:	001a      	movs	r2, r3
 80032ae:	2100      	movs	r1, #0
 80032b0:	f00d fedc 	bl	801106c <memset>

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80032b4:	4b0f      	ldr	r3, [pc, #60]	; (80032f4 <MX_DAC_Init+0x54>)
 80032b6:	4a10      	ldr	r2, [pc, #64]	; (80032f8 <MX_DAC_Init+0x58>)
 80032b8:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80032ba:	4b0e      	ldr	r3, [pc, #56]	; (80032f4 <MX_DAC_Init+0x54>)
 80032bc:	0018      	movs	r0, r3
 80032be:	f002 f837 	bl	8005330 <HAL_DAC_Init>
 80032c2:	1e03      	subs	r3, r0, #0
 80032c4:	d001      	beq.n	80032ca <MX_DAC_Init+0x2a>
  {
    Error_Handler();
 80032c6:	f000 fc29 	bl	8003b1c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80032ca:	003b      	movs	r3, r7
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80032d0:	003b      	movs	r3, r7
 80032d2:	2200      	movs	r2, #0
 80032d4:	605a      	str	r2, [r3, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80032d6:	0039      	movs	r1, r7
 80032d8:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <MX_DAC_Init+0x54>)
 80032da:	2200      	movs	r2, #0
 80032dc:	0018      	movs	r0, r3
 80032de:	f002 f875 	bl	80053cc <HAL_DAC_ConfigChannel>
 80032e2:	1e03      	subs	r3, r0, #0
 80032e4:	d001      	beq.n	80032ea <MX_DAC_Init+0x4a>
  {
    Error_Handler();
 80032e6:	f000 fc19 	bl	8003b1c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80032ea:	46c0      	nop			; (mov r8, r8)
 80032ec:	46bd      	mov	sp, r7
 80032ee:	b002      	add	sp, #8
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	46c0      	nop			; (mov r8, r8)
 80032f4:	200002ac 	.word	0x200002ac
 80032f8:	40007400 	.word	0x40007400

080032fc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003300:	4b1b      	ldr	r3, [pc, #108]	; (8003370 <MX_I2C2_Init+0x74>)
 8003302:	4a1c      	ldr	r2, [pc, #112]	; (8003374 <MX_I2C2_Init+0x78>)
 8003304:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00400B25;
 8003306:	4b1a      	ldr	r3, [pc, #104]	; (8003370 <MX_I2C2_Init+0x74>)
 8003308:	4a1b      	ldr	r2, [pc, #108]	; (8003378 <MX_I2C2_Init+0x7c>)
 800330a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800330c:	4b18      	ldr	r3, [pc, #96]	; (8003370 <MX_I2C2_Init+0x74>)
 800330e:	2200      	movs	r2, #0
 8003310:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003312:	4b17      	ldr	r3, [pc, #92]	; (8003370 <MX_I2C2_Init+0x74>)
 8003314:	2201      	movs	r2, #1
 8003316:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003318:	4b15      	ldr	r3, [pc, #84]	; (8003370 <MX_I2C2_Init+0x74>)
 800331a:	2200      	movs	r2, #0
 800331c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800331e:	4b14      	ldr	r3, [pc, #80]	; (8003370 <MX_I2C2_Init+0x74>)
 8003320:	2200      	movs	r2, #0
 8003322:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003324:	4b12      	ldr	r3, [pc, #72]	; (8003370 <MX_I2C2_Init+0x74>)
 8003326:	2200      	movs	r2, #0
 8003328:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800332a:	4b11      	ldr	r3, [pc, #68]	; (8003370 <MX_I2C2_Init+0x74>)
 800332c:	2200      	movs	r2, #0
 800332e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003330:	4b0f      	ldr	r3, [pc, #60]	; (8003370 <MX_I2C2_Init+0x74>)
 8003332:	2200      	movs	r2, #0
 8003334:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003336:	4b0e      	ldr	r3, [pc, #56]	; (8003370 <MX_I2C2_Init+0x74>)
 8003338:	0018      	movs	r0, r3
 800333a:	f002 fceb 	bl	8005d14 <HAL_I2C_Init>
 800333e:	1e03      	subs	r3, r0, #0
 8003340:	d001      	beq.n	8003346 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8003342:	f000 fbeb 	bl	8003b1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003346:	4b0a      	ldr	r3, [pc, #40]	; (8003370 <MX_I2C2_Init+0x74>)
 8003348:	2100      	movs	r1, #0
 800334a:	0018      	movs	r0, r3
 800334c:	f003 f980 	bl	8006650 <HAL_I2CEx_ConfigAnalogFilter>
 8003350:	1e03      	subs	r3, r0, #0
 8003352:	d001      	beq.n	8003358 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8003354:	f000 fbe2 	bl	8003b1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8003358:	4b05      	ldr	r3, [pc, #20]	; (8003370 <MX_I2C2_Init+0x74>)
 800335a:	2100      	movs	r1, #0
 800335c:	0018      	movs	r0, r3
 800335e:	f003 f9c3 	bl	80066e8 <HAL_I2CEx_ConfigDigitalFilter>
 8003362:	1e03      	subs	r3, r0, #0
 8003364:	d001      	beq.n	800336a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8003366:	f000 fbd9 	bl	8003b1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	200002c0 	.word	0x200002c0
 8003374:	40005800 	.word	0x40005800
 8003378:	00400b25 	.word	0x00400b25

0800337c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003380:	4b1b      	ldr	r3, [pc, #108]	; (80033f0 <MX_SPI1_Init+0x74>)
 8003382:	4a1c      	ldr	r2, [pc, #112]	; (80033f4 <MX_SPI1_Init+0x78>)
 8003384:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003386:	4b1a      	ldr	r3, [pc, #104]	; (80033f0 <MX_SPI1_Init+0x74>)
 8003388:	2282      	movs	r2, #130	; 0x82
 800338a:	0052      	lsls	r2, r2, #1
 800338c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800338e:	4b18      	ldr	r3, [pc, #96]	; (80033f0 <MX_SPI1_Init+0x74>)
 8003390:	2200      	movs	r2, #0
 8003392:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003394:	4b16      	ldr	r3, [pc, #88]	; (80033f0 <MX_SPI1_Init+0x74>)
 8003396:	22e0      	movs	r2, #224	; 0xe0
 8003398:	00d2      	lsls	r2, r2, #3
 800339a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800339c:	4b14      	ldr	r3, [pc, #80]	; (80033f0 <MX_SPI1_Init+0x74>)
 800339e:	2200      	movs	r2, #0
 80033a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80033a2:	4b13      	ldr	r3, [pc, #76]	; (80033f0 <MX_SPI1_Init+0x74>)
 80033a4:	2201      	movs	r2, #1
 80033a6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80033a8:	4b11      	ldr	r3, [pc, #68]	; (80033f0 <MX_SPI1_Init+0x74>)
 80033aa:	2280      	movs	r2, #128	; 0x80
 80033ac:	0092      	lsls	r2, r2, #2
 80033ae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80033b0:	4b0f      	ldr	r3, [pc, #60]	; (80033f0 <MX_SPI1_Init+0x74>)
 80033b2:	2210      	movs	r2, #16
 80033b4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80033b6:	4b0e      	ldr	r3, [pc, #56]	; (80033f0 <MX_SPI1_Init+0x74>)
 80033b8:	2280      	movs	r2, #128	; 0x80
 80033ba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80033bc:	4b0c      	ldr	r3, [pc, #48]	; (80033f0 <MX_SPI1_Init+0x74>)
 80033be:	2200      	movs	r2, #0
 80033c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033c2:	4b0b      	ldr	r3, [pc, #44]	; (80033f0 <MX_SPI1_Init+0x74>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80033c8:	4b09      	ldr	r3, [pc, #36]	; (80033f0 <MX_SPI1_Init+0x74>)
 80033ca:	2207      	movs	r2, #7
 80033cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80033ce:	4b08      	ldr	r3, [pc, #32]	; (80033f0 <MX_SPI1_Init+0x74>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80033d4:	4b06      	ldr	r3, [pc, #24]	; (80033f0 <MX_SPI1_Init+0x74>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80033da:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <MX_SPI1_Init+0x74>)
 80033dc:	0018      	movs	r0, r3
 80033de:	f003 feaf 	bl	8007140 <HAL_SPI_Init>
 80033e2:	1e03      	subs	r3, r0, #0
 80033e4:	d001      	beq.n	80033ea <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80033e6:	f000 fb99 	bl	8003b1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80033ea:	46c0      	nop			; (mov r8, r8)
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	2000030c 	.word	0x2000030c
 80033f4:	40013000 	.word	0x40013000

080033f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033fe:	2308      	movs	r3, #8
 8003400:	18fb      	adds	r3, r7, r3
 8003402:	0018      	movs	r0, r3
 8003404:	2310      	movs	r3, #16
 8003406:	001a      	movs	r2, r3
 8003408:	2100      	movs	r1, #0
 800340a:	f00d fe2f 	bl	801106c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800340e:	003b      	movs	r3, r7
 8003410:	0018      	movs	r0, r3
 8003412:	2308      	movs	r3, #8
 8003414:	001a      	movs	r2, r3
 8003416:	2100      	movs	r1, #0
 8003418:	f00d fe28 	bl	801106c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800341c:	4b1f      	ldr	r3, [pc, #124]	; (800349c <MX_TIM1_Init+0xa4>)
 800341e:	4a20      	ldr	r2, [pc, #128]	; (80034a0 <MX_TIM1_Init+0xa8>)
 8003420:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24000-1;
 8003422:	4b1e      	ldr	r3, [pc, #120]	; (800349c <MX_TIM1_Init+0xa4>)
 8003424:	4a1f      	ldr	r2, [pc, #124]	; (80034a4 <MX_TIM1_Init+0xac>)
 8003426:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003428:	4b1c      	ldr	r3, [pc, #112]	; (800349c <MX_TIM1_Init+0xa4>)
 800342a:	2200      	movs	r2, #0
 800342c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 800342e:	4b1b      	ldr	r3, [pc, #108]	; (800349c <MX_TIM1_Init+0xa4>)
 8003430:	2263      	movs	r2, #99	; 0x63
 8003432:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003434:	4b19      	ldr	r3, [pc, #100]	; (800349c <MX_TIM1_Init+0xa4>)
 8003436:	2200      	movs	r2, #0
 8003438:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800343a:	4b18      	ldr	r3, [pc, #96]	; (800349c <MX_TIM1_Init+0xa4>)
 800343c:	2200      	movs	r2, #0
 800343e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003440:	4b16      	ldr	r3, [pc, #88]	; (800349c <MX_TIM1_Init+0xa4>)
 8003442:	2200      	movs	r2, #0
 8003444:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003446:	4b15      	ldr	r3, [pc, #84]	; (800349c <MX_TIM1_Init+0xa4>)
 8003448:	0018      	movs	r0, r3
 800344a:	f004 fa79 	bl	8007940 <HAL_TIM_Base_Init>
 800344e:	1e03      	subs	r3, r0, #0
 8003450:	d001      	beq.n	8003456 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8003452:	f000 fb63 	bl	8003b1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003456:	2108      	movs	r1, #8
 8003458:	187b      	adds	r3, r7, r1
 800345a:	2280      	movs	r2, #128	; 0x80
 800345c:	0152      	lsls	r2, r2, #5
 800345e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003460:	187a      	adds	r2, r7, r1
 8003462:	4b0e      	ldr	r3, [pc, #56]	; (800349c <MX_TIM1_Init+0xa4>)
 8003464:	0011      	movs	r1, r2
 8003466:	0018      	movs	r0, r3
 8003468:	f004 ff12 	bl	8008290 <HAL_TIM_ConfigClockSource>
 800346c:	1e03      	subs	r3, r0, #0
 800346e:	d001      	beq.n	8003474 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003470:	f000 fb54 	bl	8003b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003474:	003b      	movs	r3, r7
 8003476:	2220      	movs	r2, #32
 8003478:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800347a:	003b      	movs	r3, r7
 800347c:	2200      	movs	r2, #0
 800347e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003480:	003a      	movs	r2, r7
 8003482:	4b06      	ldr	r3, [pc, #24]	; (800349c <MX_TIM1_Init+0xa4>)
 8003484:	0011      	movs	r1, r2
 8003486:	0018      	movs	r0, r3
 8003488:	f005 fb38 	bl	8008afc <HAL_TIMEx_MasterConfigSynchronization>
 800348c:	1e03      	subs	r3, r0, #0
 800348e:	d001      	beq.n	8003494 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8003490:	f000 fb44 	bl	8003b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003494:	46c0      	nop			; (mov r8, r8)
 8003496:	46bd      	mov	sp, r7
 8003498:	b006      	add	sp, #24
 800349a:	bd80      	pop	{r7, pc}
 800349c:	20000370 	.word	0x20000370
 80034a0:	40012c00 	.word	0x40012c00
 80034a4:	00005dbf 	.word	0x00005dbf

080034a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034ae:	2308      	movs	r3, #8
 80034b0:	18fb      	adds	r3, r7, r3
 80034b2:	0018      	movs	r0, r3
 80034b4:	2310      	movs	r3, #16
 80034b6:	001a      	movs	r2, r3
 80034b8:	2100      	movs	r1, #0
 80034ba:	f00d fdd7 	bl	801106c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034be:	003b      	movs	r3, r7
 80034c0:	0018      	movs	r0, r3
 80034c2:	2308      	movs	r3, #8
 80034c4:	001a      	movs	r2, r3
 80034c6:	2100      	movs	r1, #0
 80034c8:	f00d fdd0 	bl	801106c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80034cc:	4b1e      	ldr	r3, [pc, #120]	; (8003548 <MX_TIM2_Init+0xa0>)
 80034ce:	2280      	movs	r2, #128	; 0x80
 80034d0:	05d2      	lsls	r2, r2, #23
 80034d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24000-1;
 80034d4:	4b1c      	ldr	r3, [pc, #112]	; (8003548 <MX_TIM2_Init+0xa0>)
 80034d6:	4a1d      	ldr	r2, [pc, #116]	; (800354c <MX_TIM2_Init+0xa4>)
 80034d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034da:	4b1b      	ldr	r3, [pc, #108]	; (8003548 <MX_TIM2_Init+0xa0>)
 80034dc:	2200      	movs	r2, #0
 80034de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 840000-1;
 80034e0:	4b19      	ldr	r3, [pc, #100]	; (8003548 <MX_TIM2_Init+0xa0>)
 80034e2:	4a1b      	ldr	r2, [pc, #108]	; (8003550 <MX_TIM2_Init+0xa8>)
 80034e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034e6:	4b18      	ldr	r3, [pc, #96]	; (8003548 <MX_TIM2_Init+0xa0>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034ec:	4b16      	ldr	r3, [pc, #88]	; (8003548 <MX_TIM2_Init+0xa0>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80034f2:	4b15      	ldr	r3, [pc, #84]	; (8003548 <MX_TIM2_Init+0xa0>)
 80034f4:	0018      	movs	r0, r3
 80034f6:	f004 fa23 	bl	8007940 <HAL_TIM_Base_Init>
 80034fa:	1e03      	subs	r3, r0, #0
 80034fc:	d001      	beq.n	8003502 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80034fe:	f000 fb0d 	bl	8003b1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003502:	2108      	movs	r1, #8
 8003504:	187b      	adds	r3, r7, r1
 8003506:	2280      	movs	r2, #128	; 0x80
 8003508:	0152      	lsls	r2, r2, #5
 800350a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800350c:	187a      	adds	r2, r7, r1
 800350e:	4b0e      	ldr	r3, [pc, #56]	; (8003548 <MX_TIM2_Init+0xa0>)
 8003510:	0011      	movs	r1, r2
 8003512:	0018      	movs	r0, r3
 8003514:	f004 febc 	bl	8008290 <HAL_TIM_ConfigClockSource>
 8003518:	1e03      	subs	r3, r0, #0
 800351a:	d001      	beq.n	8003520 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800351c:	f000 fafe 	bl	8003b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003520:	003b      	movs	r3, r7
 8003522:	2200      	movs	r2, #0
 8003524:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003526:	003b      	movs	r3, r7
 8003528:	2200      	movs	r2, #0
 800352a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800352c:	003a      	movs	r2, r7
 800352e:	4b06      	ldr	r3, [pc, #24]	; (8003548 <MX_TIM2_Init+0xa0>)
 8003530:	0011      	movs	r1, r2
 8003532:	0018      	movs	r0, r3
 8003534:	f005 fae2 	bl	8008afc <HAL_TIMEx_MasterConfigSynchronization>
 8003538:	1e03      	subs	r3, r0, #0
 800353a:	d001      	beq.n	8003540 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800353c:	f000 faee 	bl	8003b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003540:	46c0      	nop			; (mov r8, r8)
 8003542:	46bd      	mov	sp, r7
 8003544:	b006      	add	sp, #24
 8003546:	bd80      	pop	{r7, pc}
 8003548:	200003b8 	.word	0x200003b8
 800354c:	00005dbf 	.word	0x00005dbf
 8003550:	000cd13f 	.word	0x000cd13f

08003554 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b08e      	sub	sp, #56	; 0x38
 8003558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800355a:	2328      	movs	r3, #40	; 0x28
 800355c:	18fb      	adds	r3, r7, r3
 800355e:	0018      	movs	r0, r3
 8003560:	2310      	movs	r3, #16
 8003562:	001a      	movs	r2, r3
 8003564:	2100      	movs	r1, #0
 8003566:	f00d fd81 	bl	801106c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800356a:	2320      	movs	r3, #32
 800356c:	18fb      	adds	r3, r7, r3
 800356e:	0018      	movs	r0, r3
 8003570:	2308      	movs	r3, #8
 8003572:	001a      	movs	r2, r3
 8003574:	2100      	movs	r1, #0
 8003576:	f00d fd79 	bl	801106c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800357a:	1d3b      	adds	r3, r7, #4
 800357c:	0018      	movs	r0, r3
 800357e:	231c      	movs	r3, #28
 8003580:	001a      	movs	r2, r3
 8003582:	2100      	movs	r1, #0
 8003584:	f00d fd72 	bl	801106c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003588:	4b2f      	ldr	r3, [pc, #188]	; (8003648 <MX_TIM3_Init+0xf4>)
 800358a:	4a30      	ldr	r2, [pc, #192]	; (800364c <MX_TIM3_Init+0xf8>)
 800358c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240-1;
 800358e:	4b2e      	ldr	r3, [pc, #184]	; (8003648 <MX_TIM3_Init+0xf4>)
 8003590:	22ef      	movs	r2, #239	; 0xef
 8003592:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003594:	4b2c      	ldr	r3, [pc, #176]	; (8003648 <MX_TIM3_Init+0xf4>)
 8003596:	2200      	movs	r2, #0
 8003598:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 800359a:	4b2b      	ldr	r3, [pc, #172]	; (8003648 <MX_TIM3_Init+0xf4>)
 800359c:	2263      	movs	r2, #99	; 0x63
 800359e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035a0:	4b29      	ldr	r3, [pc, #164]	; (8003648 <MX_TIM3_Init+0xf4>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035a6:	4b28      	ldr	r3, [pc, #160]	; (8003648 <MX_TIM3_Init+0xf4>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80035ac:	4b26      	ldr	r3, [pc, #152]	; (8003648 <MX_TIM3_Init+0xf4>)
 80035ae:	0018      	movs	r0, r3
 80035b0:	f004 f9c6 	bl	8007940 <HAL_TIM_Base_Init>
 80035b4:	1e03      	subs	r3, r0, #0
 80035b6:	d001      	beq.n	80035bc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80035b8:	f000 fab0 	bl	8003b1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035bc:	2128      	movs	r1, #40	; 0x28
 80035be:	187b      	adds	r3, r7, r1
 80035c0:	2280      	movs	r2, #128	; 0x80
 80035c2:	0152      	lsls	r2, r2, #5
 80035c4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80035c6:	187a      	adds	r2, r7, r1
 80035c8:	4b1f      	ldr	r3, [pc, #124]	; (8003648 <MX_TIM3_Init+0xf4>)
 80035ca:	0011      	movs	r1, r2
 80035cc:	0018      	movs	r0, r3
 80035ce:	f004 fe5f 	bl	8008290 <HAL_TIM_ConfigClockSource>
 80035d2:	1e03      	subs	r3, r0, #0
 80035d4:	d001      	beq.n	80035da <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80035d6:	f000 faa1 	bl	8003b1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80035da:	4b1b      	ldr	r3, [pc, #108]	; (8003648 <MX_TIM3_Init+0xf4>)
 80035dc:	0018      	movs	r0, r3
 80035de:	f004 faef 	bl	8007bc0 <HAL_TIM_PWM_Init>
 80035e2:	1e03      	subs	r3, r0, #0
 80035e4:	d001      	beq.n	80035ea <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80035e6:	f000 fa99 	bl	8003b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035ea:	2120      	movs	r1, #32
 80035ec:	187b      	adds	r3, r7, r1
 80035ee:	2200      	movs	r2, #0
 80035f0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035f2:	187b      	adds	r3, r7, r1
 80035f4:	2200      	movs	r2, #0
 80035f6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80035f8:	187a      	adds	r2, r7, r1
 80035fa:	4b13      	ldr	r3, [pc, #76]	; (8003648 <MX_TIM3_Init+0xf4>)
 80035fc:	0011      	movs	r1, r2
 80035fe:	0018      	movs	r0, r3
 8003600:	f005 fa7c 	bl	8008afc <HAL_TIMEx_MasterConfigSynchronization>
 8003604:	1e03      	subs	r3, r0, #0
 8003606:	d001      	beq.n	800360c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8003608:	f000 fa88 	bl	8003b1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800360c:	1d3b      	adds	r3, r7, #4
 800360e:	2260      	movs	r2, #96	; 0x60
 8003610:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003612:	1d3b      	adds	r3, r7, #4
 8003614:	2200      	movs	r2, #0
 8003616:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003618:	1d3b      	adds	r3, r7, #4
 800361a:	2200      	movs	r2, #0
 800361c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800361e:	1d3b      	adds	r3, r7, #4
 8003620:	2200      	movs	r2, #0
 8003622:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003624:	1d39      	adds	r1, r7, #4
 8003626:	4b08      	ldr	r3, [pc, #32]	; (8003648 <MX_TIM3_Init+0xf4>)
 8003628:	2208      	movs	r2, #8
 800362a:	0018      	movs	r0, r3
 800362c:	f004 fd6a 	bl	8008104 <HAL_TIM_PWM_ConfigChannel>
 8003630:	1e03      	subs	r3, r0, #0
 8003632:	d001      	beq.n	8003638 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8003634:	f000 fa72 	bl	8003b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003638:	4b03      	ldr	r3, [pc, #12]	; (8003648 <MX_TIM3_Init+0xf4>)
 800363a:	0018      	movs	r0, r3
 800363c:	f000 fcbe 	bl	8003fbc <HAL_TIM_MspPostInit>

}
 8003640:	46c0      	nop			; (mov r8, r8)
 8003642:	46bd      	mov	sp, r7
 8003644:	b00e      	add	sp, #56	; 0x38
 8003646:	bd80      	pop	{r7, pc}
 8003648:	20000400 	.word	0x20000400
 800364c:	40000400 	.word	0x40000400

08003650 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b082      	sub	sp, #8
 8003654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003656:	003b      	movs	r3, r7
 8003658:	0018      	movs	r0, r3
 800365a:	2308      	movs	r3, #8
 800365c:	001a      	movs	r2, r3
 800365e:	2100      	movs	r1, #0
 8003660:	f00d fd04 	bl	801106c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003664:	4b15      	ldr	r3, [pc, #84]	; (80036bc <MX_TIM6_Init+0x6c>)
 8003666:	4a16      	ldr	r2, [pc, #88]	; (80036c0 <MX_TIM6_Init+0x70>)
 8003668:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 24000-1;
 800366a:	4b14      	ldr	r3, [pc, #80]	; (80036bc <MX_TIM6_Init+0x6c>)
 800366c:	4a15      	ldr	r2, [pc, #84]	; (80036c4 <MX_TIM6_Init+0x74>)
 800366e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003670:	4b12      	ldr	r3, [pc, #72]	; (80036bc <MX_TIM6_Init+0x6c>)
 8003672:	2200      	movs	r2, #0
 8003674:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 15000-1;
 8003676:	4b11      	ldr	r3, [pc, #68]	; (80036bc <MX_TIM6_Init+0x6c>)
 8003678:	4a13      	ldr	r2, [pc, #76]	; (80036c8 <MX_TIM6_Init+0x78>)
 800367a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800367c:	4b0f      	ldr	r3, [pc, #60]	; (80036bc <MX_TIM6_Init+0x6c>)
 800367e:	2200      	movs	r2, #0
 8003680:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003682:	4b0e      	ldr	r3, [pc, #56]	; (80036bc <MX_TIM6_Init+0x6c>)
 8003684:	0018      	movs	r0, r3
 8003686:	f004 f95b 	bl	8007940 <HAL_TIM_Base_Init>
 800368a:	1e03      	subs	r3, r0, #0
 800368c:	d001      	beq.n	8003692 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800368e:	f000 fa45 	bl	8003b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003692:	003b      	movs	r3, r7
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003698:	003b      	movs	r3, r7
 800369a:	2200      	movs	r2, #0
 800369c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800369e:	003a      	movs	r2, r7
 80036a0:	4b06      	ldr	r3, [pc, #24]	; (80036bc <MX_TIM6_Init+0x6c>)
 80036a2:	0011      	movs	r1, r2
 80036a4:	0018      	movs	r0, r3
 80036a6:	f005 fa29 	bl	8008afc <HAL_TIMEx_MasterConfigSynchronization>
 80036aa:	1e03      	subs	r3, r0, #0
 80036ac:	d001      	beq.n	80036b2 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80036ae:	f000 fa35 	bl	8003b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80036b2:	46c0      	nop			; (mov r8, r8)
 80036b4:	46bd      	mov	sp, r7
 80036b6:	b002      	add	sp, #8
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	46c0      	nop			; (mov r8, r8)
 80036bc:	20000448 	.word	0x20000448
 80036c0:	40001000 	.word	0x40001000
 80036c4:	00005dbf 	.word	0x00005dbf
 80036c8:	00003a97 	.word	0x00003a97

080036cc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036d2:	003b      	movs	r3, r7
 80036d4:	0018      	movs	r0, r3
 80036d6:	2308      	movs	r3, #8
 80036d8:	001a      	movs	r2, r3
 80036da:	2100      	movs	r1, #0
 80036dc:	f00d fcc6 	bl	801106c <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80036e0:	4b15      	ldr	r3, [pc, #84]	; (8003738 <MX_TIM7_Init+0x6c>)
 80036e2:	4a16      	ldr	r2, [pc, #88]	; (800373c <MX_TIM7_Init+0x70>)
 80036e4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 24000-1;
 80036e6:	4b14      	ldr	r3, [pc, #80]	; (8003738 <MX_TIM7_Init+0x6c>)
 80036e8:	4a15      	ldr	r2, [pc, #84]	; (8003740 <MX_TIM7_Init+0x74>)
 80036ea:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036ec:	4b12      	ldr	r3, [pc, #72]	; (8003738 <MX_TIM7_Init+0x6c>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 15000-1;
 80036f2:	4b11      	ldr	r3, [pc, #68]	; (8003738 <MX_TIM7_Init+0x6c>)
 80036f4:	4a13      	ldr	r2, [pc, #76]	; (8003744 <MX_TIM7_Init+0x78>)
 80036f6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036f8:	4b0f      	ldr	r3, [pc, #60]	; (8003738 <MX_TIM7_Init+0x6c>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80036fe:	4b0e      	ldr	r3, [pc, #56]	; (8003738 <MX_TIM7_Init+0x6c>)
 8003700:	0018      	movs	r0, r3
 8003702:	f004 f91d 	bl	8007940 <HAL_TIM_Base_Init>
 8003706:	1e03      	subs	r3, r0, #0
 8003708:	d001      	beq.n	800370e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800370a:	f000 fa07 	bl	8003b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800370e:	003b      	movs	r3, r7
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003714:	003b      	movs	r3, r7
 8003716:	2200      	movs	r2, #0
 8003718:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800371a:	003a      	movs	r2, r7
 800371c:	4b06      	ldr	r3, [pc, #24]	; (8003738 <MX_TIM7_Init+0x6c>)
 800371e:	0011      	movs	r1, r2
 8003720:	0018      	movs	r0, r3
 8003722:	f005 f9eb 	bl	8008afc <HAL_TIMEx_MasterConfigSynchronization>
 8003726:	1e03      	subs	r3, r0, #0
 8003728:	d001      	beq.n	800372e <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 800372a:	f000 f9f7 	bl	8003b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800372e:	46c0      	nop			; (mov r8, r8)
 8003730:	46bd      	mov	sp, r7
 8003732:	b002      	add	sp, #8
 8003734:	bd80      	pop	{r7, pc}
 8003736:	46c0      	nop			; (mov r8, r8)
 8003738:	20000490 	.word	0x20000490
 800373c:	40001400 	.word	0x40001400
 8003740:	00005dbf 	.word	0x00005dbf
 8003744:	00003a97 	.word	0x00003a97

08003748 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800374c:	4b0e      	ldr	r3, [pc, #56]	; (8003788 <MX_TIM14_Init+0x40>)
 800374e:	4a0f      	ldr	r2, [pc, #60]	; (800378c <MX_TIM14_Init+0x44>)
 8003750:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 24000-1;
 8003752:	4b0d      	ldr	r3, [pc, #52]	; (8003788 <MX_TIM14_Init+0x40>)
 8003754:	4a0e      	ldr	r2, [pc, #56]	; (8003790 <MX_TIM14_Init+0x48>)
 8003756:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003758:	4b0b      	ldr	r3, [pc, #44]	; (8003788 <MX_TIM14_Init+0x40>)
 800375a:	2200      	movs	r2, #0
 800375c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 5000-1;
 800375e:	4b0a      	ldr	r3, [pc, #40]	; (8003788 <MX_TIM14_Init+0x40>)
 8003760:	4a0c      	ldr	r2, [pc, #48]	; (8003794 <MX_TIM14_Init+0x4c>)
 8003762:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003764:	4b08      	ldr	r3, [pc, #32]	; (8003788 <MX_TIM14_Init+0x40>)
 8003766:	2200      	movs	r2, #0
 8003768:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800376a:	4b07      	ldr	r3, [pc, #28]	; (8003788 <MX_TIM14_Init+0x40>)
 800376c:	2200      	movs	r2, #0
 800376e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003770:	4b05      	ldr	r3, [pc, #20]	; (8003788 <MX_TIM14_Init+0x40>)
 8003772:	0018      	movs	r0, r3
 8003774:	f004 f8e4 	bl	8007940 <HAL_TIM_Base_Init>
 8003778:	1e03      	subs	r3, r0, #0
 800377a:	d001      	beq.n	8003780 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 800377c:	f000 f9ce 	bl	8003b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8003780:	46c0      	nop			; (mov r8, r8)
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	200004d8 	.word	0x200004d8
 800378c:	40002000 	.word	0x40002000
 8003790:	00005dbf 	.word	0x00005dbf
 8003794:	00001387 	.word	0x00001387

08003798 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800379e:	2308      	movs	r3, #8
 80037a0:	18fb      	adds	r3, r7, r3
 80037a2:	0018      	movs	r0, r3
 80037a4:	2310      	movs	r3, #16
 80037a6:	001a      	movs	r2, r3
 80037a8:	2100      	movs	r1, #0
 80037aa:	f00d fc5f 	bl	801106c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037ae:	003b      	movs	r3, r7
 80037b0:	0018      	movs	r0, r3
 80037b2:	2308      	movs	r3, #8
 80037b4:	001a      	movs	r2, r3
 80037b6:	2100      	movs	r1, #0
 80037b8:	f00d fc58 	bl	801106c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80037bc:	4b1f      	ldr	r3, [pc, #124]	; (800383c <MX_TIM15_Init+0xa4>)
 80037be:	4a20      	ldr	r2, [pc, #128]	; (8003840 <MX_TIM15_Init+0xa8>)
 80037c0:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 24000-1;
 80037c2:	4b1e      	ldr	r3, [pc, #120]	; (800383c <MX_TIM15_Init+0xa4>)
 80037c4:	4a1f      	ldr	r2, [pc, #124]	; (8003844 <MX_TIM15_Init+0xac>)
 80037c6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037c8:	4b1c      	ldr	r3, [pc, #112]	; (800383c <MX_TIM15_Init+0xa4>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 3000-1;
 80037ce:	4b1b      	ldr	r3, [pc, #108]	; (800383c <MX_TIM15_Init+0xa4>)
 80037d0:	4a1d      	ldr	r2, [pc, #116]	; (8003848 <MX_TIM15_Init+0xb0>)
 80037d2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037d4:	4b19      	ldr	r3, [pc, #100]	; (800383c <MX_TIM15_Init+0xa4>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80037da:	4b18      	ldr	r3, [pc, #96]	; (800383c <MX_TIM15_Init+0xa4>)
 80037dc:	2200      	movs	r2, #0
 80037de:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037e0:	4b16      	ldr	r3, [pc, #88]	; (800383c <MX_TIM15_Init+0xa4>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80037e6:	4b15      	ldr	r3, [pc, #84]	; (800383c <MX_TIM15_Init+0xa4>)
 80037e8:	0018      	movs	r0, r3
 80037ea:	f004 f8a9 	bl	8007940 <HAL_TIM_Base_Init>
 80037ee:	1e03      	subs	r3, r0, #0
 80037f0:	d001      	beq.n	80037f6 <MX_TIM15_Init+0x5e>
  {
    Error_Handler();
 80037f2:	f000 f993 	bl	8003b1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037f6:	2108      	movs	r1, #8
 80037f8:	187b      	adds	r3, r7, r1
 80037fa:	2280      	movs	r2, #128	; 0x80
 80037fc:	0152      	lsls	r2, r2, #5
 80037fe:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8003800:	187a      	adds	r2, r7, r1
 8003802:	4b0e      	ldr	r3, [pc, #56]	; (800383c <MX_TIM15_Init+0xa4>)
 8003804:	0011      	movs	r1, r2
 8003806:	0018      	movs	r0, r3
 8003808:	f004 fd42 	bl	8008290 <HAL_TIM_ConfigClockSource>
 800380c:	1e03      	subs	r3, r0, #0
 800380e:	d001      	beq.n	8003814 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8003810:	f000 f984 	bl	8003b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003814:	003b      	movs	r3, r7
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800381a:	003b      	movs	r3, r7
 800381c:	2200      	movs	r2, #0
 800381e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8003820:	003a      	movs	r2, r7
 8003822:	4b06      	ldr	r3, [pc, #24]	; (800383c <MX_TIM15_Init+0xa4>)
 8003824:	0011      	movs	r1, r2
 8003826:	0018      	movs	r0, r3
 8003828:	f005 f968 	bl	8008afc <HAL_TIMEx_MasterConfigSynchronization>
 800382c:	1e03      	subs	r3, r0, #0
 800382e:	d001      	beq.n	8003834 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8003830:	f000 f974 	bl	8003b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8003834:	46c0      	nop			; (mov r8, r8)
 8003836:	46bd      	mov	sp, r7
 8003838:	b006      	add	sp, #24
 800383a:	bd80      	pop	{r7, pc}
 800383c:	20000520 	.word	0x20000520
 8003840:	40014000 	.word	0x40014000
 8003844:	00005dbf 	.word	0x00005dbf
 8003848:	00000bb7 	.word	0x00000bb7

0800384c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003852:	4b0c      	ldr	r3, [pc, #48]	; (8003884 <MX_DMA_Init+0x38>)
 8003854:	695a      	ldr	r2, [r3, #20]
 8003856:	4b0b      	ldr	r3, [pc, #44]	; (8003884 <MX_DMA_Init+0x38>)
 8003858:	2101      	movs	r1, #1
 800385a:	430a      	orrs	r2, r1
 800385c:	615a      	str	r2, [r3, #20]
 800385e:	4b09      	ldr	r3, [pc, #36]	; (8003884 <MX_DMA_Init+0x38>)
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	2201      	movs	r2, #1
 8003864:	4013      	ands	r3, r2
 8003866:	607b      	str	r3, [r7, #4]
 8003868:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800386a:	2200      	movs	r2, #0
 800386c:	2100      	movs	r1, #0
 800386e:	2009      	movs	r0, #9
 8003870:	f001 fd28 	bl	80052c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003874:	2009      	movs	r0, #9
 8003876:	f001 fd3a 	bl	80052ee <HAL_NVIC_EnableIRQ>

}
 800387a:	46c0      	nop			; (mov r8, r8)
 800387c:	46bd      	mov	sp, r7
 800387e:	b002      	add	sp, #8
 8003880:	bd80      	pop	{r7, pc}
 8003882:	46c0      	nop			; (mov r8, r8)
 8003884:	40021000 	.word	0x40021000

08003888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003888:	b590      	push	{r4, r7, lr}
 800388a:	b08b      	sub	sp, #44	; 0x2c
 800388c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800388e:	2414      	movs	r4, #20
 8003890:	193b      	adds	r3, r7, r4
 8003892:	0018      	movs	r0, r3
 8003894:	2314      	movs	r3, #20
 8003896:	001a      	movs	r2, r3
 8003898:	2100      	movs	r1, #0
 800389a:	f00d fbe7 	bl	801106c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800389e:	4b9a      	ldr	r3, [pc, #616]	; (8003b08 <MX_GPIO_Init+0x280>)
 80038a0:	695a      	ldr	r2, [r3, #20]
 80038a2:	4b99      	ldr	r3, [pc, #612]	; (8003b08 <MX_GPIO_Init+0x280>)
 80038a4:	2180      	movs	r1, #128	; 0x80
 80038a6:	03c9      	lsls	r1, r1, #15
 80038a8:	430a      	orrs	r2, r1
 80038aa:	615a      	str	r2, [r3, #20]
 80038ac:	4b96      	ldr	r3, [pc, #600]	; (8003b08 <MX_GPIO_Init+0x280>)
 80038ae:	695a      	ldr	r2, [r3, #20]
 80038b0:	2380      	movs	r3, #128	; 0x80
 80038b2:	03db      	lsls	r3, r3, #15
 80038b4:	4013      	ands	r3, r2
 80038b6:	613b      	str	r3, [r7, #16]
 80038b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ba:	4b93      	ldr	r3, [pc, #588]	; (8003b08 <MX_GPIO_Init+0x280>)
 80038bc:	695a      	ldr	r2, [r3, #20]
 80038be:	4b92      	ldr	r3, [pc, #584]	; (8003b08 <MX_GPIO_Init+0x280>)
 80038c0:	2180      	movs	r1, #128	; 0x80
 80038c2:	0289      	lsls	r1, r1, #10
 80038c4:	430a      	orrs	r2, r1
 80038c6:	615a      	str	r2, [r3, #20]
 80038c8:	4b8f      	ldr	r3, [pc, #572]	; (8003b08 <MX_GPIO_Init+0x280>)
 80038ca:	695a      	ldr	r2, [r3, #20]
 80038cc:	2380      	movs	r3, #128	; 0x80
 80038ce:	029b      	lsls	r3, r3, #10
 80038d0:	4013      	ands	r3, r2
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80038d6:	4b8c      	ldr	r3, [pc, #560]	; (8003b08 <MX_GPIO_Init+0x280>)
 80038d8:	695a      	ldr	r2, [r3, #20]
 80038da:	4b8b      	ldr	r3, [pc, #556]	; (8003b08 <MX_GPIO_Init+0x280>)
 80038dc:	2180      	movs	r1, #128	; 0x80
 80038de:	0309      	lsls	r1, r1, #12
 80038e0:	430a      	orrs	r2, r1
 80038e2:	615a      	str	r2, [r3, #20]
 80038e4:	4b88      	ldr	r3, [pc, #544]	; (8003b08 <MX_GPIO_Init+0x280>)
 80038e6:	695a      	ldr	r2, [r3, #20]
 80038e8:	2380      	movs	r3, #128	; 0x80
 80038ea:	031b      	lsls	r3, r3, #12
 80038ec:	4013      	ands	r3, r2
 80038ee:	60bb      	str	r3, [r7, #8]
 80038f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038f2:	4b85      	ldr	r3, [pc, #532]	; (8003b08 <MX_GPIO_Init+0x280>)
 80038f4:	695a      	ldr	r2, [r3, #20]
 80038f6:	4b84      	ldr	r3, [pc, #528]	; (8003b08 <MX_GPIO_Init+0x280>)
 80038f8:	2180      	movs	r1, #128	; 0x80
 80038fa:	02c9      	lsls	r1, r1, #11
 80038fc:	430a      	orrs	r2, r1
 80038fe:	615a      	str	r2, [r3, #20]
 8003900:	4b81      	ldr	r3, [pc, #516]	; (8003b08 <MX_GPIO_Init+0x280>)
 8003902:	695a      	ldr	r2, [r3, #20]
 8003904:	2380      	movs	r3, #128	; 0x80
 8003906:	02db      	lsls	r3, r3, #11
 8003908:	4013      	ands	r3, r2
 800390a:	607b      	str	r3, [r7, #4]
 800390c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800390e:	4b7e      	ldr	r3, [pc, #504]	; (8003b08 <MX_GPIO_Init+0x280>)
 8003910:	695a      	ldr	r2, [r3, #20]
 8003912:	4b7d      	ldr	r3, [pc, #500]	; (8003b08 <MX_GPIO_Init+0x280>)
 8003914:	2180      	movs	r1, #128	; 0x80
 8003916:	0349      	lsls	r1, r1, #13
 8003918:	430a      	orrs	r2, r1
 800391a:	615a      	str	r2, [r3, #20]
 800391c:	4b7a      	ldr	r3, [pc, #488]	; (8003b08 <MX_GPIO_Init+0x280>)
 800391e:	695a      	ldr	r2, [r3, #20]
 8003920:	2380      	movs	r3, #128	; 0x80
 8003922:	035b      	lsls	r3, r3, #13
 8003924:	4013      	ands	r3, r2
 8003926:	603b      	str	r3, [r7, #0]
 8003928:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IT_LED_Pin|DEF_LED_Pin, GPIO_PIN_RESET);
 800392a:	23c0      	movs	r3, #192	; 0xc0
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4877      	ldr	r0, [pc, #476]	; (8003b0c <MX_GPIO_Init+0x284>)
 8003930:	2200      	movs	r2, #0
 8003932:	0019      	movs	r1, r3
 8003934:	f002 f9ab 	bl	8005c8e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AC_LED_Pin|RD_LED_Pin, GPIO_PIN_RESET);
 8003938:	23c0      	movs	r3, #192	; 0xc0
 800393a:	0099      	lsls	r1, r3, #2
 800393c:	2390      	movs	r3, #144	; 0x90
 800393e:	05db      	lsls	r3, r3, #23
 8003940:	2200      	movs	r2, #0
 8003942:	0018      	movs	r0, r3
 8003944:	f002 f9a3 	bl	8005c8e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TLE_CSN_GPIO_Port, TLE_CSN_Pin, GPIO_PIN_SET);
 8003948:	2380      	movs	r3, #128	; 0x80
 800394a:	0219      	lsls	r1, r3, #8
 800394c:	2390      	movs	r3, #144	; 0x90
 800394e:	05db      	lsls	r3, r3, #23
 8003950:	2201      	movs	r2, #1
 8003952:	0018      	movs	r0, r3
 8003954:	f002 f99b 	bl	8005c8e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AUTO_LED_GPIO_Port, AUTO_LED_Pin, GPIO_PIN_RESET);
 8003958:	4b6d      	ldr	r3, [pc, #436]	; (8003b10 <MX_GPIO_Init+0x288>)
 800395a:	2200      	movs	r2, #0
 800395c:	2104      	movs	r1, #4
 800395e:	0018      	movs	r0, r3
 8003960:	f002 f995 	bl	8005c8e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TLE_EN_GPIO_Port, TLE_EN_Pin, GPIO_PIN_RESET);
 8003964:	4b6b      	ldr	r3, [pc, #428]	; (8003b14 <MX_GPIO_Init+0x28c>)
 8003966:	2200      	movs	r2, #0
 8003968:	2140      	movs	r1, #64	; 0x40
 800396a:	0018      	movs	r0, r3
 800396c:	f002 f98f 	bl	8005c8e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Illumination_Pin */
  GPIO_InitStruct.Pin = Illumination_Pin;
 8003970:	193b      	adds	r3, r7, r4
 8003972:	2210      	movs	r2, #16
 8003974:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003976:	193b      	adds	r3, r7, r4
 8003978:	2200      	movs	r2, #0
 800397a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800397c:	193b      	adds	r3, r7, r4
 800397e:	2200      	movs	r2, #0
 8003980:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Illumination_GPIO_Port, &GPIO_InitStruct);
 8003982:	193b      	adds	r3, r7, r4
 8003984:	4a61      	ldr	r2, [pc, #388]	; (8003b0c <MX_GPIO_Init+0x284>)
 8003986:	0019      	movs	r1, r3
 8003988:	0010      	movs	r0, r2
 800398a:	f001 ffeb 	bl	8005964 <HAL_GPIO_Init>

  /*Configure GPIO pin : IGN_Pin */
  GPIO_InitStruct.Pin = IGN_Pin;
 800398e:	0021      	movs	r1, r4
 8003990:	187b      	adds	r3, r7, r1
 8003992:	2220      	movs	r2, #32
 8003994:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003996:	187b      	adds	r3, r7, r1
 8003998:	2288      	movs	r2, #136	; 0x88
 800399a:	0352      	lsls	r2, r2, #13
 800399c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800399e:	187b      	adds	r3, r7, r1
 80039a0:	2200      	movs	r2, #0
 80039a2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(IGN_GPIO_Port, &GPIO_InitStruct);
 80039a4:	000c      	movs	r4, r1
 80039a6:	187b      	adds	r3, r7, r1
 80039a8:	4a58      	ldr	r2, [pc, #352]	; (8003b0c <MX_GPIO_Init+0x284>)
 80039aa:	0019      	movs	r1, r3
 80039ac:	0010      	movs	r0, r2
 80039ae:	f001 ffd9 	bl	8005964 <HAL_GPIO_Init>

  /*Configure GPIO pins : BL_Up_SW_Pin BL_Down_SW_Pin OFF_SW_Pin IT_SW_Pin
                           AM_Up_SW_Pin AM_Down_SW_Pin */
  GPIO_InitStruct.Pin = BL_Up_SW_Pin|BL_Down_SW_Pin|OFF_SW_Pin|IT_SW_Pin
 80039b2:	0021      	movs	r1, r4
 80039b4:	187b      	adds	r3, r7, r1
 80039b6:	4a58      	ldr	r2, [pc, #352]	; (8003b18 <MX_GPIO_Init+0x290>)
 80039b8:	601a      	str	r2, [r3, #0]
                          |AM_Up_SW_Pin|AM_Down_SW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80039ba:	187b      	adds	r3, r7, r1
 80039bc:	2284      	movs	r2, #132	; 0x84
 80039be:	0392      	lsls	r2, r2, #14
 80039c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039c2:	187b      	adds	r3, r7, r1
 80039c4:	2201      	movs	r2, #1
 80039c6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039c8:	000c      	movs	r4, r1
 80039ca:	187b      	adds	r3, r7, r1
 80039cc:	4a51      	ldr	r2, [pc, #324]	; (8003b14 <MX_GPIO_Init+0x28c>)
 80039ce:	0019      	movs	r1, r3
 80039d0:	0010      	movs	r0, r2
 80039d2:	f001 ffc7 	bl	8005964 <HAL_GPIO_Init>

  /*Configure GPIO pin : DEF_SW_Pin */
  GPIO_InitStruct.Pin = DEF_SW_Pin;
 80039d6:	0021      	movs	r1, r4
 80039d8:	187b      	adds	r3, r7, r1
 80039da:	2240      	movs	r2, #64	; 0x40
 80039dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80039de:	187b      	adds	r3, r7, r1
 80039e0:	2284      	movs	r2, #132	; 0x84
 80039e2:	0392      	lsls	r2, r2, #14
 80039e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039e6:	187b      	adds	r3, r7, r1
 80039e8:	2201      	movs	r2, #1
 80039ea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DEF_SW_GPIO_Port, &GPIO_InitStruct);
 80039ec:	000c      	movs	r4, r1
 80039ee:	187b      	adds	r3, r7, r1
 80039f0:	4a46      	ldr	r2, [pc, #280]	; (8003b0c <MX_GPIO_Init+0x284>)
 80039f2:	0019      	movs	r1, r3
 80039f4:	0010      	movs	r0, r2
 80039f6:	f001 ffb5 	bl	8005964 <HAL_GPIO_Init>

  /*Configure GPIO pins : IT_LED_Pin DEF_LED_Pin */
  GPIO_InitStruct.Pin = IT_LED_Pin|DEF_LED_Pin;
 80039fa:	0021      	movs	r1, r4
 80039fc:	187b      	adds	r3, r7, r1
 80039fe:	22c0      	movs	r2, #192	; 0xc0
 8003a00:	0092      	lsls	r2, r2, #2
 8003a02:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a04:	000c      	movs	r4, r1
 8003a06:	193b      	adds	r3, r7, r4
 8003a08:	2201      	movs	r2, #1
 8003a0a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0c:	193b      	adds	r3, r7, r4
 8003a0e:	2200      	movs	r2, #0
 8003a10:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a12:	193b      	adds	r3, r7, r4
 8003a14:	2200      	movs	r2, #0
 8003a16:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a18:	193b      	adds	r3, r7, r4
 8003a1a:	4a3c      	ldr	r2, [pc, #240]	; (8003b0c <MX_GPIO_Init+0x284>)
 8003a1c:	0019      	movs	r1, r3
 8003a1e:	0010      	movs	r0, r2
 8003a20:	f001 ffa0 	bl	8005964 <HAL_GPIO_Init>

  /*Configure GPIO pins : AC_LED_Pin RD_LED_Pin TLE_CSN_Pin */
  GPIO_InitStruct.Pin = AC_LED_Pin|RD_LED_Pin|TLE_CSN_Pin;
 8003a24:	0021      	movs	r1, r4
 8003a26:	187b      	adds	r3, r7, r1
 8003a28:	2283      	movs	r2, #131	; 0x83
 8003a2a:	0212      	lsls	r2, r2, #8
 8003a2c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a2e:	000c      	movs	r4, r1
 8003a30:	193b      	adds	r3, r7, r4
 8003a32:	2201      	movs	r2, #1
 8003a34:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a36:	193b      	adds	r3, r7, r4
 8003a38:	2200      	movs	r2, #0
 8003a3a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a3c:	193b      	adds	r3, r7, r4
 8003a3e:	2200      	movs	r2, #0
 8003a40:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a42:	193a      	adds	r2, r7, r4
 8003a44:	2390      	movs	r3, #144	; 0x90
 8003a46:	05db      	lsls	r3, r3, #23
 8003a48:	0011      	movs	r1, r2
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	f001 ff8a 	bl	8005964 <HAL_GPIO_Init>

  /*Configure GPIO pins : AC_SW_Pin RD_SW_Pin MD_SW_Pin */
  GPIO_InitStruct.Pin = AC_SW_Pin|RD_SW_Pin|MD_SW_Pin;
 8003a50:	193b      	adds	r3, r7, r4
 8003a52:	22e0      	movs	r2, #224	; 0xe0
 8003a54:	0152      	lsls	r2, r2, #5
 8003a56:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003a58:	193b      	adds	r3, r7, r4
 8003a5a:	2284      	movs	r2, #132	; 0x84
 8003a5c:	0392      	lsls	r2, r2, #14
 8003a5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a60:	193b      	adds	r3, r7, r4
 8003a62:	2201      	movs	r2, #1
 8003a64:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a66:	193a      	adds	r2, r7, r4
 8003a68:	2390      	movs	r3, #144	; 0x90
 8003a6a:	05db      	lsls	r3, r3, #23
 8003a6c:	0011      	movs	r1, r2
 8003a6e:	0018      	movs	r0, r3
 8003a70:	f001 ff78 	bl	8005964 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUTO_LED_Pin */
  GPIO_InitStruct.Pin = AUTO_LED_Pin;
 8003a74:	193b      	adds	r3, r7, r4
 8003a76:	2204      	movs	r2, #4
 8003a78:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a7a:	193b      	adds	r3, r7, r4
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a80:	193b      	adds	r3, r7, r4
 8003a82:	2200      	movs	r2, #0
 8003a84:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a86:	193b      	adds	r3, r7, r4
 8003a88:	2200      	movs	r2, #0
 8003a8a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(AUTO_LED_GPIO_Port, &GPIO_InitStruct);
 8003a8c:	193b      	adds	r3, r7, r4
 8003a8e:	4a20      	ldr	r2, [pc, #128]	; (8003b10 <MX_GPIO_Init+0x288>)
 8003a90:	0019      	movs	r1, r3
 8003a92:	0010      	movs	r0, r2
 8003a94:	f001 ff66 	bl	8005964 <HAL_GPIO_Init>

  /*Configure GPIO pin : TLE_EN_Pin */
  GPIO_InitStruct.Pin = TLE_EN_Pin;
 8003a98:	193b      	adds	r3, r7, r4
 8003a9a:	2240      	movs	r2, #64	; 0x40
 8003a9c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a9e:	193b      	adds	r3, r7, r4
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa4:	193b      	adds	r3, r7, r4
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aaa:	193b      	adds	r3, r7, r4
 8003aac:	2200      	movs	r2, #0
 8003aae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TLE_EN_GPIO_Port, &GPIO_InitStruct);
 8003ab0:	193b      	adds	r3, r7, r4
 8003ab2:	4a18      	ldr	r2, [pc, #96]	; (8003b14 <MX_GPIO_Init+0x28c>)
 8003ab4:	0019      	movs	r1, r3
 8003ab6:	0010      	movs	r0, r2
 8003ab8:	f001 ff54 	bl	8005964 <HAL_GPIO_Init>

  /*Configure GPIO pin : AUTO_SW_Pin */
  GPIO_InitStruct.Pin = AUTO_SW_Pin;
 8003abc:	0021      	movs	r1, r4
 8003abe:	187b      	adds	r3, r7, r1
 8003ac0:	2280      	movs	r2, #128	; 0x80
 8003ac2:	0092      	lsls	r2, r2, #2
 8003ac4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003ac6:	187b      	adds	r3, r7, r1
 8003ac8:	22c4      	movs	r2, #196	; 0xc4
 8003aca:	0392      	lsls	r2, r2, #14
 8003acc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ace:	187b      	adds	r3, r7, r1
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(AUTO_SW_GPIO_Port, &GPIO_InitStruct);
 8003ad4:	187b      	adds	r3, r7, r1
 8003ad6:	4a0f      	ldr	r2, [pc, #60]	; (8003b14 <MX_GPIO_Init+0x28c>)
 8003ad8:	0019      	movs	r1, r3
 8003ada:	0010      	movs	r0, r2
 8003adc:	f001 ff42 	bl	8005964 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	2005      	movs	r0, #5
 8003ae6:	f001 fbed 	bl	80052c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8003aea:	2005      	movs	r0, #5
 8003aec:	f001 fbff 	bl	80052ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8003af0:	2200      	movs	r2, #0
 8003af2:	2100      	movs	r1, #0
 8003af4:	2007      	movs	r0, #7
 8003af6:	f001 fbe5 	bl	80052c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003afa:	2007      	movs	r0, #7
 8003afc:	f001 fbf7 	bl	80052ee <HAL_NVIC_EnableIRQ>

}
 8003b00:	46c0      	nop			; (mov r8, r8)
 8003b02:	46bd      	mov	sp, r7
 8003b04:	b00b      	add	sp, #44	; 0x2c
 8003b06:	bd90      	pop	{r4, r7, pc}
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	48000800 	.word	0x48000800
 8003b10:	48000c00 	.word	0x48000c00
 8003b14:	48000400 	.word	0x48000400
 8003b18:	0000e182 	.word	0x0000e182

08003b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b20:	b672      	cpsid	i
}
 8003b22:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003b24:	e7fe      	b.n	8003b24 <Error_Handler+0x8>
	...

08003b28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b2e:	4b0f      	ldr	r3, [pc, #60]	; (8003b6c <HAL_MspInit+0x44>)
 8003b30:	699a      	ldr	r2, [r3, #24]
 8003b32:	4b0e      	ldr	r3, [pc, #56]	; (8003b6c <HAL_MspInit+0x44>)
 8003b34:	2101      	movs	r1, #1
 8003b36:	430a      	orrs	r2, r1
 8003b38:	619a      	str	r2, [r3, #24]
 8003b3a:	4b0c      	ldr	r3, [pc, #48]	; (8003b6c <HAL_MspInit+0x44>)
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	4013      	ands	r3, r2
 8003b42:	607b      	str	r3, [r7, #4]
 8003b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b46:	4b09      	ldr	r3, [pc, #36]	; (8003b6c <HAL_MspInit+0x44>)
 8003b48:	69da      	ldr	r2, [r3, #28]
 8003b4a:	4b08      	ldr	r3, [pc, #32]	; (8003b6c <HAL_MspInit+0x44>)
 8003b4c:	2180      	movs	r1, #128	; 0x80
 8003b4e:	0549      	lsls	r1, r1, #21
 8003b50:	430a      	orrs	r2, r1
 8003b52:	61da      	str	r2, [r3, #28]
 8003b54:	4b05      	ldr	r3, [pc, #20]	; (8003b6c <HAL_MspInit+0x44>)
 8003b56:	69da      	ldr	r2, [r3, #28]
 8003b58:	2380      	movs	r3, #128	; 0x80
 8003b5a:	055b      	lsls	r3, r3, #21
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	603b      	str	r3, [r7, #0]
 8003b60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b62:	46c0      	nop			; (mov r8, r8)
 8003b64:	46bd      	mov	sp, r7
 8003b66:	b002      	add	sp, #8
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	46c0      	nop			; (mov r8, r8)
 8003b6c:	40021000 	.word	0x40021000

08003b70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003b70:	b590      	push	{r4, r7, lr}
 8003b72:	b08b      	sub	sp, #44	; 0x2c
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b78:	2414      	movs	r4, #20
 8003b7a:	193b      	adds	r3, r7, r4
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	2314      	movs	r3, #20
 8003b80:	001a      	movs	r2, r3
 8003b82:	2100      	movs	r1, #0
 8003b84:	f00d fa72 	bl	801106c <memset>
  if(hadc->Instance==ADC1)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a31      	ldr	r2, [pc, #196]	; (8003c54 <HAL_ADC_MspInit+0xe4>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d15b      	bne.n	8003c4a <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003b92:	4b31      	ldr	r3, [pc, #196]	; (8003c58 <HAL_ADC_MspInit+0xe8>)
 8003b94:	699a      	ldr	r2, [r3, #24]
 8003b96:	4b30      	ldr	r3, [pc, #192]	; (8003c58 <HAL_ADC_MspInit+0xe8>)
 8003b98:	2180      	movs	r1, #128	; 0x80
 8003b9a:	0089      	lsls	r1, r1, #2
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	619a      	str	r2, [r3, #24]
 8003ba0:	4b2d      	ldr	r3, [pc, #180]	; (8003c58 <HAL_ADC_MspInit+0xe8>)
 8003ba2:	699a      	ldr	r2, [r3, #24]
 8003ba4:	2380      	movs	r3, #128	; 0x80
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4013      	ands	r3, r2
 8003baa:	613b      	str	r3, [r7, #16]
 8003bac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bae:	4b2a      	ldr	r3, [pc, #168]	; (8003c58 <HAL_ADC_MspInit+0xe8>)
 8003bb0:	695a      	ldr	r2, [r3, #20]
 8003bb2:	4b29      	ldr	r3, [pc, #164]	; (8003c58 <HAL_ADC_MspInit+0xe8>)
 8003bb4:	2180      	movs	r1, #128	; 0x80
 8003bb6:	0289      	lsls	r1, r1, #10
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	615a      	str	r2, [r3, #20]
 8003bbc:	4b26      	ldr	r3, [pc, #152]	; (8003c58 <HAL_ADC_MspInit+0xe8>)
 8003bbe:	695a      	ldr	r2, [r3, #20]
 8003bc0:	2380      	movs	r3, #128	; 0x80
 8003bc2:	029b      	lsls	r3, r3, #10
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC_IN3
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    */
    GPIO_InitStruct.Pin = Cabin_Snsr_Pin|Water_Snsr_Pin|Ambient_Snsr_Pin|Evap_Snsr_Pin
 8003bca:	193b      	adds	r3, r7, r4
 8003bcc:	22ef      	movs	r2, #239	; 0xef
 8003bce:	601a      	str	r2, [r3, #0]
                          |MD_FB_Pin|AM_FB_Pin|BL_VOLT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bd0:	193b      	adds	r3, r7, r4
 8003bd2:	2203      	movs	r2, #3
 8003bd4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd6:	193b      	adds	r3, r7, r4
 8003bd8:	2200      	movs	r2, #0
 8003bda:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bdc:	193a      	adds	r2, r7, r4
 8003bde:	2390      	movs	r3, #144	; 0x90
 8003be0:	05db      	lsls	r3, r3, #23
 8003be2:	0011      	movs	r1, r2
 8003be4:	0018      	movs	r0, r3
 8003be6:	f001 febd 	bl	8005964 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8003bea:	4b1c      	ldr	r3, [pc, #112]	; (8003c5c <HAL_ADC_MspInit+0xec>)
 8003bec:	4a1c      	ldr	r2, [pc, #112]	; (8003c60 <HAL_ADC_MspInit+0xf0>)
 8003bee:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003bf0:	4b1a      	ldr	r3, [pc, #104]	; (8003c5c <HAL_ADC_MspInit+0xec>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bf6:	4b19      	ldr	r3, [pc, #100]	; (8003c5c <HAL_ADC_MspInit+0xec>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8003bfc:	4b17      	ldr	r3, [pc, #92]	; (8003c5c <HAL_ADC_MspInit+0xec>)
 8003bfe:	2280      	movs	r2, #128	; 0x80
 8003c00:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003c02:	4b16      	ldr	r3, [pc, #88]	; (8003c5c <HAL_ADC_MspInit+0xec>)
 8003c04:	2280      	movs	r2, #128	; 0x80
 8003c06:	0052      	lsls	r2, r2, #1
 8003c08:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003c0a:	4b14      	ldr	r3, [pc, #80]	; (8003c5c <HAL_ADC_MspInit+0xec>)
 8003c0c:	2280      	movs	r2, #128	; 0x80
 8003c0e:	00d2      	lsls	r2, r2, #3
 8003c10:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8003c12:	4b12      	ldr	r3, [pc, #72]	; (8003c5c <HAL_ADC_MspInit+0xec>)
 8003c14:	2220      	movs	r2, #32
 8003c16:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8003c18:	4b10      	ldr	r3, [pc, #64]	; (8003c5c <HAL_ADC_MspInit+0xec>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8003c1e:	4b0f      	ldr	r3, [pc, #60]	; (8003c5c <HAL_ADC_MspInit+0xec>)
 8003c20:	0018      	movs	r0, r3
 8003c22:	f001 fccf 	bl	80055c4 <HAL_DMA_Init>
 8003c26:	1e03      	subs	r3, r0, #0
 8003c28:	d001      	beq.n	8003c2e <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8003c2a:	f7ff ff77 	bl	8003b1c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a0a      	ldr	r2, [pc, #40]	; (8003c5c <HAL_ADC_MspInit+0xec>)
 8003c32:	631a      	str	r2, [r3, #48]	; 0x30
 8003c34:	4b09      	ldr	r3, [pc, #36]	; (8003c5c <HAL_ADC_MspInit+0xec>)
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	625a      	str	r2, [r3, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_COMP_IRQn, 0, 0);
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	200c      	movs	r0, #12
 8003c40:	f001 fb40 	bl	80052c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_COMP_IRQn);
 8003c44:	200c      	movs	r0, #12
 8003c46:	f001 fb52 	bl	80052ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003c4a:	46c0      	nop			; (mov r8, r8)
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	b00b      	add	sp, #44	; 0x2c
 8003c50:	bd90      	pop	{r4, r7, pc}
 8003c52:	46c0      	nop			; (mov r8, r8)
 8003c54:	40012400 	.word	0x40012400
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	20000268 	.word	0x20000268
 8003c60:	40020008 	.word	0x40020008

08003c64 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003c64:	b590      	push	{r4, r7, lr}
 8003c66:	b08b      	sub	sp, #44	; 0x2c
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c6c:	2414      	movs	r4, #20
 8003c6e:	193b      	adds	r3, r7, r4
 8003c70:	0018      	movs	r0, r3
 8003c72:	2314      	movs	r3, #20
 8003c74:	001a      	movs	r2, r3
 8003c76:	2100      	movs	r1, #0
 8003c78:	f00d f9f8 	bl	801106c <memset>
  if(hdac->Instance==DAC)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a1d      	ldr	r2, [pc, #116]	; (8003cf8 <HAL_DAC_MspInit+0x94>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d133      	bne.n	8003cee <HAL_DAC_MspInit+0x8a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003c86:	4b1d      	ldr	r3, [pc, #116]	; (8003cfc <HAL_DAC_MspInit+0x98>)
 8003c88:	69da      	ldr	r2, [r3, #28]
 8003c8a:	4b1c      	ldr	r3, [pc, #112]	; (8003cfc <HAL_DAC_MspInit+0x98>)
 8003c8c:	2180      	movs	r1, #128	; 0x80
 8003c8e:	0589      	lsls	r1, r1, #22
 8003c90:	430a      	orrs	r2, r1
 8003c92:	61da      	str	r2, [r3, #28]
 8003c94:	4b19      	ldr	r3, [pc, #100]	; (8003cfc <HAL_DAC_MspInit+0x98>)
 8003c96:	69da      	ldr	r2, [r3, #28]
 8003c98:	2380      	movs	r3, #128	; 0x80
 8003c9a:	059b      	lsls	r3, r3, #22
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]
 8003ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ca2:	4b16      	ldr	r3, [pc, #88]	; (8003cfc <HAL_DAC_MspInit+0x98>)
 8003ca4:	695a      	ldr	r2, [r3, #20]
 8003ca6:	4b15      	ldr	r3, [pc, #84]	; (8003cfc <HAL_DAC_MspInit+0x98>)
 8003ca8:	2180      	movs	r1, #128	; 0x80
 8003caa:	0289      	lsls	r1, r1, #10
 8003cac:	430a      	orrs	r2, r1
 8003cae:	615a      	str	r2, [r3, #20]
 8003cb0:	4b12      	ldr	r3, [pc, #72]	; (8003cfc <HAL_DAC_MspInit+0x98>)
 8003cb2:	695a      	ldr	r2, [r3, #20]
 8003cb4:	2380      	movs	r3, #128	; 0x80
 8003cb6:	029b      	lsls	r3, r3, #10
 8003cb8:	4013      	ands	r3, r2
 8003cba:	60fb      	str	r3, [r7, #12]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = BL_Control_Pin;
 8003cbe:	193b      	adds	r3, r7, r4
 8003cc0:	2210      	movs	r2, #16
 8003cc2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003cc4:	193b      	adds	r3, r7, r4
 8003cc6:	2203      	movs	r2, #3
 8003cc8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cca:	193b      	adds	r3, r7, r4
 8003ccc:	2200      	movs	r2, #0
 8003cce:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(BL_Control_GPIO_Port, &GPIO_InitStruct);
 8003cd0:	193a      	adds	r2, r7, r4
 8003cd2:	2390      	movs	r3, #144	; 0x90
 8003cd4:	05db      	lsls	r3, r3, #23
 8003cd6:	0011      	movs	r1, r2
 8003cd8:	0018      	movs	r0, r3
 8003cda:	f001 fe43 	bl	8005964 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003cde:	2200      	movs	r2, #0
 8003ce0:	2100      	movs	r1, #0
 8003ce2:	2011      	movs	r0, #17
 8003ce4:	f001 faee 	bl	80052c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003ce8:	2011      	movs	r0, #17
 8003cea:	f001 fb00 	bl	80052ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003cee:	46c0      	nop			; (mov r8, r8)
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	b00b      	add	sp, #44	; 0x2c
 8003cf4:	bd90      	pop	{r4, r7, pc}
 8003cf6:	46c0      	nop			; (mov r8, r8)
 8003cf8:	40007400 	.word	0x40007400
 8003cfc:	40021000 	.word	0x40021000

08003d00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d00:	b590      	push	{r4, r7, lr}
 8003d02:	b08b      	sub	sp, #44	; 0x2c
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d08:	2414      	movs	r4, #20
 8003d0a:	193b      	adds	r3, r7, r4
 8003d0c:	0018      	movs	r0, r3
 8003d0e:	2314      	movs	r3, #20
 8003d10:	001a      	movs	r2, r3
 8003d12:	2100      	movs	r1, #0
 8003d14:	f00d f9aa 	bl	801106c <memset>
  if(hi2c->Instance==I2C2)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a1c      	ldr	r2, [pc, #112]	; (8003d90 <HAL_I2C_MspInit+0x90>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d132      	bne.n	8003d88 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d22:	4b1c      	ldr	r3, [pc, #112]	; (8003d94 <HAL_I2C_MspInit+0x94>)
 8003d24:	695a      	ldr	r2, [r3, #20]
 8003d26:	4b1b      	ldr	r3, [pc, #108]	; (8003d94 <HAL_I2C_MspInit+0x94>)
 8003d28:	2180      	movs	r1, #128	; 0x80
 8003d2a:	02c9      	lsls	r1, r1, #11
 8003d2c:	430a      	orrs	r2, r1
 8003d2e:	615a      	str	r2, [r3, #20]
 8003d30:	4b18      	ldr	r3, [pc, #96]	; (8003d94 <HAL_I2C_MspInit+0x94>)
 8003d32:	695a      	ldr	r2, [r3, #20]
 8003d34:	2380      	movs	r3, #128	; 0x80
 8003d36:	02db      	lsls	r3, r3, #11
 8003d38:	4013      	ands	r3, r2
 8003d3a:	613b      	str	r3, [r7, #16]
 8003d3c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003d3e:	193b      	adds	r3, r7, r4
 8003d40:	22c0      	movs	r2, #192	; 0xc0
 8003d42:	0112      	lsls	r2, r2, #4
 8003d44:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d46:	0021      	movs	r1, r4
 8003d48:	187b      	adds	r3, r7, r1
 8003d4a:	2212      	movs	r2, #18
 8003d4c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d4e:	187b      	adds	r3, r7, r1
 8003d50:	2201      	movs	r2, #1
 8003d52:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d54:	187b      	adds	r3, r7, r1
 8003d56:	2203      	movs	r2, #3
 8003d58:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C2;
 8003d5a:	187b      	adds	r3, r7, r1
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d60:	187b      	adds	r3, r7, r1
 8003d62:	4a0d      	ldr	r2, [pc, #52]	; (8003d98 <HAL_I2C_MspInit+0x98>)
 8003d64:	0019      	movs	r1, r3
 8003d66:	0010      	movs	r0, r2
 8003d68:	f001 fdfc 	bl	8005964 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003d6c:	4b09      	ldr	r3, [pc, #36]	; (8003d94 <HAL_I2C_MspInit+0x94>)
 8003d6e:	69da      	ldr	r2, [r3, #28]
 8003d70:	4b08      	ldr	r3, [pc, #32]	; (8003d94 <HAL_I2C_MspInit+0x94>)
 8003d72:	2180      	movs	r1, #128	; 0x80
 8003d74:	03c9      	lsls	r1, r1, #15
 8003d76:	430a      	orrs	r2, r1
 8003d78:	61da      	str	r2, [r3, #28]
 8003d7a:	4b06      	ldr	r3, [pc, #24]	; (8003d94 <HAL_I2C_MspInit+0x94>)
 8003d7c:	69da      	ldr	r2, [r3, #28]
 8003d7e:	2380      	movs	r3, #128	; 0x80
 8003d80:	03db      	lsls	r3, r3, #15
 8003d82:	4013      	ands	r3, r2
 8003d84:	60fb      	str	r3, [r7, #12]
 8003d86:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003d88:	46c0      	nop			; (mov r8, r8)
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	b00b      	add	sp, #44	; 0x2c
 8003d8e:	bd90      	pop	{r4, r7, pc}
 8003d90:	40005800 	.word	0x40005800
 8003d94:	40021000 	.word	0x40021000
 8003d98:	48000400 	.word	0x48000400

08003d9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003d9c:	b590      	push	{r4, r7, lr}
 8003d9e:	b08b      	sub	sp, #44	; 0x2c
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003da4:	2414      	movs	r4, #20
 8003da6:	193b      	adds	r3, r7, r4
 8003da8:	0018      	movs	r0, r3
 8003daa:	2314      	movs	r3, #20
 8003dac:	001a      	movs	r2, r3
 8003dae:	2100      	movs	r1, #0
 8003db0:	f00d f95c 	bl	801106c <memset>
  if(hspi->Instance==SPI1)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a1c      	ldr	r2, [pc, #112]	; (8003e2c <HAL_SPI_MspInit+0x90>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d131      	bne.n	8003e22 <HAL_SPI_MspInit+0x86>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003dbe:	4b1c      	ldr	r3, [pc, #112]	; (8003e30 <HAL_SPI_MspInit+0x94>)
 8003dc0:	699a      	ldr	r2, [r3, #24]
 8003dc2:	4b1b      	ldr	r3, [pc, #108]	; (8003e30 <HAL_SPI_MspInit+0x94>)
 8003dc4:	2180      	movs	r1, #128	; 0x80
 8003dc6:	0149      	lsls	r1, r1, #5
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	619a      	str	r2, [r3, #24]
 8003dcc:	4b18      	ldr	r3, [pc, #96]	; (8003e30 <HAL_SPI_MspInit+0x94>)
 8003dce:	699a      	ldr	r2, [r3, #24]
 8003dd0:	2380      	movs	r3, #128	; 0x80
 8003dd2:	015b      	lsls	r3, r3, #5
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]
 8003dd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dda:	4b15      	ldr	r3, [pc, #84]	; (8003e30 <HAL_SPI_MspInit+0x94>)
 8003ddc:	695a      	ldr	r2, [r3, #20]
 8003dde:	4b14      	ldr	r3, [pc, #80]	; (8003e30 <HAL_SPI_MspInit+0x94>)
 8003de0:	2180      	movs	r1, #128	; 0x80
 8003de2:	02c9      	lsls	r1, r1, #11
 8003de4:	430a      	orrs	r2, r1
 8003de6:	615a      	str	r2, [r3, #20]
 8003de8:	4b11      	ldr	r3, [pc, #68]	; (8003e30 <HAL_SPI_MspInit+0x94>)
 8003dea:	695a      	ldr	r2, [r3, #20]
 8003dec:	2380      	movs	r3, #128	; 0x80
 8003dee:	02db      	lsls	r3, r3, #11
 8003df0:	4013      	ands	r3, r2
 8003df2:	60fb      	str	r3, [r7, #12]
 8003df4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = TLE_SCLK_Pin|TLE_SDO_Pin|TLE_SDI_Pin;
 8003df6:	0021      	movs	r1, r4
 8003df8:	187b      	adds	r3, r7, r1
 8003dfa:	2238      	movs	r2, #56	; 0x38
 8003dfc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dfe:	187b      	adds	r3, r7, r1
 8003e00:	2202      	movs	r2, #2
 8003e02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e04:	187b      	adds	r3, r7, r1
 8003e06:	2200      	movs	r2, #0
 8003e08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e0a:	187b      	adds	r3, r7, r1
 8003e0c:	2203      	movs	r2, #3
 8003e0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003e10:	187b      	adds	r3, r7, r1
 8003e12:	2200      	movs	r2, #0
 8003e14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e16:	187b      	adds	r3, r7, r1
 8003e18:	4a06      	ldr	r2, [pc, #24]	; (8003e34 <HAL_SPI_MspInit+0x98>)
 8003e1a:	0019      	movs	r1, r3
 8003e1c:	0010      	movs	r0, r2
 8003e1e:	f001 fda1 	bl	8005964 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003e22:	46c0      	nop			; (mov r8, r8)
 8003e24:	46bd      	mov	sp, r7
 8003e26:	b00b      	add	sp, #44	; 0x2c
 8003e28:	bd90      	pop	{r4, r7, pc}
 8003e2a:	46c0      	nop			; (mov r8, r8)
 8003e2c:	40013000 	.word	0x40013000
 8003e30:	40021000 	.word	0x40021000
 8003e34:	48000400 	.word	0x48000400

08003e38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b08a      	sub	sp, #40	; 0x28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a56      	ldr	r2, [pc, #344]	; (8003fa0 <HAL_TIM_Base_MspInit+0x168>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d10e      	bne.n	8003e68 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003e4a:	4b56      	ldr	r3, [pc, #344]	; (8003fa4 <HAL_TIM_Base_MspInit+0x16c>)
 8003e4c:	699a      	ldr	r2, [r3, #24]
 8003e4e:	4b55      	ldr	r3, [pc, #340]	; (8003fa4 <HAL_TIM_Base_MspInit+0x16c>)
 8003e50:	2180      	movs	r1, #128	; 0x80
 8003e52:	0109      	lsls	r1, r1, #4
 8003e54:	430a      	orrs	r2, r1
 8003e56:	619a      	str	r2, [r3, #24]
 8003e58:	4b52      	ldr	r3, [pc, #328]	; (8003fa4 <HAL_TIM_Base_MspInit+0x16c>)
 8003e5a:	699a      	ldr	r2, [r3, #24]
 8003e5c:	2380      	movs	r3, #128	; 0x80
 8003e5e:	011b      	lsls	r3, r3, #4
 8003e60:	4013      	ands	r3, r2
 8003e62:	627b      	str	r3, [r7, #36]	; 0x24
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8003e66:	e097      	b.n	8003f98 <HAL_TIM_Base_MspInit+0x160>
  else if(htim_base->Instance==TIM2)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	2380      	movs	r3, #128	; 0x80
 8003e6e:	05db      	lsls	r3, r3, #23
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d114      	bne.n	8003e9e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e74:	4b4b      	ldr	r3, [pc, #300]	; (8003fa4 <HAL_TIM_Base_MspInit+0x16c>)
 8003e76:	69da      	ldr	r2, [r3, #28]
 8003e78:	4b4a      	ldr	r3, [pc, #296]	; (8003fa4 <HAL_TIM_Base_MspInit+0x16c>)
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	61da      	str	r2, [r3, #28]
 8003e80:	4b48      	ldr	r3, [pc, #288]	; (8003fa4 <HAL_TIM_Base_MspInit+0x16c>)
 8003e82:	69db      	ldr	r3, [r3, #28]
 8003e84:	2201      	movs	r2, #1
 8003e86:	4013      	ands	r3, r2
 8003e88:	623b      	str	r3, [r7, #32]
 8003e8a:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	2100      	movs	r1, #0
 8003e90:	200f      	movs	r0, #15
 8003e92:	f001 fa17 	bl	80052c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003e96:	200f      	movs	r0, #15
 8003e98:	f001 fa29 	bl	80052ee <HAL_NVIC_EnableIRQ>
}
 8003e9c:	e07c      	b.n	8003f98 <HAL_TIM_Base_MspInit+0x160>
  else if(htim_base->Instance==TIM3)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a41      	ldr	r2, [pc, #260]	; (8003fa8 <HAL_TIM_Base_MspInit+0x170>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d10c      	bne.n	8003ec2 <HAL_TIM_Base_MspInit+0x8a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003ea8:	4b3e      	ldr	r3, [pc, #248]	; (8003fa4 <HAL_TIM_Base_MspInit+0x16c>)
 8003eaa:	69da      	ldr	r2, [r3, #28]
 8003eac:	4b3d      	ldr	r3, [pc, #244]	; (8003fa4 <HAL_TIM_Base_MspInit+0x16c>)
 8003eae:	2102      	movs	r1, #2
 8003eb0:	430a      	orrs	r2, r1
 8003eb2:	61da      	str	r2, [r3, #28]
 8003eb4:	4b3b      	ldr	r3, [pc, #236]	; (8003fa4 <HAL_TIM_Base_MspInit+0x16c>)
 8003eb6:	69db      	ldr	r3, [r3, #28]
 8003eb8:	2202      	movs	r2, #2
 8003eba:	4013      	ands	r3, r2
 8003ebc:	61fb      	str	r3, [r7, #28]
 8003ebe:	69fb      	ldr	r3, [r7, #28]
}
 8003ec0:	e06a      	b.n	8003f98 <HAL_TIM_Base_MspInit+0x160>
  else if(htim_base->Instance==TIM6)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a39      	ldr	r2, [pc, #228]	; (8003fac <HAL_TIM_Base_MspInit+0x174>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d114      	bne.n	8003ef6 <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003ecc:	4b35      	ldr	r3, [pc, #212]	; (8003fa4 <HAL_TIM_Base_MspInit+0x16c>)
 8003ece:	69da      	ldr	r2, [r3, #28]
 8003ed0:	4b34      	ldr	r3, [pc, #208]	; (8003fa4 <HAL_TIM_Base_MspInit+0x16c>)
 8003ed2:	2110      	movs	r1, #16
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	61da      	str	r2, [r3, #28]
 8003ed8:	4b32      	ldr	r3, [pc, #200]	; (8003fa4 <HAL_TIM_Base_MspInit+0x16c>)
 8003eda:	69db      	ldr	r3, [r3, #28]
 8003edc:	2210      	movs	r2, #16
 8003ede:	4013      	ands	r3, r2
 8003ee0:	61bb      	str	r3, [r7, #24]
 8003ee2:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	2011      	movs	r0, #17
 8003eea:	f001 f9eb 	bl	80052c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003eee:	2011      	movs	r0, #17
 8003ef0:	f001 f9fd 	bl	80052ee <HAL_NVIC_EnableIRQ>
}
 8003ef4:	e050      	b.n	8003f98 <HAL_TIM_Base_MspInit+0x160>
  else if(htim_base->Instance==TIM7)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a2d      	ldr	r2, [pc, #180]	; (8003fb0 <HAL_TIM_Base_MspInit+0x178>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d114      	bne.n	8003f2a <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003f00:	4b28      	ldr	r3, [pc, #160]	; (8003fa4 <HAL_TIM_Base_MspInit+0x16c>)
 8003f02:	69da      	ldr	r2, [r3, #28]
 8003f04:	4b27      	ldr	r3, [pc, #156]	; (8003fa4 <HAL_TIM_Base_MspInit+0x16c>)
 8003f06:	2120      	movs	r1, #32
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	61da      	str	r2, [r3, #28]
 8003f0c:	4b25      	ldr	r3, [pc, #148]	; (8003fa4 <HAL_TIM_Base_MspInit+0x16c>)
 8003f0e:	69db      	ldr	r3, [r3, #28]
 8003f10:	2220      	movs	r2, #32
 8003f12:	4013      	ands	r3, r2
 8003f14:	617b      	str	r3, [r7, #20]
 8003f16:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003f18:	2200      	movs	r2, #0
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	2012      	movs	r0, #18
 8003f1e:	f001 f9d1 	bl	80052c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003f22:	2012      	movs	r0, #18
 8003f24:	f001 f9e3 	bl	80052ee <HAL_NVIC_EnableIRQ>
}
 8003f28:	e036      	b.n	8003f98 <HAL_TIM_Base_MspInit+0x160>
  else if(htim_base->Instance==TIM14)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a21      	ldr	r2, [pc, #132]	; (8003fb4 <HAL_TIM_Base_MspInit+0x17c>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d116      	bne.n	8003f62 <HAL_TIM_Base_MspInit+0x12a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003f34:	4b1b      	ldr	r3, [pc, #108]	; (8003fa4 <HAL_TIM_Base_MspInit+0x16c>)
 8003f36:	69da      	ldr	r2, [r3, #28]
 8003f38:	4b1a      	ldr	r3, [pc, #104]	; (8003fa4 <HAL_TIM_Base_MspInit+0x16c>)
 8003f3a:	2180      	movs	r1, #128	; 0x80
 8003f3c:	0049      	lsls	r1, r1, #1
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	61da      	str	r2, [r3, #28]
 8003f42:	4b18      	ldr	r3, [pc, #96]	; (8003fa4 <HAL_TIM_Base_MspInit+0x16c>)
 8003f44:	69da      	ldr	r2, [r3, #28]
 8003f46:	2380      	movs	r3, #128	; 0x80
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	613b      	str	r3, [r7, #16]
 8003f4e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8003f50:	2200      	movs	r2, #0
 8003f52:	2100      	movs	r1, #0
 8003f54:	2013      	movs	r0, #19
 8003f56:	f001 f9b5 	bl	80052c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8003f5a:	2013      	movs	r0, #19
 8003f5c:	f001 f9c7 	bl	80052ee <HAL_NVIC_EnableIRQ>
}
 8003f60:	e01a      	b.n	8003f98 <HAL_TIM_Base_MspInit+0x160>
  else if(htim_base->Instance==TIM15)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a14      	ldr	r2, [pc, #80]	; (8003fb8 <HAL_TIM_Base_MspInit+0x180>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d115      	bne.n	8003f98 <HAL_TIM_Base_MspInit+0x160>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003f6c:	4b0d      	ldr	r3, [pc, #52]	; (8003fa4 <HAL_TIM_Base_MspInit+0x16c>)
 8003f6e:	699a      	ldr	r2, [r3, #24]
 8003f70:	4b0c      	ldr	r3, [pc, #48]	; (8003fa4 <HAL_TIM_Base_MspInit+0x16c>)
 8003f72:	2180      	movs	r1, #128	; 0x80
 8003f74:	0249      	lsls	r1, r1, #9
 8003f76:	430a      	orrs	r2, r1
 8003f78:	619a      	str	r2, [r3, #24]
 8003f7a:	4b0a      	ldr	r3, [pc, #40]	; (8003fa4 <HAL_TIM_Base_MspInit+0x16c>)
 8003f7c:	699a      	ldr	r2, [r3, #24]
 8003f7e:	2380      	movs	r3, #128	; 0x80
 8003f80:	025b      	lsls	r3, r3, #9
 8003f82:	4013      	ands	r3, r2
 8003f84:	60fb      	str	r3, [r7, #12]
 8003f86:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8003f88:	2200      	movs	r2, #0
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	2014      	movs	r0, #20
 8003f8e:	f001 f999 	bl	80052c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8003f92:	2014      	movs	r0, #20
 8003f94:	f001 f9ab 	bl	80052ee <HAL_NVIC_EnableIRQ>
}
 8003f98:	46c0      	nop			; (mov r8, r8)
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	b00a      	add	sp, #40	; 0x28
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	40012c00 	.word	0x40012c00
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	40000400 	.word	0x40000400
 8003fac:	40001000 	.word	0x40001000
 8003fb0:	40001400 	.word	0x40001400
 8003fb4:	40002000 	.word	0x40002000
 8003fb8:	40014000 	.word	0x40014000

08003fbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003fbc:	b590      	push	{r4, r7, lr}
 8003fbe:	b089      	sub	sp, #36	; 0x24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fc4:	240c      	movs	r4, #12
 8003fc6:	193b      	adds	r3, r7, r4
 8003fc8:	0018      	movs	r0, r3
 8003fca:	2314      	movs	r3, #20
 8003fcc:	001a      	movs	r2, r3
 8003fce:	2100      	movs	r1, #0
 8003fd0:	f00d f84c 	bl	801106c <memset>
  if(htim->Instance==TIM3)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a15      	ldr	r2, [pc, #84]	; (8004030 <HAL_TIM_MspPostInit+0x74>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d123      	bne.n	8004026 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fde:	4b15      	ldr	r3, [pc, #84]	; (8004034 <HAL_TIM_MspPostInit+0x78>)
 8003fe0:	695a      	ldr	r2, [r3, #20]
 8003fe2:	4b14      	ldr	r3, [pc, #80]	; (8004034 <HAL_TIM_MspPostInit+0x78>)
 8003fe4:	2180      	movs	r1, #128	; 0x80
 8003fe6:	02c9      	lsls	r1, r1, #11
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	615a      	str	r2, [r3, #20]
 8003fec:	4b11      	ldr	r3, [pc, #68]	; (8004034 <HAL_TIM_MspPostInit+0x78>)
 8003fee:	695a      	ldr	r2, [r3, #20]
 8003ff0:	2380      	movs	r3, #128	; 0x80
 8003ff2:	02db      	lsls	r3, r3, #11
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	60bb      	str	r3, [r7, #8]
 8003ff8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = LCD_Backlight_Pin;
 8003ffa:	0021      	movs	r1, r4
 8003ffc:	187b      	adds	r3, r7, r1
 8003ffe:	2201      	movs	r2, #1
 8004000:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004002:	187b      	adds	r3, r7, r1
 8004004:	2202      	movs	r2, #2
 8004006:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004008:	187b      	adds	r3, r7, r1
 800400a:	2200      	movs	r2, #0
 800400c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800400e:	187b      	adds	r3, r7, r1
 8004010:	2200      	movs	r2, #0
 8004012:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8004014:	187b      	adds	r3, r7, r1
 8004016:	2201      	movs	r2, #1
 8004018:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(LCD_Backlight_GPIO_Port, &GPIO_InitStruct);
 800401a:	187b      	adds	r3, r7, r1
 800401c:	4a06      	ldr	r2, [pc, #24]	; (8004038 <HAL_TIM_MspPostInit+0x7c>)
 800401e:	0019      	movs	r1, r3
 8004020:	0010      	movs	r0, r2
 8004022:	f001 fc9f 	bl	8005964 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004026:	46c0      	nop			; (mov r8, r8)
 8004028:	46bd      	mov	sp, r7
 800402a:	b009      	add	sp, #36	; 0x24
 800402c:	bd90      	pop	{r4, r7, pc}
 800402e:	46c0      	nop			; (mov r8, r8)
 8004030:	40000400 	.word	0x40000400
 8004034:	40021000 	.word	0x40021000
 8004038:	48000400 	.word	0x48000400

0800403c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004040:	e7fe      	b.n	8004040 <NMI_Handler+0x4>

08004042 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004042:	b580      	push	{r7, lr}
 8004044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004046:	e7fe      	b.n	8004046 <HardFault_Handler+0x4>

08004048 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800404c:	46c0      	nop			; (mov r8, r8)
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004056:	46c0      	nop			; (mov r8, r8)
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004060:	f000 f9d2 	bl	8004408 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004064:	46c0      	nop			; (mov r8, r8)
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BL_Up_SW_Pin);
 800406e:	2002      	movs	r0, #2
 8004070:	f001 fe2a 	bl	8005cc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8004074:	46c0      	nop			; (mov r8, r8)
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IGN_Pin);
 800407e:	2020      	movs	r0, #32
 8004080:	f001 fe22 	bl	8005cc8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DEF_SW_Pin);
 8004084:	2040      	movs	r0, #64	; 0x40
 8004086:	f001 fe1f 	bl	8005cc8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(AM_Up_SW_Pin);
 800408a:	2080      	movs	r0, #128	; 0x80
 800408c:	f001 fe1c 	bl	8005cc8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(AM_Down_SW_Pin);
 8004090:	2380      	movs	r3, #128	; 0x80
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	0018      	movs	r0, r3
 8004096:	f001 fe17 	bl	8005cc8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(AUTO_SW_Pin);
 800409a:	2380      	movs	r3, #128	; 0x80
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	0018      	movs	r0, r3
 80040a0:	f001 fe12 	bl	8005cc8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(AC_SW_Pin);
 80040a4:	2380      	movs	r3, #128	; 0x80
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	0018      	movs	r0, r3
 80040aa:	f001 fe0d 	bl	8005cc8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RD_SW_Pin);
 80040ae:	2380      	movs	r3, #128	; 0x80
 80040b0:	011b      	lsls	r3, r3, #4
 80040b2:	0018      	movs	r0, r3
 80040b4:	f001 fe08 	bl	8005cc8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MD_SW_Pin);
 80040b8:	2380      	movs	r3, #128	; 0x80
 80040ba:	015b      	lsls	r3, r3, #5
 80040bc:	0018      	movs	r0, r3
 80040be:	f001 fe03 	bl	8005cc8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BL_Down_SW_Pin);
 80040c2:	2380      	movs	r3, #128	; 0x80
 80040c4:	019b      	lsls	r3, r3, #6
 80040c6:	0018      	movs	r0, r3
 80040c8:	f001 fdfe 	bl	8005cc8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(OFF_SW_Pin);
 80040cc:	2380      	movs	r3, #128	; 0x80
 80040ce:	01db      	lsls	r3, r3, #7
 80040d0:	0018      	movs	r0, r3
 80040d2:	f001 fdf9 	bl	8005cc8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IT_SW_Pin);
 80040d6:	2380      	movs	r3, #128	; 0x80
 80040d8:	021b      	lsls	r3, r3, #8
 80040da:	0018      	movs	r0, r3
 80040dc:	f001 fdf4 	bl	8005cc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80040e0:	46c0      	nop			; (mov r8, r8)
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
	...

080040e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80040ec:	4b03      	ldr	r3, [pc, #12]	; (80040fc <DMA1_Channel1_IRQHandler+0x14>)
 80040ee:	0018      	movs	r0, r3
 80040f0:	f001 fb4e 	bl	8005790 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80040f4:	46c0      	nop			; (mov r8, r8)
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	46c0      	nop			; (mov r8, r8)
 80040fc:	20000268 	.word	0x20000268

08004100 <ADC1_COMP_IRQHandler>:

/**
  * @brief This function handles ADC and COMP interrupts (COMP interrupts through EXTI lines 21 and 22).
  */
void ADC1_COMP_IRQHandler(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_COMP_IRQn 0 */

  /* USER CODE END ADC1_COMP_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8004104:	4b03      	ldr	r3, [pc, #12]	; (8004114 <ADC1_COMP_IRQHandler+0x14>)
 8004106:	0018      	movs	r0, r3
 8004108:	f000 fbd2 	bl	80048b0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_COMP_IRQn 1 */

  /* USER CODE END ADC1_COMP_IRQn 1 */
}
 800410c:	46c0      	nop			; (mov r8, r8)
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	46c0      	nop			; (mov r8, r8)
 8004114:	20000228 	.word	0x20000228

08004118 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800411c:	4b03      	ldr	r3, [pc, #12]	; (800412c <TIM2_IRQHandler+0x14>)
 800411e:	0018      	movs	r0, r3
 8004120:	f003 feda 	bl	8007ed8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004124:	46c0      	nop			; (mov r8, r8)
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	46c0      	nop			; (mov r8, r8)
 800412c:	200003b8 	.word	0x200003b8

08004130 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004134:	4b05      	ldr	r3, [pc, #20]	; (800414c <TIM6_DAC_IRQHandler+0x1c>)
 8004136:	0018      	movs	r0, r3
 8004138:	f003 fece 	bl	8007ed8 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac);
 800413c:	4b04      	ldr	r3, [pc, #16]	; (8004150 <TIM6_DAC_IRQHandler+0x20>)
 800413e:	0018      	movs	r0, r3
 8004140:	f001 f9d0 	bl	80054e4 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004144:	46c0      	nop			; (mov r8, r8)
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	46c0      	nop			; (mov r8, r8)
 800414c:	20000448 	.word	0x20000448
 8004150:	200002ac 	.word	0x200002ac

08004154 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004158:	4b03      	ldr	r3, [pc, #12]	; (8004168 <TIM7_IRQHandler+0x14>)
 800415a:	0018      	movs	r0, r3
 800415c:	f003 febc 	bl	8007ed8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004160:	46c0      	nop			; (mov r8, r8)
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	46c0      	nop			; (mov r8, r8)
 8004168:	20000490 	.word	0x20000490

0800416c <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8004170:	4b03      	ldr	r3, [pc, #12]	; (8004180 <TIM14_IRQHandler+0x14>)
 8004172:	0018      	movs	r0, r3
 8004174:	f003 feb0 	bl	8007ed8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8004178:	46c0      	nop			; (mov r8, r8)
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	46c0      	nop			; (mov r8, r8)
 8004180:	200004d8 	.word	0x200004d8

08004184 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8004188:	4b03      	ldr	r3, [pc, #12]	; (8004198 <TIM15_IRQHandler+0x14>)
 800418a:	0018      	movs	r0, r3
 800418c:	f003 fea4 	bl	8007ed8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8004190:	46c0      	nop			; (mov r8, r8)
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	46c0      	nop			; (mov r8, r8)
 8004198:	20000520 	.word	0x20000520

0800419c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
	return 1;
 80041a0:	2301      	movs	r3, #1
}
 80041a2:	0018      	movs	r0, r3
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <_kill>:

int _kill(int pid, int sig)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80041b2:	f00c ff31 	bl	8011018 <__errno>
 80041b6:	0003      	movs	r3, r0
 80041b8:	2216      	movs	r2, #22
 80041ba:	601a      	str	r2, [r3, #0]
	return -1;
 80041bc:	2301      	movs	r3, #1
 80041be:	425b      	negs	r3, r3
}
 80041c0:	0018      	movs	r0, r3
 80041c2:	46bd      	mov	sp, r7
 80041c4:	b002      	add	sp, #8
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <_exit>:

void _exit (int status)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80041d0:	2301      	movs	r3, #1
 80041d2:	425a      	negs	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	0011      	movs	r1, r2
 80041d8:	0018      	movs	r0, r3
 80041da:	f7ff ffe5 	bl	80041a8 <_kill>
	while (1) {}		/* Make sure we hang here */
 80041de:	e7fe      	b.n	80041de <_exit+0x16>

080041e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041ec:	2300      	movs	r3, #0
 80041ee:	617b      	str	r3, [r7, #20]
 80041f0:	e00a      	b.n	8004208 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80041f2:	e000      	b.n	80041f6 <_read+0x16>
 80041f4:	bf00      	nop
 80041f6:	0001      	movs	r1, r0
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	60ba      	str	r2, [r7, #8]
 80041fe:	b2ca      	uxtb	r2, r1
 8004200:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	3301      	adds	r3, #1
 8004206:	617b      	str	r3, [r7, #20]
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	429a      	cmp	r2, r3
 800420e:	dbf0      	blt.n	80041f2 <_read+0x12>
	}

return len;
 8004210:	687b      	ldr	r3, [r7, #4]
}
 8004212:	0018      	movs	r0, r3
 8004214:	46bd      	mov	sp, r7
 8004216:	b006      	add	sp, #24
 8004218:	bd80      	pop	{r7, pc}

0800421a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b086      	sub	sp, #24
 800421e:	af00      	add	r7, sp, #0
 8004220:	60f8      	str	r0, [r7, #12]
 8004222:	60b9      	str	r1, [r7, #8]
 8004224:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004226:	2300      	movs	r3, #0
 8004228:	617b      	str	r3, [r7, #20]
 800422a:	e009      	b.n	8004240 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	1c5a      	adds	r2, r3, #1
 8004230:	60ba      	str	r2, [r7, #8]
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	0018      	movs	r0, r3
 8004236:	e000      	b.n	800423a <_write+0x20>
 8004238:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	3301      	adds	r3, #1
 800423e:	617b      	str	r3, [r7, #20]
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	429a      	cmp	r2, r3
 8004246:	dbf1      	blt.n	800422c <_write+0x12>
	}
	return len;
 8004248:	687b      	ldr	r3, [r7, #4]
}
 800424a:	0018      	movs	r0, r3
 800424c:	46bd      	mov	sp, r7
 800424e:	b006      	add	sp, #24
 8004250:	bd80      	pop	{r7, pc}

08004252 <_close>:

int _close(int file)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b082      	sub	sp, #8
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
	return -1;
 800425a:	2301      	movs	r3, #1
 800425c:	425b      	negs	r3, r3
}
 800425e:	0018      	movs	r0, r3
 8004260:	46bd      	mov	sp, r7
 8004262:	b002      	add	sp, #8
 8004264:	bd80      	pop	{r7, pc}

08004266 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b082      	sub	sp, #8
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
 800426e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	2280      	movs	r2, #128	; 0x80
 8004274:	0192      	lsls	r2, r2, #6
 8004276:	605a      	str	r2, [r3, #4]
	return 0;
 8004278:	2300      	movs	r3, #0
}
 800427a:	0018      	movs	r0, r3
 800427c:	46bd      	mov	sp, r7
 800427e:	b002      	add	sp, #8
 8004280:	bd80      	pop	{r7, pc}

08004282 <_isatty>:

int _isatty(int file)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b082      	sub	sp, #8
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
	return 1;
 800428a:	2301      	movs	r3, #1
}
 800428c:	0018      	movs	r0, r3
 800428e:	46bd      	mov	sp, r7
 8004290:	b002      	add	sp, #8
 8004292:	bd80      	pop	{r7, pc}

08004294 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
	return 0;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	0018      	movs	r0, r3
 80042a4:	46bd      	mov	sp, r7
 80042a6:	b004      	add	sp, #16
 80042a8:	bd80      	pop	{r7, pc}
	...

080042ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042b4:	4a14      	ldr	r2, [pc, #80]	; (8004308 <_sbrk+0x5c>)
 80042b6:	4b15      	ldr	r3, [pc, #84]	; (800430c <_sbrk+0x60>)
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042c0:	4b13      	ldr	r3, [pc, #76]	; (8004310 <_sbrk+0x64>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d102      	bne.n	80042ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042c8:	4b11      	ldr	r3, [pc, #68]	; (8004310 <_sbrk+0x64>)
 80042ca:	4a12      	ldr	r2, [pc, #72]	; (8004314 <_sbrk+0x68>)
 80042cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042ce:	4b10      	ldr	r3, [pc, #64]	; (8004310 <_sbrk+0x64>)
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	18d3      	adds	r3, r2, r3
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d207      	bcs.n	80042ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042dc:	f00c fe9c 	bl	8011018 <__errno>
 80042e0:	0003      	movs	r3, r0
 80042e2:	220c      	movs	r2, #12
 80042e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042e6:	2301      	movs	r3, #1
 80042e8:	425b      	negs	r3, r3
 80042ea:	e009      	b.n	8004300 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042ec:	4b08      	ldr	r3, [pc, #32]	; (8004310 <_sbrk+0x64>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042f2:	4b07      	ldr	r3, [pc, #28]	; (8004310 <_sbrk+0x64>)
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	18d2      	adds	r2, r2, r3
 80042fa:	4b05      	ldr	r3, [pc, #20]	; (8004310 <_sbrk+0x64>)
 80042fc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80042fe:	68fb      	ldr	r3, [r7, #12]
}
 8004300:	0018      	movs	r0, r3
 8004302:	46bd      	mov	sp, r7
 8004304:	b006      	add	sp, #24
 8004306:	bd80      	pop	{r7, pc}
 8004308:	20004000 	.word	0x20004000
 800430c:	00000400 	.word	0x00000400
 8004310:	20000568 	.word	0x20000568
 8004314:	20000670 	.word	0x20000670

08004318 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800431c:	46c0      	nop			; (mov r8, r8)
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
	...

08004324 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004324:	480d      	ldr	r0, [pc, #52]	; (800435c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004326:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004328:	480d      	ldr	r0, [pc, #52]	; (8004360 <LoopForever+0x6>)
  ldr r1, =_edata
 800432a:	490e      	ldr	r1, [pc, #56]	; (8004364 <LoopForever+0xa>)
  ldr r2, =_sidata
 800432c:	4a0e      	ldr	r2, [pc, #56]	; (8004368 <LoopForever+0xe>)
  movs r3, #0
 800432e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004330:	e002      	b.n	8004338 <LoopCopyDataInit>

08004332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004336:	3304      	adds	r3, #4

08004338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800433a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800433c:	d3f9      	bcc.n	8004332 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800433e:	4a0b      	ldr	r2, [pc, #44]	; (800436c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004340:	4c0b      	ldr	r4, [pc, #44]	; (8004370 <LoopForever+0x16>)
  movs r3, #0
 8004342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004344:	e001      	b.n	800434a <LoopFillZerobss>

08004346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004348:	3204      	adds	r2, #4

0800434a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800434a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800434c:	d3fb      	bcc.n	8004346 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800434e:	f7ff ffe3 	bl	8004318 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004352:	f00c fe67 	bl	8011024 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004356:	f7fe fe8b 	bl	8003070 <main>

0800435a <LoopForever>:

LoopForever:
    b LoopForever
 800435a:	e7fe      	b.n	800435a <LoopForever>
  ldr   r0, =_estack
 800435c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8004360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004364:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8004368:	08015674 	.word	0x08015674
  ldr r2, =_sbss
 800436c:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8004370:	2000066c 	.word	0x2000066c

08004374 <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004374:	e7fe      	b.n	8004374 <CEC_CAN_IRQHandler>
	...

08004378 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800437c:	4b07      	ldr	r3, [pc, #28]	; (800439c <HAL_Init+0x24>)
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	4b06      	ldr	r3, [pc, #24]	; (800439c <HAL_Init+0x24>)
 8004382:	2110      	movs	r1, #16
 8004384:	430a      	orrs	r2, r1
 8004386:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8004388:	2003      	movs	r0, #3
 800438a:	f000 f809 	bl	80043a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800438e:	f7ff fbcb 	bl	8003b28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	0018      	movs	r0, r3
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	46c0      	nop			; (mov r8, r8)
 800439c:	40022000 	.word	0x40022000

080043a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043a0:	b590      	push	{r4, r7, lr}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043a8:	4b14      	ldr	r3, [pc, #80]	; (80043fc <HAL_InitTick+0x5c>)
 80043aa:	681c      	ldr	r4, [r3, #0]
 80043ac:	4b14      	ldr	r3, [pc, #80]	; (8004400 <HAL_InitTick+0x60>)
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	0019      	movs	r1, r3
 80043b2:	23fa      	movs	r3, #250	; 0xfa
 80043b4:	0098      	lsls	r0, r3, #2
 80043b6:	f7fb fec3 	bl	8000140 <__udivsi3>
 80043ba:	0003      	movs	r3, r0
 80043bc:	0019      	movs	r1, r3
 80043be:	0020      	movs	r0, r4
 80043c0:	f7fb febe 	bl	8000140 <__udivsi3>
 80043c4:	0003      	movs	r3, r0
 80043c6:	0018      	movs	r0, r3
 80043c8:	f000 ffa5 	bl	8005316 <HAL_SYSTICK_Config>
 80043cc:	1e03      	subs	r3, r0, #0
 80043ce:	d001      	beq.n	80043d4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e00f      	b.n	80043f4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b03      	cmp	r3, #3
 80043d8:	d80b      	bhi.n	80043f2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	2301      	movs	r3, #1
 80043de:	425b      	negs	r3, r3
 80043e0:	2200      	movs	r2, #0
 80043e2:	0018      	movs	r0, r3
 80043e4:	f000 ff6e 	bl	80052c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043e8:	4b06      	ldr	r3, [pc, #24]	; (8004404 <HAL_InitTick+0x64>)
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
 80043f0:	e000      	b.n	80043f4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
}
 80043f4:	0018      	movs	r0, r3
 80043f6:	46bd      	mov	sp, r7
 80043f8:	b003      	add	sp, #12
 80043fa:	bd90      	pop	{r4, r7, pc}
 80043fc:	20000000 	.word	0x20000000
 8004400:	20000008 	.word	0x20000008
 8004404:	20000004 	.word	0x20000004

08004408 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800440c:	4b05      	ldr	r3, [pc, #20]	; (8004424 <HAL_IncTick+0x1c>)
 800440e:	781b      	ldrb	r3, [r3, #0]
 8004410:	001a      	movs	r2, r3
 8004412:	4b05      	ldr	r3, [pc, #20]	; (8004428 <HAL_IncTick+0x20>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	18d2      	adds	r2, r2, r3
 8004418:	4b03      	ldr	r3, [pc, #12]	; (8004428 <HAL_IncTick+0x20>)
 800441a:	601a      	str	r2, [r3, #0]
}
 800441c:	46c0      	nop			; (mov r8, r8)
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	46c0      	nop			; (mov r8, r8)
 8004424:	20000008 	.word	0x20000008
 8004428:	2000056c 	.word	0x2000056c

0800442c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	af00      	add	r7, sp, #0
  return uwTick;
 8004430:	4b02      	ldr	r3, [pc, #8]	; (800443c <HAL_GetTick+0x10>)
 8004432:	681b      	ldr	r3, [r3, #0]
}
 8004434:	0018      	movs	r0, r3
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	46c0      	nop			; (mov r8, r8)
 800443c:	2000056c 	.word	0x2000056c

08004440 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004448:	230f      	movs	r3, #15
 800444a:	18fb      	adds	r3, r7, r3
 800444c:	2200      	movs	r2, #0
 800444e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8004450:	2300      	movs	r3, #0
 8004452:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e125      	b.n	80046aa <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10a      	bne.n	800447c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2234      	movs	r2, #52	; 0x34
 8004470:	2100      	movs	r1, #0
 8004472:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	0018      	movs	r0, r3
 8004478:	f7ff fb7a 	bl	8003b70 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004480:	2210      	movs	r2, #16
 8004482:	4013      	ands	r3, r2
 8004484:	d000      	beq.n	8004488 <HAL_ADC_Init+0x48>
 8004486:	e103      	b.n	8004690 <HAL_ADC_Init+0x250>
 8004488:	230f      	movs	r3, #15
 800448a:	18fb      	adds	r3, r7, r3
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d000      	beq.n	8004494 <HAL_ADC_Init+0x54>
 8004492:	e0fd      	b.n	8004690 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	2204      	movs	r2, #4
 800449c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 800449e:	d000      	beq.n	80044a2 <HAL_ADC_Init+0x62>
 80044a0:	e0f6      	b.n	8004690 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a6:	4a83      	ldr	r2, [pc, #524]	; (80046b4 <HAL_ADC_Init+0x274>)
 80044a8:	4013      	ands	r3, r2
 80044aa:	2202      	movs	r2, #2
 80044ac:	431a      	orrs	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	2203      	movs	r2, #3
 80044ba:	4013      	ands	r3, r2
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d112      	bne.n	80044e6 <HAL_ADC_Init+0xa6>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2201      	movs	r2, #1
 80044c8:	4013      	ands	r3, r2
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d009      	beq.n	80044e2 <HAL_ADC_Init+0xa2>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68da      	ldr	r2, [r3, #12]
 80044d4:	2380      	movs	r3, #128	; 0x80
 80044d6:	021b      	lsls	r3, r3, #8
 80044d8:	401a      	ands	r2, r3
 80044da:	2380      	movs	r3, #128	; 0x80
 80044dc:	021b      	lsls	r3, r3, #8
 80044de:	429a      	cmp	r2, r3
 80044e0:	d101      	bne.n	80044e6 <HAL_ADC_Init+0xa6>
 80044e2:	2301      	movs	r3, #1
 80044e4:	e000      	b.n	80044e8 <HAL_ADC_Init+0xa8>
 80044e6:	2300      	movs	r3, #0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d116      	bne.n	800451a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	2218      	movs	r2, #24
 80044f4:	4393      	bics	r3, r2
 80044f6:	0019      	movs	r1, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	0899      	lsrs	r1, r3, #2
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	430a      	orrs	r2, r1
 8004518:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68da      	ldr	r2, [r3, #12]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4964      	ldr	r1, [pc, #400]	; (80046b8 <HAL_ADC_Init+0x278>)
 8004526:	400a      	ands	r2, r1
 8004528:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	7e1b      	ldrb	r3, [r3, #24]
 800452e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	7e5b      	ldrb	r3, [r3, #25]
 8004534:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004536:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	7e9b      	ldrb	r3, [r3, #26]
 800453c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800453e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004544:	2b01      	cmp	r3, #1
 8004546:	d002      	beq.n	800454e <HAL_ADC_Init+0x10e>
 8004548:	2380      	movs	r3, #128	; 0x80
 800454a:	015b      	lsls	r3, r3, #5
 800454c:	e000      	b.n	8004550 <HAL_ADC_Init+0x110>
 800454e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004550:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8004556:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	691b      	ldr	r3, [r3, #16]
 800455c:	2b02      	cmp	r3, #2
 800455e:	d101      	bne.n	8004564 <HAL_ADC_Init+0x124>
 8004560:	2304      	movs	r3, #4
 8004562:	e000      	b.n	8004566 <HAL_ADC_Init+0x126>
 8004564:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8004566:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2124      	movs	r1, #36	; 0x24
 800456c:	5c5b      	ldrb	r3, [r3, r1]
 800456e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004570:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	4313      	orrs	r3, r2
 8004576:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	7edb      	ldrb	r3, [r3, #27]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d115      	bne.n	80045ac <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	7e9b      	ldrb	r3, [r3, #26]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d105      	bne.n	8004594 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	2280      	movs	r2, #128	; 0x80
 800458c:	0252      	lsls	r2, r2, #9
 800458e:	4313      	orrs	r3, r2
 8004590:	60bb      	str	r3, [r7, #8]
 8004592:	e00b      	b.n	80045ac <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004598:	2220      	movs	r2, #32
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a4:	2201      	movs	r2, #1
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	69da      	ldr	r2, [r3, #28]
 80045b0:	23c2      	movs	r3, #194	; 0xc2
 80045b2:	33ff      	adds	r3, #255	; 0xff
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d007      	beq.n	80045c8 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80045c0:	4313      	orrs	r3, r2
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68d9      	ldr	r1, [r3, #12]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68ba      	ldr	r2, [r7, #8]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045dc:	2380      	movs	r3, #128	; 0x80
 80045de:	055b      	lsls	r3, r3, #21
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d01b      	beq.n	800461c <HAL_ADC_Init+0x1dc>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d017      	beq.n	800461c <HAL_ADC_Init+0x1dc>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d013      	beq.n	800461c <HAL_ADC_Init+0x1dc>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f8:	2b03      	cmp	r3, #3
 80045fa:	d00f      	beq.n	800461c <HAL_ADC_Init+0x1dc>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004600:	2b04      	cmp	r3, #4
 8004602:	d00b      	beq.n	800461c <HAL_ADC_Init+0x1dc>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004608:	2b05      	cmp	r3, #5
 800460a:	d007      	beq.n	800461c <HAL_ADC_Init+0x1dc>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004610:	2b06      	cmp	r3, #6
 8004612:	d003      	beq.n	800461c <HAL_ADC_Init+0x1dc>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004618:	2b07      	cmp	r3, #7
 800461a:	d112      	bne.n	8004642 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	695a      	ldr	r2, [r3, #20]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2107      	movs	r1, #7
 8004628:	438a      	bics	r2, r1
 800462a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6959      	ldr	r1, [r3, #20]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004636:	2207      	movs	r2, #7
 8004638:	401a      	ands	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	430a      	orrs	r2, r1
 8004640:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	4a1c      	ldr	r2, [pc, #112]	; (80046bc <HAL_ADC_Init+0x27c>)
 800464a:	4013      	ands	r3, r2
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	429a      	cmp	r2, r3
 8004650:	d10b      	bne.n	800466a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465c:	2203      	movs	r2, #3
 800465e:	4393      	bics	r3, r2
 8004660:	2201      	movs	r2, #1
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004668:	e01c      	b.n	80046a4 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800466e:	2212      	movs	r2, #18
 8004670:	4393      	bics	r3, r2
 8004672:	2210      	movs	r2, #16
 8004674:	431a      	orrs	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800467e:	2201      	movs	r2, #1
 8004680:	431a      	orrs	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8004686:	230f      	movs	r3, #15
 8004688:	18fb      	adds	r3, r7, r3
 800468a:	2201      	movs	r2, #1
 800468c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800468e:	e009      	b.n	80046a4 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004694:	2210      	movs	r2, #16
 8004696:	431a      	orrs	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 800469c:	230f      	movs	r3, #15
 800469e:	18fb      	adds	r3, r7, r3
 80046a0:	2201      	movs	r2, #1
 80046a2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80046a4:	230f      	movs	r3, #15
 80046a6:	18fb      	adds	r3, r7, r3
 80046a8:	781b      	ldrb	r3, [r3, #0]
}
 80046aa:	0018      	movs	r0, r3
 80046ac:	46bd      	mov	sp, r7
 80046ae:	b004      	add	sp, #16
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	46c0      	nop			; (mov r8, r8)
 80046b4:	fffffefd 	.word	0xfffffefd
 80046b8:	fffe0219 	.word	0xfffe0219
 80046bc:	833fffe7 	.word	0x833fffe7

080046c0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80046c0:	b590      	push	{r4, r7, lr}
 80046c2:	b087      	sub	sp, #28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046cc:	2317      	movs	r3, #23
 80046ce:	18fb      	adds	r3, r7, r3
 80046d0:	2200      	movs	r2, #0
 80046d2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	2204      	movs	r2, #4
 80046dc:	4013      	ands	r3, r2
 80046de:	d15e      	bne.n	800479e <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2234      	movs	r2, #52	; 0x34
 80046e4:	5c9b      	ldrb	r3, [r3, r2]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d101      	bne.n	80046ee <HAL_ADC_Start_DMA+0x2e>
 80046ea:	2302      	movs	r3, #2
 80046ec:	e05e      	b.n	80047ac <HAL_ADC_Start_DMA+0xec>
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2234      	movs	r2, #52	; 0x34
 80046f2:	2101      	movs	r1, #1
 80046f4:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	7e5b      	ldrb	r3, [r3, #25]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d007      	beq.n	800470e <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80046fe:	2317      	movs	r3, #23
 8004700:	18fc      	adds	r4, r7, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	0018      	movs	r0, r3
 8004706:	f000 fab1 	bl	8004c6c <ADC_Enable>
 800470a:	0003      	movs	r3, r0
 800470c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800470e:	2317      	movs	r3, #23
 8004710:	18fb      	adds	r3, r7, r3
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d146      	bne.n	80047a6 <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471c:	4a25      	ldr	r2, [pc, #148]	; (80047b4 <HAL_ADC_Start_DMA+0xf4>)
 800471e:	4013      	ands	r3, r2
 8004720:	2280      	movs	r2, #128	; 0x80
 8004722:	0052      	lsls	r2, r2, #1
 8004724:	431a      	orrs	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2234      	movs	r2, #52	; 0x34
 8004734:	2100      	movs	r1, #0
 8004736:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473c:	4a1e      	ldr	r2, [pc, #120]	; (80047b8 <HAL_ADC_Start_DMA+0xf8>)
 800473e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004744:	4a1d      	ldr	r2, [pc, #116]	; (80047bc <HAL_ADC_Start_DMA+0xfc>)
 8004746:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474c:	4a1c      	ldr	r2, [pc, #112]	; (80047c0 <HAL_ADC_Start_DMA+0x100>)
 800474e:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	221c      	movs	r2, #28
 8004756:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685a      	ldr	r2, [r3, #4]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2110      	movs	r1, #16
 8004764:	430a      	orrs	r2, r1
 8004766:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2101      	movs	r1, #1
 8004774:	430a      	orrs	r2, r1
 8004776:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	3340      	adds	r3, #64	; 0x40
 8004782:	0019      	movs	r1, r3
 8004784:	68ba      	ldr	r2, [r7, #8]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f000 ff64 	bl	8005654 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689a      	ldr	r2, [r3, #8]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2104      	movs	r1, #4
 8004798:	430a      	orrs	r2, r1
 800479a:	609a      	str	r2, [r3, #8]
 800479c:	e003      	b.n	80047a6 <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800479e:	2317      	movs	r3, #23
 80047a0:	18fb      	adds	r3, r7, r3
 80047a2:	2202      	movs	r2, #2
 80047a4:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 80047a6:	2317      	movs	r3, #23
 80047a8:	18fb      	adds	r3, r7, r3
 80047aa:	781b      	ldrb	r3, [r3, #0]
}
 80047ac:	0018      	movs	r0, r3
 80047ae:	46bd      	mov	sp, r7
 80047b0:	b007      	add	sp, #28
 80047b2:	bd90      	pop	{r4, r7, pc}
 80047b4:	fffff0fe 	.word	0xfffff0fe
 80047b8:	08004ef1 	.word	0x08004ef1
 80047bc:	08004fa5 	.word	0x08004fa5
 80047c0:	08004fc3 	.word	0x08004fc3

080047c4 <HAL_ADC_Stop_DMA>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 80047c4:	b5b0      	push	{r4, r5, r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047cc:	230f      	movs	r3, #15
 80047ce:	18fb      	adds	r3, r7, r3
 80047d0:	2200      	movs	r2, #0
 80047d2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2234      	movs	r2, #52	; 0x34
 80047d8:	5c9b      	ldrb	r3, [r3, r2]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d101      	bne.n	80047e2 <HAL_ADC_Stop_DMA+0x1e>
 80047de:	2302      	movs	r3, #2
 80047e0:	e05f      	b.n	80048a2 <HAL_ADC_Stop_DMA+0xde>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2234      	movs	r2, #52	; 0x34
 80047e6:	2101      	movs	r1, #1
 80047e8:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80047ea:	250f      	movs	r5, #15
 80047ec:	197c      	adds	r4, r7, r5
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	0018      	movs	r0, r3
 80047f2:	f000 fb30 	bl	8004e56 <ADC_ConversionStop>
 80047f6:	0003      	movs	r3, r0
 80047f8:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80047fa:	0028      	movs	r0, r5
 80047fc:	183b      	adds	r3, r7, r0
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d147      	bne.n	8004894 <HAL_ADC_Stop_DMA+0xd0>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    hadc->Instance->CFGR1 &= ~ADC_CFGR1_DMAEN;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68da      	ldr	r2, [r3, #12]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2101      	movs	r1, #1
 8004810:	438a      	bics	r2, r1
 8004812:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004818:	2221      	movs	r2, #33	; 0x21
 800481a:	5c9b      	ldrb	r3, [r3, r2]
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d112      	bne.n	8004848 <HAL_ADC_Stop_DMA+0x84>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004826:	0005      	movs	r5, r0
 8004828:	183c      	adds	r4, r7, r0
 800482a:	0018      	movs	r0, r3
 800482c:	f000 ff78 	bl	8005720 <HAL_DMA_Abort>
 8004830:	0003      	movs	r3, r0
 8004832:	7023      	strb	r3, [r4, #0]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8004834:	197b      	adds	r3, r7, r5
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d005      	beq.n	8004848 <HAL_ADC_Stop_DMA+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004840:	2240      	movs	r2, #64	; 0x40
 8004842:	431a      	orrs	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685a      	ldr	r2, [r3, #4]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2110      	movs	r1, #16
 8004854:	438a      	bics	r2, r1
 8004856:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep  */
    /* in memory a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8004858:	220f      	movs	r2, #15
 800485a:	18bb      	adds	r3, r7, r2
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d107      	bne.n	8004872 <HAL_ADC_Stop_DMA+0xae>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8004862:	18bc      	adds	r4, r7, r2
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	0018      	movs	r0, r3
 8004868:	f000 fa84 	bl	8004d74 <ADC_Disable>
 800486c:	0003      	movs	r3, r0
 800486e:	7023      	strb	r3, [r4, #0]
 8004870:	e003      	b.n	800487a <HAL_ADC_Stop_DMA+0xb6>
    }
    else
    {
      ADC_Disable(hadc);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	0018      	movs	r0, r3
 8004876:	f000 fa7d 	bl	8004d74 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800487a:	230f      	movs	r3, #15
 800487c:	18fb      	adds	r3, r7, r3
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d107      	bne.n	8004894 <HAL_ADC_Stop_DMA+0xd0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004888:	4a08      	ldr	r2, [pc, #32]	; (80048ac <HAL_ADC_Stop_DMA+0xe8>)
 800488a:	4013      	ands	r3, r2
 800488c:	2201      	movs	r2, #1
 800488e:	431a      	orrs	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2234      	movs	r2, #52	; 0x34
 8004898:	2100      	movs	r1, #0
 800489a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800489c:	230f      	movs	r3, #15
 800489e:	18fb      	adds	r3, r7, r3
 80048a0:	781b      	ldrb	r3, [r3, #0]
}
 80048a2:	0018      	movs	r0, r3
 80048a4:	46bd      	mov	sp, r7
 80048a6:	b004      	add	sp, #16
 80048a8:	bdb0      	pop	{r4, r5, r7, pc}
 80048aa:	46c0      	nop			; (mov r8, r8)
 80048ac:	fffffefe 	.word	0xfffffefe

080048b0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2204      	movs	r2, #4
 80048c0:	4013      	ands	r3, r2
 80048c2:	2b04      	cmp	r3, #4
 80048c4:	d106      	bne.n	80048d4 <HAL_ADC_IRQHandler+0x24>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	2204      	movs	r2, #4
 80048ce:	4013      	ands	r3, r2
 80048d0:	2b04      	cmp	r3, #4
 80048d2:	d00d      	beq.n	80048f0 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2208      	movs	r2, #8
 80048dc:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80048de:	2b08      	cmp	r3, #8
 80048e0:	d14f      	bne.n	8004982 <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	2208      	movs	r2, #8
 80048ea:	4013      	ands	r3, r2
 80048ec:	2b08      	cmp	r3, #8
 80048ee:	d148      	bne.n	8004982 <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f4:	2210      	movs	r2, #16
 80048f6:	4013      	ands	r3, r2
 80048f8:	d106      	bne.n	8004908 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fe:	2280      	movs	r2, #128	; 0x80
 8004900:	0092      	lsls	r2, r2, #2
 8004902:	431a      	orrs	r2, r3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68da      	ldr	r2, [r3, #12]
 800490e:	23c0      	movs	r3, #192	; 0xc0
 8004910:	011b      	lsls	r3, r3, #4
 8004912:	4013      	ands	r3, r2
 8004914:	d12d      	bne.n	8004972 <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800491a:	2b00      	cmp	r3, #0
 800491c:	d129      	bne.n	8004972 <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2208      	movs	r2, #8
 8004926:	4013      	ands	r3, r2
 8004928:	2b08      	cmp	r3, #8
 800492a:	d122      	bne.n	8004972 <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	2204      	movs	r2, #4
 8004934:	4013      	ands	r3, r2
 8004936:	d110      	bne.n	800495a <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	685a      	ldr	r2, [r3, #4]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	210c      	movs	r1, #12
 8004944:	438a      	bics	r2, r1
 8004946:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494c:	4a33      	ldr	r2, [pc, #204]	; (8004a1c <HAL_ADC_IRQHandler+0x16c>)
 800494e:	4013      	ands	r3, r2
 8004950:	2201      	movs	r2, #1
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	639a      	str	r2, [r3, #56]	; 0x38
 8004958:	e00b      	b.n	8004972 <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495e:	2220      	movs	r2, #32
 8004960:	431a      	orrs	r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800496a:	2201      	movs	r2, #1
 800496c:	431a      	orrs	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	0018      	movs	r0, r3
 8004976:	f00b fd4d 	bl	8010414 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	220c      	movs	r2, #12
 8004980:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2280      	movs	r2, #128	; 0x80
 800498a:	4013      	ands	r3, r2
 800498c:	2b80      	cmp	r3, #128	; 0x80
 800498e:	d115      	bne.n	80049bc <HAL_ADC_IRQHandler+0x10c>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	2280      	movs	r2, #128	; 0x80
 8004998:	4013      	ands	r3, r2
 800499a:	2b80      	cmp	r3, #128	; 0x80
 800499c:	d10e      	bne.n	80049bc <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a2:	2280      	movs	r2, #128	; 0x80
 80049a4:	0252      	lsls	r2, r2, #9
 80049a6:	431a      	orrs	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	0018      	movs	r0, r3
 80049b0:	f000 f83e 	bl	8004a30 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2280      	movs	r2, #128	; 0x80
 80049ba:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2210      	movs	r2, #16
 80049c4:	4013      	ands	r3, r2
 80049c6:	2b10      	cmp	r3, #16
 80049c8:	d123      	bne.n	8004a12 <HAL_ADC_IRQHandler+0x162>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	2210      	movs	r2, #16
 80049d2:	4013      	ands	r3, r2
 80049d4:	2b10      	cmp	r3, #16
 80049d6:	d11c      	bne.n	8004a12 <HAL_ADC_IRQHandler+0x162>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d006      	beq.n	80049ee <HAL_ADC_IRQHandler+0x13e>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	2201      	movs	r2, #1
 80049e8:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d10d      	bne.n	8004a0a <HAL_ADC_IRQHandler+0x15a>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049f2:	2202      	movs	r2, #2
 80049f4:	431a      	orrs	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2210      	movs	r2, #16
 8004a00:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	0018      	movs	r0, r3
 8004a06:	f000 f81b 	bl	8004a40 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2210      	movs	r2, #16
 8004a10:	601a      	str	r2, [r3, #0]
  }

}
 8004a12:	46c0      	nop			; (mov r8, r8)
 8004a14:	46bd      	mov	sp, r7
 8004a16:	b002      	add	sp, #8
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	46c0      	nop			; (mov r8, r8)
 8004a1c:	fffffefe 	.word	0xfffffefe

08004a20 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004a28:	46c0      	nop			; (mov r8, r8)
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	b002      	add	sp, #8
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8004a38:	46c0      	nop			; (mov r8, r8)
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	b002      	add	sp, #8
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004a48:	46c0      	nop			; (mov r8, r8)
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	b002      	add	sp, #8
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a5a:	230f      	movs	r3, #15
 8004a5c:	18fb      	adds	r3, r7, r3
 8004a5e:	2200      	movs	r2, #0
 8004a60:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8004a62:	2300      	movs	r3, #0
 8004a64:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a6a:	2380      	movs	r3, #128	; 0x80
 8004a6c:	055b      	lsls	r3, r3, #21
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d011      	beq.n	8004a96 <HAL_ADC_ConfigChannel+0x46>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d00d      	beq.n	8004a96 <HAL_ADC_ConfigChannel+0x46>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d009      	beq.n	8004a96 <HAL_ADC_ConfigChannel+0x46>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a86:	2b03      	cmp	r3, #3
 8004a88:	d005      	beq.n	8004a96 <HAL_ADC_ConfigChannel+0x46>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	d001      	beq.n	8004a96 <HAL_ADC_ConfigChannel+0x46>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2234      	movs	r2, #52	; 0x34
 8004a9a:	5c9b      	ldrb	r3, [r3, r2]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d101      	bne.n	8004aa4 <HAL_ADC_ConfigChannel+0x54>
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	e0d0      	b.n	8004c46 <HAL_ADC_ConfigChannel+0x1f6>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2234      	movs	r2, #52	; 0x34
 8004aa8:	2101      	movs	r1, #1
 8004aaa:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	2204      	movs	r2, #4
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	d000      	beq.n	8004aba <HAL_ADC_ConfigChannel+0x6a>
 8004ab8:	e0b4      	b.n	8004c24 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	4a64      	ldr	r2, [pc, #400]	; (8004c50 <HAL_ADC_ConfigChannel+0x200>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d100      	bne.n	8004ac6 <HAL_ADC_ConfigChannel+0x76>
 8004ac4:	e082      	b.n	8004bcc <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	409a      	lsls	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	430a      	orrs	r2, r1
 8004ada:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae0:	2380      	movs	r3, #128	; 0x80
 8004ae2:	055b      	lsls	r3, r3, #21
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d037      	beq.n	8004b58 <HAL_ADC_ConfigChannel+0x108>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d033      	beq.n	8004b58 <HAL_ADC_ConfigChannel+0x108>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d02f      	beq.n	8004b58 <HAL_ADC_ConfigChannel+0x108>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afc:	2b03      	cmp	r3, #3
 8004afe:	d02b      	beq.n	8004b58 <HAL_ADC_ConfigChannel+0x108>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b04:	2b04      	cmp	r3, #4
 8004b06:	d027      	beq.n	8004b58 <HAL_ADC_ConfigChannel+0x108>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0c:	2b05      	cmp	r3, #5
 8004b0e:	d023      	beq.n	8004b58 <HAL_ADC_ConfigChannel+0x108>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b14:	2b06      	cmp	r3, #6
 8004b16:	d01f      	beq.n	8004b58 <HAL_ADC_ConfigChannel+0x108>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1c:	2b07      	cmp	r3, #7
 8004b1e:	d01b      	beq.n	8004b58 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	689a      	ldr	r2, [r3, #8]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	2107      	movs	r1, #7
 8004b2c:	400b      	ands	r3, r1
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d012      	beq.n	8004b58 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	695a      	ldr	r2, [r3, #20]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2107      	movs	r1, #7
 8004b3e:	438a      	bics	r2, r1
 8004b40:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	6959      	ldr	r1, [r3, #20]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	2207      	movs	r2, #7
 8004b4e:	401a      	ands	r2, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	430a      	orrs	r2, r1
 8004b56:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2b10      	cmp	r3, #16
 8004b5e:	d007      	beq.n	8004b70 <HAL_ADC_ConfigChannel+0x120>
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2b11      	cmp	r3, #17
 8004b66:	d003      	beq.n	8004b70 <HAL_ADC_ConfigChannel+0x120>
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2b12      	cmp	r3, #18
 8004b6e:	d163      	bne.n	8004c38 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004b70:	4b38      	ldr	r3, [pc, #224]	; (8004c54 <HAL_ADC_ConfigChannel+0x204>)
 8004b72:	6819      	ldr	r1, [r3, #0]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	2b10      	cmp	r3, #16
 8004b7a:	d009      	beq.n	8004b90 <HAL_ADC_ConfigChannel+0x140>
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2b11      	cmp	r3, #17
 8004b82:	d102      	bne.n	8004b8a <HAL_ADC_ConfigChannel+0x13a>
 8004b84:	2380      	movs	r3, #128	; 0x80
 8004b86:	03db      	lsls	r3, r3, #15
 8004b88:	e004      	b.n	8004b94 <HAL_ADC_ConfigChannel+0x144>
 8004b8a:	2380      	movs	r3, #128	; 0x80
 8004b8c:	045b      	lsls	r3, r3, #17
 8004b8e:	e001      	b.n	8004b94 <HAL_ADC_ConfigChannel+0x144>
 8004b90:	2380      	movs	r3, #128	; 0x80
 8004b92:	041b      	lsls	r3, r3, #16
 8004b94:	4a2f      	ldr	r2, [pc, #188]	; (8004c54 <HAL_ADC_ConfigChannel+0x204>)
 8004b96:	430b      	orrs	r3, r1
 8004b98:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2b10      	cmp	r3, #16
 8004ba0:	d14a      	bne.n	8004c38 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004ba2:	4b2d      	ldr	r3, [pc, #180]	; (8004c58 <HAL_ADC_ConfigChannel+0x208>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	492d      	ldr	r1, [pc, #180]	; (8004c5c <HAL_ADC_ConfigChannel+0x20c>)
 8004ba8:	0018      	movs	r0, r3
 8004baa:	f7fb fac9 	bl	8000140 <__udivsi3>
 8004bae:	0003      	movs	r3, r0
 8004bb0:	001a      	movs	r2, r3
 8004bb2:	0013      	movs	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	189b      	adds	r3, r3, r2
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004bbc:	e002      	b.n	8004bc4 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1f9      	bne.n	8004bbe <HAL_ADC_ConfigChannel+0x16e>
 8004bca:	e035      	b.n	8004c38 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2101      	movs	r1, #1
 8004bd8:	4099      	lsls	r1, r3
 8004bda:	000b      	movs	r3, r1
 8004bdc:	43d9      	mvns	r1, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	400a      	ands	r2, r1
 8004be4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2b10      	cmp	r3, #16
 8004bec:	d007      	beq.n	8004bfe <HAL_ADC_ConfigChannel+0x1ae>
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2b11      	cmp	r3, #17
 8004bf4:	d003      	beq.n	8004bfe <HAL_ADC_ConfigChannel+0x1ae>
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2b12      	cmp	r3, #18
 8004bfc:	d11c      	bne.n	8004c38 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004bfe:	4b15      	ldr	r3, [pc, #84]	; (8004c54 <HAL_ADC_ConfigChannel+0x204>)
 8004c00:	6819      	ldr	r1, [r3, #0]
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2b10      	cmp	r3, #16
 8004c08:	d007      	beq.n	8004c1a <HAL_ADC_ConfigChannel+0x1ca>
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2b11      	cmp	r3, #17
 8004c10:	d101      	bne.n	8004c16 <HAL_ADC_ConfigChannel+0x1c6>
 8004c12:	4b13      	ldr	r3, [pc, #76]	; (8004c60 <HAL_ADC_ConfigChannel+0x210>)
 8004c14:	e002      	b.n	8004c1c <HAL_ADC_ConfigChannel+0x1cc>
 8004c16:	4b13      	ldr	r3, [pc, #76]	; (8004c64 <HAL_ADC_ConfigChannel+0x214>)
 8004c18:	e000      	b.n	8004c1c <HAL_ADC_ConfigChannel+0x1cc>
 8004c1a:	4b13      	ldr	r3, [pc, #76]	; (8004c68 <HAL_ADC_ConfigChannel+0x218>)
 8004c1c:	4a0d      	ldr	r2, [pc, #52]	; (8004c54 <HAL_ADC_ConfigChannel+0x204>)
 8004c1e:	400b      	ands	r3, r1
 8004c20:	6013      	str	r3, [r2, #0]
 8004c22:	e009      	b.n	8004c38 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c28:	2220      	movs	r2, #32
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8004c30:	230f      	movs	r3, #15
 8004c32:	18fb      	adds	r3, r7, r3
 8004c34:	2201      	movs	r2, #1
 8004c36:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2234      	movs	r2, #52	; 0x34
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8004c40:	230f      	movs	r3, #15
 8004c42:	18fb      	adds	r3, r7, r3
 8004c44:	781b      	ldrb	r3, [r3, #0]
}
 8004c46:	0018      	movs	r0, r3
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	b004      	add	sp, #16
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	46c0      	nop			; (mov r8, r8)
 8004c50:	00001001 	.word	0x00001001
 8004c54:	40012708 	.word	0x40012708
 8004c58:	20000000 	.word	0x20000000
 8004c5c:	000f4240 	.word	0x000f4240
 8004c60:	ffbfffff 	.word	0xffbfffff
 8004c64:	feffffff 	.word	0xfeffffff
 8004c68:	ff7fffff 	.word	0xff7fffff

08004c6c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b084      	sub	sp, #16
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004c74:	2300      	movs	r3, #0
 8004c76:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	2203      	movs	r2, #3
 8004c84:	4013      	ands	r3, r2
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d112      	bne.n	8004cb0 <ADC_Enable+0x44>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2201      	movs	r2, #1
 8004c92:	4013      	ands	r3, r2
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d009      	beq.n	8004cac <ADC_Enable+0x40>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68da      	ldr	r2, [r3, #12]
 8004c9e:	2380      	movs	r3, #128	; 0x80
 8004ca0:	021b      	lsls	r3, r3, #8
 8004ca2:	401a      	ands	r2, r3
 8004ca4:	2380      	movs	r3, #128	; 0x80
 8004ca6:	021b      	lsls	r3, r3, #8
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d101      	bne.n	8004cb0 <ADC_Enable+0x44>
 8004cac:	2301      	movs	r3, #1
 8004cae:	e000      	b.n	8004cb2 <ADC_Enable+0x46>
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d152      	bne.n	8004d5c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	4a2a      	ldr	r2, [pc, #168]	; (8004d68 <ADC_Enable+0xfc>)
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	d00d      	beq.n	8004cde <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc6:	2210      	movs	r2, #16
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e03f      	b.n	8004d5e <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2101      	movs	r1, #1
 8004cea:	430a      	orrs	r2, r1
 8004cec:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004cee:	4b1f      	ldr	r3, [pc, #124]	; (8004d6c <ADC_Enable+0x100>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	491f      	ldr	r1, [pc, #124]	; (8004d70 <ADC_Enable+0x104>)
 8004cf4:	0018      	movs	r0, r3
 8004cf6:	f7fb fa23 	bl	8000140 <__udivsi3>
 8004cfa:	0003      	movs	r3, r0
 8004cfc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004cfe:	e002      	b.n	8004d06 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	3b01      	subs	r3, #1
 8004d04:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d1f9      	bne.n	8004d00 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8004d0c:	f7ff fb8e 	bl	800442c <HAL_GetTick>
 8004d10:	0003      	movs	r3, r0
 8004d12:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004d14:	e01b      	b.n	8004d4e <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004d16:	f7ff fb89 	bl	800442c <HAL_GetTick>
 8004d1a:	0002      	movs	r2, r0
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d914      	bls.n	8004d4e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d00d      	beq.n	8004d4e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d36:	2210      	movs	r2, #16
 8004d38:	431a      	orrs	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d42:	2201      	movs	r2, #1
 8004d44:	431a      	orrs	r2, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e007      	b.n	8004d5e <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2201      	movs	r2, #1
 8004d56:	4013      	ands	r3, r2
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d1dc      	bne.n	8004d16 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	0018      	movs	r0, r3
 8004d60:	46bd      	mov	sp, r7
 8004d62:	b004      	add	sp, #16
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	46c0      	nop			; (mov r8, r8)
 8004d68:	80000017 	.word	0x80000017
 8004d6c:	20000000 	.word	0x20000000
 8004d70:	000f4240 	.word	0x000f4240

08004d74 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	2203      	movs	r2, #3
 8004d88:	4013      	ands	r3, r2
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d112      	bne.n	8004db4 <ADC_Disable+0x40>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2201      	movs	r2, #1
 8004d96:	4013      	ands	r3, r2
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d009      	beq.n	8004db0 <ADC_Disable+0x3c>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68da      	ldr	r2, [r3, #12]
 8004da2:	2380      	movs	r3, #128	; 0x80
 8004da4:	021b      	lsls	r3, r3, #8
 8004da6:	401a      	ands	r2, r3
 8004da8:	2380      	movs	r3, #128	; 0x80
 8004daa:	021b      	lsls	r3, r3, #8
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d101      	bne.n	8004db4 <ADC_Disable+0x40>
 8004db0:	2301      	movs	r3, #1
 8004db2:	e000      	b.n	8004db6 <ADC_Disable+0x42>
 8004db4:	2300      	movs	r3, #0
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d048      	beq.n	8004e4c <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	2205      	movs	r2, #5
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d110      	bne.n	8004dea <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689a      	ldr	r2, [r3, #8]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2102      	movs	r1, #2
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	609a      	str	r2, [r3, #8]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2203      	movs	r2, #3
 8004dde:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004de0:	f7ff fb24 	bl	800442c <HAL_GetTick>
 8004de4:	0003      	movs	r3, r0
 8004de6:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004de8:	e029      	b.n	8004e3e <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dee:	2210      	movs	r2, #16
 8004df0:	431a      	orrs	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	431a      	orrs	r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e023      	b.n	8004e4e <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004e06:	f7ff fb11 	bl	800442c <HAL_GetTick>
 8004e0a:	0002      	movs	r2, r0
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d914      	bls.n	8004e3e <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d10d      	bne.n	8004e3e <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e26:	2210      	movs	r2, #16
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e32:	2201      	movs	r2, #1
 8004e34:	431a      	orrs	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e007      	b.n	8004e4e <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	2201      	movs	r2, #1
 8004e46:	4013      	ands	r3, r2
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d0dc      	beq.n	8004e06 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	0018      	movs	r0, r3
 8004e50:	46bd      	mov	sp, r7
 8004e52:	b004      	add	sp, #16
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b084      	sub	sp, #16
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	2204      	movs	r2, #4
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	d03a      	beq.n	8004ee4 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	2204      	movs	r2, #4
 8004e76:	4013      	ands	r3, r2
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d10d      	bne.n	8004e98 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	2202      	movs	r2, #2
 8004e84:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004e86:	d107      	bne.n	8004e98 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	689a      	ldr	r2, [r3, #8]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2110      	movs	r1, #16
 8004e94:	430a      	orrs	r2, r1
 8004e96:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004e98:	f7ff fac8 	bl	800442c <HAL_GetTick>
 8004e9c:	0003      	movs	r3, r0
 8004e9e:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8004ea0:	e01a      	b.n	8004ed8 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004ea2:	f7ff fac3 	bl	800442c <HAL_GetTick>
 8004ea6:	0002      	movs	r2, r0
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d913      	bls.n	8004ed8 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	2204      	movs	r2, #4
 8004eb8:	4013      	ands	r3, r2
 8004eba:	d00d      	beq.n	8004ed8 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec0:	2210      	movs	r2, #16
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ecc:	2201      	movs	r2, #1
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e006      	b.n	8004ee6 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	2204      	movs	r2, #4
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	d1de      	bne.n	8004ea2 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	0018      	movs	r0, r3
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	b004      	add	sp, #16
 8004eec:	bd80      	pop	{r7, pc}
	...

08004ef0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f02:	2250      	movs	r2, #80	; 0x50
 8004f04:	4013      	ands	r3, r2
 8004f06:	d140      	bne.n	8004f8a <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0c:	2280      	movs	r2, #128	; 0x80
 8004f0e:	0092      	lsls	r2, r2, #2
 8004f10:	431a      	orrs	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68da      	ldr	r2, [r3, #12]
 8004f1c:	23c0      	movs	r3, #192	; 0xc0
 8004f1e:	011b      	lsls	r3, r3, #4
 8004f20:	4013      	ands	r3, r2
 8004f22:	d12d      	bne.n	8004f80 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d129      	bne.n	8004f80 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2208      	movs	r2, #8
 8004f34:	4013      	ands	r3, r2
 8004f36:	2b08      	cmp	r3, #8
 8004f38:	d122      	bne.n	8004f80 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	2204      	movs	r2, #4
 8004f42:	4013      	ands	r3, r2
 8004f44:	d110      	bne.n	8004f68 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	210c      	movs	r1, #12
 8004f52:	438a      	bics	r2, r1
 8004f54:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5a:	4a11      	ldr	r2, [pc, #68]	; (8004fa0 <ADC_DMAConvCplt+0xb0>)
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	2201      	movs	r2, #1
 8004f60:	431a      	orrs	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	639a      	str	r2, [r3, #56]	; 0x38
 8004f66:	e00b      	b.n	8004f80 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f78:	2201      	movs	r2, #1
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	0018      	movs	r0, r3
 8004f84:	f00b fa46 	bl	8010414 <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8004f88:	e005      	b.n	8004f96 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	0010      	movs	r0, r2
 8004f94:	4798      	blx	r3
}
 8004f96:	46c0      	nop			; (mov r8, r8)
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	b004      	add	sp, #16
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	46c0      	nop			; (mov r8, r8)
 8004fa0:	fffffefe 	.word	0xfffffefe

08004fa4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb0:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	0018      	movs	r0, r3
 8004fb6:	f7ff fd33 	bl	8004a20 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004fba:	46c0      	nop			; (mov r8, r8)
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	b004      	add	sp, #16
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b084      	sub	sp, #16
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fce:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd4:	2240      	movs	r2, #64	; 0x40
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe0:	2204      	movs	r2, #4
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	0018      	movs	r0, r3
 8004fec:	f7ff fd28 	bl	8004a40 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ff0:	46c0      	nop			; (mov r8, r8)
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	b004      	add	sp, #16
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005000:	2317      	movs	r3, #23
 8005002:	18fb      	adds	r3, r7, r3
 8005004:	2200      	movs	r2, #0
 8005006:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8005008:	2300      	movs	r3, #0
 800500a:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 800500c:	2300      	movs	r3, #0
 800500e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2234      	movs	r2, #52	; 0x34
 8005014:	5c9b      	ldrb	r3, [r3, r2]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d101      	bne.n	800501e <HAL_ADCEx_Calibration_Start+0x26>
 800501a:	2302      	movs	r3, #2
 800501c:	e08d      	b.n	800513a <HAL_ADCEx_Calibration_Start+0x142>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2234      	movs	r2, #52	; 0x34
 8005022:	2101      	movs	r1, #1
 8005024:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	2203      	movs	r2, #3
 800502e:	4013      	ands	r3, r2
 8005030:	2b01      	cmp	r3, #1
 8005032:	d112      	bne.n	800505a <HAL_ADCEx_Calibration_Start+0x62>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	2201      	movs	r2, #1
 800503c:	4013      	ands	r3, r2
 800503e:	2b01      	cmp	r3, #1
 8005040:	d009      	beq.n	8005056 <HAL_ADCEx_Calibration_Start+0x5e>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68da      	ldr	r2, [r3, #12]
 8005048:	2380      	movs	r3, #128	; 0x80
 800504a:	021b      	lsls	r3, r3, #8
 800504c:	401a      	ands	r2, r3
 800504e:	2380      	movs	r3, #128	; 0x80
 8005050:	021b      	lsls	r3, r3, #8
 8005052:	429a      	cmp	r2, r3
 8005054:	d101      	bne.n	800505a <HAL_ADCEx_Calibration_Start+0x62>
 8005056:	2301      	movs	r3, #1
 8005058:	e000      	b.n	800505c <HAL_ADCEx_Calibration_Start+0x64>
 800505a:	2300      	movs	r3, #0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d15b      	bne.n	8005118 <HAL_ADCEx_Calibration_Start+0x120>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005064:	4a37      	ldr	r2, [pc, #220]	; (8005144 <HAL_ADCEx_Calibration_Start+0x14c>)
 8005066:	4013      	ands	r3, r2
 8005068:	2202      	movs	r2, #2
 800506a:	431a      	orrs	r2, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	639a      	str	r2, [r3, #56]	; 0x38
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	2203      	movs	r2, #3
 8005078:	4013      	ands	r3, r2
 800507a:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68da      	ldr	r2, [r3, #12]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2103      	movs	r1, #3
 8005088:	438a      	bics	r2, r1
 800508a:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689a      	ldr	r2, [r3, #8]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2180      	movs	r1, #128	; 0x80
 8005098:	0609      	lsls	r1, r1, #24
 800509a:	430a      	orrs	r2, r1
 800509c:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 800509e:	f7ff f9c5 	bl	800442c <HAL_GetTick>
 80050a2:	0003      	movs	r3, r0
 80050a4:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80050a6:	e01d      	b.n	80050e4 <HAL_ADCEx_Calibration_Start+0xec>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80050a8:	f7ff f9c0 	bl	800442c <HAL_GetTick>
 80050ac:	0002      	movs	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d916      	bls.n	80050e4 <HAL_ADCEx_Calibration_Start+0xec>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	0fdb      	lsrs	r3, r3, #31
 80050be:	07da      	lsls	r2, r3, #31
 80050c0:	2380      	movs	r3, #128	; 0x80
 80050c2:	061b      	lsls	r3, r3, #24
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d10d      	bne.n	80050e4 <HAL_ADCEx_Calibration_Start+0xec>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050cc:	2212      	movs	r2, #18
 80050ce:	4393      	bics	r3, r2
 80050d0:	2210      	movs	r2, #16
 80050d2:	431a      	orrs	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	639a      	str	r2, [r3, #56]	; 0x38
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2234      	movs	r2, #52	; 0x34
 80050dc:	2100      	movs	r1, #0
 80050de:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e02a      	b.n	800513a <HAL_ADCEx_Calibration_Start+0x142>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	0fdb      	lsrs	r3, r3, #31
 80050ec:	07da      	lsls	r2, r3, #31
 80050ee:	2380      	movs	r3, #128	; 0x80
 80050f0:	061b      	lsls	r3, r3, #24
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d0d8      	beq.n	80050a8 <HAL_ADCEx_Calibration_Start+0xb0>
        }
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68d9      	ldr	r1, [r3, #12]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	430a      	orrs	r2, r1
 8005104:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510a:	2203      	movs	r2, #3
 800510c:	4393      	bics	r3, r2
 800510e:	2201      	movs	r2, #1
 8005110:	431a      	orrs	r2, r3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	639a      	str	r2, [r3, #56]	; 0x38
 8005116:	e009      	b.n	800512c <HAL_ADCEx_Calibration_Start+0x134>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511c:	2220      	movs	r2, #32
 800511e:	431a      	orrs	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8005124:	2317      	movs	r3, #23
 8005126:	18fb      	adds	r3, r7, r3
 8005128:	2201      	movs	r2, #1
 800512a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2234      	movs	r2, #52	; 0x34
 8005130:	2100      	movs	r1, #0
 8005132:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8005134:	2317      	movs	r3, #23
 8005136:	18fb      	adds	r3, r7, r3
 8005138:	781b      	ldrb	r3, [r3, #0]
}
 800513a:	0018      	movs	r0, r3
 800513c:	46bd      	mov	sp, r7
 800513e:	b006      	add	sp, #24
 8005140:	bd80      	pop	{r7, pc}
 8005142:	46c0      	nop			; (mov r8, r8)
 8005144:	fffffefd 	.word	0xfffffefd

08005148 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	0002      	movs	r2, r0
 8005150:	1dfb      	adds	r3, r7, #7
 8005152:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005154:	1dfb      	adds	r3, r7, #7
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	2b7f      	cmp	r3, #127	; 0x7f
 800515a:	d809      	bhi.n	8005170 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800515c:	1dfb      	adds	r3, r7, #7
 800515e:	781b      	ldrb	r3, [r3, #0]
 8005160:	001a      	movs	r2, r3
 8005162:	231f      	movs	r3, #31
 8005164:	401a      	ands	r2, r3
 8005166:	4b04      	ldr	r3, [pc, #16]	; (8005178 <__NVIC_EnableIRQ+0x30>)
 8005168:	2101      	movs	r1, #1
 800516a:	4091      	lsls	r1, r2
 800516c:	000a      	movs	r2, r1
 800516e:	601a      	str	r2, [r3, #0]
  }
}
 8005170:	46c0      	nop			; (mov r8, r8)
 8005172:	46bd      	mov	sp, r7
 8005174:	b002      	add	sp, #8
 8005176:	bd80      	pop	{r7, pc}
 8005178:	e000e100 	.word	0xe000e100

0800517c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800517c:	b590      	push	{r4, r7, lr}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	0002      	movs	r2, r0
 8005184:	6039      	str	r1, [r7, #0]
 8005186:	1dfb      	adds	r3, r7, #7
 8005188:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800518a:	1dfb      	adds	r3, r7, #7
 800518c:	781b      	ldrb	r3, [r3, #0]
 800518e:	2b7f      	cmp	r3, #127	; 0x7f
 8005190:	d828      	bhi.n	80051e4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005192:	4a2f      	ldr	r2, [pc, #188]	; (8005250 <__NVIC_SetPriority+0xd4>)
 8005194:	1dfb      	adds	r3, r7, #7
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	b25b      	sxtb	r3, r3
 800519a:	089b      	lsrs	r3, r3, #2
 800519c:	33c0      	adds	r3, #192	; 0xc0
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	589b      	ldr	r3, [r3, r2]
 80051a2:	1dfa      	adds	r2, r7, #7
 80051a4:	7812      	ldrb	r2, [r2, #0]
 80051a6:	0011      	movs	r1, r2
 80051a8:	2203      	movs	r2, #3
 80051aa:	400a      	ands	r2, r1
 80051ac:	00d2      	lsls	r2, r2, #3
 80051ae:	21ff      	movs	r1, #255	; 0xff
 80051b0:	4091      	lsls	r1, r2
 80051b2:	000a      	movs	r2, r1
 80051b4:	43d2      	mvns	r2, r2
 80051b6:	401a      	ands	r2, r3
 80051b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	019b      	lsls	r3, r3, #6
 80051be:	22ff      	movs	r2, #255	; 0xff
 80051c0:	401a      	ands	r2, r3
 80051c2:	1dfb      	adds	r3, r7, #7
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	0018      	movs	r0, r3
 80051c8:	2303      	movs	r3, #3
 80051ca:	4003      	ands	r3, r0
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80051d0:	481f      	ldr	r0, [pc, #124]	; (8005250 <__NVIC_SetPriority+0xd4>)
 80051d2:	1dfb      	adds	r3, r7, #7
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	b25b      	sxtb	r3, r3
 80051d8:	089b      	lsrs	r3, r3, #2
 80051da:	430a      	orrs	r2, r1
 80051dc:	33c0      	adds	r3, #192	; 0xc0
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80051e2:	e031      	b.n	8005248 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80051e4:	4a1b      	ldr	r2, [pc, #108]	; (8005254 <__NVIC_SetPriority+0xd8>)
 80051e6:	1dfb      	adds	r3, r7, #7
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	0019      	movs	r1, r3
 80051ec:	230f      	movs	r3, #15
 80051ee:	400b      	ands	r3, r1
 80051f0:	3b08      	subs	r3, #8
 80051f2:	089b      	lsrs	r3, r3, #2
 80051f4:	3306      	adds	r3, #6
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	18d3      	adds	r3, r2, r3
 80051fa:	3304      	adds	r3, #4
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	1dfa      	adds	r2, r7, #7
 8005200:	7812      	ldrb	r2, [r2, #0]
 8005202:	0011      	movs	r1, r2
 8005204:	2203      	movs	r2, #3
 8005206:	400a      	ands	r2, r1
 8005208:	00d2      	lsls	r2, r2, #3
 800520a:	21ff      	movs	r1, #255	; 0xff
 800520c:	4091      	lsls	r1, r2
 800520e:	000a      	movs	r2, r1
 8005210:	43d2      	mvns	r2, r2
 8005212:	401a      	ands	r2, r3
 8005214:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	019b      	lsls	r3, r3, #6
 800521a:	22ff      	movs	r2, #255	; 0xff
 800521c:	401a      	ands	r2, r3
 800521e:	1dfb      	adds	r3, r7, #7
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	0018      	movs	r0, r3
 8005224:	2303      	movs	r3, #3
 8005226:	4003      	ands	r3, r0
 8005228:	00db      	lsls	r3, r3, #3
 800522a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800522c:	4809      	ldr	r0, [pc, #36]	; (8005254 <__NVIC_SetPriority+0xd8>)
 800522e:	1dfb      	adds	r3, r7, #7
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	001c      	movs	r4, r3
 8005234:	230f      	movs	r3, #15
 8005236:	4023      	ands	r3, r4
 8005238:	3b08      	subs	r3, #8
 800523a:	089b      	lsrs	r3, r3, #2
 800523c:	430a      	orrs	r2, r1
 800523e:	3306      	adds	r3, #6
 8005240:	009b      	lsls	r3, r3, #2
 8005242:	18c3      	adds	r3, r0, r3
 8005244:	3304      	adds	r3, #4
 8005246:	601a      	str	r2, [r3, #0]
}
 8005248:	46c0      	nop			; (mov r8, r8)
 800524a:	46bd      	mov	sp, r7
 800524c:	b003      	add	sp, #12
 800524e:	bd90      	pop	{r4, r7, pc}
 8005250:	e000e100 	.word	0xe000e100
 8005254:	e000ed00 	.word	0xe000ed00

08005258 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800525c:	f3bf 8f4f 	dsb	sy
}
 8005260:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005262:	4b04      	ldr	r3, [pc, #16]	; (8005274 <__NVIC_SystemReset+0x1c>)
 8005264:	4a04      	ldr	r2, [pc, #16]	; (8005278 <__NVIC_SystemReset+0x20>)
 8005266:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005268:	f3bf 8f4f 	dsb	sy
}
 800526c:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800526e:	46c0      	nop			; (mov r8, r8)
 8005270:	e7fd      	b.n	800526e <__NVIC_SystemReset+0x16>
 8005272:	46c0      	nop			; (mov r8, r8)
 8005274:	e000ed00 	.word	0xe000ed00
 8005278:	05fa0004 	.word	0x05fa0004

0800527c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	1e5a      	subs	r2, r3, #1
 8005288:	2380      	movs	r3, #128	; 0x80
 800528a:	045b      	lsls	r3, r3, #17
 800528c:	429a      	cmp	r2, r3
 800528e:	d301      	bcc.n	8005294 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005290:	2301      	movs	r3, #1
 8005292:	e010      	b.n	80052b6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005294:	4b0a      	ldr	r3, [pc, #40]	; (80052c0 <SysTick_Config+0x44>)
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	3a01      	subs	r2, #1
 800529a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800529c:	2301      	movs	r3, #1
 800529e:	425b      	negs	r3, r3
 80052a0:	2103      	movs	r1, #3
 80052a2:	0018      	movs	r0, r3
 80052a4:	f7ff ff6a 	bl	800517c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80052a8:	4b05      	ldr	r3, [pc, #20]	; (80052c0 <SysTick_Config+0x44>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80052ae:	4b04      	ldr	r3, [pc, #16]	; (80052c0 <SysTick_Config+0x44>)
 80052b0:	2207      	movs	r2, #7
 80052b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	0018      	movs	r0, r3
 80052b8:	46bd      	mov	sp, r7
 80052ba:	b002      	add	sp, #8
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	46c0      	nop			; (mov r8, r8)
 80052c0:	e000e010 	.word	0xe000e010

080052c4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	60b9      	str	r1, [r7, #8]
 80052cc:	607a      	str	r2, [r7, #4]
 80052ce:	210f      	movs	r1, #15
 80052d0:	187b      	adds	r3, r7, r1
 80052d2:	1c02      	adds	r2, r0, #0
 80052d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	187b      	adds	r3, r7, r1
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	b25b      	sxtb	r3, r3
 80052de:	0011      	movs	r1, r2
 80052e0:	0018      	movs	r0, r3
 80052e2:	f7ff ff4b 	bl	800517c <__NVIC_SetPriority>
}
 80052e6:	46c0      	nop			; (mov r8, r8)
 80052e8:	46bd      	mov	sp, r7
 80052ea:	b004      	add	sp, #16
 80052ec:	bd80      	pop	{r7, pc}

080052ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b082      	sub	sp, #8
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	0002      	movs	r2, r0
 80052f6:	1dfb      	adds	r3, r7, #7
 80052f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052fa:	1dfb      	adds	r3, r7, #7
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	b25b      	sxtb	r3, r3
 8005300:	0018      	movs	r0, r3
 8005302:	f7ff ff21 	bl	8005148 <__NVIC_EnableIRQ>
}
 8005306:	46c0      	nop			; (mov r8, r8)
 8005308:	46bd      	mov	sp, r7
 800530a:	b002      	add	sp, #8
 800530c:	bd80      	pop	{r7, pc}

0800530e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8005312:	f7ff ffa1 	bl	8005258 <__NVIC_SystemReset>

08005316 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005316:	b580      	push	{r7, lr}
 8005318:	b082      	sub	sp, #8
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	0018      	movs	r0, r3
 8005322:	f7ff ffab 	bl	800527c <SysTick_Config>
 8005326:	0003      	movs	r3, r0
}
 8005328:	0018      	movs	r0, r3
 800532a:	46bd      	mov	sp, r7
 800532c:	b002      	add	sp, #8
 800532e:	bd80      	pop	{r7, pc}

08005330 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e015      	b.n	800536e <HAL_DAC_Init+0x3e>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if (hdac->State == HAL_DAC_STATE_RESET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	791b      	ldrb	r3, [r3, #4]
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2b00      	cmp	r3, #0
 800534a:	d106      	bne.n	800535a <HAL_DAC_Init+0x2a>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	0018      	movs	r0, r3
 8005356:	f7fe fc85 	bl	8003c64 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2202      	movs	r2, #2
 800535e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	0018      	movs	r0, r3
 8005370:	46bd      	mov	sp, r7
 8005372:	b002      	add	sp, #8
 8005374:	bd80      	pop	{r7, pc}

08005376 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8005376:	b580      	push	{r7, lr}
 8005378:	b086      	sub	sp, #24
 800537a:	af00      	add	r7, sp, #0
 800537c:	60f8      	str	r0, [r7, #12]
 800537e:	60b9      	str	r1, [r7, #8]
 8005380:	607a      	str	r2, [r7, #4]
 8005382:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8005384:	2300      	movs	r3, #0
 8005386:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d105      	bne.n	80053a0 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	18d3      	adds	r3, r2, r3
 800539a:	3308      	adds	r3, #8
 800539c:	617b      	str	r3, [r7, #20]
 800539e:	e004      	b.n	80053aa <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80053a0:	697a      	ldr	r2, [r7, #20]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	18d3      	adds	r3, r2, r3
 80053a6:	3314      	adds	r3, #20
 80053a8:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	683a      	ldr	r2, [r7, #0]
 80053ae:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	0018      	movs	r0, r3
 80053b4:	46bd      	mov	sp, r7
 80053b6:	b006      	add	sp, #24
 80053b8:	bd80      	pop	{r7, pc}

080053ba <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b082      	sub	sp, #8
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80053c2:	46c0      	nop			; (mov r8, r8)
 80053c4:	46bd      	mov	sp, r7
 80053c6:	b002      	add	sp, #8
 80053c8:	bd80      	pop	{r7, pc}
	...

080053cc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80053d8:	2300      	movs	r3, #0
 80053da:	617b      	str	r3, [r7, #20]
 80053dc:	2300      	movs	r3, #0
 80053de:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	795b      	ldrb	r3, [r3, #5]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d101      	bne.n	80053ec <HAL_DAC_ConfigChannel+0x20>
 80053e8:	2302      	movs	r3, #2
 80053ea:	e029      	b.n	8005440 <HAL_DAC_ConfigChannel+0x74>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2201      	movs	r2, #1
 80053f0:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2202      	movs	r2, #2
 80053f6:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel); 
 8005400:	4a11      	ldr	r2, [pc, #68]	; (8005448 <HAL_DAC_ConfigChannel+0x7c>)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	409a      	lsls	r2, r3
 8005406:	0013      	movs	r3, r2
 8005408:	43da      	mvns	r2, r3
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	4013      	ands	r3, r2
 800540e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	4313      	orrs	r3, r2
 800541a:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	409a      	lsls	r2, r3
 8005422:	0013      	movs	r3, r2
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	4313      	orrs	r3, r2
 8005428:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2201      	movs	r2, #1
 8005436:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	0018      	movs	r0, r3
 8005442:	46bd      	mov	sp, r7
 8005444:	b006      	add	sp, #24
 8005446:	bd80      	pop	{r7, pc}
 8005448:	00000ffe 	.word	0x00000ffe

0800544c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b082      	sub	sp, #8
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	795b      	ldrb	r3, [r3, #5]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d101      	bne.n	8005462 <HAL_DAC_Start+0x16>
 800545e:	2302      	movs	r3, #2
 8005460:	e03b      	b.n	80054da <HAL_DAC_Start+0x8e>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2202      	movs	r2, #2
 800546c:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripharal */
  __HAL_DAC_ENABLE(hdac, Channel);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	6819      	ldr	r1, [r3, #0]
 8005474:	2201      	movs	r2, #1
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	409a      	lsls	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	430a      	orrs	r2, r1
 8005480:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10f      	bne.n	80054a8 <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	223c      	movs	r2, #60	; 0x3c
 8005490:	4013      	ands	r3, r2
 8005492:	2b3c      	cmp	r3, #60	; 0x3c
 8005494:	d11a      	bne.n	80054cc <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	685a      	ldr	r2, [r3, #4]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2101      	movs	r1, #1
 80054a2:	430a      	orrs	r2, r1
 80054a4:	605a      	str	r2, [r3, #4]
 80054a6:	e011      	b.n	80054cc <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	23f0      	movs	r3, #240	; 0xf0
 80054b0:	039b      	lsls	r3, r3, #14
 80054b2:	401a      	ands	r2, r3
 80054b4:	23f0      	movs	r3, #240	; 0xf0
 80054b6:	039b      	lsls	r3, r3, #14
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d107      	bne.n	80054cc <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	685a      	ldr	r2, [r3, #4]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2102      	movs	r1, #2
 80054c8:	430a      	orrs	r2, r1
 80054ca:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	0018      	movs	r0, r3
 80054dc:	46bd      	mov	sp, r7
 80054de:	b002      	add	sp, #8
 80054e0:	bd80      	pop	{r7, pc}
	...

080054e4 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	2380      	movs	r3, #128	; 0x80
 80054f4:	019b      	lsls	r3, r3, #6
 80054f6:	401a      	ands	r2, r3
 80054f8:	2380      	movs	r3, #128	; 0x80
 80054fa:	019b      	lsls	r3, r3, #6
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d123      	bne.n	8005548 <HAL_DAC_IRQHandler+0x64>
  { 
    /* Check underrun channel 1 flag */
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005506:	2380      	movs	r3, #128	; 0x80
 8005508:	019b      	lsls	r3, r3, #6
 800550a:	401a      	ands	r2, r3
 800550c:	2380      	movs	r3, #128	; 0x80
 800550e:	019b      	lsls	r3, r3, #6
 8005510:	429a      	cmp	r2, r3
 8005512:	d119      	bne.n	8005548 <HAL_DAC_IRQHandler+0x64>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2204      	movs	r2, #4
 8005518:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to channel1 DMA underrun error */
      hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	2201      	movs	r2, #1
 8005520:	431a      	orrs	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	611a      	str	r2, [r3, #16]
    
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2280      	movs	r2, #128	; 0x80
 800552c:	0192      	lsls	r2, r2, #6
 800552e:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	491c      	ldr	r1, [pc, #112]	; (80055ac <HAL_DAC_IRQHandler+0xc8>)
 800553c:	400a      	ands	r2, r1
 800553e:	601a      	str	r2, [r3, #0]
    
      /* Error callback */ 
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	0018      	movs	r0, r3
 8005544:	f7ff ff39 	bl	80053ba <HAL_DAC_DMAUnderrunCallbackCh1>
    }
  }
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	2380      	movs	r3, #128	; 0x80
 8005550:	059b      	lsls	r3, r3, #22
 8005552:	401a      	ands	r2, r3
 8005554:	2380      	movs	r3, #128	; 0x80
 8005556:	059b      	lsls	r3, r3, #22
 8005558:	429a      	cmp	r2, r3
 800555a:	d123      	bne.n	80055a4 <HAL_DAC_IRQHandler+0xc0>
  {
    /* Check underrun channel 2 flag */
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005562:	2380      	movs	r3, #128	; 0x80
 8005564:	059b      	lsls	r3, r3, #22
 8005566:	401a      	ands	r2, r3
 8005568:	2380      	movs	r3, #128	; 0x80
 800556a:	059b      	lsls	r3, r3, #22
 800556c:	429a      	cmp	r2, r3
 800556e:	d119      	bne.n	80055a4 <HAL_DAC_IRQHandler+0xc0>
    { 
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2204      	movs	r2, #4
 8005574:	711a      	strb	r2, [r3, #4]
    
      /* Set DAC error code to channel2 DMA underrun error */
      hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	2202      	movs	r2, #2
 800557c:	431a      	orrs	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	611a      	str	r2, [r3, #16]
    
      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2280      	movs	r2, #128	; 0x80
 8005588:	0592      	lsls	r2, r2, #22
 800558a:	635a      	str	r2, [r3, #52]	; 0x34
    
      /* Disable the selected DAC channel1 DMA request */
      hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4906      	ldr	r1, [pc, #24]	; (80055b0 <HAL_DAC_IRQHandler+0xcc>)
 8005598:	400a      	ands	r2, r1
 800559a:	601a      	str	r2, [r3, #0]
    
      /* Error callback */ 
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	0018      	movs	r0, r3
 80055a0:	f000 f808 	bl	80055b4 <HAL_DACEx_DMAUnderrunCallbackCh2>
    }
  }
}
 80055a4:	46c0      	nop			; (mov r8, r8)
 80055a6:	46bd      	mov	sp, r7
 80055a8:	b002      	add	sp, #8
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	ffffefff 	.word	0xffffefff
 80055b0:	efffffff 	.word	0xefffffff

080055b4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80055bc:	46c0      	nop			; (mov r8, r8)
 80055be:	46bd      	mov	sp, r7
 80055c0:	b002      	add	sp, #8
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80055cc:	2300      	movs	r3, #0
 80055ce:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e036      	b.n	8005648 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2221      	movs	r2, #33	; 0x21
 80055de:	2102      	movs	r1, #2
 80055e0:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	4a18      	ldr	r2, [pc, #96]	; (8005650 <HAL_DMA_Init+0x8c>)
 80055ee:	4013      	ands	r3, r2
 80055f0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80055fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005606:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	695b      	ldr	r3, [r3, #20]
 800560c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005612:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	69db      	ldr	r3, [r3, #28]
 8005618:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	4313      	orrs	r3, r2
 800561e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	0018      	movs	r0, r3
 800562c:	f000 f97e 	bl	800592c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2221      	movs	r2, #33	; 0x21
 800563a:	2101      	movs	r1, #1
 800563c:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2220      	movs	r2, #32
 8005642:	2100      	movs	r1, #0
 8005644:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8005646:	2300      	movs	r3, #0
}  
 8005648:	0018      	movs	r0, r3
 800564a:	46bd      	mov	sp, r7
 800564c:	b004      	add	sp, #16
 800564e:	bd80      	pop	{r7, pc}
 8005650:	ffffc00f 	.word	0xffffc00f

08005654 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af00      	add	r7, sp, #0
 800565a:	60f8      	str	r0, [r7, #12]
 800565c:	60b9      	str	r1, [r7, #8]
 800565e:	607a      	str	r2, [r7, #4]
 8005660:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8005662:	2317      	movs	r3, #23
 8005664:	18fb      	adds	r3, r7, r3
 8005666:	2200      	movs	r2, #0
 8005668:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2220      	movs	r2, #32
 800566e:	5c9b      	ldrb	r3, [r3, r2]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d101      	bne.n	8005678 <HAL_DMA_Start_IT+0x24>
 8005674:	2302      	movs	r3, #2
 8005676:	e04f      	b.n	8005718 <HAL_DMA_Start_IT+0xc4>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2220      	movs	r2, #32
 800567c:	2101      	movs	r1, #1
 800567e:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2221      	movs	r2, #33	; 0x21
 8005684:	5c9b      	ldrb	r3, [r3, r2]
 8005686:	b2db      	uxtb	r3, r3
 8005688:	2b01      	cmp	r3, #1
 800568a:	d13a      	bne.n	8005702 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2221      	movs	r2, #33	; 0x21
 8005690:	2102      	movs	r1, #2
 8005692:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2101      	movs	r1, #1
 80056a6:	438a      	bics	r2, r1
 80056a8:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	68b9      	ldr	r1, [r7, #8]
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f000 f90f 	bl	80058d4 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d008      	beq.n	80056d0 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	210e      	movs	r1, #14
 80056ca:	430a      	orrs	r2, r1
 80056cc:	601a      	str	r2, [r3, #0]
 80056ce:	e00f      	b.n	80056f0 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	210a      	movs	r1, #10
 80056dc:	430a      	orrs	r2, r1
 80056de:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2104      	movs	r1, #4
 80056ec:	438a      	bics	r2, r1
 80056ee:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2101      	movs	r1, #1
 80056fc:	430a      	orrs	r2, r1
 80056fe:	601a      	str	r2, [r3, #0]
 8005700:	e007      	b.n	8005712 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2220      	movs	r2, #32
 8005706:	2100      	movs	r1, #0
 8005708:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 800570a:	2317      	movs	r3, #23
 800570c:	18fb      	adds	r3, r7, r3
 800570e:	2202      	movs	r2, #2
 8005710:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 8005712:	2317      	movs	r3, #23
 8005714:	18fb      	adds	r3, r7, r3
 8005716:	781b      	ldrb	r3, [r3, #0]
} 
 8005718:	0018      	movs	r0, r3
 800571a:	46bd      	mov	sp, r7
 800571c:	b006      	add	sp, #24
 800571e:	bd80      	pop	{r7, pc}

08005720 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2221      	movs	r2, #33	; 0x21
 800572c:	5c9b      	ldrb	r3, [r3, r2]
 800572e:	b2db      	uxtb	r3, r3
 8005730:	2b02      	cmp	r3, #2
 8005732:	d008      	beq.n	8005746 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2204      	movs	r2, #4
 8005738:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2220      	movs	r2, #32
 800573e:	2100      	movs	r1, #0
 8005740:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e020      	b.n	8005788 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	210e      	movs	r1, #14
 8005752:	438a      	bics	r2, r1
 8005754:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2101      	movs	r1, #1
 8005762:	438a      	bics	r2, r1
 8005764:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800576e:	2101      	movs	r1, #1
 8005770:	4091      	lsls	r1, r2
 8005772:	000a      	movs	r2, r1
 8005774:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2221      	movs	r2, #33	; 0x21
 800577a:	2101      	movs	r1, #1
 800577c:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2220      	movs	r2, #32
 8005782:	2100      	movs	r1, #0
 8005784:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	0018      	movs	r0, r3
 800578a:	46bd      	mov	sp, r7
 800578c:	b002      	add	sp, #8
 800578e:	bd80      	pop	{r7, pc}

08005790 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ac:	2204      	movs	r2, #4
 80057ae:	409a      	lsls	r2, r3
 80057b0:	0013      	movs	r3, r2
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	4013      	ands	r3, r2
 80057b6:	d024      	beq.n	8005802 <HAL_DMA_IRQHandler+0x72>
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	2204      	movs	r2, #4
 80057bc:	4013      	ands	r3, r2
 80057be:	d020      	beq.n	8005802 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2220      	movs	r2, #32
 80057c8:	4013      	ands	r3, r2
 80057ca:	d107      	bne.n	80057dc <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2104      	movs	r1, #4
 80057d8:	438a      	bics	r2, r1
 80057da:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e4:	2104      	movs	r1, #4
 80057e6:	4091      	lsls	r1, r2
 80057e8:	000a      	movs	r2, r1
 80057ea:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d100      	bne.n	80057f6 <HAL_DMA_IRQHandler+0x66>
 80057f4:	e06a      	b.n	80058cc <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	0010      	movs	r0, r2
 80057fe:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8005800:	e064      	b.n	80058cc <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005806:	2202      	movs	r2, #2
 8005808:	409a      	lsls	r2, r3
 800580a:	0013      	movs	r3, r2
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	4013      	ands	r3, r2
 8005810:	d02b      	beq.n	800586a <HAL_DMA_IRQHandler+0xda>
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	2202      	movs	r2, #2
 8005816:	4013      	ands	r3, r2
 8005818:	d027      	beq.n	800586a <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2220      	movs	r2, #32
 8005822:	4013      	ands	r3, r2
 8005824:	d10b      	bne.n	800583e <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	210a      	movs	r1, #10
 8005832:	438a      	bics	r2, r1
 8005834:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2221      	movs	r2, #33	; 0x21
 800583a:	2101      	movs	r1, #1
 800583c:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005846:	2102      	movs	r1, #2
 8005848:	4091      	lsls	r1, r2
 800584a:	000a      	movs	r2, r1
 800584c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2220      	movs	r2, #32
 8005852:	2100      	movs	r1, #0
 8005854:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585a:	2b00      	cmp	r3, #0
 800585c:	d036      	beq.n	80058cc <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	0010      	movs	r0, r2
 8005866:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8005868:	e030      	b.n	80058cc <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586e:	2208      	movs	r2, #8
 8005870:	409a      	lsls	r2, r3
 8005872:	0013      	movs	r3, r2
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	4013      	ands	r3, r2
 8005878:	d028      	beq.n	80058cc <HAL_DMA_IRQHandler+0x13c>
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	2208      	movs	r2, #8
 800587e:	4013      	ands	r3, r2
 8005880:	d024      	beq.n	80058cc <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	210e      	movs	r1, #14
 800588e:	438a      	bics	r2, r1
 8005890:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800589a:	2101      	movs	r1, #1
 800589c:	4091      	lsls	r1, r2
 800589e:	000a      	movs	r2, r1
 80058a0:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2201      	movs	r2, #1
 80058a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2221      	movs	r2, #33	; 0x21
 80058ac:	2101      	movs	r1, #1
 80058ae:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2220      	movs	r2, #32
 80058b4:	2100      	movs	r1, #0
 80058b6:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d005      	beq.n	80058cc <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	0010      	movs	r0, r2
 80058c8:	4798      	blx	r3
    }
   }
}  
 80058ca:	e7ff      	b.n	80058cc <HAL_DMA_IRQHandler+0x13c>
 80058cc:	46c0      	nop			; (mov r8, r8)
 80058ce:	46bd      	mov	sp, r7
 80058d0:	b004      	add	sp, #16
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
 80058e0:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ea:	2101      	movs	r1, #1
 80058ec:	4091      	lsls	r1, r2
 80058ee:	000a      	movs	r2, r1
 80058f0:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	683a      	ldr	r2, [r7, #0]
 80058f8:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	2b10      	cmp	r3, #16
 8005900:	d108      	bne.n	8005914 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005912:	e007      	b.n	8005924 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	60da      	str	r2, [r3, #12]
}
 8005924:	46c0      	nop			; (mov r8, r8)
 8005926:	46bd      	mov	sp, r7
 8005928:	b004      	add	sp, #16
 800592a:	bd80      	pop	{r7, pc}

0800592c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a08      	ldr	r2, [pc, #32]	; (800595c <DMA_CalcBaseAndBitshift+0x30>)
 800593a:	4694      	mov	ip, r2
 800593c:	4463      	add	r3, ip
 800593e:	2114      	movs	r1, #20
 8005940:	0018      	movs	r0, r3
 8005942:	f7fa fbfd 	bl	8000140 <__udivsi3>
 8005946:	0003      	movs	r3, r0
 8005948:	009a      	lsls	r2, r3, #2
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a03      	ldr	r2, [pc, #12]	; (8005960 <DMA_CalcBaseAndBitshift+0x34>)
 8005952:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8005954:	46c0      	nop			; (mov r8, r8)
 8005956:	46bd      	mov	sp, r7
 8005958:	b002      	add	sp, #8
 800595a:	bd80      	pop	{r7, pc}
 800595c:	bffdfff8 	.word	0xbffdfff8
 8005960:	40020000 	.word	0x40020000

08005964 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b086      	sub	sp, #24
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800596e:	2300      	movs	r3, #0
 8005970:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005972:	e155      	b.n	8005c20 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2101      	movs	r1, #1
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	4091      	lsls	r1, r2
 800597e:	000a      	movs	r2, r1
 8005980:	4013      	ands	r3, r2
 8005982:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d100      	bne.n	800598c <HAL_GPIO_Init+0x28>
 800598a:	e146      	b.n	8005c1a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	2203      	movs	r2, #3
 8005992:	4013      	ands	r3, r2
 8005994:	2b01      	cmp	r3, #1
 8005996:	d005      	beq.n	80059a4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	2203      	movs	r2, #3
 800599e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d130      	bne.n	8005a06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	689b      	ldr	r3, [r3, #8]
 80059a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	005b      	lsls	r3, r3, #1
 80059ae:	2203      	movs	r2, #3
 80059b0:	409a      	lsls	r2, r3
 80059b2:	0013      	movs	r3, r2
 80059b4:	43da      	mvns	r2, r3
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	4013      	ands	r3, r2
 80059ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	68da      	ldr	r2, [r3, #12]
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	005b      	lsls	r3, r3, #1
 80059c4:	409a      	lsls	r2, r3
 80059c6:	0013      	movs	r3, r2
 80059c8:	693a      	ldr	r2, [r7, #16]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80059da:	2201      	movs	r2, #1
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	409a      	lsls	r2, r3
 80059e0:	0013      	movs	r3, r2
 80059e2:	43da      	mvns	r2, r3
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	4013      	ands	r3, r2
 80059e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	091b      	lsrs	r3, r3, #4
 80059f0:	2201      	movs	r2, #1
 80059f2:	401a      	ands	r2, r3
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	409a      	lsls	r2, r3
 80059f8:	0013      	movs	r3, r2
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	693a      	ldr	r2, [r7, #16]
 8005a04:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	2203      	movs	r2, #3
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	2b03      	cmp	r3, #3
 8005a10:	d017      	beq.n	8005a42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	005b      	lsls	r3, r3, #1
 8005a1c:	2203      	movs	r2, #3
 8005a1e:	409a      	lsls	r2, r3
 8005a20:	0013      	movs	r3, r2
 8005a22:	43da      	mvns	r2, r3
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	4013      	ands	r3, r2
 8005a28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	689a      	ldr	r2, [r3, #8]
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	005b      	lsls	r3, r3, #1
 8005a32:	409a      	lsls	r2, r3
 8005a34:	0013      	movs	r3, r2
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	2203      	movs	r2, #3
 8005a48:	4013      	ands	r3, r2
 8005a4a:	2b02      	cmp	r3, #2
 8005a4c:	d123      	bne.n	8005a96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	08da      	lsrs	r2, r3, #3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	3208      	adds	r2, #8
 8005a56:	0092      	lsls	r2, r2, #2
 8005a58:	58d3      	ldr	r3, [r2, r3]
 8005a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	2207      	movs	r2, #7
 8005a60:	4013      	ands	r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	220f      	movs	r2, #15
 8005a66:	409a      	lsls	r2, r3
 8005a68:	0013      	movs	r3, r2
 8005a6a:	43da      	mvns	r2, r3
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	4013      	ands	r3, r2
 8005a70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	691a      	ldr	r2, [r3, #16]
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	2107      	movs	r1, #7
 8005a7a:	400b      	ands	r3, r1
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	409a      	lsls	r2, r3
 8005a80:	0013      	movs	r3, r2
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	08da      	lsrs	r2, r3, #3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	3208      	adds	r2, #8
 8005a90:	0092      	lsls	r2, r2, #2
 8005a92:	6939      	ldr	r1, [r7, #16]
 8005a94:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	005b      	lsls	r3, r3, #1
 8005aa0:	2203      	movs	r2, #3
 8005aa2:	409a      	lsls	r2, r3
 8005aa4:	0013      	movs	r3, r2
 8005aa6:	43da      	mvns	r2, r3
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	4013      	ands	r3, r2
 8005aac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	2203      	movs	r2, #3
 8005ab4:	401a      	ands	r2, r3
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	005b      	lsls	r3, r3, #1
 8005aba:	409a      	lsls	r2, r3
 8005abc:	0013      	movs	r3, r2
 8005abe:	693a      	ldr	r2, [r7, #16]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	23c0      	movs	r3, #192	; 0xc0
 8005ad0:	029b      	lsls	r3, r3, #10
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	d100      	bne.n	8005ad8 <HAL_GPIO_Init+0x174>
 8005ad6:	e0a0      	b.n	8005c1a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ad8:	4b57      	ldr	r3, [pc, #348]	; (8005c38 <HAL_GPIO_Init+0x2d4>)
 8005ada:	699a      	ldr	r2, [r3, #24]
 8005adc:	4b56      	ldr	r3, [pc, #344]	; (8005c38 <HAL_GPIO_Init+0x2d4>)
 8005ade:	2101      	movs	r1, #1
 8005ae0:	430a      	orrs	r2, r1
 8005ae2:	619a      	str	r2, [r3, #24]
 8005ae4:	4b54      	ldr	r3, [pc, #336]	; (8005c38 <HAL_GPIO_Init+0x2d4>)
 8005ae6:	699b      	ldr	r3, [r3, #24]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	4013      	ands	r3, r2
 8005aec:	60bb      	str	r3, [r7, #8]
 8005aee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005af0:	4a52      	ldr	r2, [pc, #328]	; (8005c3c <HAL_GPIO_Init+0x2d8>)
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	089b      	lsrs	r3, r3, #2
 8005af6:	3302      	adds	r3, #2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	589b      	ldr	r3, [r3, r2]
 8005afc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	2203      	movs	r2, #3
 8005b02:	4013      	ands	r3, r2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	220f      	movs	r2, #15
 8005b08:	409a      	lsls	r2, r3
 8005b0a:	0013      	movs	r3, r2
 8005b0c:	43da      	mvns	r2, r3
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	4013      	ands	r3, r2
 8005b12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	2390      	movs	r3, #144	; 0x90
 8005b18:	05db      	lsls	r3, r3, #23
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d019      	beq.n	8005b52 <HAL_GPIO_Init+0x1ee>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	4a47      	ldr	r2, [pc, #284]	; (8005c40 <HAL_GPIO_Init+0x2dc>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d013      	beq.n	8005b4e <HAL_GPIO_Init+0x1ea>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a46      	ldr	r2, [pc, #280]	; (8005c44 <HAL_GPIO_Init+0x2e0>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d00d      	beq.n	8005b4a <HAL_GPIO_Init+0x1e6>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a45      	ldr	r2, [pc, #276]	; (8005c48 <HAL_GPIO_Init+0x2e4>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d007      	beq.n	8005b46 <HAL_GPIO_Init+0x1e2>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a44      	ldr	r2, [pc, #272]	; (8005c4c <HAL_GPIO_Init+0x2e8>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d101      	bne.n	8005b42 <HAL_GPIO_Init+0x1de>
 8005b3e:	2304      	movs	r3, #4
 8005b40:	e008      	b.n	8005b54 <HAL_GPIO_Init+0x1f0>
 8005b42:	2305      	movs	r3, #5
 8005b44:	e006      	b.n	8005b54 <HAL_GPIO_Init+0x1f0>
 8005b46:	2303      	movs	r3, #3
 8005b48:	e004      	b.n	8005b54 <HAL_GPIO_Init+0x1f0>
 8005b4a:	2302      	movs	r3, #2
 8005b4c:	e002      	b.n	8005b54 <HAL_GPIO_Init+0x1f0>
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e000      	b.n	8005b54 <HAL_GPIO_Init+0x1f0>
 8005b52:	2300      	movs	r3, #0
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	2103      	movs	r1, #3
 8005b58:	400a      	ands	r2, r1
 8005b5a:	0092      	lsls	r2, r2, #2
 8005b5c:	4093      	lsls	r3, r2
 8005b5e:	693a      	ldr	r2, [r7, #16]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005b64:	4935      	ldr	r1, [pc, #212]	; (8005c3c <HAL_GPIO_Init+0x2d8>)
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	089b      	lsrs	r3, r3, #2
 8005b6a:	3302      	adds	r3, #2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005b72:	4b37      	ldr	r3, [pc, #220]	; (8005c50 <HAL_GPIO_Init+0x2ec>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	43da      	mvns	r2, r3
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	4013      	ands	r3, r2
 8005b80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	685a      	ldr	r2, [r3, #4]
 8005b86:	2380      	movs	r3, #128	; 0x80
 8005b88:	025b      	lsls	r3, r3, #9
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	d003      	beq.n	8005b96 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005b96:	4b2e      	ldr	r3, [pc, #184]	; (8005c50 <HAL_GPIO_Init+0x2ec>)
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8005b9c:	4b2c      	ldr	r3, [pc, #176]	; (8005c50 <HAL_GPIO_Init+0x2ec>)
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	43da      	mvns	r2, r3
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	4013      	ands	r3, r2
 8005baa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	685a      	ldr	r2, [r3, #4]
 8005bb0:	2380      	movs	r3, #128	; 0x80
 8005bb2:	029b      	lsls	r3, r3, #10
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	d003      	beq.n	8005bc0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005bc0:	4b23      	ldr	r3, [pc, #140]	; (8005c50 <HAL_GPIO_Init+0x2ec>)
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005bc6:	4b22      	ldr	r3, [pc, #136]	; (8005c50 <HAL_GPIO_Init+0x2ec>)
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	43da      	mvns	r2, r3
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	685a      	ldr	r2, [r3, #4]
 8005bda:	2380      	movs	r3, #128	; 0x80
 8005bdc:	035b      	lsls	r3, r3, #13
 8005bde:	4013      	ands	r3, r2
 8005be0:	d003      	beq.n	8005bea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005bea:	4b19      	ldr	r3, [pc, #100]	; (8005c50 <HAL_GPIO_Init+0x2ec>)
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005bf0:	4b17      	ldr	r3, [pc, #92]	; (8005c50 <HAL_GPIO_Init+0x2ec>)
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	43da      	mvns	r2, r3
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	685a      	ldr	r2, [r3, #4]
 8005c04:	2380      	movs	r3, #128	; 0x80
 8005c06:	039b      	lsls	r3, r3, #14
 8005c08:	4013      	ands	r3, r2
 8005c0a:	d003      	beq.n	8005c14 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8005c14:	4b0e      	ldr	r3, [pc, #56]	; (8005c50 <HAL_GPIO_Init+0x2ec>)
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	40da      	lsrs	r2, r3
 8005c28:	1e13      	subs	r3, r2, #0
 8005c2a:	d000      	beq.n	8005c2e <HAL_GPIO_Init+0x2ca>
 8005c2c:	e6a2      	b.n	8005974 <HAL_GPIO_Init+0x10>
  } 
}
 8005c2e:	46c0      	nop			; (mov r8, r8)
 8005c30:	46c0      	nop			; (mov r8, r8)
 8005c32:	46bd      	mov	sp, r7
 8005c34:	b006      	add	sp, #24
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	40021000 	.word	0x40021000
 8005c3c:	40010000 	.word	0x40010000
 8005c40:	48000400 	.word	0x48000400
 8005c44:	48000800 	.word	0x48000800
 8005c48:	48000c00 	.word	0x48000c00
 8005c4c:	48001000 	.word	0x48001000
 8005c50:	40010400 	.word	0x40010400

08005c54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	000a      	movs	r2, r1
 8005c5e:	1cbb      	adds	r3, r7, #2
 8005c60:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	1cba      	adds	r2, r7, #2
 8005c68:	8812      	ldrh	r2, [r2, #0]
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	d004      	beq.n	8005c78 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005c6e:	230f      	movs	r3, #15
 8005c70:	18fb      	adds	r3, r7, r3
 8005c72:	2201      	movs	r2, #1
 8005c74:	701a      	strb	r2, [r3, #0]
 8005c76:	e003      	b.n	8005c80 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005c78:	230f      	movs	r3, #15
 8005c7a:	18fb      	adds	r3, r7, r3
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005c80:	230f      	movs	r3, #15
 8005c82:	18fb      	adds	r3, r7, r3
 8005c84:	781b      	ldrb	r3, [r3, #0]
  }
 8005c86:	0018      	movs	r0, r3
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	b004      	add	sp, #16
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b082      	sub	sp, #8
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
 8005c96:	0008      	movs	r0, r1
 8005c98:	0011      	movs	r1, r2
 8005c9a:	1cbb      	adds	r3, r7, #2
 8005c9c:	1c02      	adds	r2, r0, #0
 8005c9e:	801a      	strh	r2, [r3, #0]
 8005ca0:	1c7b      	adds	r3, r7, #1
 8005ca2:	1c0a      	adds	r2, r1, #0
 8005ca4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005ca6:	1c7b      	adds	r3, r7, #1
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d004      	beq.n	8005cb8 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005cae:	1cbb      	adds	r3, r7, #2
 8005cb0:	881a      	ldrh	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005cb6:	e003      	b.n	8005cc0 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005cb8:	1cbb      	adds	r3, r7, #2
 8005cba:	881a      	ldrh	r2, [r3, #0]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005cc0:	46c0      	nop			; (mov r8, r8)
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	b002      	add	sp, #8
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	0002      	movs	r2, r0
 8005cd0:	1dbb      	adds	r3, r7, #6
 8005cd2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005cd4:	4b09      	ldr	r3, [pc, #36]	; (8005cfc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8005cd6:	695b      	ldr	r3, [r3, #20]
 8005cd8:	1dba      	adds	r2, r7, #6
 8005cda:	8812      	ldrh	r2, [r2, #0]
 8005cdc:	4013      	ands	r3, r2
 8005cde:	d008      	beq.n	8005cf2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005ce0:	4b06      	ldr	r3, [pc, #24]	; (8005cfc <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8005ce2:	1dba      	adds	r2, r7, #6
 8005ce4:	8812      	ldrh	r2, [r2, #0]
 8005ce6:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005ce8:	1dbb      	adds	r3, r7, #6
 8005cea:	881b      	ldrh	r3, [r3, #0]
 8005cec:	0018      	movs	r0, r3
 8005cee:	f000 f807 	bl	8005d00 <HAL_GPIO_EXTI_Callback>
  }
}
 8005cf2:	46c0      	nop			; (mov r8, r8)
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	b002      	add	sp, #8
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	46c0      	nop			; (mov r8, r8)
 8005cfc:	40010400 	.word	0x40010400

08005d00 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	0002      	movs	r2, r0
 8005d08:	1dbb      	adds	r3, r7, #6
 8005d0a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8005d0c:	46c0      	nop			; (mov r8, r8)
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	b002      	add	sp, #8
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d101      	bne.n	8005d26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e082      	b.n	8005e2c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2241      	movs	r2, #65	; 0x41
 8005d2a:	5c9b      	ldrb	r3, [r3, r2]
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d107      	bne.n	8005d42 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2240      	movs	r2, #64	; 0x40
 8005d36:	2100      	movs	r1, #0
 8005d38:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	0018      	movs	r0, r3
 8005d3e:	f7fd ffdf 	bl	8003d00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2241      	movs	r2, #65	; 0x41
 8005d46:	2124      	movs	r1, #36	; 0x24
 8005d48:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2101      	movs	r1, #1
 8005d56:	438a      	bics	r2, r1
 8005d58:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685a      	ldr	r2, [r3, #4]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4934      	ldr	r1, [pc, #208]	; (8005e34 <HAL_I2C_Init+0x120>)
 8005d64:	400a      	ands	r2, r1
 8005d66:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	689a      	ldr	r2, [r3, #8]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4931      	ldr	r1, [pc, #196]	; (8005e38 <HAL_I2C_Init+0x124>)
 8005d74:	400a      	ands	r2, r1
 8005d76:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d108      	bne.n	8005d92 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	689a      	ldr	r2, [r3, #8]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2180      	movs	r1, #128	; 0x80
 8005d8a:	0209      	lsls	r1, r1, #8
 8005d8c:	430a      	orrs	r2, r1
 8005d8e:	609a      	str	r2, [r3, #8]
 8005d90:	e007      	b.n	8005da2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	689a      	ldr	r2, [r3, #8]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2184      	movs	r1, #132	; 0x84
 8005d9c:	0209      	lsls	r1, r1, #8
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d104      	bne.n	8005db4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2280      	movs	r2, #128	; 0x80
 8005db0:	0112      	lsls	r2, r2, #4
 8005db2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	685a      	ldr	r2, [r3, #4]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	491f      	ldr	r1, [pc, #124]	; (8005e3c <HAL_I2C_Init+0x128>)
 8005dc0:	430a      	orrs	r2, r1
 8005dc2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68da      	ldr	r2, [r3, #12]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	491a      	ldr	r1, [pc, #104]	; (8005e38 <HAL_I2C_Init+0x124>)
 8005dd0:	400a      	ands	r2, r1
 8005dd2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	691a      	ldr	r2, [r3, #16]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	431a      	orrs	r2, r3
 8005dde:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	699b      	ldr	r3, [r3, #24]
 8005de4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	430a      	orrs	r2, r1
 8005dec:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	69d9      	ldr	r1, [r3, #28]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a1a      	ldr	r2, [r3, #32]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2101      	movs	r1, #1
 8005e0a:	430a      	orrs	r2, r1
 8005e0c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2241      	movs	r2, #65	; 0x41
 8005e18:	2120      	movs	r1, #32
 8005e1a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2242      	movs	r2, #66	; 0x42
 8005e26:	2100      	movs	r1, #0
 8005e28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
}
 8005e2c:	0018      	movs	r0, r3
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	b002      	add	sp, #8
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	f0ffffff 	.word	0xf0ffffff
 8005e38:	ffff7fff 	.word	0xffff7fff
 8005e3c:	02008000 	.word	0x02008000

08005e40 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005e40:	b590      	push	{r4, r7, lr}
 8005e42:	b089      	sub	sp, #36	; 0x24
 8005e44:	af02      	add	r7, sp, #8
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	0008      	movs	r0, r1
 8005e4a:	607a      	str	r2, [r7, #4]
 8005e4c:	0019      	movs	r1, r3
 8005e4e:	230a      	movs	r3, #10
 8005e50:	18fb      	adds	r3, r7, r3
 8005e52:	1c02      	adds	r2, r0, #0
 8005e54:	801a      	strh	r2, [r3, #0]
 8005e56:	2308      	movs	r3, #8
 8005e58:	18fb      	adds	r3, r7, r3
 8005e5a:	1c0a      	adds	r2, r1, #0
 8005e5c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2241      	movs	r2, #65	; 0x41
 8005e62:	5c9b      	ldrb	r3, [r3, r2]
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b20      	cmp	r3, #32
 8005e68:	d000      	beq.n	8005e6c <HAL_I2C_Master_Transmit+0x2c>
 8005e6a:	e0e7      	b.n	800603c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2240      	movs	r2, #64	; 0x40
 8005e70:	5c9b      	ldrb	r3, [r3, r2]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d101      	bne.n	8005e7a <HAL_I2C_Master_Transmit+0x3a>
 8005e76:	2302      	movs	r3, #2
 8005e78:	e0e1      	b.n	800603e <HAL_I2C_Master_Transmit+0x1fe>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2240      	movs	r2, #64	; 0x40
 8005e7e:	2101      	movs	r1, #1
 8005e80:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005e82:	f7fe fad3 	bl	800442c <HAL_GetTick>
 8005e86:	0003      	movs	r3, r0
 8005e88:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005e8a:	2380      	movs	r3, #128	; 0x80
 8005e8c:	0219      	lsls	r1, r3, #8
 8005e8e:	68f8      	ldr	r0, [r7, #12]
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	2319      	movs	r3, #25
 8005e96:	2201      	movs	r2, #1
 8005e98:	f000 fa04 	bl	80062a4 <I2C_WaitOnFlagUntilTimeout>
 8005e9c:	1e03      	subs	r3, r0, #0
 8005e9e:	d001      	beq.n	8005ea4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e0cc      	b.n	800603e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2241      	movs	r2, #65	; 0x41
 8005ea8:	2121      	movs	r1, #33	; 0x21
 8005eaa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2242      	movs	r2, #66	; 0x42
 8005eb0:	2110      	movs	r1, #16
 8005eb2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2208      	movs	r2, #8
 8005ec4:	18ba      	adds	r2, r7, r2
 8005ec6:	8812      	ldrh	r2, [r2, #0]
 8005ec8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	2bff      	cmp	r3, #255	; 0xff
 8005ed8:	d911      	bls.n	8005efe <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	22ff      	movs	r2, #255	; 0xff
 8005ede:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ee4:	b2da      	uxtb	r2, r3
 8005ee6:	2380      	movs	r3, #128	; 0x80
 8005ee8:	045c      	lsls	r4, r3, #17
 8005eea:	230a      	movs	r3, #10
 8005eec:	18fb      	adds	r3, r7, r3
 8005eee:	8819      	ldrh	r1, [r3, #0]
 8005ef0:	68f8      	ldr	r0, [r7, #12]
 8005ef2:	4b55      	ldr	r3, [pc, #340]	; (8006048 <HAL_I2C_Master_Transmit+0x208>)
 8005ef4:	9300      	str	r3, [sp, #0]
 8005ef6:	0023      	movs	r3, r4
 8005ef8:	f000 fb74 	bl	80065e4 <I2C_TransferConfig>
 8005efc:	e075      	b.n	8005fea <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f0c:	b2da      	uxtb	r2, r3
 8005f0e:	2380      	movs	r3, #128	; 0x80
 8005f10:	049c      	lsls	r4, r3, #18
 8005f12:	230a      	movs	r3, #10
 8005f14:	18fb      	adds	r3, r7, r3
 8005f16:	8819      	ldrh	r1, [r3, #0]
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	4b4b      	ldr	r3, [pc, #300]	; (8006048 <HAL_I2C_Master_Transmit+0x208>)
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	0023      	movs	r3, r4
 8005f20:	f000 fb60 	bl	80065e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005f24:	e061      	b.n	8005fea <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	0018      	movs	r0, r3
 8005f2e:	f000 f9f8 	bl	8006322 <I2C_WaitOnTXISFlagUntilTimeout>
 8005f32:	1e03      	subs	r3, r0, #0
 8005f34:	d001      	beq.n	8005f3a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e081      	b.n	800603e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3e:	781a      	ldrb	r2, [r3, #0]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4a:	1c5a      	adds	r2, r3, #1
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	3b01      	subs	r3, #1
 8005f58:	b29a      	uxth	r2, r3
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f62:	3b01      	subs	r3, #1
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d03a      	beq.n	8005fea <HAL_I2C_Master_Transmit+0x1aa>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d136      	bne.n	8005fea <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005f7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	9300      	str	r3, [sp, #0]
 8005f84:	0013      	movs	r3, r2
 8005f86:	2200      	movs	r2, #0
 8005f88:	2180      	movs	r1, #128	; 0x80
 8005f8a:	f000 f98b 	bl	80062a4 <I2C_WaitOnFlagUntilTimeout>
 8005f8e:	1e03      	subs	r3, r0, #0
 8005f90:	d001      	beq.n	8005f96 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e053      	b.n	800603e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	2bff      	cmp	r3, #255	; 0xff
 8005f9e:	d911      	bls.n	8005fc4 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	22ff      	movs	r2, #255	; 0xff
 8005fa4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005faa:	b2da      	uxtb	r2, r3
 8005fac:	2380      	movs	r3, #128	; 0x80
 8005fae:	045c      	lsls	r4, r3, #17
 8005fb0:	230a      	movs	r3, #10
 8005fb2:	18fb      	adds	r3, r7, r3
 8005fb4:	8819      	ldrh	r1, [r3, #0]
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	2300      	movs	r3, #0
 8005fba:	9300      	str	r3, [sp, #0]
 8005fbc:	0023      	movs	r3, r4
 8005fbe:	f000 fb11 	bl	80065e4 <I2C_TransferConfig>
 8005fc2:	e012      	b.n	8005fea <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005fd2:	b2da      	uxtb	r2, r3
 8005fd4:	2380      	movs	r3, #128	; 0x80
 8005fd6:	049c      	lsls	r4, r3, #18
 8005fd8:	230a      	movs	r3, #10
 8005fda:	18fb      	adds	r3, r7, r3
 8005fdc:	8819      	ldrh	r1, [r3, #0]
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	9300      	str	r3, [sp, #0]
 8005fe4:	0023      	movs	r3, r4
 8005fe6:	f000 fafd 	bl	80065e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d198      	bne.n	8005f26 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	0018      	movs	r0, r3
 8005ffc:	f000 f9d0 	bl	80063a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006000:	1e03      	subs	r3, r0, #0
 8006002:	d001      	beq.n	8006008 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e01a      	b.n	800603e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2220      	movs	r2, #32
 800600e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	490c      	ldr	r1, [pc, #48]	; (800604c <HAL_I2C_Master_Transmit+0x20c>)
 800601c:	400a      	ands	r2, r1
 800601e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2241      	movs	r2, #65	; 0x41
 8006024:	2120      	movs	r1, #32
 8006026:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2242      	movs	r2, #66	; 0x42
 800602c:	2100      	movs	r1, #0
 800602e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2240      	movs	r2, #64	; 0x40
 8006034:	2100      	movs	r1, #0
 8006036:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006038:	2300      	movs	r3, #0
 800603a:	e000      	b.n	800603e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800603c:	2302      	movs	r3, #2
  }
}
 800603e:	0018      	movs	r0, r3
 8006040:	46bd      	mov	sp, r7
 8006042:	b007      	add	sp, #28
 8006044:	bd90      	pop	{r4, r7, pc}
 8006046:	46c0      	nop			; (mov r8, r8)
 8006048:	80002000 	.word	0x80002000
 800604c:	fe00e800 	.word	0xfe00e800

08006050 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006050:	b590      	push	{r4, r7, lr}
 8006052:	b089      	sub	sp, #36	; 0x24
 8006054:	af02      	add	r7, sp, #8
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	0008      	movs	r0, r1
 800605a:	607a      	str	r2, [r7, #4]
 800605c:	0019      	movs	r1, r3
 800605e:	230a      	movs	r3, #10
 8006060:	18fb      	adds	r3, r7, r3
 8006062:	1c02      	adds	r2, r0, #0
 8006064:	801a      	strh	r2, [r3, #0]
 8006066:	2308      	movs	r3, #8
 8006068:	18fb      	adds	r3, r7, r3
 800606a:	1c0a      	adds	r2, r1, #0
 800606c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2241      	movs	r2, #65	; 0x41
 8006072:	5c9b      	ldrb	r3, [r3, r2]
 8006074:	b2db      	uxtb	r3, r3
 8006076:	2b20      	cmp	r3, #32
 8006078:	d000      	beq.n	800607c <HAL_I2C_Master_Receive+0x2c>
 800607a:	e0e8      	b.n	800624e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2240      	movs	r2, #64	; 0x40
 8006080:	5c9b      	ldrb	r3, [r3, r2]
 8006082:	2b01      	cmp	r3, #1
 8006084:	d101      	bne.n	800608a <HAL_I2C_Master_Receive+0x3a>
 8006086:	2302      	movs	r3, #2
 8006088:	e0e2      	b.n	8006250 <HAL_I2C_Master_Receive+0x200>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2240      	movs	r2, #64	; 0x40
 800608e:	2101      	movs	r1, #1
 8006090:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006092:	f7fe f9cb 	bl	800442c <HAL_GetTick>
 8006096:	0003      	movs	r3, r0
 8006098:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800609a:	2380      	movs	r3, #128	; 0x80
 800609c:	0219      	lsls	r1, r3, #8
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	2319      	movs	r3, #25
 80060a6:	2201      	movs	r2, #1
 80060a8:	f000 f8fc 	bl	80062a4 <I2C_WaitOnFlagUntilTimeout>
 80060ac:	1e03      	subs	r3, r0, #0
 80060ae:	d001      	beq.n	80060b4 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	e0cd      	b.n	8006250 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2241      	movs	r2, #65	; 0x41
 80060b8:	2122      	movs	r1, #34	; 0x22
 80060ba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2242      	movs	r2, #66	; 0x42
 80060c0:	2110      	movs	r1, #16
 80060c2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2200      	movs	r2, #0
 80060c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2208      	movs	r2, #8
 80060d4:	18ba      	adds	r2, r7, r2
 80060d6:	8812      	ldrh	r2, [r2, #0]
 80060d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	2bff      	cmp	r3, #255	; 0xff
 80060e8:	d911      	bls.n	800610e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	22ff      	movs	r2, #255	; 0xff
 80060ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060f4:	b2da      	uxtb	r2, r3
 80060f6:	2380      	movs	r3, #128	; 0x80
 80060f8:	045c      	lsls	r4, r3, #17
 80060fa:	230a      	movs	r3, #10
 80060fc:	18fb      	adds	r3, r7, r3
 80060fe:	8819      	ldrh	r1, [r3, #0]
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	4b55      	ldr	r3, [pc, #340]	; (8006258 <HAL_I2C_Master_Receive+0x208>)
 8006104:	9300      	str	r3, [sp, #0]
 8006106:	0023      	movs	r3, r4
 8006108:	f000 fa6c 	bl	80065e4 <I2C_TransferConfig>
 800610c:	e076      	b.n	80061fc <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006112:	b29a      	uxth	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800611c:	b2da      	uxtb	r2, r3
 800611e:	2380      	movs	r3, #128	; 0x80
 8006120:	049c      	lsls	r4, r3, #18
 8006122:	230a      	movs	r3, #10
 8006124:	18fb      	adds	r3, r7, r3
 8006126:	8819      	ldrh	r1, [r3, #0]
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	4b4b      	ldr	r3, [pc, #300]	; (8006258 <HAL_I2C_Master_Receive+0x208>)
 800612c:	9300      	str	r3, [sp, #0]
 800612e:	0023      	movs	r3, r4
 8006130:	f000 fa58 	bl	80065e4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006134:	e062      	b.n	80061fc <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	0018      	movs	r0, r3
 800613e:	f000 f96b 	bl	8006418 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006142:	1e03      	subs	r3, r0, #0
 8006144:	d001      	beq.n	800614a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e082      	b.n	8006250 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006154:	b2d2      	uxtb	r2, r2
 8006156:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800615c:	1c5a      	adds	r2, r3, #1
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006166:	3b01      	subs	r3, #1
 8006168:	b29a      	uxth	r2, r3
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006172:	b29b      	uxth	r3, r3
 8006174:	3b01      	subs	r3, #1
 8006176:	b29a      	uxth	r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006180:	b29b      	uxth	r3, r3
 8006182:	2b00      	cmp	r3, #0
 8006184:	d03a      	beq.n	80061fc <HAL_I2C_Master_Receive+0x1ac>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800618a:	2b00      	cmp	r3, #0
 800618c:	d136      	bne.n	80061fc <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800618e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006190:	68f8      	ldr	r0, [r7, #12]
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	9300      	str	r3, [sp, #0]
 8006196:	0013      	movs	r3, r2
 8006198:	2200      	movs	r2, #0
 800619a:	2180      	movs	r1, #128	; 0x80
 800619c:	f000 f882 	bl	80062a4 <I2C_WaitOnFlagUntilTimeout>
 80061a0:	1e03      	subs	r3, r0, #0
 80061a2:	d001      	beq.n	80061a8 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	e053      	b.n	8006250 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	2bff      	cmp	r3, #255	; 0xff
 80061b0:	d911      	bls.n	80061d6 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	22ff      	movs	r2, #255	; 0xff
 80061b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061bc:	b2da      	uxtb	r2, r3
 80061be:	2380      	movs	r3, #128	; 0x80
 80061c0:	045c      	lsls	r4, r3, #17
 80061c2:	230a      	movs	r3, #10
 80061c4:	18fb      	adds	r3, r7, r3
 80061c6:	8819      	ldrh	r1, [r3, #0]
 80061c8:	68f8      	ldr	r0, [r7, #12]
 80061ca:	2300      	movs	r3, #0
 80061cc:	9300      	str	r3, [sp, #0]
 80061ce:	0023      	movs	r3, r4
 80061d0:	f000 fa08 	bl	80065e4 <I2C_TransferConfig>
 80061d4:	e012      	b.n	80061fc <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061da:	b29a      	uxth	r2, r3
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061e4:	b2da      	uxtb	r2, r3
 80061e6:	2380      	movs	r3, #128	; 0x80
 80061e8:	049c      	lsls	r4, r3, #18
 80061ea:	230a      	movs	r3, #10
 80061ec:	18fb      	adds	r3, r7, r3
 80061ee:	8819      	ldrh	r1, [r3, #0]
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	2300      	movs	r3, #0
 80061f4:	9300      	str	r3, [sp, #0]
 80061f6:	0023      	movs	r3, r4
 80061f8:	f000 f9f4 	bl	80065e4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006200:	b29b      	uxth	r3, r3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d197      	bne.n	8006136 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	0018      	movs	r0, r3
 800620e:	f000 f8c7 	bl	80063a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006212:	1e03      	subs	r3, r0, #0
 8006214:	d001      	beq.n	800621a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e01a      	b.n	8006250 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2220      	movs	r2, #32
 8006220:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	685a      	ldr	r2, [r3, #4]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	490b      	ldr	r1, [pc, #44]	; (800625c <HAL_I2C_Master_Receive+0x20c>)
 800622e:	400a      	ands	r2, r1
 8006230:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	2241      	movs	r2, #65	; 0x41
 8006236:	2120      	movs	r1, #32
 8006238:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2242      	movs	r2, #66	; 0x42
 800623e:	2100      	movs	r1, #0
 8006240:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2240      	movs	r2, #64	; 0x40
 8006246:	2100      	movs	r1, #0
 8006248:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800624a:	2300      	movs	r3, #0
 800624c:	e000      	b.n	8006250 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800624e:	2302      	movs	r3, #2
  }
}
 8006250:	0018      	movs	r0, r3
 8006252:	46bd      	mov	sp, r7
 8006254:	b007      	add	sp, #28
 8006256:	bd90      	pop	{r4, r7, pc}
 8006258:	80002400 	.word	0x80002400
 800625c:	fe00e800 	.word	0xfe00e800

08006260 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	699b      	ldr	r3, [r3, #24]
 800626e:	2202      	movs	r2, #2
 8006270:	4013      	ands	r3, r2
 8006272:	2b02      	cmp	r3, #2
 8006274:	d103      	bne.n	800627e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2200      	movs	r2, #0
 800627c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	699b      	ldr	r3, [r3, #24]
 8006284:	2201      	movs	r2, #1
 8006286:	4013      	ands	r3, r2
 8006288:	2b01      	cmp	r3, #1
 800628a:	d007      	beq.n	800629c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	699a      	ldr	r2, [r3, #24]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2101      	movs	r1, #1
 8006298:	430a      	orrs	r2, r1
 800629a:	619a      	str	r2, [r3, #24]
  }
}
 800629c:	46c0      	nop			; (mov r8, r8)
 800629e:	46bd      	mov	sp, r7
 80062a0:	b002      	add	sp, #8
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	603b      	str	r3, [r7, #0]
 80062b0:	1dfb      	adds	r3, r7, #7
 80062b2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062b4:	e021      	b.n	80062fa <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	3301      	adds	r3, #1
 80062ba:	d01e      	beq.n	80062fa <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062bc:	f7fe f8b6 	bl	800442c <HAL_GetTick>
 80062c0:	0002      	movs	r2, r0
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	1ad3      	subs	r3, r2, r3
 80062c6:	683a      	ldr	r2, [r7, #0]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d302      	bcc.n	80062d2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d113      	bne.n	80062fa <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d6:	2220      	movs	r2, #32
 80062d8:	431a      	orrs	r2, r3
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2241      	movs	r2, #65	; 0x41
 80062e2:	2120      	movs	r1, #32
 80062e4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2242      	movs	r2, #66	; 0x42
 80062ea:	2100      	movs	r1, #0
 80062ec:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2240      	movs	r2, #64	; 0x40
 80062f2:	2100      	movs	r1, #0
 80062f4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e00f      	b.n	800631a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	699b      	ldr	r3, [r3, #24]
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	4013      	ands	r3, r2
 8006304:	68ba      	ldr	r2, [r7, #8]
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	425a      	negs	r2, r3
 800630a:	4153      	adcs	r3, r2
 800630c:	b2db      	uxtb	r3, r3
 800630e:	001a      	movs	r2, r3
 8006310:	1dfb      	adds	r3, r7, #7
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	429a      	cmp	r2, r3
 8006316:	d0ce      	beq.n	80062b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006318:	2300      	movs	r3, #0
}
 800631a:	0018      	movs	r0, r3
 800631c:	46bd      	mov	sp, r7
 800631e:	b004      	add	sp, #16
 8006320:	bd80      	pop	{r7, pc}

08006322 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b084      	sub	sp, #16
 8006326:	af00      	add	r7, sp, #0
 8006328:	60f8      	str	r0, [r7, #12]
 800632a:	60b9      	str	r1, [r7, #8]
 800632c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800632e:	e02b      	b.n	8006388 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	68b9      	ldr	r1, [r7, #8]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	0018      	movs	r0, r3
 8006338:	f000 f8da 	bl	80064f0 <I2C_IsAcknowledgeFailed>
 800633c:	1e03      	subs	r3, r0, #0
 800633e:	d001      	beq.n	8006344 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e029      	b.n	8006398 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	3301      	adds	r3, #1
 8006348:	d01e      	beq.n	8006388 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800634a:	f7fe f86f 	bl	800442c <HAL_GetTick>
 800634e:	0002      	movs	r2, r0
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	429a      	cmp	r2, r3
 8006358:	d302      	bcc.n	8006360 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d113      	bne.n	8006388 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006364:	2220      	movs	r2, #32
 8006366:	431a      	orrs	r2, r3
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2241      	movs	r2, #65	; 0x41
 8006370:	2120      	movs	r1, #32
 8006372:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2242      	movs	r2, #66	; 0x42
 8006378:	2100      	movs	r1, #0
 800637a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2240      	movs	r2, #64	; 0x40
 8006380:	2100      	movs	r1, #0
 8006382:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e007      	b.n	8006398 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	2202      	movs	r2, #2
 8006390:	4013      	ands	r3, r2
 8006392:	2b02      	cmp	r3, #2
 8006394:	d1cc      	bne.n	8006330 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	0018      	movs	r0, r3
 800639a:	46bd      	mov	sp, r7
 800639c:	b004      	add	sp, #16
 800639e:	bd80      	pop	{r7, pc}

080063a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b084      	sub	sp, #16
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063ac:	e028      	b.n	8006400 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	68b9      	ldr	r1, [r7, #8]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	0018      	movs	r0, r3
 80063b6:	f000 f89b 	bl	80064f0 <I2C_IsAcknowledgeFailed>
 80063ba:	1e03      	subs	r3, r0, #0
 80063bc:	d001      	beq.n	80063c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e026      	b.n	8006410 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063c2:	f7fe f833 	bl	800442c <HAL_GetTick>
 80063c6:	0002      	movs	r2, r0
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	68ba      	ldr	r2, [r7, #8]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	d302      	bcc.n	80063d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d113      	bne.n	8006400 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063dc:	2220      	movs	r2, #32
 80063de:	431a      	orrs	r2, r3
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2241      	movs	r2, #65	; 0x41
 80063e8:	2120      	movs	r1, #32
 80063ea:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2242      	movs	r2, #66	; 0x42
 80063f0:	2100      	movs	r1, #0
 80063f2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2240      	movs	r2, #64	; 0x40
 80063f8:	2100      	movs	r1, #0
 80063fa:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e007      	b.n	8006410 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	2220      	movs	r2, #32
 8006408:	4013      	ands	r3, r2
 800640a:	2b20      	cmp	r3, #32
 800640c:	d1cf      	bne.n	80063ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800640e:	2300      	movs	r3, #0
}
 8006410:	0018      	movs	r0, r3
 8006412:	46bd      	mov	sp, r7
 8006414:	b004      	add	sp, #16
 8006416:	bd80      	pop	{r7, pc}

08006418 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b084      	sub	sp, #16
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006424:	e055      	b.n	80064d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	68b9      	ldr	r1, [r7, #8]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	0018      	movs	r0, r3
 800642e:	f000 f85f 	bl	80064f0 <I2C_IsAcknowledgeFailed>
 8006432:	1e03      	subs	r3, r0, #0
 8006434:	d001      	beq.n	800643a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e053      	b.n	80064e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	699b      	ldr	r3, [r3, #24]
 8006440:	2220      	movs	r2, #32
 8006442:	4013      	ands	r3, r2
 8006444:	2b20      	cmp	r3, #32
 8006446:	d129      	bne.n	800649c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	699b      	ldr	r3, [r3, #24]
 800644e:	2204      	movs	r2, #4
 8006450:	4013      	ands	r3, r2
 8006452:	2b04      	cmp	r3, #4
 8006454:	d105      	bne.n	8006462 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800645a:	2b00      	cmp	r3, #0
 800645c:	d001      	beq.n	8006462 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800645e:	2300      	movs	r3, #0
 8006460:	e03f      	b.n	80064e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2220      	movs	r2, #32
 8006468:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	685a      	ldr	r2, [r3, #4]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	491d      	ldr	r1, [pc, #116]	; (80064ec <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8006476:	400a      	ands	r2, r1
 8006478:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2241      	movs	r2, #65	; 0x41
 8006484:	2120      	movs	r1, #32
 8006486:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2242      	movs	r2, #66	; 0x42
 800648c:	2100      	movs	r1, #0
 800648e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2240      	movs	r2, #64	; 0x40
 8006494:	2100      	movs	r1, #0
 8006496:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e022      	b.n	80064e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800649c:	f7fd ffc6 	bl	800442c <HAL_GetTick>
 80064a0:	0002      	movs	r2, r0
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	68ba      	ldr	r2, [r7, #8]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d302      	bcc.n	80064b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10f      	bne.n	80064d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064b6:	2220      	movs	r2, #32
 80064b8:	431a      	orrs	r2, r3
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2241      	movs	r2, #65	; 0x41
 80064c2:	2120      	movs	r1, #32
 80064c4:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2240      	movs	r2, #64	; 0x40
 80064ca:	2100      	movs	r1, #0
 80064cc:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e007      	b.n	80064e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	2204      	movs	r2, #4
 80064da:	4013      	ands	r3, r2
 80064dc:	2b04      	cmp	r3, #4
 80064de:	d1a2      	bne.n	8006426 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	0018      	movs	r0, r3
 80064e4:	46bd      	mov	sp, r7
 80064e6:	b004      	add	sp, #16
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	46c0      	nop			; (mov r8, r8)
 80064ec:	fe00e800 	.word	0xfe00e800

080064f0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	2210      	movs	r2, #16
 8006504:	4013      	ands	r3, r2
 8006506:	2b10      	cmp	r3, #16
 8006508:	d164      	bne.n	80065d4 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	685a      	ldr	r2, [r3, #4]
 8006510:	2380      	movs	r3, #128	; 0x80
 8006512:	049b      	lsls	r3, r3, #18
 8006514:	401a      	ands	r2, r3
 8006516:	2380      	movs	r3, #128	; 0x80
 8006518:	049b      	lsls	r3, r3, #18
 800651a:	429a      	cmp	r2, r3
 800651c:	d02b      	beq.n	8006576 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	685a      	ldr	r2, [r3, #4]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2180      	movs	r1, #128	; 0x80
 800652a:	01c9      	lsls	r1, r1, #7
 800652c:	430a      	orrs	r2, r1
 800652e:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006530:	e021      	b.n	8006576 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	3301      	adds	r3, #1
 8006536:	d01e      	beq.n	8006576 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006538:	f7fd ff78 	bl	800442c <HAL_GetTick>
 800653c:	0002      	movs	r2, r0
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	68ba      	ldr	r2, [r7, #8]
 8006544:	429a      	cmp	r2, r3
 8006546:	d302      	bcc.n	800654e <I2C_IsAcknowledgeFailed+0x5e>
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d113      	bne.n	8006576 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006552:	2220      	movs	r2, #32
 8006554:	431a      	orrs	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2241      	movs	r2, #65	; 0x41
 800655e:	2120      	movs	r1, #32
 8006560:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2242      	movs	r2, #66	; 0x42
 8006566:	2100      	movs	r1, #0
 8006568:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2240      	movs	r2, #64	; 0x40
 800656e:	2100      	movs	r1, #0
 8006570:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e02f      	b.n	80065d6 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	2220      	movs	r2, #32
 800657e:	4013      	ands	r3, r2
 8006580:	2b20      	cmp	r3, #32
 8006582:	d1d6      	bne.n	8006532 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2210      	movs	r2, #16
 800658a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2220      	movs	r2, #32
 8006592:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	0018      	movs	r0, r3
 8006598:	f7ff fe62 	bl	8006260 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	685a      	ldr	r2, [r3, #4]
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	490e      	ldr	r1, [pc, #56]	; (80065e0 <I2C_IsAcknowledgeFailed+0xf0>)
 80065a8:	400a      	ands	r2, r1
 80065aa:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065b0:	2204      	movs	r2, #4
 80065b2:	431a      	orrs	r2, r3
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2241      	movs	r2, #65	; 0x41
 80065bc:	2120      	movs	r1, #32
 80065be:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2242      	movs	r2, #66	; 0x42
 80065c4:	2100      	movs	r1, #0
 80065c6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2240      	movs	r2, #64	; 0x40
 80065cc:	2100      	movs	r1, #0
 80065ce:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e000      	b.n	80065d6 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	0018      	movs	r0, r3
 80065d8:	46bd      	mov	sp, r7
 80065da:	b004      	add	sp, #16
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	46c0      	nop			; (mov r8, r8)
 80065e0:	fe00e800 	.word	0xfe00e800

080065e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80065e4:	b590      	push	{r4, r7, lr}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	0008      	movs	r0, r1
 80065ee:	0011      	movs	r1, r2
 80065f0:	607b      	str	r3, [r7, #4]
 80065f2:	240a      	movs	r4, #10
 80065f4:	193b      	adds	r3, r7, r4
 80065f6:	1c02      	adds	r2, r0, #0
 80065f8:	801a      	strh	r2, [r3, #0]
 80065fa:	2009      	movs	r0, #9
 80065fc:	183b      	adds	r3, r7, r0
 80065fe:	1c0a      	adds	r2, r1, #0
 8006600:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	6a3a      	ldr	r2, [r7, #32]
 800660a:	0d51      	lsrs	r1, r2, #21
 800660c:	2280      	movs	r2, #128	; 0x80
 800660e:	00d2      	lsls	r2, r2, #3
 8006610:	400a      	ands	r2, r1
 8006612:	490e      	ldr	r1, [pc, #56]	; (800664c <I2C_TransferConfig+0x68>)
 8006614:	430a      	orrs	r2, r1
 8006616:	43d2      	mvns	r2, r2
 8006618:	401a      	ands	r2, r3
 800661a:	0011      	movs	r1, r2
 800661c:	193b      	adds	r3, r7, r4
 800661e:	881b      	ldrh	r3, [r3, #0]
 8006620:	059b      	lsls	r3, r3, #22
 8006622:	0d9a      	lsrs	r2, r3, #22
 8006624:	183b      	adds	r3, r7, r0
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	0418      	lsls	r0, r3, #16
 800662a:	23ff      	movs	r3, #255	; 0xff
 800662c:	041b      	lsls	r3, r3, #16
 800662e:	4003      	ands	r3, r0
 8006630:	431a      	orrs	r2, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	431a      	orrs	r2, r3
 8006636:	6a3b      	ldr	r3, [r7, #32]
 8006638:	431a      	orrs	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	430a      	orrs	r2, r1
 8006640:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8006642:	46c0      	nop			; (mov r8, r8)
 8006644:	46bd      	mov	sp, r7
 8006646:	b005      	add	sp, #20
 8006648:	bd90      	pop	{r4, r7, pc}
 800664a:	46c0      	nop			; (mov r8, r8)
 800664c:	03ff63ff 	.word	0x03ff63ff

08006650 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
 8006658:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2241      	movs	r2, #65	; 0x41
 800665e:	5c9b      	ldrb	r3, [r3, r2]
 8006660:	b2db      	uxtb	r3, r3
 8006662:	2b20      	cmp	r3, #32
 8006664:	d138      	bne.n	80066d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2240      	movs	r2, #64	; 0x40
 800666a:	5c9b      	ldrb	r3, [r3, r2]
 800666c:	2b01      	cmp	r3, #1
 800666e:	d101      	bne.n	8006674 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006670:	2302      	movs	r3, #2
 8006672:	e032      	b.n	80066da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2240      	movs	r2, #64	; 0x40
 8006678:	2101      	movs	r1, #1
 800667a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2241      	movs	r2, #65	; 0x41
 8006680:	2124      	movs	r1, #36	; 0x24
 8006682:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2101      	movs	r1, #1
 8006690:	438a      	bics	r2, r1
 8006692:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4911      	ldr	r1, [pc, #68]	; (80066e4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80066a0:	400a      	ands	r2, r1
 80066a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6819      	ldr	r1, [r3, #0]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	683a      	ldr	r2, [r7, #0]
 80066b0:	430a      	orrs	r2, r1
 80066b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2101      	movs	r1, #1
 80066c0:	430a      	orrs	r2, r1
 80066c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2241      	movs	r2, #65	; 0x41
 80066c8:	2120      	movs	r1, #32
 80066ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2240      	movs	r2, #64	; 0x40
 80066d0:	2100      	movs	r1, #0
 80066d2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80066d4:	2300      	movs	r3, #0
 80066d6:	e000      	b.n	80066da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80066d8:	2302      	movs	r3, #2
  }
}
 80066da:	0018      	movs	r0, r3
 80066dc:	46bd      	mov	sp, r7
 80066de:	b002      	add	sp, #8
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	46c0      	nop			; (mov r8, r8)
 80066e4:	ffffefff 	.word	0xffffefff

080066e8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2241      	movs	r2, #65	; 0x41
 80066f6:	5c9b      	ldrb	r3, [r3, r2]
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	2b20      	cmp	r3, #32
 80066fc:	d139      	bne.n	8006772 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2240      	movs	r2, #64	; 0x40
 8006702:	5c9b      	ldrb	r3, [r3, r2]
 8006704:	2b01      	cmp	r3, #1
 8006706:	d101      	bne.n	800670c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006708:	2302      	movs	r3, #2
 800670a:	e033      	b.n	8006774 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2240      	movs	r2, #64	; 0x40
 8006710:	2101      	movs	r1, #1
 8006712:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2241      	movs	r2, #65	; 0x41
 8006718:	2124      	movs	r1, #36	; 0x24
 800671a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2101      	movs	r1, #1
 8006728:	438a      	bics	r2, r1
 800672a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	4a11      	ldr	r2, [pc, #68]	; (800677c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006738:	4013      	ands	r3, r2
 800673a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	021b      	lsls	r3, r3, #8
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	4313      	orrs	r3, r2
 8006744:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68fa      	ldr	r2, [r7, #12]
 800674c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2101      	movs	r1, #1
 800675a:	430a      	orrs	r2, r1
 800675c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2241      	movs	r2, #65	; 0x41
 8006762:	2120      	movs	r1, #32
 8006764:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2240      	movs	r2, #64	; 0x40
 800676a:	2100      	movs	r1, #0
 800676c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800676e:	2300      	movs	r3, #0
 8006770:	e000      	b.n	8006774 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006772:	2302      	movs	r3, #2
  }
}
 8006774:	0018      	movs	r0, r3
 8006776:	46bd      	mov	sp, r7
 8006778:	b004      	add	sp, #16
 800677a:	bd80      	pop	{r7, pc}
 800677c:	fffff0ff 	.word	0xfffff0ff

08006780 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b088      	sub	sp, #32
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d102      	bne.n	8006794 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	f000 fb76 	bl	8006e80 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2201      	movs	r2, #1
 800679a:	4013      	ands	r3, r2
 800679c:	d100      	bne.n	80067a0 <HAL_RCC_OscConfig+0x20>
 800679e:	e08e      	b.n	80068be <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80067a0:	4bc5      	ldr	r3, [pc, #788]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	220c      	movs	r2, #12
 80067a6:	4013      	ands	r3, r2
 80067a8:	2b04      	cmp	r3, #4
 80067aa:	d00e      	beq.n	80067ca <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80067ac:	4bc2      	ldr	r3, [pc, #776]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	220c      	movs	r2, #12
 80067b2:	4013      	ands	r3, r2
 80067b4:	2b08      	cmp	r3, #8
 80067b6:	d117      	bne.n	80067e8 <HAL_RCC_OscConfig+0x68>
 80067b8:	4bbf      	ldr	r3, [pc, #764]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	23c0      	movs	r3, #192	; 0xc0
 80067be:	025b      	lsls	r3, r3, #9
 80067c0:	401a      	ands	r2, r3
 80067c2:	2380      	movs	r3, #128	; 0x80
 80067c4:	025b      	lsls	r3, r3, #9
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d10e      	bne.n	80067e8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067ca:	4bbb      	ldr	r3, [pc, #748]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	2380      	movs	r3, #128	; 0x80
 80067d0:	029b      	lsls	r3, r3, #10
 80067d2:	4013      	ands	r3, r2
 80067d4:	d100      	bne.n	80067d8 <HAL_RCC_OscConfig+0x58>
 80067d6:	e071      	b.n	80068bc <HAL_RCC_OscConfig+0x13c>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d000      	beq.n	80067e2 <HAL_RCC_OscConfig+0x62>
 80067e0:	e06c      	b.n	80068bc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	f000 fb4c 	bl	8006e80 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d107      	bne.n	8006800 <HAL_RCC_OscConfig+0x80>
 80067f0:	4bb1      	ldr	r3, [pc, #708]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	4bb0      	ldr	r3, [pc, #704]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 80067f6:	2180      	movs	r1, #128	; 0x80
 80067f8:	0249      	lsls	r1, r1, #9
 80067fa:	430a      	orrs	r2, r1
 80067fc:	601a      	str	r2, [r3, #0]
 80067fe:	e02f      	b.n	8006860 <HAL_RCC_OscConfig+0xe0>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d10c      	bne.n	8006822 <HAL_RCC_OscConfig+0xa2>
 8006808:	4bab      	ldr	r3, [pc, #684]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 800680a:	681a      	ldr	r2, [r3, #0]
 800680c:	4baa      	ldr	r3, [pc, #680]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 800680e:	49ab      	ldr	r1, [pc, #684]	; (8006abc <HAL_RCC_OscConfig+0x33c>)
 8006810:	400a      	ands	r2, r1
 8006812:	601a      	str	r2, [r3, #0]
 8006814:	4ba8      	ldr	r3, [pc, #672]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	4ba7      	ldr	r3, [pc, #668]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 800681a:	49a9      	ldr	r1, [pc, #676]	; (8006ac0 <HAL_RCC_OscConfig+0x340>)
 800681c:	400a      	ands	r2, r1
 800681e:	601a      	str	r2, [r3, #0]
 8006820:	e01e      	b.n	8006860 <HAL_RCC_OscConfig+0xe0>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	2b05      	cmp	r3, #5
 8006828:	d10e      	bne.n	8006848 <HAL_RCC_OscConfig+0xc8>
 800682a:	4ba3      	ldr	r3, [pc, #652]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	4ba2      	ldr	r3, [pc, #648]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 8006830:	2180      	movs	r1, #128	; 0x80
 8006832:	02c9      	lsls	r1, r1, #11
 8006834:	430a      	orrs	r2, r1
 8006836:	601a      	str	r2, [r3, #0]
 8006838:	4b9f      	ldr	r3, [pc, #636]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	4b9e      	ldr	r3, [pc, #632]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 800683e:	2180      	movs	r1, #128	; 0x80
 8006840:	0249      	lsls	r1, r1, #9
 8006842:	430a      	orrs	r2, r1
 8006844:	601a      	str	r2, [r3, #0]
 8006846:	e00b      	b.n	8006860 <HAL_RCC_OscConfig+0xe0>
 8006848:	4b9b      	ldr	r3, [pc, #620]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	4b9a      	ldr	r3, [pc, #616]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 800684e:	499b      	ldr	r1, [pc, #620]	; (8006abc <HAL_RCC_OscConfig+0x33c>)
 8006850:	400a      	ands	r2, r1
 8006852:	601a      	str	r2, [r3, #0]
 8006854:	4b98      	ldr	r3, [pc, #608]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	4b97      	ldr	r3, [pc, #604]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 800685a:	4999      	ldr	r1, [pc, #612]	; (8006ac0 <HAL_RCC_OscConfig+0x340>)
 800685c:	400a      	ands	r2, r1
 800685e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d014      	beq.n	8006892 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006868:	f7fd fde0 	bl	800442c <HAL_GetTick>
 800686c:	0003      	movs	r3, r0
 800686e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006870:	e008      	b.n	8006884 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006872:	f7fd fddb 	bl	800442c <HAL_GetTick>
 8006876:	0002      	movs	r2, r0
 8006878:	69bb      	ldr	r3, [r7, #24]
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	2b64      	cmp	r3, #100	; 0x64
 800687e:	d901      	bls.n	8006884 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8006880:	2303      	movs	r3, #3
 8006882:	e2fd      	b.n	8006e80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006884:	4b8c      	ldr	r3, [pc, #560]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	2380      	movs	r3, #128	; 0x80
 800688a:	029b      	lsls	r3, r3, #10
 800688c:	4013      	ands	r3, r2
 800688e:	d0f0      	beq.n	8006872 <HAL_RCC_OscConfig+0xf2>
 8006890:	e015      	b.n	80068be <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006892:	f7fd fdcb 	bl	800442c <HAL_GetTick>
 8006896:	0003      	movs	r3, r0
 8006898:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800689a:	e008      	b.n	80068ae <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800689c:	f7fd fdc6 	bl	800442c <HAL_GetTick>
 80068a0:	0002      	movs	r2, r0
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	1ad3      	subs	r3, r2, r3
 80068a6:	2b64      	cmp	r3, #100	; 0x64
 80068a8:	d901      	bls.n	80068ae <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80068aa:	2303      	movs	r3, #3
 80068ac:	e2e8      	b.n	8006e80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068ae:	4b82      	ldr	r3, [pc, #520]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	2380      	movs	r3, #128	; 0x80
 80068b4:	029b      	lsls	r3, r3, #10
 80068b6:	4013      	ands	r3, r2
 80068b8:	d1f0      	bne.n	800689c <HAL_RCC_OscConfig+0x11c>
 80068ba:	e000      	b.n	80068be <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068bc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2202      	movs	r2, #2
 80068c4:	4013      	ands	r3, r2
 80068c6:	d100      	bne.n	80068ca <HAL_RCC_OscConfig+0x14a>
 80068c8:	e06c      	b.n	80069a4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80068ca:	4b7b      	ldr	r3, [pc, #492]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	220c      	movs	r2, #12
 80068d0:	4013      	ands	r3, r2
 80068d2:	d00e      	beq.n	80068f2 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80068d4:	4b78      	ldr	r3, [pc, #480]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	220c      	movs	r2, #12
 80068da:	4013      	ands	r3, r2
 80068dc:	2b08      	cmp	r3, #8
 80068de:	d11f      	bne.n	8006920 <HAL_RCC_OscConfig+0x1a0>
 80068e0:	4b75      	ldr	r3, [pc, #468]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 80068e2:	685a      	ldr	r2, [r3, #4]
 80068e4:	23c0      	movs	r3, #192	; 0xc0
 80068e6:	025b      	lsls	r3, r3, #9
 80068e8:	401a      	ands	r2, r3
 80068ea:	2380      	movs	r3, #128	; 0x80
 80068ec:	021b      	lsls	r3, r3, #8
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d116      	bne.n	8006920 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068f2:	4b71      	ldr	r3, [pc, #452]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2202      	movs	r2, #2
 80068f8:	4013      	ands	r3, r2
 80068fa:	d005      	beq.n	8006908 <HAL_RCC_OscConfig+0x188>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	2b01      	cmp	r3, #1
 8006902:	d001      	beq.n	8006908 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e2bb      	b.n	8006e80 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006908:	4b6b      	ldr	r3, [pc, #428]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	22f8      	movs	r2, #248	; 0xf8
 800690e:	4393      	bics	r3, r2
 8006910:	0019      	movs	r1, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	00da      	lsls	r2, r3, #3
 8006918:	4b67      	ldr	r3, [pc, #412]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 800691a:	430a      	orrs	r2, r1
 800691c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800691e:	e041      	b.n	80069a4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	68db      	ldr	r3, [r3, #12]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d024      	beq.n	8006972 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006928:	4b63      	ldr	r3, [pc, #396]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	4b62      	ldr	r3, [pc, #392]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 800692e:	2101      	movs	r1, #1
 8006930:	430a      	orrs	r2, r1
 8006932:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006934:	f7fd fd7a 	bl	800442c <HAL_GetTick>
 8006938:	0003      	movs	r3, r0
 800693a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800693c:	e008      	b.n	8006950 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800693e:	f7fd fd75 	bl	800442c <HAL_GetTick>
 8006942:	0002      	movs	r2, r0
 8006944:	69bb      	ldr	r3, [r7, #24]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	2b02      	cmp	r3, #2
 800694a:	d901      	bls.n	8006950 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800694c:	2303      	movs	r3, #3
 800694e:	e297      	b.n	8006e80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006950:	4b59      	ldr	r3, [pc, #356]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2202      	movs	r2, #2
 8006956:	4013      	ands	r3, r2
 8006958:	d0f1      	beq.n	800693e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800695a:	4b57      	ldr	r3, [pc, #348]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	22f8      	movs	r2, #248	; 0xf8
 8006960:	4393      	bics	r3, r2
 8006962:	0019      	movs	r1, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	00da      	lsls	r2, r3, #3
 800696a:	4b53      	ldr	r3, [pc, #332]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 800696c:	430a      	orrs	r2, r1
 800696e:	601a      	str	r2, [r3, #0]
 8006970:	e018      	b.n	80069a4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006972:	4b51      	ldr	r3, [pc, #324]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 8006974:	681a      	ldr	r2, [r3, #0]
 8006976:	4b50      	ldr	r3, [pc, #320]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 8006978:	2101      	movs	r1, #1
 800697a:	438a      	bics	r2, r1
 800697c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800697e:	f7fd fd55 	bl	800442c <HAL_GetTick>
 8006982:	0003      	movs	r3, r0
 8006984:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006986:	e008      	b.n	800699a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006988:	f7fd fd50 	bl	800442c <HAL_GetTick>
 800698c:	0002      	movs	r2, r0
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	2b02      	cmp	r3, #2
 8006994:	d901      	bls.n	800699a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	e272      	b.n	8006e80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800699a:	4b47      	ldr	r3, [pc, #284]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2202      	movs	r2, #2
 80069a0:	4013      	ands	r3, r2
 80069a2:	d1f1      	bne.n	8006988 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2208      	movs	r2, #8
 80069aa:	4013      	ands	r3, r2
 80069ac:	d036      	beq.n	8006a1c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	69db      	ldr	r3, [r3, #28]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d019      	beq.n	80069ea <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069b6:	4b40      	ldr	r3, [pc, #256]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 80069b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069ba:	4b3f      	ldr	r3, [pc, #252]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 80069bc:	2101      	movs	r1, #1
 80069be:	430a      	orrs	r2, r1
 80069c0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069c2:	f7fd fd33 	bl	800442c <HAL_GetTick>
 80069c6:	0003      	movs	r3, r0
 80069c8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069ca:	e008      	b.n	80069de <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069cc:	f7fd fd2e 	bl	800442c <HAL_GetTick>
 80069d0:	0002      	movs	r2, r0
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	2b02      	cmp	r3, #2
 80069d8:	d901      	bls.n	80069de <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80069da:	2303      	movs	r3, #3
 80069dc:	e250      	b.n	8006e80 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069de:	4b36      	ldr	r3, [pc, #216]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 80069e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e2:	2202      	movs	r2, #2
 80069e4:	4013      	ands	r3, r2
 80069e6:	d0f1      	beq.n	80069cc <HAL_RCC_OscConfig+0x24c>
 80069e8:	e018      	b.n	8006a1c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069ea:	4b33      	ldr	r3, [pc, #204]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 80069ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069ee:	4b32      	ldr	r3, [pc, #200]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 80069f0:	2101      	movs	r1, #1
 80069f2:	438a      	bics	r2, r1
 80069f4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069f6:	f7fd fd19 	bl	800442c <HAL_GetTick>
 80069fa:	0003      	movs	r3, r0
 80069fc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069fe:	e008      	b.n	8006a12 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a00:	f7fd fd14 	bl	800442c <HAL_GetTick>
 8006a04:	0002      	movs	r2, r0
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d901      	bls.n	8006a12 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e236      	b.n	8006e80 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a12:	4b29      	ldr	r3, [pc, #164]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 8006a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a16:	2202      	movs	r2, #2
 8006a18:	4013      	ands	r3, r2
 8006a1a:	d1f1      	bne.n	8006a00 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	2204      	movs	r2, #4
 8006a22:	4013      	ands	r3, r2
 8006a24:	d100      	bne.n	8006a28 <HAL_RCC_OscConfig+0x2a8>
 8006a26:	e0b5      	b.n	8006b94 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a28:	201f      	movs	r0, #31
 8006a2a:	183b      	adds	r3, r7, r0
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a30:	4b21      	ldr	r3, [pc, #132]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 8006a32:	69da      	ldr	r2, [r3, #28]
 8006a34:	2380      	movs	r3, #128	; 0x80
 8006a36:	055b      	lsls	r3, r3, #21
 8006a38:	4013      	ands	r3, r2
 8006a3a:	d110      	bne.n	8006a5e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a3c:	4b1e      	ldr	r3, [pc, #120]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 8006a3e:	69da      	ldr	r2, [r3, #28]
 8006a40:	4b1d      	ldr	r3, [pc, #116]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 8006a42:	2180      	movs	r1, #128	; 0x80
 8006a44:	0549      	lsls	r1, r1, #21
 8006a46:	430a      	orrs	r2, r1
 8006a48:	61da      	str	r2, [r3, #28]
 8006a4a:	4b1b      	ldr	r3, [pc, #108]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 8006a4c:	69da      	ldr	r2, [r3, #28]
 8006a4e:	2380      	movs	r3, #128	; 0x80
 8006a50:	055b      	lsls	r3, r3, #21
 8006a52:	4013      	ands	r3, r2
 8006a54:	60fb      	str	r3, [r7, #12]
 8006a56:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006a58:	183b      	adds	r3, r7, r0
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a5e:	4b19      	ldr	r3, [pc, #100]	; (8006ac4 <HAL_RCC_OscConfig+0x344>)
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	2380      	movs	r3, #128	; 0x80
 8006a64:	005b      	lsls	r3, r3, #1
 8006a66:	4013      	ands	r3, r2
 8006a68:	d11a      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a6a:	4b16      	ldr	r3, [pc, #88]	; (8006ac4 <HAL_RCC_OscConfig+0x344>)
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	4b15      	ldr	r3, [pc, #84]	; (8006ac4 <HAL_RCC_OscConfig+0x344>)
 8006a70:	2180      	movs	r1, #128	; 0x80
 8006a72:	0049      	lsls	r1, r1, #1
 8006a74:	430a      	orrs	r2, r1
 8006a76:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a78:	f7fd fcd8 	bl	800442c <HAL_GetTick>
 8006a7c:	0003      	movs	r3, r0
 8006a7e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a80:	e008      	b.n	8006a94 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a82:	f7fd fcd3 	bl	800442c <HAL_GetTick>
 8006a86:	0002      	movs	r2, r0
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	2b64      	cmp	r3, #100	; 0x64
 8006a8e:	d901      	bls.n	8006a94 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8006a90:	2303      	movs	r3, #3
 8006a92:	e1f5      	b.n	8006e80 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a94:	4b0b      	ldr	r3, [pc, #44]	; (8006ac4 <HAL_RCC_OscConfig+0x344>)
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	2380      	movs	r3, #128	; 0x80
 8006a9a:	005b      	lsls	r3, r3, #1
 8006a9c:	4013      	ands	r3, r2
 8006a9e:	d0f0      	beq.n	8006a82 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d10f      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x348>
 8006aa8:	4b03      	ldr	r3, [pc, #12]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 8006aaa:	6a1a      	ldr	r2, [r3, #32]
 8006aac:	4b02      	ldr	r3, [pc, #8]	; (8006ab8 <HAL_RCC_OscConfig+0x338>)
 8006aae:	2101      	movs	r1, #1
 8006ab0:	430a      	orrs	r2, r1
 8006ab2:	621a      	str	r2, [r3, #32]
 8006ab4:	e036      	b.n	8006b24 <HAL_RCC_OscConfig+0x3a4>
 8006ab6:	46c0      	nop			; (mov r8, r8)
 8006ab8:	40021000 	.word	0x40021000
 8006abc:	fffeffff 	.word	0xfffeffff
 8006ac0:	fffbffff 	.word	0xfffbffff
 8006ac4:	40007000 	.word	0x40007000
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d10c      	bne.n	8006aea <HAL_RCC_OscConfig+0x36a>
 8006ad0:	4bca      	ldr	r3, [pc, #808]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006ad2:	6a1a      	ldr	r2, [r3, #32]
 8006ad4:	4bc9      	ldr	r3, [pc, #804]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006ad6:	2101      	movs	r1, #1
 8006ad8:	438a      	bics	r2, r1
 8006ada:	621a      	str	r2, [r3, #32]
 8006adc:	4bc7      	ldr	r3, [pc, #796]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006ade:	6a1a      	ldr	r2, [r3, #32]
 8006ae0:	4bc6      	ldr	r3, [pc, #792]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006ae2:	2104      	movs	r1, #4
 8006ae4:	438a      	bics	r2, r1
 8006ae6:	621a      	str	r2, [r3, #32]
 8006ae8:	e01c      	b.n	8006b24 <HAL_RCC_OscConfig+0x3a4>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	2b05      	cmp	r3, #5
 8006af0:	d10c      	bne.n	8006b0c <HAL_RCC_OscConfig+0x38c>
 8006af2:	4bc2      	ldr	r3, [pc, #776]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006af4:	6a1a      	ldr	r2, [r3, #32]
 8006af6:	4bc1      	ldr	r3, [pc, #772]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006af8:	2104      	movs	r1, #4
 8006afa:	430a      	orrs	r2, r1
 8006afc:	621a      	str	r2, [r3, #32]
 8006afe:	4bbf      	ldr	r3, [pc, #764]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006b00:	6a1a      	ldr	r2, [r3, #32]
 8006b02:	4bbe      	ldr	r3, [pc, #760]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006b04:	2101      	movs	r1, #1
 8006b06:	430a      	orrs	r2, r1
 8006b08:	621a      	str	r2, [r3, #32]
 8006b0a:	e00b      	b.n	8006b24 <HAL_RCC_OscConfig+0x3a4>
 8006b0c:	4bbb      	ldr	r3, [pc, #748]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006b0e:	6a1a      	ldr	r2, [r3, #32]
 8006b10:	4bba      	ldr	r3, [pc, #744]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006b12:	2101      	movs	r1, #1
 8006b14:	438a      	bics	r2, r1
 8006b16:	621a      	str	r2, [r3, #32]
 8006b18:	4bb8      	ldr	r3, [pc, #736]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006b1a:	6a1a      	ldr	r2, [r3, #32]
 8006b1c:	4bb7      	ldr	r3, [pc, #732]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006b1e:	2104      	movs	r1, #4
 8006b20:	438a      	bics	r2, r1
 8006b22:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d014      	beq.n	8006b56 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b2c:	f7fd fc7e 	bl	800442c <HAL_GetTick>
 8006b30:	0003      	movs	r3, r0
 8006b32:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b34:	e009      	b.n	8006b4a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b36:	f7fd fc79 	bl	800442c <HAL_GetTick>
 8006b3a:	0002      	movs	r2, r0
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	1ad3      	subs	r3, r2, r3
 8006b40:	4aaf      	ldr	r2, [pc, #700]	; (8006e00 <HAL_RCC_OscConfig+0x680>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d901      	bls.n	8006b4a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8006b46:	2303      	movs	r3, #3
 8006b48:	e19a      	b.n	8006e80 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b4a:	4bac      	ldr	r3, [pc, #688]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006b4c:	6a1b      	ldr	r3, [r3, #32]
 8006b4e:	2202      	movs	r2, #2
 8006b50:	4013      	ands	r3, r2
 8006b52:	d0f0      	beq.n	8006b36 <HAL_RCC_OscConfig+0x3b6>
 8006b54:	e013      	b.n	8006b7e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b56:	f7fd fc69 	bl	800442c <HAL_GetTick>
 8006b5a:	0003      	movs	r3, r0
 8006b5c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b5e:	e009      	b.n	8006b74 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b60:	f7fd fc64 	bl	800442c <HAL_GetTick>
 8006b64:	0002      	movs	r2, r0
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	1ad3      	subs	r3, r2, r3
 8006b6a:	4aa5      	ldr	r2, [pc, #660]	; (8006e00 <HAL_RCC_OscConfig+0x680>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d901      	bls.n	8006b74 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8006b70:	2303      	movs	r3, #3
 8006b72:	e185      	b.n	8006e80 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b74:	4ba1      	ldr	r3, [pc, #644]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006b76:	6a1b      	ldr	r3, [r3, #32]
 8006b78:	2202      	movs	r2, #2
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	d1f0      	bne.n	8006b60 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006b7e:	231f      	movs	r3, #31
 8006b80:	18fb      	adds	r3, r7, r3
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d105      	bne.n	8006b94 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b88:	4b9c      	ldr	r3, [pc, #624]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006b8a:	69da      	ldr	r2, [r3, #28]
 8006b8c:	4b9b      	ldr	r3, [pc, #620]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006b8e:	499d      	ldr	r1, [pc, #628]	; (8006e04 <HAL_RCC_OscConfig+0x684>)
 8006b90:	400a      	ands	r2, r1
 8006b92:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2210      	movs	r2, #16
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	d063      	beq.n	8006c66 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	695b      	ldr	r3, [r3, #20]
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d12a      	bne.n	8006bfc <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006ba6:	4b95      	ldr	r3, [pc, #596]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006ba8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006baa:	4b94      	ldr	r3, [pc, #592]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006bac:	2104      	movs	r1, #4
 8006bae:	430a      	orrs	r2, r1
 8006bb0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8006bb2:	4b92      	ldr	r3, [pc, #584]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006bb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bb6:	4b91      	ldr	r3, [pc, #580]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006bb8:	2101      	movs	r1, #1
 8006bba:	430a      	orrs	r2, r1
 8006bbc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bbe:	f7fd fc35 	bl	800442c <HAL_GetTick>
 8006bc2:	0003      	movs	r3, r0
 8006bc4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006bc6:	e008      	b.n	8006bda <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006bc8:	f7fd fc30 	bl	800442c <HAL_GetTick>
 8006bcc:	0002      	movs	r2, r0
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	2b02      	cmp	r3, #2
 8006bd4:	d901      	bls.n	8006bda <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	e152      	b.n	8006e80 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8006bda:	4b88      	ldr	r3, [pc, #544]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bde:	2202      	movs	r2, #2
 8006be0:	4013      	ands	r3, r2
 8006be2:	d0f1      	beq.n	8006bc8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006be4:	4b85      	ldr	r3, [pc, #532]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006be8:	22f8      	movs	r2, #248	; 0xf8
 8006bea:	4393      	bics	r3, r2
 8006bec:	0019      	movs	r1, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	00da      	lsls	r2, r3, #3
 8006bf4:	4b81      	ldr	r3, [pc, #516]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006bf6:	430a      	orrs	r2, r1
 8006bf8:	635a      	str	r2, [r3, #52]	; 0x34
 8006bfa:	e034      	b.n	8006c66 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	695b      	ldr	r3, [r3, #20]
 8006c00:	3305      	adds	r3, #5
 8006c02:	d111      	bne.n	8006c28 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8006c04:	4b7d      	ldr	r3, [pc, #500]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006c06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c08:	4b7c      	ldr	r3, [pc, #496]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006c0a:	2104      	movs	r1, #4
 8006c0c:	438a      	bics	r2, r1
 8006c0e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8006c10:	4b7a      	ldr	r3, [pc, #488]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c14:	22f8      	movs	r2, #248	; 0xf8
 8006c16:	4393      	bics	r3, r2
 8006c18:	0019      	movs	r1, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	00da      	lsls	r2, r3, #3
 8006c20:	4b76      	ldr	r3, [pc, #472]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006c22:	430a      	orrs	r2, r1
 8006c24:	635a      	str	r2, [r3, #52]	; 0x34
 8006c26:	e01e      	b.n	8006c66 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8006c28:	4b74      	ldr	r3, [pc, #464]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006c2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c2c:	4b73      	ldr	r3, [pc, #460]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006c2e:	2104      	movs	r1, #4
 8006c30:	430a      	orrs	r2, r1
 8006c32:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8006c34:	4b71      	ldr	r3, [pc, #452]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006c36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c38:	4b70      	ldr	r3, [pc, #448]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006c3a:	2101      	movs	r1, #1
 8006c3c:	438a      	bics	r2, r1
 8006c3e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c40:	f7fd fbf4 	bl	800442c <HAL_GetTick>
 8006c44:	0003      	movs	r3, r0
 8006c46:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006c48:	e008      	b.n	8006c5c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8006c4a:	f7fd fbef 	bl	800442c <HAL_GetTick>
 8006c4e:	0002      	movs	r2, r0
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	1ad3      	subs	r3, r2, r3
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	d901      	bls.n	8006c5c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8006c58:	2303      	movs	r3, #3
 8006c5a:	e111      	b.n	8006e80 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8006c5c:	4b67      	ldr	r3, [pc, #412]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c60:	2202      	movs	r2, #2
 8006c62:	4013      	ands	r3, r2
 8006c64:	d1f1      	bne.n	8006c4a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2220      	movs	r2, #32
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	d05c      	beq.n	8006d2a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8006c70:	4b62      	ldr	r3, [pc, #392]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	220c      	movs	r2, #12
 8006c76:	4013      	ands	r3, r2
 8006c78:	2b0c      	cmp	r3, #12
 8006c7a:	d00e      	beq.n	8006c9a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8006c7c:	4b5f      	ldr	r3, [pc, #380]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	220c      	movs	r2, #12
 8006c82:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8006c84:	2b08      	cmp	r3, #8
 8006c86:	d114      	bne.n	8006cb2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8006c88:	4b5c      	ldr	r3, [pc, #368]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006c8a:	685a      	ldr	r2, [r3, #4]
 8006c8c:	23c0      	movs	r3, #192	; 0xc0
 8006c8e:	025b      	lsls	r3, r3, #9
 8006c90:	401a      	ands	r2, r3
 8006c92:	23c0      	movs	r3, #192	; 0xc0
 8006c94:	025b      	lsls	r3, r3, #9
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d10b      	bne.n	8006cb2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8006c9a:	4b58      	ldr	r3, [pc, #352]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006c9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c9e:	2380      	movs	r3, #128	; 0x80
 8006ca0:	025b      	lsls	r3, r3, #9
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	d040      	beq.n	8006d28 <HAL_RCC_OscConfig+0x5a8>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d03c      	beq.n	8006d28 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e0e6      	b.n	8006e80 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d01b      	beq.n	8006cf2 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8006cba:	4b50      	ldr	r3, [pc, #320]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006cbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cbe:	4b4f      	ldr	r3, [pc, #316]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006cc0:	2180      	movs	r1, #128	; 0x80
 8006cc2:	0249      	lsls	r1, r1, #9
 8006cc4:	430a      	orrs	r2, r1
 8006cc6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cc8:	f7fd fbb0 	bl	800442c <HAL_GetTick>
 8006ccc:	0003      	movs	r3, r0
 8006cce:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006cd0:	e008      	b.n	8006ce4 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006cd2:	f7fd fbab 	bl	800442c <HAL_GetTick>
 8006cd6:	0002      	movs	r2, r0
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	1ad3      	subs	r3, r2, r3
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d901      	bls.n	8006ce4 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	e0cd      	b.n	8006e80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006ce4:	4b45      	ldr	r3, [pc, #276]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006ce6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ce8:	2380      	movs	r3, #128	; 0x80
 8006cea:	025b      	lsls	r3, r3, #9
 8006cec:	4013      	ands	r3, r2
 8006cee:	d0f0      	beq.n	8006cd2 <HAL_RCC_OscConfig+0x552>
 8006cf0:	e01b      	b.n	8006d2a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8006cf2:	4b42      	ldr	r3, [pc, #264]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006cf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cf6:	4b41      	ldr	r3, [pc, #260]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006cf8:	4943      	ldr	r1, [pc, #268]	; (8006e08 <HAL_RCC_OscConfig+0x688>)
 8006cfa:	400a      	ands	r2, r1
 8006cfc:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cfe:	f7fd fb95 	bl	800442c <HAL_GetTick>
 8006d02:	0003      	movs	r3, r0
 8006d04:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8006d06:	e008      	b.n	8006d1a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d08:	f7fd fb90 	bl	800442c <HAL_GetTick>
 8006d0c:	0002      	movs	r2, r0
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	d901      	bls.n	8006d1a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8006d16:	2303      	movs	r3, #3
 8006d18:	e0b2      	b.n	8006e80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8006d1a:	4b38      	ldr	r3, [pc, #224]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006d1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d1e:	2380      	movs	r3, #128	; 0x80
 8006d20:	025b      	lsls	r3, r3, #9
 8006d22:	4013      	ands	r3, r2
 8006d24:	d1f0      	bne.n	8006d08 <HAL_RCC_OscConfig+0x588>
 8006d26:	e000      	b.n	8006d2a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8006d28:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d100      	bne.n	8006d34 <HAL_RCC_OscConfig+0x5b4>
 8006d32:	e0a4      	b.n	8006e7e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d34:	4b31      	ldr	r3, [pc, #196]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	220c      	movs	r2, #12
 8006d3a:	4013      	ands	r3, r2
 8006d3c:	2b08      	cmp	r3, #8
 8006d3e:	d100      	bne.n	8006d42 <HAL_RCC_OscConfig+0x5c2>
 8006d40:	e078      	b.n	8006e34 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d14c      	bne.n	8006de4 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d4a:	4b2c      	ldr	r3, [pc, #176]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	4b2b      	ldr	r3, [pc, #172]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006d50:	492e      	ldr	r1, [pc, #184]	; (8006e0c <HAL_RCC_OscConfig+0x68c>)
 8006d52:	400a      	ands	r2, r1
 8006d54:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d56:	f7fd fb69 	bl	800442c <HAL_GetTick>
 8006d5a:	0003      	movs	r3, r0
 8006d5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d5e:	e008      	b.n	8006d72 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d60:	f7fd fb64 	bl	800442c <HAL_GetTick>
 8006d64:	0002      	movs	r2, r0
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d901      	bls.n	8006d72 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e086      	b.n	8006e80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d72:	4b22      	ldr	r3, [pc, #136]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	2380      	movs	r3, #128	; 0x80
 8006d78:	049b      	lsls	r3, r3, #18
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	d1f0      	bne.n	8006d60 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d7e:	4b1f      	ldr	r3, [pc, #124]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d82:	220f      	movs	r2, #15
 8006d84:	4393      	bics	r3, r2
 8006d86:	0019      	movs	r1, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d8c:	4b1b      	ldr	r3, [pc, #108]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006d8e:	430a      	orrs	r2, r1
 8006d90:	62da      	str	r2, [r3, #44]	; 0x2c
 8006d92:	4b1a      	ldr	r3, [pc, #104]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	4a1e      	ldr	r2, [pc, #120]	; (8006e10 <HAL_RCC_OscConfig+0x690>)
 8006d98:	4013      	ands	r3, r2
 8006d9a:	0019      	movs	r1, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006da4:	431a      	orrs	r2, r3
 8006da6:	4b15      	ldr	r3, [pc, #84]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006da8:	430a      	orrs	r2, r1
 8006daa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006dac:	4b13      	ldr	r3, [pc, #76]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	4b12      	ldr	r3, [pc, #72]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006db2:	2180      	movs	r1, #128	; 0x80
 8006db4:	0449      	lsls	r1, r1, #17
 8006db6:	430a      	orrs	r2, r1
 8006db8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006dba:	f7fd fb37 	bl	800442c <HAL_GetTick>
 8006dbe:	0003      	movs	r3, r0
 8006dc0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006dc2:	e008      	b.n	8006dd6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006dc4:	f7fd fb32 	bl	800442c <HAL_GetTick>
 8006dc8:	0002      	movs	r2, r0
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	1ad3      	subs	r3, r2, r3
 8006dce:	2b02      	cmp	r3, #2
 8006dd0:	d901      	bls.n	8006dd6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	e054      	b.n	8006e80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006dd6:	4b09      	ldr	r3, [pc, #36]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	2380      	movs	r3, #128	; 0x80
 8006ddc:	049b      	lsls	r3, r3, #18
 8006dde:	4013      	ands	r3, r2
 8006de0:	d0f0      	beq.n	8006dc4 <HAL_RCC_OscConfig+0x644>
 8006de2:	e04c      	b.n	8006e7e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006de4:	4b05      	ldr	r3, [pc, #20]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	4b04      	ldr	r3, [pc, #16]	; (8006dfc <HAL_RCC_OscConfig+0x67c>)
 8006dea:	4908      	ldr	r1, [pc, #32]	; (8006e0c <HAL_RCC_OscConfig+0x68c>)
 8006dec:	400a      	ands	r2, r1
 8006dee:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006df0:	f7fd fb1c 	bl	800442c <HAL_GetTick>
 8006df4:	0003      	movs	r3, r0
 8006df6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006df8:	e015      	b.n	8006e26 <HAL_RCC_OscConfig+0x6a6>
 8006dfa:	46c0      	nop			; (mov r8, r8)
 8006dfc:	40021000 	.word	0x40021000
 8006e00:	00001388 	.word	0x00001388
 8006e04:	efffffff 	.word	0xefffffff
 8006e08:	fffeffff 	.word	0xfffeffff
 8006e0c:	feffffff 	.word	0xfeffffff
 8006e10:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e14:	f7fd fb0a 	bl	800442c <HAL_GetTick>
 8006e18:	0002      	movs	r2, r0
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d901      	bls.n	8006e26 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e02c      	b.n	8006e80 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006e26:	4b18      	ldr	r3, [pc, #96]	; (8006e88 <HAL_RCC_OscConfig+0x708>)
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	2380      	movs	r3, #128	; 0x80
 8006e2c:	049b      	lsls	r3, r3, #18
 8006e2e:	4013      	ands	r3, r2
 8006e30:	d1f0      	bne.n	8006e14 <HAL_RCC_OscConfig+0x694>
 8006e32:	e024      	b.n	8006e7e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d101      	bne.n	8006e40 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e01f      	b.n	8006e80 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8006e40:	4b11      	ldr	r3, [pc, #68]	; (8006e88 <HAL_RCC_OscConfig+0x708>)
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8006e46:	4b10      	ldr	r3, [pc, #64]	; (8006e88 <HAL_RCC_OscConfig+0x708>)
 8006e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e4a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e4c:	697a      	ldr	r2, [r7, #20]
 8006e4e:	23c0      	movs	r3, #192	; 0xc0
 8006e50:	025b      	lsls	r3, r3, #9
 8006e52:	401a      	ands	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d10e      	bne.n	8006e7a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	220f      	movs	r2, #15
 8006e60:	401a      	ands	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d107      	bne.n	8006e7a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8006e6a:	697a      	ldr	r2, [r7, #20]
 8006e6c:	23f0      	movs	r3, #240	; 0xf0
 8006e6e:	039b      	lsls	r3, r3, #14
 8006e70:	401a      	ands	r2, r3
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d001      	beq.n	8006e7e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e000      	b.n	8006e80 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	0018      	movs	r0, r3
 8006e82:	46bd      	mov	sp, r7
 8006e84:	b008      	add	sp, #32
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	40021000 	.word	0x40021000

08006e8c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d101      	bne.n	8006ea0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e0bf      	b.n	8007020 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006ea0:	4b61      	ldr	r3, [pc, #388]	; (8007028 <HAL_RCC_ClockConfig+0x19c>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	683a      	ldr	r2, [r7, #0]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d911      	bls.n	8006ed2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006eae:	4b5e      	ldr	r3, [pc, #376]	; (8007028 <HAL_RCC_ClockConfig+0x19c>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	4393      	bics	r3, r2
 8006eb6:	0019      	movs	r1, r3
 8006eb8:	4b5b      	ldr	r3, [pc, #364]	; (8007028 <HAL_RCC_ClockConfig+0x19c>)
 8006eba:	683a      	ldr	r2, [r7, #0]
 8006ebc:	430a      	orrs	r2, r1
 8006ebe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ec0:	4b59      	ldr	r3, [pc, #356]	; (8007028 <HAL_RCC_ClockConfig+0x19c>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	683a      	ldr	r2, [r7, #0]
 8006eca:	429a      	cmp	r2, r3
 8006ecc:	d001      	beq.n	8006ed2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	e0a6      	b.n	8007020 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2202      	movs	r2, #2
 8006ed8:	4013      	ands	r3, r2
 8006eda:	d015      	beq.n	8006f08 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	2204      	movs	r2, #4
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	d006      	beq.n	8006ef4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006ee6:	4b51      	ldr	r3, [pc, #324]	; (800702c <HAL_RCC_ClockConfig+0x1a0>)
 8006ee8:	685a      	ldr	r2, [r3, #4]
 8006eea:	4b50      	ldr	r3, [pc, #320]	; (800702c <HAL_RCC_ClockConfig+0x1a0>)
 8006eec:	21e0      	movs	r1, #224	; 0xe0
 8006eee:	00c9      	lsls	r1, r1, #3
 8006ef0:	430a      	orrs	r2, r1
 8006ef2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ef4:	4b4d      	ldr	r3, [pc, #308]	; (800702c <HAL_RCC_ClockConfig+0x1a0>)
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	22f0      	movs	r2, #240	; 0xf0
 8006efa:	4393      	bics	r3, r2
 8006efc:	0019      	movs	r1, r3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	689a      	ldr	r2, [r3, #8]
 8006f02:	4b4a      	ldr	r3, [pc, #296]	; (800702c <HAL_RCC_ClockConfig+0x1a0>)
 8006f04:	430a      	orrs	r2, r1
 8006f06:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2201      	movs	r2, #1
 8006f0e:	4013      	ands	r3, r2
 8006f10:	d04c      	beq.n	8006fac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d107      	bne.n	8006f2a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f1a:	4b44      	ldr	r3, [pc, #272]	; (800702c <HAL_RCC_ClockConfig+0x1a0>)
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	2380      	movs	r3, #128	; 0x80
 8006f20:	029b      	lsls	r3, r3, #10
 8006f22:	4013      	ands	r3, r2
 8006f24:	d120      	bne.n	8006f68 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006f26:	2301      	movs	r3, #1
 8006f28:	e07a      	b.n	8007020 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d107      	bne.n	8006f42 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f32:	4b3e      	ldr	r3, [pc, #248]	; (800702c <HAL_RCC_ClockConfig+0x1a0>)
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	2380      	movs	r3, #128	; 0x80
 8006f38:	049b      	lsls	r3, r3, #18
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	d114      	bne.n	8006f68 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e06e      	b.n	8007020 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	2b03      	cmp	r3, #3
 8006f48:	d107      	bne.n	8006f5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8006f4a:	4b38      	ldr	r3, [pc, #224]	; (800702c <HAL_RCC_ClockConfig+0x1a0>)
 8006f4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f4e:	2380      	movs	r3, #128	; 0x80
 8006f50:	025b      	lsls	r3, r3, #9
 8006f52:	4013      	ands	r3, r2
 8006f54:	d108      	bne.n	8006f68 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006f56:	2301      	movs	r3, #1
 8006f58:	e062      	b.n	8007020 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f5a:	4b34      	ldr	r3, [pc, #208]	; (800702c <HAL_RCC_ClockConfig+0x1a0>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2202      	movs	r2, #2
 8006f60:	4013      	ands	r3, r2
 8006f62:	d101      	bne.n	8006f68 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8006f64:	2301      	movs	r3, #1
 8006f66:	e05b      	b.n	8007020 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f68:	4b30      	ldr	r3, [pc, #192]	; (800702c <HAL_RCC_ClockConfig+0x1a0>)
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	2203      	movs	r2, #3
 8006f6e:	4393      	bics	r3, r2
 8006f70:	0019      	movs	r1, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	685a      	ldr	r2, [r3, #4]
 8006f76:	4b2d      	ldr	r3, [pc, #180]	; (800702c <HAL_RCC_ClockConfig+0x1a0>)
 8006f78:	430a      	orrs	r2, r1
 8006f7a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006f7c:	f7fd fa56 	bl	800442c <HAL_GetTick>
 8006f80:	0003      	movs	r3, r0
 8006f82:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f84:	e009      	b.n	8006f9a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f86:	f7fd fa51 	bl	800442c <HAL_GetTick>
 8006f8a:	0002      	movs	r2, r0
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	1ad3      	subs	r3, r2, r3
 8006f90:	4a27      	ldr	r2, [pc, #156]	; (8007030 <HAL_RCC_ClockConfig+0x1a4>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d901      	bls.n	8006f9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e042      	b.n	8007020 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f9a:	4b24      	ldr	r3, [pc, #144]	; (800702c <HAL_RCC_ClockConfig+0x1a0>)
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	220c      	movs	r2, #12
 8006fa0:	401a      	ands	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d1ec      	bne.n	8006f86 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006fac:	4b1e      	ldr	r3, [pc, #120]	; (8007028 <HAL_RCC_ClockConfig+0x19c>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	4013      	ands	r3, r2
 8006fb4:	683a      	ldr	r2, [r7, #0]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d211      	bcs.n	8006fde <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fba:	4b1b      	ldr	r3, [pc, #108]	; (8007028 <HAL_RCC_ClockConfig+0x19c>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	4393      	bics	r3, r2
 8006fc2:	0019      	movs	r1, r3
 8006fc4:	4b18      	ldr	r3, [pc, #96]	; (8007028 <HAL_RCC_ClockConfig+0x19c>)
 8006fc6:	683a      	ldr	r2, [r7, #0]
 8006fc8:	430a      	orrs	r2, r1
 8006fca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fcc:	4b16      	ldr	r3, [pc, #88]	; (8007028 <HAL_RCC_ClockConfig+0x19c>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	683a      	ldr	r2, [r7, #0]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	d001      	beq.n	8006fde <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e020      	b.n	8007020 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2204      	movs	r2, #4
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	d009      	beq.n	8006ffc <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006fe8:	4b10      	ldr	r3, [pc, #64]	; (800702c <HAL_RCC_ClockConfig+0x1a0>)
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	4a11      	ldr	r2, [pc, #68]	; (8007034 <HAL_RCC_ClockConfig+0x1a8>)
 8006fee:	4013      	ands	r3, r2
 8006ff0:	0019      	movs	r1, r3
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	68da      	ldr	r2, [r3, #12]
 8006ff6:	4b0d      	ldr	r3, [pc, #52]	; (800702c <HAL_RCC_ClockConfig+0x1a0>)
 8006ff8:	430a      	orrs	r2, r1
 8006ffa:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8006ffc:	f000 f820 	bl	8007040 <HAL_RCC_GetSysClockFreq>
 8007000:	0001      	movs	r1, r0
 8007002:	4b0a      	ldr	r3, [pc, #40]	; (800702c <HAL_RCC_ClockConfig+0x1a0>)
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	091b      	lsrs	r3, r3, #4
 8007008:	220f      	movs	r2, #15
 800700a:	4013      	ands	r3, r2
 800700c:	4a0a      	ldr	r2, [pc, #40]	; (8007038 <HAL_RCC_ClockConfig+0x1ac>)
 800700e:	5cd3      	ldrb	r3, [r2, r3]
 8007010:	000a      	movs	r2, r1
 8007012:	40da      	lsrs	r2, r3
 8007014:	4b09      	ldr	r3, [pc, #36]	; (800703c <HAL_RCC_ClockConfig+0x1b0>)
 8007016:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8007018:	2003      	movs	r0, #3
 800701a:	f7fd f9c1 	bl	80043a0 <HAL_InitTick>
  
  return HAL_OK;
 800701e:	2300      	movs	r3, #0
}
 8007020:	0018      	movs	r0, r3
 8007022:	46bd      	mov	sp, r7
 8007024:	b004      	add	sp, #16
 8007026:	bd80      	pop	{r7, pc}
 8007028:	40022000 	.word	0x40022000
 800702c:	40021000 	.word	0x40021000
 8007030:	00001388 	.word	0x00001388
 8007034:	fffff8ff 	.word	0xfffff8ff
 8007038:	08014e64 	.word	0x08014e64
 800703c:	20000000 	.word	0x20000000

08007040 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007040:	b590      	push	{r4, r7, lr}
 8007042:	b08f      	sub	sp, #60	; 0x3c
 8007044:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8007046:	2314      	movs	r3, #20
 8007048:	18fb      	adds	r3, r7, r3
 800704a:	4a38      	ldr	r2, [pc, #224]	; (800712c <HAL_RCC_GetSysClockFreq+0xec>)
 800704c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800704e:	c313      	stmia	r3!, {r0, r1, r4}
 8007050:	6812      	ldr	r2, [r2, #0]
 8007052:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8007054:	1d3b      	adds	r3, r7, #4
 8007056:	4a36      	ldr	r2, [pc, #216]	; (8007130 <HAL_RCC_GetSysClockFreq+0xf0>)
 8007058:	ca13      	ldmia	r2!, {r0, r1, r4}
 800705a:	c313      	stmia	r3!, {r0, r1, r4}
 800705c:	6812      	ldr	r2, [r2, #0]
 800705e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8007060:	2300      	movs	r3, #0
 8007062:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007064:	2300      	movs	r3, #0
 8007066:	62bb      	str	r3, [r7, #40]	; 0x28
 8007068:	2300      	movs	r3, #0
 800706a:	637b      	str	r3, [r7, #52]	; 0x34
 800706c:	2300      	movs	r3, #0
 800706e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8007070:	2300      	movs	r3, #0
 8007072:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8007074:	4b2f      	ldr	r3, [pc, #188]	; (8007134 <HAL_RCC_GetSysClockFreq+0xf4>)
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800707a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800707c:	220c      	movs	r2, #12
 800707e:	4013      	ands	r3, r2
 8007080:	2b0c      	cmp	r3, #12
 8007082:	d047      	beq.n	8007114 <HAL_RCC_GetSysClockFreq+0xd4>
 8007084:	d849      	bhi.n	800711a <HAL_RCC_GetSysClockFreq+0xda>
 8007086:	2b04      	cmp	r3, #4
 8007088:	d002      	beq.n	8007090 <HAL_RCC_GetSysClockFreq+0x50>
 800708a:	2b08      	cmp	r3, #8
 800708c:	d003      	beq.n	8007096 <HAL_RCC_GetSysClockFreq+0x56>
 800708e:	e044      	b.n	800711a <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007090:	4b29      	ldr	r3, [pc, #164]	; (8007138 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007092:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007094:	e044      	b.n	8007120 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8007096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007098:	0c9b      	lsrs	r3, r3, #18
 800709a:	220f      	movs	r2, #15
 800709c:	4013      	ands	r3, r2
 800709e:	2214      	movs	r2, #20
 80070a0:	18ba      	adds	r2, r7, r2
 80070a2:	5cd3      	ldrb	r3, [r2, r3]
 80070a4:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80070a6:	4b23      	ldr	r3, [pc, #140]	; (8007134 <HAL_RCC_GetSysClockFreq+0xf4>)
 80070a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070aa:	220f      	movs	r2, #15
 80070ac:	4013      	ands	r3, r2
 80070ae:	1d3a      	adds	r2, r7, #4
 80070b0:	5cd3      	ldrb	r3, [r2, r3]
 80070b2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80070b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070b6:	23c0      	movs	r3, #192	; 0xc0
 80070b8:	025b      	lsls	r3, r3, #9
 80070ba:	401a      	ands	r2, r3
 80070bc:	2380      	movs	r3, #128	; 0x80
 80070be:	025b      	lsls	r3, r3, #9
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d109      	bne.n	80070d8 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80070c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070c6:	481c      	ldr	r0, [pc, #112]	; (8007138 <HAL_RCC_GetSysClockFreq+0xf8>)
 80070c8:	f7f9 f83a 	bl	8000140 <__udivsi3>
 80070cc:	0003      	movs	r3, r0
 80070ce:	001a      	movs	r2, r3
 80070d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d2:	4353      	muls	r3, r2
 80070d4:	637b      	str	r3, [r7, #52]	; 0x34
 80070d6:	e01a      	b.n	800710e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80070d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070da:	23c0      	movs	r3, #192	; 0xc0
 80070dc:	025b      	lsls	r3, r3, #9
 80070de:	401a      	ands	r2, r3
 80070e0:	23c0      	movs	r3, #192	; 0xc0
 80070e2:	025b      	lsls	r3, r3, #9
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d109      	bne.n	80070fc <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80070e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070ea:	4814      	ldr	r0, [pc, #80]	; (800713c <HAL_RCC_GetSysClockFreq+0xfc>)
 80070ec:	f7f9 f828 	bl	8000140 <__udivsi3>
 80070f0:	0003      	movs	r3, r0
 80070f2:	001a      	movs	r2, r3
 80070f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f6:	4353      	muls	r3, r2
 80070f8:	637b      	str	r3, [r7, #52]	; 0x34
 80070fa:	e008      	b.n	800710e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80070fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070fe:	480e      	ldr	r0, [pc, #56]	; (8007138 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007100:	f7f9 f81e 	bl	8000140 <__udivsi3>
 8007104:	0003      	movs	r3, r0
 8007106:	001a      	movs	r2, r3
 8007108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710a:	4353      	muls	r3, r2
 800710c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800710e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007110:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007112:	e005      	b.n	8007120 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8007114:	4b09      	ldr	r3, [pc, #36]	; (800713c <HAL_RCC_GetSysClockFreq+0xfc>)
 8007116:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007118:	e002      	b.n	8007120 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800711a:	4b07      	ldr	r3, [pc, #28]	; (8007138 <HAL_RCC_GetSysClockFreq+0xf8>)
 800711c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800711e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8007120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8007122:	0018      	movs	r0, r3
 8007124:	46bd      	mov	sp, r7
 8007126:	b00f      	add	sp, #60	; 0x3c
 8007128:	bd90      	pop	{r4, r7, pc}
 800712a:	46c0      	nop			; (mov r8, r8)
 800712c:	08014cd8 	.word	0x08014cd8
 8007130:	08014ce8 	.word	0x08014ce8
 8007134:	40021000 	.word	0x40021000
 8007138:	007a1200 	.word	0x007a1200
 800713c:	02dc6c00 	.word	0x02dc6c00

08007140 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d101      	bne.n	8007152 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e0a8      	b.n	80072a4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007156:	2b00      	cmp	r3, #0
 8007158:	d109      	bne.n	800716e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	685a      	ldr	r2, [r3, #4]
 800715e:	2382      	movs	r3, #130	; 0x82
 8007160:	005b      	lsls	r3, r3, #1
 8007162:	429a      	cmp	r2, r3
 8007164:	d009      	beq.n	800717a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	61da      	str	r2, [r3, #28]
 800716c:	e005      	b.n	800717a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2200      	movs	r2, #0
 8007178:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	225d      	movs	r2, #93	; 0x5d
 8007184:	5c9b      	ldrb	r3, [r3, r2]
 8007186:	b2db      	uxtb	r3, r3
 8007188:	2b00      	cmp	r3, #0
 800718a:	d107      	bne.n	800719c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	225c      	movs	r2, #92	; 0x5c
 8007190:	2100      	movs	r1, #0
 8007192:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	0018      	movs	r0, r3
 8007198:	f7fc fe00 	bl	8003d9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	225d      	movs	r2, #93	; 0x5d
 80071a0:	2102      	movs	r1, #2
 80071a2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681a      	ldr	r2, [r3, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2140      	movs	r1, #64	; 0x40
 80071b0:	438a      	bics	r2, r1
 80071b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	68da      	ldr	r2, [r3, #12]
 80071b8:	23e0      	movs	r3, #224	; 0xe0
 80071ba:	00db      	lsls	r3, r3, #3
 80071bc:	429a      	cmp	r2, r3
 80071be:	d902      	bls.n	80071c6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80071c0:	2300      	movs	r3, #0
 80071c2:	60fb      	str	r3, [r7, #12]
 80071c4:	e002      	b.n	80071cc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80071c6:	2380      	movs	r3, #128	; 0x80
 80071c8:	015b      	lsls	r3, r3, #5
 80071ca:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	68da      	ldr	r2, [r3, #12]
 80071d0:	23f0      	movs	r3, #240	; 0xf0
 80071d2:	011b      	lsls	r3, r3, #4
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d008      	beq.n	80071ea <HAL_SPI_Init+0xaa>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	68da      	ldr	r2, [r3, #12]
 80071dc:	23e0      	movs	r3, #224	; 0xe0
 80071de:	00db      	lsls	r3, r3, #3
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d002      	beq.n	80071ea <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	685a      	ldr	r2, [r3, #4]
 80071ee:	2382      	movs	r3, #130	; 0x82
 80071f0:	005b      	lsls	r3, r3, #1
 80071f2:	401a      	ands	r2, r3
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6899      	ldr	r1, [r3, #8]
 80071f8:	2384      	movs	r3, #132	; 0x84
 80071fa:	021b      	lsls	r3, r3, #8
 80071fc:	400b      	ands	r3, r1
 80071fe:	431a      	orrs	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	2102      	movs	r1, #2
 8007206:	400b      	ands	r3, r1
 8007208:	431a      	orrs	r2, r3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	695b      	ldr	r3, [r3, #20]
 800720e:	2101      	movs	r1, #1
 8007210:	400b      	ands	r3, r1
 8007212:	431a      	orrs	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6999      	ldr	r1, [r3, #24]
 8007218:	2380      	movs	r3, #128	; 0x80
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	400b      	ands	r3, r1
 800721e:	431a      	orrs	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	69db      	ldr	r3, [r3, #28]
 8007224:	2138      	movs	r1, #56	; 0x38
 8007226:	400b      	ands	r3, r1
 8007228:	431a      	orrs	r2, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6a1b      	ldr	r3, [r3, #32]
 800722e:	2180      	movs	r1, #128	; 0x80
 8007230:	400b      	ands	r3, r1
 8007232:	431a      	orrs	r2, r3
 8007234:	0011      	movs	r1, r2
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800723a:	2380      	movs	r3, #128	; 0x80
 800723c:	019b      	lsls	r3, r3, #6
 800723e:	401a      	ands	r2, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	430a      	orrs	r2, r1
 8007246:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	699b      	ldr	r3, [r3, #24]
 800724c:	0c1b      	lsrs	r3, r3, #16
 800724e:	2204      	movs	r2, #4
 8007250:	401a      	ands	r2, r3
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007256:	2110      	movs	r1, #16
 8007258:	400b      	ands	r3, r1
 800725a:	431a      	orrs	r2, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007260:	2108      	movs	r1, #8
 8007262:	400b      	ands	r3, r1
 8007264:	431a      	orrs	r2, r3
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	68d9      	ldr	r1, [r3, #12]
 800726a:	23f0      	movs	r3, #240	; 0xf0
 800726c:	011b      	lsls	r3, r3, #4
 800726e:	400b      	ands	r3, r1
 8007270:	431a      	orrs	r2, r3
 8007272:	0011      	movs	r1, r2
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	2380      	movs	r3, #128	; 0x80
 8007278:	015b      	lsls	r3, r3, #5
 800727a:	401a      	ands	r2, r3
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	430a      	orrs	r2, r1
 8007282:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	69da      	ldr	r2, [r3, #28]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4907      	ldr	r1, [pc, #28]	; (80072ac <HAL_SPI_Init+0x16c>)
 8007290:	400a      	ands	r2, r1
 8007292:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2200      	movs	r2, #0
 8007298:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	225d      	movs	r2, #93	; 0x5d
 800729e:	2101      	movs	r1, #1
 80072a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	0018      	movs	r0, r3
 80072a6:	46bd      	mov	sp, r7
 80072a8:	b004      	add	sp, #16
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	fffff7ff 	.word	0xfffff7ff

080072b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b08a      	sub	sp, #40	; 0x28
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]
 80072bc:	001a      	movs	r2, r3
 80072be:	1cbb      	adds	r3, r7, #2
 80072c0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80072c2:	2301      	movs	r3, #1
 80072c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80072c6:	2323      	movs	r3, #35	; 0x23
 80072c8:	18fb      	adds	r3, r7, r3
 80072ca:	2200      	movs	r2, #0
 80072cc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	225c      	movs	r2, #92	; 0x5c
 80072d2:	5c9b      	ldrb	r3, [r3, r2]
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d101      	bne.n	80072dc <HAL_SPI_TransmitReceive+0x2c>
 80072d8:	2302      	movs	r3, #2
 80072da:	e1b5      	b.n	8007648 <HAL_SPI_TransmitReceive+0x398>
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	225c      	movs	r2, #92	; 0x5c
 80072e0:	2101      	movs	r1, #1
 80072e2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072e4:	f7fd f8a2 	bl	800442c <HAL_GetTick>
 80072e8:	0003      	movs	r3, r0
 80072ea:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80072ec:	201b      	movs	r0, #27
 80072ee:	183b      	adds	r3, r7, r0
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	215d      	movs	r1, #93	; 0x5d
 80072f4:	5c52      	ldrb	r2, [r2, r1]
 80072f6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80072fe:	2312      	movs	r3, #18
 8007300:	18fb      	adds	r3, r7, r3
 8007302:	1cba      	adds	r2, r7, #2
 8007304:	8812      	ldrh	r2, [r2, #0]
 8007306:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007308:	183b      	adds	r3, r7, r0
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	2b01      	cmp	r3, #1
 800730e:	d011      	beq.n	8007334 <HAL_SPI_TransmitReceive+0x84>
 8007310:	697a      	ldr	r2, [r7, #20]
 8007312:	2382      	movs	r3, #130	; 0x82
 8007314:	005b      	lsls	r3, r3, #1
 8007316:	429a      	cmp	r2, r3
 8007318:	d107      	bne.n	800732a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d103      	bne.n	800732a <HAL_SPI_TransmitReceive+0x7a>
 8007322:	183b      	adds	r3, r7, r0
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	2b04      	cmp	r3, #4
 8007328:	d004      	beq.n	8007334 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800732a:	2323      	movs	r3, #35	; 0x23
 800732c:	18fb      	adds	r3, r7, r3
 800732e:	2202      	movs	r2, #2
 8007330:	701a      	strb	r2, [r3, #0]
    goto error;
 8007332:	e17e      	b.n	8007632 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d006      	beq.n	8007348 <HAL_SPI_TransmitReceive+0x98>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d003      	beq.n	8007348 <HAL_SPI_TransmitReceive+0x98>
 8007340:	1cbb      	adds	r3, r7, #2
 8007342:	881b      	ldrh	r3, [r3, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d104      	bne.n	8007352 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8007348:	2323      	movs	r3, #35	; 0x23
 800734a:	18fb      	adds	r3, r7, r3
 800734c:	2201      	movs	r2, #1
 800734e:	701a      	strb	r2, [r3, #0]
    goto error;
 8007350:	e16f      	b.n	8007632 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	225d      	movs	r2, #93	; 0x5d
 8007356:	5c9b      	ldrb	r3, [r3, r2]
 8007358:	b2db      	uxtb	r3, r3
 800735a:	2b04      	cmp	r3, #4
 800735c:	d003      	beq.n	8007366 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	225d      	movs	r2, #93	; 0x5d
 8007362:	2105      	movs	r1, #5
 8007364:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	1cba      	adds	r2, r7, #2
 8007376:	2146      	movs	r1, #70	; 0x46
 8007378:	8812      	ldrh	r2, [r2, #0]
 800737a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	1cba      	adds	r2, r7, #2
 8007380:	2144      	movs	r1, #68	; 0x44
 8007382:	8812      	ldrh	r2, [r2, #0]
 8007384:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	68ba      	ldr	r2, [r7, #8]
 800738a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	1cba      	adds	r2, r7, #2
 8007390:	8812      	ldrh	r2, [r2, #0]
 8007392:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	1cba      	adds	r2, r7, #2
 8007398:	8812      	ldrh	r2, [r2, #0]
 800739a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	2200      	movs	r2, #0
 80073a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2200      	movs	r2, #0
 80073a6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	68da      	ldr	r2, [r3, #12]
 80073ac:	23e0      	movs	r3, #224	; 0xe0
 80073ae:	00db      	lsls	r3, r3, #3
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d908      	bls.n	80073c6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	685a      	ldr	r2, [r3, #4]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	49a4      	ldr	r1, [pc, #656]	; (8007650 <HAL_SPI_TransmitReceive+0x3a0>)
 80073c0:	400a      	ands	r2, r1
 80073c2:	605a      	str	r2, [r3, #4]
 80073c4:	e008      	b.n	80073d8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	685a      	ldr	r2, [r3, #4]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2180      	movs	r1, #128	; 0x80
 80073d2:	0149      	lsls	r1, r1, #5
 80073d4:	430a      	orrs	r2, r1
 80073d6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2240      	movs	r2, #64	; 0x40
 80073e0:	4013      	ands	r3, r2
 80073e2:	2b40      	cmp	r3, #64	; 0x40
 80073e4:	d007      	beq.n	80073f6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2140      	movs	r1, #64	; 0x40
 80073f2:	430a      	orrs	r2, r1
 80073f4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	68da      	ldr	r2, [r3, #12]
 80073fa:	23e0      	movs	r3, #224	; 0xe0
 80073fc:	00db      	lsls	r3, r3, #3
 80073fe:	429a      	cmp	r2, r3
 8007400:	d800      	bhi.n	8007404 <HAL_SPI_TransmitReceive+0x154>
 8007402:	e07f      	b.n	8007504 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d005      	beq.n	8007418 <HAL_SPI_TransmitReceive+0x168>
 800740c:	2312      	movs	r3, #18
 800740e:	18fb      	adds	r3, r7, r3
 8007410:	881b      	ldrh	r3, [r3, #0]
 8007412:	2b01      	cmp	r3, #1
 8007414:	d000      	beq.n	8007418 <HAL_SPI_TransmitReceive+0x168>
 8007416:	e069      	b.n	80074ec <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800741c:	881a      	ldrh	r2, [r3, #0]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007428:	1c9a      	adds	r2, r3, #2
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007432:	b29b      	uxth	r3, r3
 8007434:	3b01      	subs	r3, #1
 8007436:	b29a      	uxth	r2, r3
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800743c:	e056      	b.n	80074ec <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	2202      	movs	r2, #2
 8007446:	4013      	ands	r3, r2
 8007448:	2b02      	cmp	r3, #2
 800744a:	d11b      	bne.n	8007484 <HAL_SPI_TransmitReceive+0x1d4>
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007450:	b29b      	uxth	r3, r3
 8007452:	2b00      	cmp	r3, #0
 8007454:	d016      	beq.n	8007484 <HAL_SPI_TransmitReceive+0x1d4>
 8007456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007458:	2b01      	cmp	r3, #1
 800745a:	d113      	bne.n	8007484 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007460:	881a      	ldrh	r2, [r3, #0]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746c:	1c9a      	adds	r2, r3, #2
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007476:	b29b      	uxth	r3, r3
 8007478:	3b01      	subs	r3, #1
 800747a:	b29a      	uxth	r2, r3
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007480:	2300      	movs	r3, #0
 8007482:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	689b      	ldr	r3, [r3, #8]
 800748a:	2201      	movs	r2, #1
 800748c:	4013      	ands	r3, r2
 800748e:	2b01      	cmp	r3, #1
 8007490:	d11c      	bne.n	80074cc <HAL_SPI_TransmitReceive+0x21c>
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2246      	movs	r2, #70	; 0x46
 8007496:	5a9b      	ldrh	r3, [r3, r2]
 8007498:	b29b      	uxth	r3, r3
 800749a:	2b00      	cmp	r3, #0
 800749c:	d016      	beq.n	80074cc <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	68da      	ldr	r2, [r3, #12]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a8:	b292      	uxth	r2, r2
 80074aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b0:	1c9a      	adds	r2, r3, #2
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2246      	movs	r2, #70	; 0x46
 80074ba:	5a9b      	ldrh	r3, [r3, r2]
 80074bc:	b29b      	uxth	r3, r3
 80074be:	3b01      	subs	r3, #1
 80074c0:	b299      	uxth	r1, r3
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2246      	movs	r2, #70	; 0x46
 80074c6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80074c8:	2301      	movs	r3, #1
 80074ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80074cc:	f7fc ffae 	bl	800442c <HAL_GetTick>
 80074d0:	0002      	movs	r2, r0
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	1ad3      	subs	r3, r2, r3
 80074d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074d8:	429a      	cmp	r2, r3
 80074da:	d807      	bhi.n	80074ec <HAL_SPI_TransmitReceive+0x23c>
 80074dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074de:	3301      	adds	r3, #1
 80074e0:	d004      	beq.n	80074ec <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 80074e2:	2323      	movs	r3, #35	; 0x23
 80074e4:	18fb      	adds	r3, r7, r3
 80074e6:	2203      	movs	r2, #3
 80074e8:	701a      	strb	r2, [r3, #0]
        goto error;
 80074ea:	e0a2      	b.n	8007632 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1a3      	bne.n	800743e <HAL_SPI_TransmitReceive+0x18e>
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2246      	movs	r2, #70	; 0x46
 80074fa:	5a9b      	ldrh	r3, [r3, r2]
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d19d      	bne.n	800743e <HAL_SPI_TransmitReceive+0x18e>
 8007502:	e085      	b.n	8007610 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d005      	beq.n	8007518 <HAL_SPI_TransmitReceive+0x268>
 800750c:	2312      	movs	r3, #18
 800750e:	18fb      	adds	r3, r7, r3
 8007510:	881b      	ldrh	r3, [r3, #0]
 8007512:	2b01      	cmp	r3, #1
 8007514:	d000      	beq.n	8007518 <HAL_SPI_TransmitReceive+0x268>
 8007516:	e070      	b.n	80075fa <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	330c      	adds	r3, #12
 8007522:	7812      	ldrb	r2, [r2, #0]
 8007524:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800752a:	1c5a      	adds	r2, r3, #1
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007534:	b29b      	uxth	r3, r3
 8007536:	3b01      	subs	r3, #1
 8007538:	b29a      	uxth	r2, r3
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800753e:	e05c      	b.n	80075fa <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	2202      	movs	r2, #2
 8007548:	4013      	ands	r3, r2
 800754a:	2b02      	cmp	r3, #2
 800754c:	d11c      	bne.n	8007588 <HAL_SPI_TransmitReceive+0x2d8>
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007552:	b29b      	uxth	r3, r3
 8007554:	2b00      	cmp	r3, #0
 8007556:	d017      	beq.n	8007588 <HAL_SPI_TransmitReceive+0x2d8>
 8007558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755a:	2b01      	cmp	r3, #1
 800755c:	d114      	bne.n	8007588 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	330c      	adds	r3, #12
 8007568:	7812      	ldrb	r2, [r2, #0]
 800756a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007570:	1c5a      	adds	r2, r3, #1
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800757a:	b29b      	uxth	r3, r3
 800757c:	3b01      	subs	r3, #1
 800757e:	b29a      	uxth	r2, r3
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007584:	2300      	movs	r3, #0
 8007586:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	2201      	movs	r2, #1
 8007590:	4013      	ands	r3, r2
 8007592:	2b01      	cmp	r3, #1
 8007594:	d11e      	bne.n	80075d4 <HAL_SPI_TransmitReceive+0x324>
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2246      	movs	r2, #70	; 0x46
 800759a:	5a9b      	ldrh	r3, [r3, r2]
 800759c:	b29b      	uxth	r3, r3
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d018      	beq.n	80075d4 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	330c      	adds	r3, #12
 80075a8:	001a      	movs	r2, r3
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ae:	7812      	ldrb	r2, [r2, #0]
 80075b0:	b2d2      	uxtb	r2, r2
 80075b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b8:	1c5a      	adds	r2, r3, #1
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2246      	movs	r2, #70	; 0x46
 80075c2:	5a9b      	ldrh	r3, [r3, r2]
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	3b01      	subs	r3, #1
 80075c8:	b299      	uxth	r1, r3
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2246      	movs	r2, #70	; 0x46
 80075ce:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80075d0:	2301      	movs	r3, #1
 80075d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80075d4:	f7fc ff2a 	bl	800442c <HAL_GetTick>
 80075d8:	0002      	movs	r2, r0
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	1ad3      	subs	r3, r2, r3
 80075de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d802      	bhi.n	80075ea <HAL_SPI_TransmitReceive+0x33a>
 80075e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e6:	3301      	adds	r3, #1
 80075e8:	d102      	bne.n	80075f0 <HAL_SPI_TransmitReceive+0x340>
 80075ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d104      	bne.n	80075fa <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 80075f0:	2323      	movs	r3, #35	; 0x23
 80075f2:	18fb      	adds	r3, r7, r3
 80075f4:	2203      	movs	r2, #3
 80075f6:	701a      	strb	r2, [r3, #0]
        goto error;
 80075f8:	e01b      	b.n	8007632 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075fe:	b29b      	uxth	r3, r3
 8007600:	2b00      	cmp	r3, #0
 8007602:	d19d      	bne.n	8007540 <HAL_SPI_TransmitReceive+0x290>
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2246      	movs	r2, #70	; 0x46
 8007608:	5a9b      	ldrh	r3, [r3, r2]
 800760a:	b29b      	uxth	r3, r3
 800760c:	2b00      	cmp	r3, #0
 800760e:	d197      	bne.n	8007540 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007610:	69fa      	ldr	r2, [r7, #28]
 8007612:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	0018      	movs	r0, r3
 8007618:	f000 f94c 	bl	80078b4 <SPI_EndRxTxTransaction>
 800761c:	1e03      	subs	r3, r0, #0
 800761e:	d007      	beq.n	8007630 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8007620:	2323      	movs	r3, #35	; 0x23
 8007622:	18fb      	adds	r3, r7, r3
 8007624:	2201      	movs	r2, #1
 8007626:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2220      	movs	r2, #32
 800762c:	661a      	str	r2, [r3, #96]	; 0x60
 800762e:	e000      	b.n	8007632 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8007630:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	225d      	movs	r2, #93	; 0x5d
 8007636:	2101      	movs	r1, #1
 8007638:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	225c      	movs	r2, #92	; 0x5c
 800763e:	2100      	movs	r1, #0
 8007640:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8007642:	2323      	movs	r3, #35	; 0x23
 8007644:	18fb      	adds	r3, r7, r3
 8007646:	781b      	ldrb	r3, [r3, #0]
}
 8007648:	0018      	movs	r0, r3
 800764a:	46bd      	mov	sp, r7
 800764c:	b00a      	add	sp, #40	; 0x28
 800764e:	bd80      	pop	{r7, pc}
 8007650:	ffffefff 	.word	0xffffefff

08007654 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b088      	sub	sp, #32
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	603b      	str	r3, [r7, #0]
 8007660:	1dfb      	adds	r3, r7, #7
 8007662:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007664:	f7fc fee2 	bl	800442c <HAL_GetTick>
 8007668:	0002      	movs	r2, r0
 800766a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800766c:	1a9b      	subs	r3, r3, r2
 800766e:	683a      	ldr	r2, [r7, #0]
 8007670:	18d3      	adds	r3, r2, r3
 8007672:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007674:	f7fc feda 	bl	800442c <HAL_GetTick>
 8007678:	0003      	movs	r3, r0
 800767a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800767c:	4b3a      	ldr	r3, [pc, #232]	; (8007768 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	015b      	lsls	r3, r3, #5
 8007682:	0d1b      	lsrs	r3, r3, #20
 8007684:	69fa      	ldr	r2, [r7, #28]
 8007686:	4353      	muls	r3, r2
 8007688:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800768a:	e058      	b.n	800773e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	3301      	adds	r3, #1
 8007690:	d055      	beq.n	800773e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007692:	f7fc fecb 	bl	800442c <HAL_GetTick>
 8007696:	0002      	movs	r2, r0
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	1ad3      	subs	r3, r2, r3
 800769c:	69fa      	ldr	r2, [r7, #28]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d902      	bls.n	80076a8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80076a2:	69fb      	ldr	r3, [r7, #28]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d142      	bne.n	800772e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	685a      	ldr	r2, [r3, #4]
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	21e0      	movs	r1, #224	; 0xe0
 80076b4:	438a      	bics	r2, r1
 80076b6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	685a      	ldr	r2, [r3, #4]
 80076bc:	2382      	movs	r3, #130	; 0x82
 80076be:	005b      	lsls	r3, r3, #1
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d113      	bne.n	80076ec <SPI_WaitFlagStateUntilTimeout+0x98>
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	689a      	ldr	r2, [r3, #8]
 80076c8:	2380      	movs	r3, #128	; 0x80
 80076ca:	021b      	lsls	r3, r3, #8
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d005      	beq.n	80076dc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	689a      	ldr	r2, [r3, #8]
 80076d4:	2380      	movs	r3, #128	; 0x80
 80076d6:	00db      	lsls	r3, r3, #3
 80076d8:	429a      	cmp	r2, r3
 80076da:	d107      	bne.n	80076ec <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2140      	movs	r1, #64	; 0x40
 80076e8:	438a      	bics	r2, r1
 80076ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076f0:	2380      	movs	r3, #128	; 0x80
 80076f2:	019b      	lsls	r3, r3, #6
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d110      	bne.n	800771a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	491a      	ldr	r1, [pc, #104]	; (800776c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8007704:	400a      	ands	r2, r1
 8007706:	601a      	str	r2, [r3, #0]
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2180      	movs	r1, #128	; 0x80
 8007714:	0189      	lsls	r1, r1, #6
 8007716:	430a      	orrs	r2, r1
 8007718:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	225d      	movs	r2, #93	; 0x5d
 800771e:	2101      	movs	r1, #1
 8007720:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	225c      	movs	r2, #92	; 0x5c
 8007726:	2100      	movs	r1, #0
 8007728:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800772a:	2303      	movs	r3, #3
 800772c:	e017      	b.n	800775e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d101      	bne.n	8007738 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8007734:	2300      	movs	r3, #0
 8007736:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	3b01      	subs	r3, #1
 800773c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	68ba      	ldr	r2, [r7, #8]
 8007746:	4013      	ands	r3, r2
 8007748:	68ba      	ldr	r2, [r7, #8]
 800774a:	1ad3      	subs	r3, r2, r3
 800774c:	425a      	negs	r2, r3
 800774e:	4153      	adcs	r3, r2
 8007750:	b2db      	uxtb	r3, r3
 8007752:	001a      	movs	r2, r3
 8007754:	1dfb      	adds	r3, r7, #7
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	429a      	cmp	r2, r3
 800775a:	d197      	bne.n	800768c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800775c:	2300      	movs	r3, #0
}
 800775e:	0018      	movs	r0, r3
 8007760:	46bd      	mov	sp, r7
 8007762:	b008      	add	sp, #32
 8007764:	bd80      	pop	{r7, pc}
 8007766:	46c0      	nop			; (mov r8, r8)
 8007768:	20000000 	.word	0x20000000
 800776c:	ffffdfff 	.word	0xffffdfff

08007770 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b08a      	sub	sp, #40	; 0x28
 8007774:	af00      	add	r7, sp, #0
 8007776:	60f8      	str	r0, [r7, #12]
 8007778:	60b9      	str	r1, [r7, #8]
 800777a:	607a      	str	r2, [r7, #4]
 800777c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800777e:	2317      	movs	r3, #23
 8007780:	18fb      	adds	r3, r7, r3
 8007782:	2200      	movs	r2, #0
 8007784:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007786:	f7fc fe51 	bl	800442c <HAL_GetTick>
 800778a:	0002      	movs	r2, r0
 800778c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778e:	1a9b      	subs	r3, r3, r2
 8007790:	683a      	ldr	r2, [r7, #0]
 8007792:	18d3      	adds	r3, r2, r3
 8007794:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007796:	f7fc fe49 	bl	800442c <HAL_GetTick>
 800779a:	0003      	movs	r3, r0
 800779c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	330c      	adds	r3, #12
 80077a4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80077a6:	4b41      	ldr	r3, [pc, #260]	; (80078ac <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	0013      	movs	r3, r2
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	189b      	adds	r3, r3, r2
 80077b0:	00da      	lsls	r2, r3, #3
 80077b2:	1ad3      	subs	r3, r2, r3
 80077b4:	0d1b      	lsrs	r3, r3, #20
 80077b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077b8:	4353      	muls	r3, r2
 80077ba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80077bc:	e068      	b.n	8007890 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80077be:	68ba      	ldr	r2, [r7, #8]
 80077c0:	23c0      	movs	r3, #192	; 0xc0
 80077c2:	00db      	lsls	r3, r3, #3
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d10a      	bne.n	80077de <SPI_WaitFifoStateUntilTimeout+0x6e>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d107      	bne.n	80077de <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80077ce:	69fb      	ldr	r3, [r7, #28]
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	b2da      	uxtb	r2, r3
 80077d4:	2117      	movs	r1, #23
 80077d6:	187b      	adds	r3, r7, r1
 80077d8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80077da:	187b      	adds	r3, r7, r1
 80077dc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	3301      	adds	r3, #1
 80077e2:	d055      	beq.n	8007890 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80077e4:	f7fc fe22 	bl	800442c <HAL_GetTick>
 80077e8:	0002      	movs	r2, r0
 80077ea:	6a3b      	ldr	r3, [r7, #32]
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d902      	bls.n	80077fa <SPI_WaitFifoStateUntilTimeout+0x8a>
 80077f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d142      	bne.n	8007880 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	685a      	ldr	r2, [r3, #4]
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	21e0      	movs	r1, #224	; 0xe0
 8007806:	438a      	bics	r2, r1
 8007808:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	685a      	ldr	r2, [r3, #4]
 800780e:	2382      	movs	r3, #130	; 0x82
 8007810:	005b      	lsls	r3, r3, #1
 8007812:	429a      	cmp	r2, r3
 8007814:	d113      	bne.n	800783e <SPI_WaitFifoStateUntilTimeout+0xce>
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	689a      	ldr	r2, [r3, #8]
 800781a:	2380      	movs	r3, #128	; 0x80
 800781c:	021b      	lsls	r3, r3, #8
 800781e:	429a      	cmp	r2, r3
 8007820:	d005      	beq.n	800782e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	689a      	ldr	r2, [r3, #8]
 8007826:	2380      	movs	r3, #128	; 0x80
 8007828:	00db      	lsls	r3, r3, #3
 800782a:	429a      	cmp	r2, r3
 800782c:	d107      	bne.n	800783e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	681a      	ldr	r2, [r3, #0]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	2140      	movs	r1, #64	; 0x40
 800783a:	438a      	bics	r2, r1
 800783c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007842:	2380      	movs	r3, #128	; 0x80
 8007844:	019b      	lsls	r3, r3, #6
 8007846:	429a      	cmp	r2, r3
 8007848:	d110      	bne.n	800786c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4916      	ldr	r1, [pc, #88]	; (80078b0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8007856:	400a      	ands	r2, r1
 8007858:	601a      	str	r2, [r3, #0]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2180      	movs	r1, #128	; 0x80
 8007866:	0189      	lsls	r1, r1, #6
 8007868:	430a      	orrs	r2, r1
 800786a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	225d      	movs	r2, #93	; 0x5d
 8007870:	2101      	movs	r1, #1
 8007872:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	225c      	movs	r2, #92	; 0x5c
 8007878:	2100      	movs	r1, #0
 800787a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800787c:	2303      	movs	r3, #3
 800787e:	e010      	b.n	80078a2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007880:	69bb      	ldr	r3, [r7, #24]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d101      	bne.n	800788a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8007886:	2300      	movs	r3, #0
 8007888:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	3b01      	subs	r3, #1
 800788e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	68ba      	ldr	r2, [r7, #8]
 8007898:	4013      	ands	r3, r2
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	429a      	cmp	r2, r3
 800789e:	d18e      	bne.n	80077be <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80078a0:	2300      	movs	r3, #0
}
 80078a2:	0018      	movs	r0, r3
 80078a4:	46bd      	mov	sp, r7
 80078a6:	b00a      	add	sp, #40	; 0x28
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	46c0      	nop			; (mov r8, r8)
 80078ac:	20000000 	.word	0x20000000
 80078b0:	ffffdfff 	.word	0xffffdfff

080078b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b086      	sub	sp, #24
 80078b8:	af02      	add	r7, sp, #8
 80078ba:	60f8      	str	r0, [r7, #12]
 80078bc:	60b9      	str	r1, [r7, #8]
 80078be:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80078c0:	68ba      	ldr	r2, [r7, #8]
 80078c2:	23c0      	movs	r3, #192	; 0xc0
 80078c4:	0159      	lsls	r1, r3, #5
 80078c6:	68f8      	ldr	r0, [r7, #12]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	9300      	str	r3, [sp, #0]
 80078cc:	0013      	movs	r3, r2
 80078ce:	2200      	movs	r2, #0
 80078d0:	f7ff ff4e 	bl	8007770 <SPI_WaitFifoStateUntilTimeout>
 80078d4:	1e03      	subs	r3, r0, #0
 80078d6:	d007      	beq.n	80078e8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078dc:	2220      	movs	r2, #32
 80078de:	431a      	orrs	r2, r3
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80078e4:	2303      	movs	r3, #3
 80078e6:	e027      	b.n	8007938 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078e8:	68ba      	ldr	r2, [r7, #8]
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	9300      	str	r3, [sp, #0]
 80078f0:	0013      	movs	r3, r2
 80078f2:	2200      	movs	r2, #0
 80078f4:	2180      	movs	r1, #128	; 0x80
 80078f6:	f7ff fead 	bl	8007654 <SPI_WaitFlagStateUntilTimeout>
 80078fa:	1e03      	subs	r3, r0, #0
 80078fc:	d007      	beq.n	800790e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007902:	2220      	movs	r2, #32
 8007904:	431a      	orrs	r2, r3
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800790a:	2303      	movs	r3, #3
 800790c:	e014      	b.n	8007938 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800790e:	68ba      	ldr	r2, [r7, #8]
 8007910:	23c0      	movs	r3, #192	; 0xc0
 8007912:	00d9      	lsls	r1, r3, #3
 8007914:	68f8      	ldr	r0, [r7, #12]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	9300      	str	r3, [sp, #0]
 800791a:	0013      	movs	r3, r2
 800791c:	2200      	movs	r2, #0
 800791e:	f7ff ff27 	bl	8007770 <SPI_WaitFifoStateUntilTimeout>
 8007922:	1e03      	subs	r3, r0, #0
 8007924:	d007      	beq.n	8007936 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800792a:	2220      	movs	r2, #32
 800792c:	431a      	orrs	r2, r3
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007932:	2303      	movs	r3, #3
 8007934:	e000      	b.n	8007938 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007936:	2300      	movs	r3, #0
}
 8007938:	0018      	movs	r0, r3
 800793a:	46bd      	mov	sp, r7
 800793c:	b004      	add	sp, #16
 800793e:	bd80      	pop	{r7, pc}

08007940 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d101      	bne.n	8007952 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e042      	b.n	80079d8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	223d      	movs	r2, #61	; 0x3d
 8007956:	5c9b      	ldrb	r3, [r3, r2]
 8007958:	b2db      	uxtb	r3, r3
 800795a:	2b00      	cmp	r3, #0
 800795c:	d107      	bne.n	800796e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	223c      	movs	r2, #60	; 0x3c
 8007962:	2100      	movs	r1, #0
 8007964:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	0018      	movs	r0, r3
 800796a:	f7fc fa65 	bl	8003e38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	223d      	movs	r2, #61	; 0x3d
 8007972:	2102      	movs	r1, #2
 8007974:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	3304      	adds	r3, #4
 800797e:	0019      	movs	r1, r3
 8007980:	0010      	movs	r0, r2
 8007982:	f000 fd81 	bl	8008488 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2246      	movs	r2, #70	; 0x46
 800798a:	2101      	movs	r1, #1
 800798c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	223e      	movs	r2, #62	; 0x3e
 8007992:	2101      	movs	r1, #1
 8007994:	5499      	strb	r1, [r3, r2]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	223f      	movs	r2, #63	; 0x3f
 800799a:	2101      	movs	r1, #1
 800799c:	5499      	strb	r1, [r3, r2]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2240      	movs	r2, #64	; 0x40
 80079a2:	2101      	movs	r1, #1
 80079a4:	5499      	strb	r1, [r3, r2]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2241      	movs	r2, #65	; 0x41
 80079aa:	2101      	movs	r1, #1
 80079ac:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2242      	movs	r2, #66	; 0x42
 80079b2:	2101      	movs	r1, #1
 80079b4:	5499      	strb	r1, [r3, r2]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2243      	movs	r2, #67	; 0x43
 80079ba:	2101      	movs	r1, #1
 80079bc:	5499      	strb	r1, [r3, r2]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2244      	movs	r2, #68	; 0x44
 80079c2:	2101      	movs	r1, #1
 80079c4:	5499      	strb	r1, [r3, r2]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2245      	movs	r2, #69	; 0x45
 80079ca:	2101      	movs	r1, #1
 80079cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	223d      	movs	r2, #61	; 0x3d
 80079d2:	2101      	movs	r1, #1
 80079d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	0018      	movs	r0, r3
 80079da:	46bd      	mov	sp, r7
 80079dc:	b002      	add	sp, #8
 80079de:	bd80      	pop	{r7, pc}

080079e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b084      	sub	sp, #16
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	223d      	movs	r2, #61	; 0x3d
 80079ec:	5c9b      	ldrb	r3, [r3, r2]
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d001      	beq.n	80079f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	e033      	b.n	8007a60 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	223d      	movs	r2, #61	; 0x3d
 80079fc:	2102      	movs	r1, #2
 80079fe:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a18      	ldr	r2, [pc, #96]	; (8007a68 <HAL_TIM_Base_Start+0x88>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d00f      	beq.n	8007a2a <HAL_TIM_Base_Start+0x4a>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	2380      	movs	r3, #128	; 0x80
 8007a10:	05db      	lsls	r3, r3, #23
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d009      	beq.n	8007a2a <HAL_TIM_Base_Start+0x4a>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a14      	ldr	r2, [pc, #80]	; (8007a6c <HAL_TIM_Base_Start+0x8c>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d004      	beq.n	8007a2a <HAL_TIM_Base_Start+0x4a>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a12      	ldr	r2, [pc, #72]	; (8007a70 <HAL_TIM_Base_Start+0x90>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d111      	bne.n	8007a4e <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	2207      	movs	r2, #7
 8007a32:	4013      	ands	r3, r2
 8007a34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2b06      	cmp	r3, #6
 8007a3a:	d010      	beq.n	8007a5e <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2101      	movs	r1, #1
 8007a48:	430a      	orrs	r2, r1
 8007a4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a4c:	e007      	b.n	8007a5e <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2101      	movs	r1, #1
 8007a5a:	430a      	orrs	r2, r1
 8007a5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a5e:	2300      	movs	r3, #0
}
 8007a60:	0018      	movs	r0, r3
 8007a62:	46bd      	mov	sp, r7
 8007a64:	b004      	add	sp, #16
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	40012c00 	.word	0x40012c00
 8007a6c:	40000400 	.word	0x40000400
 8007a70:	40014000 	.word	0x40014000

08007a74 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6a1b      	ldr	r3, [r3, #32]
 8007a82:	4a0d      	ldr	r2, [pc, #52]	; (8007ab8 <HAL_TIM_Base_Stop+0x44>)
 8007a84:	4013      	ands	r3, r2
 8007a86:	d10d      	bne.n	8007aa4 <HAL_TIM_Base_Stop+0x30>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	6a1b      	ldr	r3, [r3, #32]
 8007a8e:	4a0b      	ldr	r2, [pc, #44]	; (8007abc <HAL_TIM_Base_Stop+0x48>)
 8007a90:	4013      	ands	r3, r2
 8007a92:	d107      	bne.n	8007aa4 <HAL_TIM_Base_Stop+0x30>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2101      	movs	r1, #1
 8007aa0:	438a      	bics	r2, r1
 8007aa2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	223d      	movs	r2, #61	; 0x3d
 8007aa8:	2101      	movs	r1, #1
 8007aaa:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	0018      	movs	r0, r3
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	b002      	add	sp, #8
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	46c0      	nop			; (mov r8, r8)
 8007ab8:	00001111 	.word	0x00001111
 8007abc:	00000444 	.word	0x00000444

08007ac0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	223d      	movs	r2, #61	; 0x3d
 8007acc:	5c9b      	ldrb	r3, [r3, r2]
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d001      	beq.n	8007ad8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e03b      	b.n	8007b50 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	223d      	movs	r2, #61	; 0x3d
 8007adc:	2102      	movs	r1, #2
 8007ade:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	68da      	ldr	r2, [r3, #12]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2101      	movs	r1, #1
 8007aec:	430a      	orrs	r2, r1
 8007aee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a18      	ldr	r2, [pc, #96]	; (8007b58 <HAL_TIM_Base_Start_IT+0x98>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d00f      	beq.n	8007b1a <HAL_TIM_Base_Start_IT+0x5a>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	2380      	movs	r3, #128	; 0x80
 8007b00:	05db      	lsls	r3, r3, #23
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d009      	beq.n	8007b1a <HAL_TIM_Base_Start_IT+0x5a>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a14      	ldr	r2, [pc, #80]	; (8007b5c <HAL_TIM_Base_Start_IT+0x9c>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d004      	beq.n	8007b1a <HAL_TIM_Base_Start_IT+0x5a>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a12      	ldr	r2, [pc, #72]	; (8007b60 <HAL_TIM_Base_Start_IT+0xa0>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d111      	bne.n	8007b3e <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	2207      	movs	r2, #7
 8007b22:	4013      	ands	r3, r2
 8007b24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2b06      	cmp	r3, #6
 8007b2a:	d010      	beq.n	8007b4e <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	2101      	movs	r1, #1
 8007b38:	430a      	orrs	r2, r1
 8007b3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b3c:	e007      	b.n	8007b4e <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2101      	movs	r1, #1
 8007b4a:	430a      	orrs	r2, r1
 8007b4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b4e:	2300      	movs	r3, #0
}
 8007b50:	0018      	movs	r0, r3
 8007b52:	46bd      	mov	sp, r7
 8007b54:	b004      	add	sp, #16
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	40012c00 	.word	0x40012c00
 8007b5c:	40000400 	.word	0x40000400
 8007b60:	40014000 	.word	0x40014000

08007b64 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	68da      	ldr	r2, [r3, #12]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2101      	movs	r1, #1
 8007b78:	438a      	bics	r2, r1
 8007b7a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	6a1b      	ldr	r3, [r3, #32]
 8007b82:	4a0d      	ldr	r2, [pc, #52]	; (8007bb8 <HAL_TIM_Base_Stop_IT+0x54>)
 8007b84:	4013      	ands	r3, r2
 8007b86:	d10d      	bne.n	8007ba4 <HAL_TIM_Base_Stop_IT+0x40>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	6a1b      	ldr	r3, [r3, #32]
 8007b8e:	4a0b      	ldr	r2, [pc, #44]	; (8007bbc <HAL_TIM_Base_Stop_IT+0x58>)
 8007b90:	4013      	ands	r3, r2
 8007b92:	d107      	bne.n	8007ba4 <HAL_TIM_Base_Stop_IT+0x40>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	2101      	movs	r1, #1
 8007ba0:	438a      	bics	r2, r1
 8007ba2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	223d      	movs	r2, #61	; 0x3d
 8007ba8:	2101      	movs	r1, #1
 8007baa:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007bac:	2300      	movs	r3, #0
}
 8007bae:	0018      	movs	r0, r3
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	b002      	add	sp, #8
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	46c0      	nop			; (mov r8, r8)
 8007bb8:	00001111 	.word	0x00001111
 8007bbc:	00000444 	.word	0x00000444

08007bc0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d101      	bne.n	8007bd2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e042      	b.n	8007c58 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	223d      	movs	r2, #61	; 0x3d
 8007bd6:	5c9b      	ldrb	r3, [r3, r2]
 8007bd8:	b2db      	uxtb	r3, r3
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d107      	bne.n	8007bee <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	223c      	movs	r2, #60	; 0x3c
 8007be2:	2100      	movs	r1, #0
 8007be4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	0018      	movs	r0, r3
 8007bea:	f000 f839 	bl	8007c60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	223d      	movs	r2, #61	; 0x3d
 8007bf2:	2102      	movs	r1, #2
 8007bf4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	3304      	adds	r3, #4
 8007bfe:	0019      	movs	r1, r3
 8007c00:	0010      	movs	r0, r2
 8007c02:	f000 fc41 	bl	8008488 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2246      	movs	r2, #70	; 0x46
 8007c0a:	2101      	movs	r1, #1
 8007c0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	223e      	movs	r2, #62	; 0x3e
 8007c12:	2101      	movs	r1, #1
 8007c14:	5499      	strb	r1, [r3, r2]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	223f      	movs	r2, #63	; 0x3f
 8007c1a:	2101      	movs	r1, #1
 8007c1c:	5499      	strb	r1, [r3, r2]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2240      	movs	r2, #64	; 0x40
 8007c22:	2101      	movs	r1, #1
 8007c24:	5499      	strb	r1, [r3, r2]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2241      	movs	r2, #65	; 0x41
 8007c2a:	2101      	movs	r1, #1
 8007c2c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2242      	movs	r2, #66	; 0x42
 8007c32:	2101      	movs	r1, #1
 8007c34:	5499      	strb	r1, [r3, r2]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2243      	movs	r2, #67	; 0x43
 8007c3a:	2101      	movs	r1, #1
 8007c3c:	5499      	strb	r1, [r3, r2]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2244      	movs	r2, #68	; 0x44
 8007c42:	2101      	movs	r1, #1
 8007c44:	5499      	strb	r1, [r3, r2]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2245      	movs	r2, #69	; 0x45
 8007c4a:	2101      	movs	r1, #1
 8007c4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	223d      	movs	r2, #61	; 0x3d
 8007c52:	2101      	movs	r1, #1
 8007c54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007c56:	2300      	movs	r3, #0
}
 8007c58:	0018      	movs	r0, r3
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	b002      	add	sp, #8
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007c68:	46c0      	nop			; (mov r8, r8)
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	b002      	add	sp, #8
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d108      	bne.n	8007c92 <HAL_TIM_PWM_Start+0x22>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	223e      	movs	r2, #62	; 0x3e
 8007c84:	5c9b      	ldrb	r3, [r3, r2]
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	3b01      	subs	r3, #1
 8007c8a:	1e5a      	subs	r2, r3, #1
 8007c8c:	4193      	sbcs	r3, r2
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	e01f      	b.n	8007cd2 <HAL_TIM_PWM_Start+0x62>
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	2b04      	cmp	r3, #4
 8007c96:	d108      	bne.n	8007caa <HAL_TIM_PWM_Start+0x3a>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	223f      	movs	r2, #63	; 0x3f
 8007c9c:	5c9b      	ldrb	r3, [r3, r2]
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	1e5a      	subs	r2, r3, #1
 8007ca4:	4193      	sbcs	r3, r2
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	e013      	b.n	8007cd2 <HAL_TIM_PWM_Start+0x62>
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	2b08      	cmp	r3, #8
 8007cae:	d108      	bne.n	8007cc2 <HAL_TIM_PWM_Start+0x52>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2240      	movs	r2, #64	; 0x40
 8007cb4:	5c9b      	ldrb	r3, [r3, r2]
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	1e5a      	subs	r2, r3, #1
 8007cbc:	4193      	sbcs	r3, r2
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	e007      	b.n	8007cd2 <HAL_TIM_PWM_Start+0x62>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2241      	movs	r2, #65	; 0x41
 8007cc6:	5c9b      	ldrb	r3, [r3, r2]
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	3b01      	subs	r3, #1
 8007ccc:	1e5a      	subs	r2, r3, #1
 8007cce:	4193      	sbcs	r3, r2
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d001      	beq.n	8007cda <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e074      	b.n	8007dc4 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cda:	683b      	ldr	r3, [r7, #0]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d104      	bne.n	8007cea <HAL_TIM_PWM_Start+0x7a>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	223e      	movs	r2, #62	; 0x3e
 8007ce4:	2102      	movs	r1, #2
 8007ce6:	5499      	strb	r1, [r3, r2]
 8007ce8:	e013      	b.n	8007d12 <HAL_TIM_PWM_Start+0xa2>
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	2b04      	cmp	r3, #4
 8007cee:	d104      	bne.n	8007cfa <HAL_TIM_PWM_Start+0x8a>
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	223f      	movs	r2, #63	; 0x3f
 8007cf4:	2102      	movs	r1, #2
 8007cf6:	5499      	strb	r1, [r3, r2]
 8007cf8:	e00b      	b.n	8007d12 <HAL_TIM_PWM_Start+0xa2>
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	2b08      	cmp	r3, #8
 8007cfe:	d104      	bne.n	8007d0a <HAL_TIM_PWM_Start+0x9a>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2240      	movs	r2, #64	; 0x40
 8007d04:	2102      	movs	r1, #2
 8007d06:	5499      	strb	r1, [r3, r2]
 8007d08:	e003      	b.n	8007d12 <HAL_TIM_PWM_Start+0xa2>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2241      	movs	r2, #65	; 0x41
 8007d0e:	2102      	movs	r1, #2
 8007d10:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	6839      	ldr	r1, [r7, #0]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	0018      	movs	r0, r3
 8007d1c:	f000 feca 	bl	8008ab4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a29      	ldr	r2, [pc, #164]	; (8007dcc <HAL_TIM_PWM_Start+0x15c>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d00e      	beq.n	8007d48 <HAL_TIM_PWM_Start+0xd8>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a28      	ldr	r2, [pc, #160]	; (8007dd0 <HAL_TIM_PWM_Start+0x160>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d009      	beq.n	8007d48 <HAL_TIM_PWM_Start+0xd8>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a26      	ldr	r2, [pc, #152]	; (8007dd4 <HAL_TIM_PWM_Start+0x164>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d004      	beq.n	8007d48 <HAL_TIM_PWM_Start+0xd8>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a25      	ldr	r2, [pc, #148]	; (8007dd8 <HAL_TIM_PWM_Start+0x168>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d101      	bne.n	8007d4c <HAL_TIM_PWM_Start+0xdc>
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e000      	b.n	8007d4e <HAL_TIM_PWM_Start+0xde>
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d008      	beq.n	8007d64 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2180      	movs	r1, #128	; 0x80
 8007d5e:	0209      	lsls	r1, r1, #8
 8007d60:	430a      	orrs	r2, r1
 8007d62:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a18      	ldr	r2, [pc, #96]	; (8007dcc <HAL_TIM_PWM_Start+0x15c>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d00f      	beq.n	8007d8e <HAL_TIM_PWM_Start+0x11e>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681a      	ldr	r2, [r3, #0]
 8007d72:	2380      	movs	r3, #128	; 0x80
 8007d74:	05db      	lsls	r3, r3, #23
 8007d76:	429a      	cmp	r2, r3
 8007d78:	d009      	beq.n	8007d8e <HAL_TIM_PWM_Start+0x11e>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a17      	ldr	r2, [pc, #92]	; (8007ddc <HAL_TIM_PWM_Start+0x16c>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d004      	beq.n	8007d8e <HAL_TIM_PWM_Start+0x11e>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a11      	ldr	r2, [pc, #68]	; (8007dd0 <HAL_TIM_PWM_Start+0x160>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d111      	bne.n	8007db2 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	2207      	movs	r2, #7
 8007d96:	4013      	ands	r3, r2
 8007d98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2b06      	cmp	r3, #6
 8007d9e:	d010      	beq.n	8007dc2 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	2101      	movs	r1, #1
 8007dac:	430a      	orrs	r2, r1
 8007dae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007db0:	e007      	b.n	8007dc2 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2101      	movs	r1, #1
 8007dbe:	430a      	orrs	r2, r1
 8007dc0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007dc2:	2300      	movs	r3, #0
}
 8007dc4:	0018      	movs	r0, r3
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	b004      	add	sp, #16
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	40012c00 	.word	0x40012c00
 8007dd0:	40014000 	.word	0x40014000
 8007dd4:	40014400 	.word	0x40014400
 8007dd8:	40014800 	.word	0x40014800
 8007ddc:	40000400 	.word	0x40000400

08007de0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	6839      	ldr	r1, [r7, #0]
 8007df0:	2200      	movs	r2, #0
 8007df2:	0018      	movs	r0, r3
 8007df4:	f000 fe5e 	bl	8008ab4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a2f      	ldr	r2, [pc, #188]	; (8007ebc <HAL_TIM_PWM_Stop+0xdc>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d00e      	beq.n	8007e20 <HAL_TIM_PWM_Stop+0x40>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a2e      	ldr	r2, [pc, #184]	; (8007ec0 <HAL_TIM_PWM_Stop+0xe0>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d009      	beq.n	8007e20 <HAL_TIM_PWM_Stop+0x40>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a2c      	ldr	r2, [pc, #176]	; (8007ec4 <HAL_TIM_PWM_Stop+0xe4>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d004      	beq.n	8007e20 <HAL_TIM_PWM_Stop+0x40>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a2b      	ldr	r2, [pc, #172]	; (8007ec8 <HAL_TIM_PWM_Stop+0xe8>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d101      	bne.n	8007e24 <HAL_TIM_PWM_Stop+0x44>
 8007e20:	2301      	movs	r3, #1
 8007e22:	e000      	b.n	8007e26 <HAL_TIM_PWM_Stop+0x46>
 8007e24:	2300      	movs	r3, #0
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d013      	beq.n	8007e52 <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	6a1b      	ldr	r3, [r3, #32]
 8007e30:	4a26      	ldr	r2, [pc, #152]	; (8007ecc <HAL_TIM_PWM_Stop+0xec>)
 8007e32:	4013      	ands	r3, r2
 8007e34:	d10d      	bne.n	8007e52 <HAL_TIM_PWM_Stop+0x72>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	6a1b      	ldr	r3, [r3, #32]
 8007e3c:	4a24      	ldr	r2, [pc, #144]	; (8007ed0 <HAL_TIM_PWM_Stop+0xf0>)
 8007e3e:	4013      	ands	r3, r2
 8007e40:	d107      	bne.n	8007e52 <HAL_TIM_PWM_Stop+0x72>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4921      	ldr	r1, [pc, #132]	; (8007ed4 <HAL_TIM_PWM_Stop+0xf4>)
 8007e4e:	400a      	ands	r2, r1
 8007e50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	6a1b      	ldr	r3, [r3, #32]
 8007e58:	4a1c      	ldr	r2, [pc, #112]	; (8007ecc <HAL_TIM_PWM_Stop+0xec>)
 8007e5a:	4013      	ands	r3, r2
 8007e5c:	d10d      	bne.n	8007e7a <HAL_TIM_PWM_Stop+0x9a>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	6a1b      	ldr	r3, [r3, #32]
 8007e64:	4a1a      	ldr	r2, [pc, #104]	; (8007ed0 <HAL_TIM_PWM_Stop+0xf0>)
 8007e66:	4013      	ands	r3, r2
 8007e68:	d107      	bne.n	8007e7a <HAL_TIM_PWM_Stop+0x9a>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681a      	ldr	r2, [r3, #0]
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2101      	movs	r1, #1
 8007e76:	438a      	bics	r2, r1
 8007e78:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d104      	bne.n	8007e8a <HAL_TIM_PWM_Stop+0xaa>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	223e      	movs	r2, #62	; 0x3e
 8007e84:	2101      	movs	r1, #1
 8007e86:	5499      	strb	r1, [r3, r2]
 8007e88:	e013      	b.n	8007eb2 <HAL_TIM_PWM_Stop+0xd2>
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	2b04      	cmp	r3, #4
 8007e8e:	d104      	bne.n	8007e9a <HAL_TIM_PWM_Stop+0xba>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	223f      	movs	r2, #63	; 0x3f
 8007e94:	2101      	movs	r1, #1
 8007e96:	5499      	strb	r1, [r3, r2]
 8007e98:	e00b      	b.n	8007eb2 <HAL_TIM_PWM_Stop+0xd2>
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	2b08      	cmp	r3, #8
 8007e9e:	d104      	bne.n	8007eaa <HAL_TIM_PWM_Stop+0xca>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2240      	movs	r2, #64	; 0x40
 8007ea4:	2101      	movs	r1, #1
 8007ea6:	5499      	strb	r1, [r3, r2]
 8007ea8:	e003      	b.n	8007eb2 <HAL_TIM_PWM_Stop+0xd2>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2241      	movs	r2, #65	; 0x41
 8007eae:	2101      	movs	r1, #1
 8007eb0:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007eb2:	2300      	movs	r3, #0
}
 8007eb4:	0018      	movs	r0, r3
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	b002      	add	sp, #8
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	40012c00 	.word	0x40012c00
 8007ec0:	40014000 	.word	0x40014000
 8007ec4:	40014400 	.word	0x40014400
 8007ec8:	40014800 	.word	0x40014800
 8007ecc:	00001111 	.word	0x00001111
 8007ed0:	00000444 	.word	0x00000444
 8007ed4:	ffff7fff 	.word	0xffff7fff

08007ed8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	691b      	ldr	r3, [r3, #16]
 8007ee6:	2202      	movs	r2, #2
 8007ee8:	4013      	ands	r3, r2
 8007eea:	2b02      	cmp	r3, #2
 8007eec:	d124      	bne.n	8007f38 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	2202      	movs	r2, #2
 8007ef6:	4013      	ands	r3, r2
 8007ef8:	2b02      	cmp	r3, #2
 8007efa:	d11d      	bne.n	8007f38 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	2203      	movs	r2, #3
 8007f02:	4252      	negs	r2, r2
 8007f04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	699b      	ldr	r3, [r3, #24]
 8007f12:	2203      	movs	r2, #3
 8007f14:	4013      	ands	r3, r2
 8007f16:	d004      	beq.n	8007f22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	0018      	movs	r0, r3
 8007f1c:	f000 fa9c 	bl	8008458 <HAL_TIM_IC_CaptureCallback>
 8007f20:	e007      	b.n	8007f32 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	0018      	movs	r0, r3
 8007f26:	f000 fa8f 	bl	8008448 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	0018      	movs	r0, r3
 8007f2e:	f000 fa9b 	bl	8008468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	2204      	movs	r2, #4
 8007f40:	4013      	ands	r3, r2
 8007f42:	2b04      	cmp	r3, #4
 8007f44:	d125      	bne.n	8007f92 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	68db      	ldr	r3, [r3, #12]
 8007f4c:	2204      	movs	r2, #4
 8007f4e:	4013      	ands	r3, r2
 8007f50:	2b04      	cmp	r3, #4
 8007f52:	d11e      	bne.n	8007f92 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	2205      	movs	r2, #5
 8007f5a:	4252      	negs	r2, r2
 8007f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2202      	movs	r2, #2
 8007f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	699a      	ldr	r2, [r3, #24]
 8007f6a:	23c0      	movs	r3, #192	; 0xc0
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	4013      	ands	r3, r2
 8007f70:	d004      	beq.n	8007f7c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	0018      	movs	r0, r3
 8007f76:	f000 fa6f 	bl	8008458 <HAL_TIM_IC_CaptureCallback>
 8007f7a:	e007      	b.n	8007f8c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	0018      	movs	r0, r3
 8007f80:	f000 fa62 	bl	8008448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	0018      	movs	r0, r3
 8007f88:	f000 fa6e 	bl	8008468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	691b      	ldr	r3, [r3, #16]
 8007f98:	2208      	movs	r2, #8
 8007f9a:	4013      	ands	r3, r2
 8007f9c:	2b08      	cmp	r3, #8
 8007f9e:	d124      	bne.n	8007fea <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	2208      	movs	r2, #8
 8007fa8:	4013      	ands	r3, r2
 8007faa:	2b08      	cmp	r3, #8
 8007fac:	d11d      	bne.n	8007fea <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	2209      	movs	r2, #9
 8007fb4:	4252      	negs	r2, r2
 8007fb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2204      	movs	r2, #4
 8007fbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	69db      	ldr	r3, [r3, #28]
 8007fc4:	2203      	movs	r2, #3
 8007fc6:	4013      	ands	r3, r2
 8007fc8:	d004      	beq.n	8007fd4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	0018      	movs	r0, r3
 8007fce:	f000 fa43 	bl	8008458 <HAL_TIM_IC_CaptureCallback>
 8007fd2:	e007      	b.n	8007fe4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	0018      	movs	r0, r3
 8007fd8:	f000 fa36 	bl	8008448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	0018      	movs	r0, r3
 8007fe0:	f000 fa42 	bl	8008468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	691b      	ldr	r3, [r3, #16]
 8007ff0:	2210      	movs	r2, #16
 8007ff2:	4013      	ands	r3, r2
 8007ff4:	2b10      	cmp	r3, #16
 8007ff6:	d125      	bne.n	8008044 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	2210      	movs	r2, #16
 8008000:	4013      	ands	r3, r2
 8008002:	2b10      	cmp	r3, #16
 8008004:	d11e      	bne.n	8008044 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2211      	movs	r2, #17
 800800c:	4252      	negs	r2, r2
 800800e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2208      	movs	r2, #8
 8008014:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	69da      	ldr	r2, [r3, #28]
 800801c:	23c0      	movs	r3, #192	; 0xc0
 800801e:	009b      	lsls	r3, r3, #2
 8008020:	4013      	ands	r3, r2
 8008022:	d004      	beq.n	800802e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	0018      	movs	r0, r3
 8008028:	f000 fa16 	bl	8008458 <HAL_TIM_IC_CaptureCallback>
 800802c:	e007      	b.n	800803e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	0018      	movs	r0, r3
 8008032:	f000 fa09 	bl	8008448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	0018      	movs	r0, r3
 800803a:	f000 fa15 	bl	8008468 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	691b      	ldr	r3, [r3, #16]
 800804a:	2201      	movs	r2, #1
 800804c:	4013      	ands	r3, r2
 800804e:	2b01      	cmp	r3, #1
 8008050:	d10f      	bne.n	8008072 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	2201      	movs	r2, #1
 800805a:	4013      	ands	r3, r2
 800805c:	2b01      	cmp	r3, #1
 800805e:	d108      	bne.n	8008072 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	2202      	movs	r2, #2
 8008066:	4252      	negs	r2, r2
 8008068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	0018      	movs	r0, r3
 800806e:	f000 f9e3 	bl	8008438 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	691b      	ldr	r3, [r3, #16]
 8008078:	2280      	movs	r2, #128	; 0x80
 800807a:	4013      	ands	r3, r2
 800807c:	2b80      	cmp	r3, #128	; 0x80
 800807e:	d10f      	bne.n	80080a0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	68db      	ldr	r3, [r3, #12]
 8008086:	2280      	movs	r2, #128	; 0x80
 8008088:	4013      	ands	r3, r2
 800808a:	2b80      	cmp	r3, #128	; 0x80
 800808c:	d108      	bne.n	80080a0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2281      	movs	r2, #129	; 0x81
 8008094:	4252      	negs	r2, r2
 8008096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	0018      	movs	r0, r3
 800809c:	f000 fd94 	bl	8008bc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	691b      	ldr	r3, [r3, #16]
 80080a6:	2240      	movs	r2, #64	; 0x40
 80080a8:	4013      	ands	r3, r2
 80080aa:	2b40      	cmp	r3, #64	; 0x40
 80080ac:	d10f      	bne.n	80080ce <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	2240      	movs	r2, #64	; 0x40
 80080b6:	4013      	ands	r3, r2
 80080b8:	2b40      	cmp	r3, #64	; 0x40
 80080ba:	d108      	bne.n	80080ce <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	2241      	movs	r2, #65	; 0x41
 80080c2:	4252      	negs	r2, r2
 80080c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	0018      	movs	r0, r3
 80080ca:	f000 f9d5 	bl	8008478 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	691b      	ldr	r3, [r3, #16]
 80080d4:	2220      	movs	r2, #32
 80080d6:	4013      	ands	r3, r2
 80080d8:	2b20      	cmp	r3, #32
 80080da:	d10f      	bne.n	80080fc <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	2220      	movs	r2, #32
 80080e4:	4013      	ands	r3, r2
 80080e6:	2b20      	cmp	r3, #32
 80080e8:	d108      	bne.n	80080fc <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2221      	movs	r2, #33	; 0x21
 80080f0:	4252      	negs	r2, r2
 80080f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	0018      	movs	r0, r3
 80080f8:	f000 fd5e 	bl	8008bb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80080fc:	46c0      	nop			; (mov r8, r8)
 80080fe:	46bd      	mov	sp, r7
 8008100:	b002      	add	sp, #8
 8008102:	bd80      	pop	{r7, pc}

08008104 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b086      	sub	sp, #24
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008110:	2317      	movs	r3, #23
 8008112:	18fb      	adds	r3, r7, r3
 8008114:	2200      	movs	r2, #0
 8008116:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	223c      	movs	r2, #60	; 0x3c
 800811c:	5c9b      	ldrb	r3, [r3, r2]
 800811e:	2b01      	cmp	r3, #1
 8008120:	d101      	bne.n	8008126 <HAL_TIM_PWM_ConfigChannel+0x22>
 8008122:	2302      	movs	r3, #2
 8008124:	e0ad      	b.n	8008282 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	223c      	movs	r2, #60	; 0x3c
 800812a:	2101      	movs	r1, #1
 800812c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2b0c      	cmp	r3, #12
 8008132:	d100      	bne.n	8008136 <HAL_TIM_PWM_ConfigChannel+0x32>
 8008134:	e076      	b.n	8008224 <HAL_TIM_PWM_ConfigChannel+0x120>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2b0c      	cmp	r3, #12
 800813a:	d900      	bls.n	800813e <HAL_TIM_PWM_ConfigChannel+0x3a>
 800813c:	e095      	b.n	800826a <HAL_TIM_PWM_ConfigChannel+0x166>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2b08      	cmp	r3, #8
 8008142:	d04e      	beq.n	80081e2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2b08      	cmp	r3, #8
 8008148:	d900      	bls.n	800814c <HAL_TIM_PWM_ConfigChannel+0x48>
 800814a:	e08e      	b.n	800826a <HAL_TIM_PWM_ConfigChannel+0x166>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d003      	beq.n	800815a <HAL_TIM_PWM_ConfigChannel+0x56>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2b04      	cmp	r3, #4
 8008156:	d021      	beq.n	800819c <HAL_TIM_PWM_ConfigChannel+0x98>
 8008158:	e087      	b.n	800826a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	68ba      	ldr	r2, [r7, #8]
 8008160:	0011      	movs	r1, r2
 8008162:	0018      	movs	r0, r3
 8008164:	f000 fa10 	bl	8008588 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	699a      	ldr	r2, [r3, #24]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	2108      	movs	r1, #8
 8008174:	430a      	orrs	r2, r1
 8008176:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	699a      	ldr	r2, [r3, #24]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2104      	movs	r1, #4
 8008184:	438a      	bics	r2, r1
 8008186:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	6999      	ldr	r1, [r3, #24]
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	691a      	ldr	r2, [r3, #16]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	430a      	orrs	r2, r1
 8008198:	619a      	str	r2, [r3, #24]
      break;
 800819a:	e06b      	b.n	8008274 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	68ba      	ldr	r2, [r7, #8]
 80081a2:	0011      	movs	r1, r2
 80081a4:	0018      	movs	r0, r3
 80081a6:	f000 fa77 	bl	8008698 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	699a      	ldr	r2, [r3, #24]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	2180      	movs	r1, #128	; 0x80
 80081b6:	0109      	lsls	r1, r1, #4
 80081b8:	430a      	orrs	r2, r1
 80081ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	699a      	ldr	r2, [r3, #24]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4931      	ldr	r1, [pc, #196]	; (800828c <HAL_TIM_PWM_ConfigChannel+0x188>)
 80081c8:	400a      	ands	r2, r1
 80081ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	6999      	ldr	r1, [r3, #24]
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	691b      	ldr	r3, [r3, #16]
 80081d6:	021a      	lsls	r2, r3, #8
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	430a      	orrs	r2, r1
 80081de:	619a      	str	r2, [r3, #24]
      break;
 80081e0:	e048      	b.n	8008274 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	68ba      	ldr	r2, [r7, #8]
 80081e8:	0011      	movs	r1, r2
 80081ea:	0018      	movs	r0, r3
 80081ec:	f000 fad8 	bl	80087a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	69da      	ldr	r2, [r3, #28]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	2108      	movs	r1, #8
 80081fc:	430a      	orrs	r2, r1
 80081fe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	69da      	ldr	r2, [r3, #28]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2104      	movs	r1, #4
 800820c:	438a      	bics	r2, r1
 800820e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	69d9      	ldr	r1, [r3, #28]
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	691a      	ldr	r2, [r3, #16]
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	430a      	orrs	r2, r1
 8008220:	61da      	str	r2, [r3, #28]
      break;
 8008222:	e027      	b.n	8008274 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	68ba      	ldr	r2, [r7, #8]
 800822a:	0011      	movs	r1, r2
 800822c:	0018      	movs	r0, r3
 800822e:	f000 fb3d 	bl	80088ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	69da      	ldr	r2, [r3, #28]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	2180      	movs	r1, #128	; 0x80
 800823e:	0109      	lsls	r1, r1, #4
 8008240:	430a      	orrs	r2, r1
 8008242:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	69da      	ldr	r2, [r3, #28]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	490f      	ldr	r1, [pc, #60]	; (800828c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8008250:	400a      	ands	r2, r1
 8008252:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	69d9      	ldr	r1, [r3, #28]
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	691b      	ldr	r3, [r3, #16]
 800825e:	021a      	lsls	r2, r3, #8
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	430a      	orrs	r2, r1
 8008266:	61da      	str	r2, [r3, #28]
      break;
 8008268:	e004      	b.n	8008274 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800826a:	2317      	movs	r3, #23
 800826c:	18fb      	adds	r3, r7, r3
 800826e:	2201      	movs	r2, #1
 8008270:	701a      	strb	r2, [r3, #0]
      break;
 8008272:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	223c      	movs	r2, #60	; 0x3c
 8008278:	2100      	movs	r1, #0
 800827a:	5499      	strb	r1, [r3, r2]

  return status;
 800827c:	2317      	movs	r3, #23
 800827e:	18fb      	adds	r3, r7, r3
 8008280:	781b      	ldrb	r3, [r3, #0]
}
 8008282:	0018      	movs	r0, r3
 8008284:	46bd      	mov	sp, r7
 8008286:	b006      	add	sp, #24
 8008288:	bd80      	pop	{r7, pc}
 800828a:	46c0      	nop			; (mov r8, r8)
 800828c:	fffffbff 	.word	0xfffffbff

08008290 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800829a:	230f      	movs	r3, #15
 800829c:	18fb      	adds	r3, r7, r3
 800829e:	2200      	movs	r2, #0
 80082a0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	223c      	movs	r2, #60	; 0x3c
 80082a6:	5c9b      	ldrb	r3, [r3, r2]
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d101      	bne.n	80082b0 <HAL_TIM_ConfigClockSource+0x20>
 80082ac:	2302      	movs	r3, #2
 80082ae:	e0bc      	b.n	800842a <HAL_TIM_ConfigClockSource+0x19a>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	223c      	movs	r2, #60	; 0x3c
 80082b4:	2101      	movs	r1, #1
 80082b6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	223d      	movs	r2, #61	; 0x3d
 80082bc:	2102      	movs	r1, #2
 80082be:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	2277      	movs	r2, #119	; 0x77
 80082cc:	4393      	bics	r3, r2
 80082ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	4a58      	ldr	r2, [pc, #352]	; (8008434 <HAL_TIM_ConfigClockSource+0x1a4>)
 80082d4:	4013      	ands	r3, r2
 80082d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	68ba      	ldr	r2, [r7, #8]
 80082de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	2280      	movs	r2, #128	; 0x80
 80082e6:	0192      	lsls	r2, r2, #6
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d040      	beq.n	800836e <HAL_TIM_ConfigClockSource+0xde>
 80082ec:	2280      	movs	r2, #128	; 0x80
 80082ee:	0192      	lsls	r2, r2, #6
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d900      	bls.n	80082f6 <HAL_TIM_ConfigClockSource+0x66>
 80082f4:	e088      	b.n	8008408 <HAL_TIM_ConfigClockSource+0x178>
 80082f6:	2280      	movs	r2, #128	; 0x80
 80082f8:	0152      	lsls	r2, r2, #5
 80082fa:	4293      	cmp	r3, r2
 80082fc:	d100      	bne.n	8008300 <HAL_TIM_ConfigClockSource+0x70>
 80082fe:	e088      	b.n	8008412 <HAL_TIM_ConfigClockSource+0x182>
 8008300:	2280      	movs	r2, #128	; 0x80
 8008302:	0152      	lsls	r2, r2, #5
 8008304:	4293      	cmp	r3, r2
 8008306:	d900      	bls.n	800830a <HAL_TIM_ConfigClockSource+0x7a>
 8008308:	e07e      	b.n	8008408 <HAL_TIM_ConfigClockSource+0x178>
 800830a:	2b70      	cmp	r3, #112	; 0x70
 800830c:	d018      	beq.n	8008340 <HAL_TIM_ConfigClockSource+0xb0>
 800830e:	d900      	bls.n	8008312 <HAL_TIM_ConfigClockSource+0x82>
 8008310:	e07a      	b.n	8008408 <HAL_TIM_ConfigClockSource+0x178>
 8008312:	2b60      	cmp	r3, #96	; 0x60
 8008314:	d04f      	beq.n	80083b6 <HAL_TIM_ConfigClockSource+0x126>
 8008316:	d900      	bls.n	800831a <HAL_TIM_ConfigClockSource+0x8a>
 8008318:	e076      	b.n	8008408 <HAL_TIM_ConfigClockSource+0x178>
 800831a:	2b50      	cmp	r3, #80	; 0x50
 800831c:	d03b      	beq.n	8008396 <HAL_TIM_ConfigClockSource+0x106>
 800831e:	d900      	bls.n	8008322 <HAL_TIM_ConfigClockSource+0x92>
 8008320:	e072      	b.n	8008408 <HAL_TIM_ConfigClockSource+0x178>
 8008322:	2b40      	cmp	r3, #64	; 0x40
 8008324:	d057      	beq.n	80083d6 <HAL_TIM_ConfigClockSource+0x146>
 8008326:	d900      	bls.n	800832a <HAL_TIM_ConfigClockSource+0x9a>
 8008328:	e06e      	b.n	8008408 <HAL_TIM_ConfigClockSource+0x178>
 800832a:	2b30      	cmp	r3, #48	; 0x30
 800832c:	d063      	beq.n	80083f6 <HAL_TIM_ConfigClockSource+0x166>
 800832e:	d86b      	bhi.n	8008408 <HAL_TIM_ConfigClockSource+0x178>
 8008330:	2b20      	cmp	r3, #32
 8008332:	d060      	beq.n	80083f6 <HAL_TIM_ConfigClockSource+0x166>
 8008334:	d868      	bhi.n	8008408 <HAL_TIM_ConfigClockSource+0x178>
 8008336:	2b00      	cmp	r3, #0
 8008338:	d05d      	beq.n	80083f6 <HAL_TIM_ConfigClockSource+0x166>
 800833a:	2b10      	cmp	r3, #16
 800833c:	d05b      	beq.n	80083f6 <HAL_TIM_ConfigClockSource+0x166>
 800833e:	e063      	b.n	8008408 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6818      	ldr	r0, [r3, #0]
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	6899      	ldr	r1, [r3, #8]
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	685a      	ldr	r2, [r3, #4]
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	f000 fb90 	bl	8008a74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	2277      	movs	r2, #119	; 0x77
 8008360:	4313      	orrs	r3, r2
 8008362:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	68ba      	ldr	r2, [r7, #8]
 800836a:	609a      	str	r2, [r3, #8]
      break;
 800836c:	e052      	b.n	8008414 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6818      	ldr	r0, [r3, #0]
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	6899      	ldr	r1, [r3, #8]
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	685a      	ldr	r2, [r3, #4]
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	f000 fb79 	bl	8008a74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	689a      	ldr	r2, [r3, #8]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	2180      	movs	r1, #128	; 0x80
 800838e:	01c9      	lsls	r1, r1, #7
 8008390:	430a      	orrs	r2, r1
 8008392:	609a      	str	r2, [r3, #8]
      break;
 8008394:	e03e      	b.n	8008414 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6818      	ldr	r0, [r3, #0]
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	6859      	ldr	r1, [r3, #4]
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	68db      	ldr	r3, [r3, #12]
 80083a2:	001a      	movs	r2, r3
 80083a4:	f000 faec 	bl	8008980 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	2150      	movs	r1, #80	; 0x50
 80083ae:	0018      	movs	r0, r3
 80083b0:	f000 fb46 	bl	8008a40 <TIM_ITRx_SetConfig>
      break;
 80083b4:	e02e      	b.n	8008414 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6818      	ldr	r0, [r3, #0]
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	6859      	ldr	r1, [r3, #4]
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	001a      	movs	r2, r3
 80083c4:	f000 fb0a 	bl	80089dc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2160      	movs	r1, #96	; 0x60
 80083ce:	0018      	movs	r0, r3
 80083d0:	f000 fb36 	bl	8008a40 <TIM_ITRx_SetConfig>
      break;
 80083d4:	e01e      	b.n	8008414 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6818      	ldr	r0, [r3, #0]
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	6859      	ldr	r1, [r3, #4]
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	001a      	movs	r2, r3
 80083e4:	f000 facc 	bl	8008980 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2140      	movs	r1, #64	; 0x40
 80083ee:	0018      	movs	r0, r3
 80083f0:	f000 fb26 	bl	8008a40 <TIM_ITRx_SetConfig>
      break;
 80083f4:	e00e      	b.n	8008414 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	0019      	movs	r1, r3
 8008400:	0010      	movs	r0, r2
 8008402:	f000 fb1d 	bl	8008a40 <TIM_ITRx_SetConfig>
      break;
 8008406:	e005      	b.n	8008414 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8008408:	230f      	movs	r3, #15
 800840a:	18fb      	adds	r3, r7, r3
 800840c:	2201      	movs	r2, #1
 800840e:	701a      	strb	r2, [r3, #0]
      break;
 8008410:	e000      	b.n	8008414 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8008412:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	223d      	movs	r2, #61	; 0x3d
 8008418:	2101      	movs	r1, #1
 800841a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	223c      	movs	r2, #60	; 0x3c
 8008420:	2100      	movs	r1, #0
 8008422:	5499      	strb	r1, [r3, r2]

  return status;
 8008424:	230f      	movs	r3, #15
 8008426:	18fb      	adds	r3, r7, r3
 8008428:	781b      	ldrb	r3, [r3, #0]
}
 800842a:	0018      	movs	r0, r3
 800842c:	46bd      	mov	sp, r7
 800842e:	b004      	add	sp, #16
 8008430:	bd80      	pop	{r7, pc}
 8008432:	46c0      	nop			; (mov r8, r8)
 8008434:	ffff00ff 	.word	0xffff00ff

08008438 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008440:	46c0      	nop			; (mov r8, r8)
 8008442:	46bd      	mov	sp, r7
 8008444:	b002      	add	sp, #8
 8008446:	bd80      	pop	{r7, pc}

08008448 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b082      	sub	sp, #8
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008450:	46c0      	nop			; (mov r8, r8)
 8008452:	46bd      	mov	sp, r7
 8008454:	b002      	add	sp, #8
 8008456:	bd80      	pop	{r7, pc}

08008458 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008460:	46c0      	nop			; (mov r8, r8)
 8008462:	46bd      	mov	sp, r7
 8008464:	b002      	add	sp, #8
 8008466:	bd80      	pop	{r7, pc}

08008468 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008470:	46c0      	nop			; (mov r8, r8)
 8008472:	46bd      	mov	sp, r7
 8008474:	b002      	add	sp, #8
 8008476:	bd80      	pop	{r7, pc}

08008478 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008480:	46c0      	nop			; (mov r8, r8)
 8008482:	46bd      	mov	sp, r7
 8008484:	b002      	add	sp, #8
 8008486:	bd80      	pop	{r7, pc}

08008488 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
 8008490:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4a34      	ldr	r2, [pc, #208]	; (800856c <TIM_Base_SetConfig+0xe4>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d008      	beq.n	80084b2 <TIM_Base_SetConfig+0x2a>
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	2380      	movs	r3, #128	; 0x80
 80084a4:	05db      	lsls	r3, r3, #23
 80084a6:	429a      	cmp	r2, r3
 80084a8:	d003      	beq.n	80084b2 <TIM_Base_SetConfig+0x2a>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	4a30      	ldr	r2, [pc, #192]	; (8008570 <TIM_Base_SetConfig+0xe8>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d108      	bne.n	80084c4 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2270      	movs	r2, #112	; 0x70
 80084b6:	4393      	bics	r3, r2
 80084b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	68fa      	ldr	r2, [r7, #12]
 80084c0:	4313      	orrs	r3, r2
 80084c2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	4a29      	ldr	r2, [pc, #164]	; (800856c <TIM_Base_SetConfig+0xe4>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d018      	beq.n	80084fe <TIM_Base_SetConfig+0x76>
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	2380      	movs	r3, #128	; 0x80
 80084d0:	05db      	lsls	r3, r3, #23
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d013      	beq.n	80084fe <TIM_Base_SetConfig+0x76>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	4a25      	ldr	r2, [pc, #148]	; (8008570 <TIM_Base_SetConfig+0xe8>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d00f      	beq.n	80084fe <TIM_Base_SetConfig+0x76>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4a24      	ldr	r2, [pc, #144]	; (8008574 <TIM_Base_SetConfig+0xec>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d00b      	beq.n	80084fe <TIM_Base_SetConfig+0x76>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4a23      	ldr	r2, [pc, #140]	; (8008578 <TIM_Base_SetConfig+0xf0>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d007      	beq.n	80084fe <TIM_Base_SetConfig+0x76>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4a22      	ldr	r2, [pc, #136]	; (800857c <TIM_Base_SetConfig+0xf4>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d003      	beq.n	80084fe <TIM_Base_SetConfig+0x76>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4a21      	ldr	r2, [pc, #132]	; (8008580 <TIM_Base_SetConfig+0xf8>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d108      	bne.n	8008510 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	4a20      	ldr	r2, [pc, #128]	; (8008584 <TIM_Base_SetConfig+0xfc>)
 8008502:	4013      	ands	r3, r2
 8008504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	68db      	ldr	r3, [r3, #12]
 800850a:	68fa      	ldr	r2, [r7, #12]
 800850c:	4313      	orrs	r3, r2
 800850e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2280      	movs	r2, #128	; 0x80
 8008514:	4393      	bics	r3, r2
 8008516:	001a      	movs	r2, r3
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	695b      	ldr	r3, [r3, #20]
 800851c:	4313      	orrs	r3, r2
 800851e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	689a      	ldr	r2, [r3, #8]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	4a0c      	ldr	r2, [pc, #48]	; (800856c <TIM_Base_SetConfig+0xe4>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d00b      	beq.n	8008556 <TIM_Base_SetConfig+0xce>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	4a0d      	ldr	r2, [pc, #52]	; (8008578 <TIM_Base_SetConfig+0xf0>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d007      	beq.n	8008556 <TIM_Base_SetConfig+0xce>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4a0c      	ldr	r2, [pc, #48]	; (800857c <TIM_Base_SetConfig+0xf4>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d003      	beq.n	8008556 <TIM_Base_SetConfig+0xce>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	4a0b      	ldr	r2, [pc, #44]	; (8008580 <TIM_Base_SetConfig+0xf8>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d103      	bne.n	800855e <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	691a      	ldr	r2, [r3, #16]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2201      	movs	r2, #1
 8008562:	615a      	str	r2, [r3, #20]
}
 8008564:	46c0      	nop			; (mov r8, r8)
 8008566:	46bd      	mov	sp, r7
 8008568:	b004      	add	sp, #16
 800856a:	bd80      	pop	{r7, pc}
 800856c:	40012c00 	.word	0x40012c00
 8008570:	40000400 	.word	0x40000400
 8008574:	40002000 	.word	0x40002000
 8008578:	40014000 	.word	0x40014000
 800857c:	40014400 	.word	0x40014400
 8008580:	40014800 	.word	0x40014800
 8008584:	fffffcff 	.word	0xfffffcff

08008588 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b086      	sub	sp, #24
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6a1b      	ldr	r3, [r3, #32]
 8008596:	2201      	movs	r2, #1
 8008598:	4393      	bics	r3, r2
 800859a:	001a      	movs	r2, r3
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6a1b      	ldr	r3, [r3, #32]
 80085a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	699b      	ldr	r3, [r3, #24]
 80085b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2270      	movs	r2, #112	; 0x70
 80085b6:	4393      	bics	r3, r2
 80085b8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2203      	movs	r2, #3
 80085be:	4393      	bics	r3, r2
 80085c0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	68fa      	ldr	r2, [r7, #12]
 80085c8:	4313      	orrs	r3, r2
 80085ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	2202      	movs	r2, #2
 80085d0:	4393      	bics	r3, r2
 80085d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	689b      	ldr	r3, [r3, #8]
 80085d8:	697a      	ldr	r2, [r7, #20]
 80085da:	4313      	orrs	r3, r2
 80085dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	4a27      	ldr	r2, [pc, #156]	; (8008680 <TIM_OC1_SetConfig+0xf8>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d00b      	beq.n	80085fe <TIM_OC1_SetConfig+0x76>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	4a26      	ldr	r2, [pc, #152]	; (8008684 <TIM_OC1_SetConfig+0xfc>)
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d007      	beq.n	80085fe <TIM_OC1_SetConfig+0x76>
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	4a25      	ldr	r2, [pc, #148]	; (8008688 <TIM_OC1_SetConfig+0x100>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d003      	beq.n	80085fe <TIM_OC1_SetConfig+0x76>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	4a24      	ldr	r2, [pc, #144]	; (800868c <TIM_OC1_SetConfig+0x104>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d10c      	bne.n	8008618 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	2208      	movs	r2, #8
 8008602:	4393      	bics	r3, r2
 8008604:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	68db      	ldr	r3, [r3, #12]
 800860a:	697a      	ldr	r2, [r7, #20]
 800860c:	4313      	orrs	r3, r2
 800860e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	2204      	movs	r2, #4
 8008614:	4393      	bics	r3, r2
 8008616:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	4a19      	ldr	r2, [pc, #100]	; (8008680 <TIM_OC1_SetConfig+0xf8>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d00b      	beq.n	8008638 <TIM_OC1_SetConfig+0xb0>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a18      	ldr	r2, [pc, #96]	; (8008684 <TIM_OC1_SetConfig+0xfc>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d007      	beq.n	8008638 <TIM_OC1_SetConfig+0xb0>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a17      	ldr	r2, [pc, #92]	; (8008688 <TIM_OC1_SetConfig+0x100>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d003      	beq.n	8008638 <TIM_OC1_SetConfig+0xb0>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a16      	ldr	r2, [pc, #88]	; (800868c <TIM_OC1_SetConfig+0x104>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d111      	bne.n	800865c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	4a15      	ldr	r2, [pc, #84]	; (8008690 <TIM_OC1_SetConfig+0x108>)
 800863c:	4013      	ands	r3, r2
 800863e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	4a14      	ldr	r2, [pc, #80]	; (8008694 <TIM_OC1_SetConfig+0x10c>)
 8008644:	4013      	ands	r3, r2
 8008646:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	695b      	ldr	r3, [r3, #20]
 800864c:	693a      	ldr	r2, [r7, #16]
 800864e:	4313      	orrs	r3, r2
 8008650:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	699b      	ldr	r3, [r3, #24]
 8008656:	693a      	ldr	r2, [r7, #16]
 8008658:	4313      	orrs	r3, r2
 800865a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	693a      	ldr	r2, [r7, #16]
 8008660:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	68fa      	ldr	r2, [r7, #12]
 8008666:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	685a      	ldr	r2, [r3, #4]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	697a      	ldr	r2, [r7, #20]
 8008674:	621a      	str	r2, [r3, #32]
}
 8008676:	46c0      	nop			; (mov r8, r8)
 8008678:	46bd      	mov	sp, r7
 800867a:	b006      	add	sp, #24
 800867c:	bd80      	pop	{r7, pc}
 800867e:	46c0      	nop			; (mov r8, r8)
 8008680:	40012c00 	.word	0x40012c00
 8008684:	40014000 	.word	0x40014000
 8008688:	40014400 	.word	0x40014400
 800868c:	40014800 	.word	0x40014800
 8008690:	fffffeff 	.word	0xfffffeff
 8008694:	fffffdff 	.word	0xfffffdff

08008698 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b086      	sub	sp, #24
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
 80086a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6a1b      	ldr	r3, [r3, #32]
 80086a6:	2210      	movs	r2, #16
 80086a8:	4393      	bics	r3, r2
 80086aa:	001a      	movs	r2, r3
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6a1b      	ldr	r3, [r3, #32]
 80086b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	699b      	ldr	r3, [r3, #24]
 80086c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	4a2e      	ldr	r2, [pc, #184]	; (8008780 <TIM_OC2_SetConfig+0xe8>)
 80086c6:	4013      	ands	r3, r2
 80086c8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	4a2d      	ldr	r2, [pc, #180]	; (8008784 <TIM_OC2_SetConfig+0xec>)
 80086ce:	4013      	ands	r3, r2
 80086d0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	021b      	lsls	r3, r3, #8
 80086d8:	68fa      	ldr	r2, [r7, #12]
 80086da:	4313      	orrs	r3, r2
 80086dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	2220      	movs	r2, #32
 80086e2:	4393      	bics	r3, r2
 80086e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	011b      	lsls	r3, r3, #4
 80086ec:	697a      	ldr	r2, [r7, #20]
 80086ee:	4313      	orrs	r3, r2
 80086f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	4a24      	ldr	r2, [pc, #144]	; (8008788 <TIM_OC2_SetConfig+0xf0>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d10d      	bne.n	8008716 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	2280      	movs	r2, #128	; 0x80
 80086fe:	4393      	bics	r3, r2
 8008700:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	011b      	lsls	r3, r3, #4
 8008708:	697a      	ldr	r2, [r7, #20]
 800870a:	4313      	orrs	r3, r2
 800870c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	2240      	movs	r2, #64	; 0x40
 8008712:	4393      	bics	r3, r2
 8008714:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4a1b      	ldr	r2, [pc, #108]	; (8008788 <TIM_OC2_SetConfig+0xf0>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d00b      	beq.n	8008736 <TIM_OC2_SetConfig+0x9e>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	4a1a      	ldr	r2, [pc, #104]	; (800878c <TIM_OC2_SetConfig+0xf4>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d007      	beq.n	8008736 <TIM_OC2_SetConfig+0x9e>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	4a19      	ldr	r2, [pc, #100]	; (8008790 <TIM_OC2_SetConfig+0xf8>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d003      	beq.n	8008736 <TIM_OC2_SetConfig+0x9e>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4a18      	ldr	r2, [pc, #96]	; (8008794 <TIM_OC2_SetConfig+0xfc>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d113      	bne.n	800875e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	4a17      	ldr	r2, [pc, #92]	; (8008798 <TIM_OC2_SetConfig+0x100>)
 800873a:	4013      	ands	r3, r2
 800873c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	4a16      	ldr	r2, [pc, #88]	; (800879c <TIM_OC2_SetConfig+0x104>)
 8008742:	4013      	ands	r3, r2
 8008744:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	695b      	ldr	r3, [r3, #20]
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	693a      	ldr	r2, [r7, #16]
 800874e:	4313      	orrs	r3, r2
 8008750:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	699b      	ldr	r3, [r3, #24]
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	693a      	ldr	r2, [r7, #16]
 800875a:	4313      	orrs	r3, r2
 800875c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	693a      	ldr	r2, [r7, #16]
 8008762:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	68fa      	ldr	r2, [r7, #12]
 8008768:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	685a      	ldr	r2, [r3, #4]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	697a      	ldr	r2, [r7, #20]
 8008776:	621a      	str	r2, [r3, #32]
}
 8008778:	46c0      	nop			; (mov r8, r8)
 800877a:	46bd      	mov	sp, r7
 800877c:	b006      	add	sp, #24
 800877e:	bd80      	pop	{r7, pc}
 8008780:	ffff8fff 	.word	0xffff8fff
 8008784:	fffffcff 	.word	0xfffffcff
 8008788:	40012c00 	.word	0x40012c00
 800878c:	40014000 	.word	0x40014000
 8008790:	40014400 	.word	0x40014400
 8008794:	40014800 	.word	0x40014800
 8008798:	fffffbff 	.word	0xfffffbff
 800879c:	fffff7ff 	.word	0xfffff7ff

080087a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b086      	sub	sp, #24
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	6a1b      	ldr	r3, [r3, #32]
 80087ae:	4a35      	ldr	r2, [pc, #212]	; (8008884 <TIM_OC3_SetConfig+0xe4>)
 80087b0:	401a      	ands	r2, r3
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6a1b      	ldr	r3, [r3, #32]
 80087ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	69db      	ldr	r3, [r3, #28]
 80087c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2270      	movs	r2, #112	; 0x70
 80087cc:	4393      	bics	r3, r2
 80087ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2203      	movs	r2, #3
 80087d4:	4393      	bics	r3, r2
 80087d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	68fa      	ldr	r2, [r7, #12]
 80087de:	4313      	orrs	r3, r2
 80087e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	4a28      	ldr	r2, [pc, #160]	; (8008888 <TIM_OC3_SetConfig+0xe8>)
 80087e6:	4013      	ands	r3, r2
 80087e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	689b      	ldr	r3, [r3, #8]
 80087ee:	021b      	lsls	r3, r3, #8
 80087f0:	697a      	ldr	r2, [r7, #20]
 80087f2:	4313      	orrs	r3, r2
 80087f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	4a24      	ldr	r2, [pc, #144]	; (800888c <TIM_OC3_SetConfig+0xec>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d10d      	bne.n	800881a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	4a23      	ldr	r2, [pc, #140]	; (8008890 <TIM_OC3_SetConfig+0xf0>)
 8008802:	4013      	ands	r3, r2
 8008804:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	68db      	ldr	r3, [r3, #12]
 800880a:	021b      	lsls	r3, r3, #8
 800880c:	697a      	ldr	r2, [r7, #20]
 800880e:	4313      	orrs	r3, r2
 8008810:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	4a1f      	ldr	r2, [pc, #124]	; (8008894 <TIM_OC3_SetConfig+0xf4>)
 8008816:	4013      	ands	r3, r2
 8008818:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a1b      	ldr	r2, [pc, #108]	; (800888c <TIM_OC3_SetConfig+0xec>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d00b      	beq.n	800883a <TIM_OC3_SetConfig+0x9a>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	4a1c      	ldr	r2, [pc, #112]	; (8008898 <TIM_OC3_SetConfig+0xf8>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d007      	beq.n	800883a <TIM_OC3_SetConfig+0x9a>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4a1b      	ldr	r2, [pc, #108]	; (800889c <TIM_OC3_SetConfig+0xfc>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d003      	beq.n	800883a <TIM_OC3_SetConfig+0x9a>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4a1a      	ldr	r2, [pc, #104]	; (80088a0 <TIM_OC3_SetConfig+0x100>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d113      	bne.n	8008862 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	4a19      	ldr	r2, [pc, #100]	; (80088a4 <TIM_OC3_SetConfig+0x104>)
 800883e:	4013      	ands	r3, r2
 8008840:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	4a18      	ldr	r2, [pc, #96]	; (80088a8 <TIM_OC3_SetConfig+0x108>)
 8008846:	4013      	ands	r3, r2
 8008848:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	695b      	ldr	r3, [r3, #20]
 800884e:	011b      	lsls	r3, r3, #4
 8008850:	693a      	ldr	r2, [r7, #16]
 8008852:	4313      	orrs	r3, r2
 8008854:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	699b      	ldr	r3, [r3, #24]
 800885a:	011b      	lsls	r3, r3, #4
 800885c:	693a      	ldr	r2, [r7, #16]
 800885e:	4313      	orrs	r3, r2
 8008860:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	693a      	ldr	r2, [r7, #16]
 8008866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	68fa      	ldr	r2, [r7, #12]
 800886c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	685a      	ldr	r2, [r3, #4]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	697a      	ldr	r2, [r7, #20]
 800887a:	621a      	str	r2, [r3, #32]
}
 800887c:	46c0      	nop			; (mov r8, r8)
 800887e:	46bd      	mov	sp, r7
 8008880:	b006      	add	sp, #24
 8008882:	bd80      	pop	{r7, pc}
 8008884:	fffffeff 	.word	0xfffffeff
 8008888:	fffffdff 	.word	0xfffffdff
 800888c:	40012c00 	.word	0x40012c00
 8008890:	fffff7ff 	.word	0xfffff7ff
 8008894:	fffffbff 	.word	0xfffffbff
 8008898:	40014000 	.word	0x40014000
 800889c:	40014400 	.word	0x40014400
 80088a0:	40014800 	.word	0x40014800
 80088a4:	ffffefff 	.word	0xffffefff
 80088a8:	ffffdfff 	.word	0xffffdfff

080088ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b086      	sub	sp, #24
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6a1b      	ldr	r3, [r3, #32]
 80088ba:	4a28      	ldr	r2, [pc, #160]	; (800895c <TIM_OC4_SetConfig+0xb0>)
 80088bc:	401a      	ands	r2, r3
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6a1b      	ldr	r3, [r3, #32]
 80088c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	69db      	ldr	r3, [r3, #28]
 80088d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	4a22      	ldr	r2, [pc, #136]	; (8008960 <TIM_OC4_SetConfig+0xb4>)
 80088d8:	4013      	ands	r3, r2
 80088da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	4a21      	ldr	r2, [pc, #132]	; (8008964 <TIM_OC4_SetConfig+0xb8>)
 80088e0:	4013      	ands	r3, r2
 80088e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	021b      	lsls	r3, r3, #8
 80088ea:	68fa      	ldr	r2, [r7, #12]
 80088ec:	4313      	orrs	r3, r2
 80088ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	4a1d      	ldr	r2, [pc, #116]	; (8008968 <TIM_OC4_SetConfig+0xbc>)
 80088f4:	4013      	ands	r3, r2
 80088f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	031b      	lsls	r3, r3, #12
 80088fe:	693a      	ldr	r2, [r7, #16]
 8008900:	4313      	orrs	r3, r2
 8008902:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	4a19      	ldr	r2, [pc, #100]	; (800896c <TIM_OC4_SetConfig+0xc0>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d00b      	beq.n	8008924 <TIM_OC4_SetConfig+0x78>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	4a18      	ldr	r2, [pc, #96]	; (8008970 <TIM_OC4_SetConfig+0xc4>)
 8008910:	4293      	cmp	r3, r2
 8008912:	d007      	beq.n	8008924 <TIM_OC4_SetConfig+0x78>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	4a17      	ldr	r2, [pc, #92]	; (8008974 <TIM_OC4_SetConfig+0xc8>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d003      	beq.n	8008924 <TIM_OC4_SetConfig+0x78>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	4a16      	ldr	r2, [pc, #88]	; (8008978 <TIM_OC4_SetConfig+0xcc>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d109      	bne.n	8008938 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	4a15      	ldr	r2, [pc, #84]	; (800897c <TIM_OC4_SetConfig+0xd0>)
 8008928:	4013      	ands	r3, r2
 800892a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	695b      	ldr	r3, [r3, #20]
 8008930:	019b      	lsls	r3, r3, #6
 8008932:	697a      	ldr	r2, [r7, #20]
 8008934:	4313      	orrs	r3, r2
 8008936:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	697a      	ldr	r2, [r7, #20]
 800893c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	68fa      	ldr	r2, [r7, #12]
 8008942:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	685a      	ldr	r2, [r3, #4]
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	693a      	ldr	r2, [r7, #16]
 8008950:	621a      	str	r2, [r3, #32]
}
 8008952:	46c0      	nop			; (mov r8, r8)
 8008954:	46bd      	mov	sp, r7
 8008956:	b006      	add	sp, #24
 8008958:	bd80      	pop	{r7, pc}
 800895a:	46c0      	nop			; (mov r8, r8)
 800895c:	ffffefff 	.word	0xffffefff
 8008960:	ffff8fff 	.word	0xffff8fff
 8008964:	fffffcff 	.word	0xfffffcff
 8008968:	ffffdfff 	.word	0xffffdfff
 800896c:	40012c00 	.word	0x40012c00
 8008970:	40014000 	.word	0x40014000
 8008974:	40014400 	.word	0x40014400
 8008978:	40014800 	.word	0x40014800
 800897c:	ffffbfff 	.word	0xffffbfff

08008980 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b086      	sub	sp, #24
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	6a1b      	ldr	r3, [r3, #32]
 8008990:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	6a1b      	ldr	r3, [r3, #32]
 8008996:	2201      	movs	r2, #1
 8008998:	4393      	bics	r3, r2
 800899a:	001a      	movs	r2, r3
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	699b      	ldr	r3, [r3, #24]
 80089a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	22f0      	movs	r2, #240	; 0xf0
 80089aa:	4393      	bics	r3, r2
 80089ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	011b      	lsls	r3, r3, #4
 80089b2:	693a      	ldr	r2, [r7, #16]
 80089b4:	4313      	orrs	r3, r2
 80089b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	220a      	movs	r2, #10
 80089bc:	4393      	bics	r3, r2
 80089be:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80089c0:	697a      	ldr	r2, [r7, #20]
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	4313      	orrs	r3, r2
 80089c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	693a      	ldr	r2, [r7, #16]
 80089cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	697a      	ldr	r2, [r7, #20]
 80089d2:	621a      	str	r2, [r3, #32]
}
 80089d4:	46c0      	nop			; (mov r8, r8)
 80089d6:	46bd      	mov	sp, r7
 80089d8:	b006      	add	sp, #24
 80089da:	bd80      	pop	{r7, pc}

080089dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b086      	sub	sp, #24
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	60f8      	str	r0, [r7, #12]
 80089e4:	60b9      	str	r1, [r7, #8]
 80089e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	6a1b      	ldr	r3, [r3, #32]
 80089ec:	2210      	movs	r2, #16
 80089ee:	4393      	bics	r3, r2
 80089f0:	001a      	movs	r2, r3
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	699b      	ldr	r3, [r3, #24]
 80089fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	6a1b      	ldr	r3, [r3, #32]
 8008a00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	4a0d      	ldr	r2, [pc, #52]	; (8008a3c <TIM_TI2_ConfigInputStage+0x60>)
 8008a06:	4013      	ands	r3, r2
 8008a08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	031b      	lsls	r3, r3, #12
 8008a0e:	697a      	ldr	r2, [r7, #20]
 8008a10:	4313      	orrs	r3, r2
 8008a12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	22a0      	movs	r2, #160	; 0xa0
 8008a18:	4393      	bics	r3, r2
 8008a1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	011b      	lsls	r3, r3, #4
 8008a20:	693a      	ldr	r2, [r7, #16]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	697a      	ldr	r2, [r7, #20]
 8008a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	693a      	ldr	r2, [r7, #16]
 8008a30:	621a      	str	r2, [r3, #32]
}
 8008a32:	46c0      	nop			; (mov r8, r8)
 8008a34:	46bd      	mov	sp, r7
 8008a36:	b006      	add	sp, #24
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	46c0      	nop			; (mov r8, r8)
 8008a3c:	ffff0fff 	.word	0xffff0fff

08008a40 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	689b      	ldr	r3, [r3, #8]
 8008a4e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2270      	movs	r2, #112	; 0x70
 8008a54:	4393      	bics	r3, r2
 8008a56:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a58:	683a      	ldr	r2, [r7, #0]
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	2207      	movs	r2, #7
 8008a60:	4313      	orrs	r3, r2
 8008a62:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	68fa      	ldr	r2, [r7, #12]
 8008a68:	609a      	str	r2, [r3, #8]
}
 8008a6a:	46c0      	nop			; (mov r8, r8)
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	b004      	add	sp, #16
 8008a70:	bd80      	pop	{r7, pc}
	...

08008a74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b086      	sub	sp, #24
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	60f8      	str	r0, [r7, #12]
 8008a7c:	60b9      	str	r1, [r7, #8]
 8008a7e:	607a      	str	r2, [r7, #4]
 8008a80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	4a09      	ldr	r2, [pc, #36]	; (8008ab0 <TIM_ETR_SetConfig+0x3c>)
 8008a8c:	4013      	ands	r3, r2
 8008a8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	021a      	lsls	r2, r3, #8
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	431a      	orrs	r2, r3
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	697a      	ldr	r2, [r7, #20]
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	697a      	ldr	r2, [r7, #20]
 8008aa6:	609a      	str	r2, [r3, #8]
}
 8008aa8:	46c0      	nop			; (mov r8, r8)
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	b006      	add	sp, #24
 8008aae:	bd80      	pop	{r7, pc}
 8008ab0:	ffff00ff 	.word	0xffff00ff

08008ab4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b086      	sub	sp, #24
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	60b9      	str	r1, [r7, #8]
 8008abe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	221f      	movs	r2, #31
 8008ac4:	4013      	ands	r3, r2
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	409a      	lsls	r2, r3
 8008aca:	0013      	movs	r3, r2
 8008acc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	6a1b      	ldr	r3, [r3, #32]
 8008ad2:	697a      	ldr	r2, [r7, #20]
 8008ad4:	43d2      	mvns	r2, r2
 8008ad6:	401a      	ands	r2, r3
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	6a1a      	ldr	r2, [r3, #32]
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	211f      	movs	r1, #31
 8008ae4:	400b      	ands	r3, r1
 8008ae6:	6879      	ldr	r1, [r7, #4]
 8008ae8:	4099      	lsls	r1, r3
 8008aea:	000b      	movs	r3, r1
 8008aec:	431a      	orrs	r2, r3
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	621a      	str	r2, [r3, #32]
}
 8008af2:	46c0      	nop			; (mov r8, r8)
 8008af4:	46bd      	mov	sp, r7
 8008af6:	b006      	add	sp, #24
 8008af8:	bd80      	pop	{r7, pc}
	...

08008afc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	223c      	movs	r2, #60	; 0x3c
 8008b0a:	5c9b      	ldrb	r3, [r3, r2]
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d101      	bne.n	8008b14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b10:	2302      	movs	r3, #2
 8008b12:	e047      	b.n	8008ba4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	223c      	movs	r2, #60	; 0x3c
 8008b18:	2101      	movs	r1, #1
 8008b1a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	223d      	movs	r2, #61	; 0x3d
 8008b20:	2102      	movs	r1, #2
 8008b22:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2270      	movs	r2, #112	; 0x70
 8008b38:	4393      	bics	r3, r2
 8008b3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	68fa      	ldr	r2, [r7, #12]
 8008b42:	4313      	orrs	r3, r2
 8008b44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	68fa      	ldr	r2, [r7, #12]
 8008b4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	4a16      	ldr	r2, [pc, #88]	; (8008bac <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d00f      	beq.n	8008b78 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	2380      	movs	r3, #128	; 0x80
 8008b5e:	05db      	lsls	r3, r3, #23
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d009      	beq.n	8008b78 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a11      	ldr	r2, [pc, #68]	; (8008bb0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d004      	beq.n	8008b78 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a10      	ldr	r2, [pc, #64]	; (8008bb4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d10c      	bne.n	8008b92 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	2280      	movs	r2, #128	; 0x80
 8008b7c:	4393      	bics	r3, r2
 8008b7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	68ba      	ldr	r2, [r7, #8]
 8008b86:	4313      	orrs	r3, r2
 8008b88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	68ba      	ldr	r2, [r7, #8]
 8008b90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	223d      	movs	r2, #61	; 0x3d
 8008b96:	2101      	movs	r1, #1
 8008b98:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	223c      	movs	r2, #60	; 0x3c
 8008b9e:	2100      	movs	r1, #0
 8008ba0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008ba2:	2300      	movs	r3, #0
}
 8008ba4:	0018      	movs	r0, r3
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	b004      	add	sp, #16
 8008baa:	bd80      	pop	{r7, pc}
 8008bac:	40012c00 	.word	0x40012c00
 8008bb0:	40000400 	.word	0x40000400
 8008bb4:	40014000 	.word	0x40014000

08008bb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b082      	sub	sp, #8
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008bc0:	46c0      	nop			; (mov r8, r8)
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	b002      	add	sp, #8
 8008bc6:	bd80      	pop	{r7, pc}

08008bc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b082      	sub	sp, #8
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008bd0:	46c0      	nop			; (mov r8, r8)
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	b002      	add	sp, #8
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <SP100_Delay>:
 8008bd8:	b590      	push	{r4, r7, lr}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	2400      	movs	r4, #0
 8008be2:	e000      	b.n	8008be6 <SP100_Delay+0xe>
 8008be4:	3401      	adds	r4, #1
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	429c      	cmp	r4, r3
 8008bea:	dbfb      	blt.n	8008be4 <SP100_Delay+0xc>
 8008bec:	46c0      	nop			; (mov r8, r8)
 8008bee:	46c0      	nop			; (mov r8, r8)
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	b003      	add	sp, #12
 8008bf4:	bd90      	pop	{r4, r7, pc}

08008bf6 <SP100_CCU_Init>:
 8008bf6:	b580      	push	{r7, lr}
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	f007 fbdf 	bl	80103bc <SP100_A2D_Init>
 8008bfe:	f000 fbb1 	bl	8009364 <SP100_BL_Init>
 8008c02:	f007 fb35 	bl	8010270 <SP100_TLE_Init>
 8008c06:	f003 fe87 	bl	800c918 <SP100_LCD_Init>
 8008c0a:	46c0      	nop			; (mov r8, r8)
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	bd80      	pop	{r7, pc}

08008c10 <SP100_CCU_DeInit>:
 8008c10:	b580      	push	{r7, lr}
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	f007 fbec 	bl	80103f0 <SP100_A2D_DeInit>
 8008c18:	f000 fbbc 	bl	8009394 <SP100_BL_DeInit>
 8008c1c:	f007 fb3c 	bl	8010298 <SP100_TLE_DeInit>
 8008c20:	f003 fea4 	bl	800c96c <SP100_LCD_DeInit>
 8008c24:	46c0      	nop			; (mov r8, r8)
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
	...

08008c2c <SP100_Variables_Init>:
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	4b1d      	ldr	r3, [pc, #116]	; (8008ca8 <SP100_Variables_Init+0x7c>)
 8008c32:	2201      	movs	r2, #1
 8008c34:	701a      	strb	r2, [r3, #0]
 8008c36:	4b1d      	ldr	r3, [pc, #116]	; (8008cac <SP100_Variables_Init+0x80>)
 8008c38:	2201      	movs	r2, #1
 8008c3a:	701a      	strb	r2, [r3, #0]
 8008c3c:	4b1c      	ldr	r3, [pc, #112]	; (8008cb0 <SP100_Variables_Init+0x84>)
 8008c3e:	2201      	movs	r2, #1
 8008c40:	701a      	strb	r2, [r3, #0]
 8008c42:	4b1c      	ldr	r3, [pc, #112]	; (8008cb4 <SP100_Variables_Init+0x88>)
 8008c44:	2201      	movs	r2, #1
 8008c46:	701a      	strb	r2, [r3, #0]
 8008c48:	4b1b      	ldr	r3, [pc, #108]	; (8008cb8 <SP100_Variables_Init+0x8c>)
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	701a      	strb	r2, [r3, #0]
 8008c4e:	4b1b      	ldr	r3, [pc, #108]	; (8008cbc <SP100_Variables_Init+0x90>)
 8008c50:	2200      	movs	r2, #0
 8008c52:	701a      	strb	r2, [r3, #0]
 8008c54:	4b1a      	ldr	r3, [pc, #104]	; (8008cc0 <SP100_Variables_Init+0x94>)
 8008c56:	2200      	movs	r2, #0
 8008c58:	701a      	strb	r2, [r3, #0]
 8008c5a:	4b1a      	ldr	r3, [pc, #104]	; (8008cc4 <SP100_Variables_Init+0x98>)
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	701a      	strb	r2, [r3, #0]
 8008c60:	4b19      	ldr	r3, [pc, #100]	; (8008cc8 <SP100_Variables_Init+0x9c>)
 8008c62:	2200      	movs	r2, #0
 8008c64:	701a      	strb	r2, [r3, #0]
 8008c66:	4b19      	ldr	r3, [pc, #100]	; (8008ccc <SP100_Variables_Init+0xa0>)
 8008c68:	2200      	movs	r2, #0
 8008c6a:	701a      	strb	r2, [r3, #0]
 8008c6c:	4b18      	ldr	r3, [pc, #96]	; (8008cd0 <SP100_Variables_Init+0xa4>)
 8008c6e:	2200      	movs	r2, #0
 8008c70:	601a      	str	r2, [r3, #0]
 8008c72:	4b18      	ldr	r3, [pc, #96]	; (8008cd4 <SP100_Variables_Init+0xa8>)
 8008c74:	2200      	movs	r2, #0
 8008c76:	601a      	str	r2, [r3, #0]
 8008c78:	4b17      	ldr	r3, [pc, #92]	; (8008cd8 <SP100_Variables_Init+0xac>)
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	601a      	str	r2, [r3, #0]
 8008c7e:	4b17      	ldr	r3, [pc, #92]	; (8008cdc <SP100_Variables_Init+0xb0>)
 8008c80:	2200      	movs	r2, #0
 8008c82:	601a      	str	r2, [r3, #0]
 8008c84:	4b16      	ldr	r3, [pc, #88]	; (8008ce0 <SP100_Variables_Init+0xb4>)
 8008c86:	2200      	movs	r2, #0
 8008c88:	601a      	str	r2, [r3, #0]
 8008c8a:	4b16      	ldr	r3, [pc, #88]	; (8008ce4 <SP100_Variables_Init+0xb8>)
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	601a      	str	r2, [r3, #0]
 8008c90:	4b15      	ldr	r3, [pc, #84]	; (8008ce8 <SP100_Variables_Init+0xbc>)
 8008c92:	2200      	movs	r2, #0
 8008c94:	601a      	str	r2, [r3, #0]
 8008c96:	4b15      	ldr	r3, [pc, #84]	; (8008cec <SP100_Variables_Init+0xc0>)
 8008c98:	2200      	movs	r2, #0
 8008c9a:	601a      	str	r2, [r3, #0]
 8008c9c:	4b14      	ldr	r3, [pc, #80]	; (8008cf0 <SP100_Variables_Init+0xc4>)
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	601a      	str	r2, [r3, #0]
 8008ca2:	46c0      	nop			; (mov r8, r8)
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}
 8008ca8:	2000000e 	.word	0x2000000e
 8008cac:	2000000f 	.word	0x2000000f
 8008cb0:	20000010 	.word	0x20000010
 8008cb4:	20000011 	.word	0x20000011
 8008cb8:	2000057c 	.word	0x2000057c
 8008cbc:	2000057d 	.word	0x2000057d
 8008cc0:	2000057e 	.word	0x2000057e
 8008cc4:	2000057f 	.word	0x2000057f
 8008cc8:	20000580 	.word	0x20000580
 8008ccc:	20000581 	.word	0x20000581
 8008cd0:	20000588 	.word	0x20000588
 8008cd4:	2000058c 	.word	0x2000058c
 8008cd8:	20000590 	.word	0x20000590
 8008cdc:	20000594 	.word	0x20000594
 8008ce0:	20000598 	.word	0x20000598
 8008ce4:	2000059c 	.word	0x2000059c
 8008ce8:	200005a0 	.word	0x200005a0
 8008cec:	200005a4 	.word	0x200005a4
 8008cf0:	200005a8 	.word	0x200005a8

08008cf4 <SP100_CCU_State_Updater>:
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b082      	sub	sp, #8
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	0002      	movs	r2, r0
 8008cfc:	1dfb      	adds	r3, r7, #7
 8008cfe:	701a      	strb	r2, [r3, #0]
 8008d00:	4b13      	ldr	r3, [pc, #76]	; (8008d50 <SP100_CCU_State_Updater+0x5c>)
 8008d02:	781a      	ldrb	r2, [r3, #0]
 8008d04:	4b13      	ldr	r3, [pc, #76]	; (8008d54 <SP100_CCU_State_Updater+0x60>)
 8008d06:	701a      	strb	r2, [r3, #0]
 8008d08:	4b11      	ldr	r3, [pc, #68]	; (8008d50 <SP100_CCU_State_Updater+0x5c>)
 8008d0a:	1dfa      	adds	r2, r7, #7
 8008d0c:	7812      	ldrb	r2, [r2, #0]
 8008d0e:	701a      	strb	r2, [r3, #0]
 8008d10:	4b10      	ldr	r3, [pc, #64]	; (8008d54 <SP100_CCU_State_Updater+0x60>)
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d102      	bne.n	8008d1e <SP100_CCU_State_Updater+0x2a>
 8008d18:	4b0e      	ldr	r3, [pc, #56]	; (8008d54 <SP100_CCU_State_Updater+0x60>)
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	701a      	strb	r2, [r3, #0]
 8008d1e:	4b0d      	ldr	r3, [pc, #52]	; (8008d54 <SP100_CCU_State_Updater+0x60>)
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	2b03      	cmp	r3, #3
 8008d24:	d102      	bne.n	8008d2c <SP100_CCU_State_Updater+0x38>
 8008d26:	4b0b      	ldr	r3, [pc, #44]	; (8008d54 <SP100_CCU_State_Updater+0x60>)
 8008d28:	2201      	movs	r2, #1
 8008d2a:	701a      	strb	r2, [r3, #0]
 8008d2c:	4b09      	ldr	r3, [pc, #36]	; (8008d54 <SP100_CCU_State_Updater+0x60>)
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	2b04      	cmp	r3, #4
 8008d32:	d102      	bne.n	8008d3a <SP100_CCU_State_Updater+0x46>
 8008d34:	4b07      	ldr	r3, [pc, #28]	; (8008d54 <SP100_CCU_State_Updater+0x60>)
 8008d36:	2201      	movs	r2, #1
 8008d38:	701a      	strb	r2, [r3, #0]
 8008d3a:	4b06      	ldr	r3, [pc, #24]	; (8008d54 <SP100_CCU_State_Updater+0x60>)
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	2b05      	cmp	r3, #5
 8008d40:	d102      	bne.n	8008d48 <SP100_CCU_State_Updater+0x54>
 8008d42:	4b04      	ldr	r3, [pc, #16]	; (8008d54 <SP100_CCU_State_Updater+0x60>)
 8008d44:	2201      	movs	r2, #1
 8008d46:	701a      	strb	r2, [r3, #0]
 8008d48:	46c0      	nop			; (mov r8, r8)
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	b002      	add	sp, #8
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	20000570 	.word	0x20000570
 8008d54:	20000009 	.word	0x20000009

08008d58 <SP100_AUTO_Error_State_Handler>:
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	4b13      	ldr	r3, [pc, #76]	; (8008dac <SP100_AUTO_Error_State_Handler+0x54>)
 8008d5e:	781a      	ldrb	r2, [r3, #0]
 8008d60:	4b13      	ldr	r3, [pc, #76]	; (8008db0 <SP100_AUTO_Error_State_Handler+0x58>)
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	4313      	orrs	r3, r2
 8008d66:	b2da      	uxtb	r2, r3
 8008d68:	4b12      	ldr	r3, [pc, #72]	; (8008db4 <SP100_AUTO_Error_State_Handler+0x5c>)
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	b2da      	uxtb	r2, r3
 8008d70:	4b11      	ldr	r3, [pc, #68]	; (8008db8 <SP100_AUTO_Error_State_Handler+0x60>)
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	4313      	orrs	r3, r2
 8008d76:	b2da      	uxtb	r2, r3
 8008d78:	4b10      	ldr	r3, [pc, #64]	; (8008dbc <SP100_AUTO_Error_State_Handler+0x64>)
 8008d7a:	701a      	strb	r2, [r3, #0]
 8008d7c:	4b10      	ldr	r3, [pc, #64]	; (8008dc0 <SP100_AUTO_Error_State_Handler+0x68>)
 8008d7e:	781a      	ldrb	r2, [r3, #0]
 8008d80:	4b10      	ldr	r3, [pc, #64]	; (8008dc4 <SP100_AUTO_Error_State_Handler+0x6c>)
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	4313      	orrs	r3, r2
 8008d86:	b2da      	uxtb	r2, r3
 8008d88:	4b0f      	ldr	r3, [pc, #60]	; (8008dc8 <SP100_AUTO_Error_State_Handler+0x70>)
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	4313      	orrs	r3, r2
 8008d8e:	b2da      	uxtb	r2, r3
 8008d90:	4b0e      	ldr	r3, [pc, #56]	; (8008dcc <SP100_AUTO_Error_State_Handler+0x74>)
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	4313      	orrs	r3, r2
 8008d96:	b2da      	uxtb	r2, r3
 8008d98:	4b08      	ldr	r3, [pc, #32]	; (8008dbc <SP100_AUTO_Error_State_Handler+0x64>)
 8008d9a:	781b      	ldrb	r3, [r3, #0]
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	b2da      	uxtb	r2, r3
 8008da0:	4b06      	ldr	r3, [pc, #24]	; (8008dbc <SP100_AUTO_Error_State_Handler+0x64>)
 8008da2:	701a      	strb	r2, [r3, #0]
 8008da4:	46c0      	nop			; (mov r8, r8)
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	46c0      	nop			; (mov r8, r8)
 8008dac:	2000000e 	.word	0x2000000e
 8008db0:	2000000f 	.word	0x2000000f
 8008db4:	20000010 	.word	0x20000010
 8008db8:	20000011 	.word	0x20000011
 8008dbc:	20000580 	.word	0x20000580
 8008dc0:	2000057c 	.word	0x2000057c
 8008dc4:	2000057d 	.word	0x2000057d
 8008dc8:	2000057e 	.word	0x2000057e
 8008dcc:	2000057f 	.word	0x2000057f

08008dd0 <SP100_CCU_Infinite_Loop>:
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	4bcf      	ldr	r3, [pc, #828]	; (8009114 <SP100_CCU_Infinite_Loop+0x344>)
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	2b05      	cmp	r3, #5
 8008dda:	d000      	beq.n	8008dde <SP100_CCU_Infinite_Loop+0xe>
 8008ddc:	e074      	b.n	8008ec8 <SP100_CCU_Infinite_Loop+0xf8>
 8008dde:	e06f      	b.n	8008ec0 <SP100_CCU_Infinite_Loop+0xf0>
 8008de0:	f003 fce2 	bl	800c7a8 <SP100_IT_MA_STP>
 8008de4:	f006 fa08 	bl	800f1f8 <SP100_MD_MA_STP>
 8008de8:	f007 fd52 	bl	8010890 <SP100_AM_MA_STP>
 8008dec:	2000      	movs	r0, #0
 8008dee:	f007 fd37 	bl	8010860 <SP100_AC_Handler>
 8008df2:	4bc9      	ldr	r3, [pc, #804]	; (8009118 <SP100_CCU_Infinite_Loop+0x348>)
 8008df4:	2200      	movs	r2, #0
 8008df6:	701a      	strb	r2, [r3, #0]
 8008df8:	4bc7      	ldr	r3, [pc, #796]	; (8009118 <SP100_CCU_Infinite_Loop+0x348>)
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	0018      	movs	r0, r3
 8008dfe:	f006 fc1b 	bl	800f638 <SP100_RD_Handler>
 8008e02:	f7ff ff05 	bl	8008c10 <SP100_CCU_DeInit>
 8008e06:	46c0      	nop			; (mov r8, r8)
 8008e08:	4bc4      	ldr	r3, [pc, #784]	; (800911c <SP100_CCU_Infinite_Loop+0x34c>)
 8008e0a:	2120      	movs	r1, #32
 8008e0c:	0018      	movs	r0, r3
 8008e0e:	f7fc ff21 	bl	8005c54 <HAL_GPIO_ReadPin>
 8008e12:	1e03      	subs	r3, r0, #0
 8008e14:	d0f8      	beq.n	8008e08 <SP100_CCU_Infinite_Loop+0x38>
 8008e16:	f7ff ff09 	bl	8008c2c <SP100_Variables_Init>
 8008e1a:	f007 f9d3 	bl	80101c4 <SP100_Snsrs_Init>
 8008e1e:	f7ff feea 	bl	8008bf6 <SP100_CCU_Init>
 8008e22:	2380      	movs	r3, #128	; 0x80
 8008e24:	01db      	lsls	r3, r3, #7
 8008e26:	4abe      	ldr	r2, [pc, #760]	; (8009120 <SP100_CCU_Infinite_Loop+0x350>)
 8008e28:	0019      	movs	r1, r3
 8008e2a:	0010      	movs	r0, r2
 8008e2c:	f7fc ff12 	bl	8005c54 <HAL_GPIO_ReadPin>
 8008e30:	1e03      	subs	r3, r0, #0
 8008e32:	d116      	bne.n	8008e62 <SP100_CCU_Infinite_Loop+0x92>
 8008e34:	2380      	movs	r3, #128	; 0x80
 8008e36:	00da      	lsls	r2, r3, #3
 8008e38:	2390      	movs	r3, #144	; 0x90
 8008e3a:	05db      	lsls	r3, r3, #23
 8008e3c:	0011      	movs	r1, r2
 8008e3e:	0018      	movs	r0, r3
 8008e40:	f7fc ff08 	bl	8005c54 <HAL_GPIO_ReadPin>
 8008e44:	1e03      	subs	r3, r0, #0
 8008e46:	d10c      	bne.n	8008e62 <SP100_CCU_Infinite_Loop+0x92>
 8008e48:	4bb6      	ldr	r3, [pc, #728]	; (8009124 <SP100_CCU_Infinite_Loop+0x354>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	625a      	str	r2, [r3, #36]	; 0x24
 8008e50:	4bb4      	ldr	r3, [pc, #720]	; (8009124 <SP100_CCU_Infinite_Loop+0x354>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	2202      	movs	r2, #2
 8008e56:	4252      	negs	r2, r2
 8008e58:	611a      	str	r2, [r3, #16]
 8008e5a:	4bb2      	ldr	r3, [pc, #712]	; (8009124 <SP100_CCU_Infinite_Loop+0x354>)
 8008e5c:	0018      	movs	r0, r3
 8008e5e:	f7fe fe2f 	bl	8007ac0 <HAL_TIM_Base_Start_IT>
 8008e62:	46c0      	nop			; (mov r8, r8)
 8008e64:	2380      	movs	r3, #128	; 0x80
 8008e66:	01db      	lsls	r3, r3, #7
 8008e68:	4aad      	ldr	r2, [pc, #692]	; (8009120 <SP100_CCU_Infinite_Loop+0x350>)
 8008e6a:	0019      	movs	r1, r3
 8008e6c:	0010      	movs	r0, r2
 8008e6e:	f7fc fef1 	bl	8005c54 <HAL_GPIO_ReadPin>
 8008e72:	1e03      	subs	r3, r0, #0
 8008e74:	d10d      	bne.n	8008e92 <SP100_CCU_Infinite_Loop+0xc2>
 8008e76:	2380      	movs	r3, #128	; 0x80
 8008e78:	00da      	lsls	r2, r3, #3
 8008e7a:	2390      	movs	r3, #144	; 0x90
 8008e7c:	05db      	lsls	r3, r3, #23
 8008e7e:	0011      	movs	r1, r2
 8008e80:	0018      	movs	r0, r3
 8008e82:	f7fc fee7 	bl	8005c54 <HAL_GPIO_ReadPin>
 8008e86:	1e03      	subs	r3, r0, #0
 8008e88:	d103      	bne.n	8008e92 <SP100_CCU_Infinite_Loop+0xc2>
 8008e8a:	4ba2      	ldr	r3, [pc, #648]	; (8009114 <SP100_CCU_Infinite_Loop+0x344>)
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	2b05      	cmp	r3, #5
 8008e90:	d0e8      	beq.n	8008e64 <SP100_CCU_Infinite_Loop+0x94>
 8008e92:	4ba0      	ldr	r3, [pc, #640]	; (8009114 <SP100_CCU_Infinite_Loop+0x344>)
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	2b04      	cmp	r3, #4
 8008e98:	d102      	bne.n	8008ea0 <SP100_CCU_Infinite_Loop+0xd0>
 8008e9a:	f000 fbd3 	bl	8009644 <SP100_DIAG>
 8008e9e:	e00f      	b.n	8008ec0 <SP100_CCU_Infinite_Loop+0xf0>
 8008ea0:	4ba1      	ldr	r3, [pc, #644]	; (8009128 <SP100_CCU_Infinite_Loop+0x358>)
 8008ea2:	0018      	movs	r0, r3
 8008ea4:	f7ff fe98 	bl	8008bd8 <SP100_Delay>
 8008ea8:	4b9a      	ldr	r3, [pc, #616]	; (8009114 <SP100_CCU_Infinite_Loop+0x344>)
 8008eaa:	2200      	movs	r2, #0
 8008eac:	701a      	strb	r2, [r3, #0]
 8008eae:	4b9d      	ldr	r3, [pc, #628]	; (8009124 <SP100_CCU_Infinite_Loop+0x354>)
 8008eb0:	0018      	movs	r0, r3
 8008eb2:	f7fe fe57 	bl	8007b64 <HAL_TIM_Base_Stop_IT>
 8008eb6:	4b9b      	ldr	r3, [pc, #620]	; (8009124 <SP100_CCU_Infinite_Loop+0x354>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2202      	movs	r2, #2
 8008ebc:	4252      	negs	r2, r2
 8008ebe:	611a      	str	r2, [r3, #16]
 8008ec0:	4b94      	ldr	r3, [pc, #592]	; (8009114 <SP100_CCU_Infinite_Loop+0x344>)
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	2b05      	cmp	r3, #5
 8008ec6:	d08b      	beq.n	8008de0 <SP100_CCU_Infinite_Loop+0x10>
 8008ec8:	4b92      	ldr	r3, [pc, #584]	; (8009114 <SP100_CCU_Infinite_Loop+0x344>)
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d147      	bne.n	8008f60 <SP100_CCU_Infinite_Loop+0x190>
 8008ed0:	4b96      	ldr	r3, [pc, #600]	; (800912c <SP100_CCU_Infinite_Loop+0x35c>)
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	701a      	strb	r2, [r3, #0]
 8008ed6:	4b96      	ldr	r3, [pc, #600]	; (8009130 <SP100_CCU_Infinite_Loop+0x360>)
 8008ed8:	2200      	movs	r2, #0
 8008eda:	601a      	str	r2, [r3, #0]
 8008edc:	e037      	b.n	8008f4e <SP100_CCU_Infinite_Loop+0x17e>
 8008ede:	2000      	movs	r0, #0
 8008ee0:	f004 f8a2 	bl	800d028 <SP100_LCD_State_Init_SEG>
 8008ee4:	4b93      	ldr	r3, [pc, #588]	; (8009134 <SP100_CCU_Infinite_Loop+0x364>)
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	0018      	movs	r0, r3
 8008eea:	f003 fcfd 	bl	800c8e8 <SP100_IT_MA_Handler>
 8008eee:	4b92      	ldr	r3, [pc, #584]	; (8009138 <SP100_CCU_Infinite_Loop+0x368>)
 8008ef0:	781b      	ldrb	r3, [r3, #0]
 8008ef2:	0018      	movs	r0, r3
 8008ef4:	f006 fa42 	bl	800f37c <SP100_MD_MA_Handler>
 8008ef8:	4b90      	ldr	r3, [pc, #576]	; (800913c <SP100_CCU_Infinite_Loop+0x36c>)
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	0018      	movs	r0, r3
 8008efe:	f007 fd8b 	bl	8010a18 <SP100_AM_MA_Handler>
 8008f02:	2000      	movs	r0, #0
 8008f04:	f007 fcac 	bl	8010860 <SP100_AC_Handler>
 8008f08:	4b83      	ldr	r3, [pc, #524]	; (8009118 <SP100_CCU_Infinite_Loop+0x348>)
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	0018      	movs	r0, r3
 8008f0e:	f006 fb93 	bl	800f638 <SP100_RD_Handler>
 8008f12:	4b86      	ldr	r3, [pc, #536]	; (800912c <SP100_CCU_Infinite_Loop+0x35c>)
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d105      	bne.n	8008f26 <SP100_CCU_Infinite_Loop+0x156>
 8008f1a:	4b87      	ldr	r3, [pc, #540]	; (8009138 <SP100_CCU_Infinite_Loop+0x368>)
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	0018      	movs	r0, r3
 8008f20:	f004 f90a 	bl	800d138 <SP100_LCD_MD_Handler>
 8008f24:	e002      	b.n	8008f2c <SP100_CCU_Infinite_Loop+0x15c>
 8008f26:	2000      	movs	r0, #0
 8008f28:	f003 fe6c 	bl	800cc04 <SP100_LCD_MD_SEG>
 8008f2c:	2000      	movs	r0, #0
 8008f2e:	f004 f8c7 	bl	800d0c0 <SP100_LCD_AC_Handler>
 8008f32:	4b79      	ldr	r3, [pc, #484]	; (8009118 <SP100_CCU_Infinite_Loop+0x348>)
 8008f34:	781b      	ldrb	r3, [r3, #0]
 8008f36:	0018      	movs	r0, r3
 8008f38:	f004 f8e0 	bl	800d0fc <SP100_LCD_RD_Handler>
 8008f3c:	4b80      	ldr	r3, [pc, #512]	; (8009140 <SP100_CCU_Infinite_Loop+0x370>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	1c18      	adds	r0, r3, #0
 8008f42:	f7f8 f953 	bl	80011ec <__aeabi_f2iz>
 8008f46:	0003      	movs	r3, r0
 8008f48:	0018      	movs	r0, r3
 8008f4a:	f005 fc79 	bl	800e840 <SP100_LCD_OT_Handler>
 8008f4e:	4b71      	ldr	r3, [pc, #452]	; (8009114 <SP100_CCU_Infinite_Loop+0x344>)
 8008f50:	781b      	ldrb	r3, [r3, #0]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d0c3      	beq.n	8008ede <SP100_CCU_Infinite_Loop+0x10e>
 8008f56:	4b75      	ldr	r3, [pc, #468]	; (800912c <SP100_CCU_Infinite_Loop+0x35c>)
 8008f58:	2200      	movs	r2, #0
 8008f5a:	701a      	strb	r2, [r3, #0]
 8008f5c:	f000 fe96 	bl	8009c8c <SP100_ISI_Ctrl_No_Hysteresis>
 8008f60:	4b6c      	ldr	r3, [pc, #432]	; (8009114 <SP100_CCU_Infinite_Loop+0x344>)
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d000      	beq.n	8008f6a <SP100_CCU_Infinite_Loop+0x19a>
 8008f68:	e095      	b.n	8009096 <SP100_CCU_Infinite_Loop+0x2c6>
 8008f6a:	f001 ff07 	bl	800ad7c <SP100_ISI_Ctrl>
 8008f6e:	e087      	b.n	8009080 <SP100_CCU_Infinite_Loop+0x2b0>
 8008f70:	4b74      	ldr	r3, [pc, #464]	; (8009144 <SP100_CCU_Infinite_Loop+0x374>)
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	4a74      	ldr	r2, [pc, #464]	; (8009148 <SP100_CCU_Infinite_Loop+0x378>)
 8008f76:	7812      	ldrb	r2, [r2, #0]
 8008f78:	4013      	ands	r3, r2
 8008f7a:	b2db      	uxtb	r3, r3
 8008f7c:	4a73      	ldr	r2, [pc, #460]	; (800914c <SP100_CCU_Infinite_Loop+0x37c>)
 8008f7e:	7812      	ldrb	r2, [r2, #0]
 8008f80:	4013      	ands	r3, r2
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	4a72      	ldr	r2, [pc, #456]	; (8009150 <SP100_CCU_Infinite_Loop+0x380>)
 8008f86:	7812      	ldrb	r2, [r2, #0]
 8008f88:	4013      	ands	r3, r2
 8008f8a:	b2db      	uxtb	r3, r3
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d006      	beq.n	8008f9e <SP100_CCU_Infinite_Loop+0x1ce>
 8008f90:	4b70      	ldr	r3, [pc, #448]	; (8009154 <SP100_CCU_Infinite_Loop+0x384>)
 8008f92:	2201      	movs	r2, #1
 8008f94:	2104      	movs	r1, #4
 8008f96:	0018      	movs	r0, r3
 8008f98:	f7fc fe79 	bl	8005c8e <HAL_GPIO_WritePin>
 8008f9c:	e005      	b.n	8008faa <SP100_CCU_Infinite_Loop+0x1da>
 8008f9e:	4b6d      	ldr	r3, [pc, #436]	; (8009154 <SP100_CCU_Infinite_Loop+0x384>)
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	2104      	movs	r1, #4
 8008fa4:	0018      	movs	r0, r3
 8008fa6:	f7fc fe72 	bl	8005c8e <HAL_GPIO_WritePin>
 8008faa:	2001      	movs	r0, #1
 8008fac:	f004 f83c 	bl	800d028 <SP100_LCD_State_Init_SEG>
 8008fb0:	4b60      	ldr	r3, [pc, #384]	; (8009134 <SP100_CCU_Infinite_Loop+0x364>)
 8008fb2:	781b      	ldrb	r3, [r3, #0]
 8008fb4:	0018      	movs	r0, r3
 8008fb6:	f003 fc97 	bl	800c8e8 <SP100_IT_MA_Handler>
 8008fba:	4b5f      	ldr	r3, [pc, #380]	; (8009138 <SP100_CCU_Infinite_Loop+0x368>)
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	0018      	movs	r0, r3
 8008fc0:	f006 f9dc 	bl	800f37c <SP100_MD_MA_Handler>
 8008fc4:	4b5d      	ldr	r3, [pc, #372]	; (800913c <SP100_CCU_Infinite_Loop+0x36c>)
 8008fc6:	781b      	ldrb	r3, [r3, #0]
 8008fc8:	0018      	movs	r0, r3
 8008fca:	f007 fd25 	bl	8010a18 <SP100_AM_MA_Handler>
 8008fce:	4b62      	ldr	r3, [pc, #392]	; (8009158 <SP100_CCU_Infinite_Loop+0x388>)
 8008fd0:	781b      	ldrb	r3, [r3, #0]
 8008fd2:	0018      	movs	r0, r3
 8008fd4:	f007 fc44 	bl	8010860 <SP100_AC_Handler>
 8008fd8:	4b4f      	ldr	r3, [pc, #316]	; (8009118 <SP100_CCU_Infinite_Loop+0x348>)
 8008fda:	781b      	ldrb	r3, [r3, #0]
 8008fdc:	0018      	movs	r0, r3
 8008fde:	f006 fb2b 	bl	800f638 <SP100_RD_Handler>
 8008fe2:	f7ff feb9 	bl	8008d58 <SP100_AUTO_Error_State_Handler>
 8008fe6:	4b5d      	ldr	r3, [pc, #372]	; (800915c <SP100_CCU_Infinite_Loop+0x38c>)
 8008fe8:	781b      	ldrb	r3, [r3, #0]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d002      	beq.n	8008ff4 <SP100_CCU_Infinite_Loop+0x224>
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d018      	beq.n	8009024 <SP100_CCU_Infinite_Loop+0x254>
 8008ff2:	e023      	b.n	800903c <SP100_CCU_Infinite_Loop+0x26c>
 8008ff4:	4b53      	ldr	r3, [pc, #332]	; (8009144 <SP100_CCU_Infinite_Loop+0x374>)
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	4a53      	ldr	r2, [pc, #332]	; (8009148 <SP100_CCU_Infinite_Loop+0x378>)
 8008ffa:	7812      	ldrb	r2, [r2, #0]
 8008ffc:	4013      	ands	r3, r2
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	4a52      	ldr	r2, [pc, #328]	; (800914c <SP100_CCU_Infinite_Loop+0x37c>)
 8009002:	7812      	ldrb	r2, [r2, #0]
 8009004:	4013      	ands	r3, r2
 8009006:	b2db      	uxtb	r3, r3
 8009008:	4a51      	ldr	r2, [pc, #324]	; (8009150 <SP100_CCU_Infinite_Loop+0x380>)
 800900a:	7812      	ldrb	r2, [r2, #0]
 800900c:	4013      	ands	r3, r2
 800900e:	b2db      	uxtb	r3, r3
 8009010:	2b00      	cmp	r3, #0
 8009012:	d003      	beq.n	800901c <SP100_CCU_Infinite_Loop+0x24c>
 8009014:	2001      	movs	r0, #1
 8009016:	f003 fdb9 	bl	800cb8c <SP100_LCD_AUTO_SEG>
 800901a:	e00f      	b.n	800903c <SP100_CCU_Infinite_Loop+0x26c>
 800901c:	2000      	movs	r0, #0
 800901e:	f003 fdb5 	bl	800cb8c <SP100_LCD_AUTO_SEG>
 8009022:	e00b      	b.n	800903c <SP100_CCU_Infinite_Loop+0x26c>
 8009024:	4b4e      	ldr	r3, [pc, #312]	; (8009160 <SP100_CCU_Infinite_Loop+0x390>)
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	2b01      	cmp	r3, #1
 800902a:	d103      	bne.n	8009034 <SP100_CCU_Infinite_Loop+0x264>
 800902c:	2001      	movs	r0, #1
 800902e:	f003 fdad 	bl	800cb8c <SP100_LCD_AUTO_SEG>
 8009032:	e002      	b.n	800903a <SP100_CCU_Infinite_Loop+0x26a>
 8009034:	2000      	movs	r0, #0
 8009036:	f003 fda9 	bl	800cb8c <SP100_LCD_AUTO_SEG>
 800903a:	46c0      	nop			; (mov r8, r8)
 800903c:	4b3e      	ldr	r3, [pc, #248]	; (8009138 <SP100_CCU_Infinite_Loop+0x368>)
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	0018      	movs	r0, r3
 8009042:	f004 f879 	bl	800d138 <SP100_LCD_MD_Handler>
 8009046:	4b47      	ldr	r3, [pc, #284]	; (8009164 <SP100_CCU_Infinite_Loop+0x394>)
 8009048:	781b      	ldrb	r3, [r3, #0]
 800904a:	0018      	movs	r0, r3
 800904c:	f004 f8e6 	bl	800d21c <SP100_LCD_BL_Handler>
 8009050:	4b41      	ldr	r3, [pc, #260]	; (8009158 <SP100_CCU_Infinite_Loop+0x388>)
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	0018      	movs	r0, r3
 8009056:	f004 f833 	bl	800d0c0 <SP100_LCD_AC_Handler>
 800905a:	4b2f      	ldr	r3, [pc, #188]	; (8009118 <SP100_CCU_Infinite_Loop+0x348>)
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	0018      	movs	r0, r3
 8009060:	f004 f84c 	bl	800d0fc <SP100_LCD_RD_Handler>
 8009064:	4b36      	ldr	r3, [pc, #216]	; (8009140 <SP100_CCU_Infinite_Loop+0x370>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	1c18      	adds	r0, r3, #0
 800906a:	f7f8 f8bf 	bl	80011ec <__aeabi_f2iz>
 800906e:	0003      	movs	r3, r0
 8009070:	0018      	movs	r0, r3
 8009072:	f005 fbe5 	bl	800e840 <SP100_LCD_OT_Handler>
 8009076:	4b3c      	ldr	r3, [pc, #240]	; (8009168 <SP100_CCU_Infinite_Loop+0x398>)
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	1c18      	adds	r0, r3, #0
 800907c:	f005 f84a 	bl	800e114 <SP100_LCD_SP_Handler>
 8009080:	4b24      	ldr	r3, [pc, #144]	; (8009114 <SP100_CCU_Infinite_Loop+0x344>)
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	2b01      	cmp	r3, #1
 8009086:	d100      	bne.n	800908a <SP100_CCU_Infinite_Loop+0x2ba>
 8009088:	e772      	b.n	8008f70 <SP100_CCU_Infinite_Loop+0x1a0>
 800908a:	4b32      	ldr	r3, [pc, #200]	; (8009154 <SP100_CCU_Infinite_Loop+0x384>)
 800908c:	2200      	movs	r2, #0
 800908e:	2104      	movs	r1, #4
 8009090:	0018      	movs	r0, r3
 8009092:	f7fc fdfc 	bl	8005c8e <HAL_GPIO_WritePin>
 8009096:	4b1f      	ldr	r3, [pc, #124]	; (8009114 <SP100_CCU_Infinite_Loop+0x344>)
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	2b02      	cmp	r3, #2
 800909c:	d000      	beq.n	80090a0 <SP100_CCU_Infinite_Loop+0x2d0>
 800909e:	e0a6      	b.n	80091ee <SP100_CCU_Infinite_Loop+0x41e>
 80090a0:	2380      	movs	r3, #128	; 0x80
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	481d      	ldr	r0, [pc, #116]	; (800911c <SP100_CCU_Infinite_Loop+0x34c>)
 80090a6:	2201      	movs	r2, #1
 80090a8:	0019      	movs	r1, r3
 80090aa:	f7fc fdf0 	bl	8005c8e <HAL_GPIO_WritePin>
 80090ae:	e07e      	b.n	80091ae <SP100_CCU_Infinite_Loop+0x3de>
 80090b0:	2002      	movs	r0, #2
 80090b2:	f003 ffb9 	bl	800d028 <SP100_LCD_State_Init_SEG>
 80090b6:	4b1f      	ldr	r3, [pc, #124]	; (8009134 <SP100_CCU_Infinite_Loop+0x364>)
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	0018      	movs	r0, r3
 80090bc:	f003 fc14 	bl	800c8e8 <SP100_IT_MA_Handler>
 80090c0:	4b1d      	ldr	r3, [pc, #116]	; (8009138 <SP100_CCU_Infinite_Loop+0x368>)
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	0018      	movs	r0, r3
 80090c6:	f006 f959 	bl	800f37c <SP100_MD_MA_Handler>
 80090ca:	4b1c      	ldr	r3, [pc, #112]	; (800913c <SP100_CCU_Infinite_Loop+0x36c>)
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	0018      	movs	r0, r3
 80090d0:	f007 fca2 	bl	8010a18 <SP100_AM_MA_Handler>
 80090d4:	4b20      	ldr	r3, [pc, #128]	; (8009158 <SP100_CCU_Infinite_Loop+0x388>)
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	0018      	movs	r0, r3
 80090da:	f007 fbc1 	bl	8010860 <SP100_AC_Handler>
 80090de:	4b0e      	ldr	r3, [pc, #56]	; (8009118 <SP100_CCU_Infinite_Loop+0x348>)
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	0018      	movs	r0, r3
 80090e4:	f006 faa8 	bl	800f638 <SP100_RD_Handler>
 80090e8:	f7ff fe36 	bl	8008d58 <SP100_AUTO_Error_State_Handler>
 80090ec:	4b1b      	ldr	r3, [pc, #108]	; (800915c <SP100_CCU_Infinite_Loop+0x38c>)
 80090ee:	781b      	ldrb	r3, [r3, #0]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d002      	beq.n	80090fa <SP100_CCU_Infinite_Loop+0x32a>
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d004      	beq.n	8009102 <SP100_CCU_Infinite_Loop+0x332>
 80090f8:	e03c      	b.n	8009174 <SP100_CCU_Infinite_Loop+0x3a4>
 80090fa:	2000      	movs	r0, #0
 80090fc:	f003 fd46 	bl	800cb8c <SP100_LCD_AUTO_SEG>
 8009100:	e038      	b.n	8009174 <SP100_CCU_Infinite_Loop+0x3a4>
 8009102:	4b17      	ldr	r3, [pc, #92]	; (8009160 <SP100_CCU_Infinite_Loop+0x390>)
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	2b01      	cmp	r3, #1
 8009108:	d130      	bne.n	800916c <SP100_CCU_Infinite_Loop+0x39c>
 800910a:	2001      	movs	r0, #1
 800910c:	f003 fd3e 	bl	800cb8c <SP100_LCD_AUTO_SEG>
 8009110:	e02f      	b.n	8009172 <SP100_CCU_Infinite_Loop+0x3a2>
 8009112:	46c0      	nop			; (mov r8, r8)
 8009114:	20000570 	.word	0x20000570
 8009118:	20000577 	.word	0x20000577
 800911c:	48000800 	.word	0x48000800
 8009120:	48000400 	.word	0x48000400
 8009124:	20000520 	.word	0x20000520
 8009128:	001e8480 	.word	0x001e8480
 800912c:	20000582 	.word	0x20000582
 8009130:	200005a8 	.word	0x200005a8
 8009134:	20000571 	.word	0x20000571
 8009138:	20000572 	.word	0x20000572
 800913c:	20000573 	.word	0x20000573
 8009140:	20000594 	.word	0x20000594
 8009144:	2000000a 	.word	0x2000000a
 8009148:	2000000b 	.word	0x2000000b
 800914c:	2000000c 	.word	0x2000000c
 8009150:	2000000d 	.word	0x2000000d
 8009154:	48000c00 	.word	0x48000c00
 8009158:	20000575 	.word	0x20000575
 800915c:	20000580 	.word	0x20000580
 8009160:	20000581 	.word	0x20000581
 8009164:	20000574 	.word	0x20000574
 8009168:	20000014 	.word	0x20000014
 800916c:	2000      	movs	r0, #0
 800916e:	f003 fd0d 	bl	800cb8c <SP100_LCD_AUTO_SEG>
 8009172:	46c0      	nop			; (mov r8, r8)
 8009174:	4b66      	ldr	r3, [pc, #408]	; (8009310 <SP100_CCU_Infinite_Loop+0x540>)
 8009176:	781b      	ldrb	r3, [r3, #0]
 8009178:	0018      	movs	r0, r3
 800917a:	f004 f84f 	bl	800d21c <SP100_LCD_BL_Handler>
 800917e:	4b65      	ldr	r3, [pc, #404]	; (8009314 <SP100_CCU_Infinite_Loop+0x544>)
 8009180:	781b      	ldrb	r3, [r3, #0]
 8009182:	0018      	movs	r0, r3
 8009184:	f003 ff9c 	bl	800d0c0 <SP100_LCD_AC_Handler>
 8009188:	4b63      	ldr	r3, [pc, #396]	; (8009318 <SP100_CCU_Infinite_Loop+0x548>)
 800918a:	781b      	ldrb	r3, [r3, #0]
 800918c:	0018      	movs	r0, r3
 800918e:	f003 ffb5 	bl	800d0fc <SP100_LCD_RD_Handler>
 8009192:	4b62      	ldr	r3, [pc, #392]	; (800931c <SP100_CCU_Infinite_Loop+0x54c>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	1c18      	adds	r0, r3, #0
 8009198:	f7f8 f828 	bl	80011ec <__aeabi_f2iz>
 800919c:	0003      	movs	r3, r0
 800919e:	0018      	movs	r0, r3
 80091a0:	f005 fb4e 	bl	800e840 <SP100_LCD_OT_Handler>
 80091a4:	4b5e      	ldr	r3, [pc, #376]	; (8009320 <SP100_CCU_Infinite_Loop+0x550>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	1c18      	adds	r0, r3, #0
 80091aa:	f004 ffb3 	bl	800e114 <SP100_LCD_SP_Handler>
 80091ae:	4b5d      	ldr	r3, [pc, #372]	; (8009324 <SP100_CCU_Infinite_Loop+0x554>)
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	2b02      	cmp	r3, #2
 80091b4:	d100      	bne.n	80091b8 <SP100_CCU_Infinite_Loop+0x3e8>
 80091b6:	e77b      	b.n	80090b0 <SP100_CCU_Infinite_Loop+0x2e0>
 80091b8:	4b5a      	ldr	r3, [pc, #360]	; (8009324 <SP100_CCU_Infinite_Loop+0x554>)
 80091ba:	781b      	ldrb	r3, [r3, #0]
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d10f      	bne.n	80091e0 <SP100_CCU_Infinite_Loop+0x410>
 80091c0:	4b59      	ldr	r3, [pc, #356]	; (8009328 <SP100_CCU_Infinite_Loop+0x558>)
 80091c2:	781a      	ldrb	r2, [r3, #0]
 80091c4:	4b59      	ldr	r3, [pc, #356]	; (800932c <SP100_CCU_Infinite_Loop+0x55c>)
 80091c6:	701a      	strb	r2, [r3, #0]
 80091c8:	4b59      	ldr	r3, [pc, #356]	; (8009330 <SP100_CCU_Infinite_Loop+0x560>)
 80091ca:	781a      	ldrb	r2, [r3, #0]
 80091cc:	4b59      	ldr	r3, [pc, #356]	; (8009334 <SP100_CCU_Infinite_Loop+0x564>)
 80091ce:	701a      	strb	r2, [r3, #0]
 80091d0:	4b59      	ldr	r3, [pc, #356]	; (8009338 <SP100_CCU_Infinite_Loop+0x568>)
 80091d2:	781a      	ldrb	r2, [r3, #0]
 80091d4:	4b4e      	ldr	r3, [pc, #312]	; (8009310 <SP100_CCU_Infinite_Loop+0x540>)
 80091d6:	701a      	strb	r2, [r3, #0]
 80091d8:	4b58      	ldr	r3, [pc, #352]	; (800933c <SP100_CCU_Infinite_Loop+0x56c>)
 80091da:	781a      	ldrb	r2, [r3, #0]
 80091dc:	4b4d      	ldr	r3, [pc, #308]	; (8009314 <SP100_CCU_Infinite_Loop+0x544>)
 80091de:	701a      	strb	r2, [r3, #0]
 80091e0:	2380      	movs	r3, #128	; 0x80
 80091e2:	009b      	lsls	r3, r3, #2
 80091e4:	4856      	ldr	r0, [pc, #344]	; (8009340 <SP100_CCU_Infinite_Loop+0x570>)
 80091e6:	2200      	movs	r2, #0
 80091e8:	0019      	movs	r1, r3
 80091ea:	f7fc fd50 	bl	8005c8e <HAL_GPIO_WritePin>
 80091ee:	4b4d      	ldr	r3, [pc, #308]	; (8009324 <SP100_CCU_Infinite_Loop+0x554>)
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	2b03      	cmp	r3, #3
 80091f4:	d000      	beq.n	80091f8 <SP100_CCU_Infinite_Loop+0x428>
 80091f6:	e5ed      	b.n	8008dd4 <SP100_CCU_Infinite_Loop+0x4>
 80091f8:	4b52      	ldr	r3, [pc, #328]	; (8009344 <SP100_CCU_Infinite_Loop+0x574>)
 80091fa:	2201      	movs	r2, #1
 80091fc:	601a      	str	r2, [r3, #0]
 80091fe:	4b52      	ldr	r3, [pc, #328]	; (8009348 <SP100_CCU_Infinite_Loop+0x578>)
 8009200:	2201      	movs	r2, #1
 8009202:	2104      	movs	r1, #4
 8009204:	0018      	movs	r0, r3
 8009206:	f7fc fd42 	bl	8005c8e <HAL_GPIO_WritePin>
 800920a:	e075      	b.n	80092f8 <SP100_CCU_Infinite_Loop+0x528>
 800920c:	2003      	movs	r0, #3
 800920e:	f003 ff0b 	bl	800d028 <SP100_LCD_State_Init_SEG>
 8009212:	4b46      	ldr	r3, [pc, #280]	; (800932c <SP100_CCU_Infinite_Loop+0x55c>)
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	0018      	movs	r0, r3
 8009218:	f003 fb66 	bl	800c8e8 <SP100_IT_MA_Handler>
 800921c:	4b45      	ldr	r3, [pc, #276]	; (8009334 <SP100_CCU_Infinite_Loop+0x564>)
 800921e:	781b      	ldrb	r3, [r3, #0]
 8009220:	0018      	movs	r0, r3
 8009222:	f006 f8ab 	bl	800f37c <SP100_MD_MA_Handler>
 8009226:	4b49      	ldr	r3, [pc, #292]	; (800934c <SP100_CCU_Infinite_Loop+0x57c>)
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	0018      	movs	r0, r3
 800922c:	f007 fbf4 	bl	8010a18 <SP100_AM_MA_Handler>
 8009230:	4b38      	ldr	r3, [pc, #224]	; (8009314 <SP100_CCU_Infinite_Loop+0x544>)
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	0018      	movs	r0, r3
 8009236:	f007 fb13 	bl	8010860 <SP100_AC_Handler>
 800923a:	4b37      	ldr	r3, [pc, #220]	; (8009318 <SP100_CCU_Infinite_Loop+0x548>)
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	0018      	movs	r0, r3
 8009240:	f006 f9fa 	bl	800f638 <SP100_RD_Handler>
 8009244:	f7ff fd88 	bl	8008d58 <SP100_AUTO_Error_State_Handler>
 8009248:	4b41      	ldr	r3, [pc, #260]	; (8009350 <SP100_CCU_Infinite_Loop+0x580>)
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d002      	beq.n	8009256 <SP100_CCU_Infinite_Loop+0x486>
 8009250:	2b01      	cmp	r3, #1
 8009252:	d004      	beq.n	800925e <SP100_CCU_Infinite_Loop+0x48e>
 8009254:	e00f      	b.n	8009276 <SP100_CCU_Infinite_Loop+0x4a6>
 8009256:	2000      	movs	r0, #0
 8009258:	f003 fc98 	bl	800cb8c <SP100_LCD_AUTO_SEG>
 800925c:	e00b      	b.n	8009276 <SP100_CCU_Infinite_Loop+0x4a6>
 800925e:	4b3d      	ldr	r3, [pc, #244]	; (8009354 <SP100_CCU_Infinite_Loop+0x584>)
 8009260:	781b      	ldrb	r3, [r3, #0]
 8009262:	2b01      	cmp	r3, #1
 8009264:	d103      	bne.n	800926e <SP100_CCU_Infinite_Loop+0x49e>
 8009266:	2001      	movs	r0, #1
 8009268:	f003 fc90 	bl	800cb8c <SP100_LCD_AUTO_SEG>
 800926c:	e002      	b.n	8009274 <SP100_CCU_Infinite_Loop+0x4a4>
 800926e:	2000      	movs	r0, #0
 8009270:	f003 fc8c 	bl	800cb8c <SP100_LCD_AUTO_SEG>
 8009274:	46c0      	nop			; (mov r8, r8)
 8009276:	2000      	movs	r0, #0
 8009278:	f003 ff22 	bl	800d0c0 <SP100_LCD_AC_Handler>
 800927c:	4b26      	ldr	r3, [pc, #152]	; (8009318 <SP100_CCU_Infinite_Loop+0x548>)
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	0018      	movs	r0, r3
 8009282:	f003 ff3b 	bl	800d0fc <SP100_LCD_RD_Handler>
 8009286:	4b2f      	ldr	r3, [pc, #188]	; (8009344 <SP100_CCU_Infinite_Loop+0x574>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	0018      	movs	r0, r3
 800928c:	f005 fbc0 	bl	800ea10 <SP100_LCD_Snsr_Index_Handler>
 8009290:	4b2c      	ldr	r3, [pc, #176]	; (8009344 <SP100_CCU_Infinite_Loop+0x574>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	2b01      	cmp	r3, #1
 8009296:	d108      	bne.n	80092aa <SP100_CCU_Infinite_Loop+0x4da>
 8009298:	4b2f      	ldr	r3, [pc, #188]	; (8009358 <SP100_CCU_Infinite_Loop+0x588>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	1c18      	adds	r0, r3, #0
 800929e:	f7f7 ffa5 	bl	80011ec <__aeabi_f2iz>
 80092a2:	0003      	movs	r3, r0
 80092a4:	0018      	movs	r0, r3
 80092a6:	f005 facb 	bl	800e840 <SP100_LCD_OT_Handler>
 80092aa:	4b26      	ldr	r3, [pc, #152]	; (8009344 <SP100_CCU_Infinite_Loop+0x574>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	2b02      	cmp	r3, #2
 80092b0:	d108      	bne.n	80092c4 <SP100_CCU_Infinite_Loop+0x4f4>
 80092b2:	4b2a      	ldr	r3, [pc, #168]	; (800935c <SP100_CCU_Infinite_Loop+0x58c>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	1c18      	adds	r0, r3, #0
 80092b8:	f7f7 ff98 	bl	80011ec <__aeabi_f2iz>
 80092bc:	0003      	movs	r3, r0
 80092be:	0018      	movs	r0, r3
 80092c0:	f005 fabe 	bl	800e840 <SP100_LCD_OT_Handler>
 80092c4:	4b1f      	ldr	r3, [pc, #124]	; (8009344 <SP100_CCU_Infinite_Loop+0x574>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	2b03      	cmp	r3, #3
 80092ca:	d108      	bne.n	80092de <SP100_CCU_Infinite_Loop+0x50e>
 80092cc:	4b24      	ldr	r3, [pc, #144]	; (8009360 <SP100_CCU_Infinite_Loop+0x590>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	1c18      	adds	r0, r3, #0
 80092d2:	f7f7 ff8b 	bl	80011ec <__aeabi_f2iz>
 80092d6:	0003      	movs	r3, r0
 80092d8:	0018      	movs	r0, r3
 80092da:	f005 fab1 	bl	800e840 <SP100_LCD_OT_Handler>
 80092de:	4b19      	ldr	r3, [pc, #100]	; (8009344 <SP100_CCU_Infinite_Loop+0x574>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	2b04      	cmp	r3, #4
 80092e4:	d108      	bne.n	80092f8 <SP100_CCU_Infinite_Loop+0x528>
 80092e6:	4b0d      	ldr	r3, [pc, #52]	; (800931c <SP100_CCU_Infinite_Loop+0x54c>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	1c18      	adds	r0, r3, #0
 80092ec:	f7f7 ff7e 	bl	80011ec <__aeabi_f2iz>
 80092f0:	0003      	movs	r3, r0
 80092f2:	0018      	movs	r0, r3
 80092f4:	f005 faa4 	bl	800e840 <SP100_LCD_OT_Handler>
 80092f8:	4b0a      	ldr	r3, [pc, #40]	; (8009324 <SP100_CCU_Infinite_Loop+0x554>)
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	2b03      	cmp	r3, #3
 80092fe:	d085      	beq.n	800920c <SP100_CCU_Infinite_Loop+0x43c>
 8009300:	4b11      	ldr	r3, [pc, #68]	; (8009348 <SP100_CCU_Infinite_Loop+0x578>)
 8009302:	2200      	movs	r2, #0
 8009304:	2104      	movs	r1, #4
 8009306:	0018      	movs	r0, r3
 8009308:	f7fc fcc1 	bl	8005c8e <HAL_GPIO_WritePin>
 800930c:	e562      	b.n	8008dd4 <SP100_CCU_Infinite_Loop+0x4>
 800930e:	46c0      	nop			; (mov r8, r8)
 8009310:	20000574 	.word	0x20000574
 8009314:	20000575 	.word	0x20000575
 8009318:	20000577 	.word	0x20000577
 800931c:	20000594 	.word	0x20000594
 8009320:	20000014 	.word	0x20000014
 8009324:	20000570 	.word	0x20000570
 8009328:	20000578 	.word	0x20000578
 800932c:	20000571 	.word	0x20000571
 8009330:	20000579 	.word	0x20000579
 8009334:	20000572 	.word	0x20000572
 8009338:	2000057a 	.word	0x2000057a
 800933c:	2000057b 	.word	0x2000057b
 8009340:	48000800 	.word	0x48000800
 8009344:	20000018 	.word	0x20000018
 8009348:	48000c00 	.word	0x48000c00
 800934c:	20000573 	.word	0x20000573
 8009350:	20000580 	.word	0x20000580
 8009354:	20000581 	.word	0x20000581
 8009358:	20000588 	.word	0x20000588
 800935c:	2000058c 	.word	0x2000058c
 8009360:	20000590 	.word	0x20000590

08009364 <SP100_BL_Init>:
 8009364:	b580      	push	{r7, lr}
 8009366:	af00      	add	r7, sp, #0
 8009368:	4b08      	ldr	r3, [pc, #32]	; (800938c <SP100_BL_Init+0x28>)
 800936a:	2200      	movs	r2, #0
 800936c:	601a      	str	r2, [r3, #0]
 800936e:	4b08      	ldr	r3, [pc, #32]	; (8009390 <SP100_BL_Init+0x2c>)
 8009370:	2100      	movs	r1, #0
 8009372:	0018      	movs	r0, r3
 8009374:	f7fc f86a 	bl	800544c <HAL_DAC_Start>
 8009378:	4b04      	ldr	r3, [pc, #16]	; (800938c <SP100_BL_Init+0x28>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4804      	ldr	r0, [pc, #16]	; (8009390 <SP100_BL_Init+0x2c>)
 800937e:	2200      	movs	r2, #0
 8009380:	2100      	movs	r1, #0
 8009382:	f7fb fff8 	bl	8005376 <HAL_DAC_SetValue>
 8009386:	46c0      	nop			; (mov r8, r8)
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}
 800938c:	200005ac 	.word	0x200005ac
 8009390:	200002ac 	.word	0x200002ac

08009394 <SP100_BL_DeInit>:
 8009394:	b580      	push	{r7, lr}
 8009396:	af00      	add	r7, sp, #0
 8009398:	4b06      	ldr	r3, [pc, #24]	; (80093b4 <SP100_BL_DeInit+0x20>)
 800939a:	2200      	movs	r2, #0
 800939c:	601a      	str	r2, [r3, #0]
 800939e:	4b05      	ldr	r3, [pc, #20]	; (80093b4 <SP100_BL_DeInit+0x20>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4805      	ldr	r0, [pc, #20]	; (80093b8 <SP100_BL_DeInit+0x24>)
 80093a4:	2200      	movs	r2, #0
 80093a6:	2100      	movs	r1, #0
 80093a8:	f7fb ffe5 	bl	8005376 <HAL_DAC_SetValue>
 80093ac:	46c0      	nop			; (mov r8, r8)
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	46c0      	nop			; (mov r8, r8)
 80093b4:	200005ac 	.word	0x200005ac
 80093b8:	200002ac 	.word	0x200002ac

080093bc <SP100_BL_OFF>:
 80093bc:	b580      	push	{r7, lr}
 80093be:	af00      	add	r7, sp, #0
 80093c0:	4b0f      	ldr	r3, [pc, #60]	; (8009400 <SP100_BL_OFF+0x44>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a0f      	ldr	r2, [pc, #60]	; (8009404 <SP100_BL_OFF+0x48>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	dd03      	ble.n	80093d2 <SP100_BL_OFF+0x16>
 80093ca:	4b0d      	ldr	r3, [pc, #52]	; (8009400 <SP100_BL_OFF+0x44>)
 80093cc:	4a0d      	ldr	r2, [pc, #52]	; (8009404 <SP100_BL_OFF+0x48>)
 80093ce:	601a      	str	r2, [r3, #0]
 80093d0:	e005      	b.n	80093de <SP100_BL_OFF+0x22>
 80093d2:	4b0b      	ldr	r3, [pc, #44]	; (8009400 <SP100_BL_OFF+0x44>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	3bc8      	subs	r3, #200	; 0xc8
 80093d8:	001a      	movs	r2, r3
 80093da:	4b09      	ldr	r3, [pc, #36]	; (8009400 <SP100_BL_OFF+0x44>)
 80093dc:	601a      	str	r2, [r3, #0]
 80093de:	4b08      	ldr	r3, [pc, #32]	; (8009400 <SP100_BL_OFF+0x44>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	da02      	bge.n	80093ec <SP100_BL_OFF+0x30>
 80093e6:	4b06      	ldr	r3, [pc, #24]	; (8009400 <SP100_BL_OFF+0x44>)
 80093e8:	2200      	movs	r2, #0
 80093ea:	601a      	str	r2, [r3, #0]
 80093ec:	4b04      	ldr	r3, [pc, #16]	; (8009400 <SP100_BL_OFF+0x44>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4805      	ldr	r0, [pc, #20]	; (8009408 <SP100_BL_OFF+0x4c>)
 80093f2:	2200      	movs	r2, #0
 80093f4:	2100      	movs	r1, #0
 80093f6:	f7fb ffbe 	bl	8005376 <HAL_DAC_SetValue>
 80093fa:	46c0      	nop			; (mov r8, r8)
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	200005ac 	.word	0x200005ac
 8009404:	00000bb8 	.word	0x00000bb8
 8009408:	200002ac 	.word	0x200002ac

0800940c <SP100_BL_Up>:
 800940c:	b580      	push	{r7, lr}
 800940e:	af00      	add	r7, sp, #0
 8009410:	4b12      	ldr	r3, [pc, #72]	; (800945c <SP100_BL_Up+0x50>)
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	23fa      	movs	r3, #250	; 0xfa
 8009416:	005b      	lsls	r3, r3, #1
 8009418:	429a      	cmp	r2, r3
 800941a:	da04      	bge.n	8009426 <SP100_BL_Up+0x1a>
 800941c:	4b0f      	ldr	r3, [pc, #60]	; (800945c <SP100_BL_Up+0x50>)
 800941e:	22fa      	movs	r2, #250	; 0xfa
 8009420:	0052      	lsls	r2, r2, #1
 8009422:	601a      	str	r2, [r3, #0]
 8009424:	e005      	b.n	8009432 <SP100_BL_Up+0x26>
 8009426:	4b0d      	ldr	r3, [pc, #52]	; (800945c <SP100_BL_Up+0x50>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	3332      	adds	r3, #50	; 0x32
 800942c:	001a      	movs	r2, r3
 800942e:	4b0b      	ldr	r3, [pc, #44]	; (800945c <SP100_BL_Up+0x50>)
 8009430:	601a      	str	r2, [r3, #0]
 8009432:	4b0a      	ldr	r3, [pc, #40]	; (800945c <SP100_BL_Up+0x50>)
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	23fa      	movs	r3, #250	; 0xfa
 8009438:	011b      	lsls	r3, r3, #4
 800943a:	429a      	cmp	r2, r3
 800943c:	dd03      	ble.n	8009446 <SP100_BL_Up+0x3a>
 800943e:	4b07      	ldr	r3, [pc, #28]	; (800945c <SP100_BL_Up+0x50>)
 8009440:	22fa      	movs	r2, #250	; 0xfa
 8009442:	0112      	lsls	r2, r2, #4
 8009444:	601a      	str	r2, [r3, #0]
 8009446:	4b05      	ldr	r3, [pc, #20]	; (800945c <SP100_BL_Up+0x50>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4805      	ldr	r0, [pc, #20]	; (8009460 <SP100_BL_Up+0x54>)
 800944c:	2200      	movs	r2, #0
 800944e:	2100      	movs	r1, #0
 8009450:	f7fb ff91 	bl	8005376 <HAL_DAC_SetValue>
 8009454:	46c0      	nop			; (mov r8, r8)
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	46c0      	nop			; (mov r8, r8)
 800945c:	200005ac 	.word	0x200005ac
 8009460:	200002ac 	.word	0x200002ac

08009464 <SP100_BL_Down>:
 8009464:	b580      	push	{r7, lr}
 8009466:	af00      	add	r7, sp, #0
 8009468:	4b0f      	ldr	r3, [pc, #60]	; (80094a8 <SP100_BL_Down+0x44>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a0f      	ldr	r2, [pc, #60]	; (80094ac <SP100_BL_Down+0x48>)
 800946e:	4293      	cmp	r3, r2
 8009470:	dd03      	ble.n	800947a <SP100_BL_Down+0x16>
 8009472:	4b0d      	ldr	r3, [pc, #52]	; (80094a8 <SP100_BL_Down+0x44>)
 8009474:	4a0d      	ldr	r2, [pc, #52]	; (80094ac <SP100_BL_Down+0x48>)
 8009476:	601a      	str	r2, [r3, #0]
 8009478:	e005      	b.n	8009486 <SP100_BL_Down+0x22>
 800947a:	4b0b      	ldr	r3, [pc, #44]	; (80094a8 <SP100_BL_Down+0x44>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	3b32      	subs	r3, #50	; 0x32
 8009480:	001a      	movs	r2, r3
 8009482:	4b09      	ldr	r3, [pc, #36]	; (80094a8 <SP100_BL_Down+0x44>)
 8009484:	601a      	str	r2, [r3, #0]
 8009486:	4b08      	ldr	r3, [pc, #32]	; (80094a8 <SP100_BL_Down+0x44>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	2b00      	cmp	r3, #0
 800948c:	da02      	bge.n	8009494 <SP100_BL_Down+0x30>
 800948e:	4b06      	ldr	r3, [pc, #24]	; (80094a8 <SP100_BL_Down+0x44>)
 8009490:	2200      	movs	r2, #0
 8009492:	601a      	str	r2, [r3, #0]
 8009494:	4b04      	ldr	r3, [pc, #16]	; (80094a8 <SP100_BL_Down+0x44>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4805      	ldr	r0, [pc, #20]	; (80094b0 <SP100_BL_Down+0x4c>)
 800949a:	2200      	movs	r2, #0
 800949c:	2100      	movs	r1, #0
 800949e:	f7fb ff6a 	bl	8005376 <HAL_DAC_SetValue>
 80094a2:	46c0      	nop			; (mov r8, r8)
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}
 80094a8:	200005ac 	.word	0x200005ac
 80094ac:	00000bb8 	.word	0x00000bb8
 80094b0:	200002ac 	.word	0x200002ac

080094b4 <SP100_BL_Handler>:
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b082      	sub	sp, #8
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	0002      	movs	r2, r0
 80094bc:	1dfb      	adds	r3, r7, #7
 80094be:	701a      	strb	r2, [r3, #0]
 80094c0:	1dfb      	adds	r3, r7, #7
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	2b08      	cmp	r3, #8
 80094c6:	d900      	bls.n	80094ca <SP100_BL_Handler+0x16>
 80094c8:	e09c      	b.n	8009604 <SP100_BL_Handler+0x150>
 80094ca:	009a      	lsls	r2, r3, #2
 80094cc:	4b4f      	ldr	r3, [pc, #316]	; (800960c <SP100_BL_Handler+0x158>)
 80094ce:	18d3      	adds	r3, r2, r3
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	469f      	mov	pc, r3
 80094d4:	f7ff ff72 	bl	80093bc <SP100_BL_OFF>
 80094d8:	e094      	b.n	8009604 <SP100_BL_Handler+0x150>
 80094da:	4b4d      	ldr	r3, [pc, #308]	; (8009610 <SP100_BL_Handler+0x15c>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a4d      	ldr	r2, [pc, #308]	; (8009614 <SP100_BL_Handler+0x160>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	dc02      	bgt.n	80094ea <SP100_BL_Handler+0x36>
 80094e4:	f7ff ff92 	bl	800940c <SP100_BL_Up>
 80094e8:	e07d      	b.n	80095e6 <SP100_BL_Handler+0x132>
 80094ea:	4b49      	ldr	r3, [pc, #292]	; (8009610 <SP100_BL_Handler+0x15c>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a4a      	ldr	r2, [pc, #296]	; (8009618 <SP100_BL_Handler+0x164>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	dc00      	bgt.n	80094f6 <SP100_BL_Handler+0x42>
 80094f4:	e077      	b.n	80095e6 <SP100_BL_Handler+0x132>
 80094f6:	f7ff ffb5 	bl	8009464 <SP100_BL_Down>
 80094fa:	e074      	b.n	80095e6 <SP100_BL_Handler+0x132>
 80094fc:	4b44      	ldr	r3, [pc, #272]	; (8009610 <SP100_BL_Handler+0x15c>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4a46      	ldr	r2, [pc, #280]	; (800961c <SP100_BL_Handler+0x168>)
 8009502:	4293      	cmp	r3, r2
 8009504:	dc02      	bgt.n	800950c <SP100_BL_Handler+0x58>
 8009506:	f7ff ff81 	bl	800940c <SP100_BL_Up>
 800950a:	e06e      	b.n	80095ea <SP100_BL_Handler+0x136>
 800950c:	4b40      	ldr	r3, [pc, #256]	; (8009610 <SP100_BL_Handler+0x15c>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4a43      	ldr	r2, [pc, #268]	; (8009620 <SP100_BL_Handler+0x16c>)
 8009512:	4293      	cmp	r3, r2
 8009514:	dc00      	bgt.n	8009518 <SP100_BL_Handler+0x64>
 8009516:	e068      	b.n	80095ea <SP100_BL_Handler+0x136>
 8009518:	f7ff ffa4 	bl	8009464 <SP100_BL_Down>
 800951c:	e065      	b.n	80095ea <SP100_BL_Handler+0x136>
 800951e:	4b3c      	ldr	r3, [pc, #240]	; (8009610 <SP100_BL_Handler+0x15c>)
 8009520:	681a      	ldr	r2, [r3, #0]
 8009522:	23c8      	movs	r3, #200	; 0xc8
 8009524:	00db      	lsls	r3, r3, #3
 8009526:	429a      	cmp	r2, r3
 8009528:	da02      	bge.n	8009530 <SP100_BL_Handler+0x7c>
 800952a:	f7ff ff6f 	bl	800940c <SP100_BL_Up>
 800952e:	e05e      	b.n	80095ee <SP100_BL_Handler+0x13a>
 8009530:	4b37      	ldr	r3, [pc, #220]	; (8009610 <SP100_BL_Handler+0x15c>)
 8009532:	681a      	ldr	r2, [r3, #0]
 8009534:	23c8      	movs	r3, #200	; 0xc8
 8009536:	00db      	lsls	r3, r3, #3
 8009538:	429a      	cmp	r2, r3
 800953a:	dd58      	ble.n	80095ee <SP100_BL_Handler+0x13a>
 800953c:	f7ff ff92 	bl	8009464 <SP100_BL_Down>
 8009540:	e055      	b.n	80095ee <SP100_BL_Handler+0x13a>
 8009542:	4b33      	ldr	r3, [pc, #204]	; (8009610 <SP100_BL_Handler+0x15c>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a37      	ldr	r2, [pc, #220]	; (8009624 <SP100_BL_Handler+0x170>)
 8009548:	4293      	cmp	r3, r2
 800954a:	dc02      	bgt.n	8009552 <SP100_BL_Handler+0x9e>
 800954c:	f7ff ff5e 	bl	800940c <SP100_BL_Up>
 8009550:	e04f      	b.n	80095f2 <SP100_BL_Handler+0x13e>
 8009552:	4b2f      	ldr	r3, [pc, #188]	; (8009610 <SP100_BL_Handler+0x15c>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4a34      	ldr	r2, [pc, #208]	; (8009628 <SP100_BL_Handler+0x174>)
 8009558:	4293      	cmp	r3, r2
 800955a:	dd4a      	ble.n	80095f2 <SP100_BL_Handler+0x13e>
 800955c:	f7ff ff82 	bl	8009464 <SP100_BL_Down>
 8009560:	e047      	b.n	80095f2 <SP100_BL_Handler+0x13e>
 8009562:	4b2b      	ldr	r3, [pc, #172]	; (8009610 <SP100_BL_Handler+0x15c>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4a31      	ldr	r2, [pc, #196]	; (800962c <SP100_BL_Handler+0x178>)
 8009568:	4293      	cmp	r3, r2
 800956a:	dc02      	bgt.n	8009572 <SP100_BL_Handler+0xbe>
 800956c:	f7ff ff4e 	bl	800940c <SP100_BL_Up>
 8009570:	e041      	b.n	80095f6 <SP100_BL_Handler+0x142>
 8009572:	4b27      	ldr	r3, [pc, #156]	; (8009610 <SP100_BL_Handler+0x15c>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	4a2e      	ldr	r2, [pc, #184]	; (8009630 <SP100_BL_Handler+0x17c>)
 8009578:	4293      	cmp	r3, r2
 800957a:	dd3c      	ble.n	80095f6 <SP100_BL_Handler+0x142>
 800957c:	f7ff ff72 	bl	8009464 <SP100_BL_Down>
 8009580:	e039      	b.n	80095f6 <SP100_BL_Handler+0x142>
 8009582:	4b23      	ldr	r3, [pc, #140]	; (8009610 <SP100_BL_Handler+0x15c>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4a2b      	ldr	r2, [pc, #172]	; (8009634 <SP100_BL_Handler+0x180>)
 8009588:	4293      	cmp	r3, r2
 800958a:	dc02      	bgt.n	8009592 <SP100_BL_Handler+0xde>
 800958c:	f7ff ff3e 	bl	800940c <SP100_BL_Up>
 8009590:	e033      	b.n	80095fa <SP100_BL_Handler+0x146>
 8009592:	4b1f      	ldr	r3, [pc, #124]	; (8009610 <SP100_BL_Handler+0x15c>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	4a28      	ldr	r2, [pc, #160]	; (8009638 <SP100_BL_Handler+0x184>)
 8009598:	4293      	cmp	r3, r2
 800959a:	dd2e      	ble.n	80095fa <SP100_BL_Handler+0x146>
 800959c:	f7ff ff62 	bl	8009464 <SP100_BL_Down>
 80095a0:	e02b      	b.n	80095fa <SP100_BL_Handler+0x146>
 80095a2:	4b1b      	ldr	r3, [pc, #108]	; (8009610 <SP100_BL_Handler+0x15c>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a25      	ldr	r2, [pc, #148]	; (800963c <SP100_BL_Handler+0x188>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	dc02      	bgt.n	80095b2 <SP100_BL_Handler+0xfe>
 80095ac:	f7ff ff2e 	bl	800940c <SP100_BL_Up>
 80095b0:	e025      	b.n	80095fe <SP100_BL_Handler+0x14a>
 80095b2:	4b17      	ldr	r3, [pc, #92]	; (8009610 <SP100_BL_Handler+0x15c>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4a22      	ldr	r2, [pc, #136]	; (8009640 <SP100_BL_Handler+0x18c>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	dd20      	ble.n	80095fe <SP100_BL_Handler+0x14a>
 80095bc:	f7ff ff52 	bl	8009464 <SP100_BL_Down>
 80095c0:	e01d      	b.n	80095fe <SP100_BL_Handler+0x14a>
 80095c2:	4b13      	ldr	r3, [pc, #76]	; (8009610 <SP100_BL_Handler+0x15c>)
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	23fa      	movs	r3, #250	; 0xfa
 80095c8:	011b      	lsls	r3, r3, #4
 80095ca:	429a      	cmp	r2, r3
 80095cc:	da02      	bge.n	80095d4 <SP100_BL_Handler+0x120>
 80095ce:	f7ff ff1d 	bl	800940c <SP100_BL_Up>
 80095d2:	e016      	b.n	8009602 <SP100_BL_Handler+0x14e>
 80095d4:	4b0e      	ldr	r3, [pc, #56]	; (8009610 <SP100_BL_Handler+0x15c>)
 80095d6:	681a      	ldr	r2, [r3, #0]
 80095d8:	23fa      	movs	r3, #250	; 0xfa
 80095da:	011b      	lsls	r3, r3, #4
 80095dc:	429a      	cmp	r2, r3
 80095de:	dd10      	ble.n	8009602 <SP100_BL_Handler+0x14e>
 80095e0:	f7ff ff40 	bl	8009464 <SP100_BL_Down>
 80095e4:	e00d      	b.n	8009602 <SP100_BL_Handler+0x14e>
 80095e6:	46c0      	nop			; (mov r8, r8)
 80095e8:	e00c      	b.n	8009604 <SP100_BL_Handler+0x150>
 80095ea:	46c0      	nop			; (mov r8, r8)
 80095ec:	e00a      	b.n	8009604 <SP100_BL_Handler+0x150>
 80095ee:	46c0      	nop			; (mov r8, r8)
 80095f0:	e008      	b.n	8009604 <SP100_BL_Handler+0x150>
 80095f2:	46c0      	nop			; (mov r8, r8)
 80095f4:	e006      	b.n	8009604 <SP100_BL_Handler+0x150>
 80095f6:	46c0      	nop			; (mov r8, r8)
 80095f8:	e004      	b.n	8009604 <SP100_BL_Handler+0x150>
 80095fa:	46c0      	nop			; (mov r8, r8)
 80095fc:	e002      	b.n	8009604 <SP100_BL_Handler+0x150>
 80095fe:	46c0      	nop			; (mov r8, r8)
 8009600:	e000      	b.n	8009604 <SP100_BL_Handler+0x150>
 8009602:	46c0      	nop			; (mov r8, r8)
 8009604:	46c0      	nop			; (mov r8, r8)
 8009606:	46bd      	mov	sp, r7
 8009608:	b002      	add	sp, #8
 800960a:	bd80      	pop	{r7, pc}
 800960c:	08014e74 	.word	0x08014e74
 8009610:	200005ac 	.word	0x200005ac
 8009614:	0000044b 	.word	0x0000044b
 8009618:	0000044c 	.word	0x0000044c
 800961c:	00000545 	.word	0x00000545
 8009620:	00000546 	.word	0x00000546
 8009624:	00000739 	.word	0x00000739
 8009628:	0000073a 	.word	0x0000073a
 800962c:	00000833 	.word	0x00000833
 8009630:	00000834 	.word	0x00000834
 8009634:	0000092d 	.word	0x0000092d
 8009638:	0000092e 	.word	0x0000092e
 800963c:	00000a27 	.word	0x00000a27
 8009640:	00000a28 	.word	0x00000a28

08009644 <SP100_DIAG>:
 8009644:	b580      	push	{r7, lr}
 8009646:	b082      	sub	sp, #8
 8009648:	af00      	add	r7, sp, #0
 800964a:	4b8a      	ldr	r3, [pc, #552]	; (8009874 <SP100_DIAG+0x230>)
 800964c:	2200      	movs	r2, #0
 800964e:	701a      	strb	r2, [r3, #0]
 8009650:	4b89      	ldr	r3, [pc, #548]	; (8009878 <SP100_DIAG+0x234>)
 8009652:	2200      	movs	r2, #0
 8009654:	701a      	strb	r2, [r3, #0]
 8009656:	4b89      	ldr	r3, [pc, #548]	; (800987c <SP100_DIAG+0x238>)
 8009658:	2200      	movs	r2, #0
 800965a:	701a      	strb	r2, [r3, #0]
 800965c:	4b88      	ldr	r3, [pc, #544]	; (8009880 <SP100_DIAG+0x23c>)
 800965e:	2200      	movs	r2, #0
 8009660:	701a      	strb	r2, [r3, #0]
 8009662:	4b88      	ldr	r3, [pc, #544]	; (8009884 <SP100_DIAG+0x240>)
 8009664:	2200      	movs	r2, #0
 8009666:	701a      	strb	r2, [r3, #0]
 8009668:	4b87      	ldr	r3, [pc, #540]	; (8009888 <SP100_DIAG+0x244>)
 800966a:	2200      	movs	r2, #0
 800966c:	701a      	strb	r2, [r3, #0]
 800966e:	4b87      	ldr	r3, [pc, #540]	; (800988c <SP100_DIAG+0x248>)
 8009670:	2200      	movs	r2, #0
 8009672:	701a      	strb	r2, [r3, #0]
 8009674:	4b86      	ldr	r3, [pc, #536]	; (8009890 <SP100_DIAG+0x24c>)
 8009676:	2200      	movs	r2, #0
 8009678:	701a      	strb	r2, [r3, #0]
 800967a:	4b86      	ldr	r3, [pc, #536]	; (8009894 <SP100_DIAG+0x250>)
 800967c:	2200      	movs	r2, #0
 800967e:	701a      	strb	r2, [r3, #0]
 8009680:	4b85      	ldr	r3, [pc, #532]	; (8009898 <SP100_DIAG+0x254>)
 8009682:	2200      	movs	r2, #0
 8009684:	701a      	strb	r2, [r3, #0]
 8009686:	4b85      	ldr	r3, [pc, #532]	; (800989c <SP100_DIAG+0x258>)
 8009688:	2200      	movs	r2, #0
 800968a:	701a      	strb	r2, [r3, #0]
 800968c:	4b84      	ldr	r3, [pc, #528]	; (80098a0 <SP100_DIAG+0x25c>)
 800968e:	2200      	movs	r2, #0
 8009690:	701a      	strb	r2, [r3, #0]
 8009692:	4b84      	ldr	r3, [pc, #528]	; (80098a4 <SP100_DIAG+0x260>)
 8009694:	2200      	movs	r2, #0
 8009696:	2104      	movs	r1, #4
 8009698:	0018      	movs	r0, r3
 800969a:	f7fc faf8 	bl	8005c8e <HAL_GPIO_WritePin>
 800969e:	2380      	movs	r3, #128	; 0x80
 80096a0:	0059      	lsls	r1, r3, #1
 80096a2:	2390      	movs	r3, #144	; 0x90
 80096a4:	05db      	lsls	r3, r3, #23
 80096a6:	2200      	movs	r2, #0
 80096a8:	0018      	movs	r0, r3
 80096aa:	f7fc faf0 	bl	8005c8e <HAL_GPIO_WritePin>
 80096ae:	2380      	movs	r3, #128	; 0x80
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	487d      	ldr	r0, [pc, #500]	; (80098a8 <SP100_DIAG+0x264>)
 80096b4:	2200      	movs	r2, #0
 80096b6:	0019      	movs	r1, r3
 80096b8:	f7fc fae9 	bl	8005c8e <HAL_GPIO_WritePin>
 80096bc:	2380      	movs	r3, #128	; 0x80
 80096be:	0099      	lsls	r1, r3, #2
 80096c0:	2390      	movs	r3, #144	; 0x90
 80096c2:	05db      	lsls	r3, r3, #23
 80096c4:	2200      	movs	r2, #0
 80096c6:	0018      	movs	r0, r3
 80096c8:	f7fc fae1 	bl	8005c8e <HAL_GPIO_WritePin>
 80096cc:	2380      	movs	r3, #128	; 0x80
 80096ce:	005b      	lsls	r3, r3, #1
 80096d0:	4875      	ldr	r0, [pc, #468]	; (80098a8 <SP100_DIAG+0x264>)
 80096d2:	2200      	movs	r2, #0
 80096d4:	0019      	movs	r1, r3
 80096d6:	f7fc fada 	bl	8005c8e <HAL_GPIO_WritePin>
 80096da:	4b69      	ldr	r3, [pc, #420]	; (8009880 <SP100_DIAG+0x23c>)
 80096dc:	2201      	movs	r2, #1
 80096de:	701a      	strb	r2, [r3, #0]
 80096e0:	2001      	movs	r0, #1
 80096e2:	f003 fa15 	bl	800cb10 <SP100_LCD_ALL_SEG>
 80096e6:	4b71      	ldr	r3, [pc, #452]	; (80098ac <SP100_DIAG+0x268>)
 80096e8:	0018      	movs	r0, r3
 80096ea:	f7ff fa75 	bl	8008bd8 <SP100_Delay>
 80096ee:	2000      	movs	r0, #0
 80096f0:	f003 fa0e 	bl	800cb10 <SP100_LCD_ALL_SEG>
 80096f4:	4b62      	ldr	r3, [pc, #392]	; (8009880 <SP100_DIAG+0x23c>)
 80096f6:	2200      	movs	r2, #0
 80096f8:	701a      	strb	r2, [r3, #0]
 80096fa:	e2a8      	b.n	8009c4e <SP100_DIAG+0x60a>
 80096fc:	4b5e      	ldr	r3, [pc, #376]	; (8009878 <SP100_DIAG+0x234>)
 80096fe:	2200      	movs	r2, #0
 8009700:	701a      	strb	r2, [r3, #0]
 8009702:	4b60      	ldr	r3, [pc, #384]	; (8009884 <SP100_DIAG+0x240>)
 8009704:	2200      	movs	r2, #0
 8009706:	701a      	strb	r2, [r3, #0]
 8009708:	4b5f      	ldr	r3, [pc, #380]	; (8009888 <SP100_DIAG+0x244>)
 800970a:	2200      	movs	r2, #0
 800970c:	701a      	strb	r2, [r3, #0]
 800970e:	4b5f      	ldr	r3, [pc, #380]	; (800988c <SP100_DIAG+0x248>)
 8009710:	2200      	movs	r2, #0
 8009712:	701a      	strb	r2, [r3, #0]
 8009714:	4b5e      	ldr	r3, [pc, #376]	; (8009890 <SP100_DIAG+0x24c>)
 8009716:	2200      	movs	r2, #0
 8009718:	701a      	strb	r2, [r3, #0]
 800971a:	46c0      	nop			; (mov r8, r8)
 800971c:	e08e      	b.n	800983c <SP100_DIAG+0x1f8>
 800971e:	4b56      	ldr	r3, [pc, #344]	; (8009878 <SP100_DIAG+0x234>)
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	2b05      	cmp	r3, #5
 8009724:	d900      	bls.n	8009728 <SP100_DIAG+0xe4>
 8009726:	e089      	b.n	800983c <SP100_DIAG+0x1f8>
 8009728:	009a      	lsls	r2, r3, #2
 800972a:	4b61      	ldr	r3, [pc, #388]	; (80098b0 <SP100_DIAG+0x26c>)
 800972c:	18d3      	adds	r3, r2, r3
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	469f      	mov	pc, r3
 8009732:	4b54      	ldr	r3, [pc, #336]	; (8009884 <SP100_DIAG+0x240>)
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d111      	bne.n	800975e <SP100_DIAG+0x11a>
 800973a:	4b53      	ldr	r3, [pc, #332]	; (8009888 <SP100_DIAG+0x244>)
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d10d      	bne.n	800975e <SP100_DIAG+0x11a>
 8009742:	4b52      	ldr	r3, [pc, #328]	; (800988c <SP100_DIAG+0x248>)
 8009744:	781b      	ldrb	r3, [r3, #0]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d109      	bne.n	800975e <SP100_DIAG+0x11a>
 800974a:	4b51      	ldr	r3, [pc, #324]	; (8009890 <SP100_DIAG+0x24c>)
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d105      	bne.n	800975e <SP100_DIAG+0x11a>
 8009752:	4b49      	ldr	r3, [pc, #292]	; (8009878 <SP100_DIAG+0x234>)
 8009754:	781b      	ldrb	r3, [r3, #0]
 8009756:	0018      	movs	r0, r3
 8009758:	f005 fa5a 	bl	800ec10 <SP100_LCD_DIAG_Snsr_Handler>
 800975c:	e00c      	b.n	8009778 <SP100_DIAG+0x134>
 800975e:	4b55      	ldr	r3, [pc, #340]	; (80098b4 <SP100_DIAG+0x270>)
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	2b01      	cmp	r3, #1
 8009764:	d105      	bne.n	8009772 <SP100_DIAG+0x12e>
 8009766:	4b44      	ldr	r3, [pc, #272]	; (8009878 <SP100_DIAG+0x234>)
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	0018      	movs	r0, r3
 800976c:	f005 fa50 	bl	800ec10 <SP100_LCD_DIAG_Snsr_Handler>
 8009770:	e064      	b.n	800983c <SP100_DIAG+0x1f8>
 8009772:	2005      	movs	r0, #5
 8009774:	f005 fa4c 	bl	800ec10 <SP100_LCD_DIAG_Snsr_Handler>
 8009778:	e060      	b.n	800983c <SP100_DIAG+0x1f8>
 800977a:	4b42      	ldr	r3, [pc, #264]	; (8009884 <SP100_DIAG+0x240>)
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d105      	bne.n	800978e <SP100_DIAG+0x14a>
 8009782:	4b3d      	ldr	r3, [pc, #244]	; (8009878 <SP100_DIAG+0x234>)
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	0018      	movs	r0, r3
 8009788:	f005 fa42 	bl	800ec10 <SP100_LCD_DIAG_Snsr_Handler>
 800978c:	e056      	b.n	800983c <SP100_DIAG+0x1f8>
 800978e:	4b49      	ldr	r3, [pc, #292]	; (80098b4 <SP100_DIAG+0x270>)
 8009790:	781b      	ldrb	r3, [r3, #0]
 8009792:	2b01      	cmp	r3, #1
 8009794:	d105      	bne.n	80097a2 <SP100_DIAG+0x15e>
 8009796:	4b38      	ldr	r3, [pc, #224]	; (8009878 <SP100_DIAG+0x234>)
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	0018      	movs	r0, r3
 800979c:	f005 fa38 	bl	800ec10 <SP100_LCD_DIAG_Snsr_Handler>
 80097a0:	e04c      	b.n	800983c <SP100_DIAG+0x1f8>
 80097a2:	2005      	movs	r0, #5
 80097a4:	f005 fa34 	bl	800ec10 <SP100_LCD_DIAG_Snsr_Handler>
 80097a8:	e048      	b.n	800983c <SP100_DIAG+0x1f8>
 80097aa:	4b37      	ldr	r3, [pc, #220]	; (8009888 <SP100_DIAG+0x244>)
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d105      	bne.n	80097be <SP100_DIAG+0x17a>
 80097b2:	4b31      	ldr	r3, [pc, #196]	; (8009878 <SP100_DIAG+0x234>)
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	0018      	movs	r0, r3
 80097b8:	f005 fa2a 	bl	800ec10 <SP100_LCD_DIAG_Snsr_Handler>
 80097bc:	e03e      	b.n	800983c <SP100_DIAG+0x1f8>
 80097be:	4b3d      	ldr	r3, [pc, #244]	; (80098b4 <SP100_DIAG+0x270>)
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	d105      	bne.n	80097d2 <SP100_DIAG+0x18e>
 80097c6:	4b2c      	ldr	r3, [pc, #176]	; (8009878 <SP100_DIAG+0x234>)
 80097c8:	781b      	ldrb	r3, [r3, #0]
 80097ca:	0018      	movs	r0, r3
 80097cc:	f005 fa20 	bl	800ec10 <SP100_LCD_DIAG_Snsr_Handler>
 80097d0:	e034      	b.n	800983c <SP100_DIAG+0x1f8>
 80097d2:	2005      	movs	r0, #5
 80097d4:	f005 fa1c 	bl	800ec10 <SP100_LCD_DIAG_Snsr_Handler>
 80097d8:	e030      	b.n	800983c <SP100_DIAG+0x1f8>
 80097da:	4b2c      	ldr	r3, [pc, #176]	; (800988c <SP100_DIAG+0x248>)
 80097dc:	781b      	ldrb	r3, [r3, #0]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d105      	bne.n	80097ee <SP100_DIAG+0x1aa>
 80097e2:	4b25      	ldr	r3, [pc, #148]	; (8009878 <SP100_DIAG+0x234>)
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	0018      	movs	r0, r3
 80097e8:	f005 fa12 	bl	800ec10 <SP100_LCD_DIAG_Snsr_Handler>
 80097ec:	e026      	b.n	800983c <SP100_DIAG+0x1f8>
 80097ee:	4b31      	ldr	r3, [pc, #196]	; (80098b4 <SP100_DIAG+0x270>)
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	d105      	bne.n	8009802 <SP100_DIAG+0x1be>
 80097f6:	4b20      	ldr	r3, [pc, #128]	; (8009878 <SP100_DIAG+0x234>)
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	0018      	movs	r0, r3
 80097fc:	f005 fa08 	bl	800ec10 <SP100_LCD_DIAG_Snsr_Handler>
 8009800:	e01c      	b.n	800983c <SP100_DIAG+0x1f8>
 8009802:	2005      	movs	r0, #5
 8009804:	f005 fa04 	bl	800ec10 <SP100_LCD_DIAG_Snsr_Handler>
 8009808:	e018      	b.n	800983c <SP100_DIAG+0x1f8>
 800980a:	4b21      	ldr	r3, [pc, #132]	; (8009890 <SP100_DIAG+0x24c>)
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d105      	bne.n	800981e <SP100_DIAG+0x1da>
 8009812:	4b19      	ldr	r3, [pc, #100]	; (8009878 <SP100_DIAG+0x234>)
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	0018      	movs	r0, r3
 8009818:	f005 f9fa 	bl	800ec10 <SP100_LCD_DIAG_Snsr_Handler>
 800981c:	e00e      	b.n	800983c <SP100_DIAG+0x1f8>
 800981e:	4b25      	ldr	r3, [pc, #148]	; (80098b4 <SP100_DIAG+0x270>)
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	2b01      	cmp	r3, #1
 8009824:	d105      	bne.n	8009832 <SP100_DIAG+0x1ee>
 8009826:	4b14      	ldr	r3, [pc, #80]	; (8009878 <SP100_DIAG+0x234>)
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	0018      	movs	r0, r3
 800982c:	f005 f9f0 	bl	800ec10 <SP100_LCD_DIAG_Snsr_Handler>
 8009830:	e004      	b.n	800983c <SP100_DIAG+0x1f8>
 8009832:	2005      	movs	r0, #5
 8009834:	f005 f9ec 	bl	800ec10 <SP100_LCD_DIAG_Snsr_Handler>
 8009838:	e000      	b.n	800983c <SP100_DIAG+0x1f8>
 800983a:	46c0      	nop			; (mov r8, r8)
 800983c:	4b0d      	ldr	r3, [pc, #52]	; (8009874 <SP100_DIAG+0x230>)
 800983e:	781b      	ldrb	r3, [r3, #0]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d100      	bne.n	8009846 <SP100_DIAG+0x202>
 8009844:	e76b      	b.n	800971e <SP100_DIAG+0xda>
 8009846:	4b0d      	ldr	r3, [pc, #52]	; (800987c <SP100_DIAG+0x238>)
 8009848:	2200      	movs	r2, #0
 800984a:	701a      	strb	r2, [r3, #0]
 800984c:	4b11      	ldr	r3, [pc, #68]	; (8009894 <SP100_DIAG+0x250>)
 800984e:	2200      	movs	r2, #0
 8009850:	701a      	strb	r2, [r3, #0]
 8009852:	4b11      	ldr	r3, [pc, #68]	; (8009898 <SP100_DIAG+0x254>)
 8009854:	2200      	movs	r2, #0
 8009856:	701a      	strb	r2, [r3, #0]
 8009858:	4b10      	ldr	r3, [pc, #64]	; (800989c <SP100_DIAG+0x258>)
 800985a:	2200      	movs	r2, #0
 800985c:	701a      	strb	r2, [r3, #0]
 800985e:	4b10      	ldr	r3, [pc, #64]	; (80098a0 <SP100_DIAG+0x25c>)
 8009860:	2200      	movs	r2, #0
 8009862:	701a      	strb	r2, [r3, #0]
 8009864:	1dfb      	adds	r3, r7, #7
 8009866:	2200      	movs	r2, #0
 8009868:	701a      	strb	r2, [r3, #0]
 800986a:	1dbb      	adds	r3, r7, #6
 800986c:	2200      	movs	r2, #0
 800986e:	701a      	strb	r2, [r3, #0]
 8009870:	e1e8      	b.n	8009c44 <SP100_DIAG+0x600>
 8009872:	46c0      	nop			; (mov r8, r8)
 8009874:	20000583 	.word	0x20000583
 8009878:	20000584 	.word	0x20000584
 800987c:	20000585 	.word	0x20000585
 8009880:	20000586 	.word	0x20000586
 8009884:	2000000e 	.word	0x2000000e
 8009888:	2000000f 	.word	0x2000000f
 800988c:	20000010 	.word	0x20000010
 8009890:	20000011 	.word	0x20000011
 8009894:	2000057c 	.word	0x2000057c
 8009898:	2000057d 	.word	0x2000057d
 800989c:	2000057e 	.word	0x2000057e
 80098a0:	2000057f 	.word	0x2000057f
 80098a4:	48000c00 	.word	0x48000c00
 80098a8:	48000800 	.word	0x48000800
 80098ac:	00989680 	.word	0x00989680
 80098b0:	08014e98 	.word	0x08014e98
 80098b4:	20000581 	.word	0x20000581
 80098b8:	4bc9      	ldr	r3, [pc, #804]	; (8009be0 <SP100_DIAG+0x59c>)
 80098ba:	2201      	movs	r2, #1
 80098bc:	701a      	strb	r2, [r3, #0]
 80098be:	f005 fc0b 	bl	800f0d8 <SP100_LCD_DIAG_Actr_Busy>
 80098c2:	2000      	movs	r0, #0
 80098c4:	f007 f8a8 	bl	8010a18 <SP100_AM_MA_Handler>
 80098c8:	4bc6      	ldr	r3, [pc, #792]	; (8009be4 <SP100_DIAG+0x5a0>)
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d102      	bne.n	80098d6 <SP100_DIAG+0x292>
 80098d0:	1dfb      	adds	r3, r7, #7
 80098d2:	2201      	movs	r2, #1
 80098d4:	701a      	strb	r2, [r3, #0]
 80098d6:	4bc4      	ldr	r3, [pc, #784]	; (8009be8 <SP100_DIAG+0x5a4>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	1c18      	adds	r0, r3, #0
 80098dc:	f7f9 fada 	bl	8002e94 <__aeabi_f2d>
 80098e0:	4ac2      	ldr	r2, [pc, #776]	; (8009bec <SP100_DIAG+0x5a8>)
 80098e2:	4bc3      	ldr	r3, [pc, #780]	; (8009bf0 <SP100_DIAG+0x5ac>)
 80098e4:	f7f6 fdc2 	bl	800046c <__aeabi_dcmple>
 80098e8:	1e03      	subs	r3, r0, #0
 80098ea:	d10a      	bne.n	8009902 <SP100_DIAG+0x2be>
 80098ec:	4bbe      	ldr	r3, [pc, #760]	; (8009be8 <SP100_DIAG+0x5a4>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	1c18      	adds	r0, r3, #0
 80098f2:	f7f9 facf 	bl	8002e94 <__aeabi_f2d>
 80098f6:	4abf      	ldr	r2, [pc, #764]	; (8009bf4 <SP100_DIAG+0x5b0>)
 80098f8:	4bbf      	ldr	r3, [pc, #764]	; (8009bf8 <SP100_DIAG+0x5b4>)
 80098fa:	f7f6 fdcb 	bl	8000494 <__aeabi_dcmpge>
 80098fe:	1e03      	subs	r3, r0, #0
 8009900:	d003      	beq.n	800990a <SP100_DIAG+0x2c6>
 8009902:	4bbe      	ldr	r3, [pc, #760]	; (8009bfc <SP100_DIAG+0x5b8>)
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	2b01      	cmp	r3, #1
 8009908:	d1db      	bne.n	80098c2 <SP100_DIAG+0x27e>
 800990a:	f006 ffc1 	bl	8010890 <SP100_AM_MA_STP>
 800990e:	4bbc      	ldr	r3, [pc, #752]	; (8009c00 <SP100_DIAG+0x5bc>)
 8009910:	0018      	movs	r0, r3
 8009912:	f7ff f961 	bl	8008bd8 <SP100_Delay>
 8009916:	2014      	movs	r0, #20
 8009918:	f007 f87e 	bl	8010a18 <SP100_AM_MA_Handler>
 800991c:	4bb1      	ldr	r3, [pc, #708]	; (8009be4 <SP100_DIAG+0x5a0>)
 800991e:	781b      	ldrb	r3, [r3, #0]
 8009920:	2b01      	cmp	r3, #1
 8009922:	d102      	bne.n	800992a <SP100_DIAG+0x2e6>
 8009924:	1dfb      	adds	r3, r7, #7
 8009926:	2201      	movs	r2, #1
 8009928:	701a      	strb	r2, [r3, #0]
 800992a:	4baf      	ldr	r3, [pc, #700]	; (8009be8 <SP100_DIAG+0x5a4>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	1c18      	adds	r0, r3, #0
 8009930:	f7f9 fab0 	bl	8002e94 <__aeabi_f2d>
 8009934:	4aad      	ldr	r2, [pc, #692]	; (8009bec <SP100_DIAG+0x5a8>)
 8009936:	4bb3      	ldr	r3, [pc, #716]	; (8009c04 <SP100_DIAG+0x5c0>)
 8009938:	f7f6 fd98 	bl	800046c <__aeabi_dcmple>
 800993c:	1e03      	subs	r3, r0, #0
 800993e:	d10a      	bne.n	8009956 <SP100_DIAG+0x312>
 8009940:	4ba9      	ldr	r3, [pc, #676]	; (8009be8 <SP100_DIAG+0x5a4>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	1c18      	adds	r0, r3, #0
 8009946:	f7f9 faa5 	bl	8002e94 <__aeabi_f2d>
 800994a:	4aaf      	ldr	r2, [pc, #700]	; (8009c08 <SP100_DIAG+0x5c4>)
 800994c:	4baf      	ldr	r3, [pc, #700]	; (8009c0c <SP100_DIAG+0x5c8>)
 800994e:	f7f6 fda1 	bl	8000494 <__aeabi_dcmpge>
 8009952:	1e03      	subs	r3, r0, #0
 8009954:	d003      	beq.n	800995e <SP100_DIAG+0x31a>
 8009956:	4ba9      	ldr	r3, [pc, #676]	; (8009bfc <SP100_DIAG+0x5b8>)
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	2b01      	cmp	r3, #1
 800995c:	d1db      	bne.n	8009916 <SP100_DIAG+0x2d2>
 800995e:	f006 ff97 	bl	8010890 <SP100_AM_MA_STP>
 8009962:	4ba7      	ldr	r3, [pc, #668]	; (8009c00 <SP100_DIAG+0x5bc>)
 8009964:	0018      	movs	r0, r3
 8009966:	f7ff f937 	bl	8008bd8 <SP100_Delay>
 800996a:	2000      	movs	r0, #0
 800996c:	f007 f854 	bl	8010a18 <SP100_AM_MA_Handler>
 8009970:	4b9c      	ldr	r3, [pc, #624]	; (8009be4 <SP100_DIAG+0x5a0>)
 8009972:	781b      	ldrb	r3, [r3, #0]
 8009974:	2b01      	cmp	r3, #1
 8009976:	d102      	bne.n	800997e <SP100_DIAG+0x33a>
 8009978:	1dfb      	adds	r3, r7, #7
 800997a:	2201      	movs	r2, #1
 800997c:	701a      	strb	r2, [r3, #0]
 800997e:	4b9a      	ldr	r3, [pc, #616]	; (8009be8 <SP100_DIAG+0x5a4>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	1c18      	adds	r0, r3, #0
 8009984:	f7f9 fa86 	bl	8002e94 <__aeabi_f2d>
 8009988:	4a98      	ldr	r2, [pc, #608]	; (8009bec <SP100_DIAG+0x5a8>)
 800998a:	4b99      	ldr	r3, [pc, #612]	; (8009bf0 <SP100_DIAG+0x5ac>)
 800998c:	f7f6 fd6e 	bl	800046c <__aeabi_dcmple>
 8009990:	1e03      	subs	r3, r0, #0
 8009992:	d10a      	bne.n	80099aa <SP100_DIAG+0x366>
 8009994:	4b94      	ldr	r3, [pc, #592]	; (8009be8 <SP100_DIAG+0x5a4>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	1c18      	adds	r0, r3, #0
 800999a:	f7f9 fa7b 	bl	8002e94 <__aeabi_f2d>
 800999e:	4a95      	ldr	r2, [pc, #596]	; (8009bf4 <SP100_DIAG+0x5b0>)
 80099a0:	4b95      	ldr	r3, [pc, #596]	; (8009bf8 <SP100_DIAG+0x5b4>)
 80099a2:	f7f6 fd77 	bl	8000494 <__aeabi_dcmpge>
 80099a6:	1e03      	subs	r3, r0, #0
 80099a8:	d003      	beq.n	80099b2 <SP100_DIAG+0x36e>
 80099aa:	4b94      	ldr	r3, [pc, #592]	; (8009bfc <SP100_DIAG+0x5b8>)
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	d1db      	bne.n	800996a <SP100_DIAG+0x326>
 80099b2:	f006 ff6d 	bl	8010890 <SP100_AM_MA_STP>
 80099b6:	4b92      	ldr	r3, [pc, #584]	; (8009c00 <SP100_DIAG+0x5bc>)
 80099b8:	0018      	movs	r0, r3
 80099ba:	f7ff f90d 	bl	8008bd8 <SP100_Delay>
 80099be:	2000      	movs	r0, #0
 80099c0:	f005 fcdc 	bl	800f37c <SP100_MD_MA_Handler>
 80099c4:	4b92      	ldr	r3, [pc, #584]	; (8009c10 <SP100_DIAG+0x5cc>)
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	d102      	bne.n	80099d2 <SP100_DIAG+0x38e>
 80099cc:	1dbb      	adds	r3, r7, #6
 80099ce:	2201      	movs	r2, #1
 80099d0:	701a      	strb	r2, [r3, #0]
 80099d2:	4b90      	ldr	r3, [pc, #576]	; (8009c14 <SP100_DIAG+0x5d0>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	1c18      	adds	r0, r3, #0
 80099d8:	f7f9 fa5c 	bl	8002e94 <__aeabi_f2d>
 80099dc:	4a83      	ldr	r2, [pc, #524]	; (8009bec <SP100_DIAG+0x5a8>)
 80099de:	4b8e      	ldr	r3, [pc, #568]	; (8009c18 <SP100_DIAG+0x5d4>)
 80099e0:	f7f6 fd44 	bl	800046c <__aeabi_dcmple>
 80099e4:	1e03      	subs	r3, r0, #0
 80099e6:	d10a      	bne.n	80099fe <SP100_DIAG+0x3ba>
 80099e8:	4b8a      	ldr	r3, [pc, #552]	; (8009c14 <SP100_DIAG+0x5d0>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	1c18      	adds	r0, r3, #0
 80099ee:	f7f9 fa51 	bl	8002e94 <__aeabi_f2d>
 80099f2:	4a85      	ldr	r2, [pc, #532]	; (8009c08 <SP100_DIAG+0x5c4>)
 80099f4:	4b89      	ldr	r3, [pc, #548]	; (8009c1c <SP100_DIAG+0x5d8>)
 80099f6:	f7f6 fd4d 	bl	8000494 <__aeabi_dcmpge>
 80099fa:	1e03      	subs	r3, r0, #0
 80099fc:	d003      	beq.n	8009a06 <SP100_DIAG+0x3c2>
 80099fe:	4b88      	ldr	r3, [pc, #544]	; (8009c20 <SP100_DIAG+0x5dc>)
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d1db      	bne.n	80099be <SP100_DIAG+0x37a>
 8009a06:	f005 fbf7 	bl	800f1f8 <SP100_MD_MA_STP>
 8009a0a:	4b7d      	ldr	r3, [pc, #500]	; (8009c00 <SP100_DIAG+0x5bc>)
 8009a0c:	0018      	movs	r0, r3
 8009a0e:	f7ff f8e3 	bl	8008bd8 <SP100_Delay>
 8009a12:	2004      	movs	r0, #4
 8009a14:	f005 fcb2 	bl	800f37c <SP100_MD_MA_Handler>
 8009a18:	4b7d      	ldr	r3, [pc, #500]	; (8009c10 <SP100_DIAG+0x5cc>)
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	d102      	bne.n	8009a26 <SP100_DIAG+0x3e2>
 8009a20:	1dbb      	adds	r3, r7, #6
 8009a22:	2201      	movs	r2, #1
 8009a24:	701a      	strb	r2, [r3, #0]
 8009a26:	4b7b      	ldr	r3, [pc, #492]	; (8009c14 <SP100_DIAG+0x5d0>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	1c18      	adds	r0, r3, #0
 8009a2c:	f7f9 fa32 	bl	8002e94 <__aeabi_f2d>
 8009a30:	4a70      	ldr	r2, [pc, #448]	; (8009bf4 <SP100_DIAG+0x5b0>)
 8009a32:	4b7c      	ldr	r3, [pc, #496]	; (8009c24 <SP100_DIAG+0x5e0>)
 8009a34:	f7f6 fd1a 	bl	800046c <__aeabi_dcmple>
 8009a38:	1e03      	subs	r3, r0, #0
 8009a3a:	d10a      	bne.n	8009a52 <SP100_DIAG+0x40e>
 8009a3c:	4b75      	ldr	r3, [pc, #468]	; (8009c14 <SP100_DIAG+0x5d0>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	1c18      	adds	r0, r3, #0
 8009a42:	f7f9 fa27 	bl	8002e94 <__aeabi_f2d>
 8009a46:	4a70      	ldr	r2, [pc, #448]	; (8009c08 <SP100_DIAG+0x5c4>)
 8009a48:	4b77      	ldr	r3, [pc, #476]	; (8009c28 <SP100_DIAG+0x5e4>)
 8009a4a:	f7f6 fd23 	bl	8000494 <__aeabi_dcmpge>
 8009a4e:	1e03      	subs	r3, r0, #0
 8009a50:	d003      	beq.n	8009a5a <SP100_DIAG+0x416>
 8009a52:	4b73      	ldr	r3, [pc, #460]	; (8009c20 <SP100_DIAG+0x5dc>)
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	2b01      	cmp	r3, #1
 8009a58:	d1db      	bne.n	8009a12 <SP100_DIAG+0x3ce>
 8009a5a:	f005 fbcd 	bl	800f1f8 <SP100_MD_MA_STP>
 8009a5e:	4b68      	ldr	r3, [pc, #416]	; (8009c00 <SP100_DIAG+0x5bc>)
 8009a60:	0018      	movs	r0, r3
 8009a62:	f7ff f8b9 	bl	8008bd8 <SP100_Delay>
 8009a66:	2000      	movs	r0, #0
 8009a68:	f005 fc88 	bl	800f37c <SP100_MD_MA_Handler>
 8009a6c:	4b68      	ldr	r3, [pc, #416]	; (8009c10 <SP100_DIAG+0x5cc>)
 8009a6e:	781b      	ldrb	r3, [r3, #0]
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d102      	bne.n	8009a7a <SP100_DIAG+0x436>
 8009a74:	1dbb      	adds	r3, r7, #6
 8009a76:	2201      	movs	r2, #1
 8009a78:	701a      	strb	r2, [r3, #0]
 8009a7a:	4b66      	ldr	r3, [pc, #408]	; (8009c14 <SP100_DIAG+0x5d0>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	1c18      	adds	r0, r3, #0
 8009a80:	f7f9 fa08 	bl	8002e94 <__aeabi_f2d>
 8009a84:	4a59      	ldr	r2, [pc, #356]	; (8009bec <SP100_DIAG+0x5a8>)
 8009a86:	4b64      	ldr	r3, [pc, #400]	; (8009c18 <SP100_DIAG+0x5d4>)
 8009a88:	f7f6 fcf0 	bl	800046c <__aeabi_dcmple>
 8009a8c:	1e03      	subs	r3, r0, #0
 8009a8e:	d10a      	bne.n	8009aa6 <SP100_DIAG+0x462>
 8009a90:	4b60      	ldr	r3, [pc, #384]	; (8009c14 <SP100_DIAG+0x5d0>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	1c18      	adds	r0, r3, #0
 8009a96:	f7f9 f9fd 	bl	8002e94 <__aeabi_f2d>
 8009a9a:	4a5b      	ldr	r2, [pc, #364]	; (8009c08 <SP100_DIAG+0x5c4>)
 8009a9c:	4b5f      	ldr	r3, [pc, #380]	; (8009c1c <SP100_DIAG+0x5d8>)
 8009a9e:	f7f6 fcf9 	bl	8000494 <__aeabi_dcmpge>
 8009aa2:	1e03      	subs	r3, r0, #0
 8009aa4:	d003      	beq.n	8009aae <SP100_DIAG+0x46a>
 8009aa6:	4b5e      	ldr	r3, [pc, #376]	; (8009c20 <SP100_DIAG+0x5dc>)
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d1db      	bne.n	8009a66 <SP100_DIAG+0x422>
 8009aae:	f005 fba3 	bl	800f1f8 <SP100_MD_MA_STP>
 8009ab2:	4b53      	ldr	r3, [pc, #332]	; (8009c00 <SP100_DIAG+0x5bc>)
 8009ab4:	0018      	movs	r0, r3
 8009ab6:	f7ff f88f 	bl	8008bd8 <SP100_Delay>
 8009aba:	4b49      	ldr	r3, [pc, #292]	; (8009be0 <SP100_DIAG+0x59c>)
 8009abc:	2200      	movs	r2, #0
 8009abe:	701a      	strb	r2, [r3, #0]
 8009ac0:	46c0      	nop			; (mov r8, r8)
 8009ac2:	e0ba      	b.n	8009c3a <SP100_DIAG+0x5f6>
 8009ac4:	4b59      	ldr	r3, [pc, #356]	; (8009c2c <SP100_DIAG+0x5e8>)
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	2b05      	cmp	r3, #5
 8009aca:	d900      	bls.n	8009ace <SP100_DIAG+0x48a>
 8009acc:	e0b5      	b.n	8009c3a <SP100_DIAG+0x5f6>
 8009ace:	009a      	lsls	r2, r3, #2
 8009ad0:	4b57      	ldr	r3, [pc, #348]	; (8009c30 <SP100_DIAG+0x5ec>)
 8009ad2:	18d3      	adds	r3, r2, r3
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	469f      	mov	pc, r3
 8009ad8:	4b48      	ldr	r3, [pc, #288]	; (8009bfc <SP100_DIAG+0x5b8>)
 8009ada:	781b      	ldrb	r3, [r3, #0]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d111      	bne.n	8009b04 <SP100_DIAG+0x4c0>
 8009ae0:	4b4f      	ldr	r3, [pc, #316]	; (8009c20 <SP100_DIAG+0x5dc>)
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d10d      	bne.n	8009b04 <SP100_DIAG+0x4c0>
 8009ae8:	1dfb      	adds	r3, r7, #7
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d109      	bne.n	8009b04 <SP100_DIAG+0x4c0>
 8009af0:	1dbb      	adds	r3, r7, #6
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d105      	bne.n	8009b04 <SP100_DIAG+0x4c0>
 8009af8:	4b4c      	ldr	r3, [pc, #304]	; (8009c2c <SP100_DIAG+0x5e8>)
 8009afa:	781b      	ldrb	r3, [r3, #0]
 8009afc:	0018      	movs	r0, r3
 8009afe:	f005 f9b9 	bl	800ee74 <SP100_LCD_DIAG_Actr_Handler>
 8009b02:	e00c      	b.n	8009b1e <SP100_DIAG+0x4da>
 8009b04:	4b4b      	ldr	r3, [pc, #300]	; (8009c34 <SP100_DIAG+0x5f0>)
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d105      	bne.n	8009b18 <SP100_DIAG+0x4d4>
 8009b0c:	4b47      	ldr	r3, [pc, #284]	; (8009c2c <SP100_DIAG+0x5e8>)
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	0018      	movs	r0, r3
 8009b12:	f005 f9af 	bl	800ee74 <SP100_LCD_DIAG_Actr_Handler>
 8009b16:	e090      	b.n	8009c3a <SP100_DIAG+0x5f6>
 8009b18:	2005      	movs	r0, #5
 8009b1a:	f005 f9ab 	bl	800ee74 <SP100_LCD_DIAG_Actr_Handler>
 8009b1e:	e08c      	b.n	8009c3a <SP100_DIAG+0x5f6>
 8009b20:	4b36      	ldr	r3, [pc, #216]	; (8009bfc <SP100_DIAG+0x5b8>)
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d105      	bne.n	8009b34 <SP100_DIAG+0x4f0>
 8009b28:	4b40      	ldr	r3, [pc, #256]	; (8009c2c <SP100_DIAG+0x5e8>)
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	0018      	movs	r0, r3
 8009b2e:	f005 f9a1 	bl	800ee74 <SP100_LCD_DIAG_Actr_Handler>
 8009b32:	e082      	b.n	8009c3a <SP100_DIAG+0x5f6>
 8009b34:	4b3f      	ldr	r3, [pc, #252]	; (8009c34 <SP100_DIAG+0x5f0>)
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d105      	bne.n	8009b48 <SP100_DIAG+0x504>
 8009b3c:	4b3b      	ldr	r3, [pc, #236]	; (8009c2c <SP100_DIAG+0x5e8>)
 8009b3e:	781b      	ldrb	r3, [r3, #0]
 8009b40:	0018      	movs	r0, r3
 8009b42:	f005 f997 	bl	800ee74 <SP100_LCD_DIAG_Actr_Handler>
 8009b46:	e078      	b.n	8009c3a <SP100_DIAG+0x5f6>
 8009b48:	2005      	movs	r0, #5
 8009b4a:	f005 f993 	bl	800ee74 <SP100_LCD_DIAG_Actr_Handler>
 8009b4e:	e074      	b.n	8009c3a <SP100_DIAG+0x5f6>
 8009b50:	4b33      	ldr	r3, [pc, #204]	; (8009c20 <SP100_DIAG+0x5dc>)
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d105      	bne.n	8009b64 <SP100_DIAG+0x520>
 8009b58:	4b34      	ldr	r3, [pc, #208]	; (8009c2c <SP100_DIAG+0x5e8>)
 8009b5a:	781b      	ldrb	r3, [r3, #0]
 8009b5c:	0018      	movs	r0, r3
 8009b5e:	f005 f989 	bl	800ee74 <SP100_LCD_DIAG_Actr_Handler>
 8009b62:	e06a      	b.n	8009c3a <SP100_DIAG+0x5f6>
 8009b64:	4b33      	ldr	r3, [pc, #204]	; (8009c34 <SP100_DIAG+0x5f0>)
 8009b66:	781b      	ldrb	r3, [r3, #0]
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d105      	bne.n	8009b78 <SP100_DIAG+0x534>
 8009b6c:	4b2f      	ldr	r3, [pc, #188]	; (8009c2c <SP100_DIAG+0x5e8>)
 8009b6e:	781b      	ldrb	r3, [r3, #0]
 8009b70:	0018      	movs	r0, r3
 8009b72:	f005 f97f 	bl	800ee74 <SP100_LCD_DIAG_Actr_Handler>
 8009b76:	e060      	b.n	8009c3a <SP100_DIAG+0x5f6>
 8009b78:	2005      	movs	r0, #5
 8009b7a:	f005 f97b 	bl	800ee74 <SP100_LCD_DIAG_Actr_Handler>
 8009b7e:	e05c      	b.n	8009c3a <SP100_DIAG+0x5f6>
 8009b80:	1dfb      	adds	r3, r7, #7
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d105      	bne.n	8009b94 <SP100_DIAG+0x550>
 8009b88:	4b28      	ldr	r3, [pc, #160]	; (8009c2c <SP100_DIAG+0x5e8>)
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	0018      	movs	r0, r3
 8009b8e:	f005 f971 	bl	800ee74 <SP100_LCD_DIAG_Actr_Handler>
 8009b92:	e052      	b.n	8009c3a <SP100_DIAG+0x5f6>
 8009b94:	4b27      	ldr	r3, [pc, #156]	; (8009c34 <SP100_DIAG+0x5f0>)
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d105      	bne.n	8009ba8 <SP100_DIAG+0x564>
 8009b9c:	4b23      	ldr	r3, [pc, #140]	; (8009c2c <SP100_DIAG+0x5e8>)
 8009b9e:	781b      	ldrb	r3, [r3, #0]
 8009ba0:	0018      	movs	r0, r3
 8009ba2:	f005 f967 	bl	800ee74 <SP100_LCD_DIAG_Actr_Handler>
 8009ba6:	e048      	b.n	8009c3a <SP100_DIAG+0x5f6>
 8009ba8:	2005      	movs	r0, #5
 8009baa:	f005 f963 	bl	800ee74 <SP100_LCD_DIAG_Actr_Handler>
 8009bae:	e044      	b.n	8009c3a <SP100_DIAG+0x5f6>
 8009bb0:	1dbb      	adds	r3, r7, #6
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d105      	bne.n	8009bc4 <SP100_DIAG+0x580>
 8009bb8:	4b1c      	ldr	r3, [pc, #112]	; (8009c2c <SP100_DIAG+0x5e8>)
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	0018      	movs	r0, r3
 8009bbe:	f005 f959 	bl	800ee74 <SP100_LCD_DIAG_Actr_Handler>
 8009bc2:	e03a      	b.n	8009c3a <SP100_DIAG+0x5f6>
 8009bc4:	4b1b      	ldr	r3, [pc, #108]	; (8009c34 <SP100_DIAG+0x5f0>)
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	2b01      	cmp	r3, #1
 8009bca:	d105      	bne.n	8009bd8 <SP100_DIAG+0x594>
 8009bcc:	4b17      	ldr	r3, [pc, #92]	; (8009c2c <SP100_DIAG+0x5e8>)
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	0018      	movs	r0, r3
 8009bd2:	f005 f94f 	bl	800ee74 <SP100_LCD_DIAG_Actr_Handler>
 8009bd6:	e030      	b.n	8009c3a <SP100_DIAG+0x5f6>
 8009bd8:	2005      	movs	r0, #5
 8009bda:	f005 f94b 	bl	800ee74 <SP100_LCD_DIAG_Actr_Handler>
 8009bde:	e02c      	b.n	8009c3a <SP100_DIAG+0x5f6>
 8009be0:	20000586 	.word	0x20000586
 8009be4:	2000057e 	.word	0x2000057e
 8009be8:	20000598 	.word	0x20000598
 8009bec:	cccccccd 	.word	0xcccccccd
 8009bf0:	3fdccccc 	.word	0x3fdccccc
 8009bf4:	9999999a 	.word	0x9999999a
 8009bf8:	3fe19999 	.word	0x3fe19999
 8009bfc:	2000057c 	.word	0x2000057c
 8009c00:	000f4240 	.word	0x000f4240
 8009c04:	4011cccc 	.word	0x4011cccc
 8009c08:	33333333 	.word	0x33333333
 8009c0c:	40123333 	.word	0x40123333
 8009c10:	2000057f 	.word	0x2000057f
 8009c14:	2000059c 	.word	0x2000059c
 8009c18:	4012cccc 	.word	0x4012cccc
 8009c1c:	40133333 	.word	0x40133333
 8009c20:	2000057d 	.word	0x2000057d
 8009c24:	3fc99999 	.word	0x3fc99999
 8009c28:	3fd33333 	.word	0x3fd33333
 8009c2c:	20000585 	.word	0x20000585
 8009c30:	08014eb0 	.word	0x08014eb0
 8009c34:	20000581 	.word	0x20000581
 8009c38:	46c0      	nop			; (mov r8, r8)
 8009c3a:	4b0f      	ldr	r3, [pc, #60]	; (8009c78 <SP100_DIAG+0x634>)
 8009c3c:	781b      	ldrb	r3, [r3, #0]
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	d100      	bne.n	8009c44 <SP100_DIAG+0x600>
 8009c42:	e73f      	b.n	8009ac4 <SP100_DIAG+0x480>
 8009c44:	4b0c      	ldr	r3, [pc, #48]	; (8009c78 <SP100_DIAG+0x634>)
 8009c46:	781b      	ldrb	r3, [r3, #0]
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d100      	bne.n	8009c4e <SP100_DIAG+0x60a>
 8009c4c:	e634      	b.n	80098b8 <SP100_DIAG+0x274>
 8009c4e:	4b0b      	ldr	r3, [pc, #44]	; (8009c7c <SP100_DIAG+0x638>)
 8009c50:	781b      	ldrb	r3, [r3, #0]
 8009c52:	2b04      	cmp	r3, #4
 8009c54:	d100      	bne.n	8009c58 <SP100_DIAG+0x614>
 8009c56:	e551      	b.n	80096fc <SP100_DIAG+0xb8>
 8009c58:	4b07      	ldr	r3, [pc, #28]	; (8009c78 <SP100_DIAG+0x634>)
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	701a      	strb	r2, [r3, #0]
 8009c5e:	4b08      	ldr	r3, [pc, #32]	; (8009c80 <SP100_DIAG+0x63c>)
 8009c60:	2200      	movs	r2, #0
 8009c62:	701a      	strb	r2, [r3, #0]
 8009c64:	4b07      	ldr	r3, [pc, #28]	; (8009c84 <SP100_DIAG+0x640>)
 8009c66:	2200      	movs	r2, #0
 8009c68:	701a      	strb	r2, [r3, #0]
 8009c6a:	4b07      	ldr	r3, [pc, #28]	; (8009c88 <SP100_DIAG+0x644>)
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	701a      	strb	r2, [r3, #0]
 8009c70:	46c0      	nop			; (mov r8, r8)
 8009c72:	46bd      	mov	sp, r7
 8009c74:	b002      	add	sp, #8
 8009c76:	bd80      	pop	{r7, pc}
 8009c78:	20000583 	.word	0x20000583
 8009c7c:	20000570 	.word	0x20000570
 8009c80:	20000584 	.word	0x20000584
 8009c84:	20000585 	.word	0x20000585
 8009c88:	20000586 	.word	0x20000586

08009c8c <SP100_ISI_Ctrl_No_Hysteresis>:
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b088      	sub	sp, #32
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	4bc5      	ldr	r3, [pc, #788]	; (8009fa8 <SP100_ISI_Ctrl_No_Hysteresis+0x31c>)
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	4bc5      	ldr	r3, [pc, #788]	; (8009fac <SP100_ISI_Ctrl_No_Hysteresis+0x320>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	1c19      	adds	r1, r3, #0
 8009c9c:	1c10      	adds	r0, r2, #0
 8009c9e:	f7f7 f8e1 	bl	8000e64 <__aeabi_fsub>
 8009ca2:	1c03      	adds	r3, r0, #0
 8009ca4:	2100      	movs	r1, #0
 8009ca6:	1c18      	adds	r0, r3, #0
 8009ca8:	f7f6 fc2e 	bl	8000508 <__aeabi_fcmpge>
 8009cac:	1e03      	subs	r3, r0, #0
 8009cae:	d003      	beq.n	8009cb8 <SP100_ISI_Ctrl_No_Hysteresis+0x2c>
 8009cb0:	4bbf      	ldr	r3, [pc, #764]	; (8009fb0 <SP100_ISI_Ctrl_No_Hysteresis+0x324>)
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	601a      	str	r2, [r3, #0]
 8009cb6:	e012      	b.n	8009cde <SP100_ISI_Ctrl_No_Hysteresis+0x52>
 8009cb8:	4bbb      	ldr	r3, [pc, #748]	; (8009fa8 <SP100_ISI_Ctrl_No_Hysteresis+0x31c>)
 8009cba:	681a      	ldr	r2, [r3, #0]
 8009cbc:	4bbb      	ldr	r3, [pc, #748]	; (8009fac <SP100_ISI_Ctrl_No_Hysteresis+0x320>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	1c19      	adds	r1, r3, #0
 8009cc2:	1c10      	adds	r0, r2, #0
 8009cc4:	f7f7 f8ce 	bl	8000e64 <__aeabi_fsub>
 8009cc8:	1c03      	adds	r3, r0, #0
 8009cca:	2100      	movs	r1, #0
 8009ccc:	1c18      	adds	r0, r3, #0
 8009cce:	f7f6 fbfd 	bl	80004cc <__aeabi_fcmplt>
 8009cd2:	1e03      	subs	r3, r0, #0
 8009cd4:	d003      	beq.n	8009cde <SP100_ISI_Ctrl_No_Hysteresis+0x52>
 8009cd6:	4bb6      	ldr	r3, [pc, #728]	; (8009fb0 <SP100_ISI_Ctrl_No_Hysteresis+0x324>)
 8009cd8:	2201      	movs	r2, #1
 8009cda:	4252      	negs	r2, r2
 8009cdc:	601a      	str	r2, [r3, #0]
 8009cde:	4bb5      	ldr	r3, [pc, #724]	; (8009fb4 <SP100_ISI_Ctrl_No_Hysteresis+0x328>)
 8009ce0:	781b      	ldrb	r3, [r3, #0]
 8009ce2:	2b02      	cmp	r3, #2
 8009ce4:	d100      	bne.n	8009ce8 <SP100_ISI_Ctrl_No_Hysteresis+0x5c>
 8009ce6:	e09a      	b.n	8009e1e <SP100_ISI_Ctrl_No_Hysteresis+0x192>
 8009ce8:	4baf      	ldr	r3, [pc, #700]	; (8009fa8 <SP100_ISI_Ctrl_No_Hysteresis+0x31c>)
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	4baf      	ldr	r3, [pc, #700]	; (8009fac <SP100_ISI_Ctrl_No_Hysteresis+0x320>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	1c19      	adds	r1, r3, #0
 8009cf2:	1c10      	adds	r0, r2, #0
 8009cf4:	f7f7 f8b6 	bl	8000e64 <__aeabi_fsub>
 8009cf8:	1c03      	adds	r3, r0, #0
 8009cfa:	2100      	movs	r1, #0
 8009cfc:	1c18      	adds	r0, r3, #0
 8009cfe:	f7f6 fc03 	bl	8000508 <__aeabi_fcmpge>
 8009d02:	1e03      	subs	r3, r0, #0
 8009d04:	d049      	beq.n	8009d9a <SP100_ISI_Ctrl_No_Hysteresis+0x10e>
 8009d06:	4ba8      	ldr	r3, [pc, #672]	; (8009fa8 <SP100_ISI_Ctrl_No_Hysteresis+0x31c>)
 8009d08:	681a      	ldr	r2, [r3, #0]
 8009d0a:	4bab      	ldr	r3, [pc, #684]	; (8009fb8 <SP100_ISI_Ctrl_No_Hysteresis+0x32c>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	1c19      	adds	r1, r3, #0
 8009d10:	1c10      	adds	r0, r2, #0
 8009d12:	f7f7 f8a7 	bl	8000e64 <__aeabi_fsub>
 8009d16:	1c03      	adds	r3, r0, #0
 8009d18:	21fe      	movs	r1, #254	; 0xfe
 8009d1a:	0589      	lsls	r1, r1, #22
 8009d1c:	1c18      	adds	r0, r3, #0
 8009d1e:	f7f6 fbd5 	bl	80004cc <__aeabi_fcmplt>
 8009d22:	1e03      	subs	r3, r0, #0
 8009d24:	d003      	beq.n	8009d2e <SP100_ISI_Ctrl_No_Hysteresis+0xa2>
 8009d26:	4ba5      	ldr	r3, [pc, #660]	; (8009fbc <SP100_ISI_Ctrl_No_Hysteresis+0x330>)
 8009d28:	2200      	movs	r2, #0
 8009d2a:	701a      	strb	r2, [r3, #0]
 8009d2c:	e06b      	b.n	8009e06 <SP100_ISI_Ctrl_No_Hysteresis+0x17a>
 8009d2e:	4b9e      	ldr	r3, [pc, #632]	; (8009fa8 <SP100_ISI_Ctrl_No_Hysteresis+0x31c>)
 8009d30:	681a      	ldr	r2, [r3, #0]
 8009d32:	4ba1      	ldr	r3, [pc, #644]	; (8009fb8 <SP100_ISI_Ctrl_No_Hysteresis+0x32c>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	1c19      	adds	r1, r3, #0
 8009d38:	1c10      	adds	r0, r2, #0
 8009d3a:	f7f7 f893 	bl	8000e64 <__aeabi_fsub>
 8009d3e:	1c03      	adds	r3, r0, #0
 8009d40:	21fe      	movs	r1, #254	; 0xfe
 8009d42:	0589      	lsls	r1, r1, #22
 8009d44:	1c18      	adds	r0, r3, #0
 8009d46:	f7f6 fbdf 	bl	8000508 <__aeabi_fcmpge>
 8009d4a:	1e03      	subs	r3, r0, #0
 8009d4c:	d012      	beq.n	8009d74 <SP100_ISI_Ctrl_No_Hysteresis+0xe8>
 8009d4e:	4b96      	ldr	r3, [pc, #600]	; (8009fa8 <SP100_ISI_Ctrl_No_Hysteresis+0x31c>)
 8009d50:	681a      	ldr	r2, [r3, #0]
 8009d52:	4b99      	ldr	r3, [pc, #612]	; (8009fb8 <SP100_ISI_Ctrl_No_Hysteresis+0x32c>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	1c19      	adds	r1, r3, #0
 8009d58:	1c10      	adds	r0, r2, #0
 8009d5a:	f7f7 f883 	bl	8000e64 <__aeabi_fsub>
 8009d5e:	1c03      	adds	r3, r0, #0
 8009d60:	4997      	ldr	r1, [pc, #604]	; (8009fc0 <SP100_ISI_Ctrl_No_Hysteresis+0x334>)
 8009d62:	1c18      	adds	r0, r3, #0
 8009d64:	f7f6 fbb2 	bl	80004cc <__aeabi_fcmplt>
 8009d68:	1e03      	subs	r3, r0, #0
 8009d6a:	d003      	beq.n	8009d74 <SP100_ISI_Ctrl_No_Hysteresis+0xe8>
 8009d6c:	4b93      	ldr	r3, [pc, #588]	; (8009fbc <SP100_ISI_Ctrl_No_Hysteresis+0x330>)
 8009d6e:	2201      	movs	r2, #1
 8009d70:	701a      	strb	r2, [r3, #0]
 8009d72:	e048      	b.n	8009e06 <SP100_ISI_Ctrl_No_Hysteresis+0x17a>
 8009d74:	4b8c      	ldr	r3, [pc, #560]	; (8009fa8 <SP100_ISI_Ctrl_No_Hysteresis+0x31c>)
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	4b8f      	ldr	r3, [pc, #572]	; (8009fb8 <SP100_ISI_Ctrl_No_Hysteresis+0x32c>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	1c19      	adds	r1, r3, #0
 8009d7e:	1c10      	adds	r0, r2, #0
 8009d80:	f7f7 f870 	bl	8000e64 <__aeabi_fsub>
 8009d84:	1c03      	adds	r3, r0, #0
 8009d86:	498e      	ldr	r1, [pc, #568]	; (8009fc0 <SP100_ISI_Ctrl_No_Hysteresis+0x334>)
 8009d88:	1c18      	adds	r0, r3, #0
 8009d8a:	f7f6 fbbd 	bl	8000508 <__aeabi_fcmpge>
 8009d8e:	1e03      	subs	r3, r0, #0
 8009d90:	d039      	beq.n	8009e06 <SP100_ISI_Ctrl_No_Hysteresis+0x17a>
 8009d92:	4b8a      	ldr	r3, [pc, #552]	; (8009fbc <SP100_ISI_Ctrl_No_Hysteresis+0x330>)
 8009d94:	2200      	movs	r2, #0
 8009d96:	701a      	strb	r2, [r3, #0]
 8009d98:	e035      	b.n	8009e06 <SP100_ISI_Ctrl_No_Hysteresis+0x17a>
 8009d9a:	4b83      	ldr	r3, [pc, #524]	; (8009fa8 <SP100_ISI_Ctrl_No_Hysteresis+0x31c>)
 8009d9c:	681a      	ldr	r2, [r3, #0]
 8009d9e:	4b83      	ldr	r3, [pc, #524]	; (8009fac <SP100_ISI_Ctrl_No_Hysteresis+0x320>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	1c19      	adds	r1, r3, #0
 8009da4:	1c10      	adds	r0, r2, #0
 8009da6:	f7f7 f85d 	bl	8000e64 <__aeabi_fsub>
 8009daa:	1c03      	adds	r3, r0, #0
 8009dac:	2100      	movs	r1, #0
 8009dae:	1c18      	adds	r0, r3, #0
 8009db0:	f7f6 fb8c 	bl	80004cc <__aeabi_fcmplt>
 8009db4:	1e03      	subs	r3, r0, #0
 8009db6:	d026      	beq.n	8009e06 <SP100_ISI_Ctrl_No_Hysteresis+0x17a>
 8009db8:	4b7b      	ldr	r3, [pc, #492]	; (8009fa8 <SP100_ISI_Ctrl_No_Hysteresis+0x31c>)
 8009dba:	681a      	ldr	r2, [r3, #0]
 8009dbc:	4b7e      	ldr	r3, [pc, #504]	; (8009fb8 <SP100_ISI_Ctrl_No_Hysteresis+0x32c>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	1c19      	adds	r1, r3, #0
 8009dc2:	1c10      	adds	r0, r2, #0
 8009dc4:	f7f7 f84e 	bl	8000e64 <__aeabi_fsub>
 8009dc8:	1c03      	adds	r3, r0, #0
 8009dca:	21fe      	movs	r1, #254	; 0xfe
 8009dcc:	0589      	lsls	r1, r1, #22
 8009dce:	1c18      	adds	r0, r3, #0
 8009dd0:	f7f6 fb7c 	bl	80004cc <__aeabi_fcmplt>
 8009dd4:	1e03      	subs	r3, r0, #0
 8009dd6:	d003      	beq.n	8009de0 <SP100_ISI_Ctrl_No_Hysteresis+0x154>
 8009dd8:	4b78      	ldr	r3, [pc, #480]	; (8009fbc <SP100_ISI_Ctrl_No_Hysteresis+0x330>)
 8009dda:	2201      	movs	r2, #1
 8009ddc:	701a      	strb	r2, [r3, #0]
 8009dde:	e012      	b.n	8009e06 <SP100_ISI_Ctrl_No_Hysteresis+0x17a>
 8009de0:	4b71      	ldr	r3, [pc, #452]	; (8009fa8 <SP100_ISI_Ctrl_No_Hysteresis+0x31c>)
 8009de2:	681a      	ldr	r2, [r3, #0]
 8009de4:	4b74      	ldr	r3, [pc, #464]	; (8009fb8 <SP100_ISI_Ctrl_No_Hysteresis+0x32c>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	1c19      	adds	r1, r3, #0
 8009dea:	1c10      	adds	r0, r2, #0
 8009dec:	f7f7 f83a 	bl	8000e64 <__aeabi_fsub>
 8009df0:	1c03      	adds	r3, r0, #0
 8009df2:	21fe      	movs	r1, #254	; 0xfe
 8009df4:	0589      	lsls	r1, r1, #22
 8009df6:	1c18      	adds	r0, r3, #0
 8009df8:	f7f6 fb86 	bl	8000508 <__aeabi_fcmpge>
 8009dfc:	1e03      	subs	r3, r0, #0
 8009dfe:	d002      	beq.n	8009e06 <SP100_ISI_Ctrl_No_Hysteresis+0x17a>
 8009e00:	4b6e      	ldr	r3, [pc, #440]	; (8009fbc <SP100_ISI_Ctrl_No_Hysteresis+0x330>)
 8009e02:	2200      	movs	r2, #0
 8009e04:	701a      	strb	r2, [r3, #0]
 8009e06:	4b6f      	ldr	r3, [pc, #444]	; (8009fc4 <SP100_ISI_Ctrl_No_Hysteresis+0x338>)
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	2b01      	cmp	r3, #1
 8009e0c:	d107      	bne.n	8009e1e <SP100_ISI_Ctrl_No_Hysteresis+0x192>
 8009e0e:	4b69      	ldr	r3, [pc, #420]	; (8009fb4 <SP100_ISI_Ctrl_No_Hysteresis+0x328>)
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	2b02      	cmp	r3, #2
 8009e14:	d003      	beq.n	8009e1e <SP100_ISI_Ctrl_No_Hysteresis+0x192>
 8009e16:	4b69      	ldr	r3, [pc, #420]	; (8009fbc <SP100_ISI_Ctrl_No_Hysteresis+0x330>)
 8009e18:	781a      	ldrb	r2, [r3, #0]
 8009e1a:	4b6b      	ldr	r3, [pc, #428]	; (8009fc8 <SP100_ISI_Ctrl_No_Hysteresis+0x33c>)
 8009e1c:	701a      	strb	r2, [r3, #0]
 8009e1e:	4b65      	ldr	r3, [pc, #404]	; (8009fb4 <SP100_ISI_Ctrl_No_Hysteresis+0x328>)
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	2b02      	cmp	r3, #2
 8009e24:	d100      	bne.n	8009e28 <SP100_ISI_Ctrl_No_Hysteresis+0x19c>
 8009e26:	e119      	b.n	800a05c <SP100_ISI_Ctrl_No_Hysteresis+0x3d0>
 8009e28:	4b5f      	ldr	r3, [pc, #380]	; (8009fa8 <SP100_ISI_Ctrl_No_Hysteresis+0x31c>)
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	4b5f      	ldr	r3, [pc, #380]	; (8009fac <SP100_ISI_Ctrl_No_Hysteresis+0x320>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	1c19      	adds	r1, r3, #0
 8009e32:	1c10      	adds	r0, r2, #0
 8009e34:	f7f7 f816 	bl	8000e64 <__aeabi_fsub>
 8009e38:	1c03      	adds	r3, r0, #0
 8009e3a:	2100      	movs	r1, #0
 8009e3c:	1c18      	adds	r0, r3, #0
 8009e3e:	f7f6 fb63 	bl	8000508 <__aeabi_fcmpge>
 8009e42:	1e03      	subs	r3, r0, #0
 8009e44:	d100      	bne.n	8009e48 <SP100_ISI_Ctrl_No_Hysteresis+0x1bc>
 8009e46:	e08c      	b.n	8009f62 <SP100_ISI_Ctrl_No_Hysteresis+0x2d6>
 8009e48:	4b57      	ldr	r3, [pc, #348]	; (8009fa8 <SP100_ISI_Ctrl_No_Hysteresis+0x31c>)
 8009e4a:	681a      	ldr	r2, [r3, #0]
 8009e4c:	4b5a      	ldr	r3, [pc, #360]	; (8009fb8 <SP100_ISI_Ctrl_No_Hysteresis+0x32c>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	1c19      	adds	r1, r3, #0
 8009e52:	1c10      	adds	r0, r2, #0
 8009e54:	f7f7 f806 	bl	8000e64 <__aeabi_fsub>
 8009e58:	1c03      	adds	r3, r0, #0
 8009e5a:	495c      	ldr	r1, [pc, #368]	; (8009fcc <SP100_ISI_Ctrl_No_Hysteresis+0x340>)
 8009e5c:	1c18      	adds	r0, r3, #0
 8009e5e:	f7f6 fb35 	bl	80004cc <__aeabi_fcmplt>
 8009e62:	1e03      	subs	r3, r0, #0
 8009e64:	d003      	beq.n	8009e6e <SP100_ISI_Ctrl_No_Hysteresis+0x1e2>
 8009e66:	4b5a      	ldr	r3, [pc, #360]	; (8009fd0 <SP100_ISI_Ctrl_No_Hysteresis+0x344>)
 8009e68:	2203      	movs	r2, #3
 8009e6a:	701a      	strb	r2, [r3, #0]
 8009e6c:	e0ea      	b.n	800a044 <SP100_ISI_Ctrl_No_Hysteresis+0x3b8>
 8009e6e:	4b4e      	ldr	r3, [pc, #312]	; (8009fa8 <SP100_ISI_Ctrl_No_Hysteresis+0x31c>)
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	4b51      	ldr	r3, [pc, #324]	; (8009fb8 <SP100_ISI_Ctrl_No_Hysteresis+0x32c>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	1c19      	adds	r1, r3, #0
 8009e78:	1c10      	adds	r0, r2, #0
 8009e7a:	f7f6 fff3 	bl	8000e64 <__aeabi_fsub>
 8009e7e:	1c03      	adds	r3, r0, #0
 8009e80:	4952      	ldr	r1, [pc, #328]	; (8009fcc <SP100_ISI_Ctrl_No_Hysteresis+0x340>)
 8009e82:	1c18      	adds	r0, r3, #0
 8009e84:	f7f6 fb40 	bl	8000508 <__aeabi_fcmpge>
 8009e88:	1e03      	subs	r3, r0, #0
 8009e8a:	d012      	beq.n	8009eb2 <SP100_ISI_Ctrl_No_Hysteresis+0x226>
 8009e8c:	4b46      	ldr	r3, [pc, #280]	; (8009fa8 <SP100_ISI_Ctrl_No_Hysteresis+0x31c>)
 8009e8e:	681a      	ldr	r2, [r3, #0]
 8009e90:	4b49      	ldr	r3, [pc, #292]	; (8009fb8 <SP100_ISI_Ctrl_No_Hysteresis+0x32c>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	1c19      	adds	r1, r3, #0
 8009e96:	1c10      	adds	r0, r2, #0
 8009e98:	f7f6 ffe4 	bl	8000e64 <__aeabi_fsub>
 8009e9c:	1c03      	adds	r3, r0, #0
 8009e9e:	494d      	ldr	r1, [pc, #308]	; (8009fd4 <SP100_ISI_Ctrl_No_Hysteresis+0x348>)
 8009ea0:	1c18      	adds	r0, r3, #0
 8009ea2:	f7f6 fb13 	bl	80004cc <__aeabi_fcmplt>
 8009ea6:	1e03      	subs	r3, r0, #0
 8009ea8:	d003      	beq.n	8009eb2 <SP100_ISI_Ctrl_No_Hysteresis+0x226>
 8009eaa:	4b49      	ldr	r3, [pc, #292]	; (8009fd0 <SP100_ISI_Ctrl_No_Hysteresis+0x344>)
 8009eac:	2201      	movs	r2, #1
 8009eae:	701a      	strb	r2, [r3, #0]
 8009eb0:	e0c8      	b.n	800a044 <SP100_ISI_Ctrl_No_Hysteresis+0x3b8>
 8009eb2:	4b3d      	ldr	r3, [pc, #244]	; (8009fa8 <SP100_ISI_Ctrl_No_Hysteresis+0x31c>)
 8009eb4:	681a      	ldr	r2, [r3, #0]
 8009eb6:	4b40      	ldr	r3, [pc, #256]	; (8009fb8 <SP100_ISI_Ctrl_No_Hysteresis+0x32c>)
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	1c19      	adds	r1, r3, #0
 8009ebc:	1c10      	adds	r0, r2, #0
 8009ebe:	f7f6 ffd1 	bl	8000e64 <__aeabi_fsub>
 8009ec2:	1c03      	adds	r3, r0, #0
 8009ec4:	4943      	ldr	r1, [pc, #268]	; (8009fd4 <SP100_ISI_Ctrl_No_Hysteresis+0x348>)
 8009ec6:	1c18      	adds	r0, r3, #0
 8009ec8:	f7f6 fb1e 	bl	8000508 <__aeabi_fcmpge>
 8009ecc:	1e03      	subs	r3, r0, #0
 8009ece:	d012      	beq.n	8009ef6 <SP100_ISI_Ctrl_No_Hysteresis+0x26a>
 8009ed0:	4b35      	ldr	r3, [pc, #212]	; (8009fa8 <SP100_ISI_Ctrl_No_Hysteresis+0x31c>)
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	4b38      	ldr	r3, [pc, #224]	; (8009fb8 <SP100_ISI_Ctrl_No_Hysteresis+0x32c>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	1c19      	adds	r1, r3, #0
 8009eda:	1c10      	adds	r0, r2, #0
 8009edc:	f7f6 ffc2 	bl	8000e64 <__aeabi_fsub>
 8009ee0:	1c03      	adds	r3, r0, #0
 8009ee2:	493d      	ldr	r1, [pc, #244]	; (8009fd8 <SP100_ISI_Ctrl_No_Hysteresis+0x34c>)
 8009ee4:	1c18      	adds	r0, r3, #0
 8009ee6:	f7f6 faf1 	bl	80004cc <__aeabi_fcmplt>
 8009eea:	1e03      	subs	r3, r0, #0
 8009eec:	d003      	beq.n	8009ef6 <SP100_ISI_Ctrl_No_Hysteresis+0x26a>
 8009eee:	4b38      	ldr	r3, [pc, #224]	; (8009fd0 <SP100_ISI_Ctrl_No_Hysteresis+0x344>)
 8009ef0:	2202      	movs	r2, #2
 8009ef2:	701a      	strb	r2, [r3, #0]
 8009ef4:	e0a6      	b.n	800a044 <SP100_ISI_Ctrl_No_Hysteresis+0x3b8>
 8009ef6:	4b2c      	ldr	r3, [pc, #176]	; (8009fa8 <SP100_ISI_Ctrl_No_Hysteresis+0x31c>)
 8009ef8:	681a      	ldr	r2, [r3, #0]
 8009efa:	4b2f      	ldr	r3, [pc, #188]	; (8009fb8 <SP100_ISI_Ctrl_No_Hysteresis+0x32c>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	1c19      	adds	r1, r3, #0
 8009f00:	1c10      	adds	r0, r2, #0
 8009f02:	f7f6 ffaf 	bl	8000e64 <__aeabi_fsub>
 8009f06:	1c03      	adds	r3, r0, #0
 8009f08:	4933      	ldr	r1, [pc, #204]	; (8009fd8 <SP100_ISI_Ctrl_No_Hysteresis+0x34c>)
 8009f0a:	1c18      	adds	r0, r3, #0
 8009f0c:	f7f6 fafc 	bl	8000508 <__aeabi_fcmpge>
 8009f10:	1e03      	subs	r3, r0, #0
 8009f12:	d012      	beq.n	8009f3a <SP100_ISI_Ctrl_No_Hysteresis+0x2ae>
 8009f14:	4b24      	ldr	r3, [pc, #144]	; (8009fa8 <SP100_ISI_Ctrl_No_Hysteresis+0x31c>)
 8009f16:	681a      	ldr	r2, [r3, #0]
 8009f18:	4b27      	ldr	r3, [pc, #156]	; (8009fb8 <SP100_ISI_Ctrl_No_Hysteresis+0x32c>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	1c19      	adds	r1, r3, #0
 8009f1e:	1c10      	adds	r0, r2, #0
 8009f20:	f7f6 ffa0 	bl	8000e64 <__aeabi_fsub>
 8009f24:	1c03      	adds	r3, r0, #0
 8009f26:	4926      	ldr	r1, [pc, #152]	; (8009fc0 <SP100_ISI_Ctrl_No_Hysteresis+0x334>)
 8009f28:	1c18      	adds	r0, r3, #0
 8009f2a:	f7f6 facf 	bl	80004cc <__aeabi_fcmplt>
 8009f2e:	1e03      	subs	r3, r0, #0
 8009f30:	d003      	beq.n	8009f3a <SP100_ISI_Ctrl_No_Hysteresis+0x2ae>
 8009f32:	4b27      	ldr	r3, [pc, #156]	; (8009fd0 <SP100_ISI_Ctrl_No_Hysteresis+0x344>)
 8009f34:	2201      	movs	r2, #1
 8009f36:	701a      	strb	r2, [r3, #0]
 8009f38:	e084      	b.n	800a044 <SP100_ISI_Ctrl_No_Hysteresis+0x3b8>
 8009f3a:	4b1b      	ldr	r3, [pc, #108]	; (8009fa8 <SP100_ISI_Ctrl_No_Hysteresis+0x31c>)
 8009f3c:	681a      	ldr	r2, [r3, #0]
 8009f3e:	4b1e      	ldr	r3, [pc, #120]	; (8009fb8 <SP100_ISI_Ctrl_No_Hysteresis+0x32c>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	1c19      	adds	r1, r3, #0
 8009f44:	1c10      	adds	r0, r2, #0
 8009f46:	f7f6 ff8d 	bl	8000e64 <__aeabi_fsub>
 8009f4a:	1c03      	adds	r3, r0, #0
 8009f4c:	491c      	ldr	r1, [pc, #112]	; (8009fc0 <SP100_ISI_Ctrl_No_Hysteresis+0x334>)
 8009f4e:	1c18      	adds	r0, r3, #0
 8009f50:	f7f6 fada 	bl	8000508 <__aeabi_fcmpge>
 8009f54:	1e03      	subs	r3, r0, #0
 8009f56:	d100      	bne.n	8009f5a <SP100_ISI_Ctrl_No_Hysteresis+0x2ce>
 8009f58:	e074      	b.n	800a044 <SP100_ISI_Ctrl_No_Hysteresis+0x3b8>
 8009f5a:	4b1d      	ldr	r3, [pc, #116]	; (8009fd0 <SP100_ISI_Ctrl_No_Hysteresis+0x344>)
 8009f5c:	2202      	movs	r2, #2
 8009f5e:	701a      	strb	r2, [r3, #0]
 8009f60:	e070      	b.n	800a044 <SP100_ISI_Ctrl_No_Hysteresis+0x3b8>
 8009f62:	4b11      	ldr	r3, [pc, #68]	; (8009fa8 <SP100_ISI_Ctrl_No_Hysteresis+0x31c>)
 8009f64:	681a      	ldr	r2, [r3, #0]
 8009f66:	4b11      	ldr	r3, [pc, #68]	; (8009fac <SP100_ISI_Ctrl_No_Hysteresis+0x320>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	1c19      	adds	r1, r3, #0
 8009f6c:	1c10      	adds	r0, r2, #0
 8009f6e:	f7f6 ff79 	bl	8000e64 <__aeabi_fsub>
 8009f72:	1c03      	adds	r3, r0, #0
 8009f74:	2100      	movs	r1, #0
 8009f76:	1c18      	adds	r0, r3, #0
 8009f78:	f7f6 faa8 	bl	80004cc <__aeabi_fcmplt>
 8009f7c:	1e03      	subs	r3, r0, #0
 8009f7e:	d061      	beq.n	800a044 <SP100_ISI_Ctrl_No_Hysteresis+0x3b8>
 8009f80:	4b09      	ldr	r3, [pc, #36]	; (8009fa8 <SP100_ISI_Ctrl_No_Hysteresis+0x31c>)
 8009f82:	681a      	ldr	r2, [r3, #0]
 8009f84:	4b0c      	ldr	r3, [pc, #48]	; (8009fb8 <SP100_ISI_Ctrl_No_Hysteresis+0x32c>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	1c19      	adds	r1, r3, #0
 8009f8a:	1c10      	adds	r0, r2, #0
 8009f8c:	f7f6 ff6a 	bl	8000e64 <__aeabi_fsub>
 8009f90:	1c03      	adds	r3, r0, #0
 8009f92:	4910      	ldr	r1, [pc, #64]	; (8009fd4 <SP100_ISI_Ctrl_No_Hysteresis+0x348>)
 8009f94:	1c18      	adds	r0, r3, #0
 8009f96:	f7f6 fa99 	bl	80004cc <__aeabi_fcmplt>
 8009f9a:	1e03      	subs	r3, r0, #0
 8009f9c:	d01e      	beq.n	8009fdc <SP100_ISI_Ctrl_No_Hysteresis+0x350>
 8009f9e:	4b0c      	ldr	r3, [pc, #48]	; (8009fd0 <SP100_ISI_Ctrl_No_Hysteresis+0x344>)
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	701a      	strb	r2, [r3, #0]
 8009fa4:	e04e      	b.n	800a044 <SP100_ISI_Ctrl_No_Hysteresis+0x3b8>
 8009fa6:	46c0      	nop			; (mov r8, r8)
 8009fa8:	20000014 	.word	0x20000014
 8009fac:	20000594 	.word	0x20000594
 8009fb0:	200005a8 	.word	0x200005a8
 8009fb4:	20000570 	.word	0x20000570
 8009fb8:	2000058c 	.word	0x2000058c
 8009fbc:	200005b0 	.word	0x200005b0
 8009fc0:	41b40000 	.word	0x41b40000
 8009fc4:	2000000a 	.word	0x2000000a
 8009fc8:	20000571 	.word	0x20000571
 8009fcc:	c0900000 	.word	0xc0900000
 8009fd0:	200005b1 	.word	0x200005b1
 8009fd4:	bfc00000 	.word	0xbfc00000
 8009fd8:	40200000 	.word	0x40200000
 8009fdc:	4bc6      	ldr	r3, [pc, #792]	; (800a2f8 <SP100_ISI_Ctrl_No_Hysteresis+0x66c>)
 8009fde:	681a      	ldr	r2, [r3, #0]
 8009fe0:	4bc6      	ldr	r3, [pc, #792]	; (800a2fc <SP100_ISI_Ctrl_No_Hysteresis+0x670>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	1c19      	adds	r1, r3, #0
 8009fe6:	1c10      	adds	r0, r2, #0
 8009fe8:	f7f6 ff3c 	bl	8000e64 <__aeabi_fsub>
 8009fec:	1c03      	adds	r3, r0, #0
 8009fee:	49c4      	ldr	r1, [pc, #784]	; (800a300 <SP100_ISI_Ctrl_No_Hysteresis+0x674>)
 8009ff0:	1c18      	adds	r0, r3, #0
 8009ff2:	f7f6 fa89 	bl	8000508 <__aeabi_fcmpge>
 8009ff6:	1e03      	subs	r3, r0, #0
 8009ff8:	d012      	beq.n	800a020 <SP100_ISI_Ctrl_No_Hysteresis+0x394>
 8009ffa:	4bbf      	ldr	r3, [pc, #764]	; (800a2f8 <SP100_ISI_Ctrl_No_Hysteresis+0x66c>)
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	4bbf      	ldr	r3, [pc, #764]	; (800a2fc <SP100_ISI_Ctrl_No_Hysteresis+0x670>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	1c19      	adds	r1, r3, #0
 800a004:	1c10      	adds	r0, r2, #0
 800a006:	f7f6 ff2d 	bl	8000e64 <__aeabi_fsub>
 800a00a:	1c03      	adds	r3, r0, #0
 800a00c:	49bd      	ldr	r1, [pc, #756]	; (800a304 <SP100_ISI_Ctrl_No_Hysteresis+0x678>)
 800a00e:	1c18      	adds	r0, r3, #0
 800a010:	f7f6 fa5c 	bl	80004cc <__aeabi_fcmplt>
 800a014:	1e03      	subs	r3, r0, #0
 800a016:	d003      	beq.n	800a020 <SP100_ISI_Ctrl_No_Hysteresis+0x394>
 800a018:	4bbb      	ldr	r3, [pc, #748]	; (800a308 <SP100_ISI_Ctrl_No_Hysteresis+0x67c>)
 800a01a:	2201      	movs	r2, #1
 800a01c:	701a      	strb	r2, [r3, #0]
 800a01e:	e011      	b.n	800a044 <SP100_ISI_Ctrl_No_Hysteresis+0x3b8>
 800a020:	4bb5      	ldr	r3, [pc, #724]	; (800a2f8 <SP100_ISI_Ctrl_No_Hysteresis+0x66c>)
 800a022:	681a      	ldr	r2, [r3, #0]
 800a024:	4bb5      	ldr	r3, [pc, #724]	; (800a2fc <SP100_ISI_Ctrl_No_Hysteresis+0x670>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	1c19      	adds	r1, r3, #0
 800a02a:	1c10      	adds	r0, r2, #0
 800a02c:	f7f6 ff1a 	bl	8000e64 <__aeabi_fsub>
 800a030:	1c03      	adds	r3, r0, #0
 800a032:	49b4      	ldr	r1, [pc, #720]	; (800a304 <SP100_ISI_Ctrl_No_Hysteresis+0x678>)
 800a034:	1c18      	adds	r0, r3, #0
 800a036:	f7f6 fa67 	bl	8000508 <__aeabi_fcmpge>
 800a03a:	1e03      	subs	r3, r0, #0
 800a03c:	d002      	beq.n	800a044 <SP100_ISI_Ctrl_No_Hysteresis+0x3b8>
 800a03e:	4bb2      	ldr	r3, [pc, #712]	; (800a308 <SP100_ISI_Ctrl_No_Hysteresis+0x67c>)
 800a040:	2203      	movs	r2, #3
 800a042:	701a      	strb	r2, [r3, #0]
 800a044:	4bb1      	ldr	r3, [pc, #708]	; (800a30c <SP100_ISI_Ctrl_No_Hysteresis+0x680>)
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d107      	bne.n	800a05c <SP100_ISI_Ctrl_No_Hysteresis+0x3d0>
 800a04c:	4bb0      	ldr	r3, [pc, #704]	; (800a310 <SP100_ISI_Ctrl_No_Hysteresis+0x684>)
 800a04e:	781b      	ldrb	r3, [r3, #0]
 800a050:	2b02      	cmp	r3, #2
 800a052:	d003      	beq.n	800a05c <SP100_ISI_Ctrl_No_Hysteresis+0x3d0>
 800a054:	4bac      	ldr	r3, [pc, #688]	; (800a308 <SP100_ISI_Ctrl_No_Hysteresis+0x67c>)
 800a056:	781a      	ldrb	r2, [r3, #0]
 800a058:	4bae      	ldr	r3, [pc, #696]	; (800a314 <SP100_ISI_Ctrl_No_Hysteresis+0x688>)
 800a05a:	701a      	strb	r2, [r3, #0]
 800a05c:	4ba6      	ldr	r3, [pc, #664]	; (800a2f8 <SP100_ISI_Ctrl_No_Hysteresis+0x66c>)
 800a05e:	681a      	ldr	r2, [r3, #0]
 800a060:	4ba6      	ldr	r3, [pc, #664]	; (800a2fc <SP100_ISI_Ctrl_No_Hysteresis+0x670>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	1c19      	adds	r1, r3, #0
 800a066:	1c10      	adds	r0, r2, #0
 800a068:	f7f6 fefc 	bl	8000e64 <__aeabi_fsub>
 800a06c:	1c03      	adds	r3, r0, #0
 800a06e:	49aa      	ldr	r1, [pc, #680]	; (800a318 <SP100_ISI_Ctrl_No_Hysteresis+0x68c>)
 800a070:	1c18      	adds	r0, r3, #0
 800a072:	f7f6 fa49 	bl	8000508 <__aeabi_fcmpge>
 800a076:	1e03      	subs	r3, r0, #0
 800a078:	d003      	beq.n	800a082 <SP100_ISI_Ctrl_No_Hysteresis+0x3f6>
 800a07a:	4ba8      	ldr	r3, [pc, #672]	; (800a31c <SP100_ISI_Ctrl_No_Hysteresis+0x690>)
 800a07c:	2214      	movs	r2, #20
 800a07e:	701a      	strb	r2, [r3, #0]
 800a080:	e2d6      	b.n	800a630 <SP100_ISI_Ctrl_No_Hysteresis+0x9a4>
 800a082:	4b9d      	ldr	r3, [pc, #628]	; (800a2f8 <SP100_ISI_Ctrl_No_Hysteresis+0x66c>)
 800a084:	681a      	ldr	r2, [r3, #0]
 800a086:	4b9d      	ldr	r3, [pc, #628]	; (800a2fc <SP100_ISI_Ctrl_No_Hysteresis+0x670>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	1c19      	adds	r1, r3, #0
 800a08c:	1c10      	adds	r0, r2, #0
 800a08e:	f7f6 fee9 	bl	8000e64 <__aeabi_fsub>
 800a092:	1c03      	adds	r3, r0, #0
 800a094:	49a2      	ldr	r1, [pc, #648]	; (800a320 <SP100_ISI_Ctrl_No_Hysteresis+0x694>)
 800a096:	1c18      	adds	r0, r3, #0
 800a098:	f7f6 fa36 	bl	8000508 <__aeabi_fcmpge>
 800a09c:	1e03      	subs	r3, r0, #0
 800a09e:	d012      	beq.n	800a0c6 <SP100_ISI_Ctrl_No_Hysteresis+0x43a>
 800a0a0:	4b95      	ldr	r3, [pc, #596]	; (800a2f8 <SP100_ISI_Ctrl_No_Hysteresis+0x66c>)
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	4b95      	ldr	r3, [pc, #596]	; (800a2fc <SP100_ISI_Ctrl_No_Hysteresis+0x670>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	1c19      	adds	r1, r3, #0
 800a0aa:	1c10      	adds	r0, r2, #0
 800a0ac:	f7f6 feda 	bl	8000e64 <__aeabi_fsub>
 800a0b0:	1c03      	adds	r3, r0, #0
 800a0b2:	4999      	ldr	r1, [pc, #612]	; (800a318 <SP100_ISI_Ctrl_No_Hysteresis+0x68c>)
 800a0b4:	1c18      	adds	r0, r3, #0
 800a0b6:	f7f6 fa09 	bl	80004cc <__aeabi_fcmplt>
 800a0ba:	1e03      	subs	r3, r0, #0
 800a0bc:	d003      	beq.n	800a0c6 <SP100_ISI_Ctrl_No_Hysteresis+0x43a>
 800a0be:	4b97      	ldr	r3, [pc, #604]	; (800a31c <SP100_ISI_Ctrl_No_Hysteresis+0x690>)
 800a0c0:	2213      	movs	r2, #19
 800a0c2:	701a      	strb	r2, [r3, #0]
 800a0c4:	e2b4      	b.n	800a630 <SP100_ISI_Ctrl_No_Hysteresis+0x9a4>
 800a0c6:	4b8c      	ldr	r3, [pc, #560]	; (800a2f8 <SP100_ISI_Ctrl_No_Hysteresis+0x66c>)
 800a0c8:	681a      	ldr	r2, [r3, #0]
 800a0ca:	4b8c      	ldr	r3, [pc, #560]	; (800a2fc <SP100_ISI_Ctrl_No_Hysteresis+0x670>)
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	1c19      	adds	r1, r3, #0
 800a0d0:	1c10      	adds	r0, r2, #0
 800a0d2:	f7f6 fec7 	bl	8000e64 <__aeabi_fsub>
 800a0d6:	1c03      	adds	r3, r0, #0
 800a0d8:	2181      	movs	r1, #129	; 0x81
 800a0da:	05c9      	lsls	r1, r1, #23
 800a0dc:	1c18      	adds	r0, r3, #0
 800a0de:	f7f6 fa13 	bl	8000508 <__aeabi_fcmpge>
 800a0e2:	1e03      	subs	r3, r0, #0
 800a0e4:	d012      	beq.n	800a10c <SP100_ISI_Ctrl_No_Hysteresis+0x480>
 800a0e6:	4b84      	ldr	r3, [pc, #528]	; (800a2f8 <SP100_ISI_Ctrl_No_Hysteresis+0x66c>)
 800a0e8:	681a      	ldr	r2, [r3, #0]
 800a0ea:	4b84      	ldr	r3, [pc, #528]	; (800a2fc <SP100_ISI_Ctrl_No_Hysteresis+0x670>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	1c19      	adds	r1, r3, #0
 800a0f0:	1c10      	adds	r0, r2, #0
 800a0f2:	f7f6 feb7 	bl	8000e64 <__aeabi_fsub>
 800a0f6:	1c03      	adds	r3, r0, #0
 800a0f8:	4989      	ldr	r1, [pc, #548]	; (800a320 <SP100_ISI_Ctrl_No_Hysteresis+0x694>)
 800a0fa:	1c18      	adds	r0, r3, #0
 800a0fc:	f7f6 f9e6 	bl	80004cc <__aeabi_fcmplt>
 800a100:	1e03      	subs	r3, r0, #0
 800a102:	d003      	beq.n	800a10c <SP100_ISI_Ctrl_No_Hysteresis+0x480>
 800a104:	4b85      	ldr	r3, [pc, #532]	; (800a31c <SP100_ISI_Ctrl_No_Hysteresis+0x690>)
 800a106:	2212      	movs	r2, #18
 800a108:	701a      	strb	r2, [r3, #0]
 800a10a:	e291      	b.n	800a630 <SP100_ISI_Ctrl_No_Hysteresis+0x9a4>
 800a10c:	4b7a      	ldr	r3, [pc, #488]	; (800a2f8 <SP100_ISI_Ctrl_No_Hysteresis+0x66c>)
 800a10e:	681a      	ldr	r2, [r3, #0]
 800a110:	4b7a      	ldr	r3, [pc, #488]	; (800a2fc <SP100_ISI_Ctrl_No_Hysteresis+0x670>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	1c19      	adds	r1, r3, #0
 800a116:	1c10      	adds	r0, r2, #0
 800a118:	f7f6 fea4 	bl	8000e64 <__aeabi_fsub>
 800a11c:	1c03      	adds	r3, r0, #0
 800a11e:	4979      	ldr	r1, [pc, #484]	; (800a304 <SP100_ISI_Ctrl_No_Hysteresis+0x678>)
 800a120:	1c18      	adds	r0, r3, #0
 800a122:	f7f6 f9f1 	bl	8000508 <__aeabi_fcmpge>
 800a126:	1e03      	subs	r3, r0, #0
 800a128:	d013      	beq.n	800a152 <SP100_ISI_Ctrl_No_Hysteresis+0x4c6>
 800a12a:	4b73      	ldr	r3, [pc, #460]	; (800a2f8 <SP100_ISI_Ctrl_No_Hysteresis+0x66c>)
 800a12c:	681a      	ldr	r2, [r3, #0]
 800a12e:	4b73      	ldr	r3, [pc, #460]	; (800a2fc <SP100_ISI_Ctrl_No_Hysteresis+0x670>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	1c19      	adds	r1, r3, #0
 800a134:	1c10      	adds	r0, r2, #0
 800a136:	f7f6 fe95 	bl	8000e64 <__aeabi_fsub>
 800a13a:	1c03      	adds	r3, r0, #0
 800a13c:	2181      	movs	r1, #129	; 0x81
 800a13e:	05c9      	lsls	r1, r1, #23
 800a140:	1c18      	adds	r0, r3, #0
 800a142:	f7f6 f9c3 	bl	80004cc <__aeabi_fcmplt>
 800a146:	1e03      	subs	r3, r0, #0
 800a148:	d003      	beq.n	800a152 <SP100_ISI_Ctrl_No_Hysteresis+0x4c6>
 800a14a:	4b74      	ldr	r3, [pc, #464]	; (800a31c <SP100_ISI_Ctrl_No_Hysteresis+0x690>)
 800a14c:	2211      	movs	r2, #17
 800a14e:	701a      	strb	r2, [r3, #0]
 800a150:	e26e      	b.n	800a630 <SP100_ISI_Ctrl_No_Hysteresis+0x9a4>
 800a152:	4b69      	ldr	r3, [pc, #420]	; (800a2f8 <SP100_ISI_Ctrl_No_Hysteresis+0x66c>)
 800a154:	681a      	ldr	r2, [r3, #0]
 800a156:	4b69      	ldr	r3, [pc, #420]	; (800a2fc <SP100_ISI_Ctrl_No_Hysteresis+0x670>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	1c19      	adds	r1, r3, #0
 800a15c:	1c10      	adds	r0, r2, #0
 800a15e:	f7f6 fe81 	bl	8000e64 <__aeabi_fsub>
 800a162:	1c03      	adds	r3, r0, #0
 800a164:	496f      	ldr	r1, [pc, #444]	; (800a324 <SP100_ISI_Ctrl_No_Hysteresis+0x698>)
 800a166:	1c18      	adds	r0, r3, #0
 800a168:	f7f6 f9ce 	bl	8000508 <__aeabi_fcmpge>
 800a16c:	1e03      	subs	r3, r0, #0
 800a16e:	d012      	beq.n	800a196 <SP100_ISI_Ctrl_No_Hysteresis+0x50a>
 800a170:	4b61      	ldr	r3, [pc, #388]	; (800a2f8 <SP100_ISI_Ctrl_No_Hysteresis+0x66c>)
 800a172:	681a      	ldr	r2, [r3, #0]
 800a174:	4b61      	ldr	r3, [pc, #388]	; (800a2fc <SP100_ISI_Ctrl_No_Hysteresis+0x670>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	1c19      	adds	r1, r3, #0
 800a17a:	1c10      	adds	r0, r2, #0
 800a17c:	f7f6 fe72 	bl	8000e64 <__aeabi_fsub>
 800a180:	1c03      	adds	r3, r0, #0
 800a182:	4960      	ldr	r1, [pc, #384]	; (800a304 <SP100_ISI_Ctrl_No_Hysteresis+0x678>)
 800a184:	1c18      	adds	r0, r3, #0
 800a186:	f7f6 f9a1 	bl	80004cc <__aeabi_fcmplt>
 800a18a:	1e03      	subs	r3, r0, #0
 800a18c:	d003      	beq.n	800a196 <SP100_ISI_Ctrl_No_Hysteresis+0x50a>
 800a18e:	4b63      	ldr	r3, [pc, #396]	; (800a31c <SP100_ISI_Ctrl_No_Hysteresis+0x690>)
 800a190:	2210      	movs	r2, #16
 800a192:	701a      	strb	r2, [r3, #0]
 800a194:	e24c      	b.n	800a630 <SP100_ISI_Ctrl_No_Hysteresis+0x9a4>
 800a196:	4b58      	ldr	r3, [pc, #352]	; (800a2f8 <SP100_ISI_Ctrl_No_Hysteresis+0x66c>)
 800a198:	681a      	ldr	r2, [r3, #0]
 800a19a:	4b58      	ldr	r3, [pc, #352]	; (800a2fc <SP100_ISI_Ctrl_No_Hysteresis+0x670>)
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	1c19      	adds	r1, r3, #0
 800a1a0:	1c10      	adds	r0, r2, #0
 800a1a2:	f7f6 fe5f 	bl	8000e64 <__aeabi_fsub>
 800a1a6:	1c03      	adds	r3, r0, #0
 800a1a8:	495f      	ldr	r1, [pc, #380]	; (800a328 <SP100_ISI_Ctrl_No_Hysteresis+0x69c>)
 800a1aa:	1c18      	adds	r0, r3, #0
 800a1ac:	f7f6 f9ac 	bl	8000508 <__aeabi_fcmpge>
 800a1b0:	1e03      	subs	r3, r0, #0
 800a1b2:	d012      	beq.n	800a1da <SP100_ISI_Ctrl_No_Hysteresis+0x54e>
 800a1b4:	4b50      	ldr	r3, [pc, #320]	; (800a2f8 <SP100_ISI_Ctrl_No_Hysteresis+0x66c>)
 800a1b6:	681a      	ldr	r2, [r3, #0]
 800a1b8:	4b50      	ldr	r3, [pc, #320]	; (800a2fc <SP100_ISI_Ctrl_No_Hysteresis+0x670>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	1c19      	adds	r1, r3, #0
 800a1be:	1c10      	adds	r0, r2, #0
 800a1c0:	f7f6 fe50 	bl	8000e64 <__aeabi_fsub>
 800a1c4:	1c03      	adds	r3, r0, #0
 800a1c6:	4957      	ldr	r1, [pc, #348]	; (800a324 <SP100_ISI_Ctrl_No_Hysteresis+0x698>)
 800a1c8:	1c18      	adds	r0, r3, #0
 800a1ca:	f7f6 f97f 	bl	80004cc <__aeabi_fcmplt>
 800a1ce:	1e03      	subs	r3, r0, #0
 800a1d0:	d003      	beq.n	800a1da <SP100_ISI_Ctrl_No_Hysteresis+0x54e>
 800a1d2:	4b52      	ldr	r3, [pc, #328]	; (800a31c <SP100_ISI_Ctrl_No_Hysteresis+0x690>)
 800a1d4:	220f      	movs	r2, #15
 800a1d6:	701a      	strb	r2, [r3, #0]
 800a1d8:	e22a      	b.n	800a630 <SP100_ISI_Ctrl_No_Hysteresis+0x9a4>
 800a1da:	4b47      	ldr	r3, [pc, #284]	; (800a2f8 <SP100_ISI_Ctrl_No_Hysteresis+0x66c>)
 800a1dc:	681a      	ldr	r2, [r3, #0]
 800a1de:	4b47      	ldr	r3, [pc, #284]	; (800a2fc <SP100_ISI_Ctrl_No_Hysteresis+0x670>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	1c19      	adds	r1, r3, #0
 800a1e4:	1c10      	adds	r0, r2, #0
 800a1e6:	f7f6 fe3d 	bl	8000e64 <__aeabi_fsub>
 800a1ea:	1c03      	adds	r3, r0, #0
 800a1ec:	2180      	movs	r1, #128	; 0x80
 800a1ee:	05c9      	lsls	r1, r1, #23
 800a1f0:	1c18      	adds	r0, r3, #0
 800a1f2:	f7f6 f989 	bl	8000508 <__aeabi_fcmpge>
 800a1f6:	1e03      	subs	r3, r0, #0
 800a1f8:	d012      	beq.n	800a220 <SP100_ISI_Ctrl_No_Hysteresis+0x594>
 800a1fa:	4b3f      	ldr	r3, [pc, #252]	; (800a2f8 <SP100_ISI_Ctrl_No_Hysteresis+0x66c>)
 800a1fc:	681a      	ldr	r2, [r3, #0]
 800a1fe:	4b3f      	ldr	r3, [pc, #252]	; (800a2fc <SP100_ISI_Ctrl_No_Hysteresis+0x670>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	1c19      	adds	r1, r3, #0
 800a204:	1c10      	adds	r0, r2, #0
 800a206:	f7f6 fe2d 	bl	8000e64 <__aeabi_fsub>
 800a20a:	1c03      	adds	r3, r0, #0
 800a20c:	4946      	ldr	r1, [pc, #280]	; (800a328 <SP100_ISI_Ctrl_No_Hysteresis+0x69c>)
 800a20e:	1c18      	adds	r0, r3, #0
 800a210:	f7f6 f95c 	bl	80004cc <__aeabi_fcmplt>
 800a214:	1e03      	subs	r3, r0, #0
 800a216:	d003      	beq.n	800a220 <SP100_ISI_Ctrl_No_Hysteresis+0x594>
 800a218:	4b40      	ldr	r3, [pc, #256]	; (800a31c <SP100_ISI_Ctrl_No_Hysteresis+0x690>)
 800a21a:	220e      	movs	r2, #14
 800a21c:	701a      	strb	r2, [r3, #0]
 800a21e:	e207      	b.n	800a630 <SP100_ISI_Ctrl_No_Hysteresis+0x9a4>
 800a220:	4b35      	ldr	r3, [pc, #212]	; (800a2f8 <SP100_ISI_Ctrl_No_Hysteresis+0x66c>)
 800a222:	681a      	ldr	r2, [r3, #0]
 800a224:	4b35      	ldr	r3, [pc, #212]	; (800a2fc <SP100_ISI_Ctrl_No_Hysteresis+0x670>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	1c19      	adds	r1, r3, #0
 800a22a:	1c10      	adds	r0, r2, #0
 800a22c:	f7f6 fe1a 	bl	8000e64 <__aeabi_fsub>
 800a230:	1c03      	adds	r3, r0, #0
 800a232:	21ff      	movs	r1, #255	; 0xff
 800a234:	0589      	lsls	r1, r1, #22
 800a236:	1c18      	adds	r0, r3, #0
 800a238:	f7f6 f966 	bl	8000508 <__aeabi_fcmpge>
 800a23c:	1e03      	subs	r3, r0, #0
 800a23e:	d013      	beq.n	800a268 <SP100_ISI_Ctrl_No_Hysteresis+0x5dc>
 800a240:	4b2d      	ldr	r3, [pc, #180]	; (800a2f8 <SP100_ISI_Ctrl_No_Hysteresis+0x66c>)
 800a242:	681a      	ldr	r2, [r3, #0]
 800a244:	4b2d      	ldr	r3, [pc, #180]	; (800a2fc <SP100_ISI_Ctrl_No_Hysteresis+0x670>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	1c19      	adds	r1, r3, #0
 800a24a:	1c10      	adds	r0, r2, #0
 800a24c:	f7f6 fe0a 	bl	8000e64 <__aeabi_fsub>
 800a250:	1c03      	adds	r3, r0, #0
 800a252:	2180      	movs	r1, #128	; 0x80
 800a254:	05c9      	lsls	r1, r1, #23
 800a256:	1c18      	adds	r0, r3, #0
 800a258:	f7f6 f938 	bl	80004cc <__aeabi_fcmplt>
 800a25c:	1e03      	subs	r3, r0, #0
 800a25e:	d003      	beq.n	800a268 <SP100_ISI_Ctrl_No_Hysteresis+0x5dc>
 800a260:	4b2e      	ldr	r3, [pc, #184]	; (800a31c <SP100_ISI_Ctrl_No_Hysteresis+0x690>)
 800a262:	220d      	movs	r2, #13
 800a264:	701a      	strb	r2, [r3, #0]
 800a266:	e1e3      	b.n	800a630 <SP100_ISI_Ctrl_No_Hysteresis+0x9a4>
 800a268:	4b23      	ldr	r3, [pc, #140]	; (800a2f8 <SP100_ISI_Ctrl_No_Hysteresis+0x66c>)
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	4b23      	ldr	r3, [pc, #140]	; (800a2fc <SP100_ISI_Ctrl_No_Hysteresis+0x670>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	1c19      	adds	r1, r3, #0
 800a272:	1c10      	adds	r0, r2, #0
 800a274:	f7f6 fdf6 	bl	8000e64 <__aeabi_fsub>
 800a278:	1c03      	adds	r3, r0, #0
 800a27a:	21fe      	movs	r1, #254	; 0xfe
 800a27c:	0589      	lsls	r1, r1, #22
 800a27e:	1c18      	adds	r0, r3, #0
 800a280:	f7f6 f942 	bl	8000508 <__aeabi_fcmpge>
 800a284:	1e03      	subs	r3, r0, #0
 800a286:	d013      	beq.n	800a2b0 <SP100_ISI_Ctrl_No_Hysteresis+0x624>
 800a288:	4b1b      	ldr	r3, [pc, #108]	; (800a2f8 <SP100_ISI_Ctrl_No_Hysteresis+0x66c>)
 800a28a:	681a      	ldr	r2, [r3, #0]
 800a28c:	4b1b      	ldr	r3, [pc, #108]	; (800a2fc <SP100_ISI_Ctrl_No_Hysteresis+0x670>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	1c19      	adds	r1, r3, #0
 800a292:	1c10      	adds	r0, r2, #0
 800a294:	f7f6 fde6 	bl	8000e64 <__aeabi_fsub>
 800a298:	1c03      	adds	r3, r0, #0
 800a29a:	21ff      	movs	r1, #255	; 0xff
 800a29c:	0589      	lsls	r1, r1, #22
 800a29e:	1c18      	adds	r0, r3, #0
 800a2a0:	f7f6 f914 	bl	80004cc <__aeabi_fcmplt>
 800a2a4:	1e03      	subs	r3, r0, #0
 800a2a6:	d003      	beq.n	800a2b0 <SP100_ISI_Ctrl_No_Hysteresis+0x624>
 800a2a8:	4b1c      	ldr	r3, [pc, #112]	; (800a31c <SP100_ISI_Ctrl_No_Hysteresis+0x690>)
 800a2aa:	220c      	movs	r2, #12
 800a2ac:	701a      	strb	r2, [r3, #0]
 800a2ae:	e1bf      	b.n	800a630 <SP100_ISI_Ctrl_No_Hysteresis+0x9a4>
 800a2b0:	4b11      	ldr	r3, [pc, #68]	; (800a2f8 <SP100_ISI_Ctrl_No_Hysteresis+0x66c>)
 800a2b2:	681a      	ldr	r2, [r3, #0]
 800a2b4:	4b11      	ldr	r3, [pc, #68]	; (800a2fc <SP100_ISI_Ctrl_No_Hysteresis+0x670>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	1c19      	adds	r1, r3, #0
 800a2ba:	1c10      	adds	r0, r2, #0
 800a2bc:	f7f6 fdd2 	bl	8000e64 <__aeabi_fsub>
 800a2c0:	1c03      	adds	r3, r0, #0
 800a2c2:	21fc      	movs	r1, #252	; 0xfc
 800a2c4:	0589      	lsls	r1, r1, #22
 800a2c6:	1c18      	adds	r0, r3, #0
 800a2c8:	f7f6 f91e 	bl	8000508 <__aeabi_fcmpge>
 800a2cc:	1e03      	subs	r3, r0, #0
 800a2ce:	d02d      	beq.n	800a32c <SP100_ISI_Ctrl_No_Hysteresis+0x6a0>
 800a2d0:	4b09      	ldr	r3, [pc, #36]	; (800a2f8 <SP100_ISI_Ctrl_No_Hysteresis+0x66c>)
 800a2d2:	681a      	ldr	r2, [r3, #0]
 800a2d4:	4b09      	ldr	r3, [pc, #36]	; (800a2fc <SP100_ISI_Ctrl_No_Hysteresis+0x670>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	1c19      	adds	r1, r3, #0
 800a2da:	1c10      	adds	r0, r2, #0
 800a2dc:	f7f6 fdc2 	bl	8000e64 <__aeabi_fsub>
 800a2e0:	1c03      	adds	r3, r0, #0
 800a2e2:	21fe      	movs	r1, #254	; 0xfe
 800a2e4:	0589      	lsls	r1, r1, #22
 800a2e6:	1c18      	adds	r0, r3, #0
 800a2e8:	f7f6 f8f0 	bl	80004cc <__aeabi_fcmplt>
 800a2ec:	1e03      	subs	r3, r0, #0
 800a2ee:	d01d      	beq.n	800a32c <SP100_ISI_Ctrl_No_Hysteresis+0x6a0>
 800a2f0:	4b0a      	ldr	r3, [pc, #40]	; (800a31c <SP100_ISI_Ctrl_No_Hysteresis+0x690>)
 800a2f2:	220b      	movs	r2, #11
 800a2f4:	701a      	strb	r2, [r3, #0]
 800a2f6:	e19b      	b.n	800a630 <SP100_ISI_Ctrl_No_Hysteresis+0x9a4>
 800a2f8:	20000014 	.word	0x20000014
 800a2fc:	2000058c 	.word	0x2000058c
 800a300:	bfc00000 	.word	0xbfc00000
 800a304:	40600000 	.word	0x40600000
 800a308:	200005b1 	.word	0x200005b1
 800a30c:	2000000b 	.word	0x2000000b
 800a310:	20000570 	.word	0x20000570
 800a314:	20000572 	.word	0x20000572
 800a318:	40a00000 	.word	0x40a00000
 800a31c:	200005b2 	.word	0x200005b2
 800a320:	40900000 	.word	0x40900000
 800a324:	40400000 	.word	0x40400000
 800a328:	40200000 	.word	0x40200000
 800a32c:	4bac      	ldr	r3, [pc, #688]	; (800a5e0 <SP100_ISI_Ctrl_No_Hysteresis+0x954>)
 800a32e:	681a      	ldr	r2, [r3, #0]
 800a330:	4bac      	ldr	r3, [pc, #688]	; (800a5e4 <SP100_ISI_Ctrl_No_Hysteresis+0x958>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	1c19      	adds	r1, r3, #0
 800a336:	1c10      	adds	r0, r2, #0
 800a338:	f7f6 fd94 	bl	8000e64 <__aeabi_fsub>
 800a33c:	1c03      	adds	r3, r0, #0
 800a33e:	21bf      	movs	r1, #191	; 0xbf
 800a340:	0609      	lsls	r1, r1, #24
 800a342:	1c18      	adds	r0, r3, #0
 800a344:	f7f6 f8d6 	bl	80004f4 <__aeabi_fcmpgt>
 800a348:	1e03      	subs	r3, r0, #0
 800a34a:	d013      	beq.n	800a374 <SP100_ISI_Ctrl_No_Hysteresis+0x6e8>
 800a34c:	4ba4      	ldr	r3, [pc, #656]	; (800a5e0 <SP100_ISI_Ctrl_No_Hysteresis+0x954>)
 800a34e:	681a      	ldr	r2, [r3, #0]
 800a350:	4ba4      	ldr	r3, [pc, #656]	; (800a5e4 <SP100_ISI_Ctrl_No_Hysteresis+0x958>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	1c19      	adds	r1, r3, #0
 800a356:	1c10      	adds	r0, r2, #0
 800a358:	f7f6 fd84 	bl	8000e64 <__aeabi_fsub>
 800a35c:	1c03      	adds	r3, r0, #0
 800a35e:	21fc      	movs	r1, #252	; 0xfc
 800a360:	0589      	lsls	r1, r1, #22
 800a362:	1c18      	adds	r0, r3, #0
 800a364:	f7f6 f8b2 	bl	80004cc <__aeabi_fcmplt>
 800a368:	1e03      	subs	r3, r0, #0
 800a36a:	d003      	beq.n	800a374 <SP100_ISI_Ctrl_No_Hysteresis+0x6e8>
 800a36c:	4b9e      	ldr	r3, [pc, #632]	; (800a5e8 <SP100_ISI_Ctrl_No_Hysteresis+0x95c>)
 800a36e:	220a      	movs	r2, #10
 800a370:	701a      	strb	r2, [r3, #0]
 800a372:	e15d      	b.n	800a630 <SP100_ISI_Ctrl_No_Hysteresis+0x9a4>
 800a374:	4b9a      	ldr	r3, [pc, #616]	; (800a5e0 <SP100_ISI_Ctrl_No_Hysteresis+0x954>)
 800a376:	681a      	ldr	r2, [r3, #0]
 800a378:	4b9a      	ldr	r3, [pc, #616]	; (800a5e4 <SP100_ISI_Ctrl_No_Hysteresis+0x958>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	1c19      	adds	r1, r3, #0
 800a37e:	1c10      	adds	r0, r2, #0
 800a380:	f7f6 fd70 	bl	8000e64 <__aeabi_fsub>
 800a384:	1c03      	adds	r3, r0, #0
 800a386:	4999      	ldr	r1, [pc, #612]	; (800a5ec <SP100_ISI_Ctrl_No_Hysteresis+0x960>)
 800a388:	1c18      	adds	r0, r3, #0
 800a38a:	f7f6 f8b3 	bl	80004f4 <__aeabi_fcmpgt>
 800a38e:	1e03      	subs	r3, r0, #0
 800a390:	d013      	beq.n	800a3ba <SP100_ISI_Ctrl_No_Hysteresis+0x72e>
 800a392:	4b93      	ldr	r3, [pc, #588]	; (800a5e0 <SP100_ISI_Ctrl_No_Hysteresis+0x954>)
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	4b93      	ldr	r3, [pc, #588]	; (800a5e4 <SP100_ISI_Ctrl_No_Hysteresis+0x958>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	1c19      	adds	r1, r3, #0
 800a39c:	1c10      	adds	r0, r2, #0
 800a39e:	f7f6 fd61 	bl	8000e64 <__aeabi_fsub>
 800a3a2:	1c03      	adds	r3, r0, #0
 800a3a4:	21bf      	movs	r1, #191	; 0xbf
 800a3a6:	0609      	lsls	r1, r1, #24
 800a3a8:	1c18      	adds	r0, r3, #0
 800a3aa:	f7f6 f899 	bl	80004e0 <__aeabi_fcmple>
 800a3ae:	1e03      	subs	r3, r0, #0
 800a3b0:	d003      	beq.n	800a3ba <SP100_ISI_Ctrl_No_Hysteresis+0x72e>
 800a3b2:	4b8d      	ldr	r3, [pc, #564]	; (800a5e8 <SP100_ISI_Ctrl_No_Hysteresis+0x95c>)
 800a3b4:	2209      	movs	r2, #9
 800a3b6:	701a      	strb	r2, [r3, #0]
 800a3b8:	e13a      	b.n	800a630 <SP100_ISI_Ctrl_No_Hysteresis+0x9a4>
 800a3ba:	4b89      	ldr	r3, [pc, #548]	; (800a5e0 <SP100_ISI_Ctrl_No_Hysteresis+0x954>)
 800a3bc:	681a      	ldr	r2, [r3, #0]
 800a3be:	4b89      	ldr	r3, [pc, #548]	; (800a5e4 <SP100_ISI_Ctrl_No_Hysteresis+0x958>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	1c19      	adds	r1, r3, #0
 800a3c4:	1c10      	adds	r0, r2, #0
 800a3c6:	f7f6 fd4d 	bl	8000e64 <__aeabi_fsub>
 800a3ca:	1c03      	adds	r3, r0, #0
 800a3cc:	4988      	ldr	r1, [pc, #544]	; (800a5f0 <SP100_ISI_Ctrl_No_Hysteresis+0x964>)
 800a3ce:	1c18      	adds	r0, r3, #0
 800a3d0:	f7f6 f890 	bl	80004f4 <__aeabi_fcmpgt>
 800a3d4:	1e03      	subs	r3, r0, #0
 800a3d6:	d012      	beq.n	800a3fe <SP100_ISI_Ctrl_No_Hysteresis+0x772>
 800a3d8:	4b81      	ldr	r3, [pc, #516]	; (800a5e0 <SP100_ISI_Ctrl_No_Hysteresis+0x954>)
 800a3da:	681a      	ldr	r2, [r3, #0]
 800a3dc:	4b81      	ldr	r3, [pc, #516]	; (800a5e4 <SP100_ISI_Ctrl_No_Hysteresis+0x958>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	1c19      	adds	r1, r3, #0
 800a3e2:	1c10      	adds	r0, r2, #0
 800a3e4:	f7f6 fd3e 	bl	8000e64 <__aeabi_fsub>
 800a3e8:	1c03      	adds	r3, r0, #0
 800a3ea:	4980      	ldr	r1, [pc, #512]	; (800a5ec <SP100_ISI_Ctrl_No_Hysteresis+0x960>)
 800a3ec:	1c18      	adds	r0, r3, #0
 800a3ee:	f7f6 f877 	bl	80004e0 <__aeabi_fcmple>
 800a3f2:	1e03      	subs	r3, r0, #0
 800a3f4:	d003      	beq.n	800a3fe <SP100_ISI_Ctrl_No_Hysteresis+0x772>
 800a3f6:	4b7c      	ldr	r3, [pc, #496]	; (800a5e8 <SP100_ISI_Ctrl_No_Hysteresis+0x95c>)
 800a3f8:	2208      	movs	r2, #8
 800a3fa:	701a      	strb	r2, [r3, #0]
 800a3fc:	e118      	b.n	800a630 <SP100_ISI_Ctrl_No_Hysteresis+0x9a4>
 800a3fe:	4b78      	ldr	r3, [pc, #480]	; (800a5e0 <SP100_ISI_Ctrl_No_Hysteresis+0x954>)
 800a400:	681a      	ldr	r2, [r3, #0]
 800a402:	4b78      	ldr	r3, [pc, #480]	; (800a5e4 <SP100_ISI_Ctrl_No_Hysteresis+0x958>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	1c19      	adds	r1, r3, #0
 800a408:	1c10      	adds	r0, r2, #0
 800a40a:	f7f6 fd2b 	bl	8000e64 <__aeabi_fsub>
 800a40e:	1c03      	adds	r3, r0, #0
 800a410:	21c0      	movs	r1, #192	; 0xc0
 800a412:	0609      	lsls	r1, r1, #24
 800a414:	1c18      	adds	r0, r3, #0
 800a416:	f7f6 f86d 	bl	80004f4 <__aeabi_fcmpgt>
 800a41a:	1e03      	subs	r3, r0, #0
 800a41c:	d012      	beq.n	800a444 <SP100_ISI_Ctrl_No_Hysteresis+0x7b8>
 800a41e:	4b70      	ldr	r3, [pc, #448]	; (800a5e0 <SP100_ISI_Ctrl_No_Hysteresis+0x954>)
 800a420:	681a      	ldr	r2, [r3, #0]
 800a422:	4b70      	ldr	r3, [pc, #448]	; (800a5e4 <SP100_ISI_Ctrl_No_Hysteresis+0x958>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	1c19      	adds	r1, r3, #0
 800a428:	1c10      	adds	r0, r2, #0
 800a42a:	f7f6 fd1b 	bl	8000e64 <__aeabi_fsub>
 800a42e:	1c03      	adds	r3, r0, #0
 800a430:	496f      	ldr	r1, [pc, #444]	; (800a5f0 <SP100_ISI_Ctrl_No_Hysteresis+0x964>)
 800a432:	1c18      	adds	r0, r3, #0
 800a434:	f7f6 f854 	bl	80004e0 <__aeabi_fcmple>
 800a438:	1e03      	subs	r3, r0, #0
 800a43a:	d003      	beq.n	800a444 <SP100_ISI_Ctrl_No_Hysteresis+0x7b8>
 800a43c:	4b6a      	ldr	r3, [pc, #424]	; (800a5e8 <SP100_ISI_Ctrl_No_Hysteresis+0x95c>)
 800a43e:	2207      	movs	r2, #7
 800a440:	701a      	strb	r2, [r3, #0]
 800a442:	e0f5      	b.n	800a630 <SP100_ISI_Ctrl_No_Hysteresis+0x9a4>
 800a444:	4b66      	ldr	r3, [pc, #408]	; (800a5e0 <SP100_ISI_Ctrl_No_Hysteresis+0x954>)
 800a446:	681a      	ldr	r2, [r3, #0]
 800a448:	4b66      	ldr	r3, [pc, #408]	; (800a5e4 <SP100_ISI_Ctrl_No_Hysteresis+0x958>)
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	1c19      	adds	r1, r3, #0
 800a44e:	1c10      	adds	r0, r2, #0
 800a450:	f7f6 fd08 	bl	8000e64 <__aeabi_fsub>
 800a454:	1c03      	adds	r3, r0, #0
 800a456:	4967      	ldr	r1, [pc, #412]	; (800a5f4 <SP100_ISI_Ctrl_No_Hysteresis+0x968>)
 800a458:	1c18      	adds	r0, r3, #0
 800a45a:	f7f6 f84b 	bl	80004f4 <__aeabi_fcmpgt>
 800a45e:	1e03      	subs	r3, r0, #0
 800a460:	d013      	beq.n	800a48a <SP100_ISI_Ctrl_No_Hysteresis+0x7fe>
 800a462:	4b5f      	ldr	r3, [pc, #380]	; (800a5e0 <SP100_ISI_Ctrl_No_Hysteresis+0x954>)
 800a464:	681a      	ldr	r2, [r3, #0]
 800a466:	4b5f      	ldr	r3, [pc, #380]	; (800a5e4 <SP100_ISI_Ctrl_No_Hysteresis+0x958>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	1c19      	adds	r1, r3, #0
 800a46c:	1c10      	adds	r0, r2, #0
 800a46e:	f7f6 fcf9 	bl	8000e64 <__aeabi_fsub>
 800a472:	1c03      	adds	r3, r0, #0
 800a474:	21c0      	movs	r1, #192	; 0xc0
 800a476:	0609      	lsls	r1, r1, #24
 800a478:	1c18      	adds	r0, r3, #0
 800a47a:	f7f6 f831 	bl	80004e0 <__aeabi_fcmple>
 800a47e:	1e03      	subs	r3, r0, #0
 800a480:	d003      	beq.n	800a48a <SP100_ISI_Ctrl_No_Hysteresis+0x7fe>
 800a482:	4b59      	ldr	r3, [pc, #356]	; (800a5e8 <SP100_ISI_Ctrl_No_Hysteresis+0x95c>)
 800a484:	2206      	movs	r2, #6
 800a486:	701a      	strb	r2, [r3, #0]
 800a488:	e0d2      	b.n	800a630 <SP100_ISI_Ctrl_No_Hysteresis+0x9a4>
 800a48a:	4b55      	ldr	r3, [pc, #340]	; (800a5e0 <SP100_ISI_Ctrl_No_Hysteresis+0x954>)
 800a48c:	681a      	ldr	r2, [r3, #0]
 800a48e:	4b55      	ldr	r3, [pc, #340]	; (800a5e4 <SP100_ISI_Ctrl_No_Hysteresis+0x958>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	1c19      	adds	r1, r3, #0
 800a494:	1c10      	adds	r0, r2, #0
 800a496:	f7f6 fce5 	bl	8000e64 <__aeabi_fsub>
 800a49a:	1c03      	adds	r3, r0, #0
 800a49c:	4956      	ldr	r1, [pc, #344]	; (800a5f8 <SP100_ISI_Ctrl_No_Hysteresis+0x96c>)
 800a49e:	1c18      	adds	r0, r3, #0
 800a4a0:	f7f6 f828 	bl	80004f4 <__aeabi_fcmpgt>
 800a4a4:	1e03      	subs	r3, r0, #0
 800a4a6:	d012      	beq.n	800a4ce <SP100_ISI_Ctrl_No_Hysteresis+0x842>
 800a4a8:	4b4d      	ldr	r3, [pc, #308]	; (800a5e0 <SP100_ISI_Ctrl_No_Hysteresis+0x954>)
 800a4aa:	681a      	ldr	r2, [r3, #0]
 800a4ac:	4b4d      	ldr	r3, [pc, #308]	; (800a5e4 <SP100_ISI_Ctrl_No_Hysteresis+0x958>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	1c19      	adds	r1, r3, #0
 800a4b2:	1c10      	adds	r0, r2, #0
 800a4b4:	f7f6 fcd6 	bl	8000e64 <__aeabi_fsub>
 800a4b8:	1c03      	adds	r3, r0, #0
 800a4ba:	494e      	ldr	r1, [pc, #312]	; (800a5f4 <SP100_ISI_Ctrl_No_Hysteresis+0x968>)
 800a4bc:	1c18      	adds	r0, r3, #0
 800a4be:	f7f6 f80f 	bl	80004e0 <__aeabi_fcmple>
 800a4c2:	1e03      	subs	r3, r0, #0
 800a4c4:	d003      	beq.n	800a4ce <SP100_ISI_Ctrl_No_Hysteresis+0x842>
 800a4c6:	4b48      	ldr	r3, [pc, #288]	; (800a5e8 <SP100_ISI_Ctrl_No_Hysteresis+0x95c>)
 800a4c8:	2205      	movs	r2, #5
 800a4ca:	701a      	strb	r2, [r3, #0]
 800a4cc:	e0b0      	b.n	800a630 <SP100_ISI_Ctrl_No_Hysteresis+0x9a4>
 800a4ce:	4b44      	ldr	r3, [pc, #272]	; (800a5e0 <SP100_ISI_Ctrl_No_Hysteresis+0x954>)
 800a4d0:	681a      	ldr	r2, [r3, #0]
 800a4d2:	4b44      	ldr	r3, [pc, #272]	; (800a5e4 <SP100_ISI_Ctrl_No_Hysteresis+0x958>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	1c19      	adds	r1, r3, #0
 800a4d8:	1c10      	adds	r0, r2, #0
 800a4da:	f7f6 fcc3 	bl	8000e64 <__aeabi_fsub>
 800a4de:	1c03      	adds	r3, r0, #0
 800a4e0:	4946      	ldr	r1, [pc, #280]	; (800a5fc <SP100_ISI_Ctrl_No_Hysteresis+0x970>)
 800a4e2:	1c18      	adds	r0, r3, #0
 800a4e4:	f7f6 f806 	bl	80004f4 <__aeabi_fcmpgt>
 800a4e8:	1e03      	subs	r3, r0, #0
 800a4ea:	d012      	beq.n	800a512 <SP100_ISI_Ctrl_No_Hysteresis+0x886>
 800a4ec:	4b3c      	ldr	r3, [pc, #240]	; (800a5e0 <SP100_ISI_Ctrl_No_Hysteresis+0x954>)
 800a4ee:	681a      	ldr	r2, [r3, #0]
 800a4f0:	4b3c      	ldr	r3, [pc, #240]	; (800a5e4 <SP100_ISI_Ctrl_No_Hysteresis+0x958>)
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	1c19      	adds	r1, r3, #0
 800a4f6:	1c10      	adds	r0, r2, #0
 800a4f8:	f7f6 fcb4 	bl	8000e64 <__aeabi_fsub>
 800a4fc:	1c03      	adds	r3, r0, #0
 800a4fe:	493e      	ldr	r1, [pc, #248]	; (800a5f8 <SP100_ISI_Ctrl_No_Hysteresis+0x96c>)
 800a500:	1c18      	adds	r0, r3, #0
 800a502:	f7f5 ffed 	bl	80004e0 <__aeabi_fcmple>
 800a506:	1e03      	subs	r3, r0, #0
 800a508:	d003      	beq.n	800a512 <SP100_ISI_Ctrl_No_Hysteresis+0x886>
 800a50a:	4b37      	ldr	r3, [pc, #220]	; (800a5e8 <SP100_ISI_Ctrl_No_Hysteresis+0x95c>)
 800a50c:	2204      	movs	r2, #4
 800a50e:	701a      	strb	r2, [r3, #0]
 800a510:	e08e      	b.n	800a630 <SP100_ISI_Ctrl_No_Hysteresis+0x9a4>
 800a512:	4b33      	ldr	r3, [pc, #204]	; (800a5e0 <SP100_ISI_Ctrl_No_Hysteresis+0x954>)
 800a514:	681a      	ldr	r2, [r3, #0]
 800a516:	4b33      	ldr	r3, [pc, #204]	; (800a5e4 <SP100_ISI_Ctrl_No_Hysteresis+0x958>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	1c19      	adds	r1, r3, #0
 800a51c:	1c10      	adds	r0, r2, #0
 800a51e:	f7f6 fca1 	bl	8000e64 <__aeabi_fsub>
 800a522:	1c03      	adds	r3, r0, #0
 800a524:	4936      	ldr	r1, [pc, #216]	; (800a600 <SP100_ISI_Ctrl_No_Hysteresis+0x974>)
 800a526:	1c18      	adds	r0, r3, #0
 800a528:	f7f5 ffe4 	bl	80004f4 <__aeabi_fcmpgt>
 800a52c:	1e03      	subs	r3, r0, #0
 800a52e:	d012      	beq.n	800a556 <SP100_ISI_Ctrl_No_Hysteresis+0x8ca>
 800a530:	4b2b      	ldr	r3, [pc, #172]	; (800a5e0 <SP100_ISI_Ctrl_No_Hysteresis+0x954>)
 800a532:	681a      	ldr	r2, [r3, #0]
 800a534:	4b2b      	ldr	r3, [pc, #172]	; (800a5e4 <SP100_ISI_Ctrl_No_Hysteresis+0x958>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	1c19      	adds	r1, r3, #0
 800a53a:	1c10      	adds	r0, r2, #0
 800a53c:	f7f6 fc92 	bl	8000e64 <__aeabi_fsub>
 800a540:	1c03      	adds	r3, r0, #0
 800a542:	492e      	ldr	r1, [pc, #184]	; (800a5fc <SP100_ISI_Ctrl_No_Hysteresis+0x970>)
 800a544:	1c18      	adds	r0, r3, #0
 800a546:	f7f5 ffcb 	bl	80004e0 <__aeabi_fcmple>
 800a54a:	1e03      	subs	r3, r0, #0
 800a54c:	d003      	beq.n	800a556 <SP100_ISI_Ctrl_No_Hysteresis+0x8ca>
 800a54e:	4b26      	ldr	r3, [pc, #152]	; (800a5e8 <SP100_ISI_Ctrl_No_Hysteresis+0x95c>)
 800a550:	2203      	movs	r2, #3
 800a552:	701a      	strb	r2, [r3, #0]
 800a554:	e06c      	b.n	800a630 <SP100_ISI_Ctrl_No_Hysteresis+0x9a4>
 800a556:	4b22      	ldr	r3, [pc, #136]	; (800a5e0 <SP100_ISI_Ctrl_No_Hysteresis+0x954>)
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	4b22      	ldr	r3, [pc, #136]	; (800a5e4 <SP100_ISI_Ctrl_No_Hysteresis+0x958>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	1c19      	adds	r1, r3, #0
 800a560:	1c10      	adds	r0, r2, #0
 800a562:	f7f6 fc7f 	bl	8000e64 <__aeabi_fsub>
 800a566:	1c03      	adds	r3, r0, #0
 800a568:	4926      	ldr	r1, [pc, #152]	; (800a604 <SP100_ISI_Ctrl_No_Hysteresis+0x978>)
 800a56a:	1c18      	adds	r0, r3, #0
 800a56c:	f7f5 ffc2 	bl	80004f4 <__aeabi_fcmpgt>
 800a570:	1e03      	subs	r3, r0, #0
 800a572:	d012      	beq.n	800a59a <SP100_ISI_Ctrl_No_Hysteresis+0x90e>
 800a574:	4b1a      	ldr	r3, [pc, #104]	; (800a5e0 <SP100_ISI_Ctrl_No_Hysteresis+0x954>)
 800a576:	681a      	ldr	r2, [r3, #0]
 800a578:	4b1a      	ldr	r3, [pc, #104]	; (800a5e4 <SP100_ISI_Ctrl_No_Hysteresis+0x958>)
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	1c19      	adds	r1, r3, #0
 800a57e:	1c10      	adds	r0, r2, #0
 800a580:	f7f6 fc70 	bl	8000e64 <__aeabi_fsub>
 800a584:	1c03      	adds	r3, r0, #0
 800a586:	491e      	ldr	r1, [pc, #120]	; (800a600 <SP100_ISI_Ctrl_No_Hysteresis+0x974>)
 800a588:	1c18      	adds	r0, r3, #0
 800a58a:	f7f5 ffa9 	bl	80004e0 <__aeabi_fcmple>
 800a58e:	1e03      	subs	r3, r0, #0
 800a590:	d003      	beq.n	800a59a <SP100_ISI_Ctrl_No_Hysteresis+0x90e>
 800a592:	4b15      	ldr	r3, [pc, #84]	; (800a5e8 <SP100_ISI_Ctrl_No_Hysteresis+0x95c>)
 800a594:	2202      	movs	r2, #2
 800a596:	701a      	strb	r2, [r3, #0]
 800a598:	e04a      	b.n	800a630 <SP100_ISI_Ctrl_No_Hysteresis+0x9a4>
 800a59a:	4b11      	ldr	r3, [pc, #68]	; (800a5e0 <SP100_ISI_Ctrl_No_Hysteresis+0x954>)
 800a59c:	681a      	ldr	r2, [r3, #0]
 800a59e:	4b11      	ldr	r3, [pc, #68]	; (800a5e4 <SP100_ISI_Ctrl_No_Hysteresis+0x958>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	1c19      	adds	r1, r3, #0
 800a5a4:	1c10      	adds	r0, r2, #0
 800a5a6:	f7f6 fc5d 	bl	8000e64 <__aeabi_fsub>
 800a5aa:	1c03      	adds	r3, r0, #0
 800a5ac:	4916      	ldr	r1, [pc, #88]	; (800a608 <SP100_ISI_Ctrl_No_Hysteresis+0x97c>)
 800a5ae:	1c18      	adds	r0, r3, #0
 800a5b0:	f7f5 ffa0 	bl	80004f4 <__aeabi_fcmpgt>
 800a5b4:	1e03      	subs	r3, r0, #0
 800a5b6:	d029      	beq.n	800a60c <SP100_ISI_Ctrl_No_Hysteresis+0x980>
 800a5b8:	4b09      	ldr	r3, [pc, #36]	; (800a5e0 <SP100_ISI_Ctrl_No_Hysteresis+0x954>)
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	4b09      	ldr	r3, [pc, #36]	; (800a5e4 <SP100_ISI_Ctrl_No_Hysteresis+0x958>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	1c19      	adds	r1, r3, #0
 800a5c2:	1c10      	adds	r0, r2, #0
 800a5c4:	f7f6 fc4e 	bl	8000e64 <__aeabi_fsub>
 800a5c8:	1c03      	adds	r3, r0, #0
 800a5ca:	490e      	ldr	r1, [pc, #56]	; (800a604 <SP100_ISI_Ctrl_No_Hysteresis+0x978>)
 800a5cc:	1c18      	adds	r0, r3, #0
 800a5ce:	f7f5 ff87 	bl	80004e0 <__aeabi_fcmple>
 800a5d2:	1e03      	subs	r3, r0, #0
 800a5d4:	d01a      	beq.n	800a60c <SP100_ISI_Ctrl_No_Hysteresis+0x980>
 800a5d6:	4b04      	ldr	r3, [pc, #16]	; (800a5e8 <SP100_ISI_Ctrl_No_Hysteresis+0x95c>)
 800a5d8:	2201      	movs	r2, #1
 800a5da:	701a      	strb	r2, [r3, #0]
 800a5dc:	e028      	b.n	800a630 <SP100_ISI_Ctrl_No_Hysteresis+0x9a4>
 800a5de:	46c0      	nop			; (mov r8, r8)
 800a5e0:	20000014 	.word	0x20000014
 800a5e4:	2000058c 	.word	0x2000058c
 800a5e8:	200005b2 	.word	0x200005b2
 800a5ec:	bf800000 	.word	0xbf800000
 800a5f0:	bfc00000 	.word	0xbfc00000
 800a5f4:	c0200000 	.word	0xc0200000
 800a5f8:	c0400000 	.word	0xc0400000
 800a5fc:	c0600000 	.word	0xc0600000
 800a600:	c0800000 	.word	0xc0800000
 800a604:	c0900000 	.word	0xc0900000
 800a608:	c0a00000 	.word	0xc0a00000
 800a60c:	4bc8      	ldr	r3, [pc, #800]	; (800a930 <SP100_ISI_Ctrl_No_Hysteresis+0xca4>)
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	4bc8      	ldr	r3, [pc, #800]	; (800a934 <SP100_ISI_Ctrl_No_Hysteresis+0xca8>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	1c19      	adds	r1, r3, #0
 800a616:	1c10      	adds	r0, r2, #0
 800a618:	f7f6 fc24 	bl	8000e64 <__aeabi_fsub>
 800a61c:	1c03      	adds	r3, r0, #0
 800a61e:	49c6      	ldr	r1, [pc, #792]	; (800a938 <SP100_ISI_Ctrl_No_Hysteresis+0xcac>)
 800a620:	1c18      	adds	r0, r3, #0
 800a622:	f7f5 ff5d 	bl	80004e0 <__aeabi_fcmple>
 800a626:	1e03      	subs	r3, r0, #0
 800a628:	d002      	beq.n	800a630 <SP100_ISI_Ctrl_No_Hysteresis+0x9a4>
 800a62a:	4bc4      	ldr	r3, [pc, #784]	; (800a93c <SP100_ISI_Ctrl_No_Hysteresis+0xcb0>)
 800a62c:	2200      	movs	r2, #0
 800a62e:	701a      	strb	r2, [r3, #0]
 800a630:	4bbf      	ldr	r3, [pc, #764]	; (800a930 <SP100_ISI_Ctrl_No_Hysteresis+0xca4>)
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	4bc2      	ldr	r3, [pc, #776]	; (800a940 <SP100_ISI_Ctrl_No_Hysteresis+0xcb4>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	1c19      	adds	r1, r3, #0
 800a63a:	1c10      	adds	r0, r2, #0
 800a63c:	f7f6 fc12 	bl	8000e64 <__aeabi_fsub>
 800a640:	1c03      	adds	r3, r0, #0
 800a642:	21fe      	movs	r1, #254	; 0xfe
 800a644:	0589      	lsls	r1, r1, #22
 800a646:	1c18      	adds	r0, r3, #0
 800a648:	f7f5 ff5e 	bl	8000508 <__aeabi_fcmpge>
 800a64c:	1e03      	subs	r3, r0, #0
 800a64e:	d010      	beq.n	800a672 <SP100_ISI_Ctrl_No_Hysteresis+0x9e6>
 800a650:	4bb7      	ldr	r3, [pc, #732]	; (800a930 <SP100_ISI_Ctrl_No_Hysteresis+0xca4>)
 800a652:	681a      	ldr	r2, [r3, #0]
 800a654:	4bba      	ldr	r3, [pc, #744]	; (800a940 <SP100_ISI_Ctrl_No_Hysteresis+0xcb4>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	1c19      	adds	r1, r3, #0
 800a65a:	1c10      	adds	r0, r2, #0
 800a65c:	f7f6 fc02 	bl	8000e64 <__aeabi_fsub>
 800a660:	1c03      	adds	r3, r0, #0
 800a662:	2180      	movs	r1, #128	; 0x80
 800a664:	05c9      	lsls	r1, r1, #23
 800a666:	1c18      	adds	r0, r3, #0
 800a668:	f7f5 ff30 	bl	80004cc <__aeabi_fcmplt>
 800a66c:	1e03      	subs	r3, r0, #0
 800a66e:	d000      	beq.n	800a672 <SP100_ISI_Ctrl_No_Hysteresis+0x9e6>
 800a670:	46c0      	nop			; (mov r8, r8)
 800a672:	4baf      	ldr	r3, [pc, #700]	; (800a930 <SP100_ISI_Ctrl_No_Hysteresis+0xca4>)
 800a674:	681a      	ldr	r2, [r3, #0]
 800a676:	4bb2      	ldr	r3, [pc, #712]	; (800a940 <SP100_ISI_Ctrl_No_Hysteresis+0xcb4>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	1c19      	adds	r1, r3, #0
 800a67c:	1c10      	adds	r0, r2, #0
 800a67e:	f7f6 fbf1 	bl	8000e64 <__aeabi_fsub>
 800a682:	1c03      	adds	r3, r0, #0
 800a684:	2180      	movs	r1, #128	; 0x80
 800a686:	05c9      	lsls	r1, r1, #23
 800a688:	1c18      	adds	r0, r3, #0
 800a68a:	f7f5 ff3d 	bl	8000508 <__aeabi_fcmpge>
 800a68e:	1e03      	subs	r3, r0, #0
 800a690:	d03f      	beq.n	800a712 <SP100_ISI_Ctrl_No_Hysteresis+0xa86>
 800a692:	4ba7      	ldr	r3, [pc, #668]	; (800a930 <SP100_ISI_Ctrl_No_Hysteresis+0xca4>)
 800a694:	681a      	ldr	r2, [r3, #0]
 800a696:	4baa      	ldr	r3, [pc, #680]	; (800a940 <SP100_ISI_Ctrl_No_Hysteresis+0xcb4>)
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	1c19      	adds	r1, r3, #0
 800a69c:	1c10      	adds	r0, r2, #0
 800a69e:	f7f6 fbe1 	bl	8000e64 <__aeabi_fsub>
 800a6a2:	1c03      	adds	r3, r0, #0
 800a6a4:	1c18      	adds	r0, r3, #0
 800a6a6:	f009 fccd 	bl	8014044 <floorf>
 800a6aa:	1c03      	adds	r3, r0, #0
 800a6ac:	61fb      	str	r3, [r7, #28]
 800a6ae:	49a5      	ldr	r1, [pc, #660]	; (800a944 <SP100_ISI_Ctrl_No_Hysteresis+0xcb8>)
 800a6b0:	69f8      	ldr	r0, [r7, #28]
 800a6b2:	f7f5 ff29 	bl	8000508 <__aeabi_fcmpge>
 800a6b6:	1e03      	subs	r3, r0, #0
 800a6b8:	d001      	beq.n	800a6be <SP100_ISI_Ctrl_No_Hysteresis+0xa32>
 800a6ba:	4ba2      	ldr	r3, [pc, #648]	; (800a944 <SP100_ISI_Ctrl_No_Hysteresis+0xcb8>)
 800a6bc:	61fb      	str	r3, [r7, #28]
 800a6be:	49a2      	ldr	r1, [pc, #648]	; (800a948 <SP100_ISI_Ctrl_No_Hysteresis+0xcbc>)
 800a6c0:	69f8      	ldr	r0, [r7, #28]
 800a6c2:	f7f6 fbcf 	bl	8000e64 <__aeabi_fsub>
 800a6c6:	1c03      	adds	r3, r0, #0
 800a6c8:	61fb      	str	r3, [r7, #28]
 800a6ca:	4b9c      	ldr	r3, [pc, #624]	; (800a93c <SP100_ISI_Ctrl_No_Hysteresis+0xcb0>)
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	0018      	movs	r0, r3
 800a6d0:	f7f6 fdac 	bl	800122c <__aeabi_i2f>
 800a6d4:	1c03      	adds	r3, r0, #0
 800a6d6:	1c19      	adds	r1, r3, #0
 800a6d8:	69f8      	ldr	r0, [r7, #28]
 800a6da:	f7f5 ff37 	bl	800054c <__aeabi_fadd>
 800a6de:	1c03      	adds	r3, r0, #0
 800a6e0:	61fb      	str	r3, [r7, #28]
 800a6e2:	2100      	movs	r1, #0
 800a6e4:	69f8      	ldr	r0, [r7, #28]
 800a6e6:	f7f5 fef1 	bl	80004cc <__aeabi_fcmplt>
 800a6ea:	1e03      	subs	r3, r0, #0
 800a6ec:	d001      	beq.n	800a6f2 <SP100_ISI_Ctrl_No_Hysteresis+0xa66>
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	61fb      	str	r3, [r7, #28]
 800a6f2:	4996      	ldr	r1, [pc, #600]	; (800a94c <SP100_ISI_Ctrl_No_Hysteresis+0xcc0>)
 800a6f4:	69f8      	ldr	r0, [r7, #28]
 800a6f6:	f7f5 fefd 	bl	80004f4 <__aeabi_fcmpgt>
 800a6fa:	1e03      	subs	r3, r0, #0
 800a6fc:	d001      	beq.n	800a702 <SP100_ISI_Ctrl_No_Hysteresis+0xa76>
 800a6fe:	4b93      	ldr	r3, [pc, #588]	; (800a94c <SP100_ISI_Ctrl_No_Hysteresis+0xcc0>)
 800a700:	61fb      	str	r3, [r7, #28]
 800a702:	69f8      	ldr	r0, [r7, #28]
 800a704:	f7f5 ff0a 	bl	800051c <__aeabi_f2uiz>
 800a708:	0003      	movs	r3, r0
 800a70a:	b2da      	uxtb	r2, r3
 800a70c:	4b8b      	ldr	r3, [pc, #556]	; (800a93c <SP100_ISI_Ctrl_No_Hysteresis+0xcb0>)
 800a70e:	701a      	strb	r2, [r3, #0]
 800a710:	e04f      	b.n	800a7b2 <SP100_ISI_Ctrl_No_Hysteresis+0xb26>
 800a712:	4b87      	ldr	r3, [pc, #540]	; (800a930 <SP100_ISI_Ctrl_No_Hysteresis+0xca4>)
 800a714:	681a      	ldr	r2, [r3, #0]
 800a716:	4b8a      	ldr	r3, [pc, #552]	; (800a940 <SP100_ISI_Ctrl_No_Hysteresis+0xcb4>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	1c19      	adds	r1, r3, #0
 800a71c:	1c10      	adds	r0, r2, #0
 800a71e:	f7f6 fba1 	bl	8000e64 <__aeabi_fsub>
 800a722:	1c03      	adds	r3, r0, #0
 800a724:	21fe      	movs	r1, #254	; 0xfe
 800a726:	0589      	lsls	r1, r1, #22
 800a728:	1c18      	adds	r0, r3, #0
 800a72a:	f7f5 fecf 	bl	80004cc <__aeabi_fcmplt>
 800a72e:	1e03      	subs	r3, r0, #0
 800a730:	d03f      	beq.n	800a7b2 <SP100_ISI_Ctrl_No_Hysteresis+0xb26>
 800a732:	4b7f      	ldr	r3, [pc, #508]	; (800a930 <SP100_ISI_Ctrl_No_Hysteresis+0xca4>)
 800a734:	681a      	ldr	r2, [r3, #0]
 800a736:	4b82      	ldr	r3, [pc, #520]	; (800a940 <SP100_ISI_Ctrl_No_Hysteresis+0xcb4>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	1c19      	adds	r1, r3, #0
 800a73c:	1c10      	adds	r0, r2, #0
 800a73e:	f7f6 fb91 	bl	8000e64 <__aeabi_fsub>
 800a742:	1c03      	adds	r3, r0, #0
 800a744:	1c18      	adds	r0, r3, #0
 800a746:	f009 fc7d 	bl	8014044 <floorf>
 800a74a:	1c03      	adds	r3, r0, #0
 800a74c:	61bb      	str	r3, [r7, #24]
 800a74e:	4980      	ldr	r1, [pc, #512]	; (800a950 <SP100_ISI_Ctrl_No_Hysteresis+0xcc4>)
 800a750:	69b8      	ldr	r0, [r7, #24]
 800a752:	f7f5 febb 	bl	80004cc <__aeabi_fcmplt>
 800a756:	1e03      	subs	r3, r0, #0
 800a758:	d001      	beq.n	800a75e <SP100_ISI_Ctrl_No_Hysteresis+0xad2>
 800a75a:	4b7d      	ldr	r3, [pc, #500]	; (800a950 <SP100_ISI_Ctrl_No_Hysteresis+0xcc4>)
 800a75c:	61bb      	str	r3, [r7, #24]
 800a75e:	21fe      	movs	r1, #254	; 0xfe
 800a760:	0589      	lsls	r1, r1, #22
 800a762:	69b8      	ldr	r0, [r7, #24]
 800a764:	f7f6 fb7e 	bl	8000e64 <__aeabi_fsub>
 800a768:	1c03      	adds	r3, r0, #0
 800a76a:	61bb      	str	r3, [r7, #24]
 800a76c:	4b73      	ldr	r3, [pc, #460]	; (800a93c <SP100_ISI_Ctrl_No_Hysteresis+0xcb0>)
 800a76e:	781b      	ldrb	r3, [r3, #0]
 800a770:	0018      	movs	r0, r3
 800a772:	f7f6 fd5b 	bl	800122c <__aeabi_i2f>
 800a776:	1c03      	adds	r3, r0, #0
 800a778:	1c19      	adds	r1, r3, #0
 800a77a:	69b8      	ldr	r0, [r7, #24]
 800a77c:	f7f5 fee6 	bl	800054c <__aeabi_fadd>
 800a780:	1c03      	adds	r3, r0, #0
 800a782:	61bb      	str	r3, [r7, #24]
 800a784:	2100      	movs	r1, #0
 800a786:	69b8      	ldr	r0, [r7, #24]
 800a788:	f7f5 fea0 	bl	80004cc <__aeabi_fcmplt>
 800a78c:	1e03      	subs	r3, r0, #0
 800a78e:	d001      	beq.n	800a794 <SP100_ISI_Ctrl_No_Hysteresis+0xb08>
 800a790:	2300      	movs	r3, #0
 800a792:	61bb      	str	r3, [r7, #24]
 800a794:	496d      	ldr	r1, [pc, #436]	; (800a94c <SP100_ISI_Ctrl_No_Hysteresis+0xcc0>)
 800a796:	69b8      	ldr	r0, [r7, #24]
 800a798:	f7f5 feac 	bl	80004f4 <__aeabi_fcmpgt>
 800a79c:	1e03      	subs	r3, r0, #0
 800a79e:	d001      	beq.n	800a7a4 <SP100_ISI_Ctrl_No_Hysteresis+0xb18>
 800a7a0:	4b6a      	ldr	r3, [pc, #424]	; (800a94c <SP100_ISI_Ctrl_No_Hysteresis+0xcc0>)
 800a7a2:	61bb      	str	r3, [r7, #24]
 800a7a4:	69b8      	ldr	r0, [r7, #24]
 800a7a6:	f7f5 feb9 	bl	800051c <__aeabi_f2uiz>
 800a7aa:	0003      	movs	r3, r0
 800a7ac:	b2da      	uxtb	r2, r3
 800a7ae:	4b63      	ldr	r3, [pc, #396]	; (800a93c <SP100_ISI_Ctrl_No_Hysteresis+0xcb0>)
 800a7b0:	701a      	strb	r2, [r3, #0]
 800a7b2:	4b62      	ldr	r3, [pc, #392]	; (800a93c <SP100_ISI_Ctrl_No_Hysteresis+0xcb0>)
 800a7b4:	781a      	ldrb	r2, [r3, #0]
 800a7b6:	4b67      	ldr	r3, [pc, #412]	; (800a954 <SP100_ISI_Ctrl_No_Hysteresis+0xcc8>)
 800a7b8:	701a      	strb	r2, [r3, #0]
 800a7ba:	4b67      	ldr	r3, [pc, #412]	; (800a958 <SP100_ISI_Ctrl_No_Hysteresis+0xccc>)
 800a7bc:	781b      	ldrb	r3, [r3, #0]
 800a7be:	2b02      	cmp	r3, #2
 800a7c0:	d100      	bne.n	800a7c4 <SP100_ISI_Ctrl_No_Hysteresis+0xb38>
 800a7c2:	e2af      	b.n	800ad24 <SP100_ISI_Ctrl_No_Hysteresis+0x1098>
 800a7c4:	4b5a      	ldr	r3, [pc, #360]	; (800a930 <SP100_ISI_Ctrl_No_Hysteresis+0xca4>)
 800a7c6:	681a      	ldr	r2, [r3, #0]
 800a7c8:	4b5d      	ldr	r3, [pc, #372]	; (800a940 <SP100_ISI_Ctrl_No_Hysteresis+0xcb4>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	1c19      	adds	r1, r3, #0
 800a7ce:	1c10      	adds	r0, r2, #0
 800a7d0:	f7f6 fb48 	bl	8000e64 <__aeabi_fsub>
 800a7d4:	1c03      	adds	r3, r0, #0
 800a7d6:	2100      	movs	r1, #0
 800a7d8:	1c18      	adds	r0, r3, #0
 800a7da:	f7f5 fe95 	bl	8000508 <__aeabi_fcmpge>
 800a7de:	1e03      	subs	r3, r0, #0
 800a7e0:	d100      	bne.n	800a7e4 <SP100_ISI_Ctrl_No_Hysteresis+0xb58>
 800a7e2:	e171      	b.n	800aac8 <SP100_ISI_Ctrl_No_Hysteresis+0xe3c>
 800a7e4:	4b5d      	ldr	r3, [pc, #372]	; (800a95c <SP100_ISI_Ctrl_No_Hysteresis+0xcd0>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	495d      	ldr	r1, [pc, #372]	; (800a960 <SP100_ISI_Ctrl_No_Hysteresis+0xcd4>)
 800a7ea:	1c18      	adds	r0, r3, #0
 800a7ec:	f7f5 fe8c 	bl	8000508 <__aeabi_fcmpge>
 800a7f0:	1e03      	subs	r3, r0, #0
 800a7f2:	d100      	bne.n	800a7f6 <SP100_ISI_Ctrl_No_Hysteresis+0xb6a>
 800a7f4:	e0be      	b.n	800a974 <SP100_ISI_Ctrl_No_Hysteresis+0xce8>
 800a7f6:	4b4e      	ldr	r3, [pc, #312]	; (800a930 <SP100_ISI_Ctrl_No_Hysteresis+0xca4>)
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	4b4e      	ldr	r3, [pc, #312]	; (800a934 <SP100_ISI_Ctrl_No_Hysteresis+0xca8>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	1c19      	adds	r1, r3, #0
 800a800:	1c10      	adds	r0, r2, #0
 800a802:	f7f6 fb2f 	bl	8000e64 <__aeabi_fsub>
 800a806:	1c03      	adds	r3, r0, #0
 800a808:	4956      	ldr	r1, [pc, #344]	; (800a964 <SP100_ISI_Ctrl_No_Hysteresis+0xcd8>)
 800a80a:	1c18      	adds	r0, r3, #0
 800a80c:	f7f5 fe68 	bl	80004e0 <__aeabi_fcmple>
 800a810:	1e03      	subs	r3, r0, #0
 800a812:	d033      	beq.n	800a87c <SP100_ISI_Ctrl_No_Hysteresis+0xbf0>
 800a814:	4b46      	ldr	r3, [pc, #280]	; (800a930 <SP100_ISI_Ctrl_No_Hysteresis+0xca4>)
 800a816:	681a      	ldr	r2, [r3, #0]
 800a818:	4b46      	ldr	r3, [pc, #280]	; (800a934 <SP100_ISI_Ctrl_No_Hysteresis+0xca8>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	1c19      	adds	r1, r3, #0
 800a81e:	1c10      	adds	r0, r2, #0
 800a820:	f7f6 fb20 	bl	8000e64 <__aeabi_fsub>
 800a824:	1c03      	adds	r3, r0, #0
 800a826:	1c18      	adds	r0, r3, #0
 800a828:	f7f8 fb34 	bl	8002e94 <__aeabi_f2d>
 800a82c:	4a4e      	ldr	r2, [pc, #312]	; (800a968 <SP100_ISI_Ctrl_No_Hysteresis+0xcdc>)
 800a82e:	4b4f      	ldr	r3, [pc, #316]	; (800a96c <SP100_ISI_Ctrl_No_Hysteresis+0xce0>)
 800a830:	f7f7 fc88 	bl	8002144 <__aeabi_dmul>
 800a834:	0002      	movs	r2, r0
 800a836:	000b      	movs	r3, r1
 800a838:	0010      	movs	r0, r2
 800a83a:	0019      	movs	r1, r3
 800a83c:	f7f8 fb72 	bl	8002f24 <__aeabi_d2f>
 800a840:	1c03      	adds	r3, r0, #0
 800a842:	005b      	lsls	r3, r3, #1
 800a844:	085b      	lsrs	r3, r3, #1
 800a846:	21fe      	movs	r1, #254	; 0xfe
 800a848:	0589      	lsls	r1, r1, #22
 800a84a:	1c18      	adds	r0, r3, #0
 800a84c:	f7f5 fe7e 	bl	800054c <__aeabi_fadd>
 800a850:	1c03      	adds	r3, r0, #0
 800a852:	1c18      	adds	r0, r3, #0
 800a854:	f009 fbb8 	bl	8013fc8 <ceilf>
 800a858:	1c03      	adds	r3, r0, #0
 800a85a:	1c18      	adds	r0, r3, #0
 800a85c:	f7f6 fcc6 	bl	80011ec <__aeabi_f2iz>
 800a860:	0003      	movs	r3, r0
 800a862:	603b      	str	r3, [r7, #0]
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	2b08      	cmp	r3, #8
 800a868:	dd03      	ble.n	800a872 <SP100_ISI_Ctrl_No_Hysteresis+0xbe6>
 800a86a:	4b41      	ldr	r3, [pc, #260]	; (800a970 <SP100_ISI_Ctrl_No_Hysteresis+0xce4>)
 800a86c:	2208      	movs	r2, #8
 800a86e:	701a      	strb	r2, [r3, #0]
 800a870:	e258      	b.n	800ad24 <SP100_ISI_Ctrl_No_Hysteresis+0x1098>
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	b2da      	uxtb	r2, r3
 800a876:	4b3e      	ldr	r3, [pc, #248]	; (800a970 <SP100_ISI_Ctrl_No_Hysteresis+0xce4>)
 800a878:	701a      	strb	r2, [r3, #0]
 800a87a:	e253      	b.n	800ad24 <SP100_ISI_Ctrl_No_Hysteresis+0x1098>
 800a87c:	4b2c      	ldr	r3, [pc, #176]	; (800a930 <SP100_ISI_Ctrl_No_Hysteresis+0xca4>)
 800a87e:	681a      	ldr	r2, [r3, #0]
 800a880:	4b2c      	ldr	r3, [pc, #176]	; (800a934 <SP100_ISI_Ctrl_No_Hysteresis+0xca8>)
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	1c19      	adds	r1, r3, #0
 800a886:	1c10      	adds	r0, r2, #0
 800a888:	f7f6 faec 	bl	8000e64 <__aeabi_fsub>
 800a88c:	1c03      	adds	r3, r0, #0
 800a88e:	4935      	ldr	r1, [pc, #212]	; (800a964 <SP100_ISI_Ctrl_No_Hysteresis+0xcd8>)
 800a890:	1c18      	adds	r0, r3, #0
 800a892:	f7f5 fe2f 	bl	80004f4 <__aeabi_fcmpgt>
 800a896:	1e03      	subs	r3, r0, #0
 800a898:	d013      	beq.n	800a8c2 <SP100_ISI_Ctrl_No_Hysteresis+0xc36>
 800a89a:	4b25      	ldr	r3, [pc, #148]	; (800a930 <SP100_ISI_Ctrl_No_Hysteresis+0xca4>)
 800a89c:	681a      	ldr	r2, [r3, #0]
 800a89e:	4b25      	ldr	r3, [pc, #148]	; (800a934 <SP100_ISI_Ctrl_No_Hysteresis+0xca8>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	1c19      	adds	r1, r3, #0
 800a8a4:	1c10      	adds	r0, r2, #0
 800a8a6:	f7f6 fadd 	bl	8000e64 <__aeabi_fsub>
 800a8aa:	1c03      	adds	r3, r0, #0
 800a8ac:	21fe      	movs	r1, #254	; 0xfe
 800a8ae:	0589      	lsls	r1, r1, #22
 800a8b0:	1c18      	adds	r0, r3, #0
 800a8b2:	f7f5 fe0b 	bl	80004cc <__aeabi_fcmplt>
 800a8b6:	1e03      	subs	r3, r0, #0
 800a8b8:	d003      	beq.n	800a8c2 <SP100_ISI_Ctrl_No_Hysteresis+0xc36>
 800a8ba:	4b2d      	ldr	r3, [pc, #180]	; (800a970 <SP100_ISI_Ctrl_No_Hysteresis+0xce4>)
 800a8bc:	2201      	movs	r2, #1
 800a8be:	701a      	strb	r2, [r3, #0]
 800a8c0:	e230      	b.n	800ad24 <SP100_ISI_Ctrl_No_Hysteresis+0x1098>
 800a8c2:	4b1b      	ldr	r3, [pc, #108]	; (800a930 <SP100_ISI_Ctrl_No_Hysteresis+0xca4>)
 800a8c4:	681a      	ldr	r2, [r3, #0]
 800a8c6:	4b1b      	ldr	r3, [pc, #108]	; (800a934 <SP100_ISI_Ctrl_No_Hysteresis+0xca8>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	1c19      	adds	r1, r3, #0
 800a8cc:	1c10      	adds	r0, r2, #0
 800a8ce:	f7f6 fac9 	bl	8000e64 <__aeabi_fsub>
 800a8d2:	1c03      	adds	r3, r0, #0
 800a8d4:	21fe      	movs	r1, #254	; 0xfe
 800a8d6:	0589      	lsls	r1, r1, #22
 800a8d8:	1c18      	adds	r0, r3, #0
 800a8da:	f7f5 fe15 	bl	8000508 <__aeabi_fcmpge>
 800a8de:	1e03      	subs	r3, r0, #0
 800a8e0:	d100      	bne.n	800a8e4 <SP100_ISI_Ctrl_No_Hysteresis+0xc58>
 800a8e2:	e21f      	b.n	800ad24 <SP100_ISI_Ctrl_No_Hysteresis+0x1098>
 800a8e4:	4b12      	ldr	r3, [pc, #72]	; (800a930 <SP100_ISI_Ctrl_No_Hysteresis+0xca4>)
 800a8e6:	681a      	ldr	r2, [r3, #0]
 800a8e8:	4b12      	ldr	r3, [pc, #72]	; (800a934 <SP100_ISI_Ctrl_No_Hysteresis+0xca8>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	1c19      	adds	r1, r3, #0
 800a8ee:	1c10      	adds	r0, r2, #0
 800a8f0:	f7f6 fab8 	bl	8000e64 <__aeabi_fsub>
 800a8f4:	1c03      	adds	r3, r0, #0
 800a8f6:	005b      	lsls	r3, r3, #1
 800a8f8:	085b      	lsrs	r3, r3, #1
 800a8fa:	21fc      	movs	r1, #252	; 0xfc
 800a8fc:	0589      	lsls	r1, r1, #22
 800a8fe:	1c18      	adds	r0, r3, #0
 800a900:	f7f5 fe24 	bl	800054c <__aeabi_fadd>
 800a904:	1c03      	adds	r3, r0, #0
 800a906:	1c18      	adds	r0, r3, #0
 800a908:	f009 fb5e 	bl	8013fc8 <ceilf>
 800a90c:	1c03      	adds	r3, r0, #0
 800a90e:	1c18      	adds	r0, r3, #0
 800a910:	f7f6 fc6c 	bl	80011ec <__aeabi_f2iz>
 800a914:	0003      	movs	r3, r0
 800a916:	607b      	str	r3, [r7, #4]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2b08      	cmp	r3, #8
 800a91c:	dd03      	ble.n	800a926 <SP100_ISI_Ctrl_No_Hysteresis+0xc9a>
 800a91e:	4b14      	ldr	r3, [pc, #80]	; (800a970 <SP100_ISI_Ctrl_No_Hysteresis+0xce4>)
 800a920:	2208      	movs	r2, #8
 800a922:	701a      	strb	r2, [r3, #0]
 800a924:	e1fe      	b.n	800ad24 <SP100_ISI_Ctrl_No_Hysteresis+0x1098>
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	b2da      	uxtb	r2, r3
 800a92a:	4b11      	ldr	r3, [pc, #68]	; (800a970 <SP100_ISI_Ctrl_No_Hysteresis+0xce4>)
 800a92c:	701a      	strb	r2, [r3, #0]
 800a92e:	e1f9      	b.n	800ad24 <SP100_ISI_Ctrl_No_Hysteresis+0x1098>
 800a930:	20000014 	.word	0x20000014
 800a934:	2000058c 	.word	0x2000058c
 800a938:	c0a00000 	.word	0xc0a00000
 800a93c:	200005b2 	.word	0x200005b2
 800a940:	20000594 	.word	0x20000594
 800a944:	41200000 	.word	0x41200000
 800a948:	40400000 	.word	0x40400000
 800a94c:	41a00000 	.word	0x41a00000
 800a950:	c1200000 	.word	0xc1200000
 800a954:	20000573 	.word	0x20000573
 800a958:	20000570 	.word	0x20000570
 800a95c:	20000590 	.word	0x20000590
 800a960:	42820000 	.word	0x42820000
 800a964:	bf800000 	.word	0xbf800000
 800a968:	9999999a 	.word	0x9999999a
 800a96c:	3fd99999 	.word	0x3fd99999
 800a970:	200005b3 	.word	0x200005b3
 800a974:	4bd9      	ldr	r3, [pc, #868]	; (800acdc <SP100_ISI_Ctrl_No_Hysteresis+0x1050>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	49d9      	ldr	r1, [pc, #868]	; (800ace0 <SP100_ISI_Ctrl_No_Hysteresis+0x1054>)
 800a97a:	1c18      	adds	r0, r3, #0
 800a97c:	f7f5 fdba 	bl	80004f4 <__aeabi_fcmpgt>
 800a980:	1e03      	subs	r3, r0, #0
 800a982:	d100      	bne.n	800a986 <SP100_ISI_Ctrl_No_Hysteresis+0xcfa>
 800a984:	e093      	b.n	800aaae <SP100_ISI_Ctrl_No_Hysteresis+0xe22>
 800a986:	4bd5      	ldr	r3, [pc, #852]	; (800acdc <SP100_ISI_Ctrl_No_Hysteresis+0x1050>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	49d6      	ldr	r1, [pc, #856]	; (800ace4 <SP100_ISI_Ctrl_No_Hysteresis+0x1058>)
 800a98c:	1c18      	adds	r0, r3, #0
 800a98e:	f7f5 fd9d 	bl	80004cc <__aeabi_fcmplt>
 800a992:	1e03      	subs	r3, r0, #0
 800a994:	d100      	bne.n	800a998 <SP100_ISI_Ctrl_No_Hysteresis+0xd0c>
 800a996:	e08a      	b.n	800aaae <SP100_ISI_Ctrl_No_Hysteresis+0xe22>
 800a998:	4bd3      	ldr	r3, [pc, #844]	; (800ace8 <SP100_ISI_Ctrl_No_Hysteresis+0x105c>)
 800a99a:	681a      	ldr	r2, [r3, #0]
 800a99c:	4bd3      	ldr	r3, [pc, #844]	; (800acec <SP100_ISI_Ctrl_No_Hysteresis+0x1060>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	1c19      	adds	r1, r3, #0
 800a9a2:	1c10      	adds	r0, r2, #0
 800a9a4:	f7f6 fa5e 	bl	8000e64 <__aeabi_fsub>
 800a9a8:	1c03      	adds	r3, r0, #0
 800a9aa:	49d1      	ldr	r1, [pc, #836]	; (800acf0 <SP100_ISI_Ctrl_No_Hysteresis+0x1064>)
 800a9ac:	1c18      	adds	r0, r3, #0
 800a9ae:	f7f5 fd8d 	bl	80004cc <__aeabi_fcmplt>
 800a9b2:	1e03      	subs	r3, r0, #0
 800a9b4:	d023      	beq.n	800a9fe <SP100_ISI_Ctrl_No_Hysteresis+0xd72>
 800a9b6:	4bc9      	ldr	r3, [pc, #804]	; (800acdc <SP100_ISI_Ctrl_No_Hysteresis+0x1050>)
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	1c18      	adds	r0, r3, #0
 800a9bc:	f7f8 fa6a 	bl	8002e94 <__aeabi_f2d>
 800a9c0:	4acc      	ldr	r2, [pc, #816]	; (800acf4 <SP100_ISI_Ctrl_No_Hysteresis+0x1068>)
 800a9c2:	4bcd      	ldr	r3, [pc, #820]	; (800acf8 <SP100_ISI_Ctrl_No_Hysteresis+0x106c>)
 800a9c4:	f7f7 fbbe 	bl	8002144 <__aeabi_dmul>
 800a9c8:	0002      	movs	r2, r0
 800a9ca:	000b      	movs	r3, r1
 800a9cc:	0010      	movs	r0, r2
 800a9ce:	0019      	movs	r1, r3
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	4bca      	ldr	r3, [pc, #808]	; (800acfc <SP100_ISI_Ctrl_No_Hysteresis+0x1070>)
 800a9d4:	f7f7 fe22 	bl	800261c <__aeabi_dsub>
 800a9d8:	0002      	movs	r2, r0
 800a9da:	000b      	movs	r3, r1
 800a9dc:	0010      	movs	r0, r2
 800a9de:	0019      	movs	r1, r3
 800a9e0:	f7f8 faa0 	bl	8002f24 <__aeabi_d2f>
 800a9e4:	1c03      	adds	r3, r0, #0
 800a9e6:	1c18      	adds	r0, r3, #0
 800a9e8:	f009 fb2c 	bl	8014044 <floorf>
 800a9ec:	1c03      	adds	r3, r0, #0
 800a9ee:	1c18      	adds	r0, r3, #0
 800a9f0:	f7f5 fd94 	bl	800051c <__aeabi_f2uiz>
 800a9f4:	0003      	movs	r3, r0
 800a9f6:	b2da      	uxtb	r2, r3
 800a9f8:	4bc1      	ldr	r3, [pc, #772]	; (800ad00 <SP100_ISI_Ctrl_No_Hysteresis+0x1074>)
 800a9fa:	701a      	strb	r2, [r3, #0]
 800a9fc:	e192      	b.n	800ad24 <SP100_ISI_Ctrl_No_Hysteresis+0x1098>
 800a9fe:	4bba      	ldr	r3, [pc, #744]	; (800ace8 <SP100_ISI_Ctrl_No_Hysteresis+0x105c>)
 800aa00:	681a      	ldr	r2, [r3, #0]
 800aa02:	4bba      	ldr	r3, [pc, #744]	; (800acec <SP100_ISI_Ctrl_No_Hysteresis+0x1060>)
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	1c19      	adds	r1, r3, #0
 800aa08:	1c10      	adds	r0, r2, #0
 800aa0a:	f7f6 fa2b 	bl	8000e64 <__aeabi_fsub>
 800aa0e:	1c03      	adds	r3, r0, #0
 800aa10:	49b7      	ldr	r1, [pc, #732]	; (800acf0 <SP100_ISI_Ctrl_No_Hysteresis+0x1064>)
 800aa12:	1c18      	adds	r0, r3, #0
 800aa14:	f7f5 fd78 	bl	8000508 <__aeabi_fcmpge>
 800aa18:	1e03      	subs	r3, r0, #0
 800aa1a:	d013      	beq.n	800aa44 <SP100_ISI_Ctrl_No_Hysteresis+0xdb8>
 800aa1c:	4bb2      	ldr	r3, [pc, #712]	; (800ace8 <SP100_ISI_Ctrl_No_Hysteresis+0x105c>)
 800aa1e:	681a      	ldr	r2, [r3, #0]
 800aa20:	4bb2      	ldr	r3, [pc, #712]	; (800acec <SP100_ISI_Ctrl_No_Hysteresis+0x1060>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	1c19      	adds	r1, r3, #0
 800aa26:	1c10      	adds	r0, r2, #0
 800aa28:	f7f6 fa1c 	bl	8000e64 <__aeabi_fsub>
 800aa2c:	1c03      	adds	r3, r0, #0
 800aa2e:	21fe      	movs	r1, #254	; 0xfe
 800aa30:	0589      	lsls	r1, r1, #22
 800aa32:	1c18      	adds	r0, r3, #0
 800aa34:	f7f5 fd54 	bl	80004e0 <__aeabi_fcmple>
 800aa38:	1e03      	subs	r3, r0, #0
 800aa3a:	d003      	beq.n	800aa44 <SP100_ISI_Ctrl_No_Hysteresis+0xdb8>
 800aa3c:	4bb0      	ldr	r3, [pc, #704]	; (800ad00 <SP100_ISI_Ctrl_No_Hysteresis+0x1074>)
 800aa3e:	2201      	movs	r2, #1
 800aa40:	701a      	strb	r2, [r3, #0]
 800aa42:	e16f      	b.n	800ad24 <SP100_ISI_Ctrl_No_Hysteresis+0x1098>
 800aa44:	4ba8      	ldr	r3, [pc, #672]	; (800ace8 <SP100_ISI_Ctrl_No_Hysteresis+0x105c>)
 800aa46:	681a      	ldr	r2, [r3, #0]
 800aa48:	4ba8      	ldr	r3, [pc, #672]	; (800acec <SP100_ISI_Ctrl_No_Hysteresis+0x1060>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	1c19      	adds	r1, r3, #0
 800aa4e:	1c10      	adds	r0, r2, #0
 800aa50:	f7f6 fa08 	bl	8000e64 <__aeabi_fsub>
 800aa54:	1c03      	adds	r3, r0, #0
 800aa56:	21fe      	movs	r1, #254	; 0xfe
 800aa58:	0589      	lsls	r1, r1, #22
 800aa5a:	1c18      	adds	r0, r3, #0
 800aa5c:	f7f5 fd4a 	bl	80004f4 <__aeabi_fcmpgt>
 800aa60:	1e03      	subs	r3, r0, #0
 800aa62:	d100      	bne.n	800aa66 <SP100_ISI_Ctrl_No_Hysteresis+0xdda>
 800aa64:	e15e      	b.n	800ad24 <SP100_ISI_Ctrl_No_Hysteresis+0x1098>
 800aa66:	4b9d      	ldr	r3, [pc, #628]	; (800acdc <SP100_ISI_Ctrl_No_Hysteresis+0x1050>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	1c18      	adds	r0, r3, #0
 800aa6c:	f7f8 fa12 	bl	8002e94 <__aeabi_f2d>
 800aa70:	4aa0      	ldr	r2, [pc, #640]	; (800acf4 <SP100_ISI_Ctrl_No_Hysteresis+0x1068>)
 800aa72:	4ba1      	ldr	r3, [pc, #644]	; (800acf8 <SP100_ISI_Ctrl_No_Hysteresis+0x106c>)
 800aa74:	f7f7 fb66 	bl	8002144 <__aeabi_dmul>
 800aa78:	0002      	movs	r2, r0
 800aa7a:	000b      	movs	r3, r1
 800aa7c:	0010      	movs	r0, r2
 800aa7e:	0019      	movs	r1, r3
 800aa80:	2200      	movs	r2, #0
 800aa82:	4b9e      	ldr	r3, [pc, #632]	; (800acfc <SP100_ISI_Ctrl_No_Hysteresis+0x1070>)
 800aa84:	f7f7 fdca 	bl	800261c <__aeabi_dsub>
 800aa88:	0002      	movs	r2, r0
 800aa8a:	000b      	movs	r3, r1
 800aa8c:	0010      	movs	r0, r2
 800aa8e:	0019      	movs	r1, r3
 800aa90:	f7f8 fa48 	bl	8002f24 <__aeabi_d2f>
 800aa94:	1c03      	adds	r3, r0, #0
 800aa96:	1c18      	adds	r0, r3, #0
 800aa98:	f009 fad4 	bl	8014044 <floorf>
 800aa9c:	1c03      	adds	r3, r0, #0
 800aa9e:	1c18      	adds	r0, r3, #0
 800aaa0:	f7f5 fd3c 	bl	800051c <__aeabi_f2uiz>
 800aaa4:	0003      	movs	r3, r0
 800aaa6:	b2da      	uxtb	r2, r3
 800aaa8:	4b95      	ldr	r3, [pc, #596]	; (800ad00 <SP100_ISI_Ctrl_No_Hysteresis+0x1074>)
 800aaaa:	701a      	strb	r2, [r3, #0]
 800aaac:	e13a      	b.n	800ad24 <SP100_ISI_Ctrl_No_Hysteresis+0x1098>
 800aaae:	4b8b      	ldr	r3, [pc, #556]	; (800acdc <SP100_ISI_Ctrl_No_Hysteresis+0x1050>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	498b      	ldr	r1, [pc, #556]	; (800ace0 <SP100_ISI_Ctrl_No_Hysteresis+0x1054>)
 800aab4:	1c18      	adds	r0, r3, #0
 800aab6:	f7f5 fd13 	bl	80004e0 <__aeabi_fcmple>
 800aaba:	1e03      	subs	r3, r0, #0
 800aabc:	d100      	bne.n	800aac0 <SP100_ISI_Ctrl_No_Hysteresis+0xe34>
 800aabe:	e131      	b.n	800ad24 <SP100_ISI_Ctrl_No_Hysteresis+0x1098>
 800aac0:	4b8f      	ldr	r3, [pc, #572]	; (800ad00 <SP100_ISI_Ctrl_No_Hysteresis+0x1074>)
 800aac2:	2201      	movs	r2, #1
 800aac4:	701a      	strb	r2, [r3, #0]
 800aac6:	e12d      	b.n	800ad24 <SP100_ISI_Ctrl_No_Hysteresis+0x1098>
 800aac8:	4b87      	ldr	r3, [pc, #540]	; (800ace8 <SP100_ISI_Ctrl_No_Hysteresis+0x105c>)
 800aaca:	681a      	ldr	r2, [r3, #0]
 800aacc:	4b8d      	ldr	r3, [pc, #564]	; (800ad04 <SP100_ISI_Ctrl_No_Hysteresis+0x1078>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	1c19      	adds	r1, r3, #0
 800aad2:	1c10      	adds	r0, r2, #0
 800aad4:	f7f6 f9c6 	bl	8000e64 <__aeabi_fsub>
 800aad8:	1c03      	adds	r3, r0, #0
 800aada:	2100      	movs	r1, #0
 800aadc:	1c18      	adds	r0, r3, #0
 800aade:	f7f5 fcf5 	bl	80004cc <__aeabi_fcmplt>
 800aae2:	1e03      	subs	r3, r0, #0
 800aae4:	d100      	bne.n	800aae8 <SP100_ISI_Ctrl_No_Hysteresis+0xe5c>
 800aae6:	e11d      	b.n	800ad24 <SP100_ISI_Ctrl_No_Hysteresis+0x1098>
 800aae8:	4b7f      	ldr	r3, [pc, #508]	; (800ace8 <SP100_ISI_Ctrl_No_Hysteresis+0x105c>)
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	4b85      	ldr	r3, [pc, #532]	; (800ad04 <SP100_ISI_Ctrl_No_Hysteresis+0x1078>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	1c19      	adds	r1, r3, #0
 800aaf2:	1c10      	adds	r0, r2, #0
 800aaf4:	f7f6 f9b6 	bl	8000e64 <__aeabi_fsub>
 800aaf8:	1c03      	adds	r3, r0, #0
 800aafa:	4983      	ldr	r1, [pc, #524]	; (800ad08 <SP100_ISI_Ctrl_No_Hysteresis+0x107c>)
 800aafc:	1c18      	adds	r0, r3, #0
 800aafe:	f7f5 fcf9 	bl	80004f4 <__aeabi_fcmpgt>
 800ab02:	1e03      	subs	r3, r0, #0
 800ab04:	d034      	beq.n	800ab70 <SP100_ISI_Ctrl_No_Hysteresis+0xee4>
 800ab06:	4b78      	ldr	r3, [pc, #480]	; (800ace8 <SP100_ISI_Ctrl_No_Hysteresis+0x105c>)
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	4b7e      	ldr	r3, [pc, #504]	; (800ad04 <SP100_ISI_Ctrl_No_Hysteresis+0x1078>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	1c19      	adds	r1, r3, #0
 800ab10:	1c10      	adds	r0, r2, #0
 800ab12:	f7f6 f9a7 	bl	8000e64 <__aeabi_fsub>
 800ab16:	1c03      	adds	r3, r0, #0
 800ab18:	2100      	movs	r1, #0
 800ab1a:	1c18      	adds	r0, r3, #0
 800ab1c:	f7f5 fcd6 	bl	80004cc <__aeabi_fcmplt>
 800ab20:	1e03      	subs	r3, r0, #0
 800ab22:	d025      	beq.n	800ab70 <SP100_ISI_Ctrl_No_Hysteresis+0xee4>
 800ab24:	4b70      	ldr	r3, [pc, #448]	; (800ace8 <SP100_ISI_Ctrl_No_Hysteresis+0x105c>)
 800ab26:	681a      	ldr	r2, [r3, #0]
 800ab28:	4b70      	ldr	r3, [pc, #448]	; (800acec <SP100_ISI_Ctrl_No_Hysteresis+0x1060>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	1c19      	adds	r1, r3, #0
 800ab2e:	1c10      	adds	r0, r2, #0
 800ab30:	f7f6 f998 	bl	8000e64 <__aeabi_fsub>
 800ab34:	1c03      	adds	r3, r0, #0
 800ab36:	005b      	lsls	r3, r3, #1
 800ab38:	085b      	lsrs	r3, r3, #1
 800ab3a:	21fc      	movs	r1, #252	; 0xfc
 800ab3c:	0589      	lsls	r1, r1, #22
 800ab3e:	1c18      	adds	r0, r3, #0
 800ab40:	f7f5 fd04 	bl	800054c <__aeabi_fadd>
 800ab44:	1c03      	adds	r3, r0, #0
 800ab46:	1c18      	adds	r0, r3, #0
 800ab48:	f009 fa3e 	bl	8013fc8 <ceilf>
 800ab4c:	1c03      	adds	r3, r0, #0
 800ab4e:	1c18      	adds	r0, r3, #0
 800ab50:	f7f6 fb4c 	bl	80011ec <__aeabi_f2iz>
 800ab54:	0003      	movs	r3, r0
 800ab56:	617b      	str	r3, [r7, #20]
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	2b08      	cmp	r3, #8
 800ab5c:	dd03      	ble.n	800ab66 <SP100_ISI_Ctrl_No_Hysteresis+0xeda>
 800ab5e:	4b68      	ldr	r3, [pc, #416]	; (800ad00 <SP100_ISI_Ctrl_No_Hysteresis+0x1074>)
 800ab60:	2208      	movs	r2, #8
 800ab62:	701a      	strb	r2, [r3, #0]
 800ab64:	e0de      	b.n	800ad24 <SP100_ISI_Ctrl_No_Hysteresis+0x1098>
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	b2da      	uxtb	r2, r3
 800ab6a:	4b65      	ldr	r3, [pc, #404]	; (800ad00 <SP100_ISI_Ctrl_No_Hysteresis+0x1074>)
 800ab6c:	701a      	strb	r2, [r3, #0]
 800ab6e:	e0d9      	b.n	800ad24 <SP100_ISI_Ctrl_No_Hysteresis+0x1098>
 800ab70:	4b5d      	ldr	r3, [pc, #372]	; (800ace8 <SP100_ISI_Ctrl_No_Hysteresis+0x105c>)
 800ab72:	681a      	ldr	r2, [r3, #0]
 800ab74:	4b63      	ldr	r3, [pc, #396]	; (800ad04 <SP100_ISI_Ctrl_No_Hysteresis+0x1078>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	1c19      	adds	r1, r3, #0
 800ab7a:	1c10      	adds	r0, r2, #0
 800ab7c:	f7f6 f972 	bl	8000e64 <__aeabi_fsub>
 800ab80:	1c03      	adds	r3, r0, #0
 800ab82:	4962      	ldr	r1, [pc, #392]	; (800ad0c <SP100_ISI_Ctrl_No_Hysteresis+0x1080>)
 800ab84:	1c18      	adds	r0, r3, #0
 800ab86:	f7f5 fcb5 	bl	80004f4 <__aeabi_fcmpgt>
 800ab8a:	1e03      	subs	r3, r0, #0
 800ab8c:	d034      	beq.n	800abf8 <SP100_ISI_Ctrl_No_Hysteresis+0xf6c>
 800ab8e:	4b56      	ldr	r3, [pc, #344]	; (800ace8 <SP100_ISI_Ctrl_No_Hysteresis+0x105c>)
 800ab90:	681a      	ldr	r2, [r3, #0]
 800ab92:	4b5c      	ldr	r3, [pc, #368]	; (800ad04 <SP100_ISI_Ctrl_No_Hysteresis+0x1078>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	1c19      	adds	r1, r3, #0
 800ab98:	1c10      	adds	r0, r2, #0
 800ab9a:	f7f6 f963 	bl	8000e64 <__aeabi_fsub>
 800ab9e:	1c03      	adds	r3, r0, #0
 800aba0:	4959      	ldr	r1, [pc, #356]	; (800ad08 <SP100_ISI_Ctrl_No_Hysteresis+0x107c>)
 800aba2:	1c18      	adds	r0, r3, #0
 800aba4:	f7f5 fc9c 	bl	80004e0 <__aeabi_fcmple>
 800aba8:	1e03      	subs	r3, r0, #0
 800abaa:	d025      	beq.n	800abf8 <SP100_ISI_Ctrl_No_Hysteresis+0xf6c>
 800abac:	4b4e      	ldr	r3, [pc, #312]	; (800ace8 <SP100_ISI_Ctrl_No_Hysteresis+0x105c>)
 800abae:	681a      	ldr	r2, [r3, #0]
 800abb0:	4b4e      	ldr	r3, [pc, #312]	; (800acec <SP100_ISI_Ctrl_No_Hysteresis+0x1060>)
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	1c19      	adds	r1, r3, #0
 800abb6:	1c10      	adds	r0, r2, #0
 800abb8:	f7f6 f954 	bl	8000e64 <__aeabi_fsub>
 800abbc:	1c03      	adds	r3, r0, #0
 800abbe:	005b      	lsls	r3, r3, #1
 800abc0:	085b      	lsrs	r3, r3, #1
 800abc2:	21ff      	movs	r1, #255	; 0xff
 800abc4:	0589      	lsls	r1, r1, #22
 800abc6:	1c18      	adds	r0, r3, #0
 800abc8:	f7f5 fcc0 	bl	800054c <__aeabi_fadd>
 800abcc:	1c03      	adds	r3, r0, #0
 800abce:	1c18      	adds	r0, r3, #0
 800abd0:	f009 f9fa 	bl	8013fc8 <ceilf>
 800abd4:	1c03      	adds	r3, r0, #0
 800abd6:	1c18      	adds	r0, r3, #0
 800abd8:	f7f6 fb08 	bl	80011ec <__aeabi_f2iz>
 800abdc:	0003      	movs	r3, r0
 800abde:	613b      	str	r3, [r7, #16]
 800abe0:	693b      	ldr	r3, [r7, #16]
 800abe2:	2b08      	cmp	r3, #8
 800abe4:	dd03      	ble.n	800abee <SP100_ISI_Ctrl_No_Hysteresis+0xf62>
 800abe6:	4b46      	ldr	r3, [pc, #280]	; (800ad00 <SP100_ISI_Ctrl_No_Hysteresis+0x1074>)
 800abe8:	2208      	movs	r2, #8
 800abea:	701a      	strb	r2, [r3, #0]
 800abec:	e09a      	b.n	800ad24 <SP100_ISI_Ctrl_No_Hysteresis+0x1098>
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	b2da      	uxtb	r2, r3
 800abf2:	4b43      	ldr	r3, [pc, #268]	; (800ad00 <SP100_ISI_Ctrl_No_Hysteresis+0x1074>)
 800abf4:	701a      	strb	r2, [r3, #0]
 800abf6:	e095      	b.n	800ad24 <SP100_ISI_Ctrl_No_Hysteresis+0x1098>
 800abf8:	4b3b      	ldr	r3, [pc, #236]	; (800ace8 <SP100_ISI_Ctrl_No_Hysteresis+0x105c>)
 800abfa:	681a      	ldr	r2, [r3, #0]
 800abfc:	4b41      	ldr	r3, [pc, #260]	; (800ad04 <SP100_ISI_Ctrl_No_Hysteresis+0x1078>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	1c19      	adds	r1, r3, #0
 800ac02:	1c10      	adds	r0, r2, #0
 800ac04:	f7f6 f92e 	bl	8000e64 <__aeabi_fsub>
 800ac08:	1c03      	adds	r3, r0, #0
 800ac0a:	4941      	ldr	r1, [pc, #260]	; (800ad10 <SP100_ISI_Ctrl_No_Hysteresis+0x1084>)
 800ac0c:	1c18      	adds	r0, r3, #0
 800ac0e:	f7f5 fc71 	bl	80004f4 <__aeabi_fcmpgt>
 800ac12:	1e03      	subs	r3, r0, #0
 800ac14:	d033      	beq.n	800ac7e <SP100_ISI_Ctrl_No_Hysteresis+0xff2>
 800ac16:	4b34      	ldr	r3, [pc, #208]	; (800ace8 <SP100_ISI_Ctrl_No_Hysteresis+0x105c>)
 800ac18:	681a      	ldr	r2, [r3, #0]
 800ac1a:	4b3a      	ldr	r3, [pc, #232]	; (800ad04 <SP100_ISI_Ctrl_No_Hysteresis+0x1078>)
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	1c19      	adds	r1, r3, #0
 800ac20:	1c10      	adds	r0, r2, #0
 800ac22:	f7f6 f91f 	bl	8000e64 <__aeabi_fsub>
 800ac26:	1c03      	adds	r3, r0, #0
 800ac28:	4938      	ldr	r1, [pc, #224]	; (800ad0c <SP100_ISI_Ctrl_No_Hysteresis+0x1080>)
 800ac2a:	1c18      	adds	r0, r3, #0
 800ac2c:	f7f5 fc58 	bl	80004e0 <__aeabi_fcmple>
 800ac30:	1e03      	subs	r3, r0, #0
 800ac32:	d024      	beq.n	800ac7e <SP100_ISI_Ctrl_No_Hysteresis+0xff2>
 800ac34:	4b2c      	ldr	r3, [pc, #176]	; (800ace8 <SP100_ISI_Ctrl_No_Hysteresis+0x105c>)
 800ac36:	681a      	ldr	r2, [r3, #0]
 800ac38:	4b2c      	ldr	r3, [pc, #176]	; (800acec <SP100_ISI_Ctrl_No_Hysteresis+0x1060>)
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	1c19      	adds	r1, r3, #0
 800ac3e:	1c10      	adds	r0, r2, #0
 800ac40:	f7f6 f910 	bl	8000e64 <__aeabi_fsub>
 800ac44:	1c03      	adds	r3, r0, #0
 800ac46:	005b      	lsls	r3, r3, #1
 800ac48:	085b      	lsrs	r3, r3, #1
 800ac4a:	4932      	ldr	r1, [pc, #200]	; (800ad14 <SP100_ISI_Ctrl_No_Hysteresis+0x1088>)
 800ac4c:	1c18      	adds	r0, r3, #0
 800ac4e:	f7f5 fc7d 	bl	800054c <__aeabi_fadd>
 800ac52:	1c03      	adds	r3, r0, #0
 800ac54:	1c18      	adds	r0, r3, #0
 800ac56:	f009 f9b7 	bl	8013fc8 <ceilf>
 800ac5a:	1c03      	adds	r3, r0, #0
 800ac5c:	1c18      	adds	r0, r3, #0
 800ac5e:	f7f6 fac5 	bl	80011ec <__aeabi_f2iz>
 800ac62:	0003      	movs	r3, r0
 800ac64:	60fb      	str	r3, [r7, #12]
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	2b08      	cmp	r3, #8
 800ac6a:	dd03      	ble.n	800ac74 <SP100_ISI_Ctrl_No_Hysteresis+0xfe8>
 800ac6c:	4b24      	ldr	r3, [pc, #144]	; (800ad00 <SP100_ISI_Ctrl_No_Hysteresis+0x1074>)
 800ac6e:	2208      	movs	r2, #8
 800ac70:	701a      	strb	r2, [r3, #0]
 800ac72:	e057      	b.n	800ad24 <SP100_ISI_Ctrl_No_Hysteresis+0x1098>
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	b2da      	uxtb	r2, r3
 800ac78:	4b21      	ldr	r3, [pc, #132]	; (800ad00 <SP100_ISI_Ctrl_No_Hysteresis+0x1074>)
 800ac7a:	701a      	strb	r2, [r3, #0]
 800ac7c:	e052      	b.n	800ad24 <SP100_ISI_Ctrl_No_Hysteresis+0x1098>
 800ac7e:	4b1a      	ldr	r3, [pc, #104]	; (800ace8 <SP100_ISI_Ctrl_No_Hysteresis+0x105c>)
 800ac80:	681a      	ldr	r2, [r3, #0]
 800ac82:	4b20      	ldr	r3, [pc, #128]	; (800ad04 <SP100_ISI_Ctrl_No_Hysteresis+0x1078>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	1c19      	adds	r1, r3, #0
 800ac88:	1c10      	adds	r0, r2, #0
 800ac8a:	f7f6 f8eb 	bl	8000e64 <__aeabi_fsub>
 800ac8e:	1c03      	adds	r3, r0, #0
 800ac90:	491f      	ldr	r1, [pc, #124]	; (800ad10 <SP100_ISI_Ctrl_No_Hysteresis+0x1084>)
 800ac92:	1c18      	adds	r0, r3, #0
 800ac94:	f7f5 fc24 	bl	80004e0 <__aeabi_fcmple>
 800ac98:	1e03      	subs	r3, r0, #0
 800ac9a:	d043      	beq.n	800ad24 <SP100_ISI_Ctrl_No_Hysteresis+0x1098>
 800ac9c:	4b12      	ldr	r3, [pc, #72]	; (800ace8 <SP100_ISI_Ctrl_No_Hysteresis+0x105c>)
 800ac9e:	681a      	ldr	r2, [r3, #0]
 800aca0:	4b12      	ldr	r3, [pc, #72]	; (800acec <SP100_ISI_Ctrl_No_Hysteresis+0x1060>)
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	1c19      	adds	r1, r3, #0
 800aca6:	1c10      	adds	r0, r2, #0
 800aca8:	f7f6 f8dc 	bl	8000e64 <__aeabi_fsub>
 800acac:	1c03      	adds	r3, r0, #0
 800acae:	005b      	lsls	r3, r3, #1
 800acb0:	085b      	lsrs	r3, r3, #1
 800acb2:	4919      	ldr	r1, [pc, #100]	; (800ad18 <SP100_ISI_Ctrl_No_Hysteresis+0x108c>)
 800acb4:	1c18      	adds	r0, r3, #0
 800acb6:	f7f5 fc49 	bl	800054c <__aeabi_fadd>
 800acba:	1c03      	adds	r3, r0, #0
 800acbc:	1c18      	adds	r0, r3, #0
 800acbe:	f009 f983 	bl	8013fc8 <ceilf>
 800acc2:	1c03      	adds	r3, r0, #0
 800acc4:	1c18      	adds	r0, r3, #0
 800acc6:	f7f6 fa91 	bl	80011ec <__aeabi_f2iz>
 800acca:	0003      	movs	r3, r0
 800accc:	60bb      	str	r3, [r7, #8]
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	2b08      	cmp	r3, #8
 800acd2:	dd23      	ble.n	800ad1c <SP100_ISI_Ctrl_No_Hysteresis+0x1090>
 800acd4:	4b0a      	ldr	r3, [pc, #40]	; (800ad00 <SP100_ISI_Ctrl_No_Hysteresis+0x1074>)
 800acd6:	2208      	movs	r2, #8
 800acd8:	701a      	strb	r2, [r3, #0]
 800acda:	e023      	b.n	800ad24 <SP100_ISI_Ctrl_No_Hysteresis+0x1098>
 800acdc:	20000590 	.word	0x20000590
 800ace0:	420c0000 	.word	0x420c0000
 800ace4:	42820000 	.word	0x42820000
 800ace8:	20000014 	.word	0x20000014
 800acec:	2000058c 	.word	0x2000058c
 800acf0:	bf800000 	.word	0xbf800000
 800acf4:	9999999a 	.word	0x9999999a
 800acf8:	3fc99999 	.word	0x3fc99999
 800acfc:	40140000 	.word	0x40140000
 800ad00:	200005b3 	.word	0x200005b3
 800ad04:	20000594 	.word	0x20000594
 800ad08:	c0a00000 	.word	0xc0a00000
 800ad0c:	c1200000 	.word	0xc1200000
 800ad10:	c1a00000 	.word	0xc1a00000
 800ad14:	40200000 	.word	0x40200000
 800ad18:	40600000 	.word	0x40600000
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	b2da      	uxtb	r2, r3
 800ad20:	4b10      	ldr	r3, [pc, #64]	; (800ad64 <SP100_ISI_Ctrl_No_Hysteresis+0x10d8>)
 800ad22:	701a      	strb	r2, [r3, #0]
 800ad24:	4b10      	ldr	r3, [pc, #64]	; (800ad68 <SP100_ISI_Ctrl_No_Hysteresis+0x10dc>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	2184      	movs	r1, #132	; 0x84
 800ad2a:	05c9      	lsls	r1, r1, #23
 800ad2c:	1c18      	adds	r0, r3, #0
 800ad2e:	f7f5 fbe1 	bl	80004f4 <__aeabi_fcmpgt>
 800ad32:	1e03      	subs	r3, r0, #0
 800ad34:	d003      	beq.n	800ad3e <SP100_ISI_Ctrl_No_Hysteresis+0x10b2>
 800ad36:	4b0d      	ldr	r3, [pc, #52]	; (800ad6c <SP100_ISI_Ctrl_No_Hysteresis+0x10e0>)
 800ad38:	2200      	movs	r2, #0
 800ad3a:	701a      	strb	r2, [r3, #0]
 800ad3c:	e002      	b.n	800ad44 <SP100_ISI_Ctrl_No_Hysteresis+0x10b8>
 800ad3e:	4b0b      	ldr	r3, [pc, #44]	; (800ad6c <SP100_ISI_Ctrl_No_Hysteresis+0x10e0>)
 800ad40:	2201      	movs	r2, #1
 800ad42:	701a      	strb	r2, [r3, #0]
 800ad44:	4b0a      	ldr	r3, [pc, #40]	; (800ad70 <SP100_ISI_Ctrl_No_Hysteresis+0x10e4>)
 800ad46:	781b      	ldrb	r3, [r3, #0]
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	d107      	bne.n	800ad5c <SP100_ISI_Ctrl_No_Hysteresis+0x10d0>
 800ad4c:	4b09      	ldr	r3, [pc, #36]	; (800ad74 <SP100_ISI_Ctrl_No_Hysteresis+0x10e8>)
 800ad4e:	781b      	ldrb	r3, [r3, #0]
 800ad50:	2b02      	cmp	r3, #2
 800ad52:	d003      	beq.n	800ad5c <SP100_ISI_Ctrl_No_Hysteresis+0x10d0>
 800ad54:	4b05      	ldr	r3, [pc, #20]	; (800ad6c <SP100_ISI_Ctrl_No_Hysteresis+0x10e0>)
 800ad56:	781a      	ldrb	r2, [r3, #0]
 800ad58:	4b07      	ldr	r3, [pc, #28]	; (800ad78 <SP100_ISI_Ctrl_No_Hysteresis+0x10ec>)
 800ad5a:	701a      	strb	r2, [r3, #0]
 800ad5c:	46c0      	nop			; (mov r8, r8)
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	b008      	add	sp, #32
 800ad62:	bd80      	pop	{r7, pc}
 800ad64:	200005b3 	.word	0x200005b3
 800ad68:	20000014 	.word	0x20000014
 800ad6c:	200005b4 	.word	0x200005b4
 800ad70:	2000000d 	.word	0x2000000d
 800ad74:	20000570 	.word	0x20000570
 800ad78:	20000575 	.word	0x20000575

0800ad7c <SP100_ISI_Ctrl>:
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b08e      	sub	sp, #56	; 0x38
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	4bcf      	ldr	r3, [pc, #828]	; (800b0c0 <SP100_ISI_Ctrl+0x344>)
 800ad84:	681a      	ldr	r2, [r3, #0]
 800ad86:	4bcf      	ldr	r3, [pc, #828]	; (800b0c4 <SP100_ISI_Ctrl+0x348>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	1c19      	adds	r1, r3, #0
 800ad8c:	1c10      	adds	r0, r2, #0
 800ad8e:	f7f6 f869 	bl	8000e64 <__aeabi_fsub>
 800ad92:	1c03      	adds	r3, r0, #0
 800ad94:	49cc      	ldr	r1, [pc, #816]	; (800b0c8 <SP100_ISI_Ctrl+0x34c>)
 800ad96:	1c18      	adds	r0, r3, #0
 800ad98:	f7f5 fbac 	bl	80004f4 <__aeabi_fcmpgt>
 800ad9c:	1e03      	subs	r3, r0, #0
 800ad9e:	d003      	beq.n	800ada8 <SP100_ISI_Ctrl+0x2c>
 800ada0:	4bca      	ldr	r3, [pc, #808]	; (800b0cc <SP100_ISI_Ctrl+0x350>)
 800ada2:	2201      	movs	r2, #1
 800ada4:	601a      	str	r2, [r3, #0]
 800ada6:	e012      	b.n	800adce <SP100_ISI_Ctrl+0x52>
 800ada8:	4bc5      	ldr	r3, [pc, #788]	; (800b0c0 <SP100_ISI_Ctrl+0x344>)
 800adaa:	681a      	ldr	r2, [r3, #0]
 800adac:	4bc5      	ldr	r3, [pc, #788]	; (800b0c4 <SP100_ISI_Ctrl+0x348>)
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	1c19      	adds	r1, r3, #0
 800adb2:	1c10      	adds	r0, r2, #0
 800adb4:	f7f6 f856 	bl	8000e64 <__aeabi_fsub>
 800adb8:	1c03      	adds	r3, r0, #0
 800adba:	49c5      	ldr	r1, [pc, #788]	; (800b0d0 <SP100_ISI_Ctrl+0x354>)
 800adbc:	1c18      	adds	r0, r3, #0
 800adbe:	f7f5 fb85 	bl	80004cc <__aeabi_fcmplt>
 800adc2:	1e03      	subs	r3, r0, #0
 800adc4:	d003      	beq.n	800adce <SP100_ISI_Ctrl+0x52>
 800adc6:	4bc1      	ldr	r3, [pc, #772]	; (800b0cc <SP100_ISI_Ctrl+0x350>)
 800adc8:	2201      	movs	r2, #1
 800adca:	4252      	negs	r2, r2
 800adcc:	601a      	str	r2, [r3, #0]
 800adce:	4bbc      	ldr	r3, [pc, #752]	; (800b0c0 <SP100_ISI_Ctrl+0x344>)
 800add0:	681a      	ldr	r2, [r3, #0]
 800add2:	4bbc      	ldr	r3, [pc, #752]	; (800b0c4 <SP100_ISI_Ctrl+0x348>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	1c19      	adds	r1, r3, #0
 800add8:	1c10      	adds	r0, r2, #0
 800adda:	f7f6 f843 	bl	8000e64 <__aeabi_fsub>
 800adde:	1c03      	adds	r3, r0, #0
 800ade0:	49b9      	ldr	r1, [pc, #740]	; (800b0c8 <SP100_ISI_Ctrl+0x34c>)
 800ade2:	1c18      	adds	r0, r3, #0
 800ade4:	f7f5 fb86 	bl	80004f4 <__aeabi_fcmpgt>
 800ade8:	1e03      	subs	r3, r0, #0
 800adea:	d049      	beq.n	800ae80 <SP100_ISI_Ctrl+0x104>
 800adec:	4bb4      	ldr	r3, [pc, #720]	; (800b0c0 <SP100_ISI_Ctrl+0x344>)
 800adee:	681a      	ldr	r2, [r3, #0]
 800adf0:	4bb8      	ldr	r3, [pc, #736]	; (800b0d4 <SP100_ISI_Ctrl+0x358>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	1c19      	adds	r1, r3, #0
 800adf6:	1c10      	adds	r0, r2, #0
 800adf8:	f7f6 f834 	bl	8000e64 <__aeabi_fsub>
 800adfc:	1c03      	adds	r3, r0, #0
 800adfe:	2100      	movs	r1, #0
 800ae00:	1c18      	adds	r0, r3, #0
 800ae02:	f7f5 fb6d 	bl	80004e0 <__aeabi_fcmple>
 800ae06:	1e03      	subs	r3, r0, #0
 800ae08:	d003      	beq.n	800ae12 <SP100_ISI_Ctrl+0x96>
 800ae0a:	4bb3      	ldr	r3, [pc, #716]	; (800b0d8 <SP100_ISI_Ctrl+0x35c>)
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	701a      	strb	r2, [r3, #0]
 800ae10:	e104      	b.n	800b01c <SP100_ISI_Ctrl+0x2a0>
 800ae12:	4bab      	ldr	r3, [pc, #684]	; (800b0c0 <SP100_ISI_Ctrl+0x344>)
 800ae14:	681a      	ldr	r2, [r3, #0]
 800ae16:	4baf      	ldr	r3, [pc, #700]	; (800b0d4 <SP100_ISI_Ctrl+0x358>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	1c19      	adds	r1, r3, #0
 800ae1c:	1c10      	adds	r0, r2, #0
 800ae1e:	f7f6 f821 	bl	8000e64 <__aeabi_fsub>
 800ae22:	1c03      	adds	r3, r0, #0
 800ae24:	2180      	movs	r1, #128	; 0x80
 800ae26:	05c9      	lsls	r1, r1, #23
 800ae28:	1c18      	adds	r0, r3, #0
 800ae2a:	f7f5 fb6d 	bl	8000508 <__aeabi_fcmpge>
 800ae2e:	1e03      	subs	r3, r0, #0
 800ae30:	d012      	beq.n	800ae58 <SP100_ISI_Ctrl+0xdc>
 800ae32:	4ba3      	ldr	r3, [pc, #652]	; (800b0c0 <SP100_ISI_Ctrl+0x344>)
 800ae34:	681a      	ldr	r2, [r3, #0]
 800ae36:	4ba7      	ldr	r3, [pc, #668]	; (800b0d4 <SP100_ISI_Ctrl+0x358>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	1c19      	adds	r1, r3, #0
 800ae3c:	1c10      	adds	r0, r2, #0
 800ae3e:	f7f6 f811 	bl	8000e64 <__aeabi_fsub>
 800ae42:	1c03      	adds	r3, r0, #0
 800ae44:	49a5      	ldr	r1, [pc, #660]	; (800b0dc <SP100_ISI_Ctrl+0x360>)
 800ae46:	1c18      	adds	r0, r3, #0
 800ae48:	f7f5 fb4a 	bl	80004e0 <__aeabi_fcmple>
 800ae4c:	1e03      	subs	r3, r0, #0
 800ae4e:	d003      	beq.n	800ae58 <SP100_ISI_Ctrl+0xdc>
 800ae50:	4ba1      	ldr	r3, [pc, #644]	; (800b0d8 <SP100_ISI_Ctrl+0x35c>)
 800ae52:	2201      	movs	r2, #1
 800ae54:	701a      	strb	r2, [r3, #0]
 800ae56:	e0e1      	b.n	800b01c <SP100_ISI_Ctrl+0x2a0>
 800ae58:	4b99      	ldr	r3, [pc, #612]	; (800b0c0 <SP100_ISI_Ctrl+0x344>)
 800ae5a:	681a      	ldr	r2, [r3, #0]
 800ae5c:	4b9d      	ldr	r3, [pc, #628]	; (800b0d4 <SP100_ISI_Ctrl+0x358>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	1c19      	adds	r1, r3, #0
 800ae62:	1c10      	adds	r0, r2, #0
 800ae64:	f7f5 fffe 	bl	8000e64 <__aeabi_fsub>
 800ae68:	1c03      	adds	r3, r0, #0
 800ae6a:	499d      	ldr	r1, [pc, #628]	; (800b0e0 <SP100_ISI_Ctrl+0x364>)
 800ae6c:	1c18      	adds	r0, r3, #0
 800ae6e:	f7f5 fb4b 	bl	8000508 <__aeabi_fcmpge>
 800ae72:	1e03      	subs	r3, r0, #0
 800ae74:	d100      	bne.n	800ae78 <SP100_ISI_Ctrl+0xfc>
 800ae76:	e0d1      	b.n	800b01c <SP100_ISI_Ctrl+0x2a0>
 800ae78:	4b97      	ldr	r3, [pc, #604]	; (800b0d8 <SP100_ISI_Ctrl+0x35c>)
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	701a      	strb	r2, [r3, #0]
 800ae7e:	e0cd      	b.n	800b01c <SP100_ISI_Ctrl+0x2a0>
 800ae80:	4b8f      	ldr	r3, [pc, #572]	; (800b0c0 <SP100_ISI_Ctrl+0x344>)
 800ae82:	681a      	ldr	r2, [r3, #0]
 800ae84:	4b8f      	ldr	r3, [pc, #572]	; (800b0c4 <SP100_ISI_Ctrl+0x348>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	1c19      	adds	r1, r3, #0
 800ae8a:	1c10      	adds	r0, r2, #0
 800ae8c:	f7f5 ffea 	bl	8000e64 <__aeabi_fsub>
 800ae90:	1c03      	adds	r3, r0, #0
 800ae92:	498f      	ldr	r1, [pc, #572]	; (800b0d0 <SP100_ISI_Ctrl+0x354>)
 800ae94:	1c18      	adds	r0, r3, #0
 800ae96:	f7f5 fb19 	bl	80004cc <__aeabi_fcmplt>
 800ae9a:	1e03      	subs	r3, r0, #0
 800ae9c:	d027      	beq.n	800aeee <SP100_ISI_Ctrl+0x172>
 800ae9e:	4b88      	ldr	r3, [pc, #544]	; (800b0c0 <SP100_ISI_Ctrl+0x344>)
 800aea0:	681a      	ldr	r2, [r3, #0]
 800aea2:	4b8c      	ldr	r3, [pc, #560]	; (800b0d4 <SP100_ISI_Ctrl+0x358>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	1c19      	adds	r1, r3, #0
 800aea8:	1c10      	adds	r0, r2, #0
 800aeaa:	f7f5 ffdb 	bl	8000e64 <__aeabi_fsub>
 800aeae:	1c03      	adds	r3, r0, #0
 800aeb0:	2100      	movs	r1, #0
 800aeb2:	1c18      	adds	r0, r3, #0
 800aeb4:	f7f5 fb14 	bl	80004e0 <__aeabi_fcmple>
 800aeb8:	1e03      	subs	r3, r0, #0
 800aeba:	d003      	beq.n	800aec4 <SP100_ISI_Ctrl+0x148>
 800aebc:	4b86      	ldr	r3, [pc, #536]	; (800b0d8 <SP100_ISI_Ctrl+0x35c>)
 800aebe:	2201      	movs	r2, #1
 800aec0:	701a      	strb	r2, [r3, #0]
 800aec2:	e0ab      	b.n	800b01c <SP100_ISI_Ctrl+0x2a0>
 800aec4:	4b7e      	ldr	r3, [pc, #504]	; (800b0c0 <SP100_ISI_Ctrl+0x344>)
 800aec6:	681a      	ldr	r2, [r3, #0]
 800aec8:	4b82      	ldr	r3, [pc, #520]	; (800b0d4 <SP100_ISI_Ctrl+0x358>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	1c19      	adds	r1, r3, #0
 800aece:	1c10      	adds	r0, r2, #0
 800aed0:	f7f5 ffc8 	bl	8000e64 <__aeabi_fsub>
 800aed4:	1c03      	adds	r3, r0, #0
 800aed6:	2180      	movs	r1, #128	; 0x80
 800aed8:	05c9      	lsls	r1, r1, #23
 800aeda:	1c18      	adds	r0, r3, #0
 800aedc:	f7f5 fb14 	bl	8000508 <__aeabi_fcmpge>
 800aee0:	1e03      	subs	r3, r0, #0
 800aee2:	d100      	bne.n	800aee6 <SP100_ISI_Ctrl+0x16a>
 800aee4:	e09a      	b.n	800b01c <SP100_ISI_Ctrl+0x2a0>
 800aee6:	4b7c      	ldr	r3, [pc, #496]	; (800b0d8 <SP100_ISI_Ctrl+0x35c>)
 800aee8:	2200      	movs	r2, #0
 800aeea:	701a      	strb	r2, [r3, #0]
 800aeec:	e096      	b.n	800b01c <SP100_ISI_Ctrl+0x2a0>
 800aeee:	4b74      	ldr	r3, [pc, #464]	; (800b0c0 <SP100_ISI_Ctrl+0x344>)
 800aef0:	681a      	ldr	r2, [r3, #0]
 800aef2:	4b74      	ldr	r3, [pc, #464]	; (800b0c4 <SP100_ISI_Ctrl+0x348>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	1c19      	adds	r1, r3, #0
 800aef8:	1c10      	adds	r0, r2, #0
 800aefa:	f7f5 ffb3 	bl	8000e64 <__aeabi_fsub>
 800aefe:	1c03      	adds	r3, r0, #0
 800af00:	4973      	ldr	r1, [pc, #460]	; (800b0d0 <SP100_ISI_Ctrl+0x354>)
 800af02:	1c18      	adds	r0, r3, #0
 800af04:	f7f5 fb00 	bl	8000508 <__aeabi_fcmpge>
 800af08:	1e03      	subs	r3, r0, #0
 800af0a:	d100      	bne.n	800af0e <SP100_ISI_Ctrl+0x192>
 800af0c:	e086      	b.n	800b01c <SP100_ISI_Ctrl+0x2a0>
 800af0e:	4b6c      	ldr	r3, [pc, #432]	; (800b0c0 <SP100_ISI_Ctrl+0x344>)
 800af10:	681a      	ldr	r2, [r3, #0]
 800af12:	4b6c      	ldr	r3, [pc, #432]	; (800b0c4 <SP100_ISI_Ctrl+0x348>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	1c19      	adds	r1, r3, #0
 800af18:	1c10      	adds	r0, r2, #0
 800af1a:	f7f5 ffa3 	bl	8000e64 <__aeabi_fsub>
 800af1e:	1c03      	adds	r3, r0, #0
 800af20:	4969      	ldr	r1, [pc, #420]	; (800b0c8 <SP100_ISI_Ctrl+0x34c>)
 800af22:	1c18      	adds	r0, r3, #0
 800af24:	f7f5 fadc 	bl	80004e0 <__aeabi_fcmple>
 800af28:	1e03      	subs	r3, r0, #0
 800af2a:	d100      	bne.n	800af2e <SP100_ISI_Ctrl+0x1b2>
 800af2c:	e076      	b.n	800b01c <SP100_ISI_Ctrl+0x2a0>
 800af2e:	4b67      	ldr	r3, [pc, #412]	; (800b0cc <SP100_ISI_Ctrl+0x350>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	2b01      	cmp	r3, #1
 800af34:	d148      	bne.n	800afc8 <SP100_ISI_Ctrl+0x24c>
 800af36:	4b62      	ldr	r3, [pc, #392]	; (800b0c0 <SP100_ISI_Ctrl+0x344>)
 800af38:	681a      	ldr	r2, [r3, #0]
 800af3a:	4b66      	ldr	r3, [pc, #408]	; (800b0d4 <SP100_ISI_Ctrl+0x358>)
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	1c19      	adds	r1, r3, #0
 800af40:	1c10      	adds	r0, r2, #0
 800af42:	f7f5 ff8f 	bl	8000e64 <__aeabi_fsub>
 800af46:	1c03      	adds	r3, r0, #0
 800af48:	2100      	movs	r1, #0
 800af4a:	1c18      	adds	r0, r3, #0
 800af4c:	f7f5 fac8 	bl	80004e0 <__aeabi_fcmple>
 800af50:	1e03      	subs	r3, r0, #0
 800af52:	d003      	beq.n	800af5c <SP100_ISI_Ctrl+0x1e0>
 800af54:	4b60      	ldr	r3, [pc, #384]	; (800b0d8 <SP100_ISI_Ctrl+0x35c>)
 800af56:	2200      	movs	r2, #0
 800af58:	701a      	strb	r2, [r3, #0]
 800af5a:	e05f      	b.n	800b01c <SP100_ISI_Ctrl+0x2a0>
 800af5c:	4b58      	ldr	r3, [pc, #352]	; (800b0c0 <SP100_ISI_Ctrl+0x344>)
 800af5e:	681a      	ldr	r2, [r3, #0]
 800af60:	4b5c      	ldr	r3, [pc, #368]	; (800b0d4 <SP100_ISI_Ctrl+0x358>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	1c19      	adds	r1, r3, #0
 800af66:	1c10      	adds	r0, r2, #0
 800af68:	f7f5 ff7c 	bl	8000e64 <__aeabi_fsub>
 800af6c:	1c03      	adds	r3, r0, #0
 800af6e:	2180      	movs	r1, #128	; 0x80
 800af70:	05c9      	lsls	r1, r1, #23
 800af72:	1c18      	adds	r0, r3, #0
 800af74:	f7f5 fac8 	bl	8000508 <__aeabi_fcmpge>
 800af78:	1e03      	subs	r3, r0, #0
 800af7a:	d012      	beq.n	800afa2 <SP100_ISI_Ctrl+0x226>
 800af7c:	4b50      	ldr	r3, [pc, #320]	; (800b0c0 <SP100_ISI_Ctrl+0x344>)
 800af7e:	681a      	ldr	r2, [r3, #0]
 800af80:	4b54      	ldr	r3, [pc, #336]	; (800b0d4 <SP100_ISI_Ctrl+0x358>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	1c19      	adds	r1, r3, #0
 800af86:	1c10      	adds	r0, r2, #0
 800af88:	f7f5 ff6c 	bl	8000e64 <__aeabi_fsub>
 800af8c:	1c03      	adds	r3, r0, #0
 800af8e:	4953      	ldr	r1, [pc, #332]	; (800b0dc <SP100_ISI_Ctrl+0x360>)
 800af90:	1c18      	adds	r0, r3, #0
 800af92:	f7f5 faa5 	bl	80004e0 <__aeabi_fcmple>
 800af96:	1e03      	subs	r3, r0, #0
 800af98:	d003      	beq.n	800afa2 <SP100_ISI_Ctrl+0x226>
 800af9a:	4b4f      	ldr	r3, [pc, #316]	; (800b0d8 <SP100_ISI_Ctrl+0x35c>)
 800af9c:	2201      	movs	r2, #1
 800af9e:	701a      	strb	r2, [r3, #0]
 800afa0:	e03c      	b.n	800b01c <SP100_ISI_Ctrl+0x2a0>
 800afa2:	4b47      	ldr	r3, [pc, #284]	; (800b0c0 <SP100_ISI_Ctrl+0x344>)
 800afa4:	681a      	ldr	r2, [r3, #0]
 800afa6:	4b4b      	ldr	r3, [pc, #300]	; (800b0d4 <SP100_ISI_Ctrl+0x358>)
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	1c19      	adds	r1, r3, #0
 800afac:	1c10      	adds	r0, r2, #0
 800afae:	f7f5 ff59 	bl	8000e64 <__aeabi_fsub>
 800afb2:	1c03      	adds	r3, r0, #0
 800afb4:	494a      	ldr	r1, [pc, #296]	; (800b0e0 <SP100_ISI_Ctrl+0x364>)
 800afb6:	1c18      	adds	r0, r3, #0
 800afb8:	f7f5 faa6 	bl	8000508 <__aeabi_fcmpge>
 800afbc:	1e03      	subs	r3, r0, #0
 800afbe:	d02d      	beq.n	800b01c <SP100_ISI_Ctrl+0x2a0>
 800afc0:	4b45      	ldr	r3, [pc, #276]	; (800b0d8 <SP100_ISI_Ctrl+0x35c>)
 800afc2:	2200      	movs	r2, #0
 800afc4:	701a      	strb	r2, [r3, #0]
 800afc6:	e029      	b.n	800b01c <SP100_ISI_Ctrl+0x2a0>
 800afc8:	4b40      	ldr	r3, [pc, #256]	; (800b0cc <SP100_ISI_Ctrl+0x350>)
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	3301      	adds	r3, #1
 800afce:	d125      	bne.n	800b01c <SP100_ISI_Ctrl+0x2a0>
 800afd0:	4b3b      	ldr	r3, [pc, #236]	; (800b0c0 <SP100_ISI_Ctrl+0x344>)
 800afd2:	681a      	ldr	r2, [r3, #0]
 800afd4:	4b3f      	ldr	r3, [pc, #252]	; (800b0d4 <SP100_ISI_Ctrl+0x358>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	1c19      	adds	r1, r3, #0
 800afda:	1c10      	adds	r0, r2, #0
 800afdc:	f7f5 ff42 	bl	8000e64 <__aeabi_fsub>
 800afe0:	1c03      	adds	r3, r0, #0
 800afe2:	2100      	movs	r1, #0
 800afe4:	1c18      	adds	r0, r3, #0
 800afe6:	f7f5 fa7b 	bl	80004e0 <__aeabi_fcmple>
 800afea:	1e03      	subs	r3, r0, #0
 800afec:	d003      	beq.n	800aff6 <SP100_ISI_Ctrl+0x27a>
 800afee:	4b3a      	ldr	r3, [pc, #232]	; (800b0d8 <SP100_ISI_Ctrl+0x35c>)
 800aff0:	2201      	movs	r2, #1
 800aff2:	701a      	strb	r2, [r3, #0]
 800aff4:	e012      	b.n	800b01c <SP100_ISI_Ctrl+0x2a0>
 800aff6:	4b32      	ldr	r3, [pc, #200]	; (800b0c0 <SP100_ISI_Ctrl+0x344>)
 800aff8:	681a      	ldr	r2, [r3, #0]
 800affa:	4b36      	ldr	r3, [pc, #216]	; (800b0d4 <SP100_ISI_Ctrl+0x358>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	1c19      	adds	r1, r3, #0
 800b000:	1c10      	adds	r0, r2, #0
 800b002:	f7f5 ff2f 	bl	8000e64 <__aeabi_fsub>
 800b006:	1c03      	adds	r3, r0, #0
 800b008:	2180      	movs	r1, #128	; 0x80
 800b00a:	05c9      	lsls	r1, r1, #23
 800b00c:	1c18      	adds	r0, r3, #0
 800b00e:	f7f5 fa7b 	bl	8000508 <__aeabi_fcmpge>
 800b012:	1e03      	subs	r3, r0, #0
 800b014:	d002      	beq.n	800b01c <SP100_ISI_Ctrl+0x2a0>
 800b016:	4b30      	ldr	r3, [pc, #192]	; (800b0d8 <SP100_ISI_Ctrl+0x35c>)
 800b018:	2200      	movs	r2, #0
 800b01a:	701a      	strb	r2, [r3, #0]
 800b01c:	4b31      	ldr	r3, [pc, #196]	; (800b0e4 <SP100_ISI_Ctrl+0x368>)
 800b01e:	781b      	ldrb	r3, [r3, #0]
 800b020:	2b01      	cmp	r3, #1
 800b022:	d107      	bne.n	800b034 <SP100_ISI_Ctrl+0x2b8>
 800b024:	4b30      	ldr	r3, [pc, #192]	; (800b0e8 <SP100_ISI_Ctrl+0x36c>)
 800b026:	781b      	ldrb	r3, [r3, #0]
 800b028:	2b02      	cmp	r3, #2
 800b02a:	d003      	beq.n	800b034 <SP100_ISI_Ctrl+0x2b8>
 800b02c:	4b2a      	ldr	r3, [pc, #168]	; (800b0d8 <SP100_ISI_Ctrl+0x35c>)
 800b02e:	781a      	ldrb	r2, [r3, #0]
 800b030:	4b2e      	ldr	r3, [pc, #184]	; (800b0ec <SP100_ISI_Ctrl+0x370>)
 800b032:	701a      	strb	r2, [r3, #0]
 800b034:	4b22      	ldr	r3, [pc, #136]	; (800b0c0 <SP100_ISI_Ctrl+0x344>)
 800b036:	681a      	ldr	r2, [r3, #0]
 800b038:	4b22      	ldr	r3, [pc, #136]	; (800b0c4 <SP100_ISI_Ctrl+0x348>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	1c19      	adds	r1, r3, #0
 800b03e:	1c10      	adds	r0, r2, #0
 800b040:	f7f5 ff10 	bl	8000e64 <__aeabi_fsub>
 800b044:	1c03      	adds	r3, r0, #0
 800b046:	4920      	ldr	r1, [pc, #128]	; (800b0c8 <SP100_ISI_Ctrl+0x34c>)
 800b048:	1c18      	adds	r0, r3, #0
 800b04a:	f7f5 fa53 	bl	80004f4 <__aeabi_fcmpgt>
 800b04e:	1e03      	subs	r3, r0, #0
 800b050:	d100      	bne.n	800b054 <SP100_ISI_Ctrl+0x2d8>
 800b052:	e0ac      	b.n	800b1ae <SP100_ISI_Ctrl+0x432>
 800b054:	4b1a      	ldr	r3, [pc, #104]	; (800b0c0 <SP100_ISI_Ctrl+0x344>)
 800b056:	681a      	ldr	r2, [r3, #0]
 800b058:	4b1e      	ldr	r3, [pc, #120]	; (800b0d4 <SP100_ISI_Ctrl+0x358>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	1c19      	adds	r1, r3, #0
 800b05e:	1c10      	adds	r0, r2, #0
 800b060:	f7f5 ff00 	bl	8000e64 <__aeabi_fsub>
 800b064:	1c03      	adds	r3, r0, #0
 800b066:	4922      	ldr	r1, [pc, #136]	; (800b0f0 <SP100_ISI_Ctrl+0x374>)
 800b068:	1c18      	adds	r0, r3, #0
 800b06a:	f7f5 fa39 	bl	80004e0 <__aeabi_fcmple>
 800b06e:	1e03      	subs	r3, r0, #0
 800b070:	d003      	beq.n	800b07a <SP100_ISI_Ctrl+0x2fe>
 800b072:	4b20      	ldr	r3, [pc, #128]	; (800b0f4 <SP100_ISI_Ctrl+0x378>)
 800b074:	2203      	movs	r2, #3
 800b076:	701a      	strb	r2, [r3, #0]
 800b078:	e20d      	b.n	800b496 <SP100_ISI_Ctrl+0x71a>
 800b07a:	4b11      	ldr	r3, [pc, #68]	; (800b0c0 <SP100_ISI_Ctrl+0x344>)
 800b07c:	681a      	ldr	r2, [r3, #0]
 800b07e:	4b15      	ldr	r3, [pc, #84]	; (800b0d4 <SP100_ISI_Ctrl+0x358>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	1c19      	adds	r1, r3, #0
 800b084:	1c10      	adds	r0, r2, #0
 800b086:	f7f5 feed 	bl	8000e64 <__aeabi_fsub>
 800b08a:	1c03      	adds	r3, r0, #0
 800b08c:	491a      	ldr	r1, [pc, #104]	; (800b0f8 <SP100_ISI_Ctrl+0x37c>)
 800b08e:	1c18      	adds	r0, r3, #0
 800b090:	f7f5 fa3a 	bl	8000508 <__aeabi_fcmpge>
 800b094:	1e03      	subs	r3, r0, #0
 800b096:	d031      	beq.n	800b0fc <SP100_ISI_Ctrl+0x380>
 800b098:	4b09      	ldr	r3, [pc, #36]	; (800b0c0 <SP100_ISI_Ctrl+0x344>)
 800b09a:	681a      	ldr	r2, [r3, #0]
 800b09c:	4b0d      	ldr	r3, [pc, #52]	; (800b0d4 <SP100_ISI_Ctrl+0x358>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	1c19      	adds	r1, r3, #0
 800b0a2:	1c10      	adds	r0, r2, #0
 800b0a4:	f7f5 fede 	bl	8000e64 <__aeabi_fsub>
 800b0a8:	1c03      	adds	r3, r0, #0
 800b0aa:	21c0      	movs	r1, #192	; 0xc0
 800b0ac:	0609      	lsls	r1, r1, #24
 800b0ae:	1c18      	adds	r0, r3, #0
 800b0b0:	f7f5 fa16 	bl	80004e0 <__aeabi_fcmple>
 800b0b4:	1e03      	subs	r3, r0, #0
 800b0b6:	d021      	beq.n	800b0fc <SP100_ISI_Ctrl+0x380>
 800b0b8:	4b0e      	ldr	r3, [pc, #56]	; (800b0f4 <SP100_ISI_Ctrl+0x378>)
 800b0ba:	2201      	movs	r2, #1
 800b0bc:	701a      	strb	r2, [r3, #0]
 800b0be:	e1ea      	b.n	800b496 <SP100_ISI_Ctrl+0x71a>
 800b0c0:	20000014 	.word	0x20000014
 800b0c4:	20000594 	.word	0x20000594
 800b0c8:	40200000 	.word	0x40200000
 800b0cc:	200005a8 	.word	0x200005a8
 800b0d0:	c0200000 	.word	0xc0200000
 800b0d4:	2000058c 	.word	0x2000058c
 800b0d8:	200005b0 	.word	0x200005b0
 800b0dc:	41a00000 	.word	0x41a00000
 800b0e0:	41c80000 	.word	0x41c80000
 800b0e4:	2000000a 	.word	0x2000000a
 800b0e8:	20000570 	.word	0x20000570
 800b0ec:	20000571 	.word	0x20000571
 800b0f0:	c0a00000 	.word	0xc0a00000
 800b0f4:	200005b1 	.word	0x200005b1
 800b0f8:	c0800000 	.word	0xc0800000
 800b0fc:	4bcf      	ldr	r3, [pc, #828]	; (800b43c <SP100_ISI_Ctrl+0x6c0>)
 800b0fe:	681a      	ldr	r2, [r3, #0]
 800b100:	4bcf      	ldr	r3, [pc, #828]	; (800b440 <SP100_ISI_Ctrl+0x6c4>)
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	1c19      	adds	r1, r3, #0
 800b106:	1c10      	adds	r0, r2, #0
 800b108:	f7f5 feac 	bl	8000e64 <__aeabi_fsub>
 800b10c:	1c03      	adds	r3, r0, #0
 800b10e:	49cd      	ldr	r1, [pc, #820]	; (800b444 <SP100_ISI_Ctrl+0x6c8>)
 800b110:	1c18      	adds	r0, r3, #0
 800b112:	f7f5 f9f9 	bl	8000508 <__aeabi_fcmpge>
 800b116:	1e03      	subs	r3, r0, #0
 800b118:	d013      	beq.n	800b142 <SP100_ISI_Ctrl+0x3c6>
 800b11a:	4bc8      	ldr	r3, [pc, #800]	; (800b43c <SP100_ISI_Ctrl+0x6c0>)
 800b11c:	681a      	ldr	r2, [r3, #0]
 800b11e:	4bc8      	ldr	r3, [pc, #800]	; (800b440 <SP100_ISI_Ctrl+0x6c4>)
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	1c19      	adds	r1, r3, #0
 800b124:	1c10      	adds	r0, r2, #0
 800b126:	f7f5 fe9d 	bl	8000e64 <__aeabi_fsub>
 800b12a:	1c03      	adds	r3, r0, #0
 800b12c:	2180      	movs	r1, #128	; 0x80
 800b12e:	05c9      	lsls	r1, r1, #23
 800b130:	1c18      	adds	r0, r3, #0
 800b132:	f7f5 f9d5 	bl	80004e0 <__aeabi_fcmple>
 800b136:	1e03      	subs	r3, r0, #0
 800b138:	d003      	beq.n	800b142 <SP100_ISI_Ctrl+0x3c6>
 800b13a:	4bc3      	ldr	r3, [pc, #780]	; (800b448 <SP100_ISI_Ctrl+0x6cc>)
 800b13c:	2202      	movs	r2, #2
 800b13e:	701a      	strb	r2, [r3, #0]
 800b140:	e1a9      	b.n	800b496 <SP100_ISI_Ctrl+0x71a>
 800b142:	4bbe      	ldr	r3, [pc, #760]	; (800b43c <SP100_ISI_Ctrl+0x6c0>)
 800b144:	681a      	ldr	r2, [r3, #0]
 800b146:	4bbe      	ldr	r3, [pc, #760]	; (800b440 <SP100_ISI_Ctrl+0x6c4>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	1c19      	adds	r1, r3, #0
 800b14c:	1c10      	adds	r0, r2, #0
 800b14e:	f7f5 fe89 	bl	8000e64 <__aeabi_fsub>
 800b152:	1c03      	adds	r3, r0, #0
 800b154:	49bd      	ldr	r1, [pc, #756]	; (800b44c <SP100_ISI_Ctrl+0x6d0>)
 800b156:	1c18      	adds	r0, r3, #0
 800b158:	f7f5 f9d6 	bl	8000508 <__aeabi_fcmpge>
 800b15c:	1e03      	subs	r3, r0, #0
 800b15e:	d012      	beq.n	800b186 <SP100_ISI_Ctrl+0x40a>
 800b160:	4bb6      	ldr	r3, [pc, #728]	; (800b43c <SP100_ISI_Ctrl+0x6c0>)
 800b162:	681a      	ldr	r2, [r3, #0]
 800b164:	4bb6      	ldr	r3, [pc, #728]	; (800b440 <SP100_ISI_Ctrl+0x6c4>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	1c19      	adds	r1, r3, #0
 800b16a:	1c10      	adds	r0, r2, #0
 800b16c:	f7f5 fe7a 	bl	8000e64 <__aeabi_fsub>
 800b170:	1c03      	adds	r3, r0, #0
 800b172:	49b7      	ldr	r1, [pc, #732]	; (800b450 <SP100_ISI_Ctrl+0x6d4>)
 800b174:	1c18      	adds	r0, r3, #0
 800b176:	f7f5 f9b3 	bl	80004e0 <__aeabi_fcmple>
 800b17a:	1e03      	subs	r3, r0, #0
 800b17c:	d003      	beq.n	800b186 <SP100_ISI_Ctrl+0x40a>
 800b17e:	4bb2      	ldr	r3, [pc, #712]	; (800b448 <SP100_ISI_Ctrl+0x6cc>)
 800b180:	2201      	movs	r2, #1
 800b182:	701a      	strb	r2, [r3, #0]
 800b184:	e187      	b.n	800b496 <SP100_ISI_Ctrl+0x71a>
 800b186:	4bad      	ldr	r3, [pc, #692]	; (800b43c <SP100_ISI_Ctrl+0x6c0>)
 800b188:	681a      	ldr	r2, [r3, #0]
 800b18a:	4bad      	ldr	r3, [pc, #692]	; (800b440 <SP100_ISI_Ctrl+0x6c4>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	1c19      	adds	r1, r3, #0
 800b190:	1c10      	adds	r0, r2, #0
 800b192:	f7f5 fe67 	bl	8000e64 <__aeabi_fsub>
 800b196:	1c03      	adds	r3, r0, #0
 800b198:	49ae      	ldr	r1, [pc, #696]	; (800b454 <SP100_ISI_Ctrl+0x6d8>)
 800b19a:	1c18      	adds	r0, r3, #0
 800b19c:	f7f5 f9b4 	bl	8000508 <__aeabi_fcmpge>
 800b1a0:	1e03      	subs	r3, r0, #0
 800b1a2:	d100      	bne.n	800b1a6 <SP100_ISI_Ctrl+0x42a>
 800b1a4:	e177      	b.n	800b496 <SP100_ISI_Ctrl+0x71a>
 800b1a6:	4ba8      	ldr	r3, [pc, #672]	; (800b448 <SP100_ISI_Ctrl+0x6cc>)
 800b1a8:	2202      	movs	r2, #2
 800b1aa:	701a      	strb	r2, [r3, #0]
 800b1ac:	e173      	b.n	800b496 <SP100_ISI_Ctrl+0x71a>
 800b1ae:	4ba3      	ldr	r3, [pc, #652]	; (800b43c <SP100_ISI_Ctrl+0x6c0>)
 800b1b0:	681a      	ldr	r2, [r3, #0]
 800b1b2:	4ba9      	ldr	r3, [pc, #676]	; (800b458 <SP100_ISI_Ctrl+0x6dc>)
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	1c19      	adds	r1, r3, #0
 800b1b8:	1c10      	adds	r0, r2, #0
 800b1ba:	f7f5 fe53 	bl	8000e64 <__aeabi_fsub>
 800b1be:	1c03      	adds	r3, r0, #0
 800b1c0:	49a6      	ldr	r1, [pc, #664]	; (800b45c <SP100_ISI_Ctrl+0x6e0>)
 800b1c2:	1c18      	adds	r0, r3, #0
 800b1c4:	f7f5 f982 	bl	80004cc <__aeabi_fcmplt>
 800b1c8:	1e03      	subs	r3, r0, #0
 800b1ca:	d04a      	beq.n	800b262 <SP100_ISI_Ctrl+0x4e6>
 800b1cc:	4b9b      	ldr	r3, [pc, #620]	; (800b43c <SP100_ISI_Ctrl+0x6c0>)
 800b1ce:	681a      	ldr	r2, [r3, #0]
 800b1d0:	4b9b      	ldr	r3, [pc, #620]	; (800b440 <SP100_ISI_Ctrl+0x6c4>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	1c19      	adds	r1, r3, #0
 800b1d6:	1c10      	adds	r0, r2, #0
 800b1d8:	f7f5 fe44 	bl	8000e64 <__aeabi_fsub>
 800b1dc:	1c03      	adds	r3, r0, #0
 800b1de:	21c0      	movs	r1, #192	; 0xc0
 800b1e0:	0609      	lsls	r1, r1, #24
 800b1e2:	1c18      	adds	r0, r3, #0
 800b1e4:	f7f5 f97c 	bl	80004e0 <__aeabi_fcmple>
 800b1e8:	1e03      	subs	r3, r0, #0
 800b1ea:	d003      	beq.n	800b1f4 <SP100_ISI_Ctrl+0x478>
 800b1ec:	4b96      	ldr	r3, [pc, #600]	; (800b448 <SP100_ISI_Ctrl+0x6cc>)
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	701a      	strb	r2, [r3, #0]
 800b1f2:	e150      	b.n	800b496 <SP100_ISI_Ctrl+0x71a>
 800b1f4:	4b91      	ldr	r3, [pc, #580]	; (800b43c <SP100_ISI_Ctrl+0x6c0>)
 800b1f6:	681a      	ldr	r2, [r3, #0]
 800b1f8:	4b91      	ldr	r3, [pc, #580]	; (800b440 <SP100_ISI_Ctrl+0x6c4>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	1c19      	adds	r1, r3, #0
 800b1fe:	1c10      	adds	r0, r2, #0
 800b200:	f7f5 fe30 	bl	8000e64 <__aeabi_fsub>
 800b204:	1c03      	adds	r3, r0, #0
 800b206:	498f      	ldr	r1, [pc, #572]	; (800b444 <SP100_ISI_Ctrl+0x6c8>)
 800b208:	1c18      	adds	r0, r3, #0
 800b20a:	f7f5 f97d 	bl	8000508 <__aeabi_fcmpge>
 800b20e:	1e03      	subs	r3, r0, #0
 800b210:	d012      	beq.n	800b238 <SP100_ISI_Ctrl+0x4bc>
 800b212:	4b8a      	ldr	r3, [pc, #552]	; (800b43c <SP100_ISI_Ctrl+0x6c0>)
 800b214:	681a      	ldr	r2, [r3, #0]
 800b216:	4b8a      	ldr	r3, [pc, #552]	; (800b440 <SP100_ISI_Ctrl+0x6c4>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	1c19      	adds	r1, r3, #0
 800b21c:	1c10      	adds	r0, r2, #0
 800b21e:	f7f5 fe21 	bl	8000e64 <__aeabi_fsub>
 800b222:	1c03      	adds	r3, r0, #0
 800b224:	4989      	ldr	r1, [pc, #548]	; (800b44c <SP100_ISI_Ctrl+0x6d0>)
 800b226:	1c18      	adds	r0, r3, #0
 800b228:	f7f5 f95a 	bl	80004e0 <__aeabi_fcmple>
 800b22c:	1e03      	subs	r3, r0, #0
 800b22e:	d003      	beq.n	800b238 <SP100_ISI_Ctrl+0x4bc>
 800b230:	4b85      	ldr	r3, [pc, #532]	; (800b448 <SP100_ISI_Ctrl+0x6cc>)
 800b232:	2201      	movs	r2, #1
 800b234:	701a      	strb	r2, [r3, #0]
 800b236:	e12e      	b.n	800b496 <SP100_ISI_Ctrl+0x71a>
 800b238:	4b80      	ldr	r3, [pc, #512]	; (800b43c <SP100_ISI_Ctrl+0x6c0>)
 800b23a:	681a      	ldr	r2, [r3, #0]
 800b23c:	4b80      	ldr	r3, [pc, #512]	; (800b440 <SP100_ISI_Ctrl+0x6c4>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	1c19      	adds	r1, r3, #0
 800b242:	1c10      	adds	r0, r2, #0
 800b244:	f7f5 fe0e 	bl	8000e64 <__aeabi_fsub>
 800b248:	1c03      	adds	r3, r0, #0
 800b24a:	2181      	movs	r1, #129	; 0x81
 800b24c:	05c9      	lsls	r1, r1, #23
 800b24e:	1c18      	adds	r0, r3, #0
 800b250:	f7f5 f95a 	bl	8000508 <__aeabi_fcmpge>
 800b254:	1e03      	subs	r3, r0, #0
 800b256:	d100      	bne.n	800b25a <SP100_ISI_Ctrl+0x4de>
 800b258:	e11d      	b.n	800b496 <SP100_ISI_Ctrl+0x71a>
 800b25a:	4b7b      	ldr	r3, [pc, #492]	; (800b448 <SP100_ISI_Ctrl+0x6cc>)
 800b25c:	2203      	movs	r2, #3
 800b25e:	701a      	strb	r2, [r3, #0]
 800b260:	e119      	b.n	800b496 <SP100_ISI_Ctrl+0x71a>
 800b262:	4b76      	ldr	r3, [pc, #472]	; (800b43c <SP100_ISI_Ctrl+0x6c0>)
 800b264:	681a      	ldr	r2, [r3, #0]
 800b266:	4b7c      	ldr	r3, [pc, #496]	; (800b458 <SP100_ISI_Ctrl+0x6dc>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	1c19      	adds	r1, r3, #0
 800b26c:	1c10      	adds	r0, r2, #0
 800b26e:	f7f5 fdf9 	bl	8000e64 <__aeabi_fsub>
 800b272:	1c03      	adds	r3, r0, #0
 800b274:	4979      	ldr	r1, [pc, #484]	; (800b45c <SP100_ISI_Ctrl+0x6e0>)
 800b276:	1c18      	adds	r0, r3, #0
 800b278:	f7f5 f946 	bl	8000508 <__aeabi_fcmpge>
 800b27c:	1e03      	subs	r3, r0, #0
 800b27e:	d100      	bne.n	800b282 <SP100_ISI_Ctrl+0x506>
 800b280:	e109      	b.n	800b496 <SP100_ISI_Ctrl+0x71a>
 800b282:	4b6e      	ldr	r3, [pc, #440]	; (800b43c <SP100_ISI_Ctrl+0x6c0>)
 800b284:	681a      	ldr	r2, [r3, #0]
 800b286:	4b74      	ldr	r3, [pc, #464]	; (800b458 <SP100_ISI_Ctrl+0x6dc>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	1c19      	adds	r1, r3, #0
 800b28c:	1c10      	adds	r0, r2, #0
 800b28e:	f7f5 fde9 	bl	8000e64 <__aeabi_fsub>
 800b292:	1c03      	adds	r3, r0, #0
 800b294:	4972      	ldr	r1, [pc, #456]	; (800b460 <SP100_ISI_Ctrl+0x6e4>)
 800b296:	1c18      	adds	r0, r3, #0
 800b298:	f7f5 f922 	bl	80004e0 <__aeabi_fcmple>
 800b29c:	1e03      	subs	r3, r0, #0
 800b29e:	d100      	bne.n	800b2a2 <SP100_ISI_Ctrl+0x526>
 800b2a0:	e0f9      	b.n	800b496 <SP100_ISI_Ctrl+0x71a>
 800b2a2:	4b70      	ldr	r3, [pc, #448]	; (800b464 <SP100_ISI_Ctrl+0x6e8>)
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	2b01      	cmp	r3, #1
 800b2a8:	d000      	beq.n	800b2ac <SP100_ISI_Ctrl+0x530>
 800b2aa:	e08d      	b.n	800b3c8 <SP100_ISI_Ctrl+0x64c>
 800b2ac:	4b63      	ldr	r3, [pc, #396]	; (800b43c <SP100_ISI_Ctrl+0x6c0>)
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	4b63      	ldr	r3, [pc, #396]	; (800b440 <SP100_ISI_Ctrl+0x6c4>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	1c19      	adds	r1, r3, #0
 800b2b6:	1c10      	adds	r0, r2, #0
 800b2b8:	f7f5 fdd4 	bl	8000e64 <__aeabi_fsub>
 800b2bc:	1c03      	adds	r3, r0, #0
 800b2be:	496a      	ldr	r1, [pc, #424]	; (800b468 <SP100_ISI_Ctrl+0x6ec>)
 800b2c0:	1c18      	adds	r0, r3, #0
 800b2c2:	f7f5 f90d 	bl	80004e0 <__aeabi_fcmple>
 800b2c6:	1e03      	subs	r3, r0, #0
 800b2c8:	d003      	beq.n	800b2d2 <SP100_ISI_Ctrl+0x556>
 800b2ca:	4b5f      	ldr	r3, [pc, #380]	; (800b448 <SP100_ISI_Ctrl+0x6cc>)
 800b2cc:	2203      	movs	r2, #3
 800b2ce:	701a      	strb	r2, [r3, #0]
 800b2d0:	e0e1      	b.n	800b496 <SP100_ISI_Ctrl+0x71a>
 800b2d2:	4b5a      	ldr	r3, [pc, #360]	; (800b43c <SP100_ISI_Ctrl+0x6c0>)
 800b2d4:	681a      	ldr	r2, [r3, #0]
 800b2d6:	4b5a      	ldr	r3, [pc, #360]	; (800b440 <SP100_ISI_Ctrl+0x6c4>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	1c19      	adds	r1, r3, #0
 800b2dc:	1c10      	adds	r0, r2, #0
 800b2de:	f7f5 fdc1 	bl	8000e64 <__aeabi_fsub>
 800b2e2:	1c03      	adds	r3, r0, #0
 800b2e4:	4961      	ldr	r1, [pc, #388]	; (800b46c <SP100_ISI_Ctrl+0x6f0>)
 800b2e6:	1c18      	adds	r0, r3, #0
 800b2e8:	f7f5 f90e 	bl	8000508 <__aeabi_fcmpge>
 800b2ec:	1e03      	subs	r3, r0, #0
 800b2ee:	d013      	beq.n	800b318 <SP100_ISI_Ctrl+0x59c>
 800b2f0:	4b52      	ldr	r3, [pc, #328]	; (800b43c <SP100_ISI_Ctrl+0x6c0>)
 800b2f2:	681a      	ldr	r2, [r3, #0]
 800b2f4:	4b52      	ldr	r3, [pc, #328]	; (800b440 <SP100_ISI_Ctrl+0x6c4>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	1c19      	adds	r1, r3, #0
 800b2fa:	1c10      	adds	r0, r2, #0
 800b2fc:	f7f5 fdb2 	bl	8000e64 <__aeabi_fsub>
 800b300:	1c03      	adds	r3, r0, #0
 800b302:	21c0      	movs	r1, #192	; 0xc0
 800b304:	0609      	lsls	r1, r1, #24
 800b306:	1c18      	adds	r0, r3, #0
 800b308:	f7f5 f8ea 	bl	80004e0 <__aeabi_fcmple>
 800b30c:	1e03      	subs	r3, r0, #0
 800b30e:	d003      	beq.n	800b318 <SP100_ISI_Ctrl+0x59c>
 800b310:	4b4d      	ldr	r3, [pc, #308]	; (800b448 <SP100_ISI_Ctrl+0x6cc>)
 800b312:	2201      	movs	r2, #1
 800b314:	701a      	strb	r2, [r3, #0]
 800b316:	e0be      	b.n	800b496 <SP100_ISI_Ctrl+0x71a>
 800b318:	4b48      	ldr	r3, [pc, #288]	; (800b43c <SP100_ISI_Ctrl+0x6c0>)
 800b31a:	681a      	ldr	r2, [r3, #0]
 800b31c:	4b48      	ldr	r3, [pc, #288]	; (800b440 <SP100_ISI_Ctrl+0x6c4>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	1c19      	adds	r1, r3, #0
 800b322:	1c10      	adds	r0, r2, #0
 800b324:	f7f5 fd9e 	bl	8000e64 <__aeabi_fsub>
 800b328:	1c03      	adds	r3, r0, #0
 800b32a:	4946      	ldr	r1, [pc, #280]	; (800b444 <SP100_ISI_Ctrl+0x6c8>)
 800b32c:	1c18      	adds	r0, r3, #0
 800b32e:	f7f5 f8eb 	bl	8000508 <__aeabi_fcmpge>
 800b332:	1e03      	subs	r3, r0, #0
 800b334:	d013      	beq.n	800b35e <SP100_ISI_Ctrl+0x5e2>
 800b336:	4b41      	ldr	r3, [pc, #260]	; (800b43c <SP100_ISI_Ctrl+0x6c0>)
 800b338:	681a      	ldr	r2, [r3, #0]
 800b33a:	4b41      	ldr	r3, [pc, #260]	; (800b440 <SP100_ISI_Ctrl+0x6c4>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	1c19      	adds	r1, r3, #0
 800b340:	1c10      	adds	r0, r2, #0
 800b342:	f7f5 fd8f 	bl	8000e64 <__aeabi_fsub>
 800b346:	1c03      	adds	r3, r0, #0
 800b348:	2180      	movs	r1, #128	; 0x80
 800b34a:	05c9      	lsls	r1, r1, #23
 800b34c:	1c18      	adds	r0, r3, #0
 800b34e:	f7f5 f8c7 	bl	80004e0 <__aeabi_fcmple>
 800b352:	1e03      	subs	r3, r0, #0
 800b354:	d003      	beq.n	800b35e <SP100_ISI_Ctrl+0x5e2>
 800b356:	4b3c      	ldr	r3, [pc, #240]	; (800b448 <SP100_ISI_Ctrl+0x6cc>)
 800b358:	2202      	movs	r2, #2
 800b35a:	701a      	strb	r2, [r3, #0]
 800b35c:	e09b      	b.n	800b496 <SP100_ISI_Ctrl+0x71a>
 800b35e:	4b37      	ldr	r3, [pc, #220]	; (800b43c <SP100_ISI_Ctrl+0x6c0>)
 800b360:	681a      	ldr	r2, [r3, #0]
 800b362:	4b37      	ldr	r3, [pc, #220]	; (800b440 <SP100_ISI_Ctrl+0x6c4>)
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	1c19      	adds	r1, r3, #0
 800b368:	1c10      	adds	r0, r2, #0
 800b36a:	f7f5 fd7b 	bl	8000e64 <__aeabi_fsub>
 800b36e:	1c03      	adds	r3, r0, #0
 800b370:	4936      	ldr	r1, [pc, #216]	; (800b44c <SP100_ISI_Ctrl+0x6d0>)
 800b372:	1c18      	adds	r0, r3, #0
 800b374:	f7f5 f8c8 	bl	8000508 <__aeabi_fcmpge>
 800b378:	1e03      	subs	r3, r0, #0
 800b37a:	d012      	beq.n	800b3a2 <SP100_ISI_Ctrl+0x626>
 800b37c:	4b2f      	ldr	r3, [pc, #188]	; (800b43c <SP100_ISI_Ctrl+0x6c0>)
 800b37e:	681a      	ldr	r2, [r3, #0]
 800b380:	4b2f      	ldr	r3, [pc, #188]	; (800b440 <SP100_ISI_Ctrl+0x6c4>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	1c19      	adds	r1, r3, #0
 800b386:	1c10      	adds	r0, r2, #0
 800b388:	f7f5 fd6c 	bl	8000e64 <__aeabi_fsub>
 800b38c:	1c03      	adds	r3, r0, #0
 800b38e:	4930      	ldr	r1, [pc, #192]	; (800b450 <SP100_ISI_Ctrl+0x6d4>)
 800b390:	1c18      	adds	r0, r3, #0
 800b392:	f7f5 f8a5 	bl	80004e0 <__aeabi_fcmple>
 800b396:	1e03      	subs	r3, r0, #0
 800b398:	d003      	beq.n	800b3a2 <SP100_ISI_Ctrl+0x626>
 800b39a:	4b2b      	ldr	r3, [pc, #172]	; (800b448 <SP100_ISI_Ctrl+0x6cc>)
 800b39c:	2201      	movs	r2, #1
 800b39e:	701a      	strb	r2, [r3, #0]
 800b3a0:	e079      	b.n	800b496 <SP100_ISI_Ctrl+0x71a>
 800b3a2:	4b26      	ldr	r3, [pc, #152]	; (800b43c <SP100_ISI_Ctrl+0x6c0>)
 800b3a4:	681a      	ldr	r2, [r3, #0]
 800b3a6:	4b26      	ldr	r3, [pc, #152]	; (800b440 <SP100_ISI_Ctrl+0x6c4>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	1c19      	adds	r1, r3, #0
 800b3ac:	1c10      	adds	r0, r2, #0
 800b3ae:	f7f5 fd59 	bl	8000e64 <__aeabi_fsub>
 800b3b2:	1c03      	adds	r3, r0, #0
 800b3b4:	4927      	ldr	r1, [pc, #156]	; (800b454 <SP100_ISI_Ctrl+0x6d8>)
 800b3b6:	1c18      	adds	r0, r3, #0
 800b3b8:	f7f5 f8a6 	bl	8000508 <__aeabi_fcmpge>
 800b3bc:	1e03      	subs	r3, r0, #0
 800b3be:	d06a      	beq.n	800b496 <SP100_ISI_Ctrl+0x71a>
 800b3c0:	4b21      	ldr	r3, [pc, #132]	; (800b448 <SP100_ISI_Ctrl+0x6cc>)
 800b3c2:	2202      	movs	r2, #2
 800b3c4:	701a      	strb	r2, [r3, #0]
 800b3c6:	e066      	b.n	800b496 <SP100_ISI_Ctrl+0x71a>
 800b3c8:	4b26      	ldr	r3, [pc, #152]	; (800b464 <SP100_ISI_Ctrl+0x6e8>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	d162      	bne.n	800b496 <SP100_ISI_Ctrl+0x71a>
 800b3d0:	4b1a      	ldr	r3, [pc, #104]	; (800b43c <SP100_ISI_Ctrl+0x6c0>)
 800b3d2:	681a      	ldr	r2, [r3, #0]
 800b3d4:	4b1a      	ldr	r3, [pc, #104]	; (800b440 <SP100_ISI_Ctrl+0x6c4>)
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	1c19      	adds	r1, r3, #0
 800b3da:	1c10      	adds	r0, r2, #0
 800b3dc:	f7f5 fd42 	bl	8000e64 <__aeabi_fsub>
 800b3e0:	1c03      	adds	r3, r0, #0
 800b3e2:	21c0      	movs	r1, #192	; 0xc0
 800b3e4:	0609      	lsls	r1, r1, #24
 800b3e6:	1c18      	adds	r0, r3, #0
 800b3e8:	f7f5 f87a 	bl	80004e0 <__aeabi_fcmple>
 800b3ec:	1e03      	subs	r3, r0, #0
 800b3ee:	d003      	beq.n	800b3f8 <SP100_ISI_Ctrl+0x67c>
 800b3f0:	4b15      	ldr	r3, [pc, #84]	; (800b448 <SP100_ISI_Ctrl+0x6cc>)
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	701a      	strb	r2, [r3, #0]
 800b3f6:	e04e      	b.n	800b496 <SP100_ISI_Ctrl+0x71a>
 800b3f8:	4b10      	ldr	r3, [pc, #64]	; (800b43c <SP100_ISI_Ctrl+0x6c0>)
 800b3fa:	681a      	ldr	r2, [r3, #0]
 800b3fc:	4b10      	ldr	r3, [pc, #64]	; (800b440 <SP100_ISI_Ctrl+0x6c4>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	1c19      	adds	r1, r3, #0
 800b402:	1c10      	adds	r0, r2, #0
 800b404:	f7f5 fd2e 	bl	8000e64 <__aeabi_fsub>
 800b408:	1c03      	adds	r3, r0, #0
 800b40a:	490e      	ldr	r1, [pc, #56]	; (800b444 <SP100_ISI_Ctrl+0x6c8>)
 800b40c:	1c18      	adds	r0, r3, #0
 800b40e:	f7f5 f87b 	bl	8000508 <__aeabi_fcmpge>
 800b412:	1e03      	subs	r3, r0, #0
 800b414:	d02c      	beq.n	800b470 <SP100_ISI_Ctrl+0x6f4>
 800b416:	4b09      	ldr	r3, [pc, #36]	; (800b43c <SP100_ISI_Ctrl+0x6c0>)
 800b418:	681a      	ldr	r2, [r3, #0]
 800b41a:	4b09      	ldr	r3, [pc, #36]	; (800b440 <SP100_ISI_Ctrl+0x6c4>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	1c19      	adds	r1, r3, #0
 800b420:	1c10      	adds	r0, r2, #0
 800b422:	f7f5 fd1f 	bl	8000e64 <__aeabi_fsub>
 800b426:	1c03      	adds	r3, r0, #0
 800b428:	4908      	ldr	r1, [pc, #32]	; (800b44c <SP100_ISI_Ctrl+0x6d0>)
 800b42a:	1c18      	adds	r0, r3, #0
 800b42c:	f7f5 f858 	bl	80004e0 <__aeabi_fcmple>
 800b430:	1e03      	subs	r3, r0, #0
 800b432:	d01d      	beq.n	800b470 <SP100_ISI_Ctrl+0x6f4>
 800b434:	4b04      	ldr	r3, [pc, #16]	; (800b448 <SP100_ISI_Ctrl+0x6cc>)
 800b436:	2201      	movs	r2, #1
 800b438:	701a      	strb	r2, [r3, #0]
 800b43a:	e02c      	b.n	800b496 <SP100_ISI_Ctrl+0x71a>
 800b43c:	20000014 	.word	0x20000014
 800b440:	2000058c 	.word	0x2000058c
 800b444:	bf800000 	.word	0xbf800000
 800b448:	200005b1 	.word	0x200005b1
 800b44c:	40400000 	.word	0x40400000
 800b450:	41a00000 	.word	0x41a00000
 800b454:	41c80000 	.word	0x41c80000
 800b458:	20000594 	.word	0x20000594
 800b45c:	c0200000 	.word	0xc0200000
 800b460:	40200000 	.word	0x40200000
 800b464:	200005a8 	.word	0x200005a8
 800b468:	c0a00000 	.word	0xc0a00000
 800b46c:	c0800000 	.word	0xc0800000
 800b470:	4bc8      	ldr	r3, [pc, #800]	; (800b794 <SP100_ISI_Ctrl+0xa18>)
 800b472:	681a      	ldr	r2, [r3, #0]
 800b474:	4bc8      	ldr	r3, [pc, #800]	; (800b798 <SP100_ISI_Ctrl+0xa1c>)
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	1c19      	adds	r1, r3, #0
 800b47a:	1c10      	adds	r0, r2, #0
 800b47c:	f7f5 fcf2 	bl	8000e64 <__aeabi_fsub>
 800b480:	1c03      	adds	r3, r0, #0
 800b482:	2181      	movs	r1, #129	; 0x81
 800b484:	05c9      	lsls	r1, r1, #23
 800b486:	1c18      	adds	r0, r3, #0
 800b488:	f7f5 f83e 	bl	8000508 <__aeabi_fcmpge>
 800b48c:	1e03      	subs	r3, r0, #0
 800b48e:	d002      	beq.n	800b496 <SP100_ISI_Ctrl+0x71a>
 800b490:	4bc2      	ldr	r3, [pc, #776]	; (800b79c <SP100_ISI_Ctrl+0xa20>)
 800b492:	2203      	movs	r2, #3
 800b494:	701a      	strb	r2, [r3, #0]
 800b496:	4bc2      	ldr	r3, [pc, #776]	; (800b7a0 <SP100_ISI_Ctrl+0xa24>)
 800b498:	781b      	ldrb	r3, [r3, #0]
 800b49a:	2b01      	cmp	r3, #1
 800b49c:	d107      	bne.n	800b4ae <SP100_ISI_Ctrl+0x732>
 800b49e:	4bc1      	ldr	r3, [pc, #772]	; (800b7a4 <SP100_ISI_Ctrl+0xa28>)
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	2b02      	cmp	r3, #2
 800b4a4:	d003      	beq.n	800b4ae <SP100_ISI_Ctrl+0x732>
 800b4a6:	4bbd      	ldr	r3, [pc, #756]	; (800b79c <SP100_ISI_Ctrl+0xa20>)
 800b4a8:	781a      	ldrb	r2, [r3, #0]
 800b4aa:	4bbf      	ldr	r3, [pc, #764]	; (800b7a8 <SP100_ISI_Ctrl+0xa2c>)
 800b4ac:	701a      	strb	r2, [r3, #0]
 800b4ae:	4bb9      	ldr	r3, [pc, #740]	; (800b794 <SP100_ISI_Ctrl+0xa18>)
 800b4b0:	681a      	ldr	r2, [r3, #0]
 800b4b2:	4bb9      	ldr	r3, [pc, #740]	; (800b798 <SP100_ISI_Ctrl+0xa1c>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	1c19      	adds	r1, r3, #0
 800b4b8:	1c10      	adds	r0, r2, #0
 800b4ba:	f7f5 fcd3 	bl	8000e64 <__aeabi_fsub>
 800b4be:	1c03      	adds	r3, r0, #0
 800b4c0:	49ba      	ldr	r1, [pc, #744]	; (800b7ac <SP100_ISI_Ctrl+0xa30>)
 800b4c2:	1c18      	adds	r0, r3, #0
 800b4c4:	f7f5 f820 	bl	8000508 <__aeabi_fcmpge>
 800b4c8:	1e03      	subs	r3, r0, #0
 800b4ca:	d003      	beq.n	800b4d4 <SP100_ISI_Ctrl+0x758>
 800b4cc:	4bb8      	ldr	r3, [pc, #736]	; (800b7b0 <SP100_ISI_Ctrl+0xa34>)
 800b4ce:	2214      	movs	r2, #20
 800b4d0:	701a      	strb	r2, [r3, #0]
 800b4d2:	e2d5      	b.n	800ba80 <SP100_ISI_Ctrl+0xd04>
 800b4d4:	4baf      	ldr	r3, [pc, #700]	; (800b794 <SP100_ISI_Ctrl+0xa18>)
 800b4d6:	681a      	ldr	r2, [r3, #0]
 800b4d8:	4baf      	ldr	r3, [pc, #700]	; (800b798 <SP100_ISI_Ctrl+0xa1c>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	1c19      	adds	r1, r3, #0
 800b4de:	1c10      	adds	r0, r2, #0
 800b4e0:	f7f5 fcc0 	bl	8000e64 <__aeabi_fsub>
 800b4e4:	1c03      	adds	r3, r0, #0
 800b4e6:	49b3      	ldr	r1, [pc, #716]	; (800b7b4 <SP100_ISI_Ctrl+0xa38>)
 800b4e8:	1c18      	adds	r0, r3, #0
 800b4ea:	f7f5 f80d 	bl	8000508 <__aeabi_fcmpge>
 800b4ee:	1e03      	subs	r3, r0, #0
 800b4f0:	d012      	beq.n	800b518 <SP100_ISI_Ctrl+0x79c>
 800b4f2:	4ba8      	ldr	r3, [pc, #672]	; (800b794 <SP100_ISI_Ctrl+0xa18>)
 800b4f4:	681a      	ldr	r2, [r3, #0]
 800b4f6:	4ba8      	ldr	r3, [pc, #672]	; (800b798 <SP100_ISI_Ctrl+0xa1c>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	1c19      	adds	r1, r3, #0
 800b4fc:	1c10      	adds	r0, r2, #0
 800b4fe:	f7f5 fcb1 	bl	8000e64 <__aeabi_fsub>
 800b502:	1c03      	adds	r3, r0, #0
 800b504:	49a9      	ldr	r1, [pc, #676]	; (800b7ac <SP100_ISI_Ctrl+0xa30>)
 800b506:	1c18      	adds	r0, r3, #0
 800b508:	f7f4 ffe0 	bl	80004cc <__aeabi_fcmplt>
 800b50c:	1e03      	subs	r3, r0, #0
 800b50e:	d003      	beq.n	800b518 <SP100_ISI_Ctrl+0x79c>
 800b510:	4ba7      	ldr	r3, [pc, #668]	; (800b7b0 <SP100_ISI_Ctrl+0xa34>)
 800b512:	2213      	movs	r2, #19
 800b514:	701a      	strb	r2, [r3, #0]
 800b516:	e2b3      	b.n	800ba80 <SP100_ISI_Ctrl+0xd04>
 800b518:	4b9e      	ldr	r3, [pc, #632]	; (800b794 <SP100_ISI_Ctrl+0xa18>)
 800b51a:	681a      	ldr	r2, [r3, #0]
 800b51c:	4b9e      	ldr	r3, [pc, #632]	; (800b798 <SP100_ISI_Ctrl+0xa1c>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	1c19      	adds	r1, r3, #0
 800b522:	1c10      	adds	r0, r2, #0
 800b524:	f7f5 fc9e 	bl	8000e64 <__aeabi_fsub>
 800b528:	1c03      	adds	r3, r0, #0
 800b52a:	2181      	movs	r1, #129	; 0x81
 800b52c:	05c9      	lsls	r1, r1, #23
 800b52e:	1c18      	adds	r0, r3, #0
 800b530:	f7f4 ffea 	bl	8000508 <__aeabi_fcmpge>
 800b534:	1e03      	subs	r3, r0, #0
 800b536:	d012      	beq.n	800b55e <SP100_ISI_Ctrl+0x7e2>
 800b538:	4b96      	ldr	r3, [pc, #600]	; (800b794 <SP100_ISI_Ctrl+0xa18>)
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	4b96      	ldr	r3, [pc, #600]	; (800b798 <SP100_ISI_Ctrl+0xa1c>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	1c19      	adds	r1, r3, #0
 800b542:	1c10      	adds	r0, r2, #0
 800b544:	f7f5 fc8e 	bl	8000e64 <__aeabi_fsub>
 800b548:	1c03      	adds	r3, r0, #0
 800b54a:	499a      	ldr	r1, [pc, #616]	; (800b7b4 <SP100_ISI_Ctrl+0xa38>)
 800b54c:	1c18      	adds	r0, r3, #0
 800b54e:	f7f4 ffbd 	bl	80004cc <__aeabi_fcmplt>
 800b552:	1e03      	subs	r3, r0, #0
 800b554:	d003      	beq.n	800b55e <SP100_ISI_Ctrl+0x7e2>
 800b556:	4b96      	ldr	r3, [pc, #600]	; (800b7b0 <SP100_ISI_Ctrl+0xa34>)
 800b558:	2212      	movs	r2, #18
 800b55a:	701a      	strb	r2, [r3, #0]
 800b55c:	e290      	b.n	800ba80 <SP100_ISI_Ctrl+0xd04>
 800b55e:	4b8d      	ldr	r3, [pc, #564]	; (800b794 <SP100_ISI_Ctrl+0xa18>)
 800b560:	681a      	ldr	r2, [r3, #0]
 800b562:	4b8d      	ldr	r3, [pc, #564]	; (800b798 <SP100_ISI_Ctrl+0xa1c>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	1c19      	adds	r1, r3, #0
 800b568:	1c10      	adds	r0, r2, #0
 800b56a:	f7f5 fc7b 	bl	8000e64 <__aeabi_fsub>
 800b56e:	1c03      	adds	r3, r0, #0
 800b570:	4991      	ldr	r1, [pc, #580]	; (800b7b8 <SP100_ISI_Ctrl+0xa3c>)
 800b572:	1c18      	adds	r0, r3, #0
 800b574:	f7f4 ffc8 	bl	8000508 <__aeabi_fcmpge>
 800b578:	1e03      	subs	r3, r0, #0
 800b57a:	d013      	beq.n	800b5a4 <SP100_ISI_Ctrl+0x828>
 800b57c:	4b85      	ldr	r3, [pc, #532]	; (800b794 <SP100_ISI_Ctrl+0xa18>)
 800b57e:	681a      	ldr	r2, [r3, #0]
 800b580:	4b85      	ldr	r3, [pc, #532]	; (800b798 <SP100_ISI_Ctrl+0xa1c>)
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	1c19      	adds	r1, r3, #0
 800b586:	1c10      	adds	r0, r2, #0
 800b588:	f7f5 fc6c 	bl	8000e64 <__aeabi_fsub>
 800b58c:	1c03      	adds	r3, r0, #0
 800b58e:	2181      	movs	r1, #129	; 0x81
 800b590:	05c9      	lsls	r1, r1, #23
 800b592:	1c18      	adds	r0, r3, #0
 800b594:	f7f4 ff9a 	bl	80004cc <__aeabi_fcmplt>
 800b598:	1e03      	subs	r3, r0, #0
 800b59a:	d003      	beq.n	800b5a4 <SP100_ISI_Ctrl+0x828>
 800b59c:	4b84      	ldr	r3, [pc, #528]	; (800b7b0 <SP100_ISI_Ctrl+0xa34>)
 800b59e:	2211      	movs	r2, #17
 800b5a0:	701a      	strb	r2, [r3, #0]
 800b5a2:	e26d      	b.n	800ba80 <SP100_ISI_Ctrl+0xd04>
 800b5a4:	4b7b      	ldr	r3, [pc, #492]	; (800b794 <SP100_ISI_Ctrl+0xa18>)
 800b5a6:	681a      	ldr	r2, [r3, #0]
 800b5a8:	4b7b      	ldr	r3, [pc, #492]	; (800b798 <SP100_ISI_Ctrl+0xa1c>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	1c19      	adds	r1, r3, #0
 800b5ae:	1c10      	adds	r0, r2, #0
 800b5b0:	f7f5 fc58 	bl	8000e64 <__aeabi_fsub>
 800b5b4:	1c03      	adds	r3, r0, #0
 800b5b6:	4981      	ldr	r1, [pc, #516]	; (800b7bc <SP100_ISI_Ctrl+0xa40>)
 800b5b8:	1c18      	adds	r0, r3, #0
 800b5ba:	f7f4 ffa5 	bl	8000508 <__aeabi_fcmpge>
 800b5be:	1e03      	subs	r3, r0, #0
 800b5c0:	d012      	beq.n	800b5e8 <SP100_ISI_Ctrl+0x86c>
 800b5c2:	4b74      	ldr	r3, [pc, #464]	; (800b794 <SP100_ISI_Ctrl+0xa18>)
 800b5c4:	681a      	ldr	r2, [r3, #0]
 800b5c6:	4b74      	ldr	r3, [pc, #464]	; (800b798 <SP100_ISI_Ctrl+0xa1c>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	1c19      	adds	r1, r3, #0
 800b5cc:	1c10      	adds	r0, r2, #0
 800b5ce:	f7f5 fc49 	bl	8000e64 <__aeabi_fsub>
 800b5d2:	1c03      	adds	r3, r0, #0
 800b5d4:	4978      	ldr	r1, [pc, #480]	; (800b7b8 <SP100_ISI_Ctrl+0xa3c>)
 800b5d6:	1c18      	adds	r0, r3, #0
 800b5d8:	f7f4 ff78 	bl	80004cc <__aeabi_fcmplt>
 800b5dc:	1e03      	subs	r3, r0, #0
 800b5de:	d003      	beq.n	800b5e8 <SP100_ISI_Ctrl+0x86c>
 800b5e0:	4b73      	ldr	r3, [pc, #460]	; (800b7b0 <SP100_ISI_Ctrl+0xa34>)
 800b5e2:	2210      	movs	r2, #16
 800b5e4:	701a      	strb	r2, [r3, #0]
 800b5e6:	e24b      	b.n	800ba80 <SP100_ISI_Ctrl+0xd04>
 800b5e8:	4b6a      	ldr	r3, [pc, #424]	; (800b794 <SP100_ISI_Ctrl+0xa18>)
 800b5ea:	681a      	ldr	r2, [r3, #0]
 800b5ec:	4b6a      	ldr	r3, [pc, #424]	; (800b798 <SP100_ISI_Ctrl+0xa1c>)
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	1c19      	adds	r1, r3, #0
 800b5f2:	1c10      	adds	r0, r2, #0
 800b5f4:	f7f5 fc36 	bl	8000e64 <__aeabi_fsub>
 800b5f8:	1c03      	adds	r3, r0, #0
 800b5fa:	4971      	ldr	r1, [pc, #452]	; (800b7c0 <SP100_ISI_Ctrl+0xa44>)
 800b5fc:	1c18      	adds	r0, r3, #0
 800b5fe:	f7f4 ff83 	bl	8000508 <__aeabi_fcmpge>
 800b602:	1e03      	subs	r3, r0, #0
 800b604:	d012      	beq.n	800b62c <SP100_ISI_Ctrl+0x8b0>
 800b606:	4b63      	ldr	r3, [pc, #396]	; (800b794 <SP100_ISI_Ctrl+0xa18>)
 800b608:	681a      	ldr	r2, [r3, #0]
 800b60a:	4b63      	ldr	r3, [pc, #396]	; (800b798 <SP100_ISI_Ctrl+0xa1c>)
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	1c19      	adds	r1, r3, #0
 800b610:	1c10      	adds	r0, r2, #0
 800b612:	f7f5 fc27 	bl	8000e64 <__aeabi_fsub>
 800b616:	1c03      	adds	r3, r0, #0
 800b618:	4968      	ldr	r1, [pc, #416]	; (800b7bc <SP100_ISI_Ctrl+0xa40>)
 800b61a:	1c18      	adds	r0, r3, #0
 800b61c:	f7f4 ff56 	bl	80004cc <__aeabi_fcmplt>
 800b620:	1e03      	subs	r3, r0, #0
 800b622:	d003      	beq.n	800b62c <SP100_ISI_Ctrl+0x8b0>
 800b624:	4b62      	ldr	r3, [pc, #392]	; (800b7b0 <SP100_ISI_Ctrl+0xa34>)
 800b626:	220f      	movs	r2, #15
 800b628:	701a      	strb	r2, [r3, #0]
 800b62a:	e229      	b.n	800ba80 <SP100_ISI_Ctrl+0xd04>
 800b62c:	4b59      	ldr	r3, [pc, #356]	; (800b794 <SP100_ISI_Ctrl+0xa18>)
 800b62e:	681a      	ldr	r2, [r3, #0]
 800b630:	4b59      	ldr	r3, [pc, #356]	; (800b798 <SP100_ISI_Ctrl+0xa1c>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	1c19      	adds	r1, r3, #0
 800b636:	1c10      	adds	r0, r2, #0
 800b638:	f7f5 fc14 	bl	8000e64 <__aeabi_fsub>
 800b63c:	1c03      	adds	r3, r0, #0
 800b63e:	2180      	movs	r1, #128	; 0x80
 800b640:	05c9      	lsls	r1, r1, #23
 800b642:	1c18      	adds	r0, r3, #0
 800b644:	f7f4 ff60 	bl	8000508 <__aeabi_fcmpge>
 800b648:	1e03      	subs	r3, r0, #0
 800b64a:	d012      	beq.n	800b672 <SP100_ISI_Ctrl+0x8f6>
 800b64c:	4b51      	ldr	r3, [pc, #324]	; (800b794 <SP100_ISI_Ctrl+0xa18>)
 800b64e:	681a      	ldr	r2, [r3, #0]
 800b650:	4b51      	ldr	r3, [pc, #324]	; (800b798 <SP100_ISI_Ctrl+0xa1c>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	1c19      	adds	r1, r3, #0
 800b656:	1c10      	adds	r0, r2, #0
 800b658:	f7f5 fc04 	bl	8000e64 <__aeabi_fsub>
 800b65c:	1c03      	adds	r3, r0, #0
 800b65e:	4958      	ldr	r1, [pc, #352]	; (800b7c0 <SP100_ISI_Ctrl+0xa44>)
 800b660:	1c18      	adds	r0, r3, #0
 800b662:	f7f4 ff33 	bl	80004cc <__aeabi_fcmplt>
 800b666:	1e03      	subs	r3, r0, #0
 800b668:	d003      	beq.n	800b672 <SP100_ISI_Ctrl+0x8f6>
 800b66a:	4b51      	ldr	r3, [pc, #324]	; (800b7b0 <SP100_ISI_Ctrl+0xa34>)
 800b66c:	220e      	movs	r2, #14
 800b66e:	701a      	strb	r2, [r3, #0]
 800b670:	e206      	b.n	800ba80 <SP100_ISI_Ctrl+0xd04>
 800b672:	4b48      	ldr	r3, [pc, #288]	; (800b794 <SP100_ISI_Ctrl+0xa18>)
 800b674:	681a      	ldr	r2, [r3, #0]
 800b676:	4b48      	ldr	r3, [pc, #288]	; (800b798 <SP100_ISI_Ctrl+0xa1c>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	1c19      	adds	r1, r3, #0
 800b67c:	1c10      	adds	r0, r2, #0
 800b67e:	f7f5 fbf1 	bl	8000e64 <__aeabi_fsub>
 800b682:	1c03      	adds	r3, r0, #0
 800b684:	21ff      	movs	r1, #255	; 0xff
 800b686:	0589      	lsls	r1, r1, #22
 800b688:	1c18      	adds	r0, r3, #0
 800b68a:	f7f4 ff3d 	bl	8000508 <__aeabi_fcmpge>
 800b68e:	1e03      	subs	r3, r0, #0
 800b690:	d013      	beq.n	800b6ba <SP100_ISI_Ctrl+0x93e>
 800b692:	4b40      	ldr	r3, [pc, #256]	; (800b794 <SP100_ISI_Ctrl+0xa18>)
 800b694:	681a      	ldr	r2, [r3, #0]
 800b696:	4b40      	ldr	r3, [pc, #256]	; (800b798 <SP100_ISI_Ctrl+0xa1c>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	1c19      	adds	r1, r3, #0
 800b69c:	1c10      	adds	r0, r2, #0
 800b69e:	f7f5 fbe1 	bl	8000e64 <__aeabi_fsub>
 800b6a2:	1c03      	adds	r3, r0, #0
 800b6a4:	2180      	movs	r1, #128	; 0x80
 800b6a6:	05c9      	lsls	r1, r1, #23
 800b6a8:	1c18      	adds	r0, r3, #0
 800b6aa:	f7f4 ff0f 	bl	80004cc <__aeabi_fcmplt>
 800b6ae:	1e03      	subs	r3, r0, #0
 800b6b0:	d003      	beq.n	800b6ba <SP100_ISI_Ctrl+0x93e>
 800b6b2:	4b3f      	ldr	r3, [pc, #252]	; (800b7b0 <SP100_ISI_Ctrl+0xa34>)
 800b6b4:	220d      	movs	r2, #13
 800b6b6:	701a      	strb	r2, [r3, #0]
 800b6b8:	e1e2      	b.n	800ba80 <SP100_ISI_Ctrl+0xd04>
 800b6ba:	4b36      	ldr	r3, [pc, #216]	; (800b794 <SP100_ISI_Ctrl+0xa18>)
 800b6bc:	681a      	ldr	r2, [r3, #0]
 800b6be:	4b36      	ldr	r3, [pc, #216]	; (800b798 <SP100_ISI_Ctrl+0xa1c>)
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	1c19      	adds	r1, r3, #0
 800b6c4:	1c10      	adds	r0, r2, #0
 800b6c6:	f7f5 fbcd 	bl	8000e64 <__aeabi_fsub>
 800b6ca:	1c03      	adds	r3, r0, #0
 800b6cc:	21fe      	movs	r1, #254	; 0xfe
 800b6ce:	0589      	lsls	r1, r1, #22
 800b6d0:	1c18      	adds	r0, r3, #0
 800b6d2:	f7f4 ff19 	bl	8000508 <__aeabi_fcmpge>
 800b6d6:	1e03      	subs	r3, r0, #0
 800b6d8:	d013      	beq.n	800b702 <SP100_ISI_Ctrl+0x986>
 800b6da:	4b2e      	ldr	r3, [pc, #184]	; (800b794 <SP100_ISI_Ctrl+0xa18>)
 800b6dc:	681a      	ldr	r2, [r3, #0]
 800b6de:	4b2e      	ldr	r3, [pc, #184]	; (800b798 <SP100_ISI_Ctrl+0xa1c>)
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	1c19      	adds	r1, r3, #0
 800b6e4:	1c10      	adds	r0, r2, #0
 800b6e6:	f7f5 fbbd 	bl	8000e64 <__aeabi_fsub>
 800b6ea:	1c03      	adds	r3, r0, #0
 800b6ec:	21ff      	movs	r1, #255	; 0xff
 800b6ee:	0589      	lsls	r1, r1, #22
 800b6f0:	1c18      	adds	r0, r3, #0
 800b6f2:	f7f4 feeb 	bl	80004cc <__aeabi_fcmplt>
 800b6f6:	1e03      	subs	r3, r0, #0
 800b6f8:	d003      	beq.n	800b702 <SP100_ISI_Ctrl+0x986>
 800b6fa:	4b2d      	ldr	r3, [pc, #180]	; (800b7b0 <SP100_ISI_Ctrl+0xa34>)
 800b6fc:	220c      	movs	r2, #12
 800b6fe:	701a      	strb	r2, [r3, #0]
 800b700:	e1be      	b.n	800ba80 <SP100_ISI_Ctrl+0xd04>
 800b702:	4b24      	ldr	r3, [pc, #144]	; (800b794 <SP100_ISI_Ctrl+0xa18>)
 800b704:	681a      	ldr	r2, [r3, #0]
 800b706:	4b24      	ldr	r3, [pc, #144]	; (800b798 <SP100_ISI_Ctrl+0xa1c>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	1c19      	adds	r1, r3, #0
 800b70c:	1c10      	adds	r0, r2, #0
 800b70e:	f7f5 fba9 	bl	8000e64 <__aeabi_fsub>
 800b712:	1c03      	adds	r3, r0, #0
 800b714:	21fc      	movs	r1, #252	; 0xfc
 800b716:	0589      	lsls	r1, r1, #22
 800b718:	1c18      	adds	r0, r3, #0
 800b71a:	f7f4 fef5 	bl	8000508 <__aeabi_fcmpge>
 800b71e:	1e03      	subs	r3, r0, #0
 800b720:	d013      	beq.n	800b74a <SP100_ISI_Ctrl+0x9ce>
 800b722:	4b1c      	ldr	r3, [pc, #112]	; (800b794 <SP100_ISI_Ctrl+0xa18>)
 800b724:	681a      	ldr	r2, [r3, #0]
 800b726:	4b1c      	ldr	r3, [pc, #112]	; (800b798 <SP100_ISI_Ctrl+0xa1c>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	1c19      	adds	r1, r3, #0
 800b72c:	1c10      	adds	r0, r2, #0
 800b72e:	f7f5 fb99 	bl	8000e64 <__aeabi_fsub>
 800b732:	1c03      	adds	r3, r0, #0
 800b734:	21fe      	movs	r1, #254	; 0xfe
 800b736:	0589      	lsls	r1, r1, #22
 800b738:	1c18      	adds	r0, r3, #0
 800b73a:	f7f4 fec7 	bl	80004cc <__aeabi_fcmplt>
 800b73e:	1e03      	subs	r3, r0, #0
 800b740:	d003      	beq.n	800b74a <SP100_ISI_Ctrl+0x9ce>
 800b742:	4b1b      	ldr	r3, [pc, #108]	; (800b7b0 <SP100_ISI_Ctrl+0xa34>)
 800b744:	220b      	movs	r2, #11
 800b746:	701a      	strb	r2, [r3, #0]
 800b748:	e19a      	b.n	800ba80 <SP100_ISI_Ctrl+0xd04>
 800b74a:	4b12      	ldr	r3, [pc, #72]	; (800b794 <SP100_ISI_Ctrl+0xa18>)
 800b74c:	681a      	ldr	r2, [r3, #0]
 800b74e:	4b12      	ldr	r3, [pc, #72]	; (800b798 <SP100_ISI_Ctrl+0xa1c>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	1c19      	adds	r1, r3, #0
 800b754:	1c10      	adds	r0, r2, #0
 800b756:	f7f5 fb85 	bl	8000e64 <__aeabi_fsub>
 800b75a:	1c03      	adds	r3, r0, #0
 800b75c:	21bf      	movs	r1, #191	; 0xbf
 800b75e:	0609      	lsls	r1, r1, #24
 800b760:	1c18      	adds	r0, r3, #0
 800b762:	f7f4 fec7 	bl	80004f4 <__aeabi_fcmpgt>
 800b766:	1e03      	subs	r3, r0, #0
 800b768:	d02c      	beq.n	800b7c4 <SP100_ISI_Ctrl+0xa48>
 800b76a:	4b0a      	ldr	r3, [pc, #40]	; (800b794 <SP100_ISI_Ctrl+0xa18>)
 800b76c:	681a      	ldr	r2, [r3, #0]
 800b76e:	4b0a      	ldr	r3, [pc, #40]	; (800b798 <SP100_ISI_Ctrl+0xa1c>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	1c19      	adds	r1, r3, #0
 800b774:	1c10      	adds	r0, r2, #0
 800b776:	f7f5 fb75 	bl	8000e64 <__aeabi_fsub>
 800b77a:	1c03      	adds	r3, r0, #0
 800b77c:	21fc      	movs	r1, #252	; 0xfc
 800b77e:	0589      	lsls	r1, r1, #22
 800b780:	1c18      	adds	r0, r3, #0
 800b782:	f7f4 fea3 	bl	80004cc <__aeabi_fcmplt>
 800b786:	1e03      	subs	r3, r0, #0
 800b788:	d01c      	beq.n	800b7c4 <SP100_ISI_Ctrl+0xa48>
 800b78a:	4b09      	ldr	r3, [pc, #36]	; (800b7b0 <SP100_ISI_Ctrl+0xa34>)
 800b78c:	220a      	movs	r2, #10
 800b78e:	701a      	strb	r2, [r3, #0]
 800b790:	e176      	b.n	800ba80 <SP100_ISI_Ctrl+0xd04>
 800b792:	46c0      	nop			; (mov r8, r8)
 800b794:	20000014 	.word	0x20000014
 800b798:	2000058c 	.word	0x2000058c
 800b79c:	200005b1 	.word	0x200005b1
 800b7a0:	2000000b 	.word	0x2000000b
 800b7a4:	20000570 	.word	0x20000570
 800b7a8:	20000572 	.word	0x20000572
 800b7ac:	40a00000 	.word	0x40a00000
 800b7b0:	200005b2 	.word	0x200005b2
 800b7b4:	40900000 	.word	0x40900000
 800b7b8:	40600000 	.word	0x40600000
 800b7bc:	40400000 	.word	0x40400000
 800b7c0:	40200000 	.word	0x40200000
 800b7c4:	4b9a      	ldr	r3, [pc, #616]	; (800ba30 <SP100_ISI_Ctrl+0xcb4>)
 800b7c6:	681a      	ldr	r2, [r3, #0]
 800b7c8:	4b9a      	ldr	r3, [pc, #616]	; (800ba34 <SP100_ISI_Ctrl+0xcb8>)
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	1c19      	adds	r1, r3, #0
 800b7ce:	1c10      	adds	r0, r2, #0
 800b7d0:	f7f5 fb48 	bl	8000e64 <__aeabi_fsub>
 800b7d4:	1c03      	adds	r3, r0, #0
 800b7d6:	4998      	ldr	r1, [pc, #608]	; (800ba38 <SP100_ISI_Ctrl+0xcbc>)
 800b7d8:	1c18      	adds	r0, r3, #0
 800b7da:	f7f4 fe8b 	bl	80004f4 <__aeabi_fcmpgt>
 800b7de:	1e03      	subs	r3, r0, #0
 800b7e0:	d013      	beq.n	800b80a <SP100_ISI_Ctrl+0xa8e>
 800b7e2:	4b93      	ldr	r3, [pc, #588]	; (800ba30 <SP100_ISI_Ctrl+0xcb4>)
 800b7e4:	681a      	ldr	r2, [r3, #0]
 800b7e6:	4b93      	ldr	r3, [pc, #588]	; (800ba34 <SP100_ISI_Ctrl+0xcb8>)
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	1c19      	adds	r1, r3, #0
 800b7ec:	1c10      	adds	r0, r2, #0
 800b7ee:	f7f5 fb39 	bl	8000e64 <__aeabi_fsub>
 800b7f2:	1c03      	adds	r3, r0, #0
 800b7f4:	21bf      	movs	r1, #191	; 0xbf
 800b7f6:	0609      	lsls	r1, r1, #24
 800b7f8:	1c18      	adds	r0, r3, #0
 800b7fa:	f7f4 fe71 	bl	80004e0 <__aeabi_fcmple>
 800b7fe:	1e03      	subs	r3, r0, #0
 800b800:	d003      	beq.n	800b80a <SP100_ISI_Ctrl+0xa8e>
 800b802:	4b8e      	ldr	r3, [pc, #568]	; (800ba3c <SP100_ISI_Ctrl+0xcc0>)
 800b804:	2209      	movs	r2, #9
 800b806:	701a      	strb	r2, [r3, #0]
 800b808:	e13a      	b.n	800ba80 <SP100_ISI_Ctrl+0xd04>
 800b80a:	4b89      	ldr	r3, [pc, #548]	; (800ba30 <SP100_ISI_Ctrl+0xcb4>)
 800b80c:	681a      	ldr	r2, [r3, #0]
 800b80e:	4b89      	ldr	r3, [pc, #548]	; (800ba34 <SP100_ISI_Ctrl+0xcb8>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	1c19      	adds	r1, r3, #0
 800b814:	1c10      	adds	r0, r2, #0
 800b816:	f7f5 fb25 	bl	8000e64 <__aeabi_fsub>
 800b81a:	1c03      	adds	r3, r0, #0
 800b81c:	4988      	ldr	r1, [pc, #544]	; (800ba40 <SP100_ISI_Ctrl+0xcc4>)
 800b81e:	1c18      	adds	r0, r3, #0
 800b820:	f7f4 fe68 	bl	80004f4 <__aeabi_fcmpgt>
 800b824:	1e03      	subs	r3, r0, #0
 800b826:	d012      	beq.n	800b84e <SP100_ISI_Ctrl+0xad2>
 800b828:	4b81      	ldr	r3, [pc, #516]	; (800ba30 <SP100_ISI_Ctrl+0xcb4>)
 800b82a:	681a      	ldr	r2, [r3, #0]
 800b82c:	4b81      	ldr	r3, [pc, #516]	; (800ba34 <SP100_ISI_Ctrl+0xcb8>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	1c19      	adds	r1, r3, #0
 800b832:	1c10      	adds	r0, r2, #0
 800b834:	f7f5 fb16 	bl	8000e64 <__aeabi_fsub>
 800b838:	1c03      	adds	r3, r0, #0
 800b83a:	497f      	ldr	r1, [pc, #508]	; (800ba38 <SP100_ISI_Ctrl+0xcbc>)
 800b83c:	1c18      	adds	r0, r3, #0
 800b83e:	f7f4 fe4f 	bl	80004e0 <__aeabi_fcmple>
 800b842:	1e03      	subs	r3, r0, #0
 800b844:	d003      	beq.n	800b84e <SP100_ISI_Ctrl+0xad2>
 800b846:	4b7d      	ldr	r3, [pc, #500]	; (800ba3c <SP100_ISI_Ctrl+0xcc0>)
 800b848:	2208      	movs	r2, #8
 800b84a:	701a      	strb	r2, [r3, #0]
 800b84c:	e118      	b.n	800ba80 <SP100_ISI_Ctrl+0xd04>
 800b84e:	4b78      	ldr	r3, [pc, #480]	; (800ba30 <SP100_ISI_Ctrl+0xcb4>)
 800b850:	681a      	ldr	r2, [r3, #0]
 800b852:	4b78      	ldr	r3, [pc, #480]	; (800ba34 <SP100_ISI_Ctrl+0xcb8>)
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	1c19      	adds	r1, r3, #0
 800b858:	1c10      	adds	r0, r2, #0
 800b85a:	f7f5 fb03 	bl	8000e64 <__aeabi_fsub>
 800b85e:	1c03      	adds	r3, r0, #0
 800b860:	21c0      	movs	r1, #192	; 0xc0
 800b862:	0609      	lsls	r1, r1, #24
 800b864:	1c18      	adds	r0, r3, #0
 800b866:	f7f4 fe45 	bl	80004f4 <__aeabi_fcmpgt>
 800b86a:	1e03      	subs	r3, r0, #0
 800b86c:	d012      	beq.n	800b894 <SP100_ISI_Ctrl+0xb18>
 800b86e:	4b70      	ldr	r3, [pc, #448]	; (800ba30 <SP100_ISI_Ctrl+0xcb4>)
 800b870:	681a      	ldr	r2, [r3, #0]
 800b872:	4b70      	ldr	r3, [pc, #448]	; (800ba34 <SP100_ISI_Ctrl+0xcb8>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	1c19      	adds	r1, r3, #0
 800b878:	1c10      	adds	r0, r2, #0
 800b87a:	f7f5 faf3 	bl	8000e64 <__aeabi_fsub>
 800b87e:	1c03      	adds	r3, r0, #0
 800b880:	496f      	ldr	r1, [pc, #444]	; (800ba40 <SP100_ISI_Ctrl+0xcc4>)
 800b882:	1c18      	adds	r0, r3, #0
 800b884:	f7f4 fe2c 	bl	80004e0 <__aeabi_fcmple>
 800b888:	1e03      	subs	r3, r0, #0
 800b88a:	d003      	beq.n	800b894 <SP100_ISI_Ctrl+0xb18>
 800b88c:	4b6b      	ldr	r3, [pc, #428]	; (800ba3c <SP100_ISI_Ctrl+0xcc0>)
 800b88e:	2207      	movs	r2, #7
 800b890:	701a      	strb	r2, [r3, #0]
 800b892:	e0f5      	b.n	800ba80 <SP100_ISI_Ctrl+0xd04>
 800b894:	4b66      	ldr	r3, [pc, #408]	; (800ba30 <SP100_ISI_Ctrl+0xcb4>)
 800b896:	681a      	ldr	r2, [r3, #0]
 800b898:	4b66      	ldr	r3, [pc, #408]	; (800ba34 <SP100_ISI_Ctrl+0xcb8>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	1c19      	adds	r1, r3, #0
 800b89e:	1c10      	adds	r0, r2, #0
 800b8a0:	f7f5 fae0 	bl	8000e64 <__aeabi_fsub>
 800b8a4:	1c03      	adds	r3, r0, #0
 800b8a6:	4967      	ldr	r1, [pc, #412]	; (800ba44 <SP100_ISI_Ctrl+0xcc8>)
 800b8a8:	1c18      	adds	r0, r3, #0
 800b8aa:	f7f4 fe23 	bl	80004f4 <__aeabi_fcmpgt>
 800b8ae:	1e03      	subs	r3, r0, #0
 800b8b0:	d013      	beq.n	800b8da <SP100_ISI_Ctrl+0xb5e>
 800b8b2:	4b5f      	ldr	r3, [pc, #380]	; (800ba30 <SP100_ISI_Ctrl+0xcb4>)
 800b8b4:	681a      	ldr	r2, [r3, #0]
 800b8b6:	4b5f      	ldr	r3, [pc, #380]	; (800ba34 <SP100_ISI_Ctrl+0xcb8>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	1c19      	adds	r1, r3, #0
 800b8bc:	1c10      	adds	r0, r2, #0
 800b8be:	f7f5 fad1 	bl	8000e64 <__aeabi_fsub>
 800b8c2:	1c03      	adds	r3, r0, #0
 800b8c4:	21c0      	movs	r1, #192	; 0xc0
 800b8c6:	0609      	lsls	r1, r1, #24
 800b8c8:	1c18      	adds	r0, r3, #0
 800b8ca:	f7f4 fe09 	bl	80004e0 <__aeabi_fcmple>
 800b8ce:	1e03      	subs	r3, r0, #0
 800b8d0:	d003      	beq.n	800b8da <SP100_ISI_Ctrl+0xb5e>
 800b8d2:	4b5a      	ldr	r3, [pc, #360]	; (800ba3c <SP100_ISI_Ctrl+0xcc0>)
 800b8d4:	2206      	movs	r2, #6
 800b8d6:	701a      	strb	r2, [r3, #0]
 800b8d8:	e0d2      	b.n	800ba80 <SP100_ISI_Ctrl+0xd04>
 800b8da:	4b55      	ldr	r3, [pc, #340]	; (800ba30 <SP100_ISI_Ctrl+0xcb4>)
 800b8dc:	681a      	ldr	r2, [r3, #0]
 800b8de:	4b55      	ldr	r3, [pc, #340]	; (800ba34 <SP100_ISI_Ctrl+0xcb8>)
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	1c19      	adds	r1, r3, #0
 800b8e4:	1c10      	adds	r0, r2, #0
 800b8e6:	f7f5 fabd 	bl	8000e64 <__aeabi_fsub>
 800b8ea:	1c03      	adds	r3, r0, #0
 800b8ec:	4956      	ldr	r1, [pc, #344]	; (800ba48 <SP100_ISI_Ctrl+0xccc>)
 800b8ee:	1c18      	adds	r0, r3, #0
 800b8f0:	f7f4 fe00 	bl	80004f4 <__aeabi_fcmpgt>
 800b8f4:	1e03      	subs	r3, r0, #0
 800b8f6:	d012      	beq.n	800b91e <SP100_ISI_Ctrl+0xba2>
 800b8f8:	4b4d      	ldr	r3, [pc, #308]	; (800ba30 <SP100_ISI_Ctrl+0xcb4>)
 800b8fa:	681a      	ldr	r2, [r3, #0]
 800b8fc:	4b4d      	ldr	r3, [pc, #308]	; (800ba34 <SP100_ISI_Ctrl+0xcb8>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	1c19      	adds	r1, r3, #0
 800b902:	1c10      	adds	r0, r2, #0
 800b904:	f7f5 faae 	bl	8000e64 <__aeabi_fsub>
 800b908:	1c03      	adds	r3, r0, #0
 800b90a:	494e      	ldr	r1, [pc, #312]	; (800ba44 <SP100_ISI_Ctrl+0xcc8>)
 800b90c:	1c18      	adds	r0, r3, #0
 800b90e:	f7f4 fde7 	bl	80004e0 <__aeabi_fcmple>
 800b912:	1e03      	subs	r3, r0, #0
 800b914:	d003      	beq.n	800b91e <SP100_ISI_Ctrl+0xba2>
 800b916:	4b49      	ldr	r3, [pc, #292]	; (800ba3c <SP100_ISI_Ctrl+0xcc0>)
 800b918:	2205      	movs	r2, #5
 800b91a:	701a      	strb	r2, [r3, #0]
 800b91c:	e0b0      	b.n	800ba80 <SP100_ISI_Ctrl+0xd04>
 800b91e:	4b44      	ldr	r3, [pc, #272]	; (800ba30 <SP100_ISI_Ctrl+0xcb4>)
 800b920:	681a      	ldr	r2, [r3, #0]
 800b922:	4b44      	ldr	r3, [pc, #272]	; (800ba34 <SP100_ISI_Ctrl+0xcb8>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	1c19      	adds	r1, r3, #0
 800b928:	1c10      	adds	r0, r2, #0
 800b92a:	f7f5 fa9b 	bl	8000e64 <__aeabi_fsub>
 800b92e:	1c03      	adds	r3, r0, #0
 800b930:	4946      	ldr	r1, [pc, #280]	; (800ba4c <SP100_ISI_Ctrl+0xcd0>)
 800b932:	1c18      	adds	r0, r3, #0
 800b934:	f7f4 fdde 	bl	80004f4 <__aeabi_fcmpgt>
 800b938:	1e03      	subs	r3, r0, #0
 800b93a:	d012      	beq.n	800b962 <SP100_ISI_Ctrl+0xbe6>
 800b93c:	4b3c      	ldr	r3, [pc, #240]	; (800ba30 <SP100_ISI_Ctrl+0xcb4>)
 800b93e:	681a      	ldr	r2, [r3, #0]
 800b940:	4b3c      	ldr	r3, [pc, #240]	; (800ba34 <SP100_ISI_Ctrl+0xcb8>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	1c19      	adds	r1, r3, #0
 800b946:	1c10      	adds	r0, r2, #0
 800b948:	f7f5 fa8c 	bl	8000e64 <__aeabi_fsub>
 800b94c:	1c03      	adds	r3, r0, #0
 800b94e:	493e      	ldr	r1, [pc, #248]	; (800ba48 <SP100_ISI_Ctrl+0xccc>)
 800b950:	1c18      	adds	r0, r3, #0
 800b952:	f7f4 fdc5 	bl	80004e0 <__aeabi_fcmple>
 800b956:	1e03      	subs	r3, r0, #0
 800b958:	d003      	beq.n	800b962 <SP100_ISI_Ctrl+0xbe6>
 800b95a:	4b38      	ldr	r3, [pc, #224]	; (800ba3c <SP100_ISI_Ctrl+0xcc0>)
 800b95c:	2204      	movs	r2, #4
 800b95e:	701a      	strb	r2, [r3, #0]
 800b960:	e08e      	b.n	800ba80 <SP100_ISI_Ctrl+0xd04>
 800b962:	4b33      	ldr	r3, [pc, #204]	; (800ba30 <SP100_ISI_Ctrl+0xcb4>)
 800b964:	681a      	ldr	r2, [r3, #0]
 800b966:	4b33      	ldr	r3, [pc, #204]	; (800ba34 <SP100_ISI_Ctrl+0xcb8>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	1c19      	adds	r1, r3, #0
 800b96c:	1c10      	adds	r0, r2, #0
 800b96e:	f7f5 fa79 	bl	8000e64 <__aeabi_fsub>
 800b972:	1c03      	adds	r3, r0, #0
 800b974:	4936      	ldr	r1, [pc, #216]	; (800ba50 <SP100_ISI_Ctrl+0xcd4>)
 800b976:	1c18      	adds	r0, r3, #0
 800b978:	f7f4 fdbc 	bl	80004f4 <__aeabi_fcmpgt>
 800b97c:	1e03      	subs	r3, r0, #0
 800b97e:	d012      	beq.n	800b9a6 <SP100_ISI_Ctrl+0xc2a>
 800b980:	4b2b      	ldr	r3, [pc, #172]	; (800ba30 <SP100_ISI_Ctrl+0xcb4>)
 800b982:	681a      	ldr	r2, [r3, #0]
 800b984:	4b2b      	ldr	r3, [pc, #172]	; (800ba34 <SP100_ISI_Ctrl+0xcb8>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	1c19      	adds	r1, r3, #0
 800b98a:	1c10      	adds	r0, r2, #0
 800b98c:	f7f5 fa6a 	bl	8000e64 <__aeabi_fsub>
 800b990:	1c03      	adds	r3, r0, #0
 800b992:	492e      	ldr	r1, [pc, #184]	; (800ba4c <SP100_ISI_Ctrl+0xcd0>)
 800b994:	1c18      	adds	r0, r3, #0
 800b996:	f7f4 fda3 	bl	80004e0 <__aeabi_fcmple>
 800b99a:	1e03      	subs	r3, r0, #0
 800b99c:	d003      	beq.n	800b9a6 <SP100_ISI_Ctrl+0xc2a>
 800b99e:	4b27      	ldr	r3, [pc, #156]	; (800ba3c <SP100_ISI_Ctrl+0xcc0>)
 800b9a0:	2203      	movs	r2, #3
 800b9a2:	701a      	strb	r2, [r3, #0]
 800b9a4:	e06c      	b.n	800ba80 <SP100_ISI_Ctrl+0xd04>
 800b9a6:	4b22      	ldr	r3, [pc, #136]	; (800ba30 <SP100_ISI_Ctrl+0xcb4>)
 800b9a8:	681a      	ldr	r2, [r3, #0]
 800b9aa:	4b22      	ldr	r3, [pc, #136]	; (800ba34 <SP100_ISI_Ctrl+0xcb8>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	1c19      	adds	r1, r3, #0
 800b9b0:	1c10      	adds	r0, r2, #0
 800b9b2:	f7f5 fa57 	bl	8000e64 <__aeabi_fsub>
 800b9b6:	1c03      	adds	r3, r0, #0
 800b9b8:	4926      	ldr	r1, [pc, #152]	; (800ba54 <SP100_ISI_Ctrl+0xcd8>)
 800b9ba:	1c18      	adds	r0, r3, #0
 800b9bc:	f7f4 fd9a 	bl	80004f4 <__aeabi_fcmpgt>
 800b9c0:	1e03      	subs	r3, r0, #0
 800b9c2:	d012      	beq.n	800b9ea <SP100_ISI_Ctrl+0xc6e>
 800b9c4:	4b1a      	ldr	r3, [pc, #104]	; (800ba30 <SP100_ISI_Ctrl+0xcb4>)
 800b9c6:	681a      	ldr	r2, [r3, #0]
 800b9c8:	4b1a      	ldr	r3, [pc, #104]	; (800ba34 <SP100_ISI_Ctrl+0xcb8>)
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	1c19      	adds	r1, r3, #0
 800b9ce:	1c10      	adds	r0, r2, #0
 800b9d0:	f7f5 fa48 	bl	8000e64 <__aeabi_fsub>
 800b9d4:	1c03      	adds	r3, r0, #0
 800b9d6:	491e      	ldr	r1, [pc, #120]	; (800ba50 <SP100_ISI_Ctrl+0xcd4>)
 800b9d8:	1c18      	adds	r0, r3, #0
 800b9da:	f7f4 fd81 	bl	80004e0 <__aeabi_fcmple>
 800b9de:	1e03      	subs	r3, r0, #0
 800b9e0:	d003      	beq.n	800b9ea <SP100_ISI_Ctrl+0xc6e>
 800b9e2:	4b16      	ldr	r3, [pc, #88]	; (800ba3c <SP100_ISI_Ctrl+0xcc0>)
 800b9e4:	2202      	movs	r2, #2
 800b9e6:	701a      	strb	r2, [r3, #0]
 800b9e8:	e04a      	b.n	800ba80 <SP100_ISI_Ctrl+0xd04>
 800b9ea:	4b11      	ldr	r3, [pc, #68]	; (800ba30 <SP100_ISI_Ctrl+0xcb4>)
 800b9ec:	681a      	ldr	r2, [r3, #0]
 800b9ee:	4b11      	ldr	r3, [pc, #68]	; (800ba34 <SP100_ISI_Ctrl+0xcb8>)
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	1c19      	adds	r1, r3, #0
 800b9f4:	1c10      	adds	r0, r2, #0
 800b9f6:	f7f5 fa35 	bl	8000e64 <__aeabi_fsub>
 800b9fa:	1c03      	adds	r3, r0, #0
 800b9fc:	4916      	ldr	r1, [pc, #88]	; (800ba58 <SP100_ISI_Ctrl+0xcdc>)
 800b9fe:	1c18      	adds	r0, r3, #0
 800ba00:	f7f4 fd78 	bl	80004f4 <__aeabi_fcmpgt>
 800ba04:	1e03      	subs	r3, r0, #0
 800ba06:	d029      	beq.n	800ba5c <SP100_ISI_Ctrl+0xce0>
 800ba08:	4b09      	ldr	r3, [pc, #36]	; (800ba30 <SP100_ISI_Ctrl+0xcb4>)
 800ba0a:	681a      	ldr	r2, [r3, #0]
 800ba0c:	4b09      	ldr	r3, [pc, #36]	; (800ba34 <SP100_ISI_Ctrl+0xcb8>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	1c19      	adds	r1, r3, #0
 800ba12:	1c10      	adds	r0, r2, #0
 800ba14:	f7f5 fa26 	bl	8000e64 <__aeabi_fsub>
 800ba18:	1c03      	adds	r3, r0, #0
 800ba1a:	490e      	ldr	r1, [pc, #56]	; (800ba54 <SP100_ISI_Ctrl+0xcd8>)
 800ba1c:	1c18      	adds	r0, r3, #0
 800ba1e:	f7f4 fd5f 	bl	80004e0 <__aeabi_fcmple>
 800ba22:	1e03      	subs	r3, r0, #0
 800ba24:	d01a      	beq.n	800ba5c <SP100_ISI_Ctrl+0xce0>
 800ba26:	4b05      	ldr	r3, [pc, #20]	; (800ba3c <SP100_ISI_Ctrl+0xcc0>)
 800ba28:	2201      	movs	r2, #1
 800ba2a:	701a      	strb	r2, [r3, #0]
 800ba2c:	e028      	b.n	800ba80 <SP100_ISI_Ctrl+0xd04>
 800ba2e:	46c0      	nop			; (mov r8, r8)
 800ba30:	20000014 	.word	0x20000014
 800ba34:	2000058c 	.word	0x2000058c
 800ba38:	bf800000 	.word	0xbf800000
 800ba3c:	200005b2 	.word	0x200005b2
 800ba40:	bfc00000 	.word	0xbfc00000
 800ba44:	c0200000 	.word	0xc0200000
 800ba48:	c0400000 	.word	0xc0400000
 800ba4c:	c0600000 	.word	0xc0600000
 800ba50:	c0800000 	.word	0xc0800000
 800ba54:	c0900000 	.word	0xc0900000
 800ba58:	c0a00000 	.word	0xc0a00000
 800ba5c:	4bc9      	ldr	r3, [pc, #804]	; (800bd84 <SP100_ISI_Ctrl+0x1008>)
 800ba5e:	681a      	ldr	r2, [r3, #0]
 800ba60:	4bc9      	ldr	r3, [pc, #804]	; (800bd88 <SP100_ISI_Ctrl+0x100c>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	1c19      	adds	r1, r3, #0
 800ba66:	1c10      	adds	r0, r2, #0
 800ba68:	f7f5 f9fc 	bl	8000e64 <__aeabi_fsub>
 800ba6c:	1c03      	adds	r3, r0, #0
 800ba6e:	49c7      	ldr	r1, [pc, #796]	; (800bd8c <SP100_ISI_Ctrl+0x1010>)
 800ba70:	1c18      	adds	r0, r3, #0
 800ba72:	f7f4 fd35 	bl	80004e0 <__aeabi_fcmple>
 800ba76:	1e03      	subs	r3, r0, #0
 800ba78:	d002      	beq.n	800ba80 <SP100_ISI_Ctrl+0xd04>
 800ba7a:	4bc5      	ldr	r3, [pc, #788]	; (800bd90 <SP100_ISI_Ctrl+0x1014>)
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	701a      	strb	r2, [r3, #0]
 800ba80:	4bc0      	ldr	r3, [pc, #768]	; (800bd84 <SP100_ISI_Ctrl+0x1008>)
 800ba82:	681a      	ldr	r2, [r3, #0]
 800ba84:	4bc3      	ldr	r3, [pc, #780]	; (800bd94 <SP100_ISI_Ctrl+0x1018>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	1c19      	adds	r1, r3, #0
 800ba8a:	1c10      	adds	r0, r2, #0
 800ba8c:	f7f5 f9ea 	bl	8000e64 <__aeabi_fsub>
 800ba90:	1c03      	adds	r3, r0, #0
 800ba92:	21fe      	movs	r1, #254	; 0xfe
 800ba94:	0589      	lsls	r1, r1, #22
 800ba96:	1c18      	adds	r0, r3, #0
 800ba98:	f7f4 fd36 	bl	8000508 <__aeabi_fcmpge>
 800ba9c:	1e03      	subs	r3, r0, #0
 800ba9e:	d010      	beq.n	800bac2 <SP100_ISI_Ctrl+0xd46>
 800baa0:	4bb8      	ldr	r3, [pc, #736]	; (800bd84 <SP100_ISI_Ctrl+0x1008>)
 800baa2:	681a      	ldr	r2, [r3, #0]
 800baa4:	4bbb      	ldr	r3, [pc, #748]	; (800bd94 <SP100_ISI_Ctrl+0x1018>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	1c19      	adds	r1, r3, #0
 800baaa:	1c10      	adds	r0, r2, #0
 800baac:	f7f5 f9da 	bl	8000e64 <__aeabi_fsub>
 800bab0:	1c03      	adds	r3, r0, #0
 800bab2:	2180      	movs	r1, #128	; 0x80
 800bab4:	05c9      	lsls	r1, r1, #23
 800bab6:	1c18      	adds	r0, r3, #0
 800bab8:	f7f4 fd08 	bl	80004cc <__aeabi_fcmplt>
 800babc:	1e03      	subs	r3, r0, #0
 800babe:	d000      	beq.n	800bac2 <SP100_ISI_Ctrl+0xd46>
 800bac0:	46c0      	nop			; (mov r8, r8)
 800bac2:	4bb0      	ldr	r3, [pc, #704]	; (800bd84 <SP100_ISI_Ctrl+0x1008>)
 800bac4:	681a      	ldr	r2, [r3, #0]
 800bac6:	4bb3      	ldr	r3, [pc, #716]	; (800bd94 <SP100_ISI_Ctrl+0x1018>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	1c19      	adds	r1, r3, #0
 800bacc:	1c10      	adds	r0, r2, #0
 800bace:	f7f5 f9c9 	bl	8000e64 <__aeabi_fsub>
 800bad2:	1c03      	adds	r3, r0, #0
 800bad4:	2180      	movs	r1, #128	; 0x80
 800bad6:	05c9      	lsls	r1, r1, #23
 800bad8:	1c18      	adds	r0, r3, #0
 800bada:	f7f4 fd15 	bl	8000508 <__aeabi_fcmpge>
 800bade:	1e03      	subs	r3, r0, #0
 800bae0:	d03f      	beq.n	800bb62 <SP100_ISI_Ctrl+0xde6>
 800bae2:	4ba8      	ldr	r3, [pc, #672]	; (800bd84 <SP100_ISI_Ctrl+0x1008>)
 800bae4:	681a      	ldr	r2, [r3, #0]
 800bae6:	4bab      	ldr	r3, [pc, #684]	; (800bd94 <SP100_ISI_Ctrl+0x1018>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	1c19      	adds	r1, r3, #0
 800baec:	1c10      	adds	r0, r2, #0
 800baee:	f7f5 f9b9 	bl	8000e64 <__aeabi_fsub>
 800baf2:	1c03      	adds	r3, r0, #0
 800baf4:	1c18      	adds	r0, r3, #0
 800baf6:	f008 faa5 	bl	8014044 <floorf>
 800bafa:	1c03      	adds	r3, r0, #0
 800bafc:	637b      	str	r3, [r7, #52]	; 0x34
 800bafe:	49a6      	ldr	r1, [pc, #664]	; (800bd98 <SP100_ISI_Ctrl+0x101c>)
 800bb00:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bb02:	f7f4 fd01 	bl	8000508 <__aeabi_fcmpge>
 800bb06:	1e03      	subs	r3, r0, #0
 800bb08:	d001      	beq.n	800bb0e <SP100_ISI_Ctrl+0xd92>
 800bb0a:	4ba3      	ldr	r3, [pc, #652]	; (800bd98 <SP100_ISI_Ctrl+0x101c>)
 800bb0c:	637b      	str	r3, [r7, #52]	; 0x34
 800bb0e:	49a3      	ldr	r1, [pc, #652]	; (800bd9c <SP100_ISI_Ctrl+0x1020>)
 800bb10:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bb12:	f7f5 f9a7 	bl	8000e64 <__aeabi_fsub>
 800bb16:	1c03      	adds	r3, r0, #0
 800bb18:	637b      	str	r3, [r7, #52]	; 0x34
 800bb1a:	4b9d      	ldr	r3, [pc, #628]	; (800bd90 <SP100_ISI_Ctrl+0x1014>)
 800bb1c:	781b      	ldrb	r3, [r3, #0]
 800bb1e:	0018      	movs	r0, r3
 800bb20:	f7f5 fb84 	bl	800122c <__aeabi_i2f>
 800bb24:	1c03      	adds	r3, r0, #0
 800bb26:	1c19      	adds	r1, r3, #0
 800bb28:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bb2a:	f7f4 fd0f 	bl	800054c <__aeabi_fadd>
 800bb2e:	1c03      	adds	r3, r0, #0
 800bb30:	637b      	str	r3, [r7, #52]	; 0x34
 800bb32:	2100      	movs	r1, #0
 800bb34:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bb36:	f7f4 fcc9 	bl	80004cc <__aeabi_fcmplt>
 800bb3a:	1e03      	subs	r3, r0, #0
 800bb3c:	d001      	beq.n	800bb42 <SP100_ISI_Ctrl+0xdc6>
 800bb3e:	2300      	movs	r3, #0
 800bb40:	637b      	str	r3, [r7, #52]	; 0x34
 800bb42:	4997      	ldr	r1, [pc, #604]	; (800bda0 <SP100_ISI_Ctrl+0x1024>)
 800bb44:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bb46:	f7f4 fcd5 	bl	80004f4 <__aeabi_fcmpgt>
 800bb4a:	1e03      	subs	r3, r0, #0
 800bb4c:	d001      	beq.n	800bb52 <SP100_ISI_Ctrl+0xdd6>
 800bb4e:	4b94      	ldr	r3, [pc, #592]	; (800bda0 <SP100_ISI_Ctrl+0x1024>)
 800bb50:	637b      	str	r3, [r7, #52]	; 0x34
 800bb52:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800bb54:	f7f4 fce2 	bl	800051c <__aeabi_f2uiz>
 800bb58:	0003      	movs	r3, r0
 800bb5a:	b2da      	uxtb	r2, r3
 800bb5c:	4b8c      	ldr	r3, [pc, #560]	; (800bd90 <SP100_ISI_Ctrl+0x1014>)
 800bb5e:	701a      	strb	r2, [r3, #0]
 800bb60:	e04f      	b.n	800bc02 <SP100_ISI_Ctrl+0xe86>
 800bb62:	4b88      	ldr	r3, [pc, #544]	; (800bd84 <SP100_ISI_Ctrl+0x1008>)
 800bb64:	681a      	ldr	r2, [r3, #0]
 800bb66:	4b8b      	ldr	r3, [pc, #556]	; (800bd94 <SP100_ISI_Ctrl+0x1018>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	1c19      	adds	r1, r3, #0
 800bb6c:	1c10      	adds	r0, r2, #0
 800bb6e:	f7f5 f979 	bl	8000e64 <__aeabi_fsub>
 800bb72:	1c03      	adds	r3, r0, #0
 800bb74:	21fe      	movs	r1, #254	; 0xfe
 800bb76:	0589      	lsls	r1, r1, #22
 800bb78:	1c18      	adds	r0, r3, #0
 800bb7a:	f7f4 fca7 	bl	80004cc <__aeabi_fcmplt>
 800bb7e:	1e03      	subs	r3, r0, #0
 800bb80:	d03f      	beq.n	800bc02 <SP100_ISI_Ctrl+0xe86>
 800bb82:	4b80      	ldr	r3, [pc, #512]	; (800bd84 <SP100_ISI_Ctrl+0x1008>)
 800bb84:	681a      	ldr	r2, [r3, #0]
 800bb86:	4b83      	ldr	r3, [pc, #524]	; (800bd94 <SP100_ISI_Ctrl+0x1018>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	1c19      	adds	r1, r3, #0
 800bb8c:	1c10      	adds	r0, r2, #0
 800bb8e:	f7f5 f969 	bl	8000e64 <__aeabi_fsub>
 800bb92:	1c03      	adds	r3, r0, #0
 800bb94:	1c18      	adds	r0, r3, #0
 800bb96:	f008 fa55 	bl	8014044 <floorf>
 800bb9a:	1c03      	adds	r3, r0, #0
 800bb9c:	633b      	str	r3, [r7, #48]	; 0x30
 800bb9e:	4981      	ldr	r1, [pc, #516]	; (800bda4 <SP100_ISI_Ctrl+0x1028>)
 800bba0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bba2:	f7f4 fc93 	bl	80004cc <__aeabi_fcmplt>
 800bba6:	1e03      	subs	r3, r0, #0
 800bba8:	d001      	beq.n	800bbae <SP100_ISI_Ctrl+0xe32>
 800bbaa:	4b7e      	ldr	r3, [pc, #504]	; (800bda4 <SP100_ISI_Ctrl+0x1028>)
 800bbac:	633b      	str	r3, [r7, #48]	; 0x30
 800bbae:	21fe      	movs	r1, #254	; 0xfe
 800bbb0:	0589      	lsls	r1, r1, #22
 800bbb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbb4:	f7f5 f956 	bl	8000e64 <__aeabi_fsub>
 800bbb8:	1c03      	adds	r3, r0, #0
 800bbba:	633b      	str	r3, [r7, #48]	; 0x30
 800bbbc:	4b74      	ldr	r3, [pc, #464]	; (800bd90 <SP100_ISI_Ctrl+0x1014>)
 800bbbe:	781b      	ldrb	r3, [r3, #0]
 800bbc0:	0018      	movs	r0, r3
 800bbc2:	f7f5 fb33 	bl	800122c <__aeabi_i2f>
 800bbc6:	1c03      	adds	r3, r0, #0
 800bbc8:	1c19      	adds	r1, r3, #0
 800bbca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbcc:	f7f4 fcbe 	bl	800054c <__aeabi_fadd>
 800bbd0:	1c03      	adds	r3, r0, #0
 800bbd2:	633b      	str	r3, [r7, #48]	; 0x30
 800bbd4:	2100      	movs	r1, #0
 800bbd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbd8:	f7f4 fc78 	bl	80004cc <__aeabi_fcmplt>
 800bbdc:	1e03      	subs	r3, r0, #0
 800bbde:	d001      	beq.n	800bbe4 <SP100_ISI_Ctrl+0xe68>
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	633b      	str	r3, [r7, #48]	; 0x30
 800bbe4:	496e      	ldr	r1, [pc, #440]	; (800bda0 <SP100_ISI_Ctrl+0x1024>)
 800bbe6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbe8:	f7f4 fc84 	bl	80004f4 <__aeabi_fcmpgt>
 800bbec:	1e03      	subs	r3, r0, #0
 800bbee:	d001      	beq.n	800bbf4 <SP100_ISI_Ctrl+0xe78>
 800bbf0:	4b6b      	ldr	r3, [pc, #428]	; (800bda0 <SP100_ISI_Ctrl+0x1024>)
 800bbf2:	633b      	str	r3, [r7, #48]	; 0x30
 800bbf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bbf6:	f7f4 fc91 	bl	800051c <__aeabi_f2uiz>
 800bbfa:	0003      	movs	r3, r0
 800bbfc:	b2da      	uxtb	r2, r3
 800bbfe:	4b64      	ldr	r3, [pc, #400]	; (800bd90 <SP100_ISI_Ctrl+0x1014>)
 800bc00:	701a      	strb	r2, [r3, #0]
 800bc02:	4b63      	ldr	r3, [pc, #396]	; (800bd90 <SP100_ISI_Ctrl+0x1014>)
 800bc04:	781a      	ldrb	r2, [r3, #0]
 800bc06:	4b68      	ldr	r3, [pc, #416]	; (800bda8 <SP100_ISI_Ctrl+0x102c>)
 800bc08:	701a      	strb	r2, [r3, #0]
 800bc0a:	4b5e      	ldr	r3, [pc, #376]	; (800bd84 <SP100_ISI_Ctrl+0x1008>)
 800bc0c:	681a      	ldr	r2, [r3, #0]
 800bc0e:	4b61      	ldr	r3, [pc, #388]	; (800bd94 <SP100_ISI_Ctrl+0x1018>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	1c19      	adds	r1, r3, #0
 800bc14:	1c10      	adds	r0, r2, #0
 800bc16:	f7f5 f925 	bl	8000e64 <__aeabi_fsub>
 800bc1a:	1c03      	adds	r3, r0, #0
 800bc1c:	4963      	ldr	r1, [pc, #396]	; (800bdac <SP100_ISI_Ctrl+0x1030>)
 800bc1e:	1c18      	adds	r0, r3, #0
 800bc20:	f7f4 fc68 	bl	80004f4 <__aeabi_fcmpgt>
 800bc24:	1e03      	subs	r3, r0, #0
 800bc26:	d100      	bne.n	800bc2a <SP100_ISI_Ctrl+0xeae>
 800bc28:	e17e      	b.n	800bf28 <SP100_ISI_Ctrl+0x11ac>
 800bc2a:	4b61      	ldr	r3, [pc, #388]	; (800bdb0 <SP100_ISI_Ctrl+0x1034>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	4961      	ldr	r1, [pc, #388]	; (800bdb4 <SP100_ISI_Ctrl+0x1038>)
 800bc30:	1c18      	adds	r0, r3, #0
 800bc32:	f7f4 fc69 	bl	8000508 <__aeabi_fcmpge>
 800bc36:	1e03      	subs	r3, r0, #0
 800bc38:	d100      	bne.n	800bc3c <SP100_ISI_Ctrl+0xec0>
 800bc3a:	e0c5      	b.n	800bdc8 <SP100_ISI_Ctrl+0x104c>
 800bc3c:	4b51      	ldr	r3, [pc, #324]	; (800bd84 <SP100_ISI_Ctrl+0x1008>)
 800bc3e:	681a      	ldr	r2, [r3, #0]
 800bc40:	4b51      	ldr	r3, [pc, #324]	; (800bd88 <SP100_ISI_Ctrl+0x100c>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	1c19      	adds	r1, r3, #0
 800bc46:	1c10      	adds	r0, r2, #0
 800bc48:	f7f5 f90c 	bl	8000e64 <__aeabi_fsub>
 800bc4c:	1c03      	adds	r3, r0, #0
 800bc4e:	495a      	ldr	r1, [pc, #360]	; (800bdb8 <SP100_ISI_Ctrl+0x103c>)
 800bc50:	1c18      	adds	r0, r3, #0
 800bc52:	f7f4 fc45 	bl	80004e0 <__aeabi_fcmple>
 800bc56:	1e03      	subs	r3, r0, #0
 800bc58:	d035      	beq.n	800bcc6 <SP100_ISI_Ctrl+0xf4a>
 800bc5a:	4b4a      	ldr	r3, [pc, #296]	; (800bd84 <SP100_ISI_Ctrl+0x1008>)
 800bc5c:	681a      	ldr	r2, [r3, #0]
 800bc5e:	4b4a      	ldr	r3, [pc, #296]	; (800bd88 <SP100_ISI_Ctrl+0x100c>)
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	1c19      	adds	r1, r3, #0
 800bc64:	1c10      	adds	r0, r2, #0
 800bc66:	f7f5 f8fd 	bl	8000e64 <__aeabi_fsub>
 800bc6a:	1c03      	adds	r3, r0, #0
 800bc6c:	1c18      	adds	r0, r3, #0
 800bc6e:	f7f7 f911 	bl	8002e94 <__aeabi_f2d>
 800bc72:	4a52      	ldr	r2, [pc, #328]	; (800bdbc <SP100_ISI_Ctrl+0x1040>)
 800bc74:	4b52      	ldr	r3, [pc, #328]	; (800bdc0 <SP100_ISI_Ctrl+0x1044>)
 800bc76:	f7f6 fa65 	bl	8002144 <__aeabi_dmul>
 800bc7a:	0002      	movs	r2, r0
 800bc7c:	000b      	movs	r3, r1
 800bc7e:	0010      	movs	r0, r2
 800bc80:	0019      	movs	r1, r3
 800bc82:	f7f7 f94f 	bl	8002f24 <__aeabi_d2f>
 800bc86:	1c03      	adds	r3, r0, #0
 800bc88:	005b      	lsls	r3, r3, #1
 800bc8a:	085b      	lsrs	r3, r3, #1
 800bc8c:	21fe      	movs	r1, #254	; 0xfe
 800bc8e:	0589      	lsls	r1, r1, #22
 800bc90:	1c18      	adds	r0, r3, #0
 800bc92:	f7f4 fc5b 	bl	800054c <__aeabi_fadd>
 800bc96:	1c03      	adds	r3, r0, #0
 800bc98:	1c18      	adds	r0, r3, #0
 800bc9a:	f008 f995 	bl	8013fc8 <ceilf>
 800bc9e:	1c03      	adds	r3, r0, #0
 800bca0:	1c18      	adds	r0, r3, #0
 800bca2:	f7f5 faa3 	bl	80011ec <__aeabi_f2iz>
 800bca6:	0003      	movs	r3, r0
 800bca8:	603b      	str	r3, [r7, #0]
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	2b08      	cmp	r3, #8
 800bcae:	dd04      	ble.n	800bcba <SP100_ISI_Ctrl+0xf3e>
 800bcb0:	4b44      	ldr	r3, [pc, #272]	; (800bdc4 <SP100_ISI_Ctrl+0x1048>)
 800bcb2:	2208      	movs	r2, #8
 800bcb4:	701a      	strb	r2, [r3, #0]
 800bcb6:	f000 fd01 	bl	800c6bc <SP100_ISI_Ctrl+0x1940>
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	b2da      	uxtb	r2, r3
 800bcbe:	4b41      	ldr	r3, [pc, #260]	; (800bdc4 <SP100_ISI_Ctrl+0x1048>)
 800bcc0:	701a      	strb	r2, [r3, #0]
 800bcc2:	f000 fcfb 	bl	800c6bc <SP100_ISI_Ctrl+0x1940>
 800bcc6:	4b2f      	ldr	r3, [pc, #188]	; (800bd84 <SP100_ISI_Ctrl+0x1008>)
 800bcc8:	681a      	ldr	r2, [r3, #0]
 800bcca:	4b2f      	ldr	r3, [pc, #188]	; (800bd88 <SP100_ISI_Ctrl+0x100c>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	1c19      	adds	r1, r3, #0
 800bcd0:	1c10      	adds	r0, r2, #0
 800bcd2:	f7f5 f8c7 	bl	8000e64 <__aeabi_fsub>
 800bcd6:	1c03      	adds	r3, r0, #0
 800bcd8:	4937      	ldr	r1, [pc, #220]	; (800bdb8 <SP100_ISI_Ctrl+0x103c>)
 800bcda:	1c18      	adds	r0, r3, #0
 800bcdc:	f7f4 fc0a 	bl	80004f4 <__aeabi_fcmpgt>
 800bce0:	1e03      	subs	r3, r0, #0
 800bce2:	d014      	beq.n	800bd0e <SP100_ISI_Ctrl+0xf92>
 800bce4:	4b27      	ldr	r3, [pc, #156]	; (800bd84 <SP100_ISI_Ctrl+0x1008>)
 800bce6:	681a      	ldr	r2, [r3, #0]
 800bce8:	4b27      	ldr	r3, [pc, #156]	; (800bd88 <SP100_ISI_Ctrl+0x100c>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	1c19      	adds	r1, r3, #0
 800bcee:	1c10      	adds	r0, r2, #0
 800bcf0:	f7f5 f8b8 	bl	8000e64 <__aeabi_fsub>
 800bcf4:	1c03      	adds	r3, r0, #0
 800bcf6:	21fe      	movs	r1, #254	; 0xfe
 800bcf8:	0589      	lsls	r1, r1, #22
 800bcfa:	1c18      	adds	r0, r3, #0
 800bcfc:	f7f4 fbe6 	bl	80004cc <__aeabi_fcmplt>
 800bd00:	1e03      	subs	r3, r0, #0
 800bd02:	d004      	beq.n	800bd0e <SP100_ISI_Ctrl+0xf92>
 800bd04:	4b2f      	ldr	r3, [pc, #188]	; (800bdc4 <SP100_ISI_Ctrl+0x1048>)
 800bd06:	2201      	movs	r2, #1
 800bd08:	701a      	strb	r2, [r3, #0]
 800bd0a:	f000 fcd7 	bl	800c6bc <SP100_ISI_Ctrl+0x1940>
 800bd0e:	4b1d      	ldr	r3, [pc, #116]	; (800bd84 <SP100_ISI_Ctrl+0x1008>)
 800bd10:	681a      	ldr	r2, [r3, #0]
 800bd12:	4b1d      	ldr	r3, [pc, #116]	; (800bd88 <SP100_ISI_Ctrl+0x100c>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	1c19      	adds	r1, r3, #0
 800bd18:	1c10      	adds	r0, r2, #0
 800bd1a:	f7f5 f8a3 	bl	8000e64 <__aeabi_fsub>
 800bd1e:	1c03      	adds	r3, r0, #0
 800bd20:	21fe      	movs	r1, #254	; 0xfe
 800bd22:	0589      	lsls	r1, r1, #22
 800bd24:	1c18      	adds	r0, r3, #0
 800bd26:	f7f4 fbef 	bl	8000508 <__aeabi_fcmpge>
 800bd2a:	1e03      	subs	r3, r0, #0
 800bd2c:	d101      	bne.n	800bd32 <SP100_ISI_Ctrl+0xfb6>
 800bd2e:	f000 fcc5 	bl	800c6bc <SP100_ISI_Ctrl+0x1940>
 800bd32:	4b14      	ldr	r3, [pc, #80]	; (800bd84 <SP100_ISI_Ctrl+0x1008>)
 800bd34:	681a      	ldr	r2, [r3, #0]
 800bd36:	4b14      	ldr	r3, [pc, #80]	; (800bd88 <SP100_ISI_Ctrl+0x100c>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	1c19      	adds	r1, r3, #0
 800bd3c:	1c10      	adds	r0, r2, #0
 800bd3e:	f7f5 f891 	bl	8000e64 <__aeabi_fsub>
 800bd42:	1c03      	adds	r3, r0, #0
 800bd44:	005b      	lsls	r3, r3, #1
 800bd46:	085b      	lsrs	r3, r3, #1
 800bd48:	21fc      	movs	r1, #252	; 0xfc
 800bd4a:	0589      	lsls	r1, r1, #22
 800bd4c:	1c18      	adds	r0, r3, #0
 800bd4e:	f7f4 fbfd 	bl	800054c <__aeabi_fadd>
 800bd52:	1c03      	adds	r3, r0, #0
 800bd54:	1c18      	adds	r0, r3, #0
 800bd56:	f008 f937 	bl	8013fc8 <ceilf>
 800bd5a:	1c03      	adds	r3, r0, #0
 800bd5c:	1c18      	adds	r0, r3, #0
 800bd5e:	f7f5 fa45 	bl	80011ec <__aeabi_f2iz>
 800bd62:	0003      	movs	r3, r0
 800bd64:	607b      	str	r3, [r7, #4]
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2b08      	cmp	r3, #8
 800bd6a:	dd04      	ble.n	800bd76 <SP100_ISI_Ctrl+0xffa>
 800bd6c:	4b15      	ldr	r3, [pc, #84]	; (800bdc4 <SP100_ISI_Ctrl+0x1048>)
 800bd6e:	2208      	movs	r2, #8
 800bd70:	701a      	strb	r2, [r3, #0]
 800bd72:	f000 fca3 	bl	800c6bc <SP100_ISI_Ctrl+0x1940>
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	b2da      	uxtb	r2, r3
 800bd7a:	4b12      	ldr	r3, [pc, #72]	; (800bdc4 <SP100_ISI_Ctrl+0x1048>)
 800bd7c:	701a      	strb	r2, [r3, #0]
 800bd7e:	f000 fc9d 	bl	800c6bc <SP100_ISI_Ctrl+0x1940>
 800bd82:	46c0      	nop			; (mov r8, r8)
 800bd84:	20000014 	.word	0x20000014
 800bd88:	2000058c 	.word	0x2000058c
 800bd8c:	c0a00000 	.word	0xc0a00000
 800bd90:	200005b2 	.word	0x200005b2
 800bd94:	20000594 	.word	0x20000594
 800bd98:	41200000 	.word	0x41200000
 800bd9c:	40400000 	.word	0x40400000
 800bda0:	41a00000 	.word	0x41a00000
 800bda4:	c1200000 	.word	0xc1200000
 800bda8:	20000573 	.word	0x20000573
 800bdac:	40200000 	.word	0x40200000
 800bdb0:	20000590 	.word	0x20000590
 800bdb4:	42820000 	.word	0x42820000
 800bdb8:	bf800000 	.word	0xbf800000
 800bdbc:	9999999a 	.word	0x9999999a
 800bdc0:	3fd99999 	.word	0x3fd99999
 800bdc4:	200005b3 	.word	0x200005b3
 800bdc8:	4bdf      	ldr	r3, [pc, #892]	; (800c148 <SP100_ISI_Ctrl+0x13cc>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	49df      	ldr	r1, [pc, #892]	; (800c14c <SP100_ISI_Ctrl+0x13d0>)
 800bdce:	1c18      	adds	r0, r3, #0
 800bdd0:	f7f4 fb90 	bl	80004f4 <__aeabi_fcmpgt>
 800bdd4:	1e03      	subs	r3, r0, #0
 800bdd6:	d100      	bne.n	800bdda <SP100_ISI_Ctrl+0x105e>
 800bdd8:	e097      	b.n	800bf0a <SP100_ISI_Ctrl+0x118e>
 800bdda:	4bdb      	ldr	r3, [pc, #876]	; (800c148 <SP100_ISI_Ctrl+0x13cc>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	49dc      	ldr	r1, [pc, #880]	; (800c150 <SP100_ISI_Ctrl+0x13d4>)
 800bde0:	1c18      	adds	r0, r3, #0
 800bde2:	f7f4 fb73 	bl	80004cc <__aeabi_fcmplt>
 800bde6:	1e03      	subs	r3, r0, #0
 800bde8:	d100      	bne.n	800bdec <SP100_ISI_Ctrl+0x1070>
 800bdea:	e08e      	b.n	800bf0a <SP100_ISI_Ctrl+0x118e>
 800bdec:	4bd9      	ldr	r3, [pc, #868]	; (800c154 <SP100_ISI_Ctrl+0x13d8>)
 800bdee:	681a      	ldr	r2, [r3, #0]
 800bdf0:	4bd9      	ldr	r3, [pc, #868]	; (800c158 <SP100_ISI_Ctrl+0x13dc>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	1c19      	adds	r1, r3, #0
 800bdf6:	1c10      	adds	r0, r2, #0
 800bdf8:	f7f5 f834 	bl	8000e64 <__aeabi_fsub>
 800bdfc:	1c03      	adds	r3, r0, #0
 800bdfe:	49d7      	ldr	r1, [pc, #860]	; (800c15c <SP100_ISI_Ctrl+0x13e0>)
 800be00:	1c18      	adds	r0, r3, #0
 800be02:	f7f4 fb63 	bl	80004cc <__aeabi_fcmplt>
 800be06:	1e03      	subs	r3, r0, #0
 800be08:	d024      	beq.n	800be54 <SP100_ISI_Ctrl+0x10d8>
 800be0a:	4bcf      	ldr	r3, [pc, #828]	; (800c148 <SP100_ISI_Ctrl+0x13cc>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	1c18      	adds	r0, r3, #0
 800be10:	f7f7 f840 	bl	8002e94 <__aeabi_f2d>
 800be14:	4ad2      	ldr	r2, [pc, #840]	; (800c160 <SP100_ISI_Ctrl+0x13e4>)
 800be16:	4bd3      	ldr	r3, [pc, #844]	; (800c164 <SP100_ISI_Ctrl+0x13e8>)
 800be18:	f7f6 f994 	bl	8002144 <__aeabi_dmul>
 800be1c:	0002      	movs	r2, r0
 800be1e:	000b      	movs	r3, r1
 800be20:	0010      	movs	r0, r2
 800be22:	0019      	movs	r1, r3
 800be24:	2200      	movs	r2, #0
 800be26:	4bd0      	ldr	r3, [pc, #832]	; (800c168 <SP100_ISI_Ctrl+0x13ec>)
 800be28:	f7f6 fbf8 	bl	800261c <__aeabi_dsub>
 800be2c:	0002      	movs	r2, r0
 800be2e:	000b      	movs	r3, r1
 800be30:	0010      	movs	r0, r2
 800be32:	0019      	movs	r1, r3
 800be34:	f7f7 f876 	bl	8002f24 <__aeabi_d2f>
 800be38:	1c03      	adds	r3, r0, #0
 800be3a:	1c18      	adds	r0, r3, #0
 800be3c:	f008 f902 	bl	8014044 <floorf>
 800be40:	1c03      	adds	r3, r0, #0
 800be42:	1c18      	adds	r0, r3, #0
 800be44:	f7f4 fb6a 	bl	800051c <__aeabi_f2uiz>
 800be48:	0003      	movs	r3, r0
 800be4a:	b2da      	uxtb	r2, r3
 800be4c:	4bc7      	ldr	r3, [pc, #796]	; (800c16c <SP100_ISI_Ctrl+0x13f0>)
 800be4e:	701a      	strb	r2, [r3, #0]
 800be50:	f000 fc34 	bl	800c6bc <SP100_ISI_Ctrl+0x1940>
 800be54:	4bbf      	ldr	r3, [pc, #764]	; (800c154 <SP100_ISI_Ctrl+0x13d8>)
 800be56:	681a      	ldr	r2, [r3, #0]
 800be58:	4bbf      	ldr	r3, [pc, #764]	; (800c158 <SP100_ISI_Ctrl+0x13dc>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	1c19      	adds	r1, r3, #0
 800be5e:	1c10      	adds	r0, r2, #0
 800be60:	f7f5 f800 	bl	8000e64 <__aeabi_fsub>
 800be64:	1c03      	adds	r3, r0, #0
 800be66:	49bd      	ldr	r1, [pc, #756]	; (800c15c <SP100_ISI_Ctrl+0x13e0>)
 800be68:	1c18      	adds	r0, r3, #0
 800be6a:	f7f4 fb4d 	bl	8000508 <__aeabi_fcmpge>
 800be6e:	1e03      	subs	r3, r0, #0
 800be70:	d014      	beq.n	800be9c <SP100_ISI_Ctrl+0x1120>
 800be72:	4bb8      	ldr	r3, [pc, #736]	; (800c154 <SP100_ISI_Ctrl+0x13d8>)
 800be74:	681a      	ldr	r2, [r3, #0]
 800be76:	4bb8      	ldr	r3, [pc, #736]	; (800c158 <SP100_ISI_Ctrl+0x13dc>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	1c19      	adds	r1, r3, #0
 800be7c:	1c10      	adds	r0, r2, #0
 800be7e:	f7f4 fff1 	bl	8000e64 <__aeabi_fsub>
 800be82:	1c03      	adds	r3, r0, #0
 800be84:	21fe      	movs	r1, #254	; 0xfe
 800be86:	0589      	lsls	r1, r1, #22
 800be88:	1c18      	adds	r0, r3, #0
 800be8a:	f7f4 fb29 	bl	80004e0 <__aeabi_fcmple>
 800be8e:	1e03      	subs	r3, r0, #0
 800be90:	d004      	beq.n	800be9c <SP100_ISI_Ctrl+0x1120>
 800be92:	4bb6      	ldr	r3, [pc, #728]	; (800c16c <SP100_ISI_Ctrl+0x13f0>)
 800be94:	2201      	movs	r2, #1
 800be96:	701a      	strb	r2, [r3, #0]
 800be98:	f000 fc10 	bl	800c6bc <SP100_ISI_Ctrl+0x1940>
 800be9c:	4bad      	ldr	r3, [pc, #692]	; (800c154 <SP100_ISI_Ctrl+0x13d8>)
 800be9e:	681a      	ldr	r2, [r3, #0]
 800bea0:	4bad      	ldr	r3, [pc, #692]	; (800c158 <SP100_ISI_Ctrl+0x13dc>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	1c19      	adds	r1, r3, #0
 800bea6:	1c10      	adds	r0, r2, #0
 800bea8:	f7f4 ffdc 	bl	8000e64 <__aeabi_fsub>
 800beac:	1c03      	adds	r3, r0, #0
 800beae:	21fe      	movs	r1, #254	; 0xfe
 800beb0:	0589      	lsls	r1, r1, #22
 800beb2:	1c18      	adds	r0, r3, #0
 800beb4:	f7f4 fb1e 	bl	80004f4 <__aeabi_fcmpgt>
 800beb8:	1e03      	subs	r3, r0, #0
 800beba:	d101      	bne.n	800bec0 <SP100_ISI_Ctrl+0x1144>
 800bebc:	f000 fbfe 	bl	800c6bc <SP100_ISI_Ctrl+0x1940>
 800bec0:	4ba1      	ldr	r3, [pc, #644]	; (800c148 <SP100_ISI_Ctrl+0x13cc>)
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	1c18      	adds	r0, r3, #0
 800bec6:	f7f6 ffe5 	bl	8002e94 <__aeabi_f2d>
 800beca:	4aa5      	ldr	r2, [pc, #660]	; (800c160 <SP100_ISI_Ctrl+0x13e4>)
 800becc:	4ba5      	ldr	r3, [pc, #660]	; (800c164 <SP100_ISI_Ctrl+0x13e8>)
 800bece:	f7f6 f939 	bl	8002144 <__aeabi_dmul>
 800bed2:	0002      	movs	r2, r0
 800bed4:	000b      	movs	r3, r1
 800bed6:	0010      	movs	r0, r2
 800bed8:	0019      	movs	r1, r3
 800beda:	2200      	movs	r2, #0
 800bedc:	4ba2      	ldr	r3, [pc, #648]	; (800c168 <SP100_ISI_Ctrl+0x13ec>)
 800bede:	f7f6 fb9d 	bl	800261c <__aeabi_dsub>
 800bee2:	0002      	movs	r2, r0
 800bee4:	000b      	movs	r3, r1
 800bee6:	0010      	movs	r0, r2
 800bee8:	0019      	movs	r1, r3
 800beea:	f7f7 f81b 	bl	8002f24 <__aeabi_d2f>
 800beee:	1c03      	adds	r3, r0, #0
 800bef0:	1c18      	adds	r0, r3, #0
 800bef2:	f008 f8a7 	bl	8014044 <floorf>
 800bef6:	1c03      	adds	r3, r0, #0
 800bef8:	1c18      	adds	r0, r3, #0
 800befa:	f7f4 fb0f 	bl	800051c <__aeabi_f2uiz>
 800befe:	0003      	movs	r3, r0
 800bf00:	b2da      	uxtb	r2, r3
 800bf02:	4b9a      	ldr	r3, [pc, #616]	; (800c16c <SP100_ISI_Ctrl+0x13f0>)
 800bf04:	701a      	strb	r2, [r3, #0]
 800bf06:	f000 fbd9 	bl	800c6bc <SP100_ISI_Ctrl+0x1940>
 800bf0a:	4b8f      	ldr	r3, [pc, #572]	; (800c148 <SP100_ISI_Ctrl+0x13cc>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	498f      	ldr	r1, [pc, #572]	; (800c14c <SP100_ISI_Ctrl+0x13d0>)
 800bf10:	1c18      	adds	r0, r3, #0
 800bf12:	f7f4 fae5 	bl	80004e0 <__aeabi_fcmple>
 800bf16:	1e03      	subs	r3, r0, #0
 800bf18:	d101      	bne.n	800bf1e <SP100_ISI_Ctrl+0x11a2>
 800bf1a:	f000 fbcf 	bl	800c6bc <SP100_ISI_Ctrl+0x1940>
 800bf1e:	4b93      	ldr	r3, [pc, #588]	; (800c16c <SP100_ISI_Ctrl+0x13f0>)
 800bf20:	2201      	movs	r2, #1
 800bf22:	701a      	strb	r2, [r3, #0]
 800bf24:	f000 fbca 	bl	800c6bc <SP100_ISI_Ctrl+0x1940>
 800bf28:	4b8a      	ldr	r3, [pc, #552]	; (800c154 <SP100_ISI_Ctrl+0x13d8>)
 800bf2a:	681a      	ldr	r2, [r3, #0]
 800bf2c:	4b90      	ldr	r3, [pc, #576]	; (800c170 <SP100_ISI_Ctrl+0x13f4>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	1c19      	adds	r1, r3, #0
 800bf32:	1c10      	adds	r0, r2, #0
 800bf34:	f7f4 ff96 	bl	8000e64 <__aeabi_fsub>
 800bf38:	1c03      	adds	r3, r0, #0
 800bf3a:	498e      	ldr	r1, [pc, #568]	; (800c174 <SP100_ISI_Ctrl+0x13f8>)
 800bf3c:	1c18      	adds	r0, r3, #0
 800bf3e:	f7f4 fac5 	bl	80004cc <__aeabi_fcmplt>
 800bf42:	1e03      	subs	r3, r0, #0
 800bf44:	d100      	bne.n	800bf48 <SP100_ISI_Ctrl+0x11cc>
 800bf46:	e121      	b.n	800c18c <SP100_ISI_Ctrl+0x1410>
 800bf48:	4b82      	ldr	r3, [pc, #520]	; (800c154 <SP100_ISI_Ctrl+0x13d8>)
 800bf4a:	681a      	ldr	r2, [r3, #0]
 800bf4c:	4b88      	ldr	r3, [pc, #544]	; (800c170 <SP100_ISI_Ctrl+0x13f4>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	1c19      	adds	r1, r3, #0
 800bf52:	1c10      	adds	r0, r2, #0
 800bf54:	f7f4 ff86 	bl	8000e64 <__aeabi_fsub>
 800bf58:	1c03      	adds	r3, r0, #0
 800bf5a:	4987      	ldr	r1, [pc, #540]	; (800c178 <SP100_ISI_Ctrl+0x13fc>)
 800bf5c:	1c18      	adds	r0, r3, #0
 800bf5e:	f7f4 fac9 	bl	80004f4 <__aeabi_fcmpgt>
 800bf62:	1e03      	subs	r3, r0, #0
 800bf64:	d034      	beq.n	800bfd0 <SP100_ISI_Ctrl+0x1254>
 800bf66:	4b7b      	ldr	r3, [pc, #492]	; (800c154 <SP100_ISI_Ctrl+0x13d8>)
 800bf68:	681a      	ldr	r2, [r3, #0]
 800bf6a:	4b81      	ldr	r3, [pc, #516]	; (800c170 <SP100_ISI_Ctrl+0x13f4>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	1c19      	adds	r1, r3, #0
 800bf70:	1c10      	adds	r0, r2, #0
 800bf72:	f7f4 ff77 	bl	8000e64 <__aeabi_fsub>
 800bf76:	1c03      	adds	r3, r0, #0
 800bf78:	497e      	ldr	r1, [pc, #504]	; (800c174 <SP100_ISI_Ctrl+0x13f8>)
 800bf7a:	1c18      	adds	r0, r3, #0
 800bf7c:	f7f4 faa6 	bl	80004cc <__aeabi_fcmplt>
 800bf80:	1e03      	subs	r3, r0, #0
 800bf82:	d025      	beq.n	800bfd0 <SP100_ISI_Ctrl+0x1254>
 800bf84:	4b73      	ldr	r3, [pc, #460]	; (800c154 <SP100_ISI_Ctrl+0x13d8>)
 800bf86:	681a      	ldr	r2, [r3, #0]
 800bf88:	4b73      	ldr	r3, [pc, #460]	; (800c158 <SP100_ISI_Ctrl+0x13dc>)
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	1c19      	adds	r1, r3, #0
 800bf8e:	1c10      	adds	r0, r2, #0
 800bf90:	f7f4 ff68 	bl	8000e64 <__aeabi_fsub>
 800bf94:	1c03      	adds	r3, r0, #0
 800bf96:	005b      	lsls	r3, r3, #1
 800bf98:	085b      	lsrs	r3, r3, #1
 800bf9a:	21fc      	movs	r1, #252	; 0xfc
 800bf9c:	0589      	lsls	r1, r1, #22
 800bf9e:	1c18      	adds	r0, r3, #0
 800bfa0:	f7f4 fad4 	bl	800054c <__aeabi_fadd>
 800bfa4:	1c03      	adds	r3, r0, #0
 800bfa6:	1c18      	adds	r0, r3, #0
 800bfa8:	f008 f80e 	bl	8013fc8 <ceilf>
 800bfac:	1c03      	adds	r3, r0, #0
 800bfae:	1c18      	adds	r0, r3, #0
 800bfb0:	f7f5 f91c 	bl	80011ec <__aeabi_f2iz>
 800bfb4:	0003      	movs	r3, r0
 800bfb6:	617b      	str	r3, [r7, #20]
 800bfb8:	697b      	ldr	r3, [r7, #20]
 800bfba:	2b08      	cmp	r3, #8
 800bfbc:	dd03      	ble.n	800bfc6 <SP100_ISI_Ctrl+0x124a>
 800bfbe:	4b6b      	ldr	r3, [pc, #428]	; (800c16c <SP100_ISI_Ctrl+0x13f0>)
 800bfc0:	2208      	movs	r2, #8
 800bfc2:	701a      	strb	r2, [r3, #0]
 800bfc4:	e37a      	b.n	800c6bc <SP100_ISI_Ctrl+0x1940>
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	b2da      	uxtb	r2, r3
 800bfca:	4b68      	ldr	r3, [pc, #416]	; (800c16c <SP100_ISI_Ctrl+0x13f0>)
 800bfcc:	701a      	strb	r2, [r3, #0]
 800bfce:	e375      	b.n	800c6bc <SP100_ISI_Ctrl+0x1940>
 800bfd0:	4b60      	ldr	r3, [pc, #384]	; (800c154 <SP100_ISI_Ctrl+0x13d8>)
 800bfd2:	681a      	ldr	r2, [r3, #0]
 800bfd4:	4b66      	ldr	r3, [pc, #408]	; (800c170 <SP100_ISI_Ctrl+0x13f4>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	1c19      	adds	r1, r3, #0
 800bfda:	1c10      	adds	r0, r2, #0
 800bfdc:	f7f4 ff42 	bl	8000e64 <__aeabi_fsub>
 800bfe0:	1c03      	adds	r3, r0, #0
 800bfe2:	4966      	ldr	r1, [pc, #408]	; (800c17c <SP100_ISI_Ctrl+0x1400>)
 800bfe4:	1c18      	adds	r0, r3, #0
 800bfe6:	f7f4 fa85 	bl	80004f4 <__aeabi_fcmpgt>
 800bfea:	1e03      	subs	r3, r0, #0
 800bfec:	d034      	beq.n	800c058 <SP100_ISI_Ctrl+0x12dc>
 800bfee:	4b59      	ldr	r3, [pc, #356]	; (800c154 <SP100_ISI_Ctrl+0x13d8>)
 800bff0:	681a      	ldr	r2, [r3, #0]
 800bff2:	4b5f      	ldr	r3, [pc, #380]	; (800c170 <SP100_ISI_Ctrl+0x13f4>)
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	1c19      	adds	r1, r3, #0
 800bff8:	1c10      	adds	r0, r2, #0
 800bffa:	f7f4 ff33 	bl	8000e64 <__aeabi_fsub>
 800bffe:	1c03      	adds	r3, r0, #0
 800c000:	495d      	ldr	r1, [pc, #372]	; (800c178 <SP100_ISI_Ctrl+0x13fc>)
 800c002:	1c18      	adds	r0, r3, #0
 800c004:	f7f4 fa6c 	bl	80004e0 <__aeabi_fcmple>
 800c008:	1e03      	subs	r3, r0, #0
 800c00a:	d025      	beq.n	800c058 <SP100_ISI_Ctrl+0x12dc>
 800c00c:	4b51      	ldr	r3, [pc, #324]	; (800c154 <SP100_ISI_Ctrl+0x13d8>)
 800c00e:	681a      	ldr	r2, [r3, #0]
 800c010:	4b51      	ldr	r3, [pc, #324]	; (800c158 <SP100_ISI_Ctrl+0x13dc>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	1c19      	adds	r1, r3, #0
 800c016:	1c10      	adds	r0, r2, #0
 800c018:	f7f4 ff24 	bl	8000e64 <__aeabi_fsub>
 800c01c:	1c03      	adds	r3, r0, #0
 800c01e:	005b      	lsls	r3, r3, #1
 800c020:	085b      	lsrs	r3, r3, #1
 800c022:	21ff      	movs	r1, #255	; 0xff
 800c024:	0589      	lsls	r1, r1, #22
 800c026:	1c18      	adds	r0, r3, #0
 800c028:	f7f4 fa90 	bl	800054c <__aeabi_fadd>
 800c02c:	1c03      	adds	r3, r0, #0
 800c02e:	1c18      	adds	r0, r3, #0
 800c030:	f007 ffca 	bl	8013fc8 <ceilf>
 800c034:	1c03      	adds	r3, r0, #0
 800c036:	1c18      	adds	r0, r3, #0
 800c038:	f7f5 f8d8 	bl	80011ec <__aeabi_f2iz>
 800c03c:	0003      	movs	r3, r0
 800c03e:	613b      	str	r3, [r7, #16]
 800c040:	693b      	ldr	r3, [r7, #16]
 800c042:	2b08      	cmp	r3, #8
 800c044:	dd03      	ble.n	800c04e <SP100_ISI_Ctrl+0x12d2>
 800c046:	4b49      	ldr	r3, [pc, #292]	; (800c16c <SP100_ISI_Ctrl+0x13f0>)
 800c048:	2208      	movs	r2, #8
 800c04a:	701a      	strb	r2, [r3, #0]
 800c04c:	e336      	b.n	800c6bc <SP100_ISI_Ctrl+0x1940>
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	b2da      	uxtb	r2, r3
 800c052:	4b46      	ldr	r3, [pc, #280]	; (800c16c <SP100_ISI_Ctrl+0x13f0>)
 800c054:	701a      	strb	r2, [r3, #0]
 800c056:	e331      	b.n	800c6bc <SP100_ISI_Ctrl+0x1940>
 800c058:	4b3e      	ldr	r3, [pc, #248]	; (800c154 <SP100_ISI_Ctrl+0x13d8>)
 800c05a:	681a      	ldr	r2, [r3, #0]
 800c05c:	4b44      	ldr	r3, [pc, #272]	; (800c170 <SP100_ISI_Ctrl+0x13f4>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	1c19      	adds	r1, r3, #0
 800c062:	1c10      	adds	r0, r2, #0
 800c064:	f7f4 fefe 	bl	8000e64 <__aeabi_fsub>
 800c068:	1c03      	adds	r3, r0, #0
 800c06a:	4945      	ldr	r1, [pc, #276]	; (800c180 <SP100_ISI_Ctrl+0x1404>)
 800c06c:	1c18      	adds	r0, r3, #0
 800c06e:	f7f4 fa41 	bl	80004f4 <__aeabi_fcmpgt>
 800c072:	1e03      	subs	r3, r0, #0
 800c074:	d033      	beq.n	800c0de <SP100_ISI_Ctrl+0x1362>
 800c076:	4b37      	ldr	r3, [pc, #220]	; (800c154 <SP100_ISI_Ctrl+0x13d8>)
 800c078:	681a      	ldr	r2, [r3, #0]
 800c07a:	4b3d      	ldr	r3, [pc, #244]	; (800c170 <SP100_ISI_Ctrl+0x13f4>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	1c19      	adds	r1, r3, #0
 800c080:	1c10      	adds	r0, r2, #0
 800c082:	f7f4 feef 	bl	8000e64 <__aeabi_fsub>
 800c086:	1c03      	adds	r3, r0, #0
 800c088:	493c      	ldr	r1, [pc, #240]	; (800c17c <SP100_ISI_Ctrl+0x1400>)
 800c08a:	1c18      	adds	r0, r3, #0
 800c08c:	f7f4 fa28 	bl	80004e0 <__aeabi_fcmple>
 800c090:	1e03      	subs	r3, r0, #0
 800c092:	d024      	beq.n	800c0de <SP100_ISI_Ctrl+0x1362>
 800c094:	4b2f      	ldr	r3, [pc, #188]	; (800c154 <SP100_ISI_Ctrl+0x13d8>)
 800c096:	681a      	ldr	r2, [r3, #0]
 800c098:	4b2f      	ldr	r3, [pc, #188]	; (800c158 <SP100_ISI_Ctrl+0x13dc>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	1c19      	adds	r1, r3, #0
 800c09e:	1c10      	adds	r0, r2, #0
 800c0a0:	f7f4 fee0 	bl	8000e64 <__aeabi_fsub>
 800c0a4:	1c03      	adds	r3, r0, #0
 800c0a6:	005b      	lsls	r3, r3, #1
 800c0a8:	085b      	lsrs	r3, r3, #1
 800c0aa:	4936      	ldr	r1, [pc, #216]	; (800c184 <SP100_ISI_Ctrl+0x1408>)
 800c0ac:	1c18      	adds	r0, r3, #0
 800c0ae:	f7f4 fa4d 	bl	800054c <__aeabi_fadd>
 800c0b2:	1c03      	adds	r3, r0, #0
 800c0b4:	1c18      	adds	r0, r3, #0
 800c0b6:	f007 ff87 	bl	8013fc8 <ceilf>
 800c0ba:	1c03      	adds	r3, r0, #0
 800c0bc:	1c18      	adds	r0, r3, #0
 800c0be:	f7f5 f895 	bl	80011ec <__aeabi_f2iz>
 800c0c2:	0003      	movs	r3, r0
 800c0c4:	60fb      	str	r3, [r7, #12]
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	2b08      	cmp	r3, #8
 800c0ca:	dd03      	ble.n	800c0d4 <SP100_ISI_Ctrl+0x1358>
 800c0cc:	4b27      	ldr	r3, [pc, #156]	; (800c16c <SP100_ISI_Ctrl+0x13f0>)
 800c0ce:	2208      	movs	r2, #8
 800c0d0:	701a      	strb	r2, [r3, #0]
 800c0d2:	e2f3      	b.n	800c6bc <SP100_ISI_Ctrl+0x1940>
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	b2da      	uxtb	r2, r3
 800c0d8:	4b24      	ldr	r3, [pc, #144]	; (800c16c <SP100_ISI_Ctrl+0x13f0>)
 800c0da:	701a      	strb	r2, [r3, #0]
 800c0dc:	e2ee      	b.n	800c6bc <SP100_ISI_Ctrl+0x1940>
 800c0de:	4b1d      	ldr	r3, [pc, #116]	; (800c154 <SP100_ISI_Ctrl+0x13d8>)
 800c0e0:	681a      	ldr	r2, [r3, #0]
 800c0e2:	4b23      	ldr	r3, [pc, #140]	; (800c170 <SP100_ISI_Ctrl+0x13f4>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	1c19      	adds	r1, r3, #0
 800c0e8:	1c10      	adds	r0, r2, #0
 800c0ea:	f7f4 febb 	bl	8000e64 <__aeabi_fsub>
 800c0ee:	1c03      	adds	r3, r0, #0
 800c0f0:	4923      	ldr	r1, [pc, #140]	; (800c180 <SP100_ISI_Ctrl+0x1404>)
 800c0f2:	1c18      	adds	r0, r3, #0
 800c0f4:	f7f4 f9f4 	bl	80004e0 <__aeabi_fcmple>
 800c0f8:	1e03      	subs	r3, r0, #0
 800c0fa:	d100      	bne.n	800c0fe <SP100_ISI_Ctrl+0x1382>
 800c0fc:	e2de      	b.n	800c6bc <SP100_ISI_Ctrl+0x1940>
 800c0fe:	4b15      	ldr	r3, [pc, #84]	; (800c154 <SP100_ISI_Ctrl+0x13d8>)
 800c100:	681a      	ldr	r2, [r3, #0]
 800c102:	4b15      	ldr	r3, [pc, #84]	; (800c158 <SP100_ISI_Ctrl+0x13dc>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	1c19      	adds	r1, r3, #0
 800c108:	1c10      	adds	r0, r2, #0
 800c10a:	f7f4 feab 	bl	8000e64 <__aeabi_fsub>
 800c10e:	1c03      	adds	r3, r0, #0
 800c110:	005b      	lsls	r3, r3, #1
 800c112:	085b      	lsrs	r3, r3, #1
 800c114:	491c      	ldr	r1, [pc, #112]	; (800c188 <SP100_ISI_Ctrl+0x140c>)
 800c116:	1c18      	adds	r0, r3, #0
 800c118:	f7f4 fa18 	bl	800054c <__aeabi_fadd>
 800c11c:	1c03      	adds	r3, r0, #0
 800c11e:	1c18      	adds	r0, r3, #0
 800c120:	f007 ff52 	bl	8013fc8 <ceilf>
 800c124:	1c03      	adds	r3, r0, #0
 800c126:	1c18      	adds	r0, r3, #0
 800c128:	f7f5 f860 	bl	80011ec <__aeabi_f2iz>
 800c12c:	0003      	movs	r3, r0
 800c12e:	60bb      	str	r3, [r7, #8]
 800c130:	68bb      	ldr	r3, [r7, #8]
 800c132:	2b08      	cmp	r3, #8
 800c134:	dd03      	ble.n	800c13e <SP100_ISI_Ctrl+0x13c2>
 800c136:	4b0d      	ldr	r3, [pc, #52]	; (800c16c <SP100_ISI_Ctrl+0x13f0>)
 800c138:	2208      	movs	r2, #8
 800c13a:	701a      	strb	r2, [r3, #0]
 800c13c:	e2be      	b.n	800c6bc <SP100_ISI_Ctrl+0x1940>
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	b2da      	uxtb	r2, r3
 800c142:	4b0a      	ldr	r3, [pc, #40]	; (800c16c <SP100_ISI_Ctrl+0x13f0>)
 800c144:	701a      	strb	r2, [r3, #0]
 800c146:	e2b9      	b.n	800c6bc <SP100_ISI_Ctrl+0x1940>
 800c148:	20000590 	.word	0x20000590
 800c14c:	420c0000 	.word	0x420c0000
 800c150:	42820000 	.word	0x42820000
 800c154:	20000014 	.word	0x20000014
 800c158:	2000058c 	.word	0x2000058c
 800c15c:	bf800000 	.word	0xbf800000
 800c160:	9999999a 	.word	0x9999999a
 800c164:	3fc99999 	.word	0x3fc99999
 800c168:	40140000 	.word	0x40140000
 800c16c:	200005b3 	.word	0x200005b3
 800c170:	20000594 	.word	0x20000594
 800c174:	c0200000 	.word	0xc0200000
 800c178:	c0a00000 	.word	0xc0a00000
 800c17c:	c1200000 	.word	0xc1200000
 800c180:	c1a00000 	.word	0xc1a00000
 800c184:	40200000 	.word	0x40200000
 800c188:	40600000 	.word	0x40600000
 800c18c:	4bde      	ldr	r3, [pc, #888]	; (800c508 <SP100_ISI_Ctrl+0x178c>)
 800c18e:	681a      	ldr	r2, [r3, #0]
 800c190:	4bde      	ldr	r3, [pc, #888]	; (800c50c <SP100_ISI_Ctrl+0x1790>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	1c19      	adds	r1, r3, #0
 800c196:	1c10      	adds	r0, r2, #0
 800c198:	f7f4 fe64 	bl	8000e64 <__aeabi_fsub>
 800c19c:	1c03      	adds	r3, r0, #0
 800c19e:	49dc      	ldr	r1, [pc, #880]	; (800c510 <SP100_ISI_Ctrl+0x1794>)
 800c1a0:	1c18      	adds	r0, r3, #0
 800c1a2:	f7f4 f9b1 	bl	8000508 <__aeabi_fcmpge>
 800c1a6:	1e03      	subs	r3, r0, #0
 800c1a8:	d100      	bne.n	800c1ac <SP100_ISI_Ctrl+0x1430>
 800c1aa:	e287      	b.n	800c6bc <SP100_ISI_Ctrl+0x1940>
 800c1ac:	4bd6      	ldr	r3, [pc, #856]	; (800c508 <SP100_ISI_Ctrl+0x178c>)
 800c1ae:	681a      	ldr	r2, [r3, #0]
 800c1b0:	4bd6      	ldr	r3, [pc, #856]	; (800c50c <SP100_ISI_Ctrl+0x1790>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	1c19      	adds	r1, r3, #0
 800c1b6:	1c10      	adds	r0, r2, #0
 800c1b8:	f7f4 fe54 	bl	8000e64 <__aeabi_fsub>
 800c1bc:	1c03      	adds	r3, r0, #0
 800c1be:	49d5      	ldr	r1, [pc, #852]	; (800c514 <SP100_ISI_Ctrl+0x1798>)
 800c1c0:	1c18      	adds	r0, r3, #0
 800c1c2:	f7f4 f98d 	bl	80004e0 <__aeabi_fcmple>
 800c1c6:	1e03      	subs	r3, r0, #0
 800c1c8:	d100      	bne.n	800c1cc <SP100_ISI_Ctrl+0x1450>
 800c1ca:	e277      	b.n	800c6bc <SP100_ISI_Ctrl+0x1940>
 800c1cc:	4bd2      	ldr	r3, [pc, #840]	; (800c518 <SP100_ISI_Ctrl+0x179c>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	d000      	beq.n	800c1d6 <SP100_ISI_Ctrl+0x145a>
 800c1d4:	e14f      	b.n	800c476 <SP100_ISI_Ctrl+0x16fa>
 800c1d6:	4bd1      	ldr	r3, [pc, #836]	; (800c51c <SP100_ISI_Ctrl+0x17a0>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	49d1      	ldr	r1, [pc, #836]	; (800c520 <SP100_ISI_Ctrl+0x17a4>)
 800c1dc:	1c18      	adds	r0, r3, #0
 800c1de:	f7f4 f993 	bl	8000508 <__aeabi_fcmpge>
 800c1e2:	1e03      	subs	r3, r0, #0
 800c1e4:	d100      	bne.n	800c1e8 <SP100_ISI_Ctrl+0x146c>
 800c1e6:	e09c      	b.n	800c322 <SP100_ISI_Ctrl+0x15a6>
 800c1e8:	4bc7      	ldr	r3, [pc, #796]	; (800c508 <SP100_ISI_Ctrl+0x178c>)
 800c1ea:	681a      	ldr	r2, [r3, #0]
 800c1ec:	4bcd      	ldr	r3, [pc, #820]	; (800c524 <SP100_ISI_Ctrl+0x17a8>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	1c19      	adds	r1, r3, #0
 800c1f2:	1c10      	adds	r0, r2, #0
 800c1f4:	f7f4 fe36 	bl	8000e64 <__aeabi_fsub>
 800c1f8:	1c03      	adds	r3, r0, #0
 800c1fa:	49cb      	ldr	r1, [pc, #812]	; (800c528 <SP100_ISI_Ctrl+0x17ac>)
 800c1fc:	1c18      	adds	r0, r3, #0
 800c1fe:	f7f4 f96f 	bl	80004e0 <__aeabi_fcmple>
 800c202:	1e03      	subs	r3, r0, #0
 800c204:	d033      	beq.n	800c26e <SP100_ISI_Ctrl+0x14f2>
 800c206:	4bc0      	ldr	r3, [pc, #768]	; (800c508 <SP100_ISI_Ctrl+0x178c>)
 800c208:	681a      	ldr	r2, [r3, #0]
 800c20a:	4bc6      	ldr	r3, [pc, #792]	; (800c524 <SP100_ISI_Ctrl+0x17a8>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	1c19      	adds	r1, r3, #0
 800c210:	1c10      	adds	r0, r2, #0
 800c212:	f7f4 fe27 	bl	8000e64 <__aeabi_fsub>
 800c216:	1c03      	adds	r3, r0, #0
 800c218:	1c18      	adds	r0, r3, #0
 800c21a:	f7f6 fe3b 	bl	8002e94 <__aeabi_f2d>
 800c21e:	4ac3      	ldr	r2, [pc, #780]	; (800c52c <SP100_ISI_Ctrl+0x17b0>)
 800c220:	4bc3      	ldr	r3, [pc, #780]	; (800c530 <SP100_ISI_Ctrl+0x17b4>)
 800c222:	f7f5 ff8f 	bl	8002144 <__aeabi_dmul>
 800c226:	0002      	movs	r2, r0
 800c228:	000b      	movs	r3, r1
 800c22a:	0010      	movs	r0, r2
 800c22c:	0019      	movs	r1, r3
 800c22e:	f7f6 fe79 	bl	8002f24 <__aeabi_d2f>
 800c232:	1c03      	adds	r3, r0, #0
 800c234:	005b      	lsls	r3, r3, #1
 800c236:	085b      	lsrs	r3, r3, #1
 800c238:	21fe      	movs	r1, #254	; 0xfe
 800c23a:	0589      	lsls	r1, r1, #22
 800c23c:	1c18      	adds	r0, r3, #0
 800c23e:	f7f4 f985 	bl	800054c <__aeabi_fadd>
 800c242:	1c03      	adds	r3, r0, #0
 800c244:	1c18      	adds	r0, r3, #0
 800c246:	f007 febf 	bl	8013fc8 <ceilf>
 800c24a:	1c03      	adds	r3, r0, #0
 800c24c:	1c18      	adds	r0, r3, #0
 800c24e:	f7f4 ffcd 	bl	80011ec <__aeabi_f2iz>
 800c252:	0003      	movs	r3, r0
 800c254:	61bb      	str	r3, [r7, #24]
 800c256:	69bb      	ldr	r3, [r7, #24]
 800c258:	2b08      	cmp	r3, #8
 800c25a:	dd03      	ble.n	800c264 <SP100_ISI_Ctrl+0x14e8>
 800c25c:	4bb5      	ldr	r3, [pc, #724]	; (800c534 <SP100_ISI_Ctrl+0x17b8>)
 800c25e:	2208      	movs	r2, #8
 800c260:	701a      	strb	r2, [r3, #0]
 800c262:	e22b      	b.n	800c6bc <SP100_ISI_Ctrl+0x1940>
 800c264:	69bb      	ldr	r3, [r7, #24]
 800c266:	b2da      	uxtb	r2, r3
 800c268:	4bb2      	ldr	r3, [pc, #712]	; (800c534 <SP100_ISI_Ctrl+0x17b8>)
 800c26a:	701a      	strb	r2, [r3, #0]
 800c26c:	e226      	b.n	800c6bc <SP100_ISI_Ctrl+0x1940>
 800c26e:	4ba6      	ldr	r3, [pc, #664]	; (800c508 <SP100_ISI_Ctrl+0x178c>)
 800c270:	681a      	ldr	r2, [r3, #0]
 800c272:	4bac      	ldr	r3, [pc, #688]	; (800c524 <SP100_ISI_Ctrl+0x17a8>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	1c19      	adds	r1, r3, #0
 800c278:	1c10      	adds	r0, r2, #0
 800c27a:	f7f4 fdf3 	bl	8000e64 <__aeabi_fsub>
 800c27e:	1c03      	adds	r3, r0, #0
 800c280:	49a9      	ldr	r1, [pc, #676]	; (800c528 <SP100_ISI_Ctrl+0x17ac>)
 800c282:	1c18      	adds	r0, r3, #0
 800c284:	f7f4 f936 	bl	80004f4 <__aeabi_fcmpgt>
 800c288:	1e03      	subs	r3, r0, #0
 800c28a:	d013      	beq.n	800c2b4 <SP100_ISI_Ctrl+0x1538>
 800c28c:	4b9e      	ldr	r3, [pc, #632]	; (800c508 <SP100_ISI_Ctrl+0x178c>)
 800c28e:	681a      	ldr	r2, [r3, #0]
 800c290:	4ba4      	ldr	r3, [pc, #656]	; (800c524 <SP100_ISI_Ctrl+0x17a8>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	1c19      	adds	r1, r3, #0
 800c296:	1c10      	adds	r0, r2, #0
 800c298:	f7f4 fde4 	bl	8000e64 <__aeabi_fsub>
 800c29c:	1c03      	adds	r3, r0, #0
 800c29e:	21fe      	movs	r1, #254	; 0xfe
 800c2a0:	0589      	lsls	r1, r1, #22
 800c2a2:	1c18      	adds	r0, r3, #0
 800c2a4:	f7f4 f912 	bl	80004cc <__aeabi_fcmplt>
 800c2a8:	1e03      	subs	r3, r0, #0
 800c2aa:	d003      	beq.n	800c2b4 <SP100_ISI_Ctrl+0x1538>
 800c2ac:	4ba1      	ldr	r3, [pc, #644]	; (800c534 <SP100_ISI_Ctrl+0x17b8>)
 800c2ae:	2201      	movs	r2, #1
 800c2b0:	701a      	strb	r2, [r3, #0]
 800c2b2:	e203      	b.n	800c6bc <SP100_ISI_Ctrl+0x1940>
 800c2b4:	4b94      	ldr	r3, [pc, #592]	; (800c508 <SP100_ISI_Ctrl+0x178c>)
 800c2b6:	681a      	ldr	r2, [r3, #0]
 800c2b8:	4b9a      	ldr	r3, [pc, #616]	; (800c524 <SP100_ISI_Ctrl+0x17a8>)
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	1c19      	adds	r1, r3, #0
 800c2be:	1c10      	adds	r0, r2, #0
 800c2c0:	f7f4 fdd0 	bl	8000e64 <__aeabi_fsub>
 800c2c4:	1c03      	adds	r3, r0, #0
 800c2c6:	21fe      	movs	r1, #254	; 0xfe
 800c2c8:	0589      	lsls	r1, r1, #22
 800c2ca:	1c18      	adds	r0, r3, #0
 800c2cc:	f7f4 f91c 	bl	8000508 <__aeabi_fcmpge>
 800c2d0:	1e03      	subs	r3, r0, #0
 800c2d2:	d100      	bne.n	800c2d6 <SP100_ISI_Ctrl+0x155a>
 800c2d4:	e1f2      	b.n	800c6bc <SP100_ISI_Ctrl+0x1940>
 800c2d6:	4b8c      	ldr	r3, [pc, #560]	; (800c508 <SP100_ISI_Ctrl+0x178c>)
 800c2d8:	681a      	ldr	r2, [r3, #0]
 800c2da:	4b92      	ldr	r3, [pc, #584]	; (800c524 <SP100_ISI_Ctrl+0x17a8>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	1c19      	adds	r1, r3, #0
 800c2e0:	1c10      	adds	r0, r2, #0
 800c2e2:	f7f4 fdbf 	bl	8000e64 <__aeabi_fsub>
 800c2e6:	1c03      	adds	r3, r0, #0
 800c2e8:	005b      	lsls	r3, r3, #1
 800c2ea:	085b      	lsrs	r3, r3, #1
 800c2ec:	21fc      	movs	r1, #252	; 0xfc
 800c2ee:	0589      	lsls	r1, r1, #22
 800c2f0:	1c18      	adds	r0, r3, #0
 800c2f2:	f7f4 f92b 	bl	800054c <__aeabi_fadd>
 800c2f6:	1c03      	adds	r3, r0, #0
 800c2f8:	1c18      	adds	r0, r3, #0
 800c2fa:	f007 fe65 	bl	8013fc8 <ceilf>
 800c2fe:	1c03      	adds	r3, r0, #0
 800c300:	1c18      	adds	r0, r3, #0
 800c302:	f7f4 ff73 	bl	80011ec <__aeabi_f2iz>
 800c306:	0003      	movs	r3, r0
 800c308:	61fb      	str	r3, [r7, #28]
 800c30a:	69fb      	ldr	r3, [r7, #28]
 800c30c:	2b08      	cmp	r3, #8
 800c30e:	dd03      	ble.n	800c318 <SP100_ISI_Ctrl+0x159c>
 800c310:	4b88      	ldr	r3, [pc, #544]	; (800c534 <SP100_ISI_Ctrl+0x17b8>)
 800c312:	2208      	movs	r2, #8
 800c314:	701a      	strb	r2, [r3, #0]
 800c316:	e1d1      	b.n	800c6bc <SP100_ISI_Ctrl+0x1940>
 800c318:	69fb      	ldr	r3, [r7, #28]
 800c31a:	b2da      	uxtb	r2, r3
 800c31c:	4b85      	ldr	r3, [pc, #532]	; (800c534 <SP100_ISI_Ctrl+0x17b8>)
 800c31e:	701a      	strb	r2, [r3, #0]
 800c320:	e1cc      	b.n	800c6bc <SP100_ISI_Ctrl+0x1940>
 800c322:	4b7e      	ldr	r3, [pc, #504]	; (800c51c <SP100_ISI_Ctrl+0x17a0>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	4984      	ldr	r1, [pc, #528]	; (800c538 <SP100_ISI_Ctrl+0x17bc>)
 800c328:	1c18      	adds	r0, r3, #0
 800c32a:	f7f4 f8e3 	bl	80004f4 <__aeabi_fcmpgt>
 800c32e:	1e03      	subs	r3, r0, #0
 800c330:	d100      	bne.n	800c334 <SP100_ISI_Ctrl+0x15b8>
 800c332:	e093      	b.n	800c45c <SP100_ISI_Ctrl+0x16e0>
 800c334:	4b79      	ldr	r3, [pc, #484]	; (800c51c <SP100_ISI_Ctrl+0x17a0>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	4979      	ldr	r1, [pc, #484]	; (800c520 <SP100_ISI_Ctrl+0x17a4>)
 800c33a:	1c18      	adds	r0, r3, #0
 800c33c:	f7f4 f8c6 	bl	80004cc <__aeabi_fcmplt>
 800c340:	1e03      	subs	r3, r0, #0
 800c342:	d100      	bne.n	800c346 <SP100_ISI_Ctrl+0x15ca>
 800c344:	e08a      	b.n	800c45c <SP100_ISI_Ctrl+0x16e0>
 800c346:	4b70      	ldr	r3, [pc, #448]	; (800c508 <SP100_ISI_Ctrl+0x178c>)
 800c348:	681a      	ldr	r2, [r3, #0]
 800c34a:	4b76      	ldr	r3, [pc, #472]	; (800c524 <SP100_ISI_Ctrl+0x17a8>)
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	1c19      	adds	r1, r3, #0
 800c350:	1c10      	adds	r0, r2, #0
 800c352:	f7f4 fd87 	bl	8000e64 <__aeabi_fsub>
 800c356:	1c03      	adds	r3, r0, #0
 800c358:	4973      	ldr	r1, [pc, #460]	; (800c528 <SP100_ISI_Ctrl+0x17ac>)
 800c35a:	1c18      	adds	r0, r3, #0
 800c35c:	f7f4 f8b6 	bl	80004cc <__aeabi_fcmplt>
 800c360:	1e03      	subs	r3, r0, #0
 800c362:	d023      	beq.n	800c3ac <SP100_ISI_Ctrl+0x1630>
 800c364:	4b6d      	ldr	r3, [pc, #436]	; (800c51c <SP100_ISI_Ctrl+0x17a0>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	1c18      	adds	r0, r3, #0
 800c36a:	f7f6 fd93 	bl	8002e94 <__aeabi_f2d>
 800c36e:	4a6f      	ldr	r2, [pc, #444]	; (800c52c <SP100_ISI_Ctrl+0x17b0>)
 800c370:	4b72      	ldr	r3, [pc, #456]	; (800c53c <SP100_ISI_Ctrl+0x17c0>)
 800c372:	f7f5 fee7 	bl	8002144 <__aeabi_dmul>
 800c376:	0002      	movs	r2, r0
 800c378:	000b      	movs	r3, r1
 800c37a:	0010      	movs	r0, r2
 800c37c:	0019      	movs	r1, r3
 800c37e:	2200      	movs	r2, #0
 800c380:	4b6f      	ldr	r3, [pc, #444]	; (800c540 <SP100_ISI_Ctrl+0x17c4>)
 800c382:	f7f6 f94b 	bl	800261c <__aeabi_dsub>
 800c386:	0002      	movs	r2, r0
 800c388:	000b      	movs	r3, r1
 800c38a:	0010      	movs	r0, r2
 800c38c:	0019      	movs	r1, r3
 800c38e:	f7f6 fdc9 	bl	8002f24 <__aeabi_d2f>
 800c392:	1c03      	adds	r3, r0, #0
 800c394:	1c18      	adds	r0, r3, #0
 800c396:	f007 fe55 	bl	8014044 <floorf>
 800c39a:	1c03      	adds	r3, r0, #0
 800c39c:	1c18      	adds	r0, r3, #0
 800c39e:	f7f4 f8bd 	bl	800051c <__aeabi_f2uiz>
 800c3a2:	0003      	movs	r3, r0
 800c3a4:	b2da      	uxtb	r2, r3
 800c3a6:	4b63      	ldr	r3, [pc, #396]	; (800c534 <SP100_ISI_Ctrl+0x17b8>)
 800c3a8:	701a      	strb	r2, [r3, #0]
 800c3aa:	e187      	b.n	800c6bc <SP100_ISI_Ctrl+0x1940>
 800c3ac:	4b56      	ldr	r3, [pc, #344]	; (800c508 <SP100_ISI_Ctrl+0x178c>)
 800c3ae:	681a      	ldr	r2, [r3, #0]
 800c3b0:	4b5c      	ldr	r3, [pc, #368]	; (800c524 <SP100_ISI_Ctrl+0x17a8>)
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	1c19      	adds	r1, r3, #0
 800c3b6:	1c10      	adds	r0, r2, #0
 800c3b8:	f7f4 fd54 	bl	8000e64 <__aeabi_fsub>
 800c3bc:	1c03      	adds	r3, r0, #0
 800c3be:	495a      	ldr	r1, [pc, #360]	; (800c528 <SP100_ISI_Ctrl+0x17ac>)
 800c3c0:	1c18      	adds	r0, r3, #0
 800c3c2:	f7f4 f8a1 	bl	8000508 <__aeabi_fcmpge>
 800c3c6:	1e03      	subs	r3, r0, #0
 800c3c8:	d013      	beq.n	800c3f2 <SP100_ISI_Ctrl+0x1676>
 800c3ca:	4b4f      	ldr	r3, [pc, #316]	; (800c508 <SP100_ISI_Ctrl+0x178c>)
 800c3cc:	681a      	ldr	r2, [r3, #0]
 800c3ce:	4b55      	ldr	r3, [pc, #340]	; (800c524 <SP100_ISI_Ctrl+0x17a8>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	1c19      	adds	r1, r3, #0
 800c3d4:	1c10      	adds	r0, r2, #0
 800c3d6:	f7f4 fd45 	bl	8000e64 <__aeabi_fsub>
 800c3da:	1c03      	adds	r3, r0, #0
 800c3dc:	21fe      	movs	r1, #254	; 0xfe
 800c3de:	0589      	lsls	r1, r1, #22
 800c3e0:	1c18      	adds	r0, r3, #0
 800c3e2:	f7f4 f87d 	bl	80004e0 <__aeabi_fcmple>
 800c3e6:	1e03      	subs	r3, r0, #0
 800c3e8:	d003      	beq.n	800c3f2 <SP100_ISI_Ctrl+0x1676>
 800c3ea:	4b52      	ldr	r3, [pc, #328]	; (800c534 <SP100_ISI_Ctrl+0x17b8>)
 800c3ec:	2201      	movs	r2, #1
 800c3ee:	701a      	strb	r2, [r3, #0]
 800c3f0:	e164      	b.n	800c6bc <SP100_ISI_Ctrl+0x1940>
 800c3f2:	4b45      	ldr	r3, [pc, #276]	; (800c508 <SP100_ISI_Ctrl+0x178c>)
 800c3f4:	681a      	ldr	r2, [r3, #0]
 800c3f6:	4b4b      	ldr	r3, [pc, #300]	; (800c524 <SP100_ISI_Ctrl+0x17a8>)
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	1c19      	adds	r1, r3, #0
 800c3fc:	1c10      	adds	r0, r2, #0
 800c3fe:	f7f4 fd31 	bl	8000e64 <__aeabi_fsub>
 800c402:	1c03      	adds	r3, r0, #0
 800c404:	21fe      	movs	r1, #254	; 0xfe
 800c406:	0589      	lsls	r1, r1, #22
 800c408:	1c18      	adds	r0, r3, #0
 800c40a:	f7f4 f873 	bl	80004f4 <__aeabi_fcmpgt>
 800c40e:	1e03      	subs	r3, r0, #0
 800c410:	d100      	bne.n	800c414 <SP100_ISI_Ctrl+0x1698>
 800c412:	e153      	b.n	800c6bc <SP100_ISI_Ctrl+0x1940>
 800c414:	4b41      	ldr	r3, [pc, #260]	; (800c51c <SP100_ISI_Ctrl+0x17a0>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	1c18      	adds	r0, r3, #0
 800c41a:	f7f6 fd3b 	bl	8002e94 <__aeabi_f2d>
 800c41e:	4a43      	ldr	r2, [pc, #268]	; (800c52c <SP100_ISI_Ctrl+0x17b0>)
 800c420:	4b46      	ldr	r3, [pc, #280]	; (800c53c <SP100_ISI_Ctrl+0x17c0>)
 800c422:	f7f5 fe8f 	bl	8002144 <__aeabi_dmul>
 800c426:	0002      	movs	r2, r0
 800c428:	000b      	movs	r3, r1
 800c42a:	0010      	movs	r0, r2
 800c42c:	0019      	movs	r1, r3
 800c42e:	2200      	movs	r2, #0
 800c430:	4b43      	ldr	r3, [pc, #268]	; (800c540 <SP100_ISI_Ctrl+0x17c4>)
 800c432:	f7f6 f8f3 	bl	800261c <__aeabi_dsub>
 800c436:	0002      	movs	r2, r0
 800c438:	000b      	movs	r3, r1
 800c43a:	0010      	movs	r0, r2
 800c43c:	0019      	movs	r1, r3
 800c43e:	f7f6 fd71 	bl	8002f24 <__aeabi_d2f>
 800c442:	1c03      	adds	r3, r0, #0
 800c444:	1c18      	adds	r0, r3, #0
 800c446:	f007 fdfd 	bl	8014044 <floorf>
 800c44a:	1c03      	adds	r3, r0, #0
 800c44c:	1c18      	adds	r0, r3, #0
 800c44e:	f7f4 f865 	bl	800051c <__aeabi_f2uiz>
 800c452:	0003      	movs	r3, r0
 800c454:	b2da      	uxtb	r2, r3
 800c456:	4b37      	ldr	r3, [pc, #220]	; (800c534 <SP100_ISI_Ctrl+0x17b8>)
 800c458:	701a      	strb	r2, [r3, #0]
 800c45a:	e12f      	b.n	800c6bc <SP100_ISI_Ctrl+0x1940>
 800c45c:	4b2f      	ldr	r3, [pc, #188]	; (800c51c <SP100_ISI_Ctrl+0x17a0>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	4935      	ldr	r1, [pc, #212]	; (800c538 <SP100_ISI_Ctrl+0x17bc>)
 800c462:	1c18      	adds	r0, r3, #0
 800c464:	f7f4 f83c 	bl	80004e0 <__aeabi_fcmple>
 800c468:	1e03      	subs	r3, r0, #0
 800c46a:	d100      	bne.n	800c46e <SP100_ISI_Ctrl+0x16f2>
 800c46c:	e126      	b.n	800c6bc <SP100_ISI_Ctrl+0x1940>
 800c46e:	4b31      	ldr	r3, [pc, #196]	; (800c534 <SP100_ISI_Ctrl+0x17b8>)
 800c470:	2201      	movs	r2, #1
 800c472:	701a      	strb	r2, [r3, #0]
 800c474:	e122      	b.n	800c6bc <SP100_ISI_Ctrl+0x1940>
 800c476:	4b28      	ldr	r3, [pc, #160]	; (800c518 <SP100_ISI_Ctrl+0x179c>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	3301      	adds	r3, #1
 800c47c:	d000      	beq.n	800c480 <SP100_ISI_Ctrl+0x1704>
 800c47e:	e11d      	b.n	800c6bc <SP100_ISI_Ctrl+0x1940>
 800c480:	4b21      	ldr	r3, [pc, #132]	; (800c508 <SP100_ISI_Ctrl+0x178c>)
 800c482:	681a      	ldr	r2, [r3, #0]
 800c484:	4b21      	ldr	r3, [pc, #132]	; (800c50c <SP100_ISI_Ctrl+0x1790>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	1c19      	adds	r1, r3, #0
 800c48a:	1c10      	adds	r0, r2, #0
 800c48c:	f7f4 fcea 	bl	8000e64 <__aeabi_fsub>
 800c490:	1c03      	adds	r3, r0, #0
 800c492:	492c      	ldr	r1, [pc, #176]	; (800c544 <SP100_ISI_Ctrl+0x17c8>)
 800c494:	1c18      	adds	r0, r3, #0
 800c496:	f7f4 f82d 	bl	80004f4 <__aeabi_fcmpgt>
 800c49a:	1e03      	subs	r3, r0, #0
 800c49c:	d054      	beq.n	800c548 <SP100_ISI_Ctrl+0x17cc>
 800c49e:	4b1a      	ldr	r3, [pc, #104]	; (800c508 <SP100_ISI_Ctrl+0x178c>)
 800c4a0:	681a      	ldr	r2, [r3, #0]
 800c4a2:	4b1a      	ldr	r3, [pc, #104]	; (800c50c <SP100_ISI_Ctrl+0x1790>)
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	1c19      	adds	r1, r3, #0
 800c4a8:	1c10      	adds	r0, r2, #0
 800c4aa:	f7f4 fcdb 	bl	8000e64 <__aeabi_fsub>
 800c4ae:	1c03      	adds	r3, r0, #0
 800c4b0:	4918      	ldr	r1, [pc, #96]	; (800c514 <SP100_ISI_Ctrl+0x1798>)
 800c4b2:	1c18      	adds	r0, r3, #0
 800c4b4:	f7f4 f814 	bl	80004e0 <__aeabi_fcmple>
 800c4b8:	1e03      	subs	r3, r0, #0
 800c4ba:	d045      	beq.n	800c548 <SP100_ISI_Ctrl+0x17cc>
 800c4bc:	4b12      	ldr	r3, [pc, #72]	; (800c508 <SP100_ISI_Ctrl+0x178c>)
 800c4be:	681a      	ldr	r2, [r3, #0]
 800c4c0:	4b18      	ldr	r3, [pc, #96]	; (800c524 <SP100_ISI_Ctrl+0x17a8>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	1c19      	adds	r1, r3, #0
 800c4c6:	1c10      	adds	r0, r2, #0
 800c4c8:	f7f4 fccc 	bl	8000e64 <__aeabi_fsub>
 800c4cc:	1c03      	adds	r3, r0, #0
 800c4ce:	005b      	lsls	r3, r3, #1
 800c4d0:	085b      	lsrs	r3, r3, #1
 800c4d2:	21fc      	movs	r1, #252	; 0xfc
 800c4d4:	0589      	lsls	r1, r1, #22
 800c4d6:	1c18      	adds	r0, r3, #0
 800c4d8:	f7f4 f838 	bl	800054c <__aeabi_fadd>
 800c4dc:	1c03      	adds	r3, r0, #0
 800c4de:	1c18      	adds	r0, r3, #0
 800c4e0:	f007 fd72 	bl	8013fc8 <ceilf>
 800c4e4:	1c03      	adds	r3, r0, #0
 800c4e6:	1c18      	adds	r0, r3, #0
 800c4e8:	f7f4 fe80 	bl	80011ec <__aeabi_f2iz>
 800c4ec:	0003      	movs	r3, r0
 800c4ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c4f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4f2:	2b08      	cmp	r3, #8
 800c4f4:	dd03      	ble.n	800c4fe <SP100_ISI_Ctrl+0x1782>
 800c4f6:	4b0f      	ldr	r3, [pc, #60]	; (800c534 <SP100_ISI_Ctrl+0x17b8>)
 800c4f8:	2208      	movs	r2, #8
 800c4fa:	701a      	strb	r2, [r3, #0]
 800c4fc:	e0de      	b.n	800c6bc <SP100_ISI_Ctrl+0x1940>
 800c4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c500:	b2da      	uxtb	r2, r3
 800c502:	4b0c      	ldr	r3, [pc, #48]	; (800c534 <SP100_ISI_Ctrl+0x17b8>)
 800c504:	701a      	strb	r2, [r3, #0]
 800c506:	e0d9      	b.n	800c6bc <SP100_ISI_Ctrl+0x1940>
 800c508:	20000014 	.word	0x20000014
 800c50c:	20000594 	.word	0x20000594
 800c510:	c0200000 	.word	0xc0200000
 800c514:	40200000 	.word	0x40200000
 800c518:	200005a8 	.word	0x200005a8
 800c51c:	20000590 	.word	0x20000590
 800c520:	42820000 	.word	0x42820000
 800c524:	2000058c 	.word	0x2000058c
 800c528:	bf800000 	.word	0xbf800000
 800c52c:	9999999a 	.word	0x9999999a
 800c530:	3fd99999 	.word	0x3fd99999
 800c534:	200005b3 	.word	0x200005b3
 800c538:	420c0000 	.word	0x420c0000
 800c53c:	3fc99999 	.word	0x3fc99999
 800c540:	40140000 	.word	0x40140000
 800c544:	c0a00000 	.word	0xc0a00000
 800c548:	4b6c      	ldr	r3, [pc, #432]	; (800c6fc <SP100_ISI_Ctrl+0x1980>)
 800c54a:	681a      	ldr	r2, [r3, #0]
 800c54c:	4b6c      	ldr	r3, [pc, #432]	; (800c700 <SP100_ISI_Ctrl+0x1984>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	1c19      	adds	r1, r3, #0
 800c552:	1c10      	adds	r0, r2, #0
 800c554:	f7f4 fc86 	bl	8000e64 <__aeabi_fsub>
 800c558:	1c03      	adds	r3, r0, #0
 800c55a:	496a      	ldr	r1, [pc, #424]	; (800c704 <SP100_ISI_Ctrl+0x1988>)
 800c55c:	1c18      	adds	r0, r3, #0
 800c55e:	f7f3 ffc9 	bl	80004f4 <__aeabi_fcmpgt>
 800c562:	1e03      	subs	r3, r0, #0
 800c564:	d034      	beq.n	800c5d0 <SP100_ISI_Ctrl+0x1854>
 800c566:	4b65      	ldr	r3, [pc, #404]	; (800c6fc <SP100_ISI_Ctrl+0x1980>)
 800c568:	681a      	ldr	r2, [r3, #0]
 800c56a:	4b65      	ldr	r3, [pc, #404]	; (800c700 <SP100_ISI_Ctrl+0x1984>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	1c19      	adds	r1, r3, #0
 800c570:	1c10      	adds	r0, r2, #0
 800c572:	f7f4 fc77 	bl	8000e64 <__aeabi_fsub>
 800c576:	1c03      	adds	r3, r0, #0
 800c578:	4963      	ldr	r1, [pc, #396]	; (800c708 <SP100_ISI_Ctrl+0x198c>)
 800c57a:	1c18      	adds	r0, r3, #0
 800c57c:	f7f3 ffb0 	bl	80004e0 <__aeabi_fcmple>
 800c580:	1e03      	subs	r3, r0, #0
 800c582:	d025      	beq.n	800c5d0 <SP100_ISI_Ctrl+0x1854>
 800c584:	4b5d      	ldr	r3, [pc, #372]	; (800c6fc <SP100_ISI_Ctrl+0x1980>)
 800c586:	681a      	ldr	r2, [r3, #0]
 800c588:	4b60      	ldr	r3, [pc, #384]	; (800c70c <SP100_ISI_Ctrl+0x1990>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	1c19      	adds	r1, r3, #0
 800c58e:	1c10      	adds	r0, r2, #0
 800c590:	f7f4 fc68 	bl	8000e64 <__aeabi_fsub>
 800c594:	1c03      	adds	r3, r0, #0
 800c596:	005b      	lsls	r3, r3, #1
 800c598:	085b      	lsrs	r3, r3, #1
 800c59a:	21ff      	movs	r1, #255	; 0xff
 800c59c:	0589      	lsls	r1, r1, #22
 800c59e:	1c18      	adds	r0, r3, #0
 800c5a0:	f7f3 ffd4 	bl	800054c <__aeabi_fadd>
 800c5a4:	1c03      	adds	r3, r0, #0
 800c5a6:	1c18      	adds	r0, r3, #0
 800c5a8:	f007 fd0e 	bl	8013fc8 <ceilf>
 800c5ac:	1c03      	adds	r3, r0, #0
 800c5ae:	1c18      	adds	r0, r3, #0
 800c5b0:	f7f4 fe1c 	bl	80011ec <__aeabi_f2iz>
 800c5b4:	0003      	movs	r3, r0
 800c5b6:	62bb      	str	r3, [r7, #40]	; 0x28
 800c5b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ba:	2b08      	cmp	r3, #8
 800c5bc:	dd03      	ble.n	800c5c6 <SP100_ISI_Ctrl+0x184a>
 800c5be:	4b54      	ldr	r3, [pc, #336]	; (800c710 <SP100_ISI_Ctrl+0x1994>)
 800c5c0:	2208      	movs	r2, #8
 800c5c2:	701a      	strb	r2, [r3, #0]
 800c5c4:	e07a      	b.n	800c6bc <SP100_ISI_Ctrl+0x1940>
 800c5c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5c8:	b2da      	uxtb	r2, r3
 800c5ca:	4b51      	ldr	r3, [pc, #324]	; (800c710 <SP100_ISI_Ctrl+0x1994>)
 800c5cc:	701a      	strb	r2, [r3, #0]
 800c5ce:	e075      	b.n	800c6bc <SP100_ISI_Ctrl+0x1940>
 800c5d0:	4b4a      	ldr	r3, [pc, #296]	; (800c6fc <SP100_ISI_Ctrl+0x1980>)
 800c5d2:	681a      	ldr	r2, [r3, #0]
 800c5d4:	4b4a      	ldr	r3, [pc, #296]	; (800c700 <SP100_ISI_Ctrl+0x1984>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	1c19      	adds	r1, r3, #0
 800c5da:	1c10      	adds	r0, r2, #0
 800c5dc:	f7f4 fc42 	bl	8000e64 <__aeabi_fsub>
 800c5e0:	1c03      	adds	r3, r0, #0
 800c5e2:	494c      	ldr	r1, [pc, #304]	; (800c714 <SP100_ISI_Ctrl+0x1998>)
 800c5e4:	1c18      	adds	r0, r3, #0
 800c5e6:	f7f3 ff85 	bl	80004f4 <__aeabi_fcmpgt>
 800c5ea:	1e03      	subs	r3, r0, #0
 800c5ec:	d033      	beq.n	800c656 <SP100_ISI_Ctrl+0x18da>
 800c5ee:	4b43      	ldr	r3, [pc, #268]	; (800c6fc <SP100_ISI_Ctrl+0x1980>)
 800c5f0:	681a      	ldr	r2, [r3, #0]
 800c5f2:	4b43      	ldr	r3, [pc, #268]	; (800c700 <SP100_ISI_Ctrl+0x1984>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	1c19      	adds	r1, r3, #0
 800c5f8:	1c10      	adds	r0, r2, #0
 800c5fa:	f7f4 fc33 	bl	8000e64 <__aeabi_fsub>
 800c5fe:	1c03      	adds	r3, r0, #0
 800c600:	4940      	ldr	r1, [pc, #256]	; (800c704 <SP100_ISI_Ctrl+0x1988>)
 800c602:	1c18      	adds	r0, r3, #0
 800c604:	f7f3 ff6c 	bl	80004e0 <__aeabi_fcmple>
 800c608:	1e03      	subs	r3, r0, #0
 800c60a:	d024      	beq.n	800c656 <SP100_ISI_Ctrl+0x18da>
 800c60c:	4b3b      	ldr	r3, [pc, #236]	; (800c6fc <SP100_ISI_Ctrl+0x1980>)
 800c60e:	681a      	ldr	r2, [r3, #0]
 800c610:	4b3e      	ldr	r3, [pc, #248]	; (800c70c <SP100_ISI_Ctrl+0x1990>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	1c19      	adds	r1, r3, #0
 800c616:	1c10      	adds	r0, r2, #0
 800c618:	f7f4 fc24 	bl	8000e64 <__aeabi_fsub>
 800c61c:	1c03      	adds	r3, r0, #0
 800c61e:	005b      	lsls	r3, r3, #1
 800c620:	085b      	lsrs	r3, r3, #1
 800c622:	493d      	ldr	r1, [pc, #244]	; (800c718 <SP100_ISI_Ctrl+0x199c>)
 800c624:	1c18      	adds	r0, r3, #0
 800c626:	f7f3 ff91 	bl	800054c <__aeabi_fadd>
 800c62a:	1c03      	adds	r3, r0, #0
 800c62c:	1c18      	adds	r0, r3, #0
 800c62e:	f007 fccb 	bl	8013fc8 <ceilf>
 800c632:	1c03      	adds	r3, r0, #0
 800c634:	1c18      	adds	r0, r3, #0
 800c636:	f7f4 fdd9 	bl	80011ec <__aeabi_f2iz>
 800c63a:	0003      	movs	r3, r0
 800c63c:	627b      	str	r3, [r7, #36]	; 0x24
 800c63e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c640:	2b08      	cmp	r3, #8
 800c642:	dd03      	ble.n	800c64c <SP100_ISI_Ctrl+0x18d0>
 800c644:	4b32      	ldr	r3, [pc, #200]	; (800c710 <SP100_ISI_Ctrl+0x1994>)
 800c646:	2208      	movs	r2, #8
 800c648:	701a      	strb	r2, [r3, #0]
 800c64a:	e037      	b.n	800c6bc <SP100_ISI_Ctrl+0x1940>
 800c64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c64e:	b2da      	uxtb	r2, r3
 800c650:	4b2f      	ldr	r3, [pc, #188]	; (800c710 <SP100_ISI_Ctrl+0x1994>)
 800c652:	701a      	strb	r2, [r3, #0]
 800c654:	e032      	b.n	800c6bc <SP100_ISI_Ctrl+0x1940>
 800c656:	4b29      	ldr	r3, [pc, #164]	; (800c6fc <SP100_ISI_Ctrl+0x1980>)
 800c658:	681a      	ldr	r2, [r3, #0]
 800c65a:	4b29      	ldr	r3, [pc, #164]	; (800c700 <SP100_ISI_Ctrl+0x1984>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	1c19      	adds	r1, r3, #0
 800c660:	1c10      	adds	r0, r2, #0
 800c662:	f7f4 fbff 	bl	8000e64 <__aeabi_fsub>
 800c666:	1c03      	adds	r3, r0, #0
 800c668:	492a      	ldr	r1, [pc, #168]	; (800c714 <SP100_ISI_Ctrl+0x1998>)
 800c66a:	1c18      	adds	r0, r3, #0
 800c66c:	f7f3 ff38 	bl	80004e0 <__aeabi_fcmple>
 800c670:	1e03      	subs	r3, r0, #0
 800c672:	d023      	beq.n	800c6bc <SP100_ISI_Ctrl+0x1940>
 800c674:	4b21      	ldr	r3, [pc, #132]	; (800c6fc <SP100_ISI_Ctrl+0x1980>)
 800c676:	681a      	ldr	r2, [r3, #0]
 800c678:	4b24      	ldr	r3, [pc, #144]	; (800c70c <SP100_ISI_Ctrl+0x1990>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	1c19      	adds	r1, r3, #0
 800c67e:	1c10      	adds	r0, r2, #0
 800c680:	f7f4 fbf0 	bl	8000e64 <__aeabi_fsub>
 800c684:	1c03      	adds	r3, r0, #0
 800c686:	005b      	lsls	r3, r3, #1
 800c688:	085b      	lsrs	r3, r3, #1
 800c68a:	4924      	ldr	r1, [pc, #144]	; (800c71c <SP100_ISI_Ctrl+0x19a0>)
 800c68c:	1c18      	adds	r0, r3, #0
 800c68e:	f7f3 ff5d 	bl	800054c <__aeabi_fadd>
 800c692:	1c03      	adds	r3, r0, #0
 800c694:	1c18      	adds	r0, r3, #0
 800c696:	f007 fc97 	bl	8013fc8 <ceilf>
 800c69a:	1c03      	adds	r3, r0, #0
 800c69c:	1c18      	adds	r0, r3, #0
 800c69e:	f7f4 fda5 	bl	80011ec <__aeabi_f2iz>
 800c6a2:	0003      	movs	r3, r0
 800c6a4:	623b      	str	r3, [r7, #32]
 800c6a6:	6a3b      	ldr	r3, [r7, #32]
 800c6a8:	2b08      	cmp	r3, #8
 800c6aa:	dd03      	ble.n	800c6b4 <SP100_ISI_Ctrl+0x1938>
 800c6ac:	4b18      	ldr	r3, [pc, #96]	; (800c710 <SP100_ISI_Ctrl+0x1994>)
 800c6ae:	2208      	movs	r2, #8
 800c6b0:	701a      	strb	r2, [r3, #0]
 800c6b2:	e003      	b.n	800c6bc <SP100_ISI_Ctrl+0x1940>
 800c6b4:	6a3b      	ldr	r3, [r7, #32]
 800c6b6:	b2da      	uxtb	r2, r3
 800c6b8:	4b15      	ldr	r3, [pc, #84]	; (800c710 <SP100_ISI_Ctrl+0x1994>)
 800c6ba:	701a      	strb	r2, [r3, #0]
 800c6bc:	4b0f      	ldr	r3, [pc, #60]	; (800c6fc <SP100_ISI_Ctrl+0x1980>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	2184      	movs	r1, #132	; 0x84
 800c6c2:	05c9      	lsls	r1, r1, #23
 800c6c4:	1c18      	adds	r0, r3, #0
 800c6c6:	f7f3 ff15 	bl	80004f4 <__aeabi_fcmpgt>
 800c6ca:	1e03      	subs	r3, r0, #0
 800c6cc:	d003      	beq.n	800c6d6 <SP100_ISI_Ctrl+0x195a>
 800c6ce:	4b14      	ldr	r3, [pc, #80]	; (800c720 <SP100_ISI_Ctrl+0x19a4>)
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	701a      	strb	r2, [r3, #0]
 800c6d4:	e002      	b.n	800c6dc <SP100_ISI_Ctrl+0x1960>
 800c6d6:	4b12      	ldr	r3, [pc, #72]	; (800c720 <SP100_ISI_Ctrl+0x19a4>)
 800c6d8:	2201      	movs	r2, #1
 800c6da:	701a      	strb	r2, [r3, #0]
 800c6dc:	4b11      	ldr	r3, [pc, #68]	; (800c724 <SP100_ISI_Ctrl+0x19a8>)
 800c6de:	781b      	ldrb	r3, [r3, #0]
 800c6e0:	2b01      	cmp	r3, #1
 800c6e2:	d107      	bne.n	800c6f4 <SP100_ISI_Ctrl+0x1978>
 800c6e4:	4b10      	ldr	r3, [pc, #64]	; (800c728 <SP100_ISI_Ctrl+0x19ac>)
 800c6e6:	781b      	ldrb	r3, [r3, #0]
 800c6e8:	2b02      	cmp	r3, #2
 800c6ea:	d003      	beq.n	800c6f4 <SP100_ISI_Ctrl+0x1978>
 800c6ec:	4b0c      	ldr	r3, [pc, #48]	; (800c720 <SP100_ISI_Ctrl+0x19a4>)
 800c6ee:	781a      	ldrb	r2, [r3, #0]
 800c6f0:	4b0e      	ldr	r3, [pc, #56]	; (800c72c <SP100_ISI_Ctrl+0x19b0>)
 800c6f2:	701a      	strb	r2, [r3, #0]
 800c6f4:	46c0      	nop			; (mov r8, r8)
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	b00e      	add	sp, #56	; 0x38
 800c6fa:	bd80      	pop	{r7, pc}
 800c6fc:	20000014 	.word	0x20000014
 800c700:	20000594 	.word	0x20000594
 800c704:	c1200000 	.word	0xc1200000
 800c708:	c0a00000 	.word	0xc0a00000
 800c70c:	2000058c 	.word	0x2000058c
 800c710:	200005b3 	.word	0x200005b3
 800c714:	c1a00000 	.word	0xc1a00000
 800c718:	40200000 	.word	0x40200000
 800c71c:	40600000 	.word	0x40600000
 800c720:	200005b4 	.word	0x200005b4
 800c724:	2000000d 	.word	0x2000000d
 800c728:	20000570 	.word	0x20000570
 800c72c:	20000575 	.word	0x20000575

0800c730 <SP100_ISI_Ctrl_BL>:
 800c730:	b580      	push	{r7, lr}
 800c732:	af00      	add	r7, sp, #0
 800c734:	4b17      	ldr	r3, [pc, #92]	; (800c794 <SP100_ISI_Ctrl_BL+0x64>)
 800c736:	781b      	ldrb	r3, [r3, #0]
 800c738:	2b01      	cmp	r3, #1
 800c73a:	d11c      	bne.n	800c776 <SP100_ISI_Ctrl_BL+0x46>
 800c73c:	4b16      	ldr	r3, [pc, #88]	; (800c798 <SP100_ISI_Ctrl_BL+0x68>)
 800c73e:	781b      	ldrb	r3, [r3, #0]
 800c740:	2b02      	cmp	r3, #2
 800c742:	d018      	beq.n	800c776 <SP100_ISI_Ctrl_BL+0x46>
 800c744:	4b15      	ldr	r3, [pc, #84]	; (800c79c <SP100_ISI_Ctrl_BL+0x6c>)
 800c746:	781a      	ldrb	r2, [r3, #0]
 800c748:	4b15      	ldr	r3, [pc, #84]	; (800c7a0 <SP100_ISI_Ctrl_BL+0x70>)
 800c74a:	781b      	ldrb	r3, [r3, #0]
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d206      	bcs.n	800c75e <SP100_ISI_Ctrl_BL+0x2e>
 800c750:	4b12      	ldr	r3, [pc, #72]	; (800c79c <SP100_ISI_Ctrl_BL+0x6c>)
 800c752:	781b      	ldrb	r3, [r3, #0]
 800c754:	3301      	adds	r3, #1
 800c756:	b2da      	uxtb	r2, r3
 800c758:	4b10      	ldr	r3, [pc, #64]	; (800c79c <SP100_ISI_Ctrl_BL+0x6c>)
 800c75a:	701a      	strb	r2, [r3, #0]
 800c75c:	e00b      	b.n	800c776 <SP100_ISI_Ctrl_BL+0x46>
 800c75e:	4b0f      	ldr	r3, [pc, #60]	; (800c79c <SP100_ISI_Ctrl_BL+0x6c>)
 800c760:	781a      	ldrb	r2, [r3, #0]
 800c762:	4b0f      	ldr	r3, [pc, #60]	; (800c7a0 <SP100_ISI_Ctrl_BL+0x70>)
 800c764:	781b      	ldrb	r3, [r3, #0]
 800c766:	429a      	cmp	r2, r3
 800c768:	d905      	bls.n	800c776 <SP100_ISI_Ctrl_BL+0x46>
 800c76a:	4b0c      	ldr	r3, [pc, #48]	; (800c79c <SP100_ISI_Ctrl_BL+0x6c>)
 800c76c:	781b      	ldrb	r3, [r3, #0]
 800c76e:	3b01      	subs	r3, #1
 800c770:	b2da      	uxtb	r2, r3
 800c772:	4b0a      	ldr	r3, [pc, #40]	; (800c79c <SP100_ISI_Ctrl_BL+0x6c>)
 800c774:	701a      	strb	r2, [r3, #0]
 800c776:	4b07      	ldr	r3, [pc, #28]	; (800c794 <SP100_ISI_Ctrl_BL+0x64>)
 800c778:	781b      	ldrb	r3, [r3, #0]
 800c77a:	2b01      	cmp	r3, #1
 800c77c:	d107      	bne.n	800c78e <SP100_ISI_Ctrl_BL+0x5e>
 800c77e:	4b06      	ldr	r3, [pc, #24]	; (800c798 <SP100_ISI_Ctrl_BL+0x68>)
 800c780:	781b      	ldrb	r3, [r3, #0]
 800c782:	2b02      	cmp	r3, #2
 800c784:	d103      	bne.n	800c78e <SP100_ISI_Ctrl_BL+0x5e>
 800c786:	4b06      	ldr	r3, [pc, #24]	; (800c7a0 <SP100_ISI_Ctrl_BL+0x70>)
 800c788:	781a      	ldrb	r2, [r3, #0]
 800c78a:	4b06      	ldr	r3, [pc, #24]	; (800c7a4 <SP100_ISI_Ctrl_BL+0x74>)
 800c78c:	701a      	strb	r2, [r3, #0]
 800c78e:	46c0      	nop			; (mov r8, r8)
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}
 800c794:	2000000c 	.word	0x2000000c
 800c798:	20000570 	.word	0x20000570
 800c79c:	20000574 	.word	0x20000574
 800c7a0:	200005b3 	.word	0x200005b3
 800c7a4:	2000057a 	.word	0x2000057a

0800c7a8 <SP100_IT_MA_STP>:
 800c7a8:	b590      	push	{r4, r7, lr}
 800c7aa:	b083      	sub	sp, #12
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	1dfc      	adds	r4, r7, #7
 800c7b0:	2043      	movs	r0, #67	; 0x43
 800c7b2:	f003 fd7f 	bl	80102b4 <SP100_TLE_Ctrl_Register_Read>
 800c7b6:	0003      	movs	r3, r0
 800c7b8:	7023      	strb	r3, [r4, #0]
 800c7ba:	1dfb      	adds	r3, r7, #7
 800c7bc:	1dfa      	adds	r2, r7, #7
 800c7be:	7812      	ldrb	r2, [r2, #0]
 800c7c0:	210f      	movs	r1, #15
 800c7c2:	400a      	ands	r2, r1
 800c7c4:	701a      	strb	r2, [r3, #0]
 800c7c6:	1dfb      	adds	r3, r7, #7
 800c7c8:	781b      	ldrb	r3, [r3, #0]
 800c7ca:	2b05      	cmp	r3, #5
 800c7cc:	d017      	beq.n	800c7fe <SP100_IT_MA_STP+0x56>
 800c7ce:	1dfc      	adds	r4, r7, #7
 800c7d0:	2043      	movs	r0, #67	; 0x43
 800c7d2:	f003 fd6f 	bl	80102b4 <SP100_TLE_Ctrl_Register_Read>
 800c7d6:	0003      	movs	r3, r0
 800c7d8:	7023      	strb	r3, [r4, #0]
 800c7da:	1dfb      	adds	r3, r7, #7
 800c7dc:	1dfa      	adds	r2, r7, #7
 800c7de:	7812      	ldrb	r2, [r2, #0]
 800c7e0:	210f      	movs	r1, #15
 800c7e2:	438a      	bics	r2, r1
 800c7e4:	701a      	strb	r2, [r3, #0]
 800c7e6:	1dfb      	adds	r3, r7, #7
 800c7e8:	1dfa      	adds	r2, r7, #7
 800c7ea:	7812      	ldrb	r2, [r2, #0]
 800c7ec:	2105      	movs	r1, #5
 800c7ee:	430a      	orrs	r2, r1
 800c7f0:	701a      	strb	r2, [r3, #0]
 800c7f2:	1dfb      	adds	r3, r7, #7
 800c7f4:	781b      	ldrb	r3, [r3, #0]
 800c7f6:	0019      	movs	r1, r3
 800c7f8:	2043      	movs	r0, #67	; 0x43
 800c7fa:	f003 fd99 	bl	8010330 <SP100_TLE_Ctrl_Register_Write>
 800c7fe:	46c0      	nop			; (mov r8, r8)
 800c800:	46bd      	mov	sp, r7
 800c802:	b003      	add	sp, #12
 800c804:	bd90      	pop	{r4, r7, pc}
	...

0800c808 <SP100_IT_MA_Fresh>:
 800c808:	b590      	push	{r4, r7, lr}
 800c80a:	b083      	sub	sp, #12
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	2380      	movs	r3, #128	; 0x80
 800c810:	005b      	lsls	r3, r3, #1
 800c812:	4818      	ldr	r0, [pc, #96]	; (800c874 <SP100_IT_MA_Fresh+0x6c>)
 800c814:	2200      	movs	r2, #0
 800c816:	0019      	movs	r1, r3
 800c818:	f7f9 fa39 	bl	8005c8e <HAL_GPIO_WritePin>
 800c81c:	1dfc      	adds	r4, r7, #7
 800c81e:	2043      	movs	r0, #67	; 0x43
 800c820:	f003 fd48 	bl	80102b4 <SP100_TLE_Ctrl_Register_Read>
 800c824:	0003      	movs	r3, r0
 800c826:	7023      	strb	r3, [r4, #0]
 800c828:	1dfb      	adds	r3, r7, #7
 800c82a:	1dfa      	adds	r2, r7, #7
 800c82c:	7812      	ldrb	r2, [r2, #0]
 800c82e:	210f      	movs	r1, #15
 800c830:	400a      	ands	r2, r1
 800c832:	701a      	strb	r2, [r3, #0]
 800c834:	1dfb      	adds	r3, r7, #7
 800c836:	781b      	ldrb	r3, [r3, #0]
 800c838:	2b09      	cmp	r3, #9
 800c83a:	d017      	beq.n	800c86c <SP100_IT_MA_Fresh+0x64>
 800c83c:	1dfc      	adds	r4, r7, #7
 800c83e:	2043      	movs	r0, #67	; 0x43
 800c840:	f003 fd38 	bl	80102b4 <SP100_TLE_Ctrl_Register_Read>
 800c844:	0003      	movs	r3, r0
 800c846:	7023      	strb	r3, [r4, #0]
 800c848:	1dfb      	adds	r3, r7, #7
 800c84a:	1dfa      	adds	r2, r7, #7
 800c84c:	7812      	ldrb	r2, [r2, #0]
 800c84e:	210f      	movs	r1, #15
 800c850:	438a      	bics	r2, r1
 800c852:	701a      	strb	r2, [r3, #0]
 800c854:	1dfb      	adds	r3, r7, #7
 800c856:	1dfa      	adds	r2, r7, #7
 800c858:	7812      	ldrb	r2, [r2, #0]
 800c85a:	2109      	movs	r1, #9
 800c85c:	430a      	orrs	r2, r1
 800c85e:	701a      	strb	r2, [r3, #0]
 800c860:	1dfb      	adds	r3, r7, #7
 800c862:	781b      	ldrb	r3, [r3, #0]
 800c864:	0019      	movs	r1, r3
 800c866:	2043      	movs	r0, #67	; 0x43
 800c868:	f003 fd62 	bl	8010330 <SP100_TLE_Ctrl_Register_Write>
 800c86c:	46c0      	nop			; (mov r8, r8)
 800c86e:	46bd      	mov	sp, r7
 800c870:	b003      	add	sp, #12
 800c872:	bd90      	pop	{r4, r7, pc}
 800c874:	48000800 	.word	0x48000800

0800c878 <SP100_IT_MA_Recycle>:
 800c878:	b590      	push	{r4, r7, lr}
 800c87a:	b083      	sub	sp, #12
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	2380      	movs	r3, #128	; 0x80
 800c880:	005b      	lsls	r3, r3, #1
 800c882:	4818      	ldr	r0, [pc, #96]	; (800c8e4 <SP100_IT_MA_Recycle+0x6c>)
 800c884:	2201      	movs	r2, #1
 800c886:	0019      	movs	r1, r3
 800c888:	f7f9 fa01 	bl	8005c8e <HAL_GPIO_WritePin>
 800c88c:	1dfc      	adds	r4, r7, #7
 800c88e:	2043      	movs	r0, #67	; 0x43
 800c890:	f003 fd10 	bl	80102b4 <SP100_TLE_Ctrl_Register_Read>
 800c894:	0003      	movs	r3, r0
 800c896:	7023      	strb	r3, [r4, #0]
 800c898:	1dfb      	adds	r3, r7, #7
 800c89a:	1dfa      	adds	r2, r7, #7
 800c89c:	7812      	ldrb	r2, [r2, #0]
 800c89e:	210f      	movs	r1, #15
 800c8a0:	400a      	ands	r2, r1
 800c8a2:	701a      	strb	r2, [r3, #0]
 800c8a4:	1dfb      	adds	r3, r7, #7
 800c8a6:	781b      	ldrb	r3, [r3, #0]
 800c8a8:	2b06      	cmp	r3, #6
 800c8aa:	d017      	beq.n	800c8dc <SP100_IT_MA_Recycle+0x64>
 800c8ac:	1dfc      	adds	r4, r7, #7
 800c8ae:	2043      	movs	r0, #67	; 0x43
 800c8b0:	f003 fd00 	bl	80102b4 <SP100_TLE_Ctrl_Register_Read>
 800c8b4:	0003      	movs	r3, r0
 800c8b6:	7023      	strb	r3, [r4, #0]
 800c8b8:	1dfb      	adds	r3, r7, #7
 800c8ba:	1dfa      	adds	r2, r7, #7
 800c8bc:	7812      	ldrb	r2, [r2, #0]
 800c8be:	210f      	movs	r1, #15
 800c8c0:	438a      	bics	r2, r1
 800c8c2:	701a      	strb	r2, [r3, #0]
 800c8c4:	1dfb      	adds	r3, r7, #7
 800c8c6:	1dfa      	adds	r2, r7, #7
 800c8c8:	7812      	ldrb	r2, [r2, #0]
 800c8ca:	2106      	movs	r1, #6
 800c8cc:	430a      	orrs	r2, r1
 800c8ce:	701a      	strb	r2, [r3, #0]
 800c8d0:	1dfb      	adds	r3, r7, #7
 800c8d2:	781b      	ldrb	r3, [r3, #0]
 800c8d4:	0019      	movs	r1, r3
 800c8d6:	2043      	movs	r0, #67	; 0x43
 800c8d8:	f003 fd2a 	bl	8010330 <SP100_TLE_Ctrl_Register_Write>
 800c8dc:	46c0      	nop			; (mov r8, r8)
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	b003      	add	sp, #12
 800c8e2:	bd90      	pop	{r4, r7, pc}
 800c8e4:	48000800 	.word	0x48000800

0800c8e8 <SP100_IT_MA_Handler>:
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b082      	sub	sp, #8
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	0002      	movs	r2, r0
 800c8f0:	1dfb      	adds	r3, r7, #7
 800c8f2:	701a      	strb	r2, [r3, #0]
 800c8f4:	1dfb      	adds	r3, r7, #7
 800c8f6:	781b      	ldrb	r3, [r3, #0]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d002      	beq.n	800c902 <SP100_IT_MA_Handler+0x1a>
 800c8fc:	2b01      	cmp	r3, #1
 800c8fe:	d003      	beq.n	800c908 <SP100_IT_MA_Handler+0x20>
 800c900:	e005      	b.n	800c90e <SP100_IT_MA_Handler+0x26>
 800c902:	f7ff ff81 	bl	800c808 <SP100_IT_MA_Fresh>
 800c906:	e002      	b.n	800c90e <SP100_IT_MA_Handler+0x26>
 800c908:	f7ff ffb6 	bl	800c878 <SP100_IT_MA_Recycle>
 800c90c:	46c0      	nop			; (mov r8, r8)
 800c90e:	46c0      	nop			; (mov r8, r8)
 800c910:	46bd      	mov	sp, r7
 800c912:	b002      	add	sp, #8
 800c914:	bd80      	pop	{r7, pc}
	...

0800c918 <SP100_LCD_Init>:
 800c918:	b580      	push	{r7, lr}
 800c91a:	af00      	add	r7, sp, #0
 800c91c:	208c      	movs	r0, #140	; 0x8c
 800c91e:	f000 f83d 	bl	800c99c <SP100_LCD_Command>
 800c922:	2070      	movs	r0, #112	; 0x70
 800c924:	f000 f83a 	bl	800c99c <SP100_LCD_Command>
 800c928:	20c0      	movs	r0, #192	; 0xc0
 800c92a:	f000 f837 	bl	800c99c <SP100_LCD_Command>
 800c92e:	2000      	movs	r0, #0
 800c930:	f000 f8ee 	bl	800cb10 <SP100_LCD_ALL_SEG>
 800c934:	4b0b      	ldr	r3, [pc, #44]	; (800c964 <SP100_LCD_Init+0x4c>)
 800c936:	2108      	movs	r1, #8
 800c938:	0018      	movs	r0, r3
 800c93a:	f7fb f999 	bl	8007c70 <HAL_TIM_PWM_Start>
 800c93e:	4b0a      	ldr	r3, [pc, #40]	; (800c968 <SP100_LCD_Init+0x50>)
 800c940:	2110      	movs	r1, #16
 800c942:	0018      	movs	r0, r3
 800c944:	f7f9 f986 	bl	8005c54 <HAL_GPIO_ReadPin>
 800c948:	0003      	movs	r3, r0
 800c94a:	2b01      	cmp	r3, #1
 800c94c:	d103      	bne.n	800c956 <SP100_LCD_Init+0x3e>
 800c94e:	2046      	movs	r0, #70	; 0x46
 800c950:	f000 f8cc 	bl	800caec <SP100_LCD_Backlight>
 800c954:	e002      	b.n	800c95c <SP100_LCD_Init+0x44>
 800c956:	2064      	movs	r0, #100	; 0x64
 800c958:	f000 f8c8 	bl	800caec <SP100_LCD_Backlight>
 800c95c:	46c0      	nop			; (mov r8, r8)
 800c95e:	46bd      	mov	sp, r7
 800c960:	bd80      	pop	{r7, pc}
 800c962:	46c0      	nop			; (mov r8, r8)
 800c964:	20000400 	.word	0x20000400
 800c968:	48000800 	.word	0x48000800

0800c96c <SP100_LCD_DeInit>:
 800c96c:	b580      	push	{r7, lr}
 800c96e:	af00      	add	r7, sp, #0
 800c970:	2080      	movs	r0, #128	; 0x80
 800c972:	f000 f813 	bl	800c99c <SP100_LCD_Command>
 800c976:	2040      	movs	r0, #64	; 0x40
 800c978:	f000 f810 	bl	800c99c <SP100_LCD_Command>
 800c97c:	20c0      	movs	r0, #192	; 0xc0
 800c97e:	f000 f80d 	bl	800c99c <SP100_LCD_Command>
 800c982:	2000      	movs	r0, #0
 800c984:	f000 f8c4 	bl	800cb10 <SP100_LCD_ALL_SEG>
 800c988:	4b03      	ldr	r3, [pc, #12]	; (800c998 <SP100_LCD_DeInit+0x2c>)
 800c98a:	2108      	movs	r1, #8
 800c98c:	0018      	movs	r0, r3
 800c98e:	f7fb fa27 	bl	8007de0 <HAL_TIM_PWM_Stop>
 800c992:	46c0      	nop			; (mov r8, r8)
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}
 800c998:	20000400 	.word	0x20000400

0800c99c <SP100_LCD_Command>:
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b086      	sub	sp, #24
 800c9a0:	af02      	add	r7, sp, #8
 800c9a2:	0002      	movs	r2, r0
 800c9a4:	1dfb      	adds	r3, r7, #7
 800c9a6:	701a      	strb	r2, [r3, #0]
 800c9a8:	210c      	movs	r1, #12
 800c9aa:	187b      	adds	r3, r7, r1
 800c9ac:	1dfa      	adds	r2, r7, #7
 800c9ae:	7812      	ldrb	r2, [r2, #0]
 800c9b0:	701a      	strb	r2, [r3, #0]
 800c9b2:	187a      	adds	r2, r7, r1
 800c9b4:	4805      	ldr	r0, [pc, #20]	; (800c9cc <SP100_LCD_Command+0x30>)
 800c9b6:	230a      	movs	r3, #10
 800c9b8:	9300      	str	r3, [sp, #0]
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	217f      	movs	r1, #127	; 0x7f
 800c9be:	f7f9 fa3f 	bl	8005e40 <HAL_I2C_Master_Transmit>
 800c9c2:	46c0      	nop			; (mov r8, r8)
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	b004      	add	sp, #16
 800c9c8:	bd80      	pop	{r7, pc}
 800c9ca:	46c0      	nop			; (mov r8, r8)
 800c9cc:	200002c0 	.word	0x200002c0

0800c9d0 <SP100_LCD_SEG_Read>:
 800c9d0:	b590      	push	{r4, r7, lr}
 800c9d2:	b087      	sub	sp, #28
 800c9d4:	af02      	add	r7, sp, #8
 800c9d6:	0002      	movs	r2, r0
 800c9d8:	1dfb      	adds	r3, r7, #7
 800c9da:	701a      	strb	r2, [r3, #0]
 800c9dc:	210c      	movs	r1, #12
 800c9de:	187b      	adds	r3, r7, r1
 800c9e0:	1dfa      	adds	r2, r7, #7
 800c9e2:	7812      	ldrb	r2, [r2, #0]
 800c9e4:	701a      	strb	r2, [r3, #0]
 800c9e6:	187a      	adds	r2, r7, r1
 800c9e8:	480a      	ldr	r0, [pc, #40]	; (800ca14 <SP100_LCD_SEG_Read+0x44>)
 800c9ea:	230a      	movs	r3, #10
 800c9ec:	9300      	str	r3, [sp, #0]
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	217f      	movs	r1, #127	; 0x7f
 800c9f2:	f7f9 fa25 	bl	8005e40 <HAL_I2C_Master_Transmit>
 800c9f6:	2408      	movs	r4, #8
 800c9f8:	193a      	adds	r2, r7, r4
 800c9fa:	4806      	ldr	r0, [pc, #24]	; (800ca14 <SP100_LCD_SEG_Read+0x44>)
 800c9fc:	230a      	movs	r3, #10
 800c9fe:	9300      	str	r3, [sp, #0]
 800ca00:	2301      	movs	r3, #1
 800ca02:	217e      	movs	r1, #126	; 0x7e
 800ca04:	f7f9 fb24 	bl	8006050 <HAL_I2C_Master_Receive>
 800ca08:	193b      	adds	r3, r7, r4
 800ca0a:	781b      	ldrb	r3, [r3, #0]
 800ca0c:	0018      	movs	r0, r3
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	b005      	add	sp, #20
 800ca12:	bd90      	pop	{r4, r7, pc}
 800ca14:	200002c0 	.word	0x200002c0

0800ca18 <SP100_LCD_SEG_OFF>:
 800ca18:	b5b0      	push	{r4, r5, r7, lr}
 800ca1a:	b086      	sub	sp, #24
 800ca1c:	af02      	add	r7, sp, #8
 800ca1e:	6078      	str	r0, [r7, #4]
 800ca20:	250f      	movs	r5, #15
 800ca22:	197b      	adds	r3, r7, r5
 800ca24:	687a      	ldr	r2, [r7, #4]
 800ca26:	7812      	ldrb	r2, [r2, #0]
 800ca28:	701a      	strb	r2, [r3, #0]
 800ca2a:	240e      	movs	r4, #14
 800ca2c:	193b      	adds	r3, r7, r4
 800ca2e:	687a      	ldr	r2, [r7, #4]
 800ca30:	7852      	ldrb	r2, [r2, #1]
 800ca32:	701a      	strb	r2, [r3, #0]
 800ca34:	193b      	adds	r3, r7, r4
 800ca36:	193a      	adds	r2, r7, r4
 800ca38:	7812      	ldrb	r2, [r2, #0]
 800ca3a:	43d2      	mvns	r2, r2
 800ca3c:	701a      	strb	r2, [r3, #0]
 800ca3e:	197b      	adds	r3, r7, r5
 800ca40:	781b      	ldrb	r3, [r3, #0]
 800ca42:	0018      	movs	r0, r3
 800ca44:	f7ff ffc4 	bl	800c9d0 <SP100_LCD_SEG_Read>
 800ca48:	0003      	movs	r3, r0
 800ca4a:	0019      	movs	r1, r3
 800ca4c:	0020      	movs	r0, r4
 800ca4e:	183b      	adds	r3, r7, r0
 800ca50:	183a      	adds	r2, r7, r0
 800ca52:	7812      	ldrb	r2, [r2, #0]
 800ca54:	400a      	ands	r2, r1
 800ca56:	701a      	strb	r2, [r3, #0]
 800ca58:	210c      	movs	r1, #12
 800ca5a:	187b      	adds	r3, r7, r1
 800ca5c:	197a      	adds	r2, r7, r5
 800ca5e:	7812      	ldrb	r2, [r2, #0]
 800ca60:	701a      	strb	r2, [r3, #0]
 800ca62:	187b      	adds	r3, r7, r1
 800ca64:	183a      	adds	r2, r7, r0
 800ca66:	7812      	ldrb	r2, [r2, #0]
 800ca68:	705a      	strb	r2, [r3, #1]
 800ca6a:	187a      	adds	r2, r7, r1
 800ca6c:	4805      	ldr	r0, [pc, #20]	; (800ca84 <SP100_LCD_SEG_OFF+0x6c>)
 800ca6e:	230a      	movs	r3, #10
 800ca70:	9300      	str	r3, [sp, #0]
 800ca72:	2302      	movs	r3, #2
 800ca74:	217f      	movs	r1, #127	; 0x7f
 800ca76:	f7f9 f9e3 	bl	8005e40 <HAL_I2C_Master_Transmit>
 800ca7a:	46c0      	nop			; (mov r8, r8)
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	b004      	add	sp, #16
 800ca80:	bdb0      	pop	{r4, r5, r7, pc}
 800ca82:	46c0      	nop			; (mov r8, r8)
 800ca84:	200002c0 	.word	0x200002c0

0800ca88 <SP100_LCD_SEG_ON>:
 800ca88:	b5b0      	push	{r4, r5, r7, lr}
 800ca8a:	b086      	sub	sp, #24
 800ca8c:	af02      	add	r7, sp, #8
 800ca8e:	6078      	str	r0, [r7, #4]
 800ca90:	250f      	movs	r5, #15
 800ca92:	197b      	adds	r3, r7, r5
 800ca94:	687a      	ldr	r2, [r7, #4]
 800ca96:	7812      	ldrb	r2, [r2, #0]
 800ca98:	701a      	strb	r2, [r3, #0]
 800ca9a:	240e      	movs	r4, #14
 800ca9c:	193b      	adds	r3, r7, r4
 800ca9e:	687a      	ldr	r2, [r7, #4]
 800caa0:	7852      	ldrb	r2, [r2, #1]
 800caa2:	701a      	strb	r2, [r3, #0]
 800caa4:	197b      	adds	r3, r7, r5
 800caa6:	781b      	ldrb	r3, [r3, #0]
 800caa8:	0018      	movs	r0, r3
 800caaa:	f7ff ff91 	bl	800c9d0 <SP100_LCD_SEG_Read>
 800caae:	0003      	movs	r3, r0
 800cab0:	0019      	movs	r1, r3
 800cab2:	0020      	movs	r0, r4
 800cab4:	183b      	adds	r3, r7, r0
 800cab6:	183a      	adds	r2, r7, r0
 800cab8:	7812      	ldrb	r2, [r2, #0]
 800caba:	430a      	orrs	r2, r1
 800cabc:	701a      	strb	r2, [r3, #0]
 800cabe:	210c      	movs	r1, #12
 800cac0:	187b      	adds	r3, r7, r1
 800cac2:	197a      	adds	r2, r7, r5
 800cac4:	7812      	ldrb	r2, [r2, #0]
 800cac6:	701a      	strb	r2, [r3, #0]
 800cac8:	187b      	adds	r3, r7, r1
 800caca:	183a      	adds	r2, r7, r0
 800cacc:	7812      	ldrb	r2, [r2, #0]
 800cace:	705a      	strb	r2, [r3, #1]
 800cad0:	187a      	adds	r2, r7, r1
 800cad2:	4805      	ldr	r0, [pc, #20]	; (800cae8 <SP100_LCD_SEG_ON+0x60>)
 800cad4:	230a      	movs	r3, #10
 800cad6:	9300      	str	r3, [sp, #0]
 800cad8:	2302      	movs	r3, #2
 800cada:	217f      	movs	r1, #127	; 0x7f
 800cadc:	f7f9 f9b0 	bl	8005e40 <HAL_I2C_Master_Transmit>
 800cae0:	46c0      	nop			; (mov r8, r8)
 800cae2:	46bd      	mov	sp, r7
 800cae4:	b004      	add	sp, #16
 800cae6:	bdb0      	pop	{r4, r5, r7, pc}
 800cae8:	200002c0 	.word	0x200002c0

0800caec <SP100_LCD_Backlight>:
 800caec:	b580      	push	{r7, lr}
 800caee:	b082      	sub	sp, #8
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	0002      	movs	r2, r0
 800caf4:	1dbb      	adds	r3, r7, #6
 800caf6:	801a      	strh	r2, [r3, #0]
 800caf8:	4b04      	ldr	r3, [pc, #16]	; (800cb0c <SP100_LCD_Backlight+0x20>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	1dba      	adds	r2, r7, #6
 800cafe:	8812      	ldrh	r2, [r2, #0]
 800cb00:	63da      	str	r2, [r3, #60]	; 0x3c
 800cb02:	46c0      	nop			; (mov r8, r8)
 800cb04:	46bd      	mov	sp, r7
 800cb06:	b002      	add	sp, #8
 800cb08:	bd80      	pop	{r7, pc}
 800cb0a:	46c0      	nop			; (mov r8, r8)
 800cb0c:	20000400 	.word	0x20000400

0800cb10 <SP100_LCD_ALL_SEG>:
 800cb10:	b590      	push	{r4, r7, lr}
 800cb12:	b087      	sub	sp, #28
 800cb14:	af02      	add	r7, sp, #8
 800cb16:	0002      	movs	r2, r0
 800cb18:	1dfb      	adds	r3, r7, #7
 800cb1a:	701a      	strb	r2, [r3, #0]
 800cb1c:	1dfb      	adds	r3, r7, #7
 800cb1e:	781b      	ldrb	r3, [r3, #0]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d002      	beq.n	800cb2a <SP100_LCD_ALL_SEG+0x1a>
 800cb24:	2b01      	cmp	r3, #1
 800cb26:	d015      	beq.n	800cb54 <SP100_LCD_ALL_SEG+0x44>
 800cb28:	e029      	b.n	800cb7e <SP100_LCD_ALL_SEG+0x6e>
 800cb2a:	2400      	movs	r4, #0
 800cb2c:	e00f      	b.n	800cb4e <SP100_LCD_ALL_SEG+0x3e>
 800cb2e:	b2e2      	uxtb	r2, r4
 800cb30:	210c      	movs	r1, #12
 800cb32:	187b      	adds	r3, r7, r1
 800cb34:	701a      	strb	r2, [r3, #0]
 800cb36:	187b      	adds	r3, r7, r1
 800cb38:	2200      	movs	r2, #0
 800cb3a:	705a      	strb	r2, [r3, #1]
 800cb3c:	187a      	adds	r2, r7, r1
 800cb3e:	4812      	ldr	r0, [pc, #72]	; (800cb88 <SP100_LCD_ALL_SEG+0x78>)
 800cb40:	230a      	movs	r3, #10
 800cb42:	9300      	str	r3, [sp, #0]
 800cb44:	2302      	movs	r3, #2
 800cb46:	217f      	movs	r1, #127	; 0x7f
 800cb48:	f7f9 f97a 	bl	8005e40 <HAL_I2C_Master_Transmit>
 800cb4c:	3401      	adds	r4, #1
 800cb4e:	2c08      	cmp	r4, #8
 800cb50:	dded      	ble.n	800cb2e <SP100_LCD_ALL_SEG+0x1e>
 800cb52:	e014      	b.n	800cb7e <SP100_LCD_ALL_SEG+0x6e>
 800cb54:	2400      	movs	r4, #0
 800cb56:	e00f      	b.n	800cb78 <SP100_LCD_ALL_SEG+0x68>
 800cb58:	b2e2      	uxtb	r2, r4
 800cb5a:	2108      	movs	r1, #8
 800cb5c:	187b      	adds	r3, r7, r1
 800cb5e:	701a      	strb	r2, [r3, #0]
 800cb60:	187b      	adds	r3, r7, r1
 800cb62:	22ff      	movs	r2, #255	; 0xff
 800cb64:	705a      	strb	r2, [r3, #1]
 800cb66:	187a      	adds	r2, r7, r1
 800cb68:	4807      	ldr	r0, [pc, #28]	; (800cb88 <SP100_LCD_ALL_SEG+0x78>)
 800cb6a:	230a      	movs	r3, #10
 800cb6c:	9300      	str	r3, [sp, #0]
 800cb6e:	2302      	movs	r3, #2
 800cb70:	217f      	movs	r1, #127	; 0x7f
 800cb72:	f7f9 f965 	bl	8005e40 <HAL_I2C_Master_Transmit>
 800cb76:	3401      	adds	r4, #1
 800cb78:	2c08      	cmp	r4, #8
 800cb7a:	dded      	ble.n	800cb58 <SP100_LCD_ALL_SEG+0x48>
 800cb7c:	46c0      	nop			; (mov r8, r8)
 800cb7e:	46c0      	nop			; (mov r8, r8)
 800cb80:	46bd      	mov	sp, r7
 800cb82:	b005      	add	sp, #20
 800cb84:	bd90      	pop	{r4, r7, pc}
 800cb86:	46c0      	nop			; (mov r8, r8)
 800cb88:	200002c0 	.word	0x200002c0

0800cb8c <SP100_LCD_AUTO_SEG>:
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b082      	sub	sp, #8
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	0002      	movs	r2, r0
 800cb94:	1dfb      	adds	r3, r7, #7
 800cb96:	701a      	strb	r2, [r3, #0]
 800cb98:	1dfb      	adds	r3, r7, #7
 800cb9a:	781b      	ldrb	r3, [r3, #0]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d002      	beq.n	800cba6 <SP100_LCD_AUTO_SEG+0x1a>
 800cba0:	2b01      	cmp	r3, #1
 800cba2:	d005      	beq.n	800cbb0 <SP100_LCD_AUTO_SEG+0x24>
 800cba4:	e009      	b.n	800cbba <SP100_LCD_AUTO_SEG+0x2e>
 800cba6:	4b07      	ldr	r3, [pc, #28]	; (800cbc4 <SP100_LCD_AUTO_SEG+0x38>)
 800cba8:	0018      	movs	r0, r3
 800cbaa:	f7ff ff35 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800cbae:	e004      	b.n	800cbba <SP100_LCD_AUTO_SEG+0x2e>
 800cbb0:	4b04      	ldr	r3, [pc, #16]	; (800cbc4 <SP100_LCD_AUTO_SEG+0x38>)
 800cbb2:	0018      	movs	r0, r3
 800cbb4:	f7ff ff68 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cbb8:	46c0      	nop			; (mov r8, r8)
 800cbba:	46c0      	nop			; (mov r8, r8)
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	b002      	add	sp, #8
 800cbc0:	bd80      	pop	{r7, pc}
 800cbc2:	46c0      	nop			; (mov r8, r8)
 800cbc4:	08014ec8 	.word	0x08014ec8

0800cbc8 <SP100_LCD_DEF_SEG>:
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b082      	sub	sp, #8
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	0002      	movs	r2, r0
 800cbd0:	1dfb      	adds	r3, r7, #7
 800cbd2:	701a      	strb	r2, [r3, #0]
 800cbd4:	1dfb      	adds	r3, r7, #7
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d002      	beq.n	800cbe2 <SP100_LCD_DEF_SEG+0x1a>
 800cbdc:	2b01      	cmp	r3, #1
 800cbde:	d005      	beq.n	800cbec <SP100_LCD_DEF_SEG+0x24>
 800cbe0:	e009      	b.n	800cbf6 <SP100_LCD_DEF_SEG+0x2e>
 800cbe2:	4b07      	ldr	r3, [pc, #28]	; (800cc00 <SP100_LCD_DEF_SEG+0x38>)
 800cbe4:	0018      	movs	r0, r3
 800cbe6:	f7ff ff17 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800cbea:	e004      	b.n	800cbf6 <SP100_LCD_DEF_SEG+0x2e>
 800cbec:	4b04      	ldr	r3, [pc, #16]	; (800cc00 <SP100_LCD_DEF_SEG+0x38>)
 800cbee:	0018      	movs	r0, r3
 800cbf0:	f7ff ff4a 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cbf4:	46c0      	nop			; (mov r8, r8)
 800cbf6:	46c0      	nop			; (mov r8, r8)
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	b002      	add	sp, #8
 800cbfc:	bd80      	pop	{r7, pc}
 800cbfe:	46c0      	nop			; (mov r8, r8)
 800cc00:	08014ecc 	.word	0x08014ecc

0800cc04 <SP100_LCD_MD_SEG>:
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b082      	sub	sp, #8
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	0002      	movs	r2, r0
 800cc0c:	1dfb      	adds	r3, r7, #7
 800cc0e:	701a      	strb	r2, [r3, #0]
 800cc10:	1dfb      	adds	r3, r7, #7
 800cc12:	781b      	ldrb	r3, [r3, #0]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d002      	beq.n	800cc1e <SP100_LCD_MD_SEG+0x1a>
 800cc18:	2b01      	cmp	r3, #1
 800cc1a:	d011      	beq.n	800cc40 <SP100_LCD_MD_SEG+0x3c>
 800cc1c:	e021      	b.n	800cc62 <SP100_LCD_MD_SEG+0x5e>
 800cc1e:	4b13      	ldr	r3, [pc, #76]	; (800cc6c <SP100_LCD_MD_SEG+0x68>)
 800cc20:	0018      	movs	r0, r3
 800cc22:	f7ff fef9 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800cc26:	4b12      	ldr	r3, [pc, #72]	; (800cc70 <SP100_LCD_MD_SEG+0x6c>)
 800cc28:	0018      	movs	r0, r3
 800cc2a:	f7ff fef5 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800cc2e:	4b11      	ldr	r3, [pc, #68]	; (800cc74 <SP100_LCD_MD_SEG+0x70>)
 800cc30:	0018      	movs	r0, r3
 800cc32:	f7ff fef1 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800cc36:	4b10      	ldr	r3, [pc, #64]	; (800cc78 <SP100_LCD_MD_SEG+0x74>)
 800cc38:	0018      	movs	r0, r3
 800cc3a:	f7ff feed 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800cc3e:	e010      	b.n	800cc62 <SP100_LCD_MD_SEG+0x5e>
 800cc40:	4b0a      	ldr	r3, [pc, #40]	; (800cc6c <SP100_LCD_MD_SEG+0x68>)
 800cc42:	0018      	movs	r0, r3
 800cc44:	f7ff ff20 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cc48:	4b09      	ldr	r3, [pc, #36]	; (800cc70 <SP100_LCD_MD_SEG+0x6c>)
 800cc4a:	0018      	movs	r0, r3
 800cc4c:	f7ff ff1c 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cc50:	4b08      	ldr	r3, [pc, #32]	; (800cc74 <SP100_LCD_MD_SEG+0x70>)
 800cc52:	0018      	movs	r0, r3
 800cc54:	f7ff ff18 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cc58:	4b07      	ldr	r3, [pc, #28]	; (800cc78 <SP100_LCD_MD_SEG+0x74>)
 800cc5a:	0018      	movs	r0, r3
 800cc5c:	f7ff ff14 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cc60:	46c0      	nop			; (mov r8, r8)
 800cc62:	46c0      	nop			; (mov r8, r8)
 800cc64:	46bd      	mov	sp, r7
 800cc66:	b002      	add	sp, #8
 800cc68:	bd80      	pop	{r7, pc}
 800cc6a:	46c0      	nop			; (mov r8, r8)
 800cc6c:	08014ed8 	.word	0x08014ed8
 800cc70:	08014edc 	.word	0x08014edc
 800cc74:	08014ee0 	.word	0x08014ee0
 800cc78:	08014ee4 	.word	0x08014ee4

0800cc7c <SP100_LCD_BL_SEG>:
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b082      	sub	sp, #8
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	0002      	movs	r2, r0
 800cc84:	1dfb      	adds	r3, r7, #7
 800cc86:	701a      	strb	r2, [r3, #0]
 800cc88:	1dfb      	adds	r3, r7, #7
 800cc8a:	781b      	ldrb	r3, [r3, #0]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d002      	beq.n	800cc96 <SP100_LCD_BL_SEG+0x1a>
 800cc90:	2b01      	cmp	r3, #1
 800cc92:	d045      	beq.n	800cd20 <SP100_LCD_BL_SEG+0xa4>
 800cc94:	e089      	b.n	800cdaa <SP100_LCD_BL_SEG+0x12e>
 800cc96:	4b47      	ldr	r3, [pc, #284]	; (800cdb4 <SP100_LCD_BL_SEG+0x138>)
 800cc98:	0018      	movs	r0, r3
 800cc9a:	f7ff febd 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800cc9e:	4b46      	ldr	r3, [pc, #280]	; (800cdb8 <SP100_LCD_BL_SEG+0x13c>)
 800cca0:	0018      	movs	r0, r3
 800cca2:	f7ff feb9 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800cca6:	4b45      	ldr	r3, [pc, #276]	; (800cdbc <SP100_LCD_BL_SEG+0x140>)
 800cca8:	0018      	movs	r0, r3
 800ccaa:	f7ff feb5 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ccae:	4b44      	ldr	r3, [pc, #272]	; (800cdc0 <SP100_LCD_BL_SEG+0x144>)
 800ccb0:	0018      	movs	r0, r3
 800ccb2:	f7ff feb1 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ccb6:	4b43      	ldr	r3, [pc, #268]	; (800cdc4 <SP100_LCD_BL_SEG+0x148>)
 800ccb8:	0018      	movs	r0, r3
 800ccba:	f7ff fead 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ccbe:	4b42      	ldr	r3, [pc, #264]	; (800cdc8 <SP100_LCD_BL_SEG+0x14c>)
 800ccc0:	0018      	movs	r0, r3
 800ccc2:	f7ff fea9 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ccc6:	4b41      	ldr	r3, [pc, #260]	; (800cdcc <SP100_LCD_BL_SEG+0x150>)
 800ccc8:	0018      	movs	r0, r3
 800ccca:	f7ff fea5 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ccce:	4b40      	ldr	r3, [pc, #256]	; (800cdd0 <SP100_LCD_BL_SEG+0x154>)
 800ccd0:	0018      	movs	r0, r3
 800ccd2:	f7ff fea1 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ccd6:	4b3f      	ldr	r3, [pc, #252]	; (800cdd4 <SP100_LCD_BL_SEG+0x158>)
 800ccd8:	0018      	movs	r0, r3
 800ccda:	f7ff fe9d 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ccde:	4b3e      	ldr	r3, [pc, #248]	; (800cdd8 <SP100_LCD_BL_SEG+0x15c>)
 800cce0:	0018      	movs	r0, r3
 800cce2:	f7ff fe99 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800cce6:	4b3d      	ldr	r3, [pc, #244]	; (800cddc <SP100_LCD_BL_SEG+0x160>)
 800cce8:	0018      	movs	r0, r3
 800ccea:	f7ff fe95 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ccee:	4b3c      	ldr	r3, [pc, #240]	; (800cde0 <SP100_LCD_BL_SEG+0x164>)
 800ccf0:	0018      	movs	r0, r3
 800ccf2:	f7ff fe91 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ccf6:	4b3b      	ldr	r3, [pc, #236]	; (800cde4 <SP100_LCD_BL_SEG+0x168>)
 800ccf8:	0018      	movs	r0, r3
 800ccfa:	f7ff fe8d 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ccfe:	4b3a      	ldr	r3, [pc, #232]	; (800cde8 <SP100_LCD_BL_SEG+0x16c>)
 800cd00:	0018      	movs	r0, r3
 800cd02:	f7ff fe89 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800cd06:	4b39      	ldr	r3, [pc, #228]	; (800cdec <SP100_LCD_BL_SEG+0x170>)
 800cd08:	0018      	movs	r0, r3
 800cd0a:	f7ff fe85 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800cd0e:	4b38      	ldr	r3, [pc, #224]	; (800cdf0 <SP100_LCD_BL_SEG+0x174>)
 800cd10:	0018      	movs	r0, r3
 800cd12:	f7ff fe81 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800cd16:	4b37      	ldr	r3, [pc, #220]	; (800cdf4 <SP100_LCD_BL_SEG+0x178>)
 800cd18:	0018      	movs	r0, r3
 800cd1a:	f7ff fe7d 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800cd1e:	e044      	b.n	800cdaa <SP100_LCD_BL_SEG+0x12e>
 800cd20:	4b24      	ldr	r3, [pc, #144]	; (800cdb4 <SP100_LCD_BL_SEG+0x138>)
 800cd22:	0018      	movs	r0, r3
 800cd24:	f7ff feb0 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cd28:	4b23      	ldr	r3, [pc, #140]	; (800cdb8 <SP100_LCD_BL_SEG+0x13c>)
 800cd2a:	0018      	movs	r0, r3
 800cd2c:	f7ff feac 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cd30:	4b22      	ldr	r3, [pc, #136]	; (800cdbc <SP100_LCD_BL_SEG+0x140>)
 800cd32:	0018      	movs	r0, r3
 800cd34:	f7ff fea8 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cd38:	4b21      	ldr	r3, [pc, #132]	; (800cdc0 <SP100_LCD_BL_SEG+0x144>)
 800cd3a:	0018      	movs	r0, r3
 800cd3c:	f7ff fea4 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cd40:	4b20      	ldr	r3, [pc, #128]	; (800cdc4 <SP100_LCD_BL_SEG+0x148>)
 800cd42:	0018      	movs	r0, r3
 800cd44:	f7ff fea0 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cd48:	4b1f      	ldr	r3, [pc, #124]	; (800cdc8 <SP100_LCD_BL_SEG+0x14c>)
 800cd4a:	0018      	movs	r0, r3
 800cd4c:	f7ff fe9c 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cd50:	4b1e      	ldr	r3, [pc, #120]	; (800cdcc <SP100_LCD_BL_SEG+0x150>)
 800cd52:	0018      	movs	r0, r3
 800cd54:	f7ff fe98 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cd58:	4b1d      	ldr	r3, [pc, #116]	; (800cdd0 <SP100_LCD_BL_SEG+0x154>)
 800cd5a:	0018      	movs	r0, r3
 800cd5c:	f7ff fe94 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cd60:	4b1c      	ldr	r3, [pc, #112]	; (800cdd4 <SP100_LCD_BL_SEG+0x158>)
 800cd62:	0018      	movs	r0, r3
 800cd64:	f7ff fe90 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cd68:	4b1b      	ldr	r3, [pc, #108]	; (800cdd8 <SP100_LCD_BL_SEG+0x15c>)
 800cd6a:	0018      	movs	r0, r3
 800cd6c:	f7ff fe8c 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cd70:	4b1a      	ldr	r3, [pc, #104]	; (800cddc <SP100_LCD_BL_SEG+0x160>)
 800cd72:	0018      	movs	r0, r3
 800cd74:	f7ff fe88 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cd78:	4b19      	ldr	r3, [pc, #100]	; (800cde0 <SP100_LCD_BL_SEG+0x164>)
 800cd7a:	0018      	movs	r0, r3
 800cd7c:	f7ff fe84 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cd80:	4b18      	ldr	r3, [pc, #96]	; (800cde4 <SP100_LCD_BL_SEG+0x168>)
 800cd82:	0018      	movs	r0, r3
 800cd84:	f7ff fe80 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cd88:	4b17      	ldr	r3, [pc, #92]	; (800cde8 <SP100_LCD_BL_SEG+0x16c>)
 800cd8a:	0018      	movs	r0, r3
 800cd8c:	f7ff fe7c 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cd90:	4b16      	ldr	r3, [pc, #88]	; (800cdec <SP100_LCD_BL_SEG+0x170>)
 800cd92:	0018      	movs	r0, r3
 800cd94:	f7ff fe78 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cd98:	4b15      	ldr	r3, [pc, #84]	; (800cdf0 <SP100_LCD_BL_SEG+0x174>)
 800cd9a:	0018      	movs	r0, r3
 800cd9c:	f7ff fe74 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cda0:	4b14      	ldr	r3, [pc, #80]	; (800cdf4 <SP100_LCD_BL_SEG+0x178>)
 800cda2:	0018      	movs	r0, r3
 800cda4:	f7ff fe70 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cda8:	46c0      	nop			; (mov r8, r8)
 800cdaa:	46c0      	nop			; (mov r8, r8)
 800cdac:	46bd      	mov	sp, r7
 800cdae:	b002      	add	sp, #8
 800cdb0:	bd80      	pop	{r7, pc}
 800cdb2:	46c0      	nop			; (mov r8, r8)
 800cdb4:	08014ee8 	.word	0x08014ee8
 800cdb8:	08014eec 	.word	0x08014eec
 800cdbc:	08014ef0 	.word	0x08014ef0
 800cdc0:	08014ef4 	.word	0x08014ef4
 800cdc4:	08014ef8 	.word	0x08014ef8
 800cdc8:	08014efc 	.word	0x08014efc
 800cdcc:	08014f00 	.word	0x08014f00
 800cdd0:	08014f04 	.word	0x08014f04
 800cdd4:	08014f08 	.word	0x08014f08
 800cdd8:	08014f0c 	.word	0x08014f0c
 800cddc:	08014f10 	.word	0x08014f10
 800cde0:	08014f14 	.word	0x08014f14
 800cde4:	08014f18 	.word	0x08014f18
 800cde8:	08014f1c 	.word	0x08014f1c
 800cdec:	08014f20 	.word	0x08014f20
 800cdf0:	08014f24 	.word	0x08014f24
 800cdf4:	08014f28 	.word	0x08014f28

0800cdf8 <SP100_LCD_OT_SEG>:
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b082      	sub	sp, #8
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	0002      	movs	r2, r0
 800ce00:	1dfb      	adds	r3, r7, #7
 800ce02:	701a      	strb	r2, [r3, #0]
 800ce04:	1dfb      	adds	r3, r7, #7
 800ce06:	781b      	ldrb	r3, [r3, #0]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d002      	beq.n	800ce12 <SP100_LCD_OT_SEG+0x1a>
 800ce0c:	2b01      	cmp	r3, #1
 800ce0e:	d005      	beq.n	800ce1c <SP100_LCD_OT_SEG+0x24>
 800ce10:	e009      	b.n	800ce26 <SP100_LCD_OT_SEG+0x2e>
 800ce12:	4b07      	ldr	r3, [pc, #28]	; (800ce30 <SP100_LCD_OT_SEG+0x38>)
 800ce14:	0018      	movs	r0, r3
 800ce16:	f7ff fdff 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ce1a:	e004      	b.n	800ce26 <SP100_LCD_OT_SEG+0x2e>
 800ce1c:	4b04      	ldr	r3, [pc, #16]	; (800ce30 <SP100_LCD_OT_SEG+0x38>)
 800ce1e:	0018      	movs	r0, r3
 800ce20:	f7ff fe32 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ce24:	46c0      	nop			; (mov r8, r8)
 800ce26:	46c0      	nop			; (mov r8, r8)
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	b002      	add	sp, #8
 800ce2c:	bd80      	pop	{r7, pc}
 800ce2e:	46c0      	nop			; (mov r8, r8)
 800ce30:	08014f88 	.word	0x08014f88

0800ce34 <SP100_LCD_SP_SEG>:
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b082      	sub	sp, #8
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	0002      	movs	r2, r0
 800ce3c:	1dfb      	adds	r3, r7, #7
 800ce3e:	701a      	strb	r2, [r3, #0]
 800ce40:	1dfb      	adds	r3, r7, #7
 800ce42:	781b      	ldrb	r3, [r3, #0]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d002      	beq.n	800ce4e <SP100_LCD_SP_SEG+0x1a>
 800ce48:	2b01      	cmp	r3, #1
 800ce4a:	d05d      	beq.n	800cf08 <SP100_LCD_SP_SEG+0xd4>
 800ce4c:	e0b9      	b.n	800cfc2 <SP100_LCD_SP_SEG+0x18e>
 800ce4e:	4b5f      	ldr	r3, [pc, #380]	; (800cfcc <SP100_LCD_SP_SEG+0x198>)
 800ce50:	0018      	movs	r0, r3
 800ce52:	f7ff fde1 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ce56:	4b5e      	ldr	r3, [pc, #376]	; (800cfd0 <SP100_LCD_SP_SEG+0x19c>)
 800ce58:	0018      	movs	r0, r3
 800ce5a:	f7ff fddd 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ce5e:	4b5d      	ldr	r3, [pc, #372]	; (800cfd4 <SP100_LCD_SP_SEG+0x1a0>)
 800ce60:	0018      	movs	r0, r3
 800ce62:	f7ff fdd9 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ce66:	4b5c      	ldr	r3, [pc, #368]	; (800cfd8 <SP100_LCD_SP_SEG+0x1a4>)
 800ce68:	0018      	movs	r0, r3
 800ce6a:	f7ff fdd5 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ce6e:	4b5b      	ldr	r3, [pc, #364]	; (800cfdc <SP100_LCD_SP_SEG+0x1a8>)
 800ce70:	0018      	movs	r0, r3
 800ce72:	f7ff fdd1 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ce76:	4b5a      	ldr	r3, [pc, #360]	; (800cfe0 <SP100_LCD_SP_SEG+0x1ac>)
 800ce78:	0018      	movs	r0, r3
 800ce7a:	f7ff fdcd 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ce7e:	4b59      	ldr	r3, [pc, #356]	; (800cfe4 <SP100_LCD_SP_SEG+0x1b0>)
 800ce80:	0018      	movs	r0, r3
 800ce82:	f7ff fdc9 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ce86:	4b58      	ldr	r3, [pc, #352]	; (800cfe8 <SP100_LCD_SP_SEG+0x1b4>)
 800ce88:	0018      	movs	r0, r3
 800ce8a:	f7ff fdc5 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ce8e:	4b57      	ldr	r3, [pc, #348]	; (800cfec <SP100_LCD_SP_SEG+0x1b8>)
 800ce90:	0018      	movs	r0, r3
 800ce92:	f7ff fdc1 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ce96:	4b56      	ldr	r3, [pc, #344]	; (800cff0 <SP100_LCD_SP_SEG+0x1bc>)
 800ce98:	0018      	movs	r0, r3
 800ce9a:	f7ff fdbd 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ce9e:	4b55      	ldr	r3, [pc, #340]	; (800cff4 <SP100_LCD_SP_SEG+0x1c0>)
 800cea0:	0018      	movs	r0, r3
 800cea2:	f7ff fdb9 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800cea6:	4b54      	ldr	r3, [pc, #336]	; (800cff8 <SP100_LCD_SP_SEG+0x1c4>)
 800cea8:	0018      	movs	r0, r3
 800ceaa:	f7ff fdb5 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ceae:	4b53      	ldr	r3, [pc, #332]	; (800cffc <SP100_LCD_SP_SEG+0x1c8>)
 800ceb0:	0018      	movs	r0, r3
 800ceb2:	f7ff fdb1 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ceb6:	4b52      	ldr	r3, [pc, #328]	; (800d000 <SP100_LCD_SP_SEG+0x1cc>)
 800ceb8:	0018      	movs	r0, r3
 800ceba:	f7ff fdad 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800cebe:	4b51      	ldr	r3, [pc, #324]	; (800d004 <SP100_LCD_SP_SEG+0x1d0>)
 800cec0:	0018      	movs	r0, r3
 800cec2:	f7ff fda9 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800cec6:	4b50      	ldr	r3, [pc, #320]	; (800d008 <SP100_LCD_SP_SEG+0x1d4>)
 800cec8:	0018      	movs	r0, r3
 800ceca:	f7ff fda5 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800cece:	4b4f      	ldr	r3, [pc, #316]	; (800d00c <SP100_LCD_SP_SEG+0x1d8>)
 800ced0:	0018      	movs	r0, r3
 800ced2:	f7ff fda1 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ced6:	4b4e      	ldr	r3, [pc, #312]	; (800d010 <SP100_LCD_SP_SEG+0x1dc>)
 800ced8:	0018      	movs	r0, r3
 800ceda:	f7ff fd9d 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800cede:	4b4d      	ldr	r3, [pc, #308]	; (800d014 <SP100_LCD_SP_SEG+0x1e0>)
 800cee0:	0018      	movs	r0, r3
 800cee2:	f7ff fd99 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800cee6:	4b4c      	ldr	r3, [pc, #304]	; (800d018 <SP100_LCD_SP_SEG+0x1e4>)
 800cee8:	0018      	movs	r0, r3
 800ceea:	f7ff fd95 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ceee:	4b4b      	ldr	r3, [pc, #300]	; (800d01c <SP100_LCD_SP_SEG+0x1e8>)
 800cef0:	0018      	movs	r0, r3
 800cef2:	f7ff fd91 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800cef6:	4b4a      	ldr	r3, [pc, #296]	; (800d020 <SP100_LCD_SP_SEG+0x1ec>)
 800cef8:	0018      	movs	r0, r3
 800cefa:	f7ff fd8d 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800cefe:	4b49      	ldr	r3, [pc, #292]	; (800d024 <SP100_LCD_SP_SEG+0x1f0>)
 800cf00:	0018      	movs	r0, r3
 800cf02:	f7ff fd89 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800cf06:	e05c      	b.n	800cfc2 <SP100_LCD_SP_SEG+0x18e>
 800cf08:	4b30      	ldr	r3, [pc, #192]	; (800cfcc <SP100_LCD_SP_SEG+0x198>)
 800cf0a:	0018      	movs	r0, r3
 800cf0c:	f7ff fdbc 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cf10:	4b2f      	ldr	r3, [pc, #188]	; (800cfd0 <SP100_LCD_SP_SEG+0x19c>)
 800cf12:	0018      	movs	r0, r3
 800cf14:	f7ff fdb8 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cf18:	4b2e      	ldr	r3, [pc, #184]	; (800cfd4 <SP100_LCD_SP_SEG+0x1a0>)
 800cf1a:	0018      	movs	r0, r3
 800cf1c:	f7ff fdb4 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cf20:	4b2d      	ldr	r3, [pc, #180]	; (800cfd8 <SP100_LCD_SP_SEG+0x1a4>)
 800cf22:	0018      	movs	r0, r3
 800cf24:	f7ff fdb0 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cf28:	4b2c      	ldr	r3, [pc, #176]	; (800cfdc <SP100_LCD_SP_SEG+0x1a8>)
 800cf2a:	0018      	movs	r0, r3
 800cf2c:	f7ff fdac 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cf30:	4b2b      	ldr	r3, [pc, #172]	; (800cfe0 <SP100_LCD_SP_SEG+0x1ac>)
 800cf32:	0018      	movs	r0, r3
 800cf34:	f7ff fda8 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cf38:	4b2a      	ldr	r3, [pc, #168]	; (800cfe4 <SP100_LCD_SP_SEG+0x1b0>)
 800cf3a:	0018      	movs	r0, r3
 800cf3c:	f7ff fda4 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cf40:	4b29      	ldr	r3, [pc, #164]	; (800cfe8 <SP100_LCD_SP_SEG+0x1b4>)
 800cf42:	0018      	movs	r0, r3
 800cf44:	f7ff fda0 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cf48:	4b28      	ldr	r3, [pc, #160]	; (800cfec <SP100_LCD_SP_SEG+0x1b8>)
 800cf4a:	0018      	movs	r0, r3
 800cf4c:	f7ff fd9c 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cf50:	4b27      	ldr	r3, [pc, #156]	; (800cff0 <SP100_LCD_SP_SEG+0x1bc>)
 800cf52:	0018      	movs	r0, r3
 800cf54:	f7ff fd98 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cf58:	4b26      	ldr	r3, [pc, #152]	; (800cff4 <SP100_LCD_SP_SEG+0x1c0>)
 800cf5a:	0018      	movs	r0, r3
 800cf5c:	f7ff fd94 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cf60:	4b25      	ldr	r3, [pc, #148]	; (800cff8 <SP100_LCD_SP_SEG+0x1c4>)
 800cf62:	0018      	movs	r0, r3
 800cf64:	f7ff fd90 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cf68:	4b24      	ldr	r3, [pc, #144]	; (800cffc <SP100_LCD_SP_SEG+0x1c8>)
 800cf6a:	0018      	movs	r0, r3
 800cf6c:	f7ff fd8c 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cf70:	4b23      	ldr	r3, [pc, #140]	; (800d000 <SP100_LCD_SP_SEG+0x1cc>)
 800cf72:	0018      	movs	r0, r3
 800cf74:	f7ff fd88 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cf78:	4b22      	ldr	r3, [pc, #136]	; (800d004 <SP100_LCD_SP_SEG+0x1d0>)
 800cf7a:	0018      	movs	r0, r3
 800cf7c:	f7ff fd84 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cf80:	4b21      	ldr	r3, [pc, #132]	; (800d008 <SP100_LCD_SP_SEG+0x1d4>)
 800cf82:	0018      	movs	r0, r3
 800cf84:	f7ff fd80 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cf88:	4b20      	ldr	r3, [pc, #128]	; (800d00c <SP100_LCD_SP_SEG+0x1d8>)
 800cf8a:	0018      	movs	r0, r3
 800cf8c:	f7ff fd7c 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cf90:	4b1f      	ldr	r3, [pc, #124]	; (800d010 <SP100_LCD_SP_SEG+0x1dc>)
 800cf92:	0018      	movs	r0, r3
 800cf94:	f7ff fd78 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cf98:	4b1e      	ldr	r3, [pc, #120]	; (800d014 <SP100_LCD_SP_SEG+0x1e0>)
 800cf9a:	0018      	movs	r0, r3
 800cf9c:	f7ff fd74 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cfa0:	4b1d      	ldr	r3, [pc, #116]	; (800d018 <SP100_LCD_SP_SEG+0x1e4>)
 800cfa2:	0018      	movs	r0, r3
 800cfa4:	f7ff fd70 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cfa8:	4b1c      	ldr	r3, [pc, #112]	; (800d01c <SP100_LCD_SP_SEG+0x1e8>)
 800cfaa:	0018      	movs	r0, r3
 800cfac:	f7ff fd6c 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cfb0:	4b1b      	ldr	r3, [pc, #108]	; (800d020 <SP100_LCD_SP_SEG+0x1ec>)
 800cfb2:	0018      	movs	r0, r3
 800cfb4:	f7ff fd68 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cfb8:	4b1a      	ldr	r3, [pc, #104]	; (800d024 <SP100_LCD_SP_SEG+0x1f0>)
 800cfba:	0018      	movs	r0, r3
 800cfbc:	f7ff fd64 	bl	800ca88 <SP100_LCD_SEG_ON>
 800cfc0:	46c0      	nop			; (mov r8, r8)
 800cfc2:	46c0      	nop			; (mov r8, r8)
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	b002      	add	sp, #8
 800cfc8:	bd80      	pop	{r7, pc}
 800cfca:	46c0      	nop			; (mov r8, r8)
 800cfcc:	08014f2c 	.word	0x08014f2c
 800cfd0:	08014f30 	.word	0x08014f30
 800cfd4:	08014f34 	.word	0x08014f34
 800cfd8:	08014f38 	.word	0x08014f38
 800cfdc:	08014f3c 	.word	0x08014f3c
 800cfe0:	08014f40 	.word	0x08014f40
 800cfe4:	08014f44 	.word	0x08014f44
 800cfe8:	08014f48 	.word	0x08014f48
 800cfec:	08014f4c 	.word	0x08014f4c
 800cff0:	08014f50 	.word	0x08014f50
 800cff4:	08014f54 	.word	0x08014f54
 800cff8:	08014f58 	.word	0x08014f58
 800cffc:	08014f5c 	.word	0x08014f5c
 800d000:	08014f60 	.word	0x08014f60
 800d004:	08014f64 	.word	0x08014f64
 800d008:	08014f68 	.word	0x08014f68
 800d00c:	08014f6c 	.word	0x08014f6c
 800d010:	08014f70 	.word	0x08014f70
 800d014:	08014f74 	.word	0x08014f74
 800d018:	08014f78 	.word	0x08014f78
 800d01c:	08014f7c 	.word	0x08014f7c
 800d020:	08014f80 	.word	0x08014f80
 800d024:	08014f84 	.word	0x08014f84

0800d028 <SP100_LCD_State_Init_SEG>:
 800d028:	b580      	push	{r7, lr}
 800d02a:	b082      	sub	sp, #8
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	0002      	movs	r2, r0
 800d030:	1dfb      	adds	r3, r7, #7
 800d032:	701a      	strb	r2, [r3, #0]
 800d034:	1dfb      	adds	r3, r7, #7
 800d036:	781b      	ldrb	r3, [r3, #0]
 800d038:	2b05      	cmp	r3, #5
 800d03a:	d83a      	bhi.n	800d0b2 <SP100_LCD_State_Init_SEG+0x8a>
 800d03c:	009a      	lsls	r2, r3, #2
 800d03e:	4b1f      	ldr	r3, [pc, #124]	; (800d0bc <SP100_LCD_State_Init_SEG+0x94>)
 800d040:	18d3      	adds	r3, r2, r3
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	469f      	mov	pc, r3
 800d046:	2000      	movs	r0, #0
 800d048:	f7ff fda0 	bl	800cb8c <SP100_LCD_AUTO_SEG>
 800d04c:	2000      	movs	r0, #0
 800d04e:	f7ff fdbb 	bl	800cbc8 <SP100_LCD_DEF_SEG>
 800d052:	2000      	movs	r0, #0
 800d054:	f7ff fe12 	bl	800cc7c <SP100_LCD_BL_SEG>
 800d058:	2001      	movs	r0, #1
 800d05a:	f7ff fecd 	bl	800cdf8 <SP100_LCD_OT_SEG>
 800d05e:	2000      	movs	r0, #0
 800d060:	f7ff fee8 	bl	800ce34 <SP100_LCD_SP_SEG>
 800d064:	e025      	b.n	800d0b2 <SP100_LCD_State_Init_SEG+0x8a>
 800d066:	2000      	movs	r0, #0
 800d068:	f7ff fdae 	bl	800cbc8 <SP100_LCD_DEF_SEG>
 800d06c:	2001      	movs	r0, #1
 800d06e:	f7ff fec3 	bl	800cdf8 <SP100_LCD_OT_SEG>
 800d072:	e01e      	b.n	800d0b2 <SP100_LCD_State_Init_SEG+0x8a>
 800d074:	2001      	movs	r0, #1
 800d076:	f7ff fda7 	bl	800cbc8 <SP100_LCD_DEF_SEG>
 800d07a:	2000      	movs	r0, #0
 800d07c:	f7ff fdc2 	bl	800cc04 <SP100_LCD_MD_SEG>
 800d080:	2001      	movs	r0, #1
 800d082:	f7ff feb9 	bl	800cdf8 <SP100_LCD_OT_SEG>
 800d086:	e014      	b.n	800d0b2 <SP100_LCD_State_Init_SEG+0x8a>
 800d088:	2000      	movs	r0, #0
 800d08a:	f7ff fd9d 	bl	800cbc8 <SP100_LCD_DEF_SEG>
 800d08e:	2000      	movs	r0, #0
 800d090:	f7ff fdb8 	bl	800cc04 <SP100_LCD_MD_SEG>
 800d094:	2000      	movs	r0, #0
 800d096:	f7ff fdf1 	bl	800cc7c <SP100_LCD_BL_SEG>
 800d09a:	2000      	movs	r0, #0
 800d09c:	f7ff feac 	bl	800cdf8 <SP100_LCD_OT_SEG>
 800d0a0:	e007      	b.n	800d0b2 <SP100_LCD_State_Init_SEG+0x8a>
 800d0a2:	2000      	movs	r0, #0
 800d0a4:	f7ff fd34 	bl	800cb10 <SP100_LCD_ALL_SEG>
 800d0a8:	e003      	b.n	800d0b2 <SP100_LCD_State_Init_SEG+0x8a>
 800d0aa:	2000      	movs	r0, #0
 800d0ac:	f7ff fd30 	bl	800cb10 <SP100_LCD_ALL_SEG>
 800d0b0:	46c0      	nop			; (mov r8, r8)
 800d0b2:	46c0      	nop			; (mov r8, r8)
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	b002      	add	sp, #8
 800d0b8:	bd80      	pop	{r7, pc}
 800d0ba:	46c0      	nop			; (mov r8, r8)
 800d0bc:	08014fcc 	.word	0x08014fcc

0800d0c0 <SP100_LCD_AC_Handler>:
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b082      	sub	sp, #8
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	0002      	movs	r2, r0
 800d0c8:	1dfb      	adds	r3, r7, #7
 800d0ca:	701a      	strb	r2, [r3, #0]
 800d0cc:	1dfb      	adds	r3, r7, #7
 800d0ce:	781b      	ldrb	r3, [r3, #0]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d002      	beq.n	800d0da <SP100_LCD_AC_Handler+0x1a>
 800d0d4:	2b01      	cmp	r3, #1
 800d0d6:	d005      	beq.n	800d0e4 <SP100_LCD_AC_Handler+0x24>
 800d0d8:	e009      	b.n	800d0ee <SP100_LCD_AC_Handler+0x2e>
 800d0da:	4b07      	ldr	r3, [pc, #28]	; (800d0f8 <SP100_LCD_AC_Handler+0x38>)
 800d0dc:	0018      	movs	r0, r3
 800d0de:	f7ff fc9b 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d0e2:	e004      	b.n	800d0ee <SP100_LCD_AC_Handler+0x2e>
 800d0e4:	4b04      	ldr	r3, [pc, #16]	; (800d0f8 <SP100_LCD_AC_Handler+0x38>)
 800d0e6:	0018      	movs	r0, r3
 800d0e8:	f7ff fcce 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d0ec:	46c0      	nop			; (mov r8, r8)
 800d0ee:	46c0      	nop			; (mov r8, r8)
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	b002      	add	sp, #8
 800d0f4:	bd80      	pop	{r7, pc}
 800d0f6:	46c0      	nop			; (mov r8, r8)
 800d0f8:	08014ed4 	.word	0x08014ed4

0800d0fc <SP100_LCD_RD_Handler>:
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b082      	sub	sp, #8
 800d100:	af00      	add	r7, sp, #0
 800d102:	0002      	movs	r2, r0
 800d104:	1dfb      	adds	r3, r7, #7
 800d106:	701a      	strb	r2, [r3, #0]
 800d108:	1dfb      	adds	r3, r7, #7
 800d10a:	781b      	ldrb	r3, [r3, #0]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d002      	beq.n	800d116 <SP100_LCD_RD_Handler+0x1a>
 800d110:	2b01      	cmp	r3, #1
 800d112:	d005      	beq.n	800d120 <SP100_LCD_RD_Handler+0x24>
 800d114:	e009      	b.n	800d12a <SP100_LCD_RD_Handler+0x2e>
 800d116:	4b07      	ldr	r3, [pc, #28]	; (800d134 <SP100_LCD_RD_Handler+0x38>)
 800d118:	0018      	movs	r0, r3
 800d11a:	f7ff fc7d 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d11e:	e004      	b.n	800d12a <SP100_LCD_RD_Handler+0x2e>
 800d120:	4b04      	ldr	r3, [pc, #16]	; (800d134 <SP100_LCD_RD_Handler+0x38>)
 800d122:	0018      	movs	r0, r3
 800d124:	f7ff fcb0 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d128:	46c0      	nop			; (mov r8, r8)
 800d12a:	46c0      	nop			; (mov r8, r8)
 800d12c:	46bd      	mov	sp, r7
 800d12e:	b002      	add	sp, #8
 800d130:	bd80      	pop	{r7, pc}
 800d132:	46c0      	nop			; (mov r8, r8)
 800d134:	08014ed0 	.word	0x08014ed0

0800d138 <SP100_LCD_MD_Handler>:
 800d138:	b580      	push	{r7, lr}
 800d13a:	b082      	sub	sp, #8
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	0002      	movs	r2, r0
 800d140:	1dfb      	adds	r3, r7, #7
 800d142:	701a      	strb	r2, [r3, #0]
 800d144:	1dfb      	adds	r3, r7, #7
 800d146:	781b      	ldrb	r3, [r3, #0]
 800d148:	2b04      	cmp	r3, #4
 800d14a:	d859      	bhi.n	800d200 <SP100_LCD_MD_Handler+0xc8>
 800d14c:	009a      	lsls	r2, r3, #2
 800d14e:	4b2e      	ldr	r3, [pc, #184]	; (800d208 <SP100_LCD_MD_Handler+0xd0>)
 800d150:	18d3      	adds	r3, r2, r3
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	469f      	mov	pc, r3
 800d156:	4b2d      	ldr	r3, [pc, #180]	; (800d20c <SP100_LCD_MD_Handler+0xd4>)
 800d158:	0018      	movs	r0, r3
 800d15a:	f7ff fc95 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d15e:	4b2c      	ldr	r3, [pc, #176]	; (800d210 <SP100_LCD_MD_Handler+0xd8>)
 800d160:	0018      	movs	r0, r3
 800d162:	f7ff fc91 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d166:	4b2b      	ldr	r3, [pc, #172]	; (800d214 <SP100_LCD_MD_Handler+0xdc>)
 800d168:	0018      	movs	r0, r3
 800d16a:	f7ff fc55 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d16e:	4b2a      	ldr	r3, [pc, #168]	; (800d218 <SP100_LCD_MD_Handler+0xe0>)
 800d170:	0018      	movs	r0, r3
 800d172:	f7ff fc51 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d176:	e043      	b.n	800d200 <SP100_LCD_MD_Handler+0xc8>
 800d178:	4b24      	ldr	r3, [pc, #144]	; (800d20c <SP100_LCD_MD_Handler+0xd4>)
 800d17a:	0018      	movs	r0, r3
 800d17c:	f7ff fc84 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d180:	4b23      	ldr	r3, [pc, #140]	; (800d210 <SP100_LCD_MD_Handler+0xd8>)
 800d182:	0018      	movs	r0, r3
 800d184:	f7ff fc80 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d188:	4b22      	ldr	r3, [pc, #136]	; (800d214 <SP100_LCD_MD_Handler+0xdc>)
 800d18a:	0018      	movs	r0, r3
 800d18c:	f7ff fc7c 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d190:	4b21      	ldr	r3, [pc, #132]	; (800d218 <SP100_LCD_MD_Handler+0xe0>)
 800d192:	0018      	movs	r0, r3
 800d194:	f7ff fc40 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d198:	e032      	b.n	800d200 <SP100_LCD_MD_Handler+0xc8>
 800d19a:	4b1c      	ldr	r3, [pc, #112]	; (800d20c <SP100_LCD_MD_Handler+0xd4>)
 800d19c:	0018      	movs	r0, r3
 800d19e:	f7ff fc73 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d1a2:	4b1b      	ldr	r3, [pc, #108]	; (800d210 <SP100_LCD_MD_Handler+0xd8>)
 800d1a4:	0018      	movs	r0, r3
 800d1a6:	f7ff fc37 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d1aa:	4b1a      	ldr	r3, [pc, #104]	; (800d214 <SP100_LCD_MD_Handler+0xdc>)
 800d1ac:	0018      	movs	r0, r3
 800d1ae:	f7ff fc6b 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d1b2:	4b19      	ldr	r3, [pc, #100]	; (800d218 <SP100_LCD_MD_Handler+0xe0>)
 800d1b4:	0018      	movs	r0, r3
 800d1b6:	f7ff fc2f 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d1ba:	e021      	b.n	800d200 <SP100_LCD_MD_Handler+0xc8>
 800d1bc:	4b13      	ldr	r3, [pc, #76]	; (800d20c <SP100_LCD_MD_Handler+0xd4>)
 800d1be:	0018      	movs	r0, r3
 800d1c0:	f7ff fc62 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d1c4:	4b12      	ldr	r3, [pc, #72]	; (800d210 <SP100_LCD_MD_Handler+0xd8>)
 800d1c6:	0018      	movs	r0, r3
 800d1c8:	f7ff fc26 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d1cc:	4b11      	ldr	r3, [pc, #68]	; (800d214 <SP100_LCD_MD_Handler+0xdc>)
 800d1ce:	0018      	movs	r0, r3
 800d1d0:	f7ff fc5a 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d1d4:	4b10      	ldr	r3, [pc, #64]	; (800d218 <SP100_LCD_MD_Handler+0xe0>)
 800d1d6:	0018      	movs	r0, r3
 800d1d8:	f7ff fc56 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d1dc:	e010      	b.n	800d200 <SP100_LCD_MD_Handler+0xc8>
 800d1de:	4b0b      	ldr	r3, [pc, #44]	; (800d20c <SP100_LCD_MD_Handler+0xd4>)
 800d1e0:	0018      	movs	r0, r3
 800d1e2:	f7ff fc51 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d1e6:	4b0a      	ldr	r3, [pc, #40]	; (800d210 <SP100_LCD_MD_Handler+0xd8>)
 800d1e8:	0018      	movs	r0, r3
 800d1ea:	f7ff fc15 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d1ee:	4b09      	ldr	r3, [pc, #36]	; (800d214 <SP100_LCD_MD_Handler+0xdc>)
 800d1f0:	0018      	movs	r0, r3
 800d1f2:	f7ff fc11 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d1f6:	4b08      	ldr	r3, [pc, #32]	; (800d218 <SP100_LCD_MD_Handler+0xe0>)
 800d1f8:	0018      	movs	r0, r3
 800d1fa:	f7ff fc45 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d1fe:	46c0      	nop			; (mov r8, r8)
 800d200:	46c0      	nop			; (mov r8, r8)
 800d202:	46bd      	mov	sp, r7
 800d204:	b002      	add	sp, #8
 800d206:	bd80      	pop	{r7, pc}
 800d208:	08014fe4 	.word	0x08014fe4
 800d20c:	08014ed8 	.word	0x08014ed8
 800d210:	08014edc 	.word	0x08014edc
 800d214:	08014ee0 	.word	0x08014ee0
 800d218:	08014ee4 	.word	0x08014ee4

0800d21c <SP100_LCD_BL_Handler>:
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b082      	sub	sp, #8
 800d220:	af00      	add	r7, sp, #0
 800d222:	0002      	movs	r2, r0
 800d224:	1dfb      	adds	r3, r7, #7
 800d226:	701a      	strb	r2, [r3, #0]
 800d228:	1dfb      	adds	r3, r7, #7
 800d22a:	781b      	ldrb	r3, [r3, #0]
 800d22c:	2b08      	cmp	r3, #8
 800d22e:	d900      	bls.n	800d232 <SP100_LCD_BL_Handler+0x16>
 800d230:	e296      	b.n	800d760 <SP100_LCD_BL_Handler+0x544>
 800d232:	009a      	lsls	r2, r3, #2
 800d234:	4bf3      	ldr	r3, [pc, #972]	; (800d604 <SP100_LCD_BL_Handler+0x3e8>)
 800d236:	18d3      	adds	r3, r2, r3
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	469f      	mov	pc, r3
 800d23c:	4bf2      	ldr	r3, [pc, #968]	; (800d608 <SP100_LCD_BL_Handler+0x3ec>)
 800d23e:	0018      	movs	r0, r3
 800d240:	f7ff fc22 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d244:	4bf1      	ldr	r3, [pc, #964]	; (800d60c <SP100_LCD_BL_Handler+0x3f0>)
 800d246:	0018      	movs	r0, r3
 800d248:	f7ff fbe6 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d24c:	4bf0      	ldr	r3, [pc, #960]	; (800d610 <SP100_LCD_BL_Handler+0x3f4>)
 800d24e:	0018      	movs	r0, r3
 800d250:	f7ff fbe2 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d254:	4bef      	ldr	r3, [pc, #956]	; (800d614 <SP100_LCD_BL_Handler+0x3f8>)
 800d256:	0018      	movs	r0, r3
 800d258:	f7ff fbde 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d25c:	4bee      	ldr	r3, [pc, #952]	; (800d618 <SP100_LCD_BL_Handler+0x3fc>)
 800d25e:	0018      	movs	r0, r3
 800d260:	f7ff fbda 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d264:	4bed      	ldr	r3, [pc, #948]	; (800d61c <SP100_LCD_BL_Handler+0x400>)
 800d266:	0018      	movs	r0, r3
 800d268:	f7ff fbd6 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d26c:	4bec      	ldr	r3, [pc, #944]	; (800d620 <SP100_LCD_BL_Handler+0x404>)
 800d26e:	0018      	movs	r0, r3
 800d270:	f7ff fbd2 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d274:	4beb      	ldr	r3, [pc, #940]	; (800d624 <SP100_LCD_BL_Handler+0x408>)
 800d276:	0018      	movs	r0, r3
 800d278:	f7ff fbce 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d27c:	4bea      	ldr	r3, [pc, #936]	; (800d628 <SP100_LCD_BL_Handler+0x40c>)
 800d27e:	0018      	movs	r0, r3
 800d280:	f7ff fbca 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d284:	4be9      	ldr	r3, [pc, #932]	; (800d62c <SP100_LCD_BL_Handler+0x410>)
 800d286:	0018      	movs	r0, r3
 800d288:	f7ff fbc6 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d28c:	4be8      	ldr	r3, [pc, #928]	; (800d630 <SP100_LCD_BL_Handler+0x414>)
 800d28e:	0018      	movs	r0, r3
 800d290:	f7ff fbc2 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d294:	4be7      	ldr	r3, [pc, #924]	; (800d634 <SP100_LCD_BL_Handler+0x418>)
 800d296:	0018      	movs	r0, r3
 800d298:	f7ff fbbe 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d29c:	4be6      	ldr	r3, [pc, #920]	; (800d638 <SP100_LCD_BL_Handler+0x41c>)
 800d29e:	0018      	movs	r0, r3
 800d2a0:	f7ff fbba 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d2a4:	4be5      	ldr	r3, [pc, #916]	; (800d63c <SP100_LCD_BL_Handler+0x420>)
 800d2a6:	0018      	movs	r0, r3
 800d2a8:	f7ff fbb6 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d2ac:	4be4      	ldr	r3, [pc, #912]	; (800d640 <SP100_LCD_BL_Handler+0x424>)
 800d2ae:	0018      	movs	r0, r3
 800d2b0:	f7ff fbb2 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d2b4:	4be3      	ldr	r3, [pc, #908]	; (800d644 <SP100_LCD_BL_Handler+0x428>)
 800d2b6:	0018      	movs	r0, r3
 800d2b8:	f7ff fbae 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d2bc:	4be2      	ldr	r3, [pc, #904]	; (800d648 <SP100_LCD_BL_Handler+0x42c>)
 800d2be:	0018      	movs	r0, r3
 800d2c0:	f7ff fbaa 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d2c4:	e24c      	b.n	800d760 <SP100_LCD_BL_Handler+0x544>
 800d2c6:	4bd0      	ldr	r3, [pc, #832]	; (800d608 <SP100_LCD_BL_Handler+0x3ec>)
 800d2c8:	0018      	movs	r0, r3
 800d2ca:	f7ff fbdd 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d2ce:	4bcf      	ldr	r3, [pc, #828]	; (800d60c <SP100_LCD_BL_Handler+0x3f0>)
 800d2d0:	0018      	movs	r0, r3
 800d2d2:	f7ff fbd9 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d2d6:	4bce      	ldr	r3, [pc, #824]	; (800d610 <SP100_LCD_BL_Handler+0x3f4>)
 800d2d8:	0018      	movs	r0, r3
 800d2da:	f7ff fb9d 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d2de:	4bcd      	ldr	r3, [pc, #820]	; (800d614 <SP100_LCD_BL_Handler+0x3f8>)
 800d2e0:	0018      	movs	r0, r3
 800d2e2:	f7ff fb99 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d2e6:	4bcc      	ldr	r3, [pc, #816]	; (800d618 <SP100_LCD_BL_Handler+0x3fc>)
 800d2e8:	0018      	movs	r0, r3
 800d2ea:	f7ff fb95 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d2ee:	4bcb      	ldr	r3, [pc, #812]	; (800d61c <SP100_LCD_BL_Handler+0x400>)
 800d2f0:	0018      	movs	r0, r3
 800d2f2:	f7ff fb91 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d2f6:	4bca      	ldr	r3, [pc, #808]	; (800d620 <SP100_LCD_BL_Handler+0x404>)
 800d2f8:	0018      	movs	r0, r3
 800d2fa:	f7ff fb8d 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d2fe:	4bc9      	ldr	r3, [pc, #804]	; (800d624 <SP100_LCD_BL_Handler+0x408>)
 800d300:	0018      	movs	r0, r3
 800d302:	f7ff fb89 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d306:	4bc8      	ldr	r3, [pc, #800]	; (800d628 <SP100_LCD_BL_Handler+0x40c>)
 800d308:	0018      	movs	r0, r3
 800d30a:	f7ff fb85 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d30e:	4bc7      	ldr	r3, [pc, #796]	; (800d62c <SP100_LCD_BL_Handler+0x410>)
 800d310:	0018      	movs	r0, r3
 800d312:	f7ff fbb9 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d316:	4bc6      	ldr	r3, [pc, #792]	; (800d630 <SP100_LCD_BL_Handler+0x414>)
 800d318:	0018      	movs	r0, r3
 800d31a:	f7ff fb7d 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d31e:	4bc5      	ldr	r3, [pc, #788]	; (800d634 <SP100_LCD_BL_Handler+0x418>)
 800d320:	0018      	movs	r0, r3
 800d322:	f7ff fb79 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d326:	4bc4      	ldr	r3, [pc, #784]	; (800d638 <SP100_LCD_BL_Handler+0x41c>)
 800d328:	0018      	movs	r0, r3
 800d32a:	f7ff fb75 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d32e:	4bc3      	ldr	r3, [pc, #780]	; (800d63c <SP100_LCD_BL_Handler+0x420>)
 800d330:	0018      	movs	r0, r3
 800d332:	f7ff fb71 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d336:	4bc2      	ldr	r3, [pc, #776]	; (800d640 <SP100_LCD_BL_Handler+0x424>)
 800d338:	0018      	movs	r0, r3
 800d33a:	f7ff fb6d 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d33e:	4bc1      	ldr	r3, [pc, #772]	; (800d644 <SP100_LCD_BL_Handler+0x428>)
 800d340:	0018      	movs	r0, r3
 800d342:	f7ff fb69 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d346:	4bc0      	ldr	r3, [pc, #768]	; (800d648 <SP100_LCD_BL_Handler+0x42c>)
 800d348:	0018      	movs	r0, r3
 800d34a:	f7ff fb65 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d34e:	e207      	b.n	800d760 <SP100_LCD_BL_Handler+0x544>
 800d350:	4bad      	ldr	r3, [pc, #692]	; (800d608 <SP100_LCD_BL_Handler+0x3ec>)
 800d352:	0018      	movs	r0, r3
 800d354:	f7ff fb98 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d358:	4bac      	ldr	r3, [pc, #688]	; (800d60c <SP100_LCD_BL_Handler+0x3f0>)
 800d35a:	0018      	movs	r0, r3
 800d35c:	f7ff fb94 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d360:	4bab      	ldr	r3, [pc, #684]	; (800d610 <SP100_LCD_BL_Handler+0x3f4>)
 800d362:	0018      	movs	r0, r3
 800d364:	f7ff fb90 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d368:	4baa      	ldr	r3, [pc, #680]	; (800d614 <SP100_LCD_BL_Handler+0x3f8>)
 800d36a:	0018      	movs	r0, r3
 800d36c:	f7ff fb54 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d370:	4ba9      	ldr	r3, [pc, #676]	; (800d618 <SP100_LCD_BL_Handler+0x3fc>)
 800d372:	0018      	movs	r0, r3
 800d374:	f7ff fb50 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d378:	4ba8      	ldr	r3, [pc, #672]	; (800d61c <SP100_LCD_BL_Handler+0x400>)
 800d37a:	0018      	movs	r0, r3
 800d37c:	f7ff fb4c 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d380:	4ba7      	ldr	r3, [pc, #668]	; (800d620 <SP100_LCD_BL_Handler+0x404>)
 800d382:	0018      	movs	r0, r3
 800d384:	f7ff fb48 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d388:	4ba6      	ldr	r3, [pc, #664]	; (800d624 <SP100_LCD_BL_Handler+0x408>)
 800d38a:	0018      	movs	r0, r3
 800d38c:	f7ff fb44 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d390:	4ba5      	ldr	r3, [pc, #660]	; (800d628 <SP100_LCD_BL_Handler+0x40c>)
 800d392:	0018      	movs	r0, r3
 800d394:	f7ff fb40 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d398:	4ba4      	ldr	r3, [pc, #656]	; (800d62c <SP100_LCD_BL_Handler+0x410>)
 800d39a:	0018      	movs	r0, r3
 800d39c:	f7ff fb74 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d3a0:	4ba3      	ldr	r3, [pc, #652]	; (800d630 <SP100_LCD_BL_Handler+0x414>)
 800d3a2:	0018      	movs	r0, r3
 800d3a4:	f7ff fb70 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d3a8:	4ba2      	ldr	r3, [pc, #648]	; (800d634 <SP100_LCD_BL_Handler+0x418>)
 800d3aa:	0018      	movs	r0, r3
 800d3ac:	f7ff fb34 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d3b0:	4ba1      	ldr	r3, [pc, #644]	; (800d638 <SP100_LCD_BL_Handler+0x41c>)
 800d3b2:	0018      	movs	r0, r3
 800d3b4:	f7ff fb30 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d3b8:	4ba0      	ldr	r3, [pc, #640]	; (800d63c <SP100_LCD_BL_Handler+0x420>)
 800d3ba:	0018      	movs	r0, r3
 800d3bc:	f7ff fb2c 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d3c0:	4b9f      	ldr	r3, [pc, #636]	; (800d640 <SP100_LCD_BL_Handler+0x424>)
 800d3c2:	0018      	movs	r0, r3
 800d3c4:	f7ff fb28 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d3c8:	4b9e      	ldr	r3, [pc, #632]	; (800d644 <SP100_LCD_BL_Handler+0x428>)
 800d3ca:	0018      	movs	r0, r3
 800d3cc:	f7ff fb24 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d3d0:	4b9d      	ldr	r3, [pc, #628]	; (800d648 <SP100_LCD_BL_Handler+0x42c>)
 800d3d2:	0018      	movs	r0, r3
 800d3d4:	f7ff fb20 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d3d8:	e1c2      	b.n	800d760 <SP100_LCD_BL_Handler+0x544>
 800d3da:	4b8b      	ldr	r3, [pc, #556]	; (800d608 <SP100_LCD_BL_Handler+0x3ec>)
 800d3dc:	0018      	movs	r0, r3
 800d3de:	f7ff fb53 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d3e2:	4b8a      	ldr	r3, [pc, #552]	; (800d60c <SP100_LCD_BL_Handler+0x3f0>)
 800d3e4:	0018      	movs	r0, r3
 800d3e6:	f7ff fb4f 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d3ea:	4b89      	ldr	r3, [pc, #548]	; (800d610 <SP100_LCD_BL_Handler+0x3f4>)
 800d3ec:	0018      	movs	r0, r3
 800d3ee:	f7ff fb4b 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d3f2:	4b88      	ldr	r3, [pc, #544]	; (800d614 <SP100_LCD_BL_Handler+0x3f8>)
 800d3f4:	0018      	movs	r0, r3
 800d3f6:	f7ff fb47 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d3fa:	4b87      	ldr	r3, [pc, #540]	; (800d618 <SP100_LCD_BL_Handler+0x3fc>)
 800d3fc:	0018      	movs	r0, r3
 800d3fe:	f7ff fb0b 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d402:	4b86      	ldr	r3, [pc, #536]	; (800d61c <SP100_LCD_BL_Handler+0x400>)
 800d404:	0018      	movs	r0, r3
 800d406:	f7ff fb07 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d40a:	4b85      	ldr	r3, [pc, #532]	; (800d620 <SP100_LCD_BL_Handler+0x404>)
 800d40c:	0018      	movs	r0, r3
 800d40e:	f7ff fb03 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d412:	4b84      	ldr	r3, [pc, #528]	; (800d624 <SP100_LCD_BL_Handler+0x408>)
 800d414:	0018      	movs	r0, r3
 800d416:	f7ff faff 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d41a:	4b83      	ldr	r3, [pc, #524]	; (800d628 <SP100_LCD_BL_Handler+0x40c>)
 800d41c:	0018      	movs	r0, r3
 800d41e:	f7ff fafb 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d422:	4b82      	ldr	r3, [pc, #520]	; (800d62c <SP100_LCD_BL_Handler+0x410>)
 800d424:	0018      	movs	r0, r3
 800d426:	f7ff fb2f 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d42a:	4b81      	ldr	r3, [pc, #516]	; (800d630 <SP100_LCD_BL_Handler+0x414>)
 800d42c:	0018      	movs	r0, r3
 800d42e:	f7ff fb2b 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d432:	4b80      	ldr	r3, [pc, #512]	; (800d634 <SP100_LCD_BL_Handler+0x418>)
 800d434:	0018      	movs	r0, r3
 800d436:	f7ff fb27 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d43a:	4b7f      	ldr	r3, [pc, #508]	; (800d638 <SP100_LCD_BL_Handler+0x41c>)
 800d43c:	0018      	movs	r0, r3
 800d43e:	f7ff faeb 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d442:	4b7e      	ldr	r3, [pc, #504]	; (800d63c <SP100_LCD_BL_Handler+0x420>)
 800d444:	0018      	movs	r0, r3
 800d446:	f7ff fae7 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d44a:	4b7d      	ldr	r3, [pc, #500]	; (800d640 <SP100_LCD_BL_Handler+0x424>)
 800d44c:	0018      	movs	r0, r3
 800d44e:	f7ff fae3 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d452:	4b7c      	ldr	r3, [pc, #496]	; (800d644 <SP100_LCD_BL_Handler+0x428>)
 800d454:	0018      	movs	r0, r3
 800d456:	f7ff fadf 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d45a:	4b7b      	ldr	r3, [pc, #492]	; (800d648 <SP100_LCD_BL_Handler+0x42c>)
 800d45c:	0018      	movs	r0, r3
 800d45e:	f7ff fadb 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d462:	e17d      	b.n	800d760 <SP100_LCD_BL_Handler+0x544>
 800d464:	4b68      	ldr	r3, [pc, #416]	; (800d608 <SP100_LCD_BL_Handler+0x3ec>)
 800d466:	0018      	movs	r0, r3
 800d468:	f7ff fb0e 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d46c:	4b67      	ldr	r3, [pc, #412]	; (800d60c <SP100_LCD_BL_Handler+0x3f0>)
 800d46e:	0018      	movs	r0, r3
 800d470:	f7ff fb0a 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d474:	4b66      	ldr	r3, [pc, #408]	; (800d610 <SP100_LCD_BL_Handler+0x3f4>)
 800d476:	0018      	movs	r0, r3
 800d478:	f7ff fb06 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d47c:	4b65      	ldr	r3, [pc, #404]	; (800d614 <SP100_LCD_BL_Handler+0x3f8>)
 800d47e:	0018      	movs	r0, r3
 800d480:	f7ff fb02 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d484:	4b64      	ldr	r3, [pc, #400]	; (800d618 <SP100_LCD_BL_Handler+0x3fc>)
 800d486:	0018      	movs	r0, r3
 800d488:	f7ff fafe 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d48c:	4b63      	ldr	r3, [pc, #396]	; (800d61c <SP100_LCD_BL_Handler+0x400>)
 800d48e:	0018      	movs	r0, r3
 800d490:	f7ff fac2 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d494:	4b62      	ldr	r3, [pc, #392]	; (800d620 <SP100_LCD_BL_Handler+0x404>)
 800d496:	0018      	movs	r0, r3
 800d498:	f7ff fabe 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d49c:	4b61      	ldr	r3, [pc, #388]	; (800d624 <SP100_LCD_BL_Handler+0x408>)
 800d49e:	0018      	movs	r0, r3
 800d4a0:	f7ff faba 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d4a4:	4b60      	ldr	r3, [pc, #384]	; (800d628 <SP100_LCD_BL_Handler+0x40c>)
 800d4a6:	0018      	movs	r0, r3
 800d4a8:	f7ff fab6 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d4ac:	4b5f      	ldr	r3, [pc, #380]	; (800d62c <SP100_LCD_BL_Handler+0x410>)
 800d4ae:	0018      	movs	r0, r3
 800d4b0:	f7ff faea 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d4b4:	4b5e      	ldr	r3, [pc, #376]	; (800d630 <SP100_LCD_BL_Handler+0x414>)
 800d4b6:	0018      	movs	r0, r3
 800d4b8:	f7ff fae6 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d4bc:	4b5d      	ldr	r3, [pc, #372]	; (800d634 <SP100_LCD_BL_Handler+0x418>)
 800d4be:	0018      	movs	r0, r3
 800d4c0:	f7ff fae2 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d4c4:	4b5c      	ldr	r3, [pc, #368]	; (800d638 <SP100_LCD_BL_Handler+0x41c>)
 800d4c6:	0018      	movs	r0, r3
 800d4c8:	f7ff fade 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d4cc:	4b5b      	ldr	r3, [pc, #364]	; (800d63c <SP100_LCD_BL_Handler+0x420>)
 800d4ce:	0018      	movs	r0, r3
 800d4d0:	f7ff faa2 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d4d4:	4b5a      	ldr	r3, [pc, #360]	; (800d640 <SP100_LCD_BL_Handler+0x424>)
 800d4d6:	0018      	movs	r0, r3
 800d4d8:	f7ff fa9e 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d4dc:	4b59      	ldr	r3, [pc, #356]	; (800d644 <SP100_LCD_BL_Handler+0x428>)
 800d4de:	0018      	movs	r0, r3
 800d4e0:	f7ff fa9a 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d4e4:	4b58      	ldr	r3, [pc, #352]	; (800d648 <SP100_LCD_BL_Handler+0x42c>)
 800d4e6:	0018      	movs	r0, r3
 800d4e8:	f7ff fa96 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d4ec:	e138      	b.n	800d760 <SP100_LCD_BL_Handler+0x544>
 800d4ee:	4b46      	ldr	r3, [pc, #280]	; (800d608 <SP100_LCD_BL_Handler+0x3ec>)
 800d4f0:	0018      	movs	r0, r3
 800d4f2:	f7ff fac9 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d4f6:	4b45      	ldr	r3, [pc, #276]	; (800d60c <SP100_LCD_BL_Handler+0x3f0>)
 800d4f8:	0018      	movs	r0, r3
 800d4fa:	f7ff fac5 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d4fe:	4b44      	ldr	r3, [pc, #272]	; (800d610 <SP100_LCD_BL_Handler+0x3f4>)
 800d500:	0018      	movs	r0, r3
 800d502:	f7ff fac1 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d506:	4b43      	ldr	r3, [pc, #268]	; (800d614 <SP100_LCD_BL_Handler+0x3f8>)
 800d508:	0018      	movs	r0, r3
 800d50a:	f7ff fabd 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d50e:	4b42      	ldr	r3, [pc, #264]	; (800d618 <SP100_LCD_BL_Handler+0x3fc>)
 800d510:	0018      	movs	r0, r3
 800d512:	f7ff fab9 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d516:	4b41      	ldr	r3, [pc, #260]	; (800d61c <SP100_LCD_BL_Handler+0x400>)
 800d518:	0018      	movs	r0, r3
 800d51a:	f7ff fab5 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d51e:	4b40      	ldr	r3, [pc, #256]	; (800d620 <SP100_LCD_BL_Handler+0x404>)
 800d520:	0018      	movs	r0, r3
 800d522:	f7ff fa79 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d526:	4b3f      	ldr	r3, [pc, #252]	; (800d624 <SP100_LCD_BL_Handler+0x408>)
 800d528:	0018      	movs	r0, r3
 800d52a:	f7ff fa75 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d52e:	4b3e      	ldr	r3, [pc, #248]	; (800d628 <SP100_LCD_BL_Handler+0x40c>)
 800d530:	0018      	movs	r0, r3
 800d532:	f7ff fa71 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d536:	4b3d      	ldr	r3, [pc, #244]	; (800d62c <SP100_LCD_BL_Handler+0x410>)
 800d538:	0018      	movs	r0, r3
 800d53a:	f7ff faa5 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d53e:	4b3c      	ldr	r3, [pc, #240]	; (800d630 <SP100_LCD_BL_Handler+0x414>)
 800d540:	0018      	movs	r0, r3
 800d542:	f7ff faa1 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d546:	4b3b      	ldr	r3, [pc, #236]	; (800d634 <SP100_LCD_BL_Handler+0x418>)
 800d548:	0018      	movs	r0, r3
 800d54a:	f7ff fa9d 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d54e:	4b3a      	ldr	r3, [pc, #232]	; (800d638 <SP100_LCD_BL_Handler+0x41c>)
 800d550:	0018      	movs	r0, r3
 800d552:	f7ff fa99 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d556:	4b39      	ldr	r3, [pc, #228]	; (800d63c <SP100_LCD_BL_Handler+0x420>)
 800d558:	0018      	movs	r0, r3
 800d55a:	f7ff fa95 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d55e:	4b38      	ldr	r3, [pc, #224]	; (800d640 <SP100_LCD_BL_Handler+0x424>)
 800d560:	0018      	movs	r0, r3
 800d562:	f7ff fa59 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d566:	4b37      	ldr	r3, [pc, #220]	; (800d644 <SP100_LCD_BL_Handler+0x428>)
 800d568:	0018      	movs	r0, r3
 800d56a:	f7ff fa55 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d56e:	4b36      	ldr	r3, [pc, #216]	; (800d648 <SP100_LCD_BL_Handler+0x42c>)
 800d570:	0018      	movs	r0, r3
 800d572:	f7ff fa51 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d576:	e0f3      	b.n	800d760 <SP100_LCD_BL_Handler+0x544>
 800d578:	4b23      	ldr	r3, [pc, #140]	; (800d608 <SP100_LCD_BL_Handler+0x3ec>)
 800d57a:	0018      	movs	r0, r3
 800d57c:	f7ff fa84 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d580:	4b22      	ldr	r3, [pc, #136]	; (800d60c <SP100_LCD_BL_Handler+0x3f0>)
 800d582:	0018      	movs	r0, r3
 800d584:	f7ff fa80 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d588:	4b21      	ldr	r3, [pc, #132]	; (800d610 <SP100_LCD_BL_Handler+0x3f4>)
 800d58a:	0018      	movs	r0, r3
 800d58c:	f7ff fa7c 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d590:	4b20      	ldr	r3, [pc, #128]	; (800d614 <SP100_LCD_BL_Handler+0x3f8>)
 800d592:	0018      	movs	r0, r3
 800d594:	f7ff fa78 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d598:	4b1f      	ldr	r3, [pc, #124]	; (800d618 <SP100_LCD_BL_Handler+0x3fc>)
 800d59a:	0018      	movs	r0, r3
 800d59c:	f7ff fa74 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d5a0:	4b1e      	ldr	r3, [pc, #120]	; (800d61c <SP100_LCD_BL_Handler+0x400>)
 800d5a2:	0018      	movs	r0, r3
 800d5a4:	f7ff fa70 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d5a8:	4b1d      	ldr	r3, [pc, #116]	; (800d620 <SP100_LCD_BL_Handler+0x404>)
 800d5aa:	0018      	movs	r0, r3
 800d5ac:	f7ff fa6c 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d5b0:	4b1c      	ldr	r3, [pc, #112]	; (800d624 <SP100_LCD_BL_Handler+0x408>)
 800d5b2:	0018      	movs	r0, r3
 800d5b4:	f7ff fa30 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d5b8:	4b1b      	ldr	r3, [pc, #108]	; (800d628 <SP100_LCD_BL_Handler+0x40c>)
 800d5ba:	0018      	movs	r0, r3
 800d5bc:	f7ff fa2c 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d5c0:	4b1a      	ldr	r3, [pc, #104]	; (800d62c <SP100_LCD_BL_Handler+0x410>)
 800d5c2:	0018      	movs	r0, r3
 800d5c4:	f7ff fa60 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d5c8:	4b19      	ldr	r3, [pc, #100]	; (800d630 <SP100_LCD_BL_Handler+0x414>)
 800d5ca:	0018      	movs	r0, r3
 800d5cc:	f7ff fa5c 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d5d0:	4b18      	ldr	r3, [pc, #96]	; (800d634 <SP100_LCD_BL_Handler+0x418>)
 800d5d2:	0018      	movs	r0, r3
 800d5d4:	f7ff fa58 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d5d8:	4b17      	ldr	r3, [pc, #92]	; (800d638 <SP100_LCD_BL_Handler+0x41c>)
 800d5da:	0018      	movs	r0, r3
 800d5dc:	f7ff fa54 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d5e0:	4b16      	ldr	r3, [pc, #88]	; (800d63c <SP100_LCD_BL_Handler+0x420>)
 800d5e2:	0018      	movs	r0, r3
 800d5e4:	f7ff fa50 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d5e8:	4b15      	ldr	r3, [pc, #84]	; (800d640 <SP100_LCD_BL_Handler+0x424>)
 800d5ea:	0018      	movs	r0, r3
 800d5ec:	f7ff fa4c 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d5f0:	4b14      	ldr	r3, [pc, #80]	; (800d644 <SP100_LCD_BL_Handler+0x428>)
 800d5f2:	0018      	movs	r0, r3
 800d5f4:	f7ff fa10 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d5f8:	4b13      	ldr	r3, [pc, #76]	; (800d648 <SP100_LCD_BL_Handler+0x42c>)
 800d5fa:	0018      	movs	r0, r3
 800d5fc:	f7ff fa0c 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d600:	e0ae      	b.n	800d760 <SP100_LCD_BL_Handler+0x544>
 800d602:	46c0      	nop			; (mov r8, r8)
 800d604:	08014ff8 	.word	0x08014ff8
 800d608:	08014ee8 	.word	0x08014ee8
 800d60c:	08014eec 	.word	0x08014eec
 800d610:	08014ef0 	.word	0x08014ef0
 800d614:	08014ef4 	.word	0x08014ef4
 800d618:	08014ef8 	.word	0x08014ef8
 800d61c:	08014efc 	.word	0x08014efc
 800d620:	08014f00 	.word	0x08014f00
 800d624:	08014f04 	.word	0x08014f04
 800d628:	08014f08 	.word	0x08014f08
 800d62c:	08014f0c 	.word	0x08014f0c
 800d630:	08014f10 	.word	0x08014f10
 800d634:	08014f14 	.word	0x08014f14
 800d638:	08014f18 	.word	0x08014f18
 800d63c:	08014f1c 	.word	0x08014f1c
 800d640:	08014f20 	.word	0x08014f20
 800d644:	08014f24 	.word	0x08014f24
 800d648:	08014f28 	.word	0x08014f28
 800d64c:	4b46      	ldr	r3, [pc, #280]	; (800d768 <SP100_LCD_BL_Handler+0x54c>)
 800d64e:	0018      	movs	r0, r3
 800d650:	f7ff fa1a 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d654:	4b45      	ldr	r3, [pc, #276]	; (800d76c <SP100_LCD_BL_Handler+0x550>)
 800d656:	0018      	movs	r0, r3
 800d658:	f7ff fa16 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d65c:	4b44      	ldr	r3, [pc, #272]	; (800d770 <SP100_LCD_BL_Handler+0x554>)
 800d65e:	0018      	movs	r0, r3
 800d660:	f7ff fa12 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d664:	4b43      	ldr	r3, [pc, #268]	; (800d774 <SP100_LCD_BL_Handler+0x558>)
 800d666:	0018      	movs	r0, r3
 800d668:	f7ff fa0e 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d66c:	4b42      	ldr	r3, [pc, #264]	; (800d778 <SP100_LCD_BL_Handler+0x55c>)
 800d66e:	0018      	movs	r0, r3
 800d670:	f7ff fa0a 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d674:	4b41      	ldr	r3, [pc, #260]	; (800d77c <SP100_LCD_BL_Handler+0x560>)
 800d676:	0018      	movs	r0, r3
 800d678:	f7ff fa06 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d67c:	4b40      	ldr	r3, [pc, #256]	; (800d780 <SP100_LCD_BL_Handler+0x564>)
 800d67e:	0018      	movs	r0, r3
 800d680:	f7ff fa02 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d684:	4b3f      	ldr	r3, [pc, #252]	; (800d784 <SP100_LCD_BL_Handler+0x568>)
 800d686:	0018      	movs	r0, r3
 800d688:	f7ff f9fe 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d68c:	4b3e      	ldr	r3, [pc, #248]	; (800d788 <SP100_LCD_BL_Handler+0x56c>)
 800d68e:	0018      	movs	r0, r3
 800d690:	f7ff f9c2 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d694:	4b3d      	ldr	r3, [pc, #244]	; (800d78c <SP100_LCD_BL_Handler+0x570>)
 800d696:	0018      	movs	r0, r3
 800d698:	f7ff f9f6 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d69c:	4b3c      	ldr	r3, [pc, #240]	; (800d790 <SP100_LCD_BL_Handler+0x574>)
 800d69e:	0018      	movs	r0, r3
 800d6a0:	f7ff f9f2 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d6a4:	4b3b      	ldr	r3, [pc, #236]	; (800d794 <SP100_LCD_BL_Handler+0x578>)
 800d6a6:	0018      	movs	r0, r3
 800d6a8:	f7ff f9ee 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d6ac:	4b3a      	ldr	r3, [pc, #232]	; (800d798 <SP100_LCD_BL_Handler+0x57c>)
 800d6ae:	0018      	movs	r0, r3
 800d6b0:	f7ff f9ea 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d6b4:	4b39      	ldr	r3, [pc, #228]	; (800d79c <SP100_LCD_BL_Handler+0x580>)
 800d6b6:	0018      	movs	r0, r3
 800d6b8:	f7ff f9e6 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d6bc:	4b38      	ldr	r3, [pc, #224]	; (800d7a0 <SP100_LCD_BL_Handler+0x584>)
 800d6be:	0018      	movs	r0, r3
 800d6c0:	f7ff f9e2 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d6c4:	4b37      	ldr	r3, [pc, #220]	; (800d7a4 <SP100_LCD_BL_Handler+0x588>)
 800d6c6:	0018      	movs	r0, r3
 800d6c8:	f7ff f9de 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d6cc:	4b36      	ldr	r3, [pc, #216]	; (800d7a8 <SP100_LCD_BL_Handler+0x58c>)
 800d6ce:	0018      	movs	r0, r3
 800d6d0:	f7ff f9a2 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d6d4:	e044      	b.n	800d760 <SP100_LCD_BL_Handler+0x544>
 800d6d6:	4b24      	ldr	r3, [pc, #144]	; (800d768 <SP100_LCD_BL_Handler+0x54c>)
 800d6d8:	0018      	movs	r0, r3
 800d6da:	f7ff f9d5 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d6de:	4b23      	ldr	r3, [pc, #140]	; (800d76c <SP100_LCD_BL_Handler+0x550>)
 800d6e0:	0018      	movs	r0, r3
 800d6e2:	f7ff f9d1 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d6e6:	4b22      	ldr	r3, [pc, #136]	; (800d770 <SP100_LCD_BL_Handler+0x554>)
 800d6e8:	0018      	movs	r0, r3
 800d6ea:	f7ff f9cd 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d6ee:	4b21      	ldr	r3, [pc, #132]	; (800d774 <SP100_LCD_BL_Handler+0x558>)
 800d6f0:	0018      	movs	r0, r3
 800d6f2:	f7ff f9c9 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d6f6:	4b20      	ldr	r3, [pc, #128]	; (800d778 <SP100_LCD_BL_Handler+0x55c>)
 800d6f8:	0018      	movs	r0, r3
 800d6fa:	f7ff f9c5 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d6fe:	4b1f      	ldr	r3, [pc, #124]	; (800d77c <SP100_LCD_BL_Handler+0x560>)
 800d700:	0018      	movs	r0, r3
 800d702:	f7ff f9c1 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d706:	4b1e      	ldr	r3, [pc, #120]	; (800d780 <SP100_LCD_BL_Handler+0x564>)
 800d708:	0018      	movs	r0, r3
 800d70a:	f7ff f9bd 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d70e:	4b1d      	ldr	r3, [pc, #116]	; (800d784 <SP100_LCD_BL_Handler+0x568>)
 800d710:	0018      	movs	r0, r3
 800d712:	f7ff f9b9 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d716:	4b1c      	ldr	r3, [pc, #112]	; (800d788 <SP100_LCD_BL_Handler+0x56c>)
 800d718:	0018      	movs	r0, r3
 800d71a:	f7ff f9b5 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d71e:	4b1b      	ldr	r3, [pc, #108]	; (800d78c <SP100_LCD_BL_Handler+0x570>)
 800d720:	0018      	movs	r0, r3
 800d722:	f7ff f9b1 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d726:	4b1a      	ldr	r3, [pc, #104]	; (800d790 <SP100_LCD_BL_Handler+0x574>)
 800d728:	0018      	movs	r0, r3
 800d72a:	f7ff f9ad 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d72e:	4b19      	ldr	r3, [pc, #100]	; (800d794 <SP100_LCD_BL_Handler+0x578>)
 800d730:	0018      	movs	r0, r3
 800d732:	f7ff f9a9 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d736:	4b18      	ldr	r3, [pc, #96]	; (800d798 <SP100_LCD_BL_Handler+0x57c>)
 800d738:	0018      	movs	r0, r3
 800d73a:	f7ff f9a5 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d73e:	4b17      	ldr	r3, [pc, #92]	; (800d79c <SP100_LCD_BL_Handler+0x580>)
 800d740:	0018      	movs	r0, r3
 800d742:	f7ff f9a1 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d746:	4b16      	ldr	r3, [pc, #88]	; (800d7a0 <SP100_LCD_BL_Handler+0x584>)
 800d748:	0018      	movs	r0, r3
 800d74a:	f7ff f99d 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d74e:	4b15      	ldr	r3, [pc, #84]	; (800d7a4 <SP100_LCD_BL_Handler+0x588>)
 800d750:	0018      	movs	r0, r3
 800d752:	f7ff f999 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d756:	4b14      	ldr	r3, [pc, #80]	; (800d7a8 <SP100_LCD_BL_Handler+0x58c>)
 800d758:	0018      	movs	r0, r3
 800d75a:	f7ff f995 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d75e:	46c0      	nop			; (mov r8, r8)
 800d760:	46c0      	nop			; (mov r8, r8)
 800d762:	46bd      	mov	sp, r7
 800d764:	b002      	add	sp, #8
 800d766:	bd80      	pop	{r7, pc}
 800d768:	08014ee8 	.word	0x08014ee8
 800d76c:	08014eec 	.word	0x08014eec
 800d770:	08014ef0 	.word	0x08014ef0
 800d774:	08014ef4 	.word	0x08014ef4
 800d778:	08014ef8 	.word	0x08014ef8
 800d77c:	08014efc 	.word	0x08014efc
 800d780:	08014f00 	.word	0x08014f00
 800d784:	08014f04 	.word	0x08014f04
 800d788:	08014f08 	.word	0x08014f08
 800d78c:	08014f0c 	.word	0x08014f0c
 800d790:	08014f10 	.word	0x08014f10
 800d794:	08014f14 	.word	0x08014f14
 800d798:	08014f18 	.word	0x08014f18
 800d79c:	08014f1c 	.word	0x08014f1c
 800d7a0:	08014f20 	.word	0x08014f20
 800d7a4:	08014f24 	.word	0x08014f24
 800d7a8:	08014f28 	.word	0x08014f28

0800d7ac <SP100_LCD_SP_Segment>:
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b082      	sub	sp, #8
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	0002      	movs	r2, r0
 800d7b4:	6039      	str	r1, [r7, #0]
 800d7b6:	1dfb      	adds	r3, r7, #7
 800d7b8:	701a      	strb	r2, [r3, #0]
 800d7ba:	683b      	ldr	r3, [r7, #0]
 800d7bc:	2b03      	cmp	r3, #3
 800d7be:	d100      	bne.n	800d7c2 <SP100_LCD_SP_Segment+0x16>
 800d7c0:	e321      	b.n	800de06 <SP100_LCD_SP_Segment+0x65a>
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	2b03      	cmp	r3, #3
 800d7c6:	dd01      	ble.n	800d7cc <SP100_LCD_SP_Segment+0x20>
 800d7c8:	f000 fc92 	bl	800e0f0 <SP100_LCD_SP_Segment+0x944>
 800d7cc:	683b      	ldr	r3, [r7, #0]
 800d7ce:	2b02      	cmp	r3, #2
 800d7d0:	d100      	bne.n	800d7d4 <SP100_LCD_SP_Segment+0x28>
 800d7d2:	e2fe      	b.n	800ddd2 <SP100_LCD_SP_Segment+0x626>
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	2b02      	cmp	r3, #2
 800d7d8:	dd01      	ble.n	800d7de <SP100_LCD_SP_Segment+0x32>
 800d7da:	f000 fc89 	bl	800e0f0 <SP100_LCD_SP_Segment+0x944>
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d005      	beq.n	800d7f0 <SP100_LCD_SP_Segment+0x44>
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	2b01      	cmp	r3, #1
 800d7e8:	d100      	bne.n	800d7ec <SP100_LCD_SP_Segment+0x40>
 800d7ea:	e16a      	b.n	800dac2 <SP100_LCD_SP_Segment+0x316>
 800d7ec:	f000 fc80 	bl	800e0f0 <SP100_LCD_SP_Segment+0x944>
 800d7f0:	1dfb      	adds	r3, r7, #7
 800d7f2:	781b      	ldrb	r3, [r3, #0]
 800d7f4:	3b30      	subs	r3, #48	; 0x30
 800d7f6:	2b1c      	cmp	r3, #28
 800d7f8:	d901      	bls.n	800d7fe <SP100_LCD_SP_Segment+0x52>
 800d7fa:	f000 fc72 	bl	800e0e2 <SP100_LCD_SP_Segment+0x936>
 800d7fe:	009a      	lsls	r2, r3, #2
 800d800:	4bef      	ldr	r3, [pc, #956]	; (800dbc0 <SP100_LCD_SP_Segment+0x414>)
 800d802:	18d3      	adds	r3, r2, r3
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	469f      	mov	pc, r3
 800d808:	4bee      	ldr	r3, [pc, #952]	; (800dbc4 <SP100_LCD_SP_Segment+0x418>)
 800d80a:	0018      	movs	r0, r3
 800d80c:	f7ff f93c 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d810:	4bed      	ldr	r3, [pc, #948]	; (800dbc8 <SP100_LCD_SP_Segment+0x41c>)
 800d812:	0018      	movs	r0, r3
 800d814:	f7ff f938 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d818:	4bec      	ldr	r3, [pc, #944]	; (800dbcc <SP100_LCD_SP_Segment+0x420>)
 800d81a:	0018      	movs	r0, r3
 800d81c:	f7ff f934 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d820:	4beb      	ldr	r3, [pc, #940]	; (800dbd0 <SP100_LCD_SP_Segment+0x424>)
 800d822:	0018      	movs	r0, r3
 800d824:	f7ff f930 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d828:	4bea      	ldr	r3, [pc, #936]	; (800dbd4 <SP100_LCD_SP_Segment+0x428>)
 800d82a:	0018      	movs	r0, r3
 800d82c:	f7ff f92c 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d830:	4be9      	ldr	r3, [pc, #932]	; (800dbd8 <SP100_LCD_SP_Segment+0x42c>)
 800d832:	0018      	movs	r0, r3
 800d834:	f7ff f928 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d838:	4be8      	ldr	r3, [pc, #928]	; (800dbdc <SP100_LCD_SP_Segment+0x430>)
 800d83a:	0018      	movs	r0, r3
 800d83c:	f7ff f8ec 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d840:	e13e      	b.n	800dac0 <SP100_LCD_SP_Segment+0x314>
 800d842:	4be0      	ldr	r3, [pc, #896]	; (800dbc4 <SP100_LCD_SP_Segment+0x418>)
 800d844:	0018      	movs	r0, r3
 800d846:	f7ff f8e7 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d84a:	4bdf      	ldr	r3, [pc, #892]	; (800dbc8 <SP100_LCD_SP_Segment+0x41c>)
 800d84c:	0018      	movs	r0, r3
 800d84e:	f7ff f91b 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d852:	4bde      	ldr	r3, [pc, #888]	; (800dbcc <SP100_LCD_SP_Segment+0x420>)
 800d854:	0018      	movs	r0, r3
 800d856:	f7ff f917 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d85a:	4bdd      	ldr	r3, [pc, #884]	; (800dbd0 <SP100_LCD_SP_Segment+0x424>)
 800d85c:	0018      	movs	r0, r3
 800d85e:	f7ff f8db 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d862:	4bdc      	ldr	r3, [pc, #880]	; (800dbd4 <SP100_LCD_SP_Segment+0x428>)
 800d864:	0018      	movs	r0, r3
 800d866:	f7ff f8d7 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d86a:	4bdb      	ldr	r3, [pc, #876]	; (800dbd8 <SP100_LCD_SP_Segment+0x42c>)
 800d86c:	0018      	movs	r0, r3
 800d86e:	f7ff f8d3 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d872:	4bda      	ldr	r3, [pc, #872]	; (800dbdc <SP100_LCD_SP_Segment+0x430>)
 800d874:	0018      	movs	r0, r3
 800d876:	f7ff f8cf 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d87a:	e121      	b.n	800dac0 <SP100_LCD_SP_Segment+0x314>
 800d87c:	4bd1      	ldr	r3, [pc, #836]	; (800dbc4 <SP100_LCD_SP_Segment+0x418>)
 800d87e:	0018      	movs	r0, r3
 800d880:	f7ff f902 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d884:	4bd0      	ldr	r3, [pc, #832]	; (800dbc8 <SP100_LCD_SP_Segment+0x41c>)
 800d886:	0018      	movs	r0, r3
 800d888:	f7ff f8fe 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d88c:	4bcf      	ldr	r3, [pc, #828]	; (800dbcc <SP100_LCD_SP_Segment+0x420>)
 800d88e:	0018      	movs	r0, r3
 800d890:	f7ff f8c2 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d894:	4bce      	ldr	r3, [pc, #824]	; (800dbd0 <SP100_LCD_SP_Segment+0x424>)
 800d896:	0018      	movs	r0, r3
 800d898:	f7ff f8f6 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d89c:	4bcd      	ldr	r3, [pc, #820]	; (800dbd4 <SP100_LCD_SP_Segment+0x428>)
 800d89e:	0018      	movs	r0, r3
 800d8a0:	f7ff f8f2 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d8a4:	4bcc      	ldr	r3, [pc, #816]	; (800dbd8 <SP100_LCD_SP_Segment+0x42c>)
 800d8a6:	0018      	movs	r0, r3
 800d8a8:	f7ff f8b6 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d8ac:	4bcb      	ldr	r3, [pc, #812]	; (800dbdc <SP100_LCD_SP_Segment+0x430>)
 800d8ae:	0018      	movs	r0, r3
 800d8b0:	f7ff f8ea 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d8b4:	e104      	b.n	800dac0 <SP100_LCD_SP_Segment+0x314>
 800d8b6:	4bc3      	ldr	r3, [pc, #780]	; (800dbc4 <SP100_LCD_SP_Segment+0x418>)
 800d8b8:	0018      	movs	r0, r3
 800d8ba:	f7ff f8e5 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d8be:	4bc2      	ldr	r3, [pc, #776]	; (800dbc8 <SP100_LCD_SP_Segment+0x41c>)
 800d8c0:	0018      	movs	r0, r3
 800d8c2:	f7ff f8e1 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d8c6:	4bc1      	ldr	r3, [pc, #772]	; (800dbcc <SP100_LCD_SP_Segment+0x420>)
 800d8c8:	0018      	movs	r0, r3
 800d8ca:	f7ff f8dd 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d8ce:	4bc0      	ldr	r3, [pc, #768]	; (800dbd0 <SP100_LCD_SP_Segment+0x424>)
 800d8d0:	0018      	movs	r0, r3
 800d8d2:	f7ff f8d9 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d8d6:	4bbf      	ldr	r3, [pc, #764]	; (800dbd4 <SP100_LCD_SP_Segment+0x428>)
 800d8d8:	0018      	movs	r0, r3
 800d8da:	f7ff f89d 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d8de:	4bbe      	ldr	r3, [pc, #760]	; (800dbd8 <SP100_LCD_SP_Segment+0x42c>)
 800d8e0:	0018      	movs	r0, r3
 800d8e2:	f7ff f899 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d8e6:	4bbd      	ldr	r3, [pc, #756]	; (800dbdc <SP100_LCD_SP_Segment+0x430>)
 800d8e8:	0018      	movs	r0, r3
 800d8ea:	f7ff f8cd 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d8ee:	e0e7      	b.n	800dac0 <SP100_LCD_SP_Segment+0x314>
 800d8f0:	4bb4      	ldr	r3, [pc, #720]	; (800dbc4 <SP100_LCD_SP_Segment+0x418>)
 800d8f2:	0018      	movs	r0, r3
 800d8f4:	f7ff f890 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d8f8:	4bb3      	ldr	r3, [pc, #716]	; (800dbc8 <SP100_LCD_SP_Segment+0x41c>)
 800d8fa:	0018      	movs	r0, r3
 800d8fc:	f7ff f8c4 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d900:	4bb2      	ldr	r3, [pc, #712]	; (800dbcc <SP100_LCD_SP_Segment+0x420>)
 800d902:	0018      	movs	r0, r3
 800d904:	f7ff f8c0 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d908:	4bb1      	ldr	r3, [pc, #708]	; (800dbd0 <SP100_LCD_SP_Segment+0x424>)
 800d90a:	0018      	movs	r0, r3
 800d90c:	f7ff f884 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d910:	4bb0      	ldr	r3, [pc, #704]	; (800dbd4 <SP100_LCD_SP_Segment+0x428>)
 800d912:	0018      	movs	r0, r3
 800d914:	f7ff f880 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d918:	4baf      	ldr	r3, [pc, #700]	; (800dbd8 <SP100_LCD_SP_Segment+0x42c>)
 800d91a:	0018      	movs	r0, r3
 800d91c:	f7ff f8b4 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d920:	4bae      	ldr	r3, [pc, #696]	; (800dbdc <SP100_LCD_SP_Segment+0x430>)
 800d922:	0018      	movs	r0, r3
 800d924:	f7ff f8b0 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d928:	e0ca      	b.n	800dac0 <SP100_LCD_SP_Segment+0x314>
 800d92a:	4ba6      	ldr	r3, [pc, #664]	; (800dbc4 <SP100_LCD_SP_Segment+0x418>)
 800d92c:	0018      	movs	r0, r3
 800d92e:	f7ff f8ab 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d932:	4ba5      	ldr	r3, [pc, #660]	; (800dbc8 <SP100_LCD_SP_Segment+0x41c>)
 800d934:	0018      	movs	r0, r3
 800d936:	f7ff f86f 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d93a:	4ba4      	ldr	r3, [pc, #656]	; (800dbcc <SP100_LCD_SP_Segment+0x420>)
 800d93c:	0018      	movs	r0, r3
 800d93e:	f7ff f8a3 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d942:	4ba3      	ldr	r3, [pc, #652]	; (800dbd0 <SP100_LCD_SP_Segment+0x424>)
 800d944:	0018      	movs	r0, r3
 800d946:	f7ff f89f 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d94a:	4ba2      	ldr	r3, [pc, #648]	; (800dbd4 <SP100_LCD_SP_Segment+0x428>)
 800d94c:	0018      	movs	r0, r3
 800d94e:	f7ff f863 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d952:	4ba1      	ldr	r3, [pc, #644]	; (800dbd8 <SP100_LCD_SP_Segment+0x42c>)
 800d954:	0018      	movs	r0, r3
 800d956:	f7ff f897 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d95a:	4ba0      	ldr	r3, [pc, #640]	; (800dbdc <SP100_LCD_SP_Segment+0x430>)
 800d95c:	0018      	movs	r0, r3
 800d95e:	f7ff f893 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d962:	e0ad      	b.n	800dac0 <SP100_LCD_SP_Segment+0x314>
 800d964:	4b97      	ldr	r3, [pc, #604]	; (800dbc4 <SP100_LCD_SP_Segment+0x418>)
 800d966:	0018      	movs	r0, r3
 800d968:	f7ff f88e 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d96c:	4b96      	ldr	r3, [pc, #600]	; (800dbc8 <SP100_LCD_SP_Segment+0x41c>)
 800d96e:	0018      	movs	r0, r3
 800d970:	f7ff f852 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d974:	4b95      	ldr	r3, [pc, #596]	; (800dbcc <SP100_LCD_SP_Segment+0x420>)
 800d976:	0018      	movs	r0, r3
 800d978:	f7ff f886 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d97c:	4b94      	ldr	r3, [pc, #592]	; (800dbd0 <SP100_LCD_SP_Segment+0x424>)
 800d97e:	0018      	movs	r0, r3
 800d980:	f7ff f882 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d984:	4b93      	ldr	r3, [pc, #588]	; (800dbd4 <SP100_LCD_SP_Segment+0x428>)
 800d986:	0018      	movs	r0, r3
 800d988:	f7ff f87e 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d98c:	4b92      	ldr	r3, [pc, #584]	; (800dbd8 <SP100_LCD_SP_Segment+0x42c>)
 800d98e:	0018      	movs	r0, r3
 800d990:	f7ff f87a 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d994:	4b91      	ldr	r3, [pc, #580]	; (800dbdc <SP100_LCD_SP_Segment+0x430>)
 800d996:	0018      	movs	r0, r3
 800d998:	f7ff f876 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d99c:	e090      	b.n	800dac0 <SP100_LCD_SP_Segment+0x314>
 800d99e:	4b89      	ldr	r3, [pc, #548]	; (800dbc4 <SP100_LCD_SP_Segment+0x418>)
 800d9a0:	0018      	movs	r0, r3
 800d9a2:	f7ff f871 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d9a6:	4b88      	ldr	r3, [pc, #544]	; (800dbc8 <SP100_LCD_SP_Segment+0x41c>)
 800d9a8:	0018      	movs	r0, r3
 800d9aa:	f7ff f86d 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d9ae:	4b87      	ldr	r3, [pc, #540]	; (800dbcc <SP100_LCD_SP_Segment+0x420>)
 800d9b0:	0018      	movs	r0, r3
 800d9b2:	f7ff f869 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d9b6:	4b86      	ldr	r3, [pc, #536]	; (800dbd0 <SP100_LCD_SP_Segment+0x424>)
 800d9b8:	0018      	movs	r0, r3
 800d9ba:	f7ff f82d 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d9be:	4b85      	ldr	r3, [pc, #532]	; (800dbd4 <SP100_LCD_SP_Segment+0x428>)
 800d9c0:	0018      	movs	r0, r3
 800d9c2:	f7ff f829 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d9c6:	4b84      	ldr	r3, [pc, #528]	; (800dbd8 <SP100_LCD_SP_Segment+0x42c>)
 800d9c8:	0018      	movs	r0, r3
 800d9ca:	f7ff f825 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d9ce:	4b83      	ldr	r3, [pc, #524]	; (800dbdc <SP100_LCD_SP_Segment+0x430>)
 800d9d0:	0018      	movs	r0, r3
 800d9d2:	f7ff f821 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800d9d6:	e073      	b.n	800dac0 <SP100_LCD_SP_Segment+0x314>
 800d9d8:	4b7a      	ldr	r3, [pc, #488]	; (800dbc4 <SP100_LCD_SP_Segment+0x418>)
 800d9da:	0018      	movs	r0, r3
 800d9dc:	f7ff f854 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d9e0:	4b79      	ldr	r3, [pc, #484]	; (800dbc8 <SP100_LCD_SP_Segment+0x41c>)
 800d9e2:	0018      	movs	r0, r3
 800d9e4:	f7ff f850 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d9e8:	4b78      	ldr	r3, [pc, #480]	; (800dbcc <SP100_LCD_SP_Segment+0x420>)
 800d9ea:	0018      	movs	r0, r3
 800d9ec:	f7ff f84c 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d9f0:	4b77      	ldr	r3, [pc, #476]	; (800dbd0 <SP100_LCD_SP_Segment+0x424>)
 800d9f2:	0018      	movs	r0, r3
 800d9f4:	f7ff f848 	bl	800ca88 <SP100_LCD_SEG_ON>
 800d9f8:	4b76      	ldr	r3, [pc, #472]	; (800dbd4 <SP100_LCD_SP_Segment+0x428>)
 800d9fa:	0018      	movs	r0, r3
 800d9fc:	f7ff f844 	bl	800ca88 <SP100_LCD_SEG_ON>
 800da00:	4b75      	ldr	r3, [pc, #468]	; (800dbd8 <SP100_LCD_SP_Segment+0x42c>)
 800da02:	0018      	movs	r0, r3
 800da04:	f7ff f840 	bl	800ca88 <SP100_LCD_SEG_ON>
 800da08:	4b74      	ldr	r3, [pc, #464]	; (800dbdc <SP100_LCD_SP_Segment+0x430>)
 800da0a:	0018      	movs	r0, r3
 800da0c:	f7ff f83c 	bl	800ca88 <SP100_LCD_SEG_ON>
 800da10:	e056      	b.n	800dac0 <SP100_LCD_SP_Segment+0x314>
 800da12:	4b6c      	ldr	r3, [pc, #432]	; (800dbc4 <SP100_LCD_SP_Segment+0x418>)
 800da14:	0018      	movs	r0, r3
 800da16:	f7ff f837 	bl	800ca88 <SP100_LCD_SEG_ON>
 800da1a:	4b6b      	ldr	r3, [pc, #428]	; (800dbc8 <SP100_LCD_SP_Segment+0x41c>)
 800da1c:	0018      	movs	r0, r3
 800da1e:	f7ff f833 	bl	800ca88 <SP100_LCD_SEG_ON>
 800da22:	4b6a      	ldr	r3, [pc, #424]	; (800dbcc <SP100_LCD_SP_Segment+0x420>)
 800da24:	0018      	movs	r0, r3
 800da26:	f7ff f82f 	bl	800ca88 <SP100_LCD_SEG_ON>
 800da2a:	4b69      	ldr	r3, [pc, #420]	; (800dbd0 <SP100_LCD_SP_Segment+0x424>)
 800da2c:	0018      	movs	r0, r3
 800da2e:	f7ff f82b 	bl	800ca88 <SP100_LCD_SEG_ON>
 800da32:	4b68      	ldr	r3, [pc, #416]	; (800dbd4 <SP100_LCD_SP_Segment+0x428>)
 800da34:	0018      	movs	r0, r3
 800da36:	f7fe ffef 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800da3a:	4b67      	ldr	r3, [pc, #412]	; (800dbd8 <SP100_LCD_SP_Segment+0x42c>)
 800da3c:	0018      	movs	r0, r3
 800da3e:	f7ff f823 	bl	800ca88 <SP100_LCD_SEG_ON>
 800da42:	4b66      	ldr	r3, [pc, #408]	; (800dbdc <SP100_LCD_SP_Segment+0x430>)
 800da44:	0018      	movs	r0, r3
 800da46:	f7ff f81f 	bl	800ca88 <SP100_LCD_SEG_ON>
 800da4a:	e039      	b.n	800dac0 <SP100_LCD_SP_Segment+0x314>
 800da4c:	4b5d      	ldr	r3, [pc, #372]	; (800dbc4 <SP100_LCD_SP_Segment+0x418>)
 800da4e:	0018      	movs	r0, r3
 800da50:	f7fe ffe2 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800da54:	4b5c      	ldr	r3, [pc, #368]	; (800dbc8 <SP100_LCD_SP_Segment+0x41c>)
 800da56:	0018      	movs	r0, r3
 800da58:	f7fe ffde 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800da5c:	4b5b      	ldr	r3, [pc, #364]	; (800dbcc <SP100_LCD_SP_Segment+0x420>)
 800da5e:	0018      	movs	r0, r3
 800da60:	f7fe ffda 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800da64:	4b5a      	ldr	r3, [pc, #360]	; (800dbd0 <SP100_LCD_SP_Segment+0x424>)
 800da66:	0018      	movs	r0, r3
 800da68:	f7ff f80e 	bl	800ca88 <SP100_LCD_SEG_ON>
 800da6c:	4b59      	ldr	r3, [pc, #356]	; (800dbd4 <SP100_LCD_SP_Segment+0x428>)
 800da6e:	0018      	movs	r0, r3
 800da70:	f7ff f80a 	bl	800ca88 <SP100_LCD_SEG_ON>
 800da74:	4b58      	ldr	r3, [pc, #352]	; (800dbd8 <SP100_LCD_SP_Segment+0x42c>)
 800da76:	0018      	movs	r0, r3
 800da78:	f7ff f806 	bl	800ca88 <SP100_LCD_SEG_ON>
 800da7c:	4b57      	ldr	r3, [pc, #348]	; (800dbdc <SP100_LCD_SP_Segment+0x430>)
 800da7e:	0018      	movs	r0, r3
 800da80:	f7fe ffca 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800da84:	e01c      	b.n	800dac0 <SP100_LCD_SP_Segment+0x314>
 800da86:	4b4f      	ldr	r3, [pc, #316]	; (800dbc4 <SP100_LCD_SP_Segment+0x418>)
 800da88:	0018      	movs	r0, r3
 800da8a:	f7fe ffc5 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800da8e:	4b4e      	ldr	r3, [pc, #312]	; (800dbc8 <SP100_LCD_SP_Segment+0x41c>)
 800da90:	0018      	movs	r0, r3
 800da92:	f7fe fff9 	bl	800ca88 <SP100_LCD_SEG_ON>
 800da96:	4b4d      	ldr	r3, [pc, #308]	; (800dbcc <SP100_LCD_SP_Segment+0x420>)
 800da98:	0018      	movs	r0, r3
 800da9a:	f7fe fff5 	bl	800ca88 <SP100_LCD_SEG_ON>
 800da9e:	4b4c      	ldr	r3, [pc, #304]	; (800dbd0 <SP100_LCD_SP_Segment+0x424>)
 800daa0:	0018      	movs	r0, r3
 800daa2:	f7fe ffb9 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800daa6:	4b4b      	ldr	r3, [pc, #300]	; (800dbd4 <SP100_LCD_SP_Segment+0x428>)
 800daa8:	0018      	movs	r0, r3
 800daaa:	f7fe ffed 	bl	800ca88 <SP100_LCD_SEG_ON>
 800daae:	4b4a      	ldr	r3, [pc, #296]	; (800dbd8 <SP100_LCD_SP_Segment+0x42c>)
 800dab0:	0018      	movs	r0, r3
 800dab2:	f7fe ffe9 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dab6:	4b49      	ldr	r3, [pc, #292]	; (800dbdc <SP100_LCD_SP_Segment+0x430>)
 800dab8:	0018      	movs	r0, r3
 800daba:	f7fe ffe5 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dabe:	46c0      	nop			; (mov r8, r8)
 800dac0:	e30f      	b.n	800e0e2 <SP100_LCD_SP_Segment+0x936>
 800dac2:	1dfb      	adds	r3, r7, #7
 800dac4:	781b      	ldrb	r3, [r3, #0]
 800dac6:	3b30      	subs	r3, #48	; 0x30
 800dac8:	2b1f      	cmp	r3, #31
 800daca:	d900      	bls.n	800dace <SP100_LCD_SP_Segment+0x322>
 800dacc:	e30b      	b.n	800e0e6 <SP100_LCD_SP_Segment+0x93a>
 800dace:	009a      	lsls	r2, r3, #2
 800dad0:	4b43      	ldr	r3, [pc, #268]	; (800dbe0 <SP100_LCD_SP_Segment+0x434>)
 800dad2:	18d3      	adds	r3, r2, r3
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	469f      	mov	pc, r3
 800dad8:	4b42      	ldr	r3, [pc, #264]	; (800dbe4 <SP100_LCD_SP_Segment+0x438>)
 800dada:	0018      	movs	r0, r3
 800dadc:	f7fe ffd4 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dae0:	4b41      	ldr	r3, [pc, #260]	; (800dbe8 <SP100_LCD_SP_Segment+0x43c>)
 800dae2:	0018      	movs	r0, r3
 800dae4:	f7fe ffd0 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dae8:	4b40      	ldr	r3, [pc, #256]	; (800dbec <SP100_LCD_SP_Segment+0x440>)
 800daea:	0018      	movs	r0, r3
 800daec:	f7fe ffcc 	bl	800ca88 <SP100_LCD_SEG_ON>
 800daf0:	4b3f      	ldr	r3, [pc, #252]	; (800dbf0 <SP100_LCD_SP_Segment+0x444>)
 800daf2:	0018      	movs	r0, r3
 800daf4:	f7fe ffc8 	bl	800ca88 <SP100_LCD_SEG_ON>
 800daf8:	4b3e      	ldr	r3, [pc, #248]	; (800dbf4 <SP100_LCD_SP_Segment+0x448>)
 800dafa:	0018      	movs	r0, r3
 800dafc:	f7fe ffc4 	bl	800ca88 <SP100_LCD_SEG_ON>
 800db00:	4b3d      	ldr	r3, [pc, #244]	; (800dbf8 <SP100_LCD_SP_Segment+0x44c>)
 800db02:	0018      	movs	r0, r3
 800db04:	f7fe ffc0 	bl	800ca88 <SP100_LCD_SEG_ON>
 800db08:	4b3c      	ldr	r3, [pc, #240]	; (800dbfc <SP100_LCD_SP_Segment+0x450>)
 800db0a:	0018      	movs	r0, r3
 800db0c:	f7fe ff84 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800db10:	e15e      	b.n	800ddd0 <SP100_LCD_SP_Segment+0x624>
 800db12:	4b34      	ldr	r3, [pc, #208]	; (800dbe4 <SP100_LCD_SP_Segment+0x438>)
 800db14:	0018      	movs	r0, r3
 800db16:	f7fe ff7f 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800db1a:	4b33      	ldr	r3, [pc, #204]	; (800dbe8 <SP100_LCD_SP_Segment+0x43c>)
 800db1c:	0018      	movs	r0, r3
 800db1e:	f7fe ffb3 	bl	800ca88 <SP100_LCD_SEG_ON>
 800db22:	4b32      	ldr	r3, [pc, #200]	; (800dbec <SP100_LCD_SP_Segment+0x440>)
 800db24:	0018      	movs	r0, r3
 800db26:	f7fe ffaf 	bl	800ca88 <SP100_LCD_SEG_ON>
 800db2a:	4b31      	ldr	r3, [pc, #196]	; (800dbf0 <SP100_LCD_SP_Segment+0x444>)
 800db2c:	0018      	movs	r0, r3
 800db2e:	f7fe ff73 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800db32:	4b30      	ldr	r3, [pc, #192]	; (800dbf4 <SP100_LCD_SP_Segment+0x448>)
 800db34:	0018      	movs	r0, r3
 800db36:	f7fe ff6f 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800db3a:	4b2f      	ldr	r3, [pc, #188]	; (800dbf8 <SP100_LCD_SP_Segment+0x44c>)
 800db3c:	0018      	movs	r0, r3
 800db3e:	f7fe ff6b 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800db42:	4b2e      	ldr	r3, [pc, #184]	; (800dbfc <SP100_LCD_SP_Segment+0x450>)
 800db44:	0018      	movs	r0, r3
 800db46:	f7fe ff67 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800db4a:	e141      	b.n	800ddd0 <SP100_LCD_SP_Segment+0x624>
 800db4c:	4b25      	ldr	r3, [pc, #148]	; (800dbe4 <SP100_LCD_SP_Segment+0x438>)
 800db4e:	0018      	movs	r0, r3
 800db50:	f7fe ff9a 	bl	800ca88 <SP100_LCD_SEG_ON>
 800db54:	4b24      	ldr	r3, [pc, #144]	; (800dbe8 <SP100_LCD_SP_Segment+0x43c>)
 800db56:	0018      	movs	r0, r3
 800db58:	f7fe ff96 	bl	800ca88 <SP100_LCD_SEG_ON>
 800db5c:	4b23      	ldr	r3, [pc, #140]	; (800dbec <SP100_LCD_SP_Segment+0x440>)
 800db5e:	0018      	movs	r0, r3
 800db60:	f7fe ff5a 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800db64:	4b22      	ldr	r3, [pc, #136]	; (800dbf0 <SP100_LCD_SP_Segment+0x444>)
 800db66:	0018      	movs	r0, r3
 800db68:	f7fe ff8e 	bl	800ca88 <SP100_LCD_SEG_ON>
 800db6c:	4b21      	ldr	r3, [pc, #132]	; (800dbf4 <SP100_LCD_SP_Segment+0x448>)
 800db6e:	0018      	movs	r0, r3
 800db70:	f7fe ff8a 	bl	800ca88 <SP100_LCD_SEG_ON>
 800db74:	4b20      	ldr	r3, [pc, #128]	; (800dbf8 <SP100_LCD_SP_Segment+0x44c>)
 800db76:	0018      	movs	r0, r3
 800db78:	f7fe ff4e 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800db7c:	4b1f      	ldr	r3, [pc, #124]	; (800dbfc <SP100_LCD_SP_Segment+0x450>)
 800db7e:	0018      	movs	r0, r3
 800db80:	f7fe ff82 	bl	800ca88 <SP100_LCD_SEG_ON>
 800db84:	e124      	b.n	800ddd0 <SP100_LCD_SP_Segment+0x624>
 800db86:	4b17      	ldr	r3, [pc, #92]	; (800dbe4 <SP100_LCD_SP_Segment+0x438>)
 800db88:	0018      	movs	r0, r3
 800db8a:	f7fe ff7d 	bl	800ca88 <SP100_LCD_SEG_ON>
 800db8e:	4b16      	ldr	r3, [pc, #88]	; (800dbe8 <SP100_LCD_SP_Segment+0x43c>)
 800db90:	0018      	movs	r0, r3
 800db92:	f7fe ff79 	bl	800ca88 <SP100_LCD_SEG_ON>
 800db96:	4b15      	ldr	r3, [pc, #84]	; (800dbec <SP100_LCD_SP_Segment+0x440>)
 800db98:	0018      	movs	r0, r3
 800db9a:	f7fe ff75 	bl	800ca88 <SP100_LCD_SEG_ON>
 800db9e:	4b14      	ldr	r3, [pc, #80]	; (800dbf0 <SP100_LCD_SP_Segment+0x444>)
 800dba0:	0018      	movs	r0, r3
 800dba2:	f7fe ff71 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dba6:	4b13      	ldr	r3, [pc, #76]	; (800dbf4 <SP100_LCD_SP_Segment+0x448>)
 800dba8:	0018      	movs	r0, r3
 800dbaa:	f7fe ff35 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800dbae:	4b12      	ldr	r3, [pc, #72]	; (800dbf8 <SP100_LCD_SP_Segment+0x44c>)
 800dbb0:	0018      	movs	r0, r3
 800dbb2:	f7fe ff31 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800dbb6:	4b11      	ldr	r3, [pc, #68]	; (800dbfc <SP100_LCD_SP_Segment+0x450>)
 800dbb8:	0018      	movs	r0, r3
 800dbba:	f7fe ff65 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dbbe:	e107      	b.n	800ddd0 <SP100_LCD_SP_Segment+0x624>
 800dbc0:	0801501c 	.word	0x0801501c
 800dbc4:	08014f34 	.word	0x08014f34
 800dbc8:	08014f38 	.word	0x08014f38
 800dbcc:	08014f3c 	.word	0x08014f3c
 800dbd0:	08014f40 	.word	0x08014f40
 800dbd4:	08014f44 	.word	0x08014f44
 800dbd8:	08014f48 	.word	0x08014f48
 800dbdc:	08014f4c 	.word	0x08014f4c
 800dbe0:	08015090 	.word	0x08015090
 800dbe4:	08014f50 	.word	0x08014f50
 800dbe8:	08014f54 	.word	0x08014f54
 800dbec:	08014f58 	.word	0x08014f58
 800dbf0:	08014f5c 	.word	0x08014f5c
 800dbf4:	08014f60 	.word	0x08014f60
 800dbf8:	08014f64 	.word	0x08014f64
 800dbfc:	08014f68 	.word	0x08014f68
 800dc00:	4bec      	ldr	r3, [pc, #944]	; (800dfb4 <SP100_LCD_SP_Segment+0x808>)
 800dc02:	0018      	movs	r0, r3
 800dc04:	f7fe ff08 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800dc08:	4beb      	ldr	r3, [pc, #940]	; (800dfb8 <SP100_LCD_SP_Segment+0x80c>)
 800dc0a:	0018      	movs	r0, r3
 800dc0c:	f7fe ff3c 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dc10:	4bea      	ldr	r3, [pc, #936]	; (800dfbc <SP100_LCD_SP_Segment+0x810>)
 800dc12:	0018      	movs	r0, r3
 800dc14:	f7fe ff38 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dc18:	4be9      	ldr	r3, [pc, #932]	; (800dfc0 <SP100_LCD_SP_Segment+0x814>)
 800dc1a:	0018      	movs	r0, r3
 800dc1c:	f7fe fefc 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800dc20:	4be8      	ldr	r3, [pc, #928]	; (800dfc4 <SP100_LCD_SP_Segment+0x818>)
 800dc22:	0018      	movs	r0, r3
 800dc24:	f7fe fef8 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800dc28:	4be7      	ldr	r3, [pc, #924]	; (800dfc8 <SP100_LCD_SP_Segment+0x81c>)
 800dc2a:	0018      	movs	r0, r3
 800dc2c:	f7fe ff2c 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dc30:	4be6      	ldr	r3, [pc, #920]	; (800dfcc <SP100_LCD_SP_Segment+0x820>)
 800dc32:	0018      	movs	r0, r3
 800dc34:	f7fe ff28 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dc38:	e0ca      	b.n	800ddd0 <SP100_LCD_SP_Segment+0x624>
 800dc3a:	4bde      	ldr	r3, [pc, #888]	; (800dfb4 <SP100_LCD_SP_Segment+0x808>)
 800dc3c:	0018      	movs	r0, r3
 800dc3e:	f7fe ff23 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dc42:	4bdd      	ldr	r3, [pc, #884]	; (800dfb8 <SP100_LCD_SP_Segment+0x80c>)
 800dc44:	0018      	movs	r0, r3
 800dc46:	f7fe fee7 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800dc4a:	4bdc      	ldr	r3, [pc, #880]	; (800dfbc <SP100_LCD_SP_Segment+0x810>)
 800dc4c:	0018      	movs	r0, r3
 800dc4e:	f7fe ff1b 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dc52:	4bdb      	ldr	r3, [pc, #876]	; (800dfc0 <SP100_LCD_SP_Segment+0x814>)
 800dc54:	0018      	movs	r0, r3
 800dc56:	f7fe ff17 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dc5a:	4bda      	ldr	r3, [pc, #872]	; (800dfc4 <SP100_LCD_SP_Segment+0x818>)
 800dc5c:	0018      	movs	r0, r3
 800dc5e:	f7fe fedb 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800dc62:	4bd9      	ldr	r3, [pc, #868]	; (800dfc8 <SP100_LCD_SP_Segment+0x81c>)
 800dc64:	0018      	movs	r0, r3
 800dc66:	f7fe ff0f 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dc6a:	4bd8      	ldr	r3, [pc, #864]	; (800dfcc <SP100_LCD_SP_Segment+0x820>)
 800dc6c:	0018      	movs	r0, r3
 800dc6e:	f7fe ff0b 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dc72:	e0ad      	b.n	800ddd0 <SP100_LCD_SP_Segment+0x624>
 800dc74:	4bcf      	ldr	r3, [pc, #828]	; (800dfb4 <SP100_LCD_SP_Segment+0x808>)
 800dc76:	0018      	movs	r0, r3
 800dc78:	f7fe ff06 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dc7c:	4bce      	ldr	r3, [pc, #824]	; (800dfb8 <SP100_LCD_SP_Segment+0x80c>)
 800dc7e:	0018      	movs	r0, r3
 800dc80:	f7fe feca 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800dc84:	4bcd      	ldr	r3, [pc, #820]	; (800dfbc <SP100_LCD_SP_Segment+0x810>)
 800dc86:	0018      	movs	r0, r3
 800dc88:	f7fe fefe 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dc8c:	4bcc      	ldr	r3, [pc, #816]	; (800dfc0 <SP100_LCD_SP_Segment+0x814>)
 800dc8e:	0018      	movs	r0, r3
 800dc90:	f7fe fefa 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dc94:	4bcb      	ldr	r3, [pc, #812]	; (800dfc4 <SP100_LCD_SP_Segment+0x818>)
 800dc96:	0018      	movs	r0, r3
 800dc98:	f7fe fef6 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dc9c:	4bca      	ldr	r3, [pc, #808]	; (800dfc8 <SP100_LCD_SP_Segment+0x81c>)
 800dc9e:	0018      	movs	r0, r3
 800dca0:	f7fe fef2 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dca4:	4bc9      	ldr	r3, [pc, #804]	; (800dfcc <SP100_LCD_SP_Segment+0x820>)
 800dca6:	0018      	movs	r0, r3
 800dca8:	f7fe feee 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dcac:	e090      	b.n	800ddd0 <SP100_LCD_SP_Segment+0x624>
 800dcae:	4bc1      	ldr	r3, [pc, #772]	; (800dfb4 <SP100_LCD_SP_Segment+0x808>)
 800dcb0:	0018      	movs	r0, r3
 800dcb2:	f7fe fee9 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dcb6:	4bc0      	ldr	r3, [pc, #768]	; (800dfb8 <SP100_LCD_SP_Segment+0x80c>)
 800dcb8:	0018      	movs	r0, r3
 800dcba:	f7fe fee5 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dcbe:	4bbf      	ldr	r3, [pc, #764]	; (800dfbc <SP100_LCD_SP_Segment+0x810>)
 800dcc0:	0018      	movs	r0, r3
 800dcc2:	f7fe fee1 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dcc6:	4bbe      	ldr	r3, [pc, #760]	; (800dfc0 <SP100_LCD_SP_Segment+0x814>)
 800dcc8:	0018      	movs	r0, r3
 800dcca:	f7fe fea5 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800dcce:	4bbd      	ldr	r3, [pc, #756]	; (800dfc4 <SP100_LCD_SP_Segment+0x818>)
 800dcd0:	0018      	movs	r0, r3
 800dcd2:	f7fe fea1 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800dcd6:	4bbc      	ldr	r3, [pc, #752]	; (800dfc8 <SP100_LCD_SP_Segment+0x81c>)
 800dcd8:	0018      	movs	r0, r3
 800dcda:	f7fe fe9d 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800dcde:	4bbb      	ldr	r3, [pc, #748]	; (800dfcc <SP100_LCD_SP_Segment+0x820>)
 800dce0:	0018      	movs	r0, r3
 800dce2:	f7fe fe99 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800dce6:	e073      	b.n	800ddd0 <SP100_LCD_SP_Segment+0x624>
 800dce8:	4bb2      	ldr	r3, [pc, #712]	; (800dfb4 <SP100_LCD_SP_Segment+0x808>)
 800dcea:	0018      	movs	r0, r3
 800dcec:	f7fe fecc 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dcf0:	4bb1      	ldr	r3, [pc, #708]	; (800dfb8 <SP100_LCD_SP_Segment+0x80c>)
 800dcf2:	0018      	movs	r0, r3
 800dcf4:	f7fe fec8 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dcf8:	4bb0      	ldr	r3, [pc, #704]	; (800dfbc <SP100_LCD_SP_Segment+0x810>)
 800dcfa:	0018      	movs	r0, r3
 800dcfc:	f7fe fec4 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dd00:	4baf      	ldr	r3, [pc, #700]	; (800dfc0 <SP100_LCD_SP_Segment+0x814>)
 800dd02:	0018      	movs	r0, r3
 800dd04:	f7fe fec0 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dd08:	4bae      	ldr	r3, [pc, #696]	; (800dfc4 <SP100_LCD_SP_Segment+0x818>)
 800dd0a:	0018      	movs	r0, r3
 800dd0c:	f7fe febc 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dd10:	4bad      	ldr	r3, [pc, #692]	; (800dfc8 <SP100_LCD_SP_Segment+0x81c>)
 800dd12:	0018      	movs	r0, r3
 800dd14:	f7fe feb8 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dd18:	4bac      	ldr	r3, [pc, #688]	; (800dfcc <SP100_LCD_SP_Segment+0x820>)
 800dd1a:	0018      	movs	r0, r3
 800dd1c:	f7fe feb4 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dd20:	e056      	b.n	800ddd0 <SP100_LCD_SP_Segment+0x624>
 800dd22:	4ba4      	ldr	r3, [pc, #656]	; (800dfb4 <SP100_LCD_SP_Segment+0x808>)
 800dd24:	0018      	movs	r0, r3
 800dd26:	f7fe feaf 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dd2a:	4ba3      	ldr	r3, [pc, #652]	; (800dfb8 <SP100_LCD_SP_Segment+0x80c>)
 800dd2c:	0018      	movs	r0, r3
 800dd2e:	f7fe feab 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dd32:	4ba2      	ldr	r3, [pc, #648]	; (800dfbc <SP100_LCD_SP_Segment+0x810>)
 800dd34:	0018      	movs	r0, r3
 800dd36:	f7fe fea7 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dd3a:	4ba1      	ldr	r3, [pc, #644]	; (800dfc0 <SP100_LCD_SP_Segment+0x814>)
 800dd3c:	0018      	movs	r0, r3
 800dd3e:	f7fe fea3 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dd42:	4ba0      	ldr	r3, [pc, #640]	; (800dfc4 <SP100_LCD_SP_Segment+0x818>)
 800dd44:	0018      	movs	r0, r3
 800dd46:	f7fe fe67 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800dd4a:	4b9f      	ldr	r3, [pc, #636]	; (800dfc8 <SP100_LCD_SP_Segment+0x81c>)
 800dd4c:	0018      	movs	r0, r3
 800dd4e:	f7fe fe9b 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dd52:	4b9e      	ldr	r3, [pc, #632]	; (800dfcc <SP100_LCD_SP_Segment+0x820>)
 800dd54:	0018      	movs	r0, r3
 800dd56:	f7fe fe97 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dd5a:	e039      	b.n	800ddd0 <SP100_LCD_SP_Segment+0x624>
 800dd5c:	4b95      	ldr	r3, [pc, #596]	; (800dfb4 <SP100_LCD_SP_Segment+0x808>)
 800dd5e:	0018      	movs	r0, r3
 800dd60:	f7fe fe92 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dd64:	4b94      	ldr	r3, [pc, #592]	; (800dfb8 <SP100_LCD_SP_Segment+0x80c>)
 800dd66:	0018      	movs	r0, r3
 800dd68:	f7fe fe8e 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dd6c:	4b93      	ldr	r3, [pc, #588]	; (800dfbc <SP100_LCD_SP_Segment+0x810>)
 800dd6e:	0018      	movs	r0, r3
 800dd70:	f7fe fe8a 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dd74:	4b92      	ldr	r3, [pc, #584]	; (800dfc0 <SP100_LCD_SP_Segment+0x814>)
 800dd76:	0018      	movs	r0, r3
 800dd78:	f7fe fe86 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dd7c:	4b91      	ldr	r3, [pc, #580]	; (800dfc4 <SP100_LCD_SP_Segment+0x818>)
 800dd7e:	0018      	movs	r0, r3
 800dd80:	f7fe fe82 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dd84:	4b90      	ldr	r3, [pc, #576]	; (800dfc8 <SP100_LCD_SP_Segment+0x81c>)
 800dd86:	0018      	movs	r0, r3
 800dd88:	f7fe fe7e 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dd8c:	4b8f      	ldr	r3, [pc, #572]	; (800dfcc <SP100_LCD_SP_Segment+0x820>)
 800dd8e:	0018      	movs	r0, r3
 800dd90:	f7fe fe42 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800dd94:	e01c      	b.n	800ddd0 <SP100_LCD_SP_Segment+0x624>
 800dd96:	4b87      	ldr	r3, [pc, #540]	; (800dfb4 <SP100_LCD_SP_Segment+0x808>)
 800dd98:	0018      	movs	r0, r3
 800dd9a:	f7fe fe3d 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800dd9e:	4b86      	ldr	r3, [pc, #536]	; (800dfb8 <SP100_LCD_SP_Segment+0x80c>)
 800dda0:	0018      	movs	r0, r3
 800dda2:	f7fe fe39 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800dda6:	4b85      	ldr	r3, [pc, #532]	; (800dfbc <SP100_LCD_SP_Segment+0x810>)
 800dda8:	0018      	movs	r0, r3
 800ddaa:	f7fe fe35 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ddae:	4b84      	ldr	r3, [pc, #528]	; (800dfc0 <SP100_LCD_SP_Segment+0x814>)
 800ddb0:	0018      	movs	r0, r3
 800ddb2:	f7fe fe31 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ddb6:	4b83      	ldr	r3, [pc, #524]	; (800dfc4 <SP100_LCD_SP_Segment+0x818>)
 800ddb8:	0018      	movs	r0, r3
 800ddba:	f7fe fe65 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ddbe:	4b82      	ldr	r3, [pc, #520]	; (800dfc8 <SP100_LCD_SP_Segment+0x81c>)
 800ddc0:	0018      	movs	r0, r3
 800ddc2:	f7fe fe61 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ddc6:	4b81      	ldr	r3, [pc, #516]	; (800dfcc <SP100_LCD_SP_Segment+0x820>)
 800ddc8:	0018      	movs	r0, r3
 800ddca:	f7fe fe25 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ddce:	46c0      	nop			; (mov r8, r8)
 800ddd0:	e189      	b.n	800e0e6 <SP100_LCD_SP_Segment+0x93a>
 800ddd2:	1dfb      	adds	r3, r7, #7
 800ddd4:	781b      	ldrb	r3, [r3, #0]
 800ddd6:	2b20      	cmp	r3, #32
 800ddd8:	d00b      	beq.n	800ddf2 <SP100_LCD_SP_Segment+0x646>
 800ddda:	2b2e      	cmp	r3, #46	; 0x2e
 800dddc:	d000      	beq.n	800dde0 <SP100_LCD_SP_Segment+0x634>
 800ddde:	e184      	b.n	800e0ea <SP100_LCD_SP_Segment+0x93e>
 800dde0:	4b7b      	ldr	r3, [pc, #492]	; (800dfd0 <SP100_LCD_SP_Segment+0x824>)
 800dde2:	0018      	movs	r0, r3
 800dde4:	f7fe fe50 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dde8:	4b7a      	ldr	r3, [pc, #488]	; (800dfd4 <SP100_LCD_SP_Segment+0x828>)
 800ddea:	0018      	movs	r0, r3
 800ddec:	f7fe fe4c 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ddf0:	e008      	b.n	800de04 <SP100_LCD_SP_Segment+0x658>
 800ddf2:	4b77      	ldr	r3, [pc, #476]	; (800dfd0 <SP100_LCD_SP_Segment+0x824>)
 800ddf4:	0018      	movs	r0, r3
 800ddf6:	f7fe fe0f 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ddfa:	4b76      	ldr	r3, [pc, #472]	; (800dfd4 <SP100_LCD_SP_Segment+0x828>)
 800ddfc:	0018      	movs	r0, r3
 800ddfe:	f7fe fe0b 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800de02:	46c0      	nop			; (mov r8, r8)
 800de04:	e171      	b.n	800e0ea <SP100_LCD_SP_Segment+0x93e>
 800de06:	1dfb      	adds	r3, r7, #7
 800de08:	781b      	ldrb	r3, [r3, #0]
 800de0a:	3b20      	subs	r3, #32
 800de0c:	2b19      	cmp	r3, #25
 800de0e:	d900      	bls.n	800de12 <SP100_LCD_SP_Segment+0x666>
 800de10:	e16d      	b.n	800e0ee <SP100_LCD_SP_Segment+0x942>
 800de12:	009a      	lsls	r2, r3, #2
 800de14:	4b70      	ldr	r3, [pc, #448]	; (800dfd8 <SP100_LCD_SP_Segment+0x82c>)
 800de16:	18d3      	adds	r3, r2, r3
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	469f      	mov	pc, r3
 800de1c:	4b6f      	ldr	r3, [pc, #444]	; (800dfdc <SP100_LCD_SP_Segment+0x830>)
 800de1e:	0018      	movs	r0, r3
 800de20:	f7fe fe32 	bl	800ca88 <SP100_LCD_SEG_ON>
 800de24:	4b6e      	ldr	r3, [pc, #440]	; (800dfe0 <SP100_LCD_SP_Segment+0x834>)
 800de26:	0018      	movs	r0, r3
 800de28:	f7fe fe2e 	bl	800ca88 <SP100_LCD_SEG_ON>
 800de2c:	4b6d      	ldr	r3, [pc, #436]	; (800dfe4 <SP100_LCD_SP_Segment+0x838>)
 800de2e:	0018      	movs	r0, r3
 800de30:	f7fe fe2a 	bl	800ca88 <SP100_LCD_SEG_ON>
 800de34:	4b6c      	ldr	r3, [pc, #432]	; (800dfe8 <SP100_LCD_SP_Segment+0x83c>)
 800de36:	0018      	movs	r0, r3
 800de38:	f7fe fe26 	bl	800ca88 <SP100_LCD_SEG_ON>
 800de3c:	4b6b      	ldr	r3, [pc, #428]	; (800dfec <SP100_LCD_SP_Segment+0x840>)
 800de3e:	0018      	movs	r0, r3
 800de40:	f7fe fe22 	bl	800ca88 <SP100_LCD_SEG_ON>
 800de44:	4b6a      	ldr	r3, [pc, #424]	; (800dff0 <SP100_LCD_SP_Segment+0x844>)
 800de46:	0018      	movs	r0, r3
 800de48:	f7fe fe1e 	bl	800ca88 <SP100_LCD_SEG_ON>
 800de4c:	4b69      	ldr	r3, [pc, #420]	; (800dff4 <SP100_LCD_SP_Segment+0x848>)
 800de4e:	0018      	movs	r0, r3
 800de50:	f7fe fde2 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800de54:	e144      	b.n	800e0e0 <SP100_LCD_SP_Segment+0x934>
 800de56:	4b61      	ldr	r3, [pc, #388]	; (800dfdc <SP100_LCD_SP_Segment+0x830>)
 800de58:	0018      	movs	r0, r3
 800de5a:	f7fe fddd 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800de5e:	4b60      	ldr	r3, [pc, #384]	; (800dfe0 <SP100_LCD_SP_Segment+0x834>)
 800de60:	0018      	movs	r0, r3
 800de62:	f7fe fe11 	bl	800ca88 <SP100_LCD_SEG_ON>
 800de66:	4b5f      	ldr	r3, [pc, #380]	; (800dfe4 <SP100_LCD_SP_Segment+0x838>)
 800de68:	0018      	movs	r0, r3
 800de6a:	f7fe fe0d 	bl	800ca88 <SP100_LCD_SEG_ON>
 800de6e:	4b5e      	ldr	r3, [pc, #376]	; (800dfe8 <SP100_LCD_SP_Segment+0x83c>)
 800de70:	0018      	movs	r0, r3
 800de72:	f7fe fdd1 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800de76:	4b5d      	ldr	r3, [pc, #372]	; (800dfec <SP100_LCD_SP_Segment+0x840>)
 800de78:	0018      	movs	r0, r3
 800de7a:	f7fe fdcd 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800de7e:	4b5c      	ldr	r3, [pc, #368]	; (800dff0 <SP100_LCD_SP_Segment+0x844>)
 800de80:	0018      	movs	r0, r3
 800de82:	f7fe fdc9 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800de86:	4b5b      	ldr	r3, [pc, #364]	; (800dff4 <SP100_LCD_SP_Segment+0x848>)
 800de88:	0018      	movs	r0, r3
 800de8a:	f7fe fdc5 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800de8e:	e127      	b.n	800e0e0 <SP100_LCD_SP_Segment+0x934>
 800de90:	4b52      	ldr	r3, [pc, #328]	; (800dfdc <SP100_LCD_SP_Segment+0x830>)
 800de92:	0018      	movs	r0, r3
 800de94:	f7fe fdf8 	bl	800ca88 <SP100_LCD_SEG_ON>
 800de98:	4b51      	ldr	r3, [pc, #324]	; (800dfe0 <SP100_LCD_SP_Segment+0x834>)
 800de9a:	0018      	movs	r0, r3
 800de9c:	f7fe fdf4 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dea0:	4b50      	ldr	r3, [pc, #320]	; (800dfe4 <SP100_LCD_SP_Segment+0x838>)
 800dea2:	0018      	movs	r0, r3
 800dea4:	f7fe fdb8 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800dea8:	4b4f      	ldr	r3, [pc, #316]	; (800dfe8 <SP100_LCD_SP_Segment+0x83c>)
 800deaa:	0018      	movs	r0, r3
 800deac:	f7fe fdec 	bl	800ca88 <SP100_LCD_SEG_ON>
 800deb0:	4b4e      	ldr	r3, [pc, #312]	; (800dfec <SP100_LCD_SP_Segment+0x840>)
 800deb2:	0018      	movs	r0, r3
 800deb4:	f7fe fde8 	bl	800ca88 <SP100_LCD_SEG_ON>
 800deb8:	4b4d      	ldr	r3, [pc, #308]	; (800dff0 <SP100_LCD_SP_Segment+0x844>)
 800deba:	0018      	movs	r0, r3
 800debc:	f7fe fdac 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800dec0:	4b4c      	ldr	r3, [pc, #304]	; (800dff4 <SP100_LCD_SP_Segment+0x848>)
 800dec2:	0018      	movs	r0, r3
 800dec4:	f7fe fde0 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dec8:	e10a      	b.n	800e0e0 <SP100_LCD_SP_Segment+0x934>
 800deca:	4b44      	ldr	r3, [pc, #272]	; (800dfdc <SP100_LCD_SP_Segment+0x830>)
 800decc:	0018      	movs	r0, r3
 800dece:	f7fe fddb 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ded2:	4b43      	ldr	r3, [pc, #268]	; (800dfe0 <SP100_LCD_SP_Segment+0x834>)
 800ded4:	0018      	movs	r0, r3
 800ded6:	f7fe fdd7 	bl	800ca88 <SP100_LCD_SEG_ON>
 800deda:	4b42      	ldr	r3, [pc, #264]	; (800dfe4 <SP100_LCD_SP_Segment+0x838>)
 800dedc:	0018      	movs	r0, r3
 800dede:	f7fe fdd3 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dee2:	4b41      	ldr	r3, [pc, #260]	; (800dfe8 <SP100_LCD_SP_Segment+0x83c>)
 800dee4:	0018      	movs	r0, r3
 800dee6:	f7fe fdcf 	bl	800ca88 <SP100_LCD_SEG_ON>
 800deea:	4b40      	ldr	r3, [pc, #256]	; (800dfec <SP100_LCD_SP_Segment+0x840>)
 800deec:	0018      	movs	r0, r3
 800deee:	f7fe fd93 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800def2:	4b3f      	ldr	r3, [pc, #252]	; (800dff0 <SP100_LCD_SP_Segment+0x844>)
 800def4:	0018      	movs	r0, r3
 800def6:	f7fe fd8f 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800defa:	4b3e      	ldr	r3, [pc, #248]	; (800dff4 <SP100_LCD_SP_Segment+0x848>)
 800defc:	0018      	movs	r0, r3
 800defe:	f7fe fdc3 	bl	800ca88 <SP100_LCD_SEG_ON>
 800df02:	e0ed      	b.n	800e0e0 <SP100_LCD_SP_Segment+0x934>
 800df04:	4b35      	ldr	r3, [pc, #212]	; (800dfdc <SP100_LCD_SP_Segment+0x830>)
 800df06:	0018      	movs	r0, r3
 800df08:	f7fe fd86 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800df0c:	4b34      	ldr	r3, [pc, #208]	; (800dfe0 <SP100_LCD_SP_Segment+0x834>)
 800df0e:	0018      	movs	r0, r3
 800df10:	f7fe fdba 	bl	800ca88 <SP100_LCD_SEG_ON>
 800df14:	4b33      	ldr	r3, [pc, #204]	; (800dfe4 <SP100_LCD_SP_Segment+0x838>)
 800df16:	0018      	movs	r0, r3
 800df18:	f7fe fdb6 	bl	800ca88 <SP100_LCD_SEG_ON>
 800df1c:	4b32      	ldr	r3, [pc, #200]	; (800dfe8 <SP100_LCD_SP_Segment+0x83c>)
 800df1e:	0018      	movs	r0, r3
 800df20:	f7fe fd7a 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800df24:	4b31      	ldr	r3, [pc, #196]	; (800dfec <SP100_LCD_SP_Segment+0x840>)
 800df26:	0018      	movs	r0, r3
 800df28:	f7fe fd76 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800df2c:	4b30      	ldr	r3, [pc, #192]	; (800dff0 <SP100_LCD_SP_Segment+0x844>)
 800df2e:	0018      	movs	r0, r3
 800df30:	f7fe fdaa 	bl	800ca88 <SP100_LCD_SEG_ON>
 800df34:	4b2f      	ldr	r3, [pc, #188]	; (800dff4 <SP100_LCD_SP_Segment+0x848>)
 800df36:	0018      	movs	r0, r3
 800df38:	f7fe fda6 	bl	800ca88 <SP100_LCD_SEG_ON>
 800df3c:	e0d0      	b.n	800e0e0 <SP100_LCD_SP_Segment+0x934>
 800df3e:	4b27      	ldr	r3, [pc, #156]	; (800dfdc <SP100_LCD_SP_Segment+0x830>)
 800df40:	0018      	movs	r0, r3
 800df42:	f7fe fda1 	bl	800ca88 <SP100_LCD_SEG_ON>
 800df46:	4b26      	ldr	r3, [pc, #152]	; (800dfe0 <SP100_LCD_SP_Segment+0x834>)
 800df48:	0018      	movs	r0, r3
 800df4a:	f7fe fd65 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800df4e:	4b25      	ldr	r3, [pc, #148]	; (800dfe4 <SP100_LCD_SP_Segment+0x838>)
 800df50:	0018      	movs	r0, r3
 800df52:	f7fe fd99 	bl	800ca88 <SP100_LCD_SEG_ON>
 800df56:	4b24      	ldr	r3, [pc, #144]	; (800dfe8 <SP100_LCD_SP_Segment+0x83c>)
 800df58:	0018      	movs	r0, r3
 800df5a:	f7fe fd95 	bl	800ca88 <SP100_LCD_SEG_ON>
 800df5e:	4b23      	ldr	r3, [pc, #140]	; (800dfec <SP100_LCD_SP_Segment+0x840>)
 800df60:	0018      	movs	r0, r3
 800df62:	f7fe fd59 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800df66:	4b22      	ldr	r3, [pc, #136]	; (800dff0 <SP100_LCD_SP_Segment+0x844>)
 800df68:	0018      	movs	r0, r3
 800df6a:	f7fe fd8d 	bl	800ca88 <SP100_LCD_SEG_ON>
 800df6e:	4b21      	ldr	r3, [pc, #132]	; (800dff4 <SP100_LCD_SP_Segment+0x848>)
 800df70:	0018      	movs	r0, r3
 800df72:	f7fe fd89 	bl	800ca88 <SP100_LCD_SEG_ON>
 800df76:	e0b3      	b.n	800e0e0 <SP100_LCD_SP_Segment+0x934>
 800df78:	4b18      	ldr	r3, [pc, #96]	; (800dfdc <SP100_LCD_SP_Segment+0x830>)
 800df7a:	0018      	movs	r0, r3
 800df7c:	f7fe fd84 	bl	800ca88 <SP100_LCD_SEG_ON>
 800df80:	4b17      	ldr	r3, [pc, #92]	; (800dfe0 <SP100_LCD_SP_Segment+0x834>)
 800df82:	0018      	movs	r0, r3
 800df84:	f7fe fd48 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800df88:	4b16      	ldr	r3, [pc, #88]	; (800dfe4 <SP100_LCD_SP_Segment+0x838>)
 800df8a:	0018      	movs	r0, r3
 800df8c:	f7fe fd7c 	bl	800ca88 <SP100_LCD_SEG_ON>
 800df90:	4b15      	ldr	r3, [pc, #84]	; (800dfe8 <SP100_LCD_SP_Segment+0x83c>)
 800df92:	0018      	movs	r0, r3
 800df94:	f7fe fd78 	bl	800ca88 <SP100_LCD_SEG_ON>
 800df98:	4b14      	ldr	r3, [pc, #80]	; (800dfec <SP100_LCD_SP_Segment+0x840>)
 800df9a:	0018      	movs	r0, r3
 800df9c:	f7fe fd74 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dfa0:	4b13      	ldr	r3, [pc, #76]	; (800dff0 <SP100_LCD_SP_Segment+0x844>)
 800dfa2:	0018      	movs	r0, r3
 800dfa4:	f7fe fd70 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dfa8:	4b12      	ldr	r3, [pc, #72]	; (800dff4 <SP100_LCD_SP_Segment+0x848>)
 800dfaa:	0018      	movs	r0, r3
 800dfac:	f7fe fd6c 	bl	800ca88 <SP100_LCD_SEG_ON>
 800dfb0:	e096      	b.n	800e0e0 <SP100_LCD_SP_Segment+0x934>
 800dfb2:	46c0      	nop			; (mov r8, r8)
 800dfb4:	08014f50 	.word	0x08014f50
 800dfb8:	08014f54 	.word	0x08014f54
 800dfbc:	08014f58 	.word	0x08014f58
 800dfc0:	08014f5c 	.word	0x08014f5c
 800dfc4:	08014f60 	.word	0x08014f60
 800dfc8:	08014f64 	.word	0x08014f64
 800dfcc:	08014f68 	.word	0x08014f68
 800dfd0:	08014f2c 	.word	0x08014f2c
 800dfd4:	08014f30 	.word	0x08014f30
 800dfd8:	08015110 	.word	0x08015110
 800dfdc:	08014f6c 	.word	0x08014f6c
 800dfe0:	08014f70 	.word	0x08014f70
 800dfe4:	08014f74 	.word	0x08014f74
 800dfe8:	08014f78 	.word	0x08014f78
 800dfec:	08014f7c 	.word	0x08014f7c
 800dff0:	08014f80 	.word	0x08014f80
 800dff4:	08014f84 	.word	0x08014f84
 800dff8:	4b3f      	ldr	r3, [pc, #252]	; (800e0f8 <SP100_LCD_SP_Segment+0x94c>)
 800dffa:	0018      	movs	r0, r3
 800dffc:	f7fe fd44 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e000:	4b3e      	ldr	r3, [pc, #248]	; (800e0fc <SP100_LCD_SP_Segment+0x950>)
 800e002:	0018      	movs	r0, r3
 800e004:	f7fe fd40 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e008:	4b3d      	ldr	r3, [pc, #244]	; (800e100 <SP100_LCD_SP_Segment+0x954>)
 800e00a:	0018      	movs	r0, r3
 800e00c:	f7fe fd3c 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e010:	4b3c      	ldr	r3, [pc, #240]	; (800e104 <SP100_LCD_SP_Segment+0x958>)
 800e012:	0018      	movs	r0, r3
 800e014:	f7fe fd00 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e018:	4b3b      	ldr	r3, [pc, #236]	; (800e108 <SP100_LCD_SP_Segment+0x95c>)
 800e01a:	0018      	movs	r0, r3
 800e01c:	f7fe fcfc 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e020:	4b3a      	ldr	r3, [pc, #232]	; (800e10c <SP100_LCD_SP_Segment+0x960>)
 800e022:	0018      	movs	r0, r3
 800e024:	f7fe fcf8 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e028:	4b39      	ldr	r3, [pc, #228]	; (800e110 <SP100_LCD_SP_Segment+0x964>)
 800e02a:	0018      	movs	r0, r3
 800e02c:	f7fe fcf4 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e030:	e056      	b.n	800e0e0 <SP100_LCD_SP_Segment+0x934>
 800e032:	4b31      	ldr	r3, [pc, #196]	; (800e0f8 <SP100_LCD_SP_Segment+0x94c>)
 800e034:	0018      	movs	r0, r3
 800e036:	f7fe fd27 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e03a:	4b30      	ldr	r3, [pc, #192]	; (800e0fc <SP100_LCD_SP_Segment+0x950>)
 800e03c:	0018      	movs	r0, r3
 800e03e:	f7fe fd23 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e042:	4b2f      	ldr	r3, [pc, #188]	; (800e100 <SP100_LCD_SP_Segment+0x954>)
 800e044:	0018      	movs	r0, r3
 800e046:	f7fe fd1f 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e04a:	4b2e      	ldr	r3, [pc, #184]	; (800e104 <SP100_LCD_SP_Segment+0x958>)
 800e04c:	0018      	movs	r0, r3
 800e04e:	f7fe fd1b 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e052:	4b2d      	ldr	r3, [pc, #180]	; (800e108 <SP100_LCD_SP_Segment+0x95c>)
 800e054:	0018      	movs	r0, r3
 800e056:	f7fe fd17 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e05a:	4b2c      	ldr	r3, [pc, #176]	; (800e10c <SP100_LCD_SP_Segment+0x960>)
 800e05c:	0018      	movs	r0, r3
 800e05e:	f7fe fd13 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e062:	4b2b      	ldr	r3, [pc, #172]	; (800e110 <SP100_LCD_SP_Segment+0x964>)
 800e064:	0018      	movs	r0, r3
 800e066:	f7fe fd0f 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e06a:	e039      	b.n	800e0e0 <SP100_LCD_SP_Segment+0x934>
 800e06c:	4b22      	ldr	r3, [pc, #136]	; (800e0f8 <SP100_LCD_SP_Segment+0x94c>)
 800e06e:	0018      	movs	r0, r3
 800e070:	f7fe fd0a 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e074:	4b21      	ldr	r3, [pc, #132]	; (800e0fc <SP100_LCD_SP_Segment+0x950>)
 800e076:	0018      	movs	r0, r3
 800e078:	f7fe fd06 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e07c:	4b20      	ldr	r3, [pc, #128]	; (800e100 <SP100_LCD_SP_Segment+0x954>)
 800e07e:	0018      	movs	r0, r3
 800e080:	f7fe fd02 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e084:	4b1f      	ldr	r3, [pc, #124]	; (800e104 <SP100_LCD_SP_Segment+0x958>)
 800e086:	0018      	movs	r0, r3
 800e088:	f7fe fcfe 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e08c:	4b1e      	ldr	r3, [pc, #120]	; (800e108 <SP100_LCD_SP_Segment+0x95c>)
 800e08e:	0018      	movs	r0, r3
 800e090:	f7fe fcc2 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e094:	4b1d      	ldr	r3, [pc, #116]	; (800e10c <SP100_LCD_SP_Segment+0x960>)
 800e096:	0018      	movs	r0, r3
 800e098:	f7fe fcf6 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e09c:	4b1c      	ldr	r3, [pc, #112]	; (800e110 <SP100_LCD_SP_Segment+0x964>)
 800e09e:	0018      	movs	r0, r3
 800e0a0:	f7fe fcf2 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e0a4:	e01c      	b.n	800e0e0 <SP100_LCD_SP_Segment+0x934>
 800e0a6:	4b14      	ldr	r3, [pc, #80]	; (800e0f8 <SP100_LCD_SP_Segment+0x94c>)
 800e0a8:	0018      	movs	r0, r3
 800e0aa:	f7fe fcb5 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e0ae:	4b13      	ldr	r3, [pc, #76]	; (800e0fc <SP100_LCD_SP_Segment+0x950>)
 800e0b0:	0018      	movs	r0, r3
 800e0b2:	f7fe fcb1 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e0b6:	4b12      	ldr	r3, [pc, #72]	; (800e100 <SP100_LCD_SP_Segment+0x954>)
 800e0b8:	0018      	movs	r0, r3
 800e0ba:	f7fe fcad 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e0be:	4b11      	ldr	r3, [pc, #68]	; (800e104 <SP100_LCD_SP_Segment+0x958>)
 800e0c0:	0018      	movs	r0, r3
 800e0c2:	f7fe fca9 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e0c6:	4b10      	ldr	r3, [pc, #64]	; (800e108 <SP100_LCD_SP_Segment+0x95c>)
 800e0c8:	0018      	movs	r0, r3
 800e0ca:	f7fe fca5 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e0ce:	4b0f      	ldr	r3, [pc, #60]	; (800e10c <SP100_LCD_SP_Segment+0x960>)
 800e0d0:	0018      	movs	r0, r3
 800e0d2:	f7fe fca1 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e0d6:	4b0e      	ldr	r3, [pc, #56]	; (800e110 <SP100_LCD_SP_Segment+0x964>)
 800e0d8:	0018      	movs	r0, r3
 800e0da:	f7fe fc9d 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e0de:	46c0      	nop			; (mov r8, r8)
 800e0e0:	e005      	b.n	800e0ee <SP100_LCD_SP_Segment+0x942>
 800e0e2:	46c0      	nop			; (mov r8, r8)
 800e0e4:	e004      	b.n	800e0f0 <SP100_LCD_SP_Segment+0x944>
 800e0e6:	46c0      	nop			; (mov r8, r8)
 800e0e8:	e002      	b.n	800e0f0 <SP100_LCD_SP_Segment+0x944>
 800e0ea:	46c0      	nop			; (mov r8, r8)
 800e0ec:	e000      	b.n	800e0f0 <SP100_LCD_SP_Segment+0x944>
 800e0ee:	46c0      	nop			; (mov r8, r8)
 800e0f0:	46c0      	nop			; (mov r8, r8)
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	b002      	add	sp, #8
 800e0f6:	bd80      	pop	{r7, pc}
 800e0f8:	08014f6c 	.word	0x08014f6c
 800e0fc:	08014f70 	.word	0x08014f70
 800e100:	08014f74 	.word	0x08014f74
 800e104:	08014f78 	.word	0x08014f78
 800e108:	08014f7c 	.word	0x08014f7c
 800e10c:	08014f80 	.word	0x08014f80
 800e110:	08014f84 	.word	0x08014f84

0800e114 <SP100_LCD_SP_Handler>:
 800e114:	b590      	push	{r4, r7, lr}
 800e116:	b08d      	sub	sp, #52	; 0x34
 800e118:	af00      	add	r7, sp, #0
 800e11a:	6078      	str	r0, [r7, #4]
 800e11c:	493b      	ldr	r1, [pc, #236]	; (800e20c <SP100_LCD_SP_Handler+0xf8>)
 800e11e:	6878      	ldr	r0, [r7, #4]
 800e120:	f7f2 f9ce 	bl	80004c0 <__aeabi_fcmpeq>
 800e124:	1e03      	subs	r3, r0, #0
 800e126:	d021      	beq.n	800e16c <SP100_LCD_SP_Handler+0x58>
 800e128:	211c      	movs	r1, #28
 800e12a:	187b      	adds	r3, r7, r1
 800e12c:	2200      	movs	r2, #0
 800e12e:	601a      	str	r2, [r3, #0]
 800e130:	2200      	movs	r2, #0
 800e132:	605a      	str	r2, [r3, #4]
 800e134:	2300      	movs	r3, #0
 800e136:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e138:	4a35      	ldr	r2, [pc, #212]	; (800e210 <SP100_LCD_SP_Handler+0xfc>)
 800e13a:	187b      	adds	r3, r7, r1
 800e13c:	0011      	movs	r1, r2
 800e13e:	0018      	movs	r0, r3
 800e140:	f003 fc0a 	bl	8011958 <siprintf>
 800e144:	241c      	movs	r4, #28
 800e146:	193a      	adds	r2, r7, r4
 800e148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e14a:	18d3      	adds	r3, r2, r3
 800e14c:	781b      	ldrb	r3, [r3, #0]
 800e14e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e150:	0011      	movs	r1, r2
 800e152:	0018      	movs	r0, r3
 800e154:	f7ff fb2a 	bl	800d7ac <SP100_LCD_SP_Segment>
 800e158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e15a:	3301      	adds	r3, #1
 800e15c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e15e:	193a      	adds	r2, r7, r4
 800e160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e162:	18d3      	adds	r3, r2, r3
 800e164:	781b      	ldrb	r3, [r3, #0]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d1ec      	bne.n	800e144 <SP100_LCD_SP_Handler+0x30>
 800e16a:	e04b      	b.n	800e204 <SP100_LCD_SP_Handler+0xf0>
 800e16c:	4929      	ldr	r1, [pc, #164]	; (800e214 <SP100_LCD_SP_Handler+0x100>)
 800e16e:	6878      	ldr	r0, [r7, #4]
 800e170:	f7f2 f9a6 	bl	80004c0 <__aeabi_fcmpeq>
 800e174:	1e03      	subs	r3, r0, #0
 800e176:	d021      	beq.n	800e1bc <SP100_LCD_SP_Handler+0xa8>
 800e178:	2114      	movs	r1, #20
 800e17a:	187b      	adds	r3, r7, r1
 800e17c:	2200      	movs	r2, #0
 800e17e:	601a      	str	r2, [r3, #0]
 800e180:	2200      	movs	r2, #0
 800e182:	605a      	str	r2, [r3, #4]
 800e184:	2300      	movs	r3, #0
 800e186:	62bb      	str	r3, [r7, #40]	; 0x28
 800e188:	4a23      	ldr	r2, [pc, #140]	; (800e218 <SP100_LCD_SP_Handler+0x104>)
 800e18a:	187b      	adds	r3, r7, r1
 800e18c:	0011      	movs	r1, r2
 800e18e:	0018      	movs	r0, r3
 800e190:	f003 fbe2 	bl	8011958 <siprintf>
 800e194:	2414      	movs	r4, #20
 800e196:	193a      	adds	r2, r7, r4
 800e198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e19a:	18d3      	adds	r3, r2, r3
 800e19c:	781b      	ldrb	r3, [r3, #0]
 800e19e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e1a0:	0011      	movs	r1, r2
 800e1a2:	0018      	movs	r0, r3
 800e1a4:	f7ff fb02 	bl	800d7ac <SP100_LCD_SP_Segment>
 800e1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1aa:	3301      	adds	r3, #1
 800e1ac:	62bb      	str	r3, [r7, #40]	; 0x28
 800e1ae:	193a      	adds	r2, r7, r4
 800e1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1b2:	18d3      	adds	r3, r2, r3
 800e1b4:	781b      	ldrb	r3, [r3, #0]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d1ec      	bne.n	800e194 <SP100_LCD_SP_Handler+0x80>
 800e1ba:	e023      	b.n	800e204 <SP100_LCD_SP_Handler+0xf0>
 800e1bc:	240c      	movs	r4, #12
 800e1be:	193b      	adds	r3, r7, r4
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	601a      	str	r2, [r3, #0]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	605a      	str	r2, [r3, #4]
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	627b      	str	r3, [r7, #36]	; 0x24
 800e1cc:	6878      	ldr	r0, [r7, #4]
 800e1ce:	f7f4 fe61 	bl	8002e94 <__aeabi_f2d>
 800e1d2:	0002      	movs	r2, r0
 800e1d4:	000b      	movs	r3, r1
 800e1d6:	4911      	ldr	r1, [pc, #68]	; (800e21c <SP100_LCD_SP_Handler+0x108>)
 800e1d8:	1938      	adds	r0, r7, r4
 800e1da:	f003 fbbd 	bl	8011958 <siprintf>
 800e1de:	240c      	movs	r4, #12
 800e1e0:	193a      	adds	r2, r7, r4
 800e1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1e4:	18d3      	adds	r3, r2, r3
 800e1e6:	781b      	ldrb	r3, [r3, #0]
 800e1e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1ea:	0011      	movs	r1, r2
 800e1ec:	0018      	movs	r0, r3
 800e1ee:	f7ff fadd 	bl	800d7ac <SP100_LCD_SP_Segment>
 800e1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f4:	3301      	adds	r3, #1
 800e1f6:	627b      	str	r3, [r7, #36]	; 0x24
 800e1f8:	193a      	adds	r2, r7, r4
 800e1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1fc:	18d3      	adds	r3, r2, r3
 800e1fe:	781b      	ldrb	r3, [r3, #0]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d1ec      	bne.n	800e1de <SP100_LCD_SP_Handler+0xca>
 800e204:	46c0      	nop			; (mov r8, r8)
 800e206:	46bd      	mov	sp, r7
 800e208:	b00d      	add	sp, #52	; 0x34
 800e20a:	bd90      	pop	{r4, r7, pc}
 800e20c:	c47a0000 	.word	0xc47a0000
 800e210:	08014cf8 	.word	0x08014cf8
 800e214:	447a0000 	.word	0x447a0000
 800e218:	08014d00 	.word	0x08014d00
 800e21c:	08014d08 	.word	0x08014d08

0800e220 <SP100_LCD_OT_Segment>:
 800e220:	b580      	push	{r7, lr}
 800e222:	b082      	sub	sp, #8
 800e224:	af00      	add	r7, sp, #0
 800e226:	0002      	movs	r2, r0
 800e228:	6039      	str	r1, [r7, #0]
 800e22a:	1dfb      	adds	r3, r7, #7
 800e22c:	701a      	strb	r2, [r3, #0]
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	2b02      	cmp	r3, #2
 800e232:	d100      	bne.n	800e236 <SP100_LCD_OT_Segment+0x16>
 800e234:	e17c      	b.n	800e530 <SP100_LCD_OT_Segment+0x310>
 800e236:	683b      	ldr	r3, [r7, #0]
 800e238:	2b02      	cmp	r3, #2
 800e23a:	dd00      	ble.n	800e23e <SP100_LCD_OT_Segment+0x1e>
 800e23c:	e2ed      	b.n	800e81a <SP100_LCD_OT_Segment+0x5fa>
 800e23e:	683b      	ldr	r3, [r7, #0]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d003      	beq.n	800e24c <SP100_LCD_OT_Segment+0x2c>
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	2b01      	cmp	r3, #1
 800e248:	d027      	beq.n	800e29a <SP100_LCD_OT_Segment+0x7a>
 800e24a:	e2e6      	b.n	800e81a <SP100_LCD_OT_Segment+0x5fa>
 800e24c:	1dfb      	adds	r3, r7, #7
 800e24e:	781b      	ldrb	r3, [r3, #0]
 800e250:	2b2d      	cmp	r3, #45	; 0x2d
 800e252:	d00f      	beq.n	800e274 <SP100_LCD_OT_Segment+0x54>
 800e254:	dd00      	ble.n	800e258 <SP100_LCD_OT_Segment+0x38>
 800e256:	e2db      	b.n	800e810 <SP100_LCD_OT_Segment+0x5f0>
 800e258:	2b20      	cmp	r3, #32
 800e25a:	d014      	beq.n	800e286 <SP100_LCD_OT_Segment+0x66>
 800e25c:	2b2b      	cmp	r3, #43	; 0x2b
 800e25e:	d000      	beq.n	800e262 <SP100_LCD_OT_Segment+0x42>
 800e260:	e2d6      	b.n	800e810 <SP100_LCD_OT_Segment+0x5f0>
 800e262:	4bf3      	ldr	r3, [pc, #972]	; (800e630 <SP100_LCD_OT_Segment+0x410>)
 800e264:	0018      	movs	r0, r3
 800e266:	f7fe fc0f 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e26a:	4bf2      	ldr	r3, [pc, #968]	; (800e634 <SP100_LCD_OT_Segment+0x414>)
 800e26c:	0018      	movs	r0, r3
 800e26e:	f7fe fbd3 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e272:	e011      	b.n	800e298 <SP100_LCD_OT_Segment+0x78>
 800e274:	4bee      	ldr	r3, [pc, #952]	; (800e630 <SP100_LCD_OT_Segment+0x410>)
 800e276:	0018      	movs	r0, r3
 800e278:	f7fe fc06 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e27c:	4bed      	ldr	r3, [pc, #948]	; (800e634 <SP100_LCD_OT_Segment+0x414>)
 800e27e:	0018      	movs	r0, r3
 800e280:	f7fe fc02 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e284:	e008      	b.n	800e298 <SP100_LCD_OT_Segment+0x78>
 800e286:	4bea      	ldr	r3, [pc, #936]	; (800e630 <SP100_LCD_OT_Segment+0x410>)
 800e288:	0018      	movs	r0, r3
 800e28a:	f7fe fbfd 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e28e:	4be9      	ldr	r3, [pc, #932]	; (800e634 <SP100_LCD_OT_Segment+0x414>)
 800e290:	0018      	movs	r0, r3
 800e292:	f7fe fbc1 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e296:	46c0      	nop			; (mov r8, r8)
 800e298:	e2ba      	b.n	800e810 <SP100_LCD_OT_Segment+0x5f0>
 800e29a:	1dfb      	adds	r3, r7, #7
 800e29c:	781b      	ldrb	r3, [r3, #0]
 800e29e:	3b2d      	subs	r3, #45	; 0x2d
 800e2a0:	2b0c      	cmp	r3, #12
 800e2a2:	d900      	bls.n	800e2a6 <SP100_LCD_OT_Segment+0x86>
 800e2a4:	e2b6      	b.n	800e814 <SP100_LCD_OT_Segment+0x5f4>
 800e2a6:	009a      	lsls	r2, r3, #2
 800e2a8:	4be3      	ldr	r3, [pc, #908]	; (800e638 <SP100_LCD_OT_Segment+0x418>)
 800e2aa:	18d3      	adds	r3, r2, r3
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	469f      	mov	pc, r3
 800e2b0:	4be2      	ldr	r3, [pc, #904]	; (800e63c <SP100_LCD_OT_Segment+0x41c>)
 800e2b2:	0018      	movs	r0, r3
 800e2b4:	f7fe fbe8 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e2b8:	4be1      	ldr	r3, [pc, #900]	; (800e640 <SP100_LCD_OT_Segment+0x420>)
 800e2ba:	0018      	movs	r0, r3
 800e2bc:	f7fe fbe4 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e2c0:	4be0      	ldr	r3, [pc, #896]	; (800e644 <SP100_LCD_OT_Segment+0x424>)
 800e2c2:	0018      	movs	r0, r3
 800e2c4:	f7fe fbe0 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e2c8:	4bdf      	ldr	r3, [pc, #892]	; (800e648 <SP100_LCD_OT_Segment+0x428>)
 800e2ca:	0018      	movs	r0, r3
 800e2cc:	f7fe fbdc 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e2d0:	4bde      	ldr	r3, [pc, #888]	; (800e64c <SP100_LCD_OT_Segment+0x42c>)
 800e2d2:	0018      	movs	r0, r3
 800e2d4:	f7fe fbd8 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e2d8:	4bdd      	ldr	r3, [pc, #884]	; (800e650 <SP100_LCD_OT_Segment+0x430>)
 800e2da:	0018      	movs	r0, r3
 800e2dc:	f7fe fbd4 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e2e0:	4bdc      	ldr	r3, [pc, #880]	; (800e654 <SP100_LCD_OT_Segment+0x434>)
 800e2e2:	0018      	movs	r0, r3
 800e2e4:	f7fe fb98 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e2e8:	e121      	b.n	800e52e <SP100_LCD_OT_Segment+0x30e>
 800e2ea:	4bd4      	ldr	r3, [pc, #848]	; (800e63c <SP100_LCD_OT_Segment+0x41c>)
 800e2ec:	0018      	movs	r0, r3
 800e2ee:	f7fe fb93 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e2f2:	4bd3      	ldr	r3, [pc, #844]	; (800e640 <SP100_LCD_OT_Segment+0x420>)
 800e2f4:	0018      	movs	r0, r3
 800e2f6:	f7fe fbc7 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e2fa:	4bd2      	ldr	r3, [pc, #840]	; (800e644 <SP100_LCD_OT_Segment+0x424>)
 800e2fc:	0018      	movs	r0, r3
 800e2fe:	f7fe fbc3 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e302:	4bd1      	ldr	r3, [pc, #836]	; (800e648 <SP100_LCD_OT_Segment+0x428>)
 800e304:	0018      	movs	r0, r3
 800e306:	f7fe fb87 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e30a:	4bd0      	ldr	r3, [pc, #832]	; (800e64c <SP100_LCD_OT_Segment+0x42c>)
 800e30c:	0018      	movs	r0, r3
 800e30e:	f7fe fb83 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e312:	4bcf      	ldr	r3, [pc, #828]	; (800e650 <SP100_LCD_OT_Segment+0x430>)
 800e314:	0018      	movs	r0, r3
 800e316:	f7fe fb7f 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e31a:	4bce      	ldr	r3, [pc, #824]	; (800e654 <SP100_LCD_OT_Segment+0x434>)
 800e31c:	0018      	movs	r0, r3
 800e31e:	f7fe fb7b 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e322:	e104      	b.n	800e52e <SP100_LCD_OT_Segment+0x30e>
 800e324:	4bc5      	ldr	r3, [pc, #788]	; (800e63c <SP100_LCD_OT_Segment+0x41c>)
 800e326:	0018      	movs	r0, r3
 800e328:	f7fe fbae 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e32c:	4bc4      	ldr	r3, [pc, #784]	; (800e640 <SP100_LCD_OT_Segment+0x420>)
 800e32e:	0018      	movs	r0, r3
 800e330:	f7fe fbaa 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e334:	4bc3      	ldr	r3, [pc, #780]	; (800e644 <SP100_LCD_OT_Segment+0x424>)
 800e336:	0018      	movs	r0, r3
 800e338:	f7fe fb6e 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e33c:	4bc2      	ldr	r3, [pc, #776]	; (800e648 <SP100_LCD_OT_Segment+0x428>)
 800e33e:	0018      	movs	r0, r3
 800e340:	f7fe fba2 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e344:	4bc1      	ldr	r3, [pc, #772]	; (800e64c <SP100_LCD_OT_Segment+0x42c>)
 800e346:	0018      	movs	r0, r3
 800e348:	f7fe fb9e 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e34c:	4bc0      	ldr	r3, [pc, #768]	; (800e650 <SP100_LCD_OT_Segment+0x430>)
 800e34e:	0018      	movs	r0, r3
 800e350:	f7fe fb62 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e354:	4bbf      	ldr	r3, [pc, #764]	; (800e654 <SP100_LCD_OT_Segment+0x434>)
 800e356:	0018      	movs	r0, r3
 800e358:	f7fe fb96 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e35c:	e0e7      	b.n	800e52e <SP100_LCD_OT_Segment+0x30e>
 800e35e:	4bb7      	ldr	r3, [pc, #732]	; (800e63c <SP100_LCD_OT_Segment+0x41c>)
 800e360:	0018      	movs	r0, r3
 800e362:	f7fe fb91 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e366:	4bb6      	ldr	r3, [pc, #728]	; (800e640 <SP100_LCD_OT_Segment+0x420>)
 800e368:	0018      	movs	r0, r3
 800e36a:	f7fe fb8d 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e36e:	4bb5      	ldr	r3, [pc, #724]	; (800e644 <SP100_LCD_OT_Segment+0x424>)
 800e370:	0018      	movs	r0, r3
 800e372:	f7fe fb89 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e376:	4bb4      	ldr	r3, [pc, #720]	; (800e648 <SP100_LCD_OT_Segment+0x428>)
 800e378:	0018      	movs	r0, r3
 800e37a:	f7fe fb85 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e37e:	4bb3      	ldr	r3, [pc, #716]	; (800e64c <SP100_LCD_OT_Segment+0x42c>)
 800e380:	0018      	movs	r0, r3
 800e382:	f7fe fb49 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e386:	4bb2      	ldr	r3, [pc, #712]	; (800e650 <SP100_LCD_OT_Segment+0x430>)
 800e388:	0018      	movs	r0, r3
 800e38a:	f7fe fb45 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e38e:	4bb1      	ldr	r3, [pc, #708]	; (800e654 <SP100_LCD_OT_Segment+0x434>)
 800e390:	0018      	movs	r0, r3
 800e392:	f7fe fb79 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e396:	e0ca      	b.n	800e52e <SP100_LCD_OT_Segment+0x30e>
 800e398:	4ba8      	ldr	r3, [pc, #672]	; (800e63c <SP100_LCD_OT_Segment+0x41c>)
 800e39a:	0018      	movs	r0, r3
 800e39c:	f7fe fb3c 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e3a0:	4ba7      	ldr	r3, [pc, #668]	; (800e640 <SP100_LCD_OT_Segment+0x420>)
 800e3a2:	0018      	movs	r0, r3
 800e3a4:	f7fe fb70 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e3a8:	4ba6      	ldr	r3, [pc, #664]	; (800e644 <SP100_LCD_OT_Segment+0x424>)
 800e3aa:	0018      	movs	r0, r3
 800e3ac:	f7fe fb6c 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e3b0:	4ba5      	ldr	r3, [pc, #660]	; (800e648 <SP100_LCD_OT_Segment+0x428>)
 800e3b2:	0018      	movs	r0, r3
 800e3b4:	f7fe fb30 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e3b8:	4ba4      	ldr	r3, [pc, #656]	; (800e64c <SP100_LCD_OT_Segment+0x42c>)
 800e3ba:	0018      	movs	r0, r3
 800e3bc:	f7fe fb2c 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e3c0:	4ba3      	ldr	r3, [pc, #652]	; (800e650 <SP100_LCD_OT_Segment+0x430>)
 800e3c2:	0018      	movs	r0, r3
 800e3c4:	f7fe fb60 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e3c8:	4ba2      	ldr	r3, [pc, #648]	; (800e654 <SP100_LCD_OT_Segment+0x434>)
 800e3ca:	0018      	movs	r0, r3
 800e3cc:	f7fe fb5c 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e3d0:	e0ad      	b.n	800e52e <SP100_LCD_OT_Segment+0x30e>
 800e3d2:	4b9a      	ldr	r3, [pc, #616]	; (800e63c <SP100_LCD_OT_Segment+0x41c>)
 800e3d4:	0018      	movs	r0, r3
 800e3d6:	f7fe fb57 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e3da:	4b99      	ldr	r3, [pc, #612]	; (800e640 <SP100_LCD_OT_Segment+0x420>)
 800e3dc:	0018      	movs	r0, r3
 800e3de:	f7fe fb1b 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e3e2:	4b98      	ldr	r3, [pc, #608]	; (800e644 <SP100_LCD_OT_Segment+0x424>)
 800e3e4:	0018      	movs	r0, r3
 800e3e6:	f7fe fb4f 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e3ea:	4b97      	ldr	r3, [pc, #604]	; (800e648 <SP100_LCD_OT_Segment+0x428>)
 800e3ec:	0018      	movs	r0, r3
 800e3ee:	f7fe fb4b 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e3f2:	4b96      	ldr	r3, [pc, #600]	; (800e64c <SP100_LCD_OT_Segment+0x42c>)
 800e3f4:	0018      	movs	r0, r3
 800e3f6:	f7fe fb0f 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e3fa:	4b95      	ldr	r3, [pc, #596]	; (800e650 <SP100_LCD_OT_Segment+0x430>)
 800e3fc:	0018      	movs	r0, r3
 800e3fe:	f7fe fb43 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e402:	4b94      	ldr	r3, [pc, #592]	; (800e654 <SP100_LCD_OT_Segment+0x434>)
 800e404:	0018      	movs	r0, r3
 800e406:	f7fe fb3f 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e40a:	e090      	b.n	800e52e <SP100_LCD_OT_Segment+0x30e>
 800e40c:	4b8b      	ldr	r3, [pc, #556]	; (800e63c <SP100_LCD_OT_Segment+0x41c>)
 800e40e:	0018      	movs	r0, r3
 800e410:	f7fe fb3a 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e414:	4b8a      	ldr	r3, [pc, #552]	; (800e640 <SP100_LCD_OT_Segment+0x420>)
 800e416:	0018      	movs	r0, r3
 800e418:	f7fe fafe 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e41c:	4b89      	ldr	r3, [pc, #548]	; (800e644 <SP100_LCD_OT_Segment+0x424>)
 800e41e:	0018      	movs	r0, r3
 800e420:	f7fe fb32 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e424:	4b88      	ldr	r3, [pc, #544]	; (800e648 <SP100_LCD_OT_Segment+0x428>)
 800e426:	0018      	movs	r0, r3
 800e428:	f7fe fb2e 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e42c:	4b87      	ldr	r3, [pc, #540]	; (800e64c <SP100_LCD_OT_Segment+0x42c>)
 800e42e:	0018      	movs	r0, r3
 800e430:	f7fe fb2a 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e434:	4b86      	ldr	r3, [pc, #536]	; (800e650 <SP100_LCD_OT_Segment+0x430>)
 800e436:	0018      	movs	r0, r3
 800e438:	f7fe fb26 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e43c:	4b85      	ldr	r3, [pc, #532]	; (800e654 <SP100_LCD_OT_Segment+0x434>)
 800e43e:	0018      	movs	r0, r3
 800e440:	f7fe fb22 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e444:	e073      	b.n	800e52e <SP100_LCD_OT_Segment+0x30e>
 800e446:	4b7d      	ldr	r3, [pc, #500]	; (800e63c <SP100_LCD_OT_Segment+0x41c>)
 800e448:	0018      	movs	r0, r3
 800e44a:	f7fe fb1d 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e44e:	4b7c      	ldr	r3, [pc, #496]	; (800e640 <SP100_LCD_OT_Segment+0x420>)
 800e450:	0018      	movs	r0, r3
 800e452:	f7fe fb19 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e456:	4b7b      	ldr	r3, [pc, #492]	; (800e644 <SP100_LCD_OT_Segment+0x424>)
 800e458:	0018      	movs	r0, r3
 800e45a:	f7fe fb15 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e45e:	4b7a      	ldr	r3, [pc, #488]	; (800e648 <SP100_LCD_OT_Segment+0x428>)
 800e460:	0018      	movs	r0, r3
 800e462:	f7fe fad9 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e466:	4b79      	ldr	r3, [pc, #484]	; (800e64c <SP100_LCD_OT_Segment+0x42c>)
 800e468:	0018      	movs	r0, r3
 800e46a:	f7fe fad5 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e46e:	4b78      	ldr	r3, [pc, #480]	; (800e650 <SP100_LCD_OT_Segment+0x430>)
 800e470:	0018      	movs	r0, r3
 800e472:	f7fe fad1 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e476:	4b77      	ldr	r3, [pc, #476]	; (800e654 <SP100_LCD_OT_Segment+0x434>)
 800e478:	0018      	movs	r0, r3
 800e47a:	f7fe facd 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e47e:	e056      	b.n	800e52e <SP100_LCD_OT_Segment+0x30e>
 800e480:	4b6e      	ldr	r3, [pc, #440]	; (800e63c <SP100_LCD_OT_Segment+0x41c>)
 800e482:	0018      	movs	r0, r3
 800e484:	f7fe fb00 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e488:	4b6d      	ldr	r3, [pc, #436]	; (800e640 <SP100_LCD_OT_Segment+0x420>)
 800e48a:	0018      	movs	r0, r3
 800e48c:	f7fe fafc 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e490:	4b6c      	ldr	r3, [pc, #432]	; (800e644 <SP100_LCD_OT_Segment+0x424>)
 800e492:	0018      	movs	r0, r3
 800e494:	f7fe faf8 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e498:	4b6b      	ldr	r3, [pc, #428]	; (800e648 <SP100_LCD_OT_Segment+0x428>)
 800e49a:	0018      	movs	r0, r3
 800e49c:	f7fe faf4 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e4a0:	4b6a      	ldr	r3, [pc, #424]	; (800e64c <SP100_LCD_OT_Segment+0x42c>)
 800e4a2:	0018      	movs	r0, r3
 800e4a4:	f7fe faf0 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e4a8:	4b69      	ldr	r3, [pc, #420]	; (800e650 <SP100_LCD_OT_Segment+0x430>)
 800e4aa:	0018      	movs	r0, r3
 800e4ac:	f7fe faec 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e4b0:	4b68      	ldr	r3, [pc, #416]	; (800e654 <SP100_LCD_OT_Segment+0x434>)
 800e4b2:	0018      	movs	r0, r3
 800e4b4:	f7fe fae8 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e4b8:	e039      	b.n	800e52e <SP100_LCD_OT_Segment+0x30e>
 800e4ba:	4b60      	ldr	r3, [pc, #384]	; (800e63c <SP100_LCD_OT_Segment+0x41c>)
 800e4bc:	0018      	movs	r0, r3
 800e4be:	f7fe fae3 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e4c2:	4b5f      	ldr	r3, [pc, #380]	; (800e640 <SP100_LCD_OT_Segment+0x420>)
 800e4c4:	0018      	movs	r0, r3
 800e4c6:	f7fe fadf 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e4ca:	4b5e      	ldr	r3, [pc, #376]	; (800e644 <SP100_LCD_OT_Segment+0x424>)
 800e4cc:	0018      	movs	r0, r3
 800e4ce:	f7fe fadb 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e4d2:	4b5d      	ldr	r3, [pc, #372]	; (800e648 <SP100_LCD_OT_Segment+0x428>)
 800e4d4:	0018      	movs	r0, r3
 800e4d6:	f7fe fad7 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e4da:	4b5c      	ldr	r3, [pc, #368]	; (800e64c <SP100_LCD_OT_Segment+0x42c>)
 800e4dc:	0018      	movs	r0, r3
 800e4de:	f7fe fa9b 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e4e2:	4b5b      	ldr	r3, [pc, #364]	; (800e650 <SP100_LCD_OT_Segment+0x430>)
 800e4e4:	0018      	movs	r0, r3
 800e4e6:	f7fe facf 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e4ea:	4b5a      	ldr	r3, [pc, #360]	; (800e654 <SP100_LCD_OT_Segment+0x434>)
 800e4ec:	0018      	movs	r0, r3
 800e4ee:	f7fe facb 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e4f2:	e01c      	b.n	800e52e <SP100_LCD_OT_Segment+0x30e>
 800e4f4:	4b51      	ldr	r3, [pc, #324]	; (800e63c <SP100_LCD_OT_Segment+0x41c>)
 800e4f6:	0018      	movs	r0, r3
 800e4f8:	f7fe fa8e 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e4fc:	4b50      	ldr	r3, [pc, #320]	; (800e640 <SP100_LCD_OT_Segment+0x420>)
 800e4fe:	0018      	movs	r0, r3
 800e500:	f7fe fa8a 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e504:	4b4f      	ldr	r3, [pc, #316]	; (800e644 <SP100_LCD_OT_Segment+0x424>)
 800e506:	0018      	movs	r0, r3
 800e508:	f7fe fa86 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e50c:	4b4e      	ldr	r3, [pc, #312]	; (800e648 <SP100_LCD_OT_Segment+0x428>)
 800e50e:	0018      	movs	r0, r3
 800e510:	f7fe fa82 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e514:	4b4d      	ldr	r3, [pc, #308]	; (800e64c <SP100_LCD_OT_Segment+0x42c>)
 800e516:	0018      	movs	r0, r3
 800e518:	f7fe fa7e 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e51c:	4b4c      	ldr	r3, [pc, #304]	; (800e650 <SP100_LCD_OT_Segment+0x430>)
 800e51e:	0018      	movs	r0, r3
 800e520:	f7fe fa7a 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e524:	4b4b      	ldr	r3, [pc, #300]	; (800e654 <SP100_LCD_OT_Segment+0x434>)
 800e526:	0018      	movs	r0, r3
 800e528:	f7fe faae 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e52c:	46c0      	nop			; (mov r8, r8)
 800e52e:	e171      	b.n	800e814 <SP100_LCD_OT_Segment+0x5f4>
 800e530:	1dfb      	adds	r3, r7, #7
 800e532:	781b      	ldrb	r3, [r3, #0]
 800e534:	3b2d      	subs	r3, #45	; 0x2d
 800e536:	2b0c      	cmp	r3, #12
 800e538:	d900      	bls.n	800e53c <SP100_LCD_OT_Segment+0x31c>
 800e53a:	e16d      	b.n	800e818 <SP100_LCD_OT_Segment+0x5f8>
 800e53c:	009a      	lsls	r2, r3, #2
 800e53e:	4b46      	ldr	r3, [pc, #280]	; (800e658 <SP100_LCD_OT_Segment+0x438>)
 800e540:	18d3      	adds	r3, r2, r3
 800e542:	681b      	ldr	r3, [r3, #0]
 800e544:	469f      	mov	pc, r3
 800e546:	4b45      	ldr	r3, [pc, #276]	; (800e65c <SP100_LCD_OT_Segment+0x43c>)
 800e548:	0018      	movs	r0, r3
 800e54a:	f7fe fa9d 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e54e:	4b44      	ldr	r3, [pc, #272]	; (800e660 <SP100_LCD_OT_Segment+0x440>)
 800e550:	0018      	movs	r0, r3
 800e552:	f7fe fa99 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e556:	4b43      	ldr	r3, [pc, #268]	; (800e664 <SP100_LCD_OT_Segment+0x444>)
 800e558:	0018      	movs	r0, r3
 800e55a:	f7fe fa95 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e55e:	4b42      	ldr	r3, [pc, #264]	; (800e668 <SP100_LCD_OT_Segment+0x448>)
 800e560:	0018      	movs	r0, r3
 800e562:	f7fe fa91 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e566:	4b41      	ldr	r3, [pc, #260]	; (800e66c <SP100_LCD_OT_Segment+0x44c>)
 800e568:	0018      	movs	r0, r3
 800e56a:	f7fe fa8d 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e56e:	4b40      	ldr	r3, [pc, #256]	; (800e670 <SP100_LCD_OT_Segment+0x450>)
 800e570:	0018      	movs	r0, r3
 800e572:	f7fe fa89 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e576:	4b3f      	ldr	r3, [pc, #252]	; (800e674 <SP100_LCD_OT_Segment+0x454>)
 800e578:	0018      	movs	r0, r3
 800e57a:	f7fe fa4d 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e57e:	e146      	b.n	800e80e <SP100_LCD_OT_Segment+0x5ee>
 800e580:	4b36      	ldr	r3, [pc, #216]	; (800e65c <SP100_LCD_OT_Segment+0x43c>)
 800e582:	0018      	movs	r0, r3
 800e584:	f7fe fa48 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e588:	4b35      	ldr	r3, [pc, #212]	; (800e660 <SP100_LCD_OT_Segment+0x440>)
 800e58a:	0018      	movs	r0, r3
 800e58c:	f7fe fa7c 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e590:	4b34      	ldr	r3, [pc, #208]	; (800e664 <SP100_LCD_OT_Segment+0x444>)
 800e592:	0018      	movs	r0, r3
 800e594:	f7fe fa78 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e598:	4b33      	ldr	r3, [pc, #204]	; (800e668 <SP100_LCD_OT_Segment+0x448>)
 800e59a:	0018      	movs	r0, r3
 800e59c:	f7fe fa3c 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e5a0:	4b32      	ldr	r3, [pc, #200]	; (800e66c <SP100_LCD_OT_Segment+0x44c>)
 800e5a2:	0018      	movs	r0, r3
 800e5a4:	f7fe fa38 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e5a8:	4b31      	ldr	r3, [pc, #196]	; (800e670 <SP100_LCD_OT_Segment+0x450>)
 800e5aa:	0018      	movs	r0, r3
 800e5ac:	f7fe fa34 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e5b0:	4b30      	ldr	r3, [pc, #192]	; (800e674 <SP100_LCD_OT_Segment+0x454>)
 800e5b2:	0018      	movs	r0, r3
 800e5b4:	f7fe fa30 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e5b8:	e129      	b.n	800e80e <SP100_LCD_OT_Segment+0x5ee>
 800e5ba:	4b28      	ldr	r3, [pc, #160]	; (800e65c <SP100_LCD_OT_Segment+0x43c>)
 800e5bc:	0018      	movs	r0, r3
 800e5be:	f7fe fa63 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e5c2:	4b27      	ldr	r3, [pc, #156]	; (800e660 <SP100_LCD_OT_Segment+0x440>)
 800e5c4:	0018      	movs	r0, r3
 800e5c6:	f7fe fa5f 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e5ca:	4b26      	ldr	r3, [pc, #152]	; (800e664 <SP100_LCD_OT_Segment+0x444>)
 800e5cc:	0018      	movs	r0, r3
 800e5ce:	f7fe fa23 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e5d2:	4b25      	ldr	r3, [pc, #148]	; (800e668 <SP100_LCD_OT_Segment+0x448>)
 800e5d4:	0018      	movs	r0, r3
 800e5d6:	f7fe fa57 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e5da:	4b24      	ldr	r3, [pc, #144]	; (800e66c <SP100_LCD_OT_Segment+0x44c>)
 800e5dc:	0018      	movs	r0, r3
 800e5de:	f7fe fa53 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e5e2:	4b23      	ldr	r3, [pc, #140]	; (800e670 <SP100_LCD_OT_Segment+0x450>)
 800e5e4:	0018      	movs	r0, r3
 800e5e6:	f7fe fa17 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e5ea:	4b22      	ldr	r3, [pc, #136]	; (800e674 <SP100_LCD_OT_Segment+0x454>)
 800e5ec:	0018      	movs	r0, r3
 800e5ee:	f7fe fa4b 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e5f2:	e10c      	b.n	800e80e <SP100_LCD_OT_Segment+0x5ee>
 800e5f4:	4b19      	ldr	r3, [pc, #100]	; (800e65c <SP100_LCD_OT_Segment+0x43c>)
 800e5f6:	0018      	movs	r0, r3
 800e5f8:	f7fe fa46 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e5fc:	4b18      	ldr	r3, [pc, #96]	; (800e660 <SP100_LCD_OT_Segment+0x440>)
 800e5fe:	0018      	movs	r0, r3
 800e600:	f7fe fa42 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e604:	4b17      	ldr	r3, [pc, #92]	; (800e664 <SP100_LCD_OT_Segment+0x444>)
 800e606:	0018      	movs	r0, r3
 800e608:	f7fe fa3e 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e60c:	4b16      	ldr	r3, [pc, #88]	; (800e668 <SP100_LCD_OT_Segment+0x448>)
 800e60e:	0018      	movs	r0, r3
 800e610:	f7fe fa3a 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e614:	4b15      	ldr	r3, [pc, #84]	; (800e66c <SP100_LCD_OT_Segment+0x44c>)
 800e616:	0018      	movs	r0, r3
 800e618:	f7fe f9fe 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e61c:	4b14      	ldr	r3, [pc, #80]	; (800e670 <SP100_LCD_OT_Segment+0x450>)
 800e61e:	0018      	movs	r0, r3
 800e620:	f7fe f9fa 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e624:	4b13      	ldr	r3, [pc, #76]	; (800e674 <SP100_LCD_OT_Segment+0x454>)
 800e626:	0018      	movs	r0, r3
 800e628:	f7fe fa2e 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e62c:	e0ef      	b.n	800e80e <SP100_LCD_OT_Segment+0x5ee>
 800e62e:	46c0      	nop			; (mov r8, r8)
 800e630:	08014f8c 	.word	0x08014f8c
 800e634:	08014f90 	.word	0x08014f90
 800e638:	08015178 	.word	0x08015178
 800e63c:	08014f94 	.word	0x08014f94
 800e640:	08014f98 	.word	0x08014f98
 800e644:	08014f9c 	.word	0x08014f9c
 800e648:	08014fa0 	.word	0x08014fa0
 800e64c:	08014fa4 	.word	0x08014fa4
 800e650:	08014fa8 	.word	0x08014fa8
 800e654:	08014fac 	.word	0x08014fac
 800e658:	080151ac 	.word	0x080151ac
 800e65c:	08014fb0 	.word	0x08014fb0
 800e660:	08014fb4 	.word	0x08014fb4
 800e664:	08014fb8 	.word	0x08014fb8
 800e668:	08014fbc 	.word	0x08014fbc
 800e66c:	08014fc0 	.word	0x08014fc0
 800e670:	08014fc4 	.word	0x08014fc4
 800e674:	08014fc8 	.word	0x08014fc8
 800e678:	4b6a      	ldr	r3, [pc, #424]	; (800e824 <SP100_LCD_OT_Segment+0x604>)
 800e67a:	0018      	movs	r0, r3
 800e67c:	f7fe f9cc 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e680:	4b69      	ldr	r3, [pc, #420]	; (800e828 <SP100_LCD_OT_Segment+0x608>)
 800e682:	0018      	movs	r0, r3
 800e684:	f7fe fa00 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e688:	4b68      	ldr	r3, [pc, #416]	; (800e82c <SP100_LCD_OT_Segment+0x60c>)
 800e68a:	0018      	movs	r0, r3
 800e68c:	f7fe f9fc 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e690:	4b67      	ldr	r3, [pc, #412]	; (800e830 <SP100_LCD_OT_Segment+0x610>)
 800e692:	0018      	movs	r0, r3
 800e694:	f7fe f9c0 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e698:	4b66      	ldr	r3, [pc, #408]	; (800e834 <SP100_LCD_OT_Segment+0x614>)
 800e69a:	0018      	movs	r0, r3
 800e69c:	f7fe f9bc 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e6a0:	4b65      	ldr	r3, [pc, #404]	; (800e838 <SP100_LCD_OT_Segment+0x618>)
 800e6a2:	0018      	movs	r0, r3
 800e6a4:	f7fe f9f0 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e6a8:	4b64      	ldr	r3, [pc, #400]	; (800e83c <SP100_LCD_OT_Segment+0x61c>)
 800e6aa:	0018      	movs	r0, r3
 800e6ac:	f7fe f9ec 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e6b0:	e0ad      	b.n	800e80e <SP100_LCD_OT_Segment+0x5ee>
 800e6b2:	4b5c      	ldr	r3, [pc, #368]	; (800e824 <SP100_LCD_OT_Segment+0x604>)
 800e6b4:	0018      	movs	r0, r3
 800e6b6:	f7fe f9e7 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e6ba:	4b5b      	ldr	r3, [pc, #364]	; (800e828 <SP100_LCD_OT_Segment+0x608>)
 800e6bc:	0018      	movs	r0, r3
 800e6be:	f7fe f9ab 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e6c2:	4b5a      	ldr	r3, [pc, #360]	; (800e82c <SP100_LCD_OT_Segment+0x60c>)
 800e6c4:	0018      	movs	r0, r3
 800e6c6:	f7fe f9df 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e6ca:	4b59      	ldr	r3, [pc, #356]	; (800e830 <SP100_LCD_OT_Segment+0x610>)
 800e6cc:	0018      	movs	r0, r3
 800e6ce:	f7fe f9db 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e6d2:	4b58      	ldr	r3, [pc, #352]	; (800e834 <SP100_LCD_OT_Segment+0x614>)
 800e6d4:	0018      	movs	r0, r3
 800e6d6:	f7fe f99f 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e6da:	4b57      	ldr	r3, [pc, #348]	; (800e838 <SP100_LCD_OT_Segment+0x618>)
 800e6dc:	0018      	movs	r0, r3
 800e6de:	f7fe f9d3 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e6e2:	4b56      	ldr	r3, [pc, #344]	; (800e83c <SP100_LCD_OT_Segment+0x61c>)
 800e6e4:	0018      	movs	r0, r3
 800e6e6:	f7fe f9cf 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e6ea:	e090      	b.n	800e80e <SP100_LCD_OT_Segment+0x5ee>
 800e6ec:	4b4d      	ldr	r3, [pc, #308]	; (800e824 <SP100_LCD_OT_Segment+0x604>)
 800e6ee:	0018      	movs	r0, r3
 800e6f0:	f7fe f9ca 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e6f4:	4b4c      	ldr	r3, [pc, #304]	; (800e828 <SP100_LCD_OT_Segment+0x608>)
 800e6f6:	0018      	movs	r0, r3
 800e6f8:	f7fe f98e 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e6fc:	4b4b      	ldr	r3, [pc, #300]	; (800e82c <SP100_LCD_OT_Segment+0x60c>)
 800e6fe:	0018      	movs	r0, r3
 800e700:	f7fe f9c2 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e704:	4b4a      	ldr	r3, [pc, #296]	; (800e830 <SP100_LCD_OT_Segment+0x610>)
 800e706:	0018      	movs	r0, r3
 800e708:	f7fe f9be 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e70c:	4b49      	ldr	r3, [pc, #292]	; (800e834 <SP100_LCD_OT_Segment+0x614>)
 800e70e:	0018      	movs	r0, r3
 800e710:	f7fe f9ba 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e714:	4b48      	ldr	r3, [pc, #288]	; (800e838 <SP100_LCD_OT_Segment+0x618>)
 800e716:	0018      	movs	r0, r3
 800e718:	f7fe f9b6 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e71c:	4b47      	ldr	r3, [pc, #284]	; (800e83c <SP100_LCD_OT_Segment+0x61c>)
 800e71e:	0018      	movs	r0, r3
 800e720:	f7fe f9b2 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e724:	e073      	b.n	800e80e <SP100_LCD_OT_Segment+0x5ee>
 800e726:	4b3f      	ldr	r3, [pc, #252]	; (800e824 <SP100_LCD_OT_Segment+0x604>)
 800e728:	0018      	movs	r0, r3
 800e72a:	f7fe f9ad 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e72e:	4b3e      	ldr	r3, [pc, #248]	; (800e828 <SP100_LCD_OT_Segment+0x608>)
 800e730:	0018      	movs	r0, r3
 800e732:	f7fe f9a9 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e736:	4b3d      	ldr	r3, [pc, #244]	; (800e82c <SP100_LCD_OT_Segment+0x60c>)
 800e738:	0018      	movs	r0, r3
 800e73a:	f7fe f9a5 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e73e:	4b3c      	ldr	r3, [pc, #240]	; (800e830 <SP100_LCD_OT_Segment+0x610>)
 800e740:	0018      	movs	r0, r3
 800e742:	f7fe f969 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e746:	4b3b      	ldr	r3, [pc, #236]	; (800e834 <SP100_LCD_OT_Segment+0x614>)
 800e748:	0018      	movs	r0, r3
 800e74a:	f7fe f965 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e74e:	4b3a      	ldr	r3, [pc, #232]	; (800e838 <SP100_LCD_OT_Segment+0x618>)
 800e750:	0018      	movs	r0, r3
 800e752:	f7fe f961 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e756:	4b39      	ldr	r3, [pc, #228]	; (800e83c <SP100_LCD_OT_Segment+0x61c>)
 800e758:	0018      	movs	r0, r3
 800e75a:	f7fe f95d 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e75e:	e056      	b.n	800e80e <SP100_LCD_OT_Segment+0x5ee>
 800e760:	4b30      	ldr	r3, [pc, #192]	; (800e824 <SP100_LCD_OT_Segment+0x604>)
 800e762:	0018      	movs	r0, r3
 800e764:	f7fe f990 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e768:	4b2f      	ldr	r3, [pc, #188]	; (800e828 <SP100_LCD_OT_Segment+0x608>)
 800e76a:	0018      	movs	r0, r3
 800e76c:	f7fe f98c 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e770:	4b2e      	ldr	r3, [pc, #184]	; (800e82c <SP100_LCD_OT_Segment+0x60c>)
 800e772:	0018      	movs	r0, r3
 800e774:	f7fe f988 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e778:	4b2d      	ldr	r3, [pc, #180]	; (800e830 <SP100_LCD_OT_Segment+0x610>)
 800e77a:	0018      	movs	r0, r3
 800e77c:	f7fe f984 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e780:	4b2c      	ldr	r3, [pc, #176]	; (800e834 <SP100_LCD_OT_Segment+0x614>)
 800e782:	0018      	movs	r0, r3
 800e784:	f7fe f980 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e788:	4b2b      	ldr	r3, [pc, #172]	; (800e838 <SP100_LCD_OT_Segment+0x618>)
 800e78a:	0018      	movs	r0, r3
 800e78c:	f7fe f97c 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e790:	4b2a      	ldr	r3, [pc, #168]	; (800e83c <SP100_LCD_OT_Segment+0x61c>)
 800e792:	0018      	movs	r0, r3
 800e794:	f7fe f978 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e798:	e039      	b.n	800e80e <SP100_LCD_OT_Segment+0x5ee>
 800e79a:	4b22      	ldr	r3, [pc, #136]	; (800e824 <SP100_LCD_OT_Segment+0x604>)
 800e79c:	0018      	movs	r0, r3
 800e79e:	f7fe f973 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e7a2:	4b21      	ldr	r3, [pc, #132]	; (800e828 <SP100_LCD_OT_Segment+0x608>)
 800e7a4:	0018      	movs	r0, r3
 800e7a6:	f7fe f96f 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e7aa:	4b20      	ldr	r3, [pc, #128]	; (800e82c <SP100_LCD_OT_Segment+0x60c>)
 800e7ac:	0018      	movs	r0, r3
 800e7ae:	f7fe f96b 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e7b2:	4b1f      	ldr	r3, [pc, #124]	; (800e830 <SP100_LCD_OT_Segment+0x610>)
 800e7b4:	0018      	movs	r0, r3
 800e7b6:	f7fe f967 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e7ba:	4b1e      	ldr	r3, [pc, #120]	; (800e834 <SP100_LCD_OT_Segment+0x614>)
 800e7bc:	0018      	movs	r0, r3
 800e7be:	f7fe f92b 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e7c2:	4b1d      	ldr	r3, [pc, #116]	; (800e838 <SP100_LCD_OT_Segment+0x618>)
 800e7c4:	0018      	movs	r0, r3
 800e7c6:	f7fe f95f 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e7ca:	4b1c      	ldr	r3, [pc, #112]	; (800e83c <SP100_LCD_OT_Segment+0x61c>)
 800e7cc:	0018      	movs	r0, r3
 800e7ce:	f7fe f95b 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e7d2:	e01c      	b.n	800e80e <SP100_LCD_OT_Segment+0x5ee>
 800e7d4:	4b13      	ldr	r3, [pc, #76]	; (800e824 <SP100_LCD_OT_Segment+0x604>)
 800e7d6:	0018      	movs	r0, r3
 800e7d8:	f7fe f91e 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e7dc:	4b12      	ldr	r3, [pc, #72]	; (800e828 <SP100_LCD_OT_Segment+0x608>)
 800e7de:	0018      	movs	r0, r3
 800e7e0:	f7fe f91a 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e7e4:	4b11      	ldr	r3, [pc, #68]	; (800e82c <SP100_LCD_OT_Segment+0x60c>)
 800e7e6:	0018      	movs	r0, r3
 800e7e8:	f7fe f916 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e7ec:	4b10      	ldr	r3, [pc, #64]	; (800e830 <SP100_LCD_OT_Segment+0x610>)
 800e7ee:	0018      	movs	r0, r3
 800e7f0:	f7fe f912 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e7f4:	4b0f      	ldr	r3, [pc, #60]	; (800e834 <SP100_LCD_OT_Segment+0x614>)
 800e7f6:	0018      	movs	r0, r3
 800e7f8:	f7fe f90e 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e7fc:	4b0e      	ldr	r3, [pc, #56]	; (800e838 <SP100_LCD_OT_Segment+0x618>)
 800e7fe:	0018      	movs	r0, r3
 800e800:	f7fe f90a 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800e804:	4b0d      	ldr	r3, [pc, #52]	; (800e83c <SP100_LCD_OT_Segment+0x61c>)
 800e806:	0018      	movs	r0, r3
 800e808:	f7fe f93e 	bl	800ca88 <SP100_LCD_SEG_ON>
 800e80c:	46c0      	nop			; (mov r8, r8)
 800e80e:	e003      	b.n	800e818 <SP100_LCD_OT_Segment+0x5f8>
 800e810:	46c0      	nop			; (mov r8, r8)
 800e812:	e002      	b.n	800e81a <SP100_LCD_OT_Segment+0x5fa>
 800e814:	46c0      	nop			; (mov r8, r8)
 800e816:	e000      	b.n	800e81a <SP100_LCD_OT_Segment+0x5fa>
 800e818:	46c0      	nop			; (mov r8, r8)
 800e81a:	46c0      	nop			; (mov r8, r8)
 800e81c:	46bd      	mov	sp, r7
 800e81e:	b002      	add	sp, #8
 800e820:	bd80      	pop	{r7, pc}
 800e822:	46c0      	nop			; (mov r8, r8)
 800e824:	08014fb0 	.word	0x08014fb0
 800e828:	08014fb4 	.word	0x08014fb4
 800e82c:	08014fb8 	.word	0x08014fb8
 800e830:	08014fbc 	.word	0x08014fbc
 800e834:	08014fc0 	.word	0x08014fc0
 800e838:	08014fc4 	.word	0x08014fc4
 800e83c:	08014fc8 	.word	0x08014fc8

0800e840 <SP100_LCD_OT_Handler>:
 800e840:	b5b0      	push	{r4, r5, r7, lr}
 800e842:	b096      	sub	sp, #88	; 0x58
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
 800e848:	4b6c      	ldr	r3, [pc, #432]	; (800e9fc <SP100_LCD_OT_Handler+0x1bc>)
 800e84a:	781b      	ldrb	r3, [r3, #0]
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d002      	beq.n	800e856 <SP100_LCD_OT_Handler+0x16>
 800e850:	2b01      	cmp	r3, #1
 800e852:	d054      	beq.n	800e8fe <SP100_LCD_OT_Handler+0xbe>
 800e854:	e0cd      	b.n	800e9f2 <SP100_LCD_OT_Handler+0x1b2>
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	2b00      	cmp	r3, #0
 800e85a:	db2e      	blt.n	800e8ba <SP100_LCD_OT_Handler+0x7a>
 800e85c:	253c      	movs	r5, #60	; 0x3c
 800e85e:	197b      	adds	r3, r7, r5
 800e860:	222b      	movs	r2, #43	; 0x2b
 800e862:	601a      	str	r2, [r3, #0]
 800e864:	2200      	movs	r2, #0
 800e866:	605a      	str	r2, [r3, #4]
 800e868:	2034      	movs	r0, #52	; 0x34
 800e86a:	183b      	adds	r3, r7, r0
 800e86c:	2200      	movs	r2, #0
 800e86e:	601a      	str	r2, [r3, #0]
 800e870:	2200      	movs	r2, #0
 800e872:	605a      	str	r2, [r3, #4]
 800e874:	2300      	movs	r3, #0
 800e876:	657b      	str	r3, [r7, #84]	; 0x54
 800e878:	687a      	ldr	r2, [r7, #4]
 800e87a:	4961      	ldr	r1, [pc, #388]	; (800ea00 <SP100_LCD_OT_Handler+0x1c0>)
 800e87c:	0004      	movs	r4, r0
 800e87e:	183b      	adds	r3, r7, r0
 800e880:	0018      	movs	r0, r3
 800e882:	f003 f869 	bl	8011958 <siprintf>
 800e886:	193a      	adds	r2, r7, r4
 800e888:	197b      	adds	r3, r7, r5
 800e88a:	0011      	movs	r1, r2
 800e88c:	0018      	movs	r0, r3
 800e88e:	f003 f883 	bl	8011998 <strcat>
 800e892:	243c      	movs	r4, #60	; 0x3c
 800e894:	193a      	adds	r2, r7, r4
 800e896:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e898:	18d3      	adds	r3, r2, r3
 800e89a:	781b      	ldrb	r3, [r3, #0]
 800e89c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e89e:	0011      	movs	r1, r2
 800e8a0:	0018      	movs	r0, r3
 800e8a2:	f7ff fcbd 	bl	800e220 <SP100_LCD_OT_Segment>
 800e8a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e8a8:	3301      	adds	r3, #1
 800e8aa:	657b      	str	r3, [r7, #84]	; 0x54
 800e8ac:	193a      	adds	r2, r7, r4
 800e8ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e8b0:	18d3      	adds	r3, r2, r3
 800e8b2:	781b      	ldrb	r3, [r3, #0]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d1ec      	bne.n	800e892 <SP100_LCD_OT_Handler+0x52>
 800e8b8:	e09b      	b.n	800e9f2 <SP100_LCD_OT_Handler+0x1b2>
 800e8ba:	202c      	movs	r0, #44	; 0x2c
 800e8bc:	183b      	adds	r3, r7, r0
 800e8be:	2200      	movs	r2, #0
 800e8c0:	601a      	str	r2, [r3, #0]
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	605a      	str	r2, [r3, #4]
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	653b      	str	r3, [r7, #80]	; 0x50
 800e8ca:	687a      	ldr	r2, [r7, #4]
 800e8cc:	494d      	ldr	r1, [pc, #308]	; (800ea04 <SP100_LCD_OT_Handler+0x1c4>)
 800e8ce:	183b      	adds	r3, r7, r0
 800e8d0:	0018      	movs	r0, r3
 800e8d2:	f003 f841 	bl	8011958 <siprintf>
 800e8d6:	242c      	movs	r4, #44	; 0x2c
 800e8d8:	193a      	adds	r2, r7, r4
 800e8da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8dc:	18d3      	adds	r3, r2, r3
 800e8de:	781b      	ldrb	r3, [r3, #0]
 800e8e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e8e2:	0011      	movs	r1, r2
 800e8e4:	0018      	movs	r0, r3
 800e8e6:	f7ff fc9b 	bl	800e220 <SP100_LCD_OT_Segment>
 800e8ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8ec:	3301      	adds	r3, #1
 800e8ee:	653b      	str	r3, [r7, #80]	; 0x50
 800e8f0:	193a      	adds	r2, r7, r4
 800e8f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8f4:	18d3      	adds	r3, r2, r3
 800e8f6:	781b      	ldrb	r3, [r3, #0]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d1ec      	bne.n	800e8d6 <SP100_LCD_OT_Handler+0x96>
 800e8fc:	e079      	b.n	800e9f2 <SP100_LCD_OT_Handler+0x1b2>
 800e8fe:	4b42      	ldr	r3, [pc, #264]	; (800ea08 <SP100_LCD_OT_Handler+0x1c8>)
 800e900:	781b      	ldrb	r3, [r3, #0]
 800e902:	2b03      	cmp	r3, #3
 800e904:	d153      	bne.n	800e9ae <SP100_LCD_OT_Handler+0x16e>
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	db2e      	blt.n	800e96a <SP100_LCD_OT_Handler+0x12a>
 800e90c:	2524      	movs	r5, #36	; 0x24
 800e90e:	197b      	adds	r3, r7, r5
 800e910:	222b      	movs	r2, #43	; 0x2b
 800e912:	601a      	str	r2, [r3, #0]
 800e914:	2200      	movs	r2, #0
 800e916:	605a      	str	r2, [r3, #4]
 800e918:	201c      	movs	r0, #28
 800e91a:	183b      	adds	r3, r7, r0
 800e91c:	2200      	movs	r2, #0
 800e91e:	601a      	str	r2, [r3, #0]
 800e920:	2200      	movs	r2, #0
 800e922:	605a      	str	r2, [r3, #4]
 800e924:	2300      	movs	r3, #0
 800e926:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e928:	687a      	ldr	r2, [r7, #4]
 800e92a:	4935      	ldr	r1, [pc, #212]	; (800ea00 <SP100_LCD_OT_Handler+0x1c0>)
 800e92c:	0004      	movs	r4, r0
 800e92e:	183b      	adds	r3, r7, r0
 800e930:	0018      	movs	r0, r3
 800e932:	f003 f811 	bl	8011958 <siprintf>
 800e936:	193a      	adds	r2, r7, r4
 800e938:	197b      	adds	r3, r7, r5
 800e93a:	0011      	movs	r1, r2
 800e93c:	0018      	movs	r0, r3
 800e93e:	f003 f82b 	bl	8011998 <strcat>
 800e942:	2424      	movs	r4, #36	; 0x24
 800e944:	193a      	adds	r2, r7, r4
 800e946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e948:	18d3      	adds	r3, r2, r3
 800e94a:	781b      	ldrb	r3, [r3, #0]
 800e94c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e94e:	0011      	movs	r1, r2
 800e950:	0018      	movs	r0, r3
 800e952:	f7ff fc65 	bl	800e220 <SP100_LCD_OT_Segment>
 800e956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e958:	3301      	adds	r3, #1
 800e95a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e95c:	193a      	adds	r2, r7, r4
 800e95e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e960:	18d3      	adds	r3, r2, r3
 800e962:	781b      	ldrb	r3, [r3, #0]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d1ec      	bne.n	800e942 <SP100_LCD_OT_Handler+0x102>
 800e968:	e042      	b.n	800e9f0 <SP100_LCD_OT_Handler+0x1b0>
 800e96a:	2014      	movs	r0, #20
 800e96c:	183b      	adds	r3, r7, r0
 800e96e:	2200      	movs	r2, #0
 800e970:	601a      	str	r2, [r3, #0]
 800e972:	2200      	movs	r2, #0
 800e974:	605a      	str	r2, [r3, #4]
 800e976:	2300      	movs	r3, #0
 800e978:	64bb      	str	r3, [r7, #72]	; 0x48
 800e97a:	687a      	ldr	r2, [r7, #4]
 800e97c:	4921      	ldr	r1, [pc, #132]	; (800ea04 <SP100_LCD_OT_Handler+0x1c4>)
 800e97e:	183b      	adds	r3, r7, r0
 800e980:	0018      	movs	r0, r3
 800e982:	f002 ffe9 	bl	8011958 <siprintf>
 800e986:	2414      	movs	r4, #20
 800e988:	193a      	adds	r2, r7, r4
 800e98a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e98c:	18d3      	adds	r3, r2, r3
 800e98e:	781b      	ldrb	r3, [r3, #0]
 800e990:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e992:	0011      	movs	r1, r2
 800e994:	0018      	movs	r0, r3
 800e996:	f7ff fc43 	bl	800e220 <SP100_LCD_OT_Segment>
 800e99a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e99c:	3301      	adds	r3, #1
 800e99e:	64bb      	str	r3, [r7, #72]	; 0x48
 800e9a0:	193a      	adds	r2, r7, r4
 800e9a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e9a4:	18d3      	adds	r3, r2, r3
 800e9a6:	781b      	ldrb	r3, [r3, #0]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d1ec      	bne.n	800e986 <SP100_LCD_OT_Handler+0x146>
 800e9ac:	e020      	b.n	800e9f0 <SP100_LCD_OT_Handler+0x1b0>
 800e9ae:	210c      	movs	r1, #12
 800e9b0:	187b      	adds	r3, r7, r1
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	601a      	str	r2, [r3, #0]
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	605a      	str	r2, [r3, #4]
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	647b      	str	r3, [r7, #68]	; 0x44
 800e9be:	4a13      	ldr	r2, [pc, #76]	; (800ea0c <SP100_LCD_OT_Handler+0x1cc>)
 800e9c0:	187b      	adds	r3, r7, r1
 800e9c2:	0011      	movs	r1, r2
 800e9c4:	0018      	movs	r0, r3
 800e9c6:	f002 ffc7 	bl	8011958 <siprintf>
 800e9ca:	240c      	movs	r4, #12
 800e9cc:	193a      	adds	r2, r7, r4
 800e9ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9d0:	18d3      	adds	r3, r2, r3
 800e9d2:	781b      	ldrb	r3, [r3, #0]
 800e9d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e9d6:	0011      	movs	r1, r2
 800e9d8:	0018      	movs	r0, r3
 800e9da:	f7ff fc21 	bl	800e220 <SP100_LCD_OT_Segment>
 800e9de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9e0:	3301      	adds	r3, #1
 800e9e2:	647b      	str	r3, [r7, #68]	; 0x44
 800e9e4:	193a      	adds	r2, r7, r4
 800e9e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e9e8:	18d3      	adds	r3, r2, r3
 800e9ea:	781b      	ldrb	r3, [r3, #0]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d1ec      	bne.n	800e9ca <SP100_LCD_OT_Handler+0x18a>
 800e9f0:	46c0      	nop			; (mov r8, r8)
 800e9f2:	46c0      	nop			; (mov r8, r8)
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	b016      	add	sp, #88	; 0x58
 800e9f8:	bdb0      	pop	{r4, r5, r7, pc}
 800e9fa:	46c0      	nop			; (mov r8, r8)
 800e9fc:	20000011 	.word	0x20000011
 800ea00:	08014d10 	.word	0x08014d10
 800ea04:	08014d18 	.word	0x08014d18
 800ea08:	20000570 	.word	0x20000570
 800ea0c:	08014d20 	.word	0x08014d20

0800ea10 <SP100_LCD_Snsr_Index_Handler>:
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b082      	sub	sp, #8
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	2b04      	cmp	r3, #4
 800ea1c:	d068      	beq.n	800eaf0 <SP100_LCD_Snsr_Index_Handler+0xe0>
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	2b04      	cmp	r3, #4
 800ea22:	dd00      	ble.n	800ea26 <SP100_LCD_Snsr_Index_Handler+0x16>
 800ea24:	e081      	b.n	800eb2a <SP100_LCD_Snsr_Index_Handler+0x11a>
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	2b03      	cmp	r3, #3
 800ea2a:	d044      	beq.n	800eab6 <SP100_LCD_Snsr_Index_Handler+0xa6>
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	2b03      	cmp	r3, #3
 800ea30:	dd00      	ble.n	800ea34 <SP100_LCD_Snsr_Index_Handler+0x24>
 800ea32:	e07a      	b.n	800eb2a <SP100_LCD_Snsr_Index_Handler+0x11a>
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	2b01      	cmp	r3, #1
 800ea38:	d003      	beq.n	800ea42 <SP100_LCD_Snsr_Index_Handler+0x32>
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	2b02      	cmp	r3, #2
 800ea3e:	d01d      	beq.n	800ea7c <SP100_LCD_Snsr_Index_Handler+0x6c>
 800ea40:	e073      	b.n	800eb2a <SP100_LCD_Snsr_Index_Handler+0x11a>
 800ea42:	4b5c      	ldr	r3, [pc, #368]	; (800ebb4 <SP100_LCD_Snsr_Index_Handler+0x1a4>)
 800ea44:	0018      	movs	r0, r3
 800ea46:	f7fd ffe7 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ea4a:	4b5b      	ldr	r3, [pc, #364]	; (800ebb8 <SP100_LCD_Snsr_Index_Handler+0x1a8>)
 800ea4c:	0018      	movs	r0, r3
 800ea4e:	f7fe f81b 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ea52:	4b5a      	ldr	r3, [pc, #360]	; (800ebbc <SP100_LCD_Snsr_Index_Handler+0x1ac>)
 800ea54:	0018      	movs	r0, r3
 800ea56:	f7fe f817 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ea5a:	4b59      	ldr	r3, [pc, #356]	; (800ebc0 <SP100_LCD_Snsr_Index_Handler+0x1b0>)
 800ea5c:	0018      	movs	r0, r3
 800ea5e:	f7fd ffdb 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ea62:	4b58      	ldr	r3, [pc, #352]	; (800ebc4 <SP100_LCD_Snsr_Index_Handler+0x1b4>)
 800ea64:	0018      	movs	r0, r3
 800ea66:	f7fd ffd7 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ea6a:	4b57      	ldr	r3, [pc, #348]	; (800ebc8 <SP100_LCD_Snsr_Index_Handler+0x1b8>)
 800ea6c:	0018      	movs	r0, r3
 800ea6e:	f7fd ffd3 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ea72:	4b56      	ldr	r3, [pc, #344]	; (800ebcc <SP100_LCD_Snsr_Index_Handler+0x1bc>)
 800ea74:	0018      	movs	r0, r3
 800ea76:	f7fd ffcf 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ea7a:	e056      	b.n	800eb2a <SP100_LCD_Snsr_Index_Handler+0x11a>
 800ea7c:	4b4d      	ldr	r3, [pc, #308]	; (800ebb4 <SP100_LCD_Snsr_Index_Handler+0x1a4>)
 800ea7e:	0018      	movs	r0, r3
 800ea80:	f7fe f802 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ea84:	4b4c      	ldr	r3, [pc, #304]	; (800ebb8 <SP100_LCD_Snsr_Index_Handler+0x1a8>)
 800ea86:	0018      	movs	r0, r3
 800ea88:	f7fd fffe 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ea8c:	4b4b      	ldr	r3, [pc, #300]	; (800ebbc <SP100_LCD_Snsr_Index_Handler+0x1ac>)
 800ea8e:	0018      	movs	r0, r3
 800ea90:	f7fd ffc2 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ea94:	4b4a      	ldr	r3, [pc, #296]	; (800ebc0 <SP100_LCD_Snsr_Index_Handler+0x1b0>)
 800ea96:	0018      	movs	r0, r3
 800ea98:	f7fd fff6 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ea9c:	4b49      	ldr	r3, [pc, #292]	; (800ebc4 <SP100_LCD_Snsr_Index_Handler+0x1b4>)
 800ea9e:	0018      	movs	r0, r3
 800eaa0:	f7fd fff2 	bl	800ca88 <SP100_LCD_SEG_ON>
 800eaa4:	4b48      	ldr	r3, [pc, #288]	; (800ebc8 <SP100_LCD_Snsr_Index_Handler+0x1b8>)
 800eaa6:	0018      	movs	r0, r3
 800eaa8:	f7fd ffb6 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800eaac:	4b47      	ldr	r3, [pc, #284]	; (800ebcc <SP100_LCD_Snsr_Index_Handler+0x1bc>)
 800eaae:	0018      	movs	r0, r3
 800eab0:	f7fd ffea 	bl	800ca88 <SP100_LCD_SEG_ON>
 800eab4:	e039      	b.n	800eb2a <SP100_LCD_Snsr_Index_Handler+0x11a>
 800eab6:	4b3f      	ldr	r3, [pc, #252]	; (800ebb4 <SP100_LCD_Snsr_Index_Handler+0x1a4>)
 800eab8:	0018      	movs	r0, r3
 800eaba:	f7fd ffe5 	bl	800ca88 <SP100_LCD_SEG_ON>
 800eabe:	4b3e      	ldr	r3, [pc, #248]	; (800ebb8 <SP100_LCD_Snsr_Index_Handler+0x1a8>)
 800eac0:	0018      	movs	r0, r3
 800eac2:	f7fd ffe1 	bl	800ca88 <SP100_LCD_SEG_ON>
 800eac6:	4b3d      	ldr	r3, [pc, #244]	; (800ebbc <SP100_LCD_Snsr_Index_Handler+0x1ac>)
 800eac8:	0018      	movs	r0, r3
 800eaca:	f7fd ffdd 	bl	800ca88 <SP100_LCD_SEG_ON>
 800eace:	4b3c      	ldr	r3, [pc, #240]	; (800ebc0 <SP100_LCD_Snsr_Index_Handler+0x1b0>)
 800ead0:	0018      	movs	r0, r3
 800ead2:	f7fd ffd9 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ead6:	4b3b      	ldr	r3, [pc, #236]	; (800ebc4 <SP100_LCD_Snsr_Index_Handler+0x1b4>)
 800ead8:	0018      	movs	r0, r3
 800eada:	f7fd ff9d 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800eade:	4b3a      	ldr	r3, [pc, #232]	; (800ebc8 <SP100_LCD_Snsr_Index_Handler+0x1b8>)
 800eae0:	0018      	movs	r0, r3
 800eae2:	f7fd ff99 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800eae6:	4b39      	ldr	r3, [pc, #228]	; (800ebcc <SP100_LCD_Snsr_Index_Handler+0x1bc>)
 800eae8:	0018      	movs	r0, r3
 800eaea:	f7fd ffcd 	bl	800ca88 <SP100_LCD_SEG_ON>
 800eaee:	e01c      	b.n	800eb2a <SP100_LCD_Snsr_Index_Handler+0x11a>
 800eaf0:	4b30      	ldr	r3, [pc, #192]	; (800ebb4 <SP100_LCD_Snsr_Index_Handler+0x1a4>)
 800eaf2:	0018      	movs	r0, r3
 800eaf4:	f7fd ff90 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800eaf8:	4b2f      	ldr	r3, [pc, #188]	; (800ebb8 <SP100_LCD_Snsr_Index_Handler+0x1a8>)
 800eafa:	0018      	movs	r0, r3
 800eafc:	f7fd ffc4 	bl	800ca88 <SP100_LCD_SEG_ON>
 800eb00:	4b2e      	ldr	r3, [pc, #184]	; (800ebbc <SP100_LCD_Snsr_Index_Handler+0x1ac>)
 800eb02:	0018      	movs	r0, r3
 800eb04:	f7fd ffc0 	bl	800ca88 <SP100_LCD_SEG_ON>
 800eb08:	4b2d      	ldr	r3, [pc, #180]	; (800ebc0 <SP100_LCD_Snsr_Index_Handler+0x1b0>)
 800eb0a:	0018      	movs	r0, r3
 800eb0c:	f7fd ff84 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800eb10:	4b2c      	ldr	r3, [pc, #176]	; (800ebc4 <SP100_LCD_Snsr_Index_Handler+0x1b4>)
 800eb12:	0018      	movs	r0, r3
 800eb14:	f7fd ff80 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800eb18:	4b2b      	ldr	r3, [pc, #172]	; (800ebc8 <SP100_LCD_Snsr_Index_Handler+0x1b8>)
 800eb1a:	0018      	movs	r0, r3
 800eb1c:	f7fd ffb4 	bl	800ca88 <SP100_LCD_SEG_ON>
 800eb20:	4b2a      	ldr	r3, [pc, #168]	; (800ebcc <SP100_LCD_Snsr_Index_Handler+0x1bc>)
 800eb22:	0018      	movs	r0, r3
 800eb24:	f7fd ffb0 	bl	800ca88 <SP100_LCD_SEG_ON>
 800eb28:	46c0      	nop			; (mov r8, r8)
 800eb2a:	4b29      	ldr	r3, [pc, #164]	; (800ebd0 <SP100_LCD_Snsr_Index_Handler+0x1c0>)
 800eb2c:	0018      	movs	r0, r3
 800eb2e:	f7fd ff73 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800eb32:	4b28      	ldr	r3, [pc, #160]	; (800ebd4 <SP100_LCD_Snsr_Index_Handler+0x1c4>)
 800eb34:	0018      	movs	r0, r3
 800eb36:	f7fd ff6f 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800eb3a:	4b27      	ldr	r3, [pc, #156]	; (800ebd8 <SP100_LCD_Snsr_Index_Handler+0x1c8>)
 800eb3c:	0018      	movs	r0, r3
 800eb3e:	f7fd ff6b 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800eb42:	4b26      	ldr	r3, [pc, #152]	; (800ebdc <SP100_LCD_Snsr_Index_Handler+0x1cc>)
 800eb44:	0018      	movs	r0, r3
 800eb46:	f7fd ff67 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800eb4a:	4b25      	ldr	r3, [pc, #148]	; (800ebe0 <SP100_LCD_Snsr_Index_Handler+0x1d0>)
 800eb4c:	0018      	movs	r0, r3
 800eb4e:	f7fd ff63 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800eb52:	4b24      	ldr	r3, [pc, #144]	; (800ebe4 <SP100_LCD_Snsr_Index_Handler+0x1d4>)
 800eb54:	0018      	movs	r0, r3
 800eb56:	f7fd ff5f 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800eb5a:	4b23      	ldr	r3, [pc, #140]	; (800ebe8 <SP100_LCD_Snsr_Index_Handler+0x1d8>)
 800eb5c:	0018      	movs	r0, r3
 800eb5e:	f7fd ff5b 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800eb62:	4b22      	ldr	r3, [pc, #136]	; (800ebec <SP100_LCD_Snsr_Index_Handler+0x1dc>)
 800eb64:	0018      	movs	r0, r3
 800eb66:	f7fd ff57 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800eb6a:	4b21      	ldr	r3, [pc, #132]	; (800ebf0 <SP100_LCD_Snsr_Index_Handler+0x1e0>)
 800eb6c:	0018      	movs	r0, r3
 800eb6e:	f7fd ff53 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800eb72:	4b20      	ldr	r3, [pc, #128]	; (800ebf4 <SP100_LCD_Snsr_Index_Handler+0x1e4>)
 800eb74:	0018      	movs	r0, r3
 800eb76:	f7fd ff4f 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800eb7a:	4b1f      	ldr	r3, [pc, #124]	; (800ebf8 <SP100_LCD_Snsr_Index_Handler+0x1e8>)
 800eb7c:	0018      	movs	r0, r3
 800eb7e:	f7fd ff4b 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800eb82:	4b1e      	ldr	r3, [pc, #120]	; (800ebfc <SP100_LCD_Snsr_Index_Handler+0x1ec>)
 800eb84:	0018      	movs	r0, r3
 800eb86:	f7fd ff47 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800eb8a:	4b1d      	ldr	r3, [pc, #116]	; (800ec00 <SP100_LCD_Snsr_Index_Handler+0x1f0>)
 800eb8c:	0018      	movs	r0, r3
 800eb8e:	f7fd ff43 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800eb92:	4b1c      	ldr	r3, [pc, #112]	; (800ec04 <SP100_LCD_Snsr_Index_Handler+0x1f4>)
 800eb94:	0018      	movs	r0, r3
 800eb96:	f7fd ff3f 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800eb9a:	4b1b      	ldr	r3, [pc, #108]	; (800ec08 <SP100_LCD_Snsr_Index_Handler+0x1f8>)
 800eb9c:	0018      	movs	r0, r3
 800eb9e:	f7fd ff3b 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800eba2:	4b1a      	ldr	r3, [pc, #104]	; (800ec0c <SP100_LCD_Snsr_Index_Handler+0x1fc>)
 800eba4:	0018      	movs	r0, r3
 800eba6:	f7fd ff37 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ebaa:	46c0      	nop			; (mov r8, r8)
 800ebac:	46bd      	mov	sp, r7
 800ebae:	b002      	add	sp, #8
 800ebb0:	bd80      	pop	{r7, pc}
 800ebb2:	46c0      	nop			; (mov r8, r8)
 800ebb4:	08014f34 	.word	0x08014f34
 800ebb8:	08014f38 	.word	0x08014f38
 800ebbc:	08014f3c 	.word	0x08014f3c
 800ebc0:	08014f40 	.word	0x08014f40
 800ebc4:	08014f44 	.word	0x08014f44
 800ebc8:	08014f48 	.word	0x08014f48
 800ebcc:	08014f4c 	.word	0x08014f4c
 800ebd0:	08014f50 	.word	0x08014f50
 800ebd4:	08014f54 	.word	0x08014f54
 800ebd8:	08014f58 	.word	0x08014f58
 800ebdc:	08014f5c 	.word	0x08014f5c
 800ebe0:	08014f60 	.word	0x08014f60
 800ebe4:	08014f64 	.word	0x08014f64
 800ebe8:	08014f68 	.word	0x08014f68
 800ebec:	08014f2c 	.word	0x08014f2c
 800ebf0:	08014f30 	.word	0x08014f30
 800ebf4:	08014f6c 	.word	0x08014f6c
 800ebf8:	08014f70 	.word	0x08014f70
 800ebfc:	08014f74 	.word	0x08014f74
 800ec00:	08014f78 	.word	0x08014f78
 800ec04:	08014f7c 	.word	0x08014f7c
 800ec08:	08014f80 	.word	0x08014f80
 800ec0c:	08014f84 	.word	0x08014f84

0800ec10 <SP100_LCD_DIAG_Snsr_Handler>:
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b082      	sub	sp, #8
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	0002      	movs	r2, r0
 800ec18:	1dfb      	adds	r3, r7, #7
 800ec1a:	701a      	strb	r2, [r3, #0]
 800ec1c:	4b7d      	ldr	r3, [pc, #500]	; (800ee14 <SP100_LCD_DIAG_Snsr_Handler+0x204>)
 800ec1e:	0018      	movs	r0, r3
 800ec20:	f7fd ff32 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ec24:	4b7c      	ldr	r3, [pc, #496]	; (800ee18 <SP100_LCD_DIAG_Snsr_Handler+0x208>)
 800ec26:	0018      	movs	r0, r3
 800ec28:	f7fd fef6 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ec2c:	4b7b      	ldr	r3, [pc, #492]	; (800ee1c <SP100_LCD_DIAG_Snsr_Handler+0x20c>)
 800ec2e:	0018      	movs	r0, r3
 800ec30:	f7fd ff2a 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ec34:	4b7a      	ldr	r3, [pc, #488]	; (800ee20 <SP100_LCD_DIAG_Snsr_Handler+0x210>)
 800ec36:	0018      	movs	r0, r3
 800ec38:	f7fd ff26 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ec3c:	4b79      	ldr	r3, [pc, #484]	; (800ee24 <SP100_LCD_DIAG_Snsr_Handler+0x214>)
 800ec3e:	0018      	movs	r0, r3
 800ec40:	f7fd feea 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ec44:	4b78      	ldr	r3, [pc, #480]	; (800ee28 <SP100_LCD_DIAG_Snsr_Handler+0x218>)
 800ec46:	0018      	movs	r0, r3
 800ec48:	f7fd ff1e 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ec4c:	4b77      	ldr	r3, [pc, #476]	; (800ee2c <SP100_LCD_DIAG_Snsr_Handler+0x21c>)
 800ec4e:	0018      	movs	r0, r3
 800ec50:	f7fd ff1a 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ec54:	4b76      	ldr	r3, [pc, #472]	; (800ee30 <SP100_LCD_DIAG_Snsr_Handler+0x220>)
 800ec56:	0018      	movs	r0, r3
 800ec58:	f7fd fede 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ec5c:	4b75      	ldr	r3, [pc, #468]	; (800ee34 <SP100_LCD_DIAG_Snsr_Handler+0x224>)
 800ec5e:	0018      	movs	r0, r3
 800ec60:	f7fd ff12 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ec64:	4b74      	ldr	r3, [pc, #464]	; (800ee38 <SP100_LCD_DIAG_Snsr_Handler+0x228>)
 800ec66:	0018      	movs	r0, r3
 800ec68:	f7fd ff0e 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ec6c:	4b73      	ldr	r3, [pc, #460]	; (800ee3c <SP100_LCD_DIAG_Snsr_Handler+0x22c>)
 800ec6e:	0018      	movs	r0, r3
 800ec70:	f7fd fed2 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ec74:	4b72      	ldr	r3, [pc, #456]	; (800ee40 <SP100_LCD_DIAG_Snsr_Handler+0x230>)
 800ec76:	0018      	movs	r0, r3
 800ec78:	f7fd fece 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ec7c:	4b71      	ldr	r3, [pc, #452]	; (800ee44 <SP100_LCD_DIAG_Snsr_Handler+0x234>)
 800ec7e:	0018      	movs	r0, r3
 800ec80:	f7fd feca 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ec84:	4b70      	ldr	r3, [pc, #448]	; (800ee48 <SP100_LCD_DIAG_Snsr_Handler+0x238>)
 800ec86:	0018      	movs	r0, r3
 800ec88:	f7fd fec6 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ec8c:	4b6f      	ldr	r3, [pc, #444]	; (800ee4c <SP100_LCD_DIAG_Snsr_Handler+0x23c>)
 800ec8e:	0018      	movs	r0, r3
 800ec90:	f7fd fec2 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ec94:	4b6e      	ldr	r3, [pc, #440]	; (800ee50 <SP100_LCD_DIAG_Snsr_Handler+0x240>)
 800ec96:	0018      	movs	r0, r3
 800ec98:	f7fd fef6 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ec9c:	1dfb      	adds	r3, r7, #7
 800ec9e:	781b      	ldrb	r3, [r3, #0]
 800eca0:	2b05      	cmp	r3, #5
 800eca2:	d900      	bls.n	800eca6 <SP100_LCD_DIAG_Snsr_Handler+0x96>
 800eca4:	e0b2      	b.n	800ee0c <SP100_LCD_DIAG_Snsr_Handler+0x1fc>
 800eca6:	009a      	lsls	r2, r3, #2
 800eca8:	4b6a      	ldr	r3, [pc, #424]	; (800ee54 <SP100_LCD_DIAG_Snsr_Handler+0x244>)
 800ecaa:	18d3      	adds	r3, r2, r3
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	469f      	mov	pc, r3
 800ecb0:	4b69      	ldr	r3, [pc, #420]	; (800ee58 <SP100_LCD_DIAG_Snsr_Handler+0x248>)
 800ecb2:	0018      	movs	r0, r3
 800ecb4:	f7fd feb0 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ecb8:	4b68      	ldr	r3, [pc, #416]	; (800ee5c <SP100_LCD_DIAG_Snsr_Handler+0x24c>)
 800ecba:	0018      	movs	r0, r3
 800ecbc:	f7fd feac 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ecc0:	4b67      	ldr	r3, [pc, #412]	; (800ee60 <SP100_LCD_DIAG_Snsr_Handler+0x250>)
 800ecc2:	0018      	movs	r0, r3
 800ecc4:	f7fd fea8 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ecc8:	4b66      	ldr	r3, [pc, #408]	; (800ee64 <SP100_LCD_DIAG_Snsr_Handler+0x254>)
 800ecca:	0018      	movs	r0, r3
 800eccc:	f7fd fea4 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ecd0:	4b65      	ldr	r3, [pc, #404]	; (800ee68 <SP100_LCD_DIAG_Snsr_Handler+0x258>)
 800ecd2:	0018      	movs	r0, r3
 800ecd4:	f7fd fea0 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ecd8:	4b64      	ldr	r3, [pc, #400]	; (800ee6c <SP100_LCD_DIAG_Snsr_Handler+0x25c>)
 800ecda:	0018      	movs	r0, r3
 800ecdc:	f7fd fe9c 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ece0:	4b63      	ldr	r3, [pc, #396]	; (800ee70 <SP100_LCD_DIAG_Snsr_Handler+0x260>)
 800ece2:	0018      	movs	r0, r3
 800ece4:	f7fd fe98 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ece8:	e090      	b.n	800ee0c <SP100_LCD_DIAG_Snsr_Handler+0x1fc>
 800ecea:	4b5b      	ldr	r3, [pc, #364]	; (800ee58 <SP100_LCD_DIAG_Snsr_Handler+0x248>)
 800ecec:	0018      	movs	r0, r3
 800ecee:	f7fd fecb 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ecf2:	4b5a      	ldr	r3, [pc, #360]	; (800ee5c <SP100_LCD_DIAG_Snsr_Handler+0x24c>)
 800ecf4:	0018      	movs	r0, r3
 800ecf6:	f7fd fec7 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ecfa:	4b59      	ldr	r3, [pc, #356]	; (800ee60 <SP100_LCD_DIAG_Snsr_Handler+0x250>)
 800ecfc:	0018      	movs	r0, r3
 800ecfe:	f7fd fec3 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ed02:	4b58      	ldr	r3, [pc, #352]	; (800ee64 <SP100_LCD_DIAG_Snsr_Handler+0x254>)
 800ed04:	0018      	movs	r0, r3
 800ed06:	f7fd febf 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ed0a:	4b57      	ldr	r3, [pc, #348]	; (800ee68 <SP100_LCD_DIAG_Snsr_Handler+0x258>)
 800ed0c:	0018      	movs	r0, r3
 800ed0e:	f7fd febb 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ed12:	4b56      	ldr	r3, [pc, #344]	; (800ee6c <SP100_LCD_DIAG_Snsr_Handler+0x25c>)
 800ed14:	0018      	movs	r0, r3
 800ed16:	f7fd feb7 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ed1a:	4b55      	ldr	r3, [pc, #340]	; (800ee70 <SP100_LCD_DIAG_Snsr_Handler+0x260>)
 800ed1c:	0018      	movs	r0, r3
 800ed1e:	f7fd fe7b 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ed22:	e073      	b.n	800ee0c <SP100_LCD_DIAG_Snsr_Handler+0x1fc>
 800ed24:	4b4c      	ldr	r3, [pc, #304]	; (800ee58 <SP100_LCD_DIAG_Snsr_Handler+0x248>)
 800ed26:	0018      	movs	r0, r3
 800ed28:	f7fd fe76 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ed2c:	4b4b      	ldr	r3, [pc, #300]	; (800ee5c <SP100_LCD_DIAG_Snsr_Handler+0x24c>)
 800ed2e:	0018      	movs	r0, r3
 800ed30:	f7fd feaa 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ed34:	4b4a      	ldr	r3, [pc, #296]	; (800ee60 <SP100_LCD_DIAG_Snsr_Handler+0x250>)
 800ed36:	0018      	movs	r0, r3
 800ed38:	f7fd fea6 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ed3c:	4b49      	ldr	r3, [pc, #292]	; (800ee64 <SP100_LCD_DIAG_Snsr_Handler+0x254>)
 800ed3e:	0018      	movs	r0, r3
 800ed40:	f7fd fe6a 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ed44:	4b48      	ldr	r3, [pc, #288]	; (800ee68 <SP100_LCD_DIAG_Snsr_Handler+0x258>)
 800ed46:	0018      	movs	r0, r3
 800ed48:	f7fd fe66 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ed4c:	4b47      	ldr	r3, [pc, #284]	; (800ee6c <SP100_LCD_DIAG_Snsr_Handler+0x25c>)
 800ed4e:	0018      	movs	r0, r3
 800ed50:	f7fd fe62 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ed54:	4b46      	ldr	r3, [pc, #280]	; (800ee70 <SP100_LCD_DIAG_Snsr_Handler+0x260>)
 800ed56:	0018      	movs	r0, r3
 800ed58:	f7fd fe5e 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ed5c:	e056      	b.n	800ee0c <SP100_LCD_DIAG_Snsr_Handler+0x1fc>
 800ed5e:	4b3e      	ldr	r3, [pc, #248]	; (800ee58 <SP100_LCD_DIAG_Snsr_Handler+0x248>)
 800ed60:	0018      	movs	r0, r3
 800ed62:	f7fd fe91 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ed66:	4b3d      	ldr	r3, [pc, #244]	; (800ee5c <SP100_LCD_DIAG_Snsr_Handler+0x24c>)
 800ed68:	0018      	movs	r0, r3
 800ed6a:	f7fd fe8d 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ed6e:	4b3c      	ldr	r3, [pc, #240]	; (800ee60 <SP100_LCD_DIAG_Snsr_Handler+0x250>)
 800ed70:	0018      	movs	r0, r3
 800ed72:	f7fd fe51 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ed76:	4b3b      	ldr	r3, [pc, #236]	; (800ee64 <SP100_LCD_DIAG_Snsr_Handler+0x254>)
 800ed78:	0018      	movs	r0, r3
 800ed7a:	f7fd fe85 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ed7e:	4b3a      	ldr	r3, [pc, #232]	; (800ee68 <SP100_LCD_DIAG_Snsr_Handler+0x258>)
 800ed80:	0018      	movs	r0, r3
 800ed82:	f7fd fe81 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ed86:	4b39      	ldr	r3, [pc, #228]	; (800ee6c <SP100_LCD_DIAG_Snsr_Handler+0x25c>)
 800ed88:	0018      	movs	r0, r3
 800ed8a:	f7fd fe45 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ed8e:	4b38      	ldr	r3, [pc, #224]	; (800ee70 <SP100_LCD_DIAG_Snsr_Handler+0x260>)
 800ed90:	0018      	movs	r0, r3
 800ed92:	f7fd fe79 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ed96:	e039      	b.n	800ee0c <SP100_LCD_DIAG_Snsr_Handler+0x1fc>
 800ed98:	4b2f      	ldr	r3, [pc, #188]	; (800ee58 <SP100_LCD_DIAG_Snsr_Handler+0x248>)
 800ed9a:	0018      	movs	r0, r3
 800ed9c:	f7fd fe74 	bl	800ca88 <SP100_LCD_SEG_ON>
 800eda0:	4b2e      	ldr	r3, [pc, #184]	; (800ee5c <SP100_LCD_DIAG_Snsr_Handler+0x24c>)
 800eda2:	0018      	movs	r0, r3
 800eda4:	f7fd fe70 	bl	800ca88 <SP100_LCD_SEG_ON>
 800eda8:	4b2d      	ldr	r3, [pc, #180]	; (800ee60 <SP100_LCD_DIAG_Snsr_Handler+0x250>)
 800edaa:	0018      	movs	r0, r3
 800edac:	f7fd fe6c 	bl	800ca88 <SP100_LCD_SEG_ON>
 800edb0:	4b2c      	ldr	r3, [pc, #176]	; (800ee64 <SP100_LCD_DIAG_Snsr_Handler+0x254>)
 800edb2:	0018      	movs	r0, r3
 800edb4:	f7fd fe68 	bl	800ca88 <SP100_LCD_SEG_ON>
 800edb8:	4b2b      	ldr	r3, [pc, #172]	; (800ee68 <SP100_LCD_DIAG_Snsr_Handler+0x258>)
 800edba:	0018      	movs	r0, r3
 800edbc:	f7fd fe2c 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800edc0:	4b2a      	ldr	r3, [pc, #168]	; (800ee6c <SP100_LCD_DIAG_Snsr_Handler+0x25c>)
 800edc2:	0018      	movs	r0, r3
 800edc4:	f7fd fe28 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800edc8:	4b29      	ldr	r3, [pc, #164]	; (800ee70 <SP100_LCD_DIAG_Snsr_Handler+0x260>)
 800edca:	0018      	movs	r0, r3
 800edcc:	f7fd fe5c 	bl	800ca88 <SP100_LCD_SEG_ON>
 800edd0:	e01c      	b.n	800ee0c <SP100_LCD_DIAG_Snsr_Handler+0x1fc>
 800edd2:	4b21      	ldr	r3, [pc, #132]	; (800ee58 <SP100_LCD_DIAG_Snsr_Handler+0x248>)
 800edd4:	0018      	movs	r0, r3
 800edd6:	f7fd fe1f 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800edda:	4b20      	ldr	r3, [pc, #128]	; (800ee5c <SP100_LCD_DIAG_Snsr_Handler+0x24c>)
 800eddc:	0018      	movs	r0, r3
 800edde:	f7fd fe53 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ede2:	4b1f      	ldr	r3, [pc, #124]	; (800ee60 <SP100_LCD_DIAG_Snsr_Handler+0x250>)
 800ede4:	0018      	movs	r0, r3
 800ede6:	f7fd fe4f 	bl	800ca88 <SP100_LCD_SEG_ON>
 800edea:	4b1e      	ldr	r3, [pc, #120]	; (800ee64 <SP100_LCD_DIAG_Snsr_Handler+0x254>)
 800edec:	0018      	movs	r0, r3
 800edee:	f7fd fe13 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800edf2:	4b1d      	ldr	r3, [pc, #116]	; (800ee68 <SP100_LCD_DIAG_Snsr_Handler+0x258>)
 800edf4:	0018      	movs	r0, r3
 800edf6:	f7fd fe0f 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800edfa:	4b1c      	ldr	r3, [pc, #112]	; (800ee6c <SP100_LCD_DIAG_Snsr_Handler+0x25c>)
 800edfc:	0018      	movs	r0, r3
 800edfe:	f7fd fe43 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ee02:	4b1b      	ldr	r3, [pc, #108]	; (800ee70 <SP100_LCD_DIAG_Snsr_Handler+0x260>)
 800ee04:	0018      	movs	r0, r3
 800ee06:	f7fd fe3f 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ee0a:	46c0      	nop			; (mov r8, r8)
 800ee0c:	46c0      	nop			; (mov r8, r8)
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	b002      	add	sp, #8
 800ee12:	bd80      	pop	{r7, pc}
 800ee14:	08014f34 	.word	0x08014f34
 800ee18:	08014f38 	.word	0x08014f38
 800ee1c:	08014f3c 	.word	0x08014f3c
 800ee20:	08014f40 	.word	0x08014f40
 800ee24:	08014f44 	.word	0x08014f44
 800ee28:	08014f48 	.word	0x08014f48
 800ee2c:	08014f4c 	.word	0x08014f4c
 800ee30:	08014f50 	.word	0x08014f50
 800ee34:	08014f54 	.word	0x08014f54
 800ee38:	08014f58 	.word	0x08014f58
 800ee3c:	08014f5c 	.word	0x08014f5c
 800ee40:	08014f60 	.word	0x08014f60
 800ee44:	08014f64 	.word	0x08014f64
 800ee48:	08014f68 	.word	0x08014f68
 800ee4c:	08014f2c 	.word	0x08014f2c
 800ee50:	08014f30 	.word	0x08014f30
 800ee54:	080151e0 	.word	0x080151e0
 800ee58:	08014f6c 	.word	0x08014f6c
 800ee5c:	08014f70 	.word	0x08014f70
 800ee60:	08014f74 	.word	0x08014f74
 800ee64:	08014f78 	.word	0x08014f78
 800ee68:	08014f7c 	.word	0x08014f7c
 800ee6c:	08014f80 	.word	0x08014f80
 800ee70:	08014f84 	.word	0x08014f84

0800ee74 <SP100_LCD_DIAG_Actr_Handler>:
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b082      	sub	sp, #8
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	0002      	movs	r2, r0
 800ee7c:	1dfb      	adds	r3, r7, #7
 800ee7e:	701a      	strb	r2, [r3, #0]
 800ee80:	4b7d      	ldr	r3, [pc, #500]	; (800f078 <SP100_LCD_DIAG_Actr_Handler+0x204>)
 800ee82:	0018      	movs	r0, r3
 800ee84:	f7fd fe00 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ee88:	4b7c      	ldr	r3, [pc, #496]	; (800f07c <SP100_LCD_DIAG_Actr_Handler+0x208>)
 800ee8a:	0018      	movs	r0, r3
 800ee8c:	f7fd fdc4 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ee90:	4b7b      	ldr	r3, [pc, #492]	; (800f080 <SP100_LCD_DIAG_Actr_Handler+0x20c>)
 800ee92:	0018      	movs	r0, r3
 800ee94:	f7fd fdf8 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ee98:	4b7a      	ldr	r3, [pc, #488]	; (800f084 <SP100_LCD_DIAG_Actr_Handler+0x210>)
 800ee9a:	0018      	movs	r0, r3
 800ee9c:	f7fd fdf4 	bl	800ca88 <SP100_LCD_SEG_ON>
 800eea0:	4b79      	ldr	r3, [pc, #484]	; (800f088 <SP100_LCD_DIAG_Actr_Handler+0x214>)
 800eea2:	0018      	movs	r0, r3
 800eea4:	f7fd fdb8 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800eea8:	4b78      	ldr	r3, [pc, #480]	; (800f08c <SP100_LCD_DIAG_Actr_Handler+0x218>)
 800eeaa:	0018      	movs	r0, r3
 800eeac:	f7fd fdec 	bl	800ca88 <SP100_LCD_SEG_ON>
 800eeb0:	4b77      	ldr	r3, [pc, #476]	; (800f090 <SP100_LCD_DIAG_Actr_Handler+0x21c>)
 800eeb2:	0018      	movs	r0, r3
 800eeb4:	f7fd fde8 	bl	800ca88 <SP100_LCD_SEG_ON>
 800eeb8:	4b76      	ldr	r3, [pc, #472]	; (800f094 <SP100_LCD_DIAG_Actr_Handler+0x220>)
 800eeba:	0018      	movs	r0, r3
 800eebc:	f7fd fde4 	bl	800ca88 <SP100_LCD_SEG_ON>
 800eec0:	4b75      	ldr	r3, [pc, #468]	; (800f098 <SP100_LCD_DIAG_Actr_Handler+0x224>)
 800eec2:	0018      	movs	r0, r3
 800eec4:	f7fd fde0 	bl	800ca88 <SP100_LCD_SEG_ON>
 800eec8:	4b74      	ldr	r3, [pc, #464]	; (800f09c <SP100_LCD_DIAG_Actr_Handler+0x228>)
 800eeca:	0018      	movs	r0, r3
 800eecc:	f7fd fda4 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800eed0:	4b73      	ldr	r3, [pc, #460]	; (800f0a0 <SP100_LCD_DIAG_Actr_Handler+0x22c>)
 800eed2:	0018      	movs	r0, r3
 800eed4:	f7fd fdd8 	bl	800ca88 <SP100_LCD_SEG_ON>
 800eed8:	4b72      	ldr	r3, [pc, #456]	; (800f0a4 <SP100_LCD_DIAG_Actr_Handler+0x230>)
 800eeda:	0018      	movs	r0, r3
 800eedc:	f7fd fdd4 	bl	800ca88 <SP100_LCD_SEG_ON>
 800eee0:	4b71      	ldr	r3, [pc, #452]	; (800f0a8 <SP100_LCD_DIAG_Actr_Handler+0x234>)
 800eee2:	0018      	movs	r0, r3
 800eee4:	f7fd fd98 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800eee8:	4b70      	ldr	r3, [pc, #448]	; (800f0ac <SP100_LCD_DIAG_Actr_Handler+0x238>)
 800eeea:	0018      	movs	r0, r3
 800eeec:	f7fd fdcc 	bl	800ca88 <SP100_LCD_SEG_ON>
 800eef0:	4b6f      	ldr	r3, [pc, #444]	; (800f0b0 <SP100_LCD_DIAG_Actr_Handler+0x23c>)
 800eef2:	0018      	movs	r0, r3
 800eef4:	f7fd fd90 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800eef8:	4b6e      	ldr	r3, [pc, #440]	; (800f0b4 <SP100_LCD_DIAG_Actr_Handler+0x240>)
 800eefa:	0018      	movs	r0, r3
 800eefc:	f7fd fdc4 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ef00:	1dfb      	adds	r3, r7, #7
 800ef02:	781b      	ldrb	r3, [r3, #0]
 800ef04:	2b05      	cmp	r3, #5
 800ef06:	d900      	bls.n	800ef0a <SP100_LCD_DIAG_Actr_Handler+0x96>
 800ef08:	e0b2      	b.n	800f070 <SP100_LCD_DIAG_Actr_Handler+0x1fc>
 800ef0a:	009a      	lsls	r2, r3, #2
 800ef0c:	4b6a      	ldr	r3, [pc, #424]	; (800f0b8 <SP100_LCD_DIAG_Actr_Handler+0x244>)
 800ef0e:	18d3      	adds	r3, r2, r3
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	469f      	mov	pc, r3
 800ef14:	4b69      	ldr	r3, [pc, #420]	; (800f0bc <SP100_LCD_DIAG_Actr_Handler+0x248>)
 800ef16:	0018      	movs	r0, r3
 800ef18:	f7fd fd7e 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ef1c:	4b68      	ldr	r3, [pc, #416]	; (800f0c0 <SP100_LCD_DIAG_Actr_Handler+0x24c>)
 800ef1e:	0018      	movs	r0, r3
 800ef20:	f7fd fd7a 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ef24:	4b67      	ldr	r3, [pc, #412]	; (800f0c4 <SP100_LCD_DIAG_Actr_Handler+0x250>)
 800ef26:	0018      	movs	r0, r3
 800ef28:	f7fd fd76 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ef2c:	4b66      	ldr	r3, [pc, #408]	; (800f0c8 <SP100_LCD_DIAG_Actr_Handler+0x254>)
 800ef2e:	0018      	movs	r0, r3
 800ef30:	f7fd fd72 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ef34:	4b65      	ldr	r3, [pc, #404]	; (800f0cc <SP100_LCD_DIAG_Actr_Handler+0x258>)
 800ef36:	0018      	movs	r0, r3
 800ef38:	f7fd fd6e 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ef3c:	4b64      	ldr	r3, [pc, #400]	; (800f0d0 <SP100_LCD_DIAG_Actr_Handler+0x25c>)
 800ef3e:	0018      	movs	r0, r3
 800ef40:	f7fd fd6a 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ef44:	4b63      	ldr	r3, [pc, #396]	; (800f0d4 <SP100_LCD_DIAG_Actr_Handler+0x260>)
 800ef46:	0018      	movs	r0, r3
 800ef48:	f7fd fd66 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ef4c:	e090      	b.n	800f070 <SP100_LCD_DIAG_Actr_Handler+0x1fc>
 800ef4e:	4b5b      	ldr	r3, [pc, #364]	; (800f0bc <SP100_LCD_DIAG_Actr_Handler+0x248>)
 800ef50:	0018      	movs	r0, r3
 800ef52:	f7fd fd99 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ef56:	4b5a      	ldr	r3, [pc, #360]	; (800f0c0 <SP100_LCD_DIAG_Actr_Handler+0x24c>)
 800ef58:	0018      	movs	r0, r3
 800ef5a:	f7fd fd95 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ef5e:	4b59      	ldr	r3, [pc, #356]	; (800f0c4 <SP100_LCD_DIAG_Actr_Handler+0x250>)
 800ef60:	0018      	movs	r0, r3
 800ef62:	f7fd fd91 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ef66:	4b58      	ldr	r3, [pc, #352]	; (800f0c8 <SP100_LCD_DIAG_Actr_Handler+0x254>)
 800ef68:	0018      	movs	r0, r3
 800ef6a:	f7fd fd8d 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ef6e:	4b57      	ldr	r3, [pc, #348]	; (800f0cc <SP100_LCD_DIAG_Actr_Handler+0x258>)
 800ef70:	0018      	movs	r0, r3
 800ef72:	f7fd fd89 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ef76:	4b56      	ldr	r3, [pc, #344]	; (800f0d0 <SP100_LCD_DIAG_Actr_Handler+0x25c>)
 800ef78:	0018      	movs	r0, r3
 800ef7a:	f7fd fd85 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ef7e:	4b55      	ldr	r3, [pc, #340]	; (800f0d4 <SP100_LCD_DIAG_Actr_Handler+0x260>)
 800ef80:	0018      	movs	r0, r3
 800ef82:	f7fd fd49 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ef86:	e073      	b.n	800f070 <SP100_LCD_DIAG_Actr_Handler+0x1fc>
 800ef88:	4b4c      	ldr	r3, [pc, #304]	; (800f0bc <SP100_LCD_DIAG_Actr_Handler+0x248>)
 800ef8a:	0018      	movs	r0, r3
 800ef8c:	f7fd fd44 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800ef90:	4b4b      	ldr	r3, [pc, #300]	; (800f0c0 <SP100_LCD_DIAG_Actr_Handler+0x24c>)
 800ef92:	0018      	movs	r0, r3
 800ef94:	f7fd fd78 	bl	800ca88 <SP100_LCD_SEG_ON>
 800ef98:	4b4a      	ldr	r3, [pc, #296]	; (800f0c4 <SP100_LCD_DIAG_Actr_Handler+0x250>)
 800ef9a:	0018      	movs	r0, r3
 800ef9c:	f7fd fd74 	bl	800ca88 <SP100_LCD_SEG_ON>
 800efa0:	4b49      	ldr	r3, [pc, #292]	; (800f0c8 <SP100_LCD_DIAG_Actr_Handler+0x254>)
 800efa2:	0018      	movs	r0, r3
 800efa4:	f7fd fd38 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800efa8:	4b48      	ldr	r3, [pc, #288]	; (800f0cc <SP100_LCD_DIAG_Actr_Handler+0x258>)
 800efaa:	0018      	movs	r0, r3
 800efac:	f7fd fd34 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800efb0:	4b47      	ldr	r3, [pc, #284]	; (800f0d0 <SP100_LCD_DIAG_Actr_Handler+0x25c>)
 800efb2:	0018      	movs	r0, r3
 800efb4:	f7fd fd30 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800efb8:	4b46      	ldr	r3, [pc, #280]	; (800f0d4 <SP100_LCD_DIAG_Actr_Handler+0x260>)
 800efba:	0018      	movs	r0, r3
 800efbc:	f7fd fd2c 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800efc0:	e056      	b.n	800f070 <SP100_LCD_DIAG_Actr_Handler+0x1fc>
 800efc2:	4b3e      	ldr	r3, [pc, #248]	; (800f0bc <SP100_LCD_DIAG_Actr_Handler+0x248>)
 800efc4:	0018      	movs	r0, r3
 800efc6:	f7fd fd5f 	bl	800ca88 <SP100_LCD_SEG_ON>
 800efca:	4b3d      	ldr	r3, [pc, #244]	; (800f0c0 <SP100_LCD_DIAG_Actr_Handler+0x24c>)
 800efcc:	0018      	movs	r0, r3
 800efce:	f7fd fd5b 	bl	800ca88 <SP100_LCD_SEG_ON>
 800efd2:	4b3c      	ldr	r3, [pc, #240]	; (800f0c4 <SP100_LCD_DIAG_Actr_Handler+0x250>)
 800efd4:	0018      	movs	r0, r3
 800efd6:	f7fd fd1f 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800efda:	4b3b      	ldr	r3, [pc, #236]	; (800f0c8 <SP100_LCD_DIAG_Actr_Handler+0x254>)
 800efdc:	0018      	movs	r0, r3
 800efde:	f7fd fd53 	bl	800ca88 <SP100_LCD_SEG_ON>
 800efe2:	4b3a      	ldr	r3, [pc, #232]	; (800f0cc <SP100_LCD_DIAG_Actr_Handler+0x258>)
 800efe4:	0018      	movs	r0, r3
 800efe6:	f7fd fd4f 	bl	800ca88 <SP100_LCD_SEG_ON>
 800efea:	4b39      	ldr	r3, [pc, #228]	; (800f0d0 <SP100_LCD_DIAG_Actr_Handler+0x25c>)
 800efec:	0018      	movs	r0, r3
 800efee:	f7fd fd13 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800eff2:	4b38      	ldr	r3, [pc, #224]	; (800f0d4 <SP100_LCD_DIAG_Actr_Handler+0x260>)
 800eff4:	0018      	movs	r0, r3
 800eff6:	f7fd fd47 	bl	800ca88 <SP100_LCD_SEG_ON>
 800effa:	e039      	b.n	800f070 <SP100_LCD_DIAG_Actr_Handler+0x1fc>
 800effc:	4b2f      	ldr	r3, [pc, #188]	; (800f0bc <SP100_LCD_DIAG_Actr_Handler+0x248>)
 800effe:	0018      	movs	r0, r3
 800f000:	f7fd fd42 	bl	800ca88 <SP100_LCD_SEG_ON>
 800f004:	4b2e      	ldr	r3, [pc, #184]	; (800f0c0 <SP100_LCD_DIAG_Actr_Handler+0x24c>)
 800f006:	0018      	movs	r0, r3
 800f008:	f7fd fd3e 	bl	800ca88 <SP100_LCD_SEG_ON>
 800f00c:	4b2d      	ldr	r3, [pc, #180]	; (800f0c4 <SP100_LCD_DIAG_Actr_Handler+0x250>)
 800f00e:	0018      	movs	r0, r3
 800f010:	f7fd fd3a 	bl	800ca88 <SP100_LCD_SEG_ON>
 800f014:	4b2c      	ldr	r3, [pc, #176]	; (800f0c8 <SP100_LCD_DIAG_Actr_Handler+0x254>)
 800f016:	0018      	movs	r0, r3
 800f018:	f7fd fd36 	bl	800ca88 <SP100_LCD_SEG_ON>
 800f01c:	4b2b      	ldr	r3, [pc, #172]	; (800f0cc <SP100_LCD_DIAG_Actr_Handler+0x258>)
 800f01e:	0018      	movs	r0, r3
 800f020:	f7fd fcfa 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800f024:	4b2a      	ldr	r3, [pc, #168]	; (800f0d0 <SP100_LCD_DIAG_Actr_Handler+0x25c>)
 800f026:	0018      	movs	r0, r3
 800f028:	f7fd fcf6 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800f02c:	4b29      	ldr	r3, [pc, #164]	; (800f0d4 <SP100_LCD_DIAG_Actr_Handler+0x260>)
 800f02e:	0018      	movs	r0, r3
 800f030:	f7fd fd2a 	bl	800ca88 <SP100_LCD_SEG_ON>
 800f034:	e01c      	b.n	800f070 <SP100_LCD_DIAG_Actr_Handler+0x1fc>
 800f036:	4b21      	ldr	r3, [pc, #132]	; (800f0bc <SP100_LCD_DIAG_Actr_Handler+0x248>)
 800f038:	0018      	movs	r0, r3
 800f03a:	f7fd fced 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800f03e:	4b20      	ldr	r3, [pc, #128]	; (800f0c0 <SP100_LCD_DIAG_Actr_Handler+0x24c>)
 800f040:	0018      	movs	r0, r3
 800f042:	f7fd fd21 	bl	800ca88 <SP100_LCD_SEG_ON>
 800f046:	4b1f      	ldr	r3, [pc, #124]	; (800f0c4 <SP100_LCD_DIAG_Actr_Handler+0x250>)
 800f048:	0018      	movs	r0, r3
 800f04a:	f7fd fd1d 	bl	800ca88 <SP100_LCD_SEG_ON>
 800f04e:	4b1e      	ldr	r3, [pc, #120]	; (800f0c8 <SP100_LCD_DIAG_Actr_Handler+0x254>)
 800f050:	0018      	movs	r0, r3
 800f052:	f7fd fce1 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800f056:	4b1d      	ldr	r3, [pc, #116]	; (800f0cc <SP100_LCD_DIAG_Actr_Handler+0x258>)
 800f058:	0018      	movs	r0, r3
 800f05a:	f7fd fcdd 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800f05e:	4b1c      	ldr	r3, [pc, #112]	; (800f0d0 <SP100_LCD_DIAG_Actr_Handler+0x25c>)
 800f060:	0018      	movs	r0, r3
 800f062:	f7fd fd11 	bl	800ca88 <SP100_LCD_SEG_ON>
 800f066:	4b1b      	ldr	r3, [pc, #108]	; (800f0d4 <SP100_LCD_DIAG_Actr_Handler+0x260>)
 800f068:	0018      	movs	r0, r3
 800f06a:	f7fd fd0d 	bl	800ca88 <SP100_LCD_SEG_ON>
 800f06e:	46c0      	nop			; (mov r8, r8)
 800f070:	46c0      	nop			; (mov r8, r8)
 800f072:	46bd      	mov	sp, r7
 800f074:	b002      	add	sp, #8
 800f076:	bd80      	pop	{r7, pc}
 800f078:	08014f34 	.word	0x08014f34
 800f07c:	08014f38 	.word	0x08014f38
 800f080:	08014f3c 	.word	0x08014f3c
 800f084:	08014f40 	.word	0x08014f40
 800f088:	08014f44 	.word	0x08014f44
 800f08c:	08014f48 	.word	0x08014f48
 800f090:	08014f4c 	.word	0x08014f4c
 800f094:	08014f50 	.word	0x08014f50
 800f098:	08014f54 	.word	0x08014f54
 800f09c:	08014f58 	.word	0x08014f58
 800f0a0:	08014f5c 	.word	0x08014f5c
 800f0a4:	08014f60 	.word	0x08014f60
 800f0a8:	08014f64 	.word	0x08014f64
 800f0ac:	08014f68 	.word	0x08014f68
 800f0b0:	08014f2c 	.word	0x08014f2c
 800f0b4:	08014f30 	.word	0x08014f30
 800f0b8:	080151f8 	.word	0x080151f8
 800f0bc:	08014f6c 	.word	0x08014f6c
 800f0c0:	08014f70 	.word	0x08014f70
 800f0c4:	08014f74 	.word	0x08014f74
 800f0c8:	08014f78 	.word	0x08014f78
 800f0cc:	08014f7c 	.word	0x08014f7c
 800f0d0:	08014f80 	.word	0x08014f80
 800f0d4:	08014f84 	.word	0x08014f84

0800f0d8 <SP100_LCD_DIAG_Actr_Busy>:
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	af00      	add	r7, sp, #0
 800f0dc:	4b2f      	ldr	r3, [pc, #188]	; (800f19c <SP100_LCD_DIAG_Actr_Busy+0xc4>)
 800f0de:	0018      	movs	r0, r3
 800f0e0:	f7fd fcd2 	bl	800ca88 <SP100_LCD_SEG_ON>
 800f0e4:	4b2e      	ldr	r3, [pc, #184]	; (800f1a0 <SP100_LCD_DIAG_Actr_Busy+0xc8>)
 800f0e6:	0018      	movs	r0, r3
 800f0e8:	f7fd fcce 	bl	800ca88 <SP100_LCD_SEG_ON>
 800f0ec:	4b2d      	ldr	r3, [pc, #180]	; (800f1a4 <SP100_LCD_DIAG_Actr_Busy+0xcc>)
 800f0ee:	0018      	movs	r0, r3
 800f0f0:	f7fd fcca 	bl	800ca88 <SP100_LCD_SEG_ON>
 800f0f4:	4b2c      	ldr	r3, [pc, #176]	; (800f1a8 <SP100_LCD_DIAG_Actr_Busy+0xd0>)
 800f0f6:	0018      	movs	r0, r3
 800f0f8:	f7fd fcc6 	bl	800ca88 <SP100_LCD_SEG_ON>
 800f0fc:	4b2b      	ldr	r3, [pc, #172]	; (800f1ac <SP100_LCD_DIAG_Actr_Busy+0xd4>)
 800f0fe:	0018      	movs	r0, r3
 800f100:	f7fd fcc2 	bl	800ca88 <SP100_LCD_SEG_ON>
 800f104:	4b2a      	ldr	r3, [pc, #168]	; (800f1b0 <SP100_LCD_DIAG_Actr_Busy+0xd8>)
 800f106:	0018      	movs	r0, r3
 800f108:	f7fd fcbe 	bl	800ca88 <SP100_LCD_SEG_ON>
 800f10c:	4b29      	ldr	r3, [pc, #164]	; (800f1b4 <SP100_LCD_DIAG_Actr_Busy+0xdc>)
 800f10e:	0018      	movs	r0, r3
 800f110:	f7fd fcba 	bl	800ca88 <SP100_LCD_SEG_ON>
 800f114:	4b28      	ldr	r3, [pc, #160]	; (800f1b8 <SP100_LCD_DIAG_Actr_Busy+0xe0>)
 800f116:	0018      	movs	r0, r3
 800f118:	f7fd fcb6 	bl	800ca88 <SP100_LCD_SEG_ON>
 800f11c:	4b27      	ldr	r3, [pc, #156]	; (800f1bc <SP100_LCD_DIAG_Actr_Busy+0xe4>)
 800f11e:	0018      	movs	r0, r3
 800f120:	f7fd fcb2 	bl	800ca88 <SP100_LCD_SEG_ON>
 800f124:	4b26      	ldr	r3, [pc, #152]	; (800f1c0 <SP100_LCD_DIAG_Actr_Busy+0xe8>)
 800f126:	0018      	movs	r0, r3
 800f128:	f7fd fcae 	bl	800ca88 <SP100_LCD_SEG_ON>
 800f12c:	4b25      	ldr	r3, [pc, #148]	; (800f1c4 <SP100_LCD_DIAG_Actr_Busy+0xec>)
 800f12e:	0018      	movs	r0, r3
 800f130:	f7fd fcaa 	bl	800ca88 <SP100_LCD_SEG_ON>
 800f134:	4b24      	ldr	r3, [pc, #144]	; (800f1c8 <SP100_LCD_DIAG_Actr_Busy+0xf0>)
 800f136:	0018      	movs	r0, r3
 800f138:	f7fd fca6 	bl	800ca88 <SP100_LCD_SEG_ON>
 800f13c:	4b23      	ldr	r3, [pc, #140]	; (800f1cc <SP100_LCD_DIAG_Actr_Busy+0xf4>)
 800f13e:	0018      	movs	r0, r3
 800f140:	f7fd fca2 	bl	800ca88 <SP100_LCD_SEG_ON>
 800f144:	4b22      	ldr	r3, [pc, #136]	; (800f1d0 <SP100_LCD_DIAG_Actr_Busy+0xf8>)
 800f146:	0018      	movs	r0, r3
 800f148:	f7fd fc9e 	bl	800ca88 <SP100_LCD_SEG_ON>
 800f14c:	4b21      	ldr	r3, [pc, #132]	; (800f1d4 <SP100_LCD_DIAG_Actr_Busy+0xfc>)
 800f14e:	0018      	movs	r0, r3
 800f150:	f7fd fc9a 	bl	800ca88 <SP100_LCD_SEG_ON>
 800f154:	4b20      	ldr	r3, [pc, #128]	; (800f1d8 <SP100_LCD_DIAG_Actr_Busy+0x100>)
 800f156:	0018      	movs	r0, r3
 800f158:	f7fd fc96 	bl	800ca88 <SP100_LCD_SEG_ON>
 800f15c:	4b1f      	ldr	r3, [pc, #124]	; (800f1dc <SP100_LCD_DIAG_Actr_Busy+0x104>)
 800f15e:	0018      	movs	r0, r3
 800f160:	f7fd fc92 	bl	800ca88 <SP100_LCD_SEG_ON>
 800f164:	4b1e      	ldr	r3, [pc, #120]	; (800f1e0 <SP100_LCD_DIAG_Actr_Busy+0x108>)
 800f166:	0018      	movs	r0, r3
 800f168:	f7fd fc8e 	bl	800ca88 <SP100_LCD_SEG_ON>
 800f16c:	4b1d      	ldr	r3, [pc, #116]	; (800f1e4 <SP100_LCD_DIAG_Actr_Busy+0x10c>)
 800f16e:	0018      	movs	r0, r3
 800f170:	f7fd fc8a 	bl	800ca88 <SP100_LCD_SEG_ON>
 800f174:	4b1c      	ldr	r3, [pc, #112]	; (800f1e8 <SP100_LCD_DIAG_Actr_Busy+0x110>)
 800f176:	0018      	movs	r0, r3
 800f178:	f7fd fc86 	bl	800ca88 <SP100_LCD_SEG_ON>
 800f17c:	4b1b      	ldr	r3, [pc, #108]	; (800f1ec <SP100_LCD_DIAG_Actr_Busy+0x114>)
 800f17e:	0018      	movs	r0, r3
 800f180:	f7fd fc82 	bl	800ca88 <SP100_LCD_SEG_ON>
 800f184:	4b1a      	ldr	r3, [pc, #104]	; (800f1f0 <SP100_LCD_DIAG_Actr_Busy+0x118>)
 800f186:	0018      	movs	r0, r3
 800f188:	f7fd fc46 	bl	800ca18 <SP100_LCD_SEG_OFF>
 800f18c:	4b19      	ldr	r3, [pc, #100]	; (800f1f4 <SP100_LCD_DIAG_Actr_Busy+0x11c>)
 800f18e:	0018      	movs	r0, r3
 800f190:	f7fd fc7a 	bl	800ca88 <SP100_LCD_SEG_ON>
 800f194:	46c0      	nop			; (mov r8, r8)
 800f196:	46bd      	mov	sp, r7
 800f198:	bd80      	pop	{r7, pc}
 800f19a:	46c0      	nop			; (mov r8, r8)
 800f19c:	08014f34 	.word	0x08014f34
 800f1a0:	08014f38 	.word	0x08014f38
 800f1a4:	08014f3c 	.word	0x08014f3c
 800f1a8:	08014f40 	.word	0x08014f40
 800f1ac:	08014f44 	.word	0x08014f44
 800f1b0:	08014f48 	.word	0x08014f48
 800f1b4:	08014f4c 	.word	0x08014f4c
 800f1b8:	08014f50 	.word	0x08014f50
 800f1bc:	08014f54 	.word	0x08014f54
 800f1c0:	08014f58 	.word	0x08014f58
 800f1c4:	08014f5c 	.word	0x08014f5c
 800f1c8:	08014f60 	.word	0x08014f60
 800f1cc:	08014f64 	.word	0x08014f64
 800f1d0:	08014f68 	.word	0x08014f68
 800f1d4:	08014f6c 	.word	0x08014f6c
 800f1d8:	08014f70 	.word	0x08014f70
 800f1dc:	08014f74 	.word	0x08014f74
 800f1e0:	08014f78 	.word	0x08014f78
 800f1e4:	08014f7c 	.word	0x08014f7c
 800f1e8:	08014f80 	.word	0x08014f80
 800f1ec:	08014f84 	.word	0x08014f84
 800f1f0:	08014f2c 	.word	0x08014f2c
 800f1f4:	08014f30 	.word	0x08014f30

0800f1f8 <SP100_MD_MA_STP>:
 800f1f8:	b590      	push	{r4, r7, lr}
 800f1fa:	b083      	sub	sp, #12
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	1dfc      	adds	r4, r7, #7
 800f200:	2003      	movs	r0, #3
 800f202:	f001 f857 	bl	80102b4 <SP100_TLE_Ctrl_Register_Read>
 800f206:	0003      	movs	r3, r0
 800f208:	7023      	strb	r3, [r4, #0]
 800f20a:	1dfb      	adds	r3, r7, #7
 800f20c:	1dfa      	adds	r2, r7, #7
 800f20e:	7812      	ldrb	r2, [r2, #0]
 800f210:	210f      	movs	r1, #15
 800f212:	400a      	ands	r2, r1
 800f214:	701a      	strb	r2, [r3, #0]
 800f216:	1dfb      	adds	r3, r7, #7
 800f218:	781b      	ldrb	r3, [r3, #0]
 800f21a:	2b05      	cmp	r3, #5
 800f21c:	d020      	beq.n	800f260 <SP100_MD_MA_STP+0x68>
 800f21e:	1dfc      	adds	r4, r7, #7
 800f220:	2003      	movs	r0, #3
 800f222:	f001 f847 	bl	80102b4 <SP100_TLE_Ctrl_Register_Read>
 800f226:	0003      	movs	r3, r0
 800f228:	7023      	strb	r3, [r4, #0]
 800f22a:	1dfb      	adds	r3, r7, #7
 800f22c:	1dfa      	adds	r2, r7, #7
 800f22e:	7812      	ldrb	r2, [r2, #0]
 800f230:	210f      	movs	r1, #15
 800f232:	438a      	bics	r2, r1
 800f234:	701a      	strb	r2, [r3, #0]
 800f236:	1dfb      	adds	r3, r7, #7
 800f238:	1dfa      	adds	r2, r7, #7
 800f23a:	7812      	ldrb	r2, [r2, #0]
 800f23c:	2105      	movs	r1, #5
 800f23e:	430a      	orrs	r2, r1
 800f240:	701a      	strb	r2, [r3, #0]
 800f242:	1dfb      	adds	r3, r7, #7
 800f244:	781b      	ldrb	r3, [r3, #0]
 800f246:	0019      	movs	r1, r3
 800f248:	2003      	movs	r0, #3
 800f24a:	f001 f871 	bl	8010330 <SP100_TLE_Ctrl_Register_Write>
 800f24e:	4b06      	ldr	r3, [pc, #24]	; (800f268 <SP100_MD_MA_STP+0x70>)
 800f250:	0018      	movs	r0, r3
 800f252:	f7f8 fc87 	bl	8007b64 <HAL_TIM_Base_Stop_IT>
 800f256:	4b04      	ldr	r3, [pc, #16]	; (800f268 <SP100_MD_MA_STP+0x70>)
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	2202      	movs	r2, #2
 800f25c:	4252      	negs	r2, r2
 800f25e:	611a      	str	r2, [r3, #16]
 800f260:	46c0      	nop			; (mov r8, r8)
 800f262:	46bd      	mov	sp, r7
 800f264:	b003      	add	sp, #12
 800f266:	bd90      	pop	{r4, r7, pc}
 800f268:	20000490 	.word	0x20000490

0800f26c <SP100_MD_MA_FWD>:
 800f26c:	b590      	push	{r4, r7, lr}
 800f26e:	b083      	sub	sp, #12
 800f270:	af00      	add	r7, sp, #0
 800f272:	1dfc      	adds	r4, r7, #7
 800f274:	2003      	movs	r0, #3
 800f276:	f001 f81d 	bl	80102b4 <SP100_TLE_Ctrl_Register_Read>
 800f27a:	0003      	movs	r3, r0
 800f27c:	7023      	strb	r3, [r4, #0]
 800f27e:	1dfb      	adds	r3, r7, #7
 800f280:	1dfa      	adds	r2, r7, #7
 800f282:	7812      	ldrb	r2, [r2, #0]
 800f284:	210f      	movs	r1, #15
 800f286:	400a      	ands	r2, r1
 800f288:	701a      	strb	r2, [r3, #0]
 800f28a:	1dfb      	adds	r3, r7, #7
 800f28c:	781b      	ldrb	r3, [r3, #0]
 800f28e:	2b09      	cmp	r3, #9
 800f290:	d028      	beq.n	800f2e4 <SP100_MD_MA_FWD+0x78>
 800f292:	4b16      	ldr	r3, [pc, #88]	; (800f2ec <SP100_MD_MA_FWD+0x80>)
 800f294:	781b      	ldrb	r3, [r3, #0]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d124      	bne.n	800f2e4 <SP100_MD_MA_FWD+0x78>
 800f29a:	1dfc      	adds	r4, r7, #7
 800f29c:	2003      	movs	r0, #3
 800f29e:	f001 f809 	bl	80102b4 <SP100_TLE_Ctrl_Register_Read>
 800f2a2:	0003      	movs	r3, r0
 800f2a4:	7023      	strb	r3, [r4, #0]
 800f2a6:	1dfb      	adds	r3, r7, #7
 800f2a8:	1dfa      	adds	r2, r7, #7
 800f2aa:	7812      	ldrb	r2, [r2, #0]
 800f2ac:	210f      	movs	r1, #15
 800f2ae:	438a      	bics	r2, r1
 800f2b0:	701a      	strb	r2, [r3, #0]
 800f2b2:	1dfb      	adds	r3, r7, #7
 800f2b4:	1dfa      	adds	r2, r7, #7
 800f2b6:	7812      	ldrb	r2, [r2, #0]
 800f2b8:	2109      	movs	r1, #9
 800f2ba:	430a      	orrs	r2, r1
 800f2bc:	701a      	strb	r2, [r3, #0]
 800f2be:	1dfb      	adds	r3, r7, #7
 800f2c0:	781b      	ldrb	r3, [r3, #0]
 800f2c2:	0019      	movs	r1, r3
 800f2c4:	2003      	movs	r0, #3
 800f2c6:	f001 f833 	bl	8010330 <SP100_TLE_Ctrl_Register_Write>
 800f2ca:	4b09      	ldr	r3, [pc, #36]	; (800f2f0 <SP100_MD_MA_FWD+0x84>)
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	2200      	movs	r2, #0
 800f2d0:	625a      	str	r2, [r3, #36]	; 0x24
 800f2d2:	4b07      	ldr	r3, [pc, #28]	; (800f2f0 <SP100_MD_MA_FWD+0x84>)
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	2202      	movs	r2, #2
 800f2d8:	4252      	negs	r2, r2
 800f2da:	611a      	str	r2, [r3, #16]
 800f2dc:	4b04      	ldr	r3, [pc, #16]	; (800f2f0 <SP100_MD_MA_FWD+0x84>)
 800f2de:	0018      	movs	r0, r3
 800f2e0:	f7f8 fbee 	bl	8007ac0 <HAL_TIM_Base_Start_IT>
 800f2e4:	46c0      	nop			; (mov r8, r8)
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	b003      	add	sp, #12
 800f2ea:	bd90      	pop	{r4, r7, pc}
 800f2ec:	2000057d 	.word	0x2000057d
 800f2f0:	20000490 	.word	0x20000490

0800f2f4 <SP100_MD_MA_RVS>:
 800f2f4:	b590      	push	{r4, r7, lr}
 800f2f6:	b083      	sub	sp, #12
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	1dfc      	adds	r4, r7, #7
 800f2fc:	2003      	movs	r0, #3
 800f2fe:	f000 ffd9 	bl	80102b4 <SP100_TLE_Ctrl_Register_Read>
 800f302:	0003      	movs	r3, r0
 800f304:	7023      	strb	r3, [r4, #0]
 800f306:	1dfb      	adds	r3, r7, #7
 800f308:	1dfa      	adds	r2, r7, #7
 800f30a:	7812      	ldrb	r2, [r2, #0]
 800f30c:	210f      	movs	r1, #15
 800f30e:	400a      	ands	r2, r1
 800f310:	701a      	strb	r2, [r3, #0]
 800f312:	1dfb      	adds	r3, r7, #7
 800f314:	781b      	ldrb	r3, [r3, #0]
 800f316:	2b06      	cmp	r3, #6
 800f318:	d028      	beq.n	800f36c <SP100_MD_MA_RVS+0x78>
 800f31a:	4b16      	ldr	r3, [pc, #88]	; (800f374 <SP100_MD_MA_RVS+0x80>)
 800f31c:	781b      	ldrb	r3, [r3, #0]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d124      	bne.n	800f36c <SP100_MD_MA_RVS+0x78>
 800f322:	1dfc      	adds	r4, r7, #7
 800f324:	2003      	movs	r0, #3
 800f326:	f000 ffc5 	bl	80102b4 <SP100_TLE_Ctrl_Register_Read>
 800f32a:	0003      	movs	r3, r0
 800f32c:	7023      	strb	r3, [r4, #0]
 800f32e:	1dfb      	adds	r3, r7, #7
 800f330:	1dfa      	adds	r2, r7, #7
 800f332:	7812      	ldrb	r2, [r2, #0]
 800f334:	210f      	movs	r1, #15
 800f336:	438a      	bics	r2, r1
 800f338:	701a      	strb	r2, [r3, #0]
 800f33a:	1dfb      	adds	r3, r7, #7
 800f33c:	1dfa      	adds	r2, r7, #7
 800f33e:	7812      	ldrb	r2, [r2, #0]
 800f340:	2106      	movs	r1, #6
 800f342:	430a      	orrs	r2, r1
 800f344:	701a      	strb	r2, [r3, #0]
 800f346:	1dfb      	adds	r3, r7, #7
 800f348:	781b      	ldrb	r3, [r3, #0]
 800f34a:	0019      	movs	r1, r3
 800f34c:	2003      	movs	r0, #3
 800f34e:	f000 ffef 	bl	8010330 <SP100_TLE_Ctrl_Register_Write>
 800f352:	4b09      	ldr	r3, [pc, #36]	; (800f378 <SP100_MD_MA_RVS+0x84>)
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	2200      	movs	r2, #0
 800f358:	625a      	str	r2, [r3, #36]	; 0x24
 800f35a:	4b07      	ldr	r3, [pc, #28]	; (800f378 <SP100_MD_MA_RVS+0x84>)
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	2202      	movs	r2, #2
 800f360:	4252      	negs	r2, r2
 800f362:	611a      	str	r2, [r3, #16]
 800f364:	4b04      	ldr	r3, [pc, #16]	; (800f378 <SP100_MD_MA_RVS+0x84>)
 800f366:	0018      	movs	r0, r3
 800f368:	f7f8 fbaa 	bl	8007ac0 <HAL_TIM_Base_Start_IT>
 800f36c:	46c0      	nop			; (mov r8, r8)
 800f36e:	46bd      	mov	sp, r7
 800f370:	b003      	add	sp, #12
 800f372:	bd90      	pop	{r4, r7, pc}
 800f374:	2000057d 	.word	0x2000057d
 800f378:	20000490 	.word	0x20000490

0800f37c <SP100_MD_MA_Handler>:
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b082      	sub	sp, #8
 800f380:	af00      	add	r7, sp, #0
 800f382:	0002      	movs	r2, r0
 800f384:	1dfb      	adds	r3, r7, #7
 800f386:	701a      	strb	r2, [r3, #0]
 800f388:	1dfb      	adds	r3, r7, #7
 800f38a:	781b      	ldrb	r3, [r3, #0]
 800f38c:	2b04      	cmp	r3, #4
 800f38e:	d900      	bls.n	800f392 <SP100_MD_MA_Handler+0x16>
 800f390:	e09f      	b.n	800f4d2 <SP100_MD_MA_Handler+0x156>
 800f392:	009a      	lsls	r2, r3, #2
 800f394:	4b51      	ldr	r3, [pc, #324]	; (800f4dc <SP100_MD_MA_Handler+0x160>)
 800f396:	18d3      	adds	r3, r2, r3
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	469f      	mov	pc, r3
 800f39c:	4b50      	ldr	r3, [pc, #320]	; (800f4e0 <SP100_MD_MA_Handler+0x164>)
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	1c18      	adds	r0, r3, #0
 800f3a2:	f7f3 fd77 	bl	8002e94 <__aeabi_f2d>
 800f3a6:	4a4f      	ldr	r2, [pc, #316]	; (800f4e4 <SP100_MD_MA_Handler+0x168>)
 800f3a8:	4b4f      	ldr	r3, [pc, #316]	; (800f4e8 <SP100_MD_MA_Handler+0x16c>)
 800f3aa:	f7f1 f85f 	bl	800046c <__aeabi_dcmple>
 800f3ae:	1e03      	subs	r3, r0, #0
 800f3b0:	d002      	beq.n	800f3b8 <SP100_MD_MA_Handler+0x3c>
 800f3b2:	f7ff ff5b 	bl	800f26c <SP100_MD_MA_FWD>
 800f3b6:	e08c      	b.n	800f4d2 <SP100_MD_MA_Handler+0x156>
 800f3b8:	4b49      	ldr	r3, [pc, #292]	; (800f4e0 <SP100_MD_MA_Handler+0x164>)
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	1c18      	adds	r0, r3, #0
 800f3be:	f7f3 fd69 	bl	8002e94 <__aeabi_f2d>
 800f3c2:	4a4a      	ldr	r2, [pc, #296]	; (800f4ec <SP100_MD_MA_Handler+0x170>)
 800f3c4:	4b4a      	ldr	r3, [pc, #296]	; (800f4f0 <SP100_MD_MA_Handler+0x174>)
 800f3c6:	f7f1 f865 	bl	8000494 <__aeabi_dcmpge>
 800f3ca:	1e03      	subs	r3, r0, #0
 800f3cc:	d002      	beq.n	800f3d4 <SP100_MD_MA_Handler+0x58>
 800f3ce:	f7ff ff91 	bl	800f2f4 <SP100_MD_MA_RVS>
 800f3d2:	e07e      	b.n	800f4d2 <SP100_MD_MA_Handler+0x156>
 800f3d4:	f7ff ff10 	bl	800f1f8 <SP100_MD_MA_STP>
 800f3d8:	e07b      	b.n	800f4d2 <SP100_MD_MA_Handler+0x156>
 800f3da:	4b41      	ldr	r3, [pc, #260]	; (800f4e0 <SP100_MD_MA_Handler+0x164>)
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	1c18      	adds	r0, r3, #0
 800f3e0:	f7f3 fd58 	bl	8002e94 <__aeabi_f2d>
 800f3e4:	4a43      	ldr	r2, [pc, #268]	; (800f4f4 <SP100_MD_MA_Handler+0x178>)
 800f3e6:	4b44      	ldr	r3, [pc, #272]	; (800f4f8 <SP100_MD_MA_Handler+0x17c>)
 800f3e8:	f7f1 f840 	bl	800046c <__aeabi_dcmple>
 800f3ec:	1e03      	subs	r3, r0, #0
 800f3ee:	d002      	beq.n	800f3f6 <SP100_MD_MA_Handler+0x7a>
 800f3f0:	f7ff ff3c 	bl	800f26c <SP100_MD_MA_FWD>
 800f3f4:	e06d      	b.n	800f4d2 <SP100_MD_MA_Handler+0x156>
 800f3f6:	4b3a      	ldr	r3, [pc, #232]	; (800f4e0 <SP100_MD_MA_Handler+0x164>)
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	1c18      	adds	r0, r3, #0
 800f3fc:	f7f3 fd4a 	bl	8002e94 <__aeabi_f2d>
 800f400:	4a3e      	ldr	r2, [pc, #248]	; (800f4fc <SP100_MD_MA_Handler+0x180>)
 800f402:	4b3f      	ldr	r3, [pc, #252]	; (800f500 <SP100_MD_MA_Handler+0x184>)
 800f404:	f7f1 f846 	bl	8000494 <__aeabi_dcmpge>
 800f408:	1e03      	subs	r3, r0, #0
 800f40a:	d002      	beq.n	800f412 <SP100_MD_MA_Handler+0x96>
 800f40c:	f7ff ff72 	bl	800f2f4 <SP100_MD_MA_RVS>
 800f410:	e05f      	b.n	800f4d2 <SP100_MD_MA_Handler+0x156>
 800f412:	f7ff fef1 	bl	800f1f8 <SP100_MD_MA_STP>
 800f416:	e05c      	b.n	800f4d2 <SP100_MD_MA_Handler+0x156>
 800f418:	4b31      	ldr	r3, [pc, #196]	; (800f4e0 <SP100_MD_MA_Handler+0x164>)
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	1c18      	adds	r0, r3, #0
 800f41e:	f7f3 fd39 	bl	8002e94 <__aeabi_f2d>
 800f422:	4a38      	ldr	r2, [pc, #224]	; (800f504 <SP100_MD_MA_Handler+0x188>)
 800f424:	4b38      	ldr	r3, [pc, #224]	; (800f508 <SP100_MD_MA_Handler+0x18c>)
 800f426:	f7f1 f821 	bl	800046c <__aeabi_dcmple>
 800f42a:	1e03      	subs	r3, r0, #0
 800f42c:	d002      	beq.n	800f434 <SP100_MD_MA_Handler+0xb8>
 800f42e:	f7ff ff1d 	bl	800f26c <SP100_MD_MA_FWD>
 800f432:	e04e      	b.n	800f4d2 <SP100_MD_MA_Handler+0x156>
 800f434:	4b2a      	ldr	r3, [pc, #168]	; (800f4e0 <SP100_MD_MA_Handler+0x164>)
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	1c18      	adds	r0, r3, #0
 800f43a:	f7f3 fd2b 	bl	8002e94 <__aeabi_f2d>
 800f43e:	4a33      	ldr	r2, [pc, #204]	; (800f50c <SP100_MD_MA_Handler+0x190>)
 800f440:	4b33      	ldr	r3, [pc, #204]	; (800f510 <SP100_MD_MA_Handler+0x194>)
 800f442:	f7f1 f827 	bl	8000494 <__aeabi_dcmpge>
 800f446:	1e03      	subs	r3, r0, #0
 800f448:	d002      	beq.n	800f450 <SP100_MD_MA_Handler+0xd4>
 800f44a:	f7ff ff53 	bl	800f2f4 <SP100_MD_MA_RVS>
 800f44e:	e040      	b.n	800f4d2 <SP100_MD_MA_Handler+0x156>
 800f450:	f7ff fed2 	bl	800f1f8 <SP100_MD_MA_STP>
 800f454:	e03d      	b.n	800f4d2 <SP100_MD_MA_Handler+0x156>
 800f456:	4b22      	ldr	r3, [pc, #136]	; (800f4e0 <SP100_MD_MA_Handler+0x164>)
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	1c18      	adds	r0, r3, #0
 800f45c:	f7f3 fd1a 	bl	8002e94 <__aeabi_f2d>
 800f460:	4a2c      	ldr	r2, [pc, #176]	; (800f514 <SP100_MD_MA_Handler+0x198>)
 800f462:	4b2d      	ldr	r3, [pc, #180]	; (800f518 <SP100_MD_MA_Handler+0x19c>)
 800f464:	f7f1 f802 	bl	800046c <__aeabi_dcmple>
 800f468:	1e03      	subs	r3, r0, #0
 800f46a:	d002      	beq.n	800f472 <SP100_MD_MA_Handler+0xf6>
 800f46c:	f7ff fefe 	bl	800f26c <SP100_MD_MA_FWD>
 800f470:	e02f      	b.n	800f4d2 <SP100_MD_MA_Handler+0x156>
 800f472:	4b1b      	ldr	r3, [pc, #108]	; (800f4e0 <SP100_MD_MA_Handler+0x164>)
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	1c18      	adds	r0, r3, #0
 800f478:	f7f3 fd0c 	bl	8002e94 <__aeabi_f2d>
 800f47c:	4a27      	ldr	r2, [pc, #156]	; (800f51c <SP100_MD_MA_Handler+0x1a0>)
 800f47e:	4b28      	ldr	r3, [pc, #160]	; (800f520 <SP100_MD_MA_Handler+0x1a4>)
 800f480:	f7f1 f808 	bl	8000494 <__aeabi_dcmpge>
 800f484:	1e03      	subs	r3, r0, #0
 800f486:	d002      	beq.n	800f48e <SP100_MD_MA_Handler+0x112>
 800f488:	f7ff ff34 	bl	800f2f4 <SP100_MD_MA_RVS>
 800f48c:	e021      	b.n	800f4d2 <SP100_MD_MA_Handler+0x156>
 800f48e:	f7ff feb3 	bl	800f1f8 <SP100_MD_MA_STP>
 800f492:	e01e      	b.n	800f4d2 <SP100_MD_MA_Handler+0x156>
 800f494:	4b12      	ldr	r3, [pc, #72]	; (800f4e0 <SP100_MD_MA_Handler+0x164>)
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	1c18      	adds	r0, r3, #0
 800f49a:	f7f3 fcfb 	bl	8002e94 <__aeabi_f2d>
 800f49e:	4a19      	ldr	r2, [pc, #100]	; (800f504 <SP100_MD_MA_Handler+0x188>)
 800f4a0:	4b20      	ldr	r3, [pc, #128]	; (800f524 <SP100_MD_MA_Handler+0x1a8>)
 800f4a2:	f7f0 ffe3 	bl	800046c <__aeabi_dcmple>
 800f4a6:	1e03      	subs	r3, r0, #0
 800f4a8:	d002      	beq.n	800f4b0 <SP100_MD_MA_Handler+0x134>
 800f4aa:	f7ff fedf 	bl	800f26c <SP100_MD_MA_FWD>
 800f4ae:	e00f      	b.n	800f4d0 <SP100_MD_MA_Handler+0x154>
 800f4b0:	4b0b      	ldr	r3, [pc, #44]	; (800f4e0 <SP100_MD_MA_Handler+0x164>)
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	1c18      	adds	r0, r3, #0
 800f4b6:	f7f3 fced 	bl	8002e94 <__aeabi_f2d>
 800f4ba:	4a0c      	ldr	r2, [pc, #48]	; (800f4ec <SP100_MD_MA_Handler+0x170>)
 800f4bc:	4b1a      	ldr	r3, [pc, #104]	; (800f528 <SP100_MD_MA_Handler+0x1ac>)
 800f4be:	f7f0 ffe9 	bl	8000494 <__aeabi_dcmpge>
 800f4c2:	1e03      	subs	r3, r0, #0
 800f4c4:	d002      	beq.n	800f4cc <SP100_MD_MA_Handler+0x150>
 800f4c6:	f7ff ff15 	bl	800f2f4 <SP100_MD_MA_RVS>
 800f4ca:	e001      	b.n	800f4d0 <SP100_MD_MA_Handler+0x154>
 800f4cc:	f7ff fe94 	bl	800f1f8 <SP100_MD_MA_STP>
 800f4d0:	46c0      	nop			; (mov r8, r8)
 800f4d2:	46c0      	nop			; (mov r8, r8)
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	b002      	add	sp, #8
 800f4d8:	bd80      	pop	{r7, pc}
 800f4da:	46c0      	nop			; (mov r8, r8)
 800f4dc:	08015210 	.word	0x08015210
 800f4e0:	2000059c 	.word	0x2000059c
 800f4e4:	cccccccd 	.word	0xcccccccd
 800f4e8:	4012cccc 	.word	0x4012cccc
 800f4ec:	33333333 	.word	0x33333333
 800f4f0:	40133333 	.word	0x40133333
 800f4f4:	0a3d70a4 	.word	0x0a3d70a4
 800f4f8:	400ca3d7 	.word	0x400ca3d7
 800f4fc:	d70a3d70 	.word	0xd70a3d70
 800f500:	400d70a3 	.word	0x400d70a3
 800f504:	9999999a 	.word	0x9999999a
 800f508:	40039999 	.word	0x40039999
 800f50c:	66666666 	.word	0x66666666
 800f510:	40046666 	.word	0x40046666
 800f514:	147ae147 	.word	0x147ae147
 800f518:	3ff547ae 	.word	0x3ff547ae
 800f51c:	ae147ae1 	.word	0xae147ae1
 800f520:	3ff6e147 	.word	0x3ff6e147
 800f524:	3fc99999 	.word	0x3fc99999
 800f528:	3fd33333 	.word	0x3fd33333

0800f52c <SP100_RD_OFF>:
 800f52c:	b590      	push	{r4, r7, lr}
 800f52e:	b083      	sub	sp, #12
 800f530:	af00      	add	r7, sp, #0
 800f532:	1dfc      	adds	r4, r7, #7
 800f534:	2043      	movs	r0, #67	; 0x43
 800f536:	f000 febd 	bl	80102b4 <SP100_TLE_Ctrl_Register_Read>
 800f53a:	0003      	movs	r3, r0
 800f53c:	7023      	strb	r3, [r4, #0]
 800f53e:	1dfb      	adds	r3, r7, #7
 800f540:	1dfa      	adds	r2, r7, #7
 800f542:	7812      	ldrb	r2, [r2, #0]
 800f544:	213f      	movs	r1, #63	; 0x3f
 800f546:	438a      	bics	r2, r1
 800f548:	701a      	strb	r2, [r3, #0]
 800f54a:	1dfb      	adds	r3, r7, #7
 800f54c:	781b      	ldrb	r3, [r3, #0]
 800f54e:	2b40      	cmp	r3, #64	; 0x40
 800f550:	d126      	bne.n	800f5a0 <SP100_RD_OFF+0x74>
 800f552:	1dfc      	adds	r4, r7, #7
 800f554:	2043      	movs	r0, #67	; 0x43
 800f556:	f000 fead 	bl	80102b4 <SP100_TLE_Ctrl_Register_Read>
 800f55a:	0003      	movs	r3, r0
 800f55c:	7023      	strb	r3, [r4, #0]
 800f55e:	1dfb      	adds	r3, r7, #7
 800f560:	1dfa      	adds	r2, r7, #7
 800f562:	7812      	ldrb	r2, [r2, #0]
 800f564:	213f      	movs	r1, #63	; 0x3f
 800f566:	400a      	ands	r2, r1
 800f568:	701a      	strb	r2, [r3, #0]
 800f56a:	1dfb      	adds	r3, r7, #7
 800f56c:	1dfa      	adds	r2, r7, #7
 800f56e:	7812      	ldrb	r2, [r2, #0]
 800f570:	701a      	strb	r2, [r3, #0]
 800f572:	1dfb      	adds	r3, r7, #7
 800f574:	781b      	ldrb	r3, [r3, #0]
 800f576:	0019      	movs	r1, r3
 800f578:	2043      	movs	r0, #67	; 0x43
 800f57a:	f000 fed9 	bl	8010330 <SP100_TLE_Ctrl_Register_Write>
 800f57e:	2380      	movs	r3, #128	; 0x80
 800f580:	0099      	lsls	r1, r3, #2
 800f582:	2390      	movs	r3, #144	; 0x90
 800f584:	05db      	lsls	r3, r3, #23
 800f586:	2200      	movs	r2, #0
 800f588:	0018      	movs	r0, r3
 800f58a:	f7f6 fb80 	bl	8005c8e <HAL_GPIO_WritePin>
 800f58e:	4b06      	ldr	r3, [pc, #24]	; (800f5a8 <SP100_RD_OFF+0x7c>)
 800f590:	0018      	movs	r0, r3
 800f592:	f7f8 fae7 	bl	8007b64 <HAL_TIM_Base_Stop_IT>
 800f596:	4b04      	ldr	r3, [pc, #16]	; (800f5a8 <SP100_RD_OFF+0x7c>)
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	2202      	movs	r2, #2
 800f59c:	4252      	negs	r2, r2
 800f59e:	611a      	str	r2, [r3, #16]
 800f5a0:	46c0      	nop			; (mov r8, r8)
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	b003      	add	sp, #12
 800f5a6:	bd90      	pop	{r4, r7, pc}
 800f5a8:	200003b8 	.word	0x200003b8

0800f5ac <SP100_RD_ON>:
 800f5ac:	b590      	push	{r4, r7, lr}
 800f5ae:	b083      	sub	sp, #12
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	1dfc      	adds	r4, r7, #7
 800f5b4:	2043      	movs	r0, #67	; 0x43
 800f5b6:	f000 fe7d 	bl	80102b4 <SP100_TLE_Ctrl_Register_Read>
 800f5ba:	0003      	movs	r3, r0
 800f5bc:	7023      	strb	r3, [r4, #0]
 800f5be:	1dfb      	adds	r3, r7, #7
 800f5c0:	1dfa      	adds	r2, r7, #7
 800f5c2:	7812      	ldrb	r2, [r2, #0]
 800f5c4:	213f      	movs	r1, #63	; 0x3f
 800f5c6:	438a      	bics	r2, r1
 800f5c8:	701a      	strb	r2, [r3, #0]
 800f5ca:	1dfb      	adds	r3, r7, #7
 800f5cc:	781b      	ldrb	r3, [r3, #0]
 800f5ce:	2b40      	cmp	r3, #64	; 0x40
 800f5d0:	d02c      	beq.n	800f62c <SP100_RD_ON+0x80>
 800f5d2:	1dfc      	adds	r4, r7, #7
 800f5d4:	2043      	movs	r0, #67	; 0x43
 800f5d6:	f000 fe6d 	bl	80102b4 <SP100_TLE_Ctrl_Register_Read>
 800f5da:	0003      	movs	r3, r0
 800f5dc:	7023      	strb	r3, [r4, #0]
 800f5de:	1dfb      	adds	r3, r7, #7
 800f5e0:	1dfa      	adds	r2, r7, #7
 800f5e2:	7812      	ldrb	r2, [r2, #0]
 800f5e4:	213f      	movs	r1, #63	; 0x3f
 800f5e6:	400a      	ands	r2, r1
 800f5e8:	701a      	strb	r2, [r3, #0]
 800f5ea:	1dfb      	adds	r3, r7, #7
 800f5ec:	1dfa      	adds	r2, r7, #7
 800f5ee:	7812      	ldrb	r2, [r2, #0]
 800f5f0:	2140      	movs	r1, #64	; 0x40
 800f5f2:	430a      	orrs	r2, r1
 800f5f4:	701a      	strb	r2, [r3, #0]
 800f5f6:	1dfb      	adds	r3, r7, #7
 800f5f8:	781b      	ldrb	r3, [r3, #0]
 800f5fa:	0019      	movs	r1, r3
 800f5fc:	2043      	movs	r0, #67	; 0x43
 800f5fe:	f000 fe97 	bl	8010330 <SP100_TLE_Ctrl_Register_Write>
 800f602:	2380      	movs	r3, #128	; 0x80
 800f604:	0099      	lsls	r1, r3, #2
 800f606:	2390      	movs	r3, #144	; 0x90
 800f608:	05db      	lsls	r3, r3, #23
 800f60a:	2201      	movs	r2, #1
 800f60c:	0018      	movs	r0, r3
 800f60e:	f7f6 fb3e 	bl	8005c8e <HAL_GPIO_WritePin>
 800f612:	4b08      	ldr	r3, [pc, #32]	; (800f634 <SP100_RD_ON+0x88>)
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	2200      	movs	r2, #0
 800f618:	625a      	str	r2, [r3, #36]	; 0x24
 800f61a:	4b06      	ldr	r3, [pc, #24]	; (800f634 <SP100_RD_ON+0x88>)
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	2202      	movs	r2, #2
 800f620:	4252      	negs	r2, r2
 800f622:	611a      	str	r2, [r3, #16]
 800f624:	4b03      	ldr	r3, [pc, #12]	; (800f634 <SP100_RD_ON+0x88>)
 800f626:	0018      	movs	r0, r3
 800f628:	f7f8 fa4a 	bl	8007ac0 <HAL_TIM_Base_Start_IT>
 800f62c:	46c0      	nop			; (mov r8, r8)
 800f62e:	46bd      	mov	sp, r7
 800f630:	b003      	add	sp, #12
 800f632:	bd90      	pop	{r4, r7, pc}
 800f634:	200003b8 	.word	0x200003b8

0800f638 <SP100_RD_Handler>:
 800f638:	b580      	push	{r7, lr}
 800f63a:	b082      	sub	sp, #8
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	0002      	movs	r2, r0
 800f640:	1dfb      	adds	r3, r7, #7
 800f642:	701a      	strb	r2, [r3, #0]
 800f644:	1dfb      	adds	r3, r7, #7
 800f646:	781b      	ldrb	r3, [r3, #0]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d002      	beq.n	800f652 <SP100_RD_Handler+0x1a>
 800f64c:	2b01      	cmp	r3, #1
 800f64e:	d003      	beq.n	800f658 <SP100_RD_Handler+0x20>
 800f650:	e005      	b.n	800f65e <SP100_RD_Handler+0x26>
 800f652:	f7ff ff6b 	bl	800f52c <SP100_RD_OFF>
 800f656:	e002      	b.n	800f65e <SP100_RD_Handler+0x26>
 800f658:	f7ff ffa8 	bl	800f5ac <SP100_RD_ON>
 800f65c:	46c0      	nop			; (mov r8, r8)
 800f65e:	46c0      	nop			; (mov r8, r8)
 800f660:	46bd      	mov	sp, r7
 800f662:	b002      	add	sp, #8
 800f664:	bd80      	pop	{r7, pc}
	...

0800f668 <SP100_Snsrs_Handler>:
 800f668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f66a:	b09f      	sub	sp, #124	; 0x7c
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	0005      	movs	r5, r0
 800f670:	000c      	movs	r4, r1
 800f672:	0010      	movs	r0, r2
 800f674:	0019      	movs	r1, r3
 800f676:	1dbb      	adds	r3, r7, #6
 800f678:	1c2a      	adds	r2, r5, #0
 800f67a:	801a      	strh	r2, [r3, #0]
 800f67c:	1d3b      	adds	r3, r7, #4
 800f67e:	1c22      	adds	r2, r4, #0
 800f680:	801a      	strh	r2, [r3, #0]
 800f682:	1cbb      	adds	r3, r7, #2
 800f684:	1c02      	adds	r2, r0, #0
 800f686:	801a      	strh	r2, [r3, #0]
 800f688:	003b      	movs	r3, r7
 800f68a:	1c0a      	adds	r2, r1, #0
 800f68c:	801a      	strh	r2, [r3, #0]
 800f68e:	1dbb      	adds	r3, r7, #6
 800f690:	881b      	ldrh	r3, [r3, #0]
 800f692:	0018      	movs	r0, r3
 800f694:	f7f3 fba8 	bl	8002de8 <__aeabi_i2d>
 800f698:	4afc      	ldr	r2, [pc, #1008]	; (800fa8c <SP100_Snsrs_Handler+0x424>)
 800f69a:	4bfd      	ldr	r3, [pc, #1012]	; (800fa90 <SP100_Snsrs_Handler+0x428>)
 800f69c:	f7f2 fd52 	bl	8002144 <__aeabi_dmul>
 800f6a0:	0002      	movs	r2, r0
 800f6a2:	000b      	movs	r3, r1
 800f6a4:	0010      	movs	r0, r2
 800f6a6:	0019      	movs	r1, r3
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	4bfa      	ldr	r3, [pc, #1000]	; (800fa94 <SP100_Snsrs_Handler+0x42c>)
 800f6ac:	f7f2 f948 	bl	8001940 <__aeabi_ddiv>
 800f6b0:	0002      	movs	r2, r0
 800f6b2:	000b      	movs	r3, r1
 800f6b4:	0010      	movs	r0, r2
 800f6b6:	0019      	movs	r1, r3
 800f6b8:	f7f3 fc34 	bl	8002f24 <__aeabi_d2f>
 800f6bc:	1c02      	adds	r2, r0, #0
 800f6be:	2638      	movs	r6, #56	; 0x38
 800f6c0:	19bb      	adds	r3, r7, r6
 800f6c2:	601a      	str	r2, [r3, #0]
 800f6c4:	1d3b      	adds	r3, r7, #4
 800f6c6:	881b      	ldrh	r3, [r3, #0]
 800f6c8:	0018      	movs	r0, r3
 800f6ca:	f7f3 fb8d 	bl	8002de8 <__aeabi_i2d>
 800f6ce:	4aef      	ldr	r2, [pc, #956]	; (800fa8c <SP100_Snsrs_Handler+0x424>)
 800f6d0:	4bef      	ldr	r3, [pc, #956]	; (800fa90 <SP100_Snsrs_Handler+0x428>)
 800f6d2:	f7f2 fd37 	bl	8002144 <__aeabi_dmul>
 800f6d6:	0002      	movs	r2, r0
 800f6d8:	000b      	movs	r3, r1
 800f6da:	0010      	movs	r0, r2
 800f6dc:	0019      	movs	r1, r3
 800f6de:	2200      	movs	r2, #0
 800f6e0:	4bec      	ldr	r3, [pc, #944]	; (800fa94 <SP100_Snsrs_Handler+0x42c>)
 800f6e2:	f7f2 f92d 	bl	8001940 <__aeabi_ddiv>
 800f6e6:	0002      	movs	r2, r0
 800f6e8:	000b      	movs	r3, r1
 800f6ea:	0010      	movs	r0, r2
 800f6ec:	0019      	movs	r1, r3
 800f6ee:	f7f3 fc19 	bl	8002f24 <__aeabi_d2f>
 800f6f2:	1c02      	adds	r2, r0, #0
 800f6f4:	19bb      	adds	r3, r7, r6
 800f6f6:	605a      	str	r2, [r3, #4]
 800f6f8:	1cbb      	adds	r3, r7, #2
 800f6fa:	881b      	ldrh	r3, [r3, #0]
 800f6fc:	0018      	movs	r0, r3
 800f6fe:	f7f3 fb73 	bl	8002de8 <__aeabi_i2d>
 800f702:	4ae2      	ldr	r2, [pc, #904]	; (800fa8c <SP100_Snsrs_Handler+0x424>)
 800f704:	4be2      	ldr	r3, [pc, #904]	; (800fa90 <SP100_Snsrs_Handler+0x428>)
 800f706:	f7f2 fd1d 	bl	8002144 <__aeabi_dmul>
 800f70a:	0002      	movs	r2, r0
 800f70c:	000b      	movs	r3, r1
 800f70e:	0010      	movs	r0, r2
 800f710:	0019      	movs	r1, r3
 800f712:	2200      	movs	r2, #0
 800f714:	4bdf      	ldr	r3, [pc, #892]	; (800fa94 <SP100_Snsrs_Handler+0x42c>)
 800f716:	f7f2 f913 	bl	8001940 <__aeabi_ddiv>
 800f71a:	0002      	movs	r2, r0
 800f71c:	000b      	movs	r3, r1
 800f71e:	0010      	movs	r0, r2
 800f720:	0019      	movs	r1, r3
 800f722:	f7f3 fbff 	bl	8002f24 <__aeabi_d2f>
 800f726:	1c02      	adds	r2, r0, #0
 800f728:	19bb      	adds	r3, r7, r6
 800f72a:	609a      	str	r2, [r3, #8]
 800f72c:	003b      	movs	r3, r7
 800f72e:	881b      	ldrh	r3, [r3, #0]
 800f730:	0018      	movs	r0, r3
 800f732:	f7f3 fb59 	bl	8002de8 <__aeabi_i2d>
 800f736:	4ad5      	ldr	r2, [pc, #852]	; (800fa8c <SP100_Snsrs_Handler+0x424>)
 800f738:	4bd5      	ldr	r3, [pc, #852]	; (800fa90 <SP100_Snsrs_Handler+0x428>)
 800f73a:	f7f2 fd03 	bl	8002144 <__aeabi_dmul>
 800f73e:	0002      	movs	r2, r0
 800f740:	000b      	movs	r3, r1
 800f742:	0010      	movs	r0, r2
 800f744:	0019      	movs	r1, r3
 800f746:	2200      	movs	r2, #0
 800f748:	4bd2      	ldr	r3, [pc, #840]	; (800fa94 <SP100_Snsrs_Handler+0x42c>)
 800f74a:	f7f2 f8f9 	bl	8001940 <__aeabi_ddiv>
 800f74e:	0002      	movs	r2, r0
 800f750:	000b      	movs	r3, r1
 800f752:	0010      	movs	r0, r2
 800f754:	0019      	movs	r1, r3
 800f756:	f7f3 fbe5 	bl	8002f24 <__aeabi_d2f>
 800f75a:	1c02      	adds	r2, r0, #0
 800f75c:	19bb      	adds	r3, r7, r6
 800f75e:	60da      	str	r2, [r3, #12]
 800f760:	19bb      	adds	r3, r7, r6
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	1c18      	adds	r0, r3, #0
 800f766:	f7f3 fb95 	bl	8002e94 <__aeabi_f2d>
 800f76a:	2200      	movs	r2, #0
 800f76c:	4bca      	ldr	r3, [pc, #808]	; (800fa98 <SP100_Snsrs_Handler+0x430>)
 800f76e:	f7f2 fce9 	bl	8002144 <__aeabi_dmul>
 800f772:	0002      	movs	r2, r0
 800f774:	000b      	movs	r3, r1
 800f776:	0014      	movs	r4, r2
 800f778:	001d      	movs	r5, r3
 800f77a:	19bb      	adds	r3, r7, r6
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	1c18      	adds	r0, r3, #0
 800f780:	f7f3 fb88 	bl	8002e94 <__aeabi_f2d>
 800f784:	0002      	movs	r2, r0
 800f786:	000b      	movs	r3, r1
 800f788:	48c0      	ldr	r0, [pc, #768]	; (800fa8c <SP100_Snsrs_Handler+0x424>)
 800f78a:	49c1      	ldr	r1, [pc, #772]	; (800fa90 <SP100_Snsrs_Handler+0x428>)
 800f78c:	f7f2 ff46 	bl	800261c <__aeabi_dsub>
 800f790:	0002      	movs	r2, r0
 800f792:	000b      	movs	r3, r1
 800f794:	0020      	movs	r0, r4
 800f796:	0029      	movs	r1, r5
 800f798:	f7f2 f8d2 	bl	8001940 <__aeabi_ddiv>
 800f79c:	0002      	movs	r2, r0
 800f79e:	000b      	movs	r3, r1
 800f7a0:	0010      	movs	r0, r2
 800f7a2:	0019      	movs	r1, r3
 800f7a4:	f7f3 fbbe 	bl	8002f24 <__aeabi_d2f>
 800f7a8:	1c02      	adds	r2, r0, #0
 800f7aa:	2328      	movs	r3, #40	; 0x28
 800f7ac:	18fb      	adds	r3, r7, r3
 800f7ae:	601a      	str	r2, [r3, #0]
 800f7b0:	19bb      	adds	r3, r7, r6
 800f7b2:	685b      	ldr	r3, [r3, #4]
 800f7b4:	1c18      	adds	r0, r3, #0
 800f7b6:	f7f3 fb6d 	bl	8002e94 <__aeabi_f2d>
 800f7ba:	2200      	movs	r2, #0
 800f7bc:	4bb7      	ldr	r3, [pc, #732]	; (800fa9c <SP100_Snsrs_Handler+0x434>)
 800f7be:	f7f2 fcc1 	bl	8002144 <__aeabi_dmul>
 800f7c2:	0002      	movs	r2, r0
 800f7c4:	000b      	movs	r3, r1
 800f7c6:	0014      	movs	r4, r2
 800f7c8:	001d      	movs	r5, r3
 800f7ca:	19bb      	adds	r3, r7, r6
 800f7cc:	685b      	ldr	r3, [r3, #4]
 800f7ce:	1c18      	adds	r0, r3, #0
 800f7d0:	f7f3 fb60 	bl	8002e94 <__aeabi_f2d>
 800f7d4:	0002      	movs	r2, r0
 800f7d6:	000b      	movs	r3, r1
 800f7d8:	48ac      	ldr	r0, [pc, #688]	; (800fa8c <SP100_Snsrs_Handler+0x424>)
 800f7da:	49ad      	ldr	r1, [pc, #692]	; (800fa90 <SP100_Snsrs_Handler+0x428>)
 800f7dc:	f7f2 ff1e 	bl	800261c <__aeabi_dsub>
 800f7e0:	0002      	movs	r2, r0
 800f7e2:	000b      	movs	r3, r1
 800f7e4:	0020      	movs	r0, r4
 800f7e6:	0029      	movs	r1, r5
 800f7e8:	f7f2 f8aa 	bl	8001940 <__aeabi_ddiv>
 800f7ec:	0002      	movs	r2, r0
 800f7ee:	000b      	movs	r3, r1
 800f7f0:	0010      	movs	r0, r2
 800f7f2:	0019      	movs	r1, r3
 800f7f4:	f7f3 fb96 	bl	8002f24 <__aeabi_d2f>
 800f7f8:	1c02      	adds	r2, r0, #0
 800f7fa:	2328      	movs	r3, #40	; 0x28
 800f7fc:	18fb      	adds	r3, r7, r3
 800f7fe:	605a      	str	r2, [r3, #4]
 800f800:	19bb      	adds	r3, r7, r6
 800f802:	689b      	ldr	r3, [r3, #8]
 800f804:	1c18      	adds	r0, r3, #0
 800f806:	f7f3 fb45 	bl	8002e94 <__aeabi_f2d>
 800f80a:	2200      	movs	r2, #0
 800f80c:	4ba4      	ldr	r3, [pc, #656]	; (800faa0 <SP100_Snsrs_Handler+0x438>)
 800f80e:	f7f2 fc99 	bl	8002144 <__aeabi_dmul>
 800f812:	0002      	movs	r2, r0
 800f814:	000b      	movs	r3, r1
 800f816:	0014      	movs	r4, r2
 800f818:	001d      	movs	r5, r3
 800f81a:	19bb      	adds	r3, r7, r6
 800f81c:	689b      	ldr	r3, [r3, #8]
 800f81e:	1c18      	adds	r0, r3, #0
 800f820:	f7f3 fb38 	bl	8002e94 <__aeabi_f2d>
 800f824:	0002      	movs	r2, r0
 800f826:	000b      	movs	r3, r1
 800f828:	4898      	ldr	r0, [pc, #608]	; (800fa8c <SP100_Snsrs_Handler+0x424>)
 800f82a:	4999      	ldr	r1, [pc, #612]	; (800fa90 <SP100_Snsrs_Handler+0x428>)
 800f82c:	f7f2 fef6 	bl	800261c <__aeabi_dsub>
 800f830:	0002      	movs	r2, r0
 800f832:	000b      	movs	r3, r1
 800f834:	0020      	movs	r0, r4
 800f836:	0029      	movs	r1, r5
 800f838:	f7f2 f882 	bl	8001940 <__aeabi_ddiv>
 800f83c:	0002      	movs	r2, r0
 800f83e:	000b      	movs	r3, r1
 800f840:	0010      	movs	r0, r2
 800f842:	0019      	movs	r1, r3
 800f844:	f7f3 fb6e 	bl	8002f24 <__aeabi_d2f>
 800f848:	1c02      	adds	r2, r0, #0
 800f84a:	2328      	movs	r3, #40	; 0x28
 800f84c:	18fb      	adds	r3, r7, r3
 800f84e:	609a      	str	r2, [r3, #8]
 800f850:	19bb      	adds	r3, r7, r6
 800f852:	68db      	ldr	r3, [r3, #12]
 800f854:	1c18      	adds	r0, r3, #0
 800f856:	f7f3 fb1d 	bl	8002e94 <__aeabi_f2d>
 800f85a:	2200      	movs	r2, #0
 800f85c:	4b8e      	ldr	r3, [pc, #568]	; (800fa98 <SP100_Snsrs_Handler+0x430>)
 800f85e:	f7f2 fc71 	bl	8002144 <__aeabi_dmul>
 800f862:	0002      	movs	r2, r0
 800f864:	000b      	movs	r3, r1
 800f866:	0014      	movs	r4, r2
 800f868:	001d      	movs	r5, r3
 800f86a:	19bb      	adds	r3, r7, r6
 800f86c:	68db      	ldr	r3, [r3, #12]
 800f86e:	1c18      	adds	r0, r3, #0
 800f870:	f7f3 fb10 	bl	8002e94 <__aeabi_f2d>
 800f874:	0002      	movs	r2, r0
 800f876:	000b      	movs	r3, r1
 800f878:	4884      	ldr	r0, [pc, #528]	; (800fa8c <SP100_Snsrs_Handler+0x424>)
 800f87a:	4985      	ldr	r1, [pc, #532]	; (800fa90 <SP100_Snsrs_Handler+0x428>)
 800f87c:	f7f2 fece 	bl	800261c <__aeabi_dsub>
 800f880:	0002      	movs	r2, r0
 800f882:	000b      	movs	r3, r1
 800f884:	0020      	movs	r0, r4
 800f886:	0029      	movs	r1, r5
 800f888:	f7f2 f85a 	bl	8001940 <__aeabi_ddiv>
 800f88c:	0002      	movs	r2, r0
 800f88e:	000b      	movs	r3, r1
 800f890:	0010      	movs	r0, r2
 800f892:	0019      	movs	r1, r3
 800f894:	f7f3 fb46 	bl	8002f24 <__aeabi_d2f>
 800f898:	1c02      	adds	r2, r0, #0
 800f89a:	2428      	movs	r4, #40	; 0x28
 800f89c:	193b      	adds	r3, r7, r4
 800f89e:	60da      	str	r2, [r3, #12]
 800f8a0:	193b      	adds	r3, r7, r4
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	1c18      	adds	r0, r3, #0
 800f8a6:	f004 fc0b 	bl	80140c0 <logf>
 800f8aa:	1c02      	adds	r2, r0, #0
 800f8ac:	2618      	movs	r6, #24
 800f8ae:	19bb      	adds	r3, r7, r6
 800f8b0:	601a      	str	r2, [r3, #0]
 800f8b2:	193b      	adds	r3, r7, r4
 800f8b4:	685b      	ldr	r3, [r3, #4]
 800f8b6:	1c18      	adds	r0, r3, #0
 800f8b8:	f004 fc02 	bl	80140c0 <logf>
 800f8bc:	1c02      	adds	r2, r0, #0
 800f8be:	19bb      	adds	r3, r7, r6
 800f8c0:	605a      	str	r2, [r3, #4]
 800f8c2:	193b      	adds	r3, r7, r4
 800f8c4:	689b      	ldr	r3, [r3, #8]
 800f8c6:	1c18      	adds	r0, r3, #0
 800f8c8:	f004 fbfa 	bl	80140c0 <logf>
 800f8cc:	1c02      	adds	r2, r0, #0
 800f8ce:	19bb      	adds	r3, r7, r6
 800f8d0:	609a      	str	r2, [r3, #8]
 800f8d2:	193b      	adds	r3, r7, r4
 800f8d4:	68db      	ldr	r3, [r3, #12]
 800f8d6:	1c18      	adds	r0, r3, #0
 800f8d8:	f004 fbf2 	bl	80140c0 <logf>
 800f8dc:	1c02      	adds	r2, r0, #0
 800f8de:	19bb      	adds	r3, r7, r6
 800f8e0:	60da      	str	r2, [r3, #12]
 800f8e2:	19bb      	adds	r3, r7, r6
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	1c18      	adds	r0, r3, #0
 800f8e8:	f7f3 fad4 	bl	8002e94 <__aeabi_f2d>
 800f8ec:	4a6d      	ldr	r2, [pc, #436]	; (800faa4 <SP100_Snsrs_Handler+0x43c>)
 800f8ee:	4b6e      	ldr	r3, [pc, #440]	; (800faa8 <SP100_Snsrs_Handler+0x440>)
 800f8f0:	f7f2 fc28 	bl	8002144 <__aeabi_dmul>
 800f8f4:	0002      	movs	r2, r0
 800f8f6:	000b      	movs	r3, r1
 800f8f8:	0010      	movs	r0, r2
 800f8fa:	0019      	movs	r1, r3
 800f8fc:	4a6b      	ldr	r2, [pc, #428]	; (800faac <SP100_Snsrs_Handler+0x444>)
 800f8fe:	4b6c      	ldr	r3, [pc, #432]	; (800fab0 <SP100_Snsrs_Handler+0x448>)
 800f900:	f7f1 fce2 	bl	80012c8 <__aeabi_dadd>
 800f904:	0002      	movs	r2, r0
 800f906:	000b      	movs	r3, r1
 800f908:	0014      	movs	r4, r2
 800f90a:	001d      	movs	r5, r3
 800f90c:	19bb      	adds	r3, r7, r6
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	4a68      	ldr	r2, [pc, #416]	; (800fab4 <SP100_Snsrs_Handler+0x44c>)
 800f912:	1c11      	adds	r1, r2, #0
 800f914:	1c18      	adds	r0, r3, #0
 800f916:	f004 fbff 	bl	8014118 <powf>
 800f91a:	1c03      	adds	r3, r0, #0
 800f91c:	1c18      	adds	r0, r3, #0
 800f91e:	f7f3 fab9 	bl	8002e94 <__aeabi_f2d>
 800f922:	4a65      	ldr	r2, [pc, #404]	; (800fab8 <SP100_Snsrs_Handler+0x450>)
 800f924:	4b65      	ldr	r3, [pc, #404]	; (800fabc <SP100_Snsrs_Handler+0x454>)
 800f926:	f7f2 fc0d 	bl	8002144 <__aeabi_dmul>
 800f92a:	0002      	movs	r2, r0
 800f92c:	000b      	movs	r3, r1
 800f92e:	0020      	movs	r0, r4
 800f930:	0029      	movs	r1, r5
 800f932:	f7f1 fcc9 	bl	80012c8 <__aeabi_dadd>
 800f936:	0002      	movs	r2, r0
 800f938:	000b      	movs	r3, r1
 800f93a:	2000      	movs	r0, #0
 800f93c:	4960      	ldr	r1, [pc, #384]	; (800fac0 <SP100_Snsrs_Handler+0x458>)
 800f93e:	f7f1 ffff 	bl	8001940 <__aeabi_ddiv>
 800f942:	0002      	movs	r2, r0
 800f944:	000b      	movs	r3, r1
 800f946:	0010      	movs	r0, r2
 800f948:	0019      	movs	r1, r3
 800f94a:	f7f3 faeb 	bl	8002f24 <__aeabi_d2f>
 800f94e:	1c02      	adds	r2, r0, #0
 800f950:	2308      	movs	r3, #8
 800f952:	18fb      	adds	r3, r7, r3
 800f954:	601a      	str	r2, [r3, #0]
 800f956:	19bb      	adds	r3, r7, r6
 800f958:	685b      	ldr	r3, [r3, #4]
 800f95a:	1c18      	adds	r0, r3, #0
 800f95c:	f7f3 fa9a 	bl	8002e94 <__aeabi_f2d>
 800f960:	4a58      	ldr	r2, [pc, #352]	; (800fac4 <SP100_Snsrs_Handler+0x45c>)
 800f962:	4b59      	ldr	r3, [pc, #356]	; (800fac8 <SP100_Snsrs_Handler+0x460>)
 800f964:	f7f2 fbee 	bl	8002144 <__aeabi_dmul>
 800f968:	0002      	movs	r2, r0
 800f96a:	000b      	movs	r3, r1
 800f96c:	0010      	movs	r0, r2
 800f96e:	0019      	movs	r1, r3
 800f970:	4a56      	ldr	r2, [pc, #344]	; (800facc <SP100_Snsrs_Handler+0x464>)
 800f972:	4b57      	ldr	r3, [pc, #348]	; (800fad0 <SP100_Snsrs_Handler+0x468>)
 800f974:	f7f1 fca8 	bl	80012c8 <__aeabi_dadd>
 800f978:	0002      	movs	r2, r0
 800f97a:	000b      	movs	r3, r1
 800f97c:	0014      	movs	r4, r2
 800f97e:	001d      	movs	r5, r3
 800f980:	19bb      	adds	r3, r7, r6
 800f982:	685b      	ldr	r3, [r3, #4]
 800f984:	4a4b      	ldr	r2, [pc, #300]	; (800fab4 <SP100_Snsrs_Handler+0x44c>)
 800f986:	1c11      	adds	r1, r2, #0
 800f988:	1c18      	adds	r0, r3, #0
 800f98a:	f004 fbc5 	bl	8014118 <powf>
 800f98e:	1c03      	adds	r3, r0, #0
 800f990:	1c18      	adds	r0, r3, #0
 800f992:	f7f3 fa7f 	bl	8002e94 <__aeabi_f2d>
 800f996:	4a4f      	ldr	r2, [pc, #316]	; (800fad4 <SP100_Snsrs_Handler+0x46c>)
 800f998:	4b4f      	ldr	r3, [pc, #316]	; (800fad8 <SP100_Snsrs_Handler+0x470>)
 800f99a:	f7f2 fbd3 	bl	8002144 <__aeabi_dmul>
 800f99e:	0002      	movs	r2, r0
 800f9a0:	000b      	movs	r3, r1
 800f9a2:	0020      	movs	r0, r4
 800f9a4:	0029      	movs	r1, r5
 800f9a6:	f7f1 fc8f 	bl	80012c8 <__aeabi_dadd>
 800f9aa:	0002      	movs	r2, r0
 800f9ac:	000b      	movs	r3, r1
 800f9ae:	2000      	movs	r0, #0
 800f9b0:	4943      	ldr	r1, [pc, #268]	; (800fac0 <SP100_Snsrs_Handler+0x458>)
 800f9b2:	f7f1 ffc5 	bl	8001940 <__aeabi_ddiv>
 800f9b6:	0002      	movs	r2, r0
 800f9b8:	000b      	movs	r3, r1
 800f9ba:	0010      	movs	r0, r2
 800f9bc:	0019      	movs	r1, r3
 800f9be:	f7f3 fab1 	bl	8002f24 <__aeabi_d2f>
 800f9c2:	1c02      	adds	r2, r0, #0
 800f9c4:	2308      	movs	r3, #8
 800f9c6:	18fb      	adds	r3, r7, r3
 800f9c8:	605a      	str	r2, [r3, #4]
 800f9ca:	19bb      	adds	r3, r7, r6
 800f9cc:	689b      	ldr	r3, [r3, #8]
 800f9ce:	1c18      	adds	r0, r3, #0
 800f9d0:	f7f3 fa60 	bl	8002e94 <__aeabi_f2d>
 800f9d4:	4a41      	ldr	r2, [pc, #260]	; (800fadc <SP100_Snsrs_Handler+0x474>)
 800f9d6:	4b42      	ldr	r3, [pc, #264]	; (800fae0 <SP100_Snsrs_Handler+0x478>)
 800f9d8:	f7f2 fbb4 	bl	8002144 <__aeabi_dmul>
 800f9dc:	0002      	movs	r2, r0
 800f9de:	000b      	movs	r3, r1
 800f9e0:	0010      	movs	r0, r2
 800f9e2:	0019      	movs	r1, r3
 800f9e4:	4a3f      	ldr	r2, [pc, #252]	; (800fae4 <SP100_Snsrs_Handler+0x47c>)
 800f9e6:	4b40      	ldr	r3, [pc, #256]	; (800fae8 <SP100_Snsrs_Handler+0x480>)
 800f9e8:	f7f1 fc6e 	bl	80012c8 <__aeabi_dadd>
 800f9ec:	0002      	movs	r2, r0
 800f9ee:	000b      	movs	r3, r1
 800f9f0:	0014      	movs	r4, r2
 800f9f2:	001d      	movs	r5, r3
 800f9f4:	19bb      	adds	r3, r7, r6
 800f9f6:	689b      	ldr	r3, [r3, #8]
 800f9f8:	4a2e      	ldr	r2, [pc, #184]	; (800fab4 <SP100_Snsrs_Handler+0x44c>)
 800f9fa:	1c11      	adds	r1, r2, #0
 800f9fc:	1c18      	adds	r0, r3, #0
 800f9fe:	f004 fb8b 	bl	8014118 <powf>
 800fa02:	1c03      	adds	r3, r0, #0
 800fa04:	1c18      	adds	r0, r3, #0
 800fa06:	f7f3 fa45 	bl	8002e94 <__aeabi_f2d>
 800fa0a:	4a38      	ldr	r2, [pc, #224]	; (800faec <SP100_Snsrs_Handler+0x484>)
 800fa0c:	4b38      	ldr	r3, [pc, #224]	; (800faf0 <SP100_Snsrs_Handler+0x488>)
 800fa0e:	f7f2 fb99 	bl	8002144 <__aeabi_dmul>
 800fa12:	0002      	movs	r2, r0
 800fa14:	000b      	movs	r3, r1
 800fa16:	0020      	movs	r0, r4
 800fa18:	0029      	movs	r1, r5
 800fa1a:	f7f1 fc55 	bl	80012c8 <__aeabi_dadd>
 800fa1e:	0002      	movs	r2, r0
 800fa20:	000b      	movs	r3, r1
 800fa22:	2000      	movs	r0, #0
 800fa24:	4926      	ldr	r1, [pc, #152]	; (800fac0 <SP100_Snsrs_Handler+0x458>)
 800fa26:	f7f1 ff8b 	bl	8001940 <__aeabi_ddiv>
 800fa2a:	0002      	movs	r2, r0
 800fa2c:	000b      	movs	r3, r1
 800fa2e:	0010      	movs	r0, r2
 800fa30:	0019      	movs	r1, r3
 800fa32:	f7f3 fa77 	bl	8002f24 <__aeabi_d2f>
 800fa36:	1c02      	adds	r2, r0, #0
 800fa38:	2308      	movs	r3, #8
 800fa3a:	18fb      	adds	r3, r7, r3
 800fa3c:	609a      	str	r2, [r3, #8]
 800fa3e:	19bb      	adds	r3, r7, r6
 800fa40:	68db      	ldr	r3, [r3, #12]
 800fa42:	1c18      	adds	r0, r3, #0
 800fa44:	f7f3 fa26 	bl	8002e94 <__aeabi_f2d>
 800fa48:	4a2a      	ldr	r2, [pc, #168]	; (800faf4 <SP100_Snsrs_Handler+0x48c>)
 800fa4a:	4b2b      	ldr	r3, [pc, #172]	; (800faf8 <SP100_Snsrs_Handler+0x490>)
 800fa4c:	f7f2 fb7a 	bl	8002144 <__aeabi_dmul>
 800fa50:	0002      	movs	r2, r0
 800fa52:	000b      	movs	r3, r1
 800fa54:	0010      	movs	r0, r2
 800fa56:	0019      	movs	r1, r3
 800fa58:	4a28      	ldr	r2, [pc, #160]	; (800fafc <SP100_Snsrs_Handler+0x494>)
 800fa5a:	4b29      	ldr	r3, [pc, #164]	; (800fb00 <SP100_Snsrs_Handler+0x498>)
 800fa5c:	f7f1 fc34 	bl	80012c8 <__aeabi_dadd>
 800fa60:	0002      	movs	r2, r0
 800fa62:	000b      	movs	r3, r1
 800fa64:	0014      	movs	r4, r2
 800fa66:	001d      	movs	r5, r3
 800fa68:	19bb      	adds	r3, r7, r6
 800fa6a:	68db      	ldr	r3, [r3, #12]
 800fa6c:	4a11      	ldr	r2, [pc, #68]	; (800fab4 <SP100_Snsrs_Handler+0x44c>)
 800fa6e:	1c11      	adds	r1, r2, #0
 800fa70:	1c18      	adds	r0, r3, #0
 800fa72:	f004 fb51 	bl	8014118 <powf>
 800fa76:	1c03      	adds	r3, r0, #0
 800fa78:	1c18      	adds	r0, r3, #0
 800fa7a:	f7f3 fa0b 	bl	8002e94 <__aeabi_f2d>
 800fa7e:	4a21      	ldr	r2, [pc, #132]	; (800fb04 <SP100_Snsrs_Handler+0x49c>)
 800fa80:	4b21      	ldr	r3, [pc, #132]	; (800fb08 <SP100_Snsrs_Handler+0x4a0>)
 800fa82:	f7f2 fb5f 	bl	8002144 <__aeabi_dmul>
 800fa86:	0002      	movs	r2, r0
 800fa88:	e040      	b.n	800fb0c <SP100_Snsrs_Handler+0x4a4>
 800fa8a:	46c0      	nop			; (mov r8, r8)
 800fa8c:	66666666 	.word	0x66666666
 800fa90:	400a6666 	.word	0x400a6666
 800fa94:	40affe00 	.word	0x40affe00
 800fa98:	40b25c00 	.word	0x40b25c00
 800fa9c:	40c38800 	.word	0x40c38800
 800faa0:	408f4000 	.word	0x408f4000
 800faa4:	86a04a61 	.word	0x86a04a61
 800faa8:	3f30d084 	.word	0x3f30d084
 800faac:	a091f746 	.word	0xa091f746
 800fab0:	3f5837f8 	.word	0x3f5837f8
 800fab4:	40400000 	.word	0x40400000
 800fab8:	ad3258e6 	.word	0xad3258e6
 800fabc:	be16cf9e 	.word	0xbe16cf9e
 800fac0:	3ff00000 	.word	0x3ff00000
 800fac4:	f9bcc29a 	.word	0xf9bcc29a
 800fac8:	3f307b98 	.word	0x3f307b98
 800facc:	62048fd1 	.word	0x62048fd1
 800fad0:	3f50febb 	.word	0x3f50febb
 800fad4:	c3921495 	.word	0xc3921495
 800fad8:	3df6056f 	.word	0x3df6056f
 800fadc:	ff246e11 	.word	0xff246e11
 800fae0:	3f3093c6 	.word	0x3f3093c6
 800fae4:	ce778815 	.word	0xce778815
 800fae8:	3f561af9 	.word	0x3f561af9
 800faec:	8ea43b38 	.word	0x8ea43b38
 800faf0:	3e86f097 	.word	0x3e86f097
 800faf4:	28a567c5 	.word	0x28a567c5
 800faf8:	3f32e726 	.word	0x3f32e726
 800fafc:	ecd22f3c 	.word	0xecd22f3c
 800fb00:	3f529db7 	.word	0x3f529db7
 800fb04:	cc7f1d71 	.word	0xcc7f1d71
 800fb08:	be1d0156 	.word	0xbe1d0156
 800fb0c:	000b      	movs	r3, r1
 800fb0e:	0020      	movs	r0, r4
 800fb10:	0029      	movs	r1, r5
 800fb12:	f7f1 fbd9 	bl	80012c8 <__aeabi_dadd>
 800fb16:	0002      	movs	r2, r0
 800fb18:	000b      	movs	r3, r1
 800fb1a:	2000      	movs	r0, #0
 800fb1c:	49df      	ldr	r1, [pc, #892]	; (800fe9c <SP100_Snsrs_Handler+0x834>)
 800fb1e:	f7f1 ff0f 	bl	8001940 <__aeabi_ddiv>
 800fb22:	0002      	movs	r2, r0
 800fb24:	000b      	movs	r3, r1
 800fb26:	0010      	movs	r0, r2
 800fb28:	0019      	movs	r1, r3
 800fb2a:	f7f3 f9fb 	bl	8002f24 <__aeabi_d2f>
 800fb2e:	1c02      	adds	r2, r0, #0
 800fb30:	2408      	movs	r4, #8
 800fb32:	193b      	adds	r3, r7, r4
 800fb34:	60da      	str	r2, [r3, #12]
 800fb36:	193b      	adds	r3, r7, r4
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	1c18      	adds	r0, r3, #0
 800fb3c:	f7f3 f9aa 	bl	8002e94 <__aeabi_f2d>
 800fb40:	4ad7      	ldr	r2, [pc, #860]	; (800fea0 <SP100_Snsrs_Handler+0x838>)
 800fb42:	4bd8      	ldr	r3, [pc, #864]	; (800fea4 <SP100_Snsrs_Handler+0x83c>)
 800fb44:	f7f2 fd6a 	bl	800261c <__aeabi_dsub>
 800fb48:	0002      	movs	r2, r0
 800fb4a:	000b      	movs	r3, r1
 800fb4c:	0010      	movs	r0, r2
 800fb4e:	0019      	movs	r1, r3
 800fb50:	f7f3 f9e8 	bl	8002f24 <__aeabi_d2f>
 800fb54:	1c03      	adds	r3, r0, #0
 800fb56:	677b      	str	r3, [r7, #116]	; 0x74
 800fb58:	193b      	adds	r3, r7, r4
 800fb5a:	685b      	ldr	r3, [r3, #4]
 800fb5c:	1c18      	adds	r0, r3, #0
 800fb5e:	f7f3 f999 	bl	8002e94 <__aeabi_f2d>
 800fb62:	4acf      	ldr	r2, [pc, #828]	; (800fea0 <SP100_Snsrs_Handler+0x838>)
 800fb64:	4bcf      	ldr	r3, [pc, #828]	; (800fea4 <SP100_Snsrs_Handler+0x83c>)
 800fb66:	f7f2 fd59 	bl	800261c <__aeabi_dsub>
 800fb6a:	0002      	movs	r2, r0
 800fb6c:	000b      	movs	r3, r1
 800fb6e:	0010      	movs	r0, r2
 800fb70:	0019      	movs	r1, r3
 800fb72:	f7f3 f9d7 	bl	8002f24 <__aeabi_d2f>
 800fb76:	1c03      	adds	r3, r0, #0
 800fb78:	673b      	str	r3, [r7, #112]	; 0x70
 800fb7a:	193b      	adds	r3, r7, r4
 800fb7c:	689b      	ldr	r3, [r3, #8]
 800fb7e:	1c18      	adds	r0, r3, #0
 800fb80:	f7f3 f988 	bl	8002e94 <__aeabi_f2d>
 800fb84:	4ac6      	ldr	r2, [pc, #792]	; (800fea0 <SP100_Snsrs_Handler+0x838>)
 800fb86:	4bc7      	ldr	r3, [pc, #796]	; (800fea4 <SP100_Snsrs_Handler+0x83c>)
 800fb88:	f7f2 fd48 	bl	800261c <__aeabi_dsub>
 800fb8c:	0002      	movs	r2, r0
 800fb8e:	000b      	movs	r3, r1
 800fb90:	0010      	movs	r0, r2
 800fb92:	0019      	movs	r1, r3
 800fb94:	f7f3 f9c6 	bl	8002f24 <__aeabi_d2f>
 800fb98:	1c03      	adds	r3, r0, #0
 800fb9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fb9c:	193b      	adds	r3, r7, r4
 800fb9e:	68db      	ldr	r3, [r3, #12]
 800fba0:	1c18      	adds	r0, r3, #0
 800fba2:	f7f3 f977 	bl	8002e94 <__aeabi_f2d>
 800fba6:	4abe      	ldr	r2, [pc, #760]	; (800fea0 <SP100_Snsrs_Handler+0x838>)
 800fba8:	4bbe      	ldr	r3, [pc, #760]	; (800fea4 <SP100_Snsrs_Handler+0x83c>)
 800fbaa:	f7f2 fd37 	bl	800261c <__aeabi_dsub>
 800fbae:	0002      	movs	r2, r0
 800fbb0:	000b      	movs	r3, r1
 800fbb2:	0010      	movs	r0, r2
 800fbb4:	0019      	movs	r1, r3
 800fbb6:	f7f3 f9b5 	bl	8002f24 <__aeabi_d2f>
 800fbba:	1c03      	adds	r3, r0, #0
 800fbbc:	66bb      	str	r3, [r7, #104]	; 0x68
 800fbbe:	4bba      	ldr	r3, [pc, #744]	; (800fea8 <SP100_Snsrs_Handler+0x840>)
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	2100      	movs	r1, #0
 800fbc4:	1c18      	adds	r0, r3, #0
 800fbc6:	f7f0 fc7b 	bl	80004c0 <__aeabi_fcmpeq>
 800fbca:	1e03      	subs	r3, r0, #0
 800fbcc:	d136      	bne.n	800fc3c <SP100_Snsrs_Handler+0x5d4>
 800fbce:	4bb6      	ldr	r3, [pc, #728]	; (800fea8 <SP100_Snsrs_Handler+0x840>)
 800fbd0:	681b      	ldr	r3, [r3, #0]
 800fbd2:	1c19      	adds	r1, r3, #0
 800fbd4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800fbd6:	f7f1 f945 	bl	8000e64 <__aeabi_fsub>
 800fbda:	1c03      	adds	r3, r0, #0
 800fbdc:	1c1a      	adds	r2, r3, #0
 800fbde:	4bb3      	ldr	r3, [pc, #716]	; (800feac <SP100_Snsrs_Handler+0x844>)
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	1c19      	adds	r1, r3, #0
 800fbe4:	1c10      	adds	r0, r2, #0
 800fbe6:	f7f0 fc85 	bl	80004f4 <__aeabi_fcmpgt>
 800fbea:	1e03      	subs	r3, r0, #0
 800fbec:	d00a      	beq.n	800fc04 <SP100_Snsrs_Handler+0x59c>
 800fbee:	4bae      	ldr	r3, [pc, #696]	; (800fea8 <SP100_Snsrs_Handler+0x840>)
 800fbf0:	681a      	ldr	r2, [r3, #0]
 800fbf2:	4bae      	ldr	r3, [pc, #696]	; (800feac <SP100_Snsrs_Handler+0x844>)
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	1c19      	adds	r1, r3, #0
 800fbf8:	1c10      	adds	r0, r2, #0
 800fbfa:	f7f0 fca7 	bl	800054c <__aeabi_fadd>
 800fbfe:	1c03      	adds	r3, r0, #0
 800fc00:	677b      	str	r3, [r7, #116]	; 0x74
 800fc02:	e01b      	b.n	800fc3c <SP100_Snsrs_Handler+0x5d4>
 800fc04:	4ba8      	ldr	r3, [pc, #672]	; (800fea8 <SP100_Snsrs_Handler+0x840>)
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	1c19      	adds	r1, r3, #0
 800fc0a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800fc0c:	f7f1 f92a 	bl	8000e64 <__aeabi_fsub>
 800fc10:	1c03      	adds	r3, r0, #0
 800fc12:	1c18      	adds	r0, r3, #0
 800fc14:	4ba5      	ldr	r3, [pc, #660]	; (800feac <SP100_Snsrs_Handler+0x844>)
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	2280      	movs	r2, #128	; 0x80
 800fc1a:	0612      	lsls	r2, r2, #24
 800fc1c:	4053      	eors	r3, r2
 800fc1e:	1c19      	adds	r1, r3, #0
 800fc20:	f7f0 fc54 	bl	80004cc <__aeabi_fcmplt>
 800fc24:	1e03      	subs	r3, r0, #0
 800fc26:	d009      	beq.n	800fc3c <SP100_Snsrs_Handler+0x5d4>
 800fc28:	4b9f      	ldr	r3, [pc, #636]	; (800fea8 <SP100_Snsrs_Handler+0x840>)
 800fc2a:	681a      	ldr	r2, [r3, #0]
 800fc2c:	4b9f      	ldr	r3, [pc, #636]	; (800feac <SP100_Snsrs_Handler+0x844>)
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	1c19      	adds	r1, r3, #0
 800fc32:	1c10      	adds	r0, r2, #0
 800fc34:	f7f1 f916 	bl	8000e64 <__aeabi_fsub>
 800fc38:	1c03      	adds	r3, r0, #0
 800fc3a:	677b      	str	r3, [r7, #116]	; 0x74
 800fc3c:	4b9c      	ldr	r3, [pc, #624]	; (800feb0 <SP100_Snsrs_Handler+0x848>)
 800fc3e:	681a      	ldr	r2, [r3, #0]
 800fc40:	4b9c      	ldr	r3, [pc, #624]	; (800feb4 <SP100_Snsrs_Handler+0x84c>)
 800fc42:	0092      	lsls	r2, r2, #2
 800fc44:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800fc46:	50d1      	str	r1, [r2, r3]
 800fc48:	4b99      	ldr	r3, [pc, #612]	; (800feb0 <SP100_Snsrs_Handler+0x848>)
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	1c5a      	adds	r2, r3, #1
 800fc4e:	4b98      	ldr	r3, [pc, #608]	; (800feb0 <SP100_Snsrs_Handler+0x848>)
 800fc50:	601a      	str	r2, [r3, #0]
 800fc52:	4b97      	ldr	r3, [pc, #604]	; (800feb0 <SP100_Snsrs_Handler+0x848>)
 800fc54:	681a      	ldr	r2, [r3, #0]
 800fc56:	4b98      	ldr	r3, [pc, #608]	; (800feb8 <SP100_Snsrs_Handler+0x850>)
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	429a      	cmp	r2, r3
 800fc5c:	db02      	blt.n	800fc64 <SP100_Snsrs_Handler+0x5fc>
 800fc5e:	4b94      	ldr	r3, [pc, #592]	; (800feb0 <SP100_Snsrs_Handler+0x848>)
 800fc60:	2200      	movs	r2, #0
 800fc62:	601a      	str	r2, [r3, #0]
 800fc64:	2300      	movs	r3, #0
 800fc66:	667b      	str	r3, [r7, #100]	; 0x64
 800fc68:	4b93      	ldr	r3, [pc, #588]	; (800feb8 <SP100_Snsrs_Handler+0x850>)
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	663b      	str	r3, [r7, #96]	; 0x60
 800fc6e:	2400      	movs	r4, #0
 800fc70:	e016      	b.n	800fca0 <SP100_Snsrs_Handler+0x638>
 800fc72:	4b90      	ldr	r3, [pc, #576]	; (800feb4 <SP100_Snsrs_Handler+0x84c>)
 800fc74:	00a2      	lsls	r2, r4, #2
 800fc76:	58d3      	ldr	r3, [r2, r3]
 800fc78:	2100      	movs	r1, #0
 800fc7a:	1c18      	adds	r0, r3, #0
 800fc7c:	f7f0 fc20 	bl	80004c0 <__aeabi_fcmpeq>
 800fc80:	1e03      	subs	r3, r0, #0
 800fc82:	d109      	bne.n	800fc98 <SP100_Snsrs_Handler+0x630>
 800fc84:	4b8b      	ldr	r3, [pc, #556]	; (800feb4 <SP100_Snsrs_Handler+0x84c>)
 800fc86:	00a2      	lsls	r2, r4, #2
 800fc88:	58d3      	ldr	r3, [r2, r3]
 800fc8a:	1c19      	adds	r1, r3, #0
 800fc8c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800fc8e:	f7f0 fc5d 	bl	800054c <__aeabi_fadd>
 800fc92:	1c03      	adds	r3, r0, #0
 800fc94:	667b      	str	r3, [r7, #100]	; 0x64
 800fc96:	e002      	b.n	800fc9e <SP100_Snsrs_Handler+0x636>
 800fc98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fc9a:	3b01      	subs	r3, #1
 800fc9c:	663b      	str	r3, [r7, #96]	; 0x60
 800fc9e:	3401      	adds	r4, #1
 800fca0:	4b85      	ldr	r3, [pc, #532]	; (800feb8 <SP100_Snsrs_Handler+0x850>)
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	429c      	cmp	r4, r3
 800fca6:	dbe4      	blt.n	800fc72 <SP100_Snsrs_Handler+0x60a>
 800fca8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800fcaa:	f7f1 fabf 	bl	800122c <__aeabi_i2f>
 800fcae:	1c03      	adds	r3, r0, #0
 800fcb0:	1c19      	adds	r1, r3, #0
 800fcb2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800fcb4:	f7f0 fde8 	bl	8000888 <__aeabi_fdiv>
 800fcb8:	1c03      	adds	r3, r0, #0
 800fcba:	1c1a      	adds	r2, r3, #0
 800fcbc:	4b7a      	ldr	r3, [pc, #488]	; (800fea8 <SP100_Snsrs_Handler+0x840>)
 800fcbe:	601a      	str	r2, [r3, #0]
 800fcc0:	4b7e      	ldr	r3, [pc, #504]	; (800febc <SP100_Snsrs_Handler+0x854>)
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	2100      	movs	r1, #0
 800fcc6:	1c18      	adds	r0, r3, #0
 800fcc8:	f7f0 fbfa 	bl	80004c0 <__aeabi_fcmpeq>
 800fccc:	1e03      	subs	r3, r0, #0
 800fcce:	d136      	bne.n	800fd3e <SP100_Snsrs_Handler+0x6d6>
 800fcd0:	4b7a      	ldr	r3, [pc, #488]	; (800febc <SP100_Snsrs_Handler+0x854>)
 800fcd2:	681b      	ldr	r3, [r3, #0]
 800fcd4:	1c19      	adds	r1, r3, #0
 800fcd6:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800fcd8:	f7f1 f8c4 	bl	8000e64 <__aeabi_fsub>
 800fcdc:	1c03      	adds	r3, r0, #0
 800fcde:	1c1a      	adds	r2, r3, #0
 800fce0:	4b77      	ldr	r3, [pc, #476]	; (800fec0 <SP100_Snsrs_Handler+0x858>)
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	1c19      	adds	r1, r3, #0
 800fce6:	1c10      	adds	r0, r2, #0
 800fce8:	f7f0 fc04 	bl	80004f4 <__aeabi_fcmpgt>
 800fcec:	1e03      	subs	r3, r0, #0
 800fcee:	d00a      	beq.n	800fd06 <SP100_Snsrs_Handler+0x69e>
 800fcf0:	4b72      	ldr	r3, [pc, #456]	; (800febc <SP100_Snsrs_Handler+0x854>)
 800fcf2:	681a      	ldr	r2, [r3, #0]
 800fcf4:	4b72      	ldr	r3, [pc, #456]	; (800fec0 <SP100_Snsrs_Handler+0x858>)
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	1c19      	adds	r1, r3, #0
 800fcfa:	1c10      	adds	r0, r2, #0
 800fcfc:	f7f0 fc26 	bl	800054c <__aeabi_fadd>
 800fd00:	1c03      	adds	r3, r0, #0
 800fd02:	673b      	str	r3, [r7, #112]	; 0x70
 800fd04:	e01b      	b.n	800fd3e <SP100_Snsrs_Handler+0x6d6>
 800fd06:	4b6d      	ldr	r3, [pc, #436]	; (800febc <SP100_Snsrs_Handler+0x854>)
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	1c19      	adds	r1, r3, #0
 800fd0c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800fd0e:	f7f1 f8a9 	bl	8000e64 <__aeabi_fsub>
 800fd12:	1c03      	adds	r3, r0, #0
 800fd14:	1c18      	adds	r0, r3, #0
 800fd16:	4b6a      	ldr	r3, [pc, #424]	; (800fec0 <SP100_Snsrs_Handler+0x858>)
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	2280      	movs	r2, #128	; 0x80
 800fd1c:	0612      	lsls	r2, r2, #24
 800fd1e:	4053      	eors	r3, r2
 800fd20:	1c19      	adds	r1, r3, #0
 800fd22:	f7f0 fbd3 	bl	80004cc <__aeabi_fcmplt>
 800fd26:	1e03      	subs	r3, r0, #0
 800fd28:	d009      	beq.n	800fd3e <SP100_Snsrs_Handler+0x6d6>
 800fd2a:	4b64      	ldr	r3, [pc, #400]	; (800febc <SP100_Snsrs_Handler+0x854>)
 800fd2c:	681a      	ldr	r2, [r3, #0]
 800fd2e:	4b64      	ldr	r3, [pc, #400]	; (800fec0 <SP100_Snsrs_Handler+0x858>)
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	1c19      	adds	r1, r3, #0
 800fd34:	1c10      	adds	r0, r2, #0
 800fd36:	f7f1 f895 	bl	8000e64 <__aeabi_fsub>
 800fd3a:	1c03      	adds	r3, r0, #0
 800fd3c:	673b      	str	r3, [r7, #112]	; 0x70
 800fd3e:	4b61      	ldr	r3, [pc, #388]	; (800fec4 <SP100_Snsrs_Handler+0x85c>)
 800fd40:	681a      	ldr	r2, [r3, #0]
 800fd42:	4b61      	ldr	r3, [pc, #388]	; (800fec8 <SP100_Snsrs_Handler+0x860>)
 800fd44:	0092      	lsls	r2, r2, #2
 800fd46:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800fd48:	50d1      	str	r1, [r2, r3]
 800fd4a:	4b5e      	ldr	r3, [pc, #376]	; (800fec4 <SP100_Snsrs_Handler+0x85c>)
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	1c5a      	adds	r2, r3, #1
 800fd50:	4b5c      	ldr	r3, [pc, #368]	; (800fec4 <SP100_Snsrs_Handler+0x85c>)
 800fd52:	601a      	str	r2, [r3, #0]
 800fd54:	4b5b      	ldr	r3, [pc, #364]	; (800fec4 <SP100_Snsrs_Handler+0x85c>)
 800fd56:	681a      	ldr	r2, [r3, #0]
 800fd58:	4b5c      	ldr	r3, [pc, #368]	; (800fecc <SP100_Snsrs_Handler+0x864>)
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	429a      	cmp	r2, r3
 800fd5e:	db02      	blt.n	800fd66 <SP100_Snsrs_Handler+0x6fe>
 800fd60:	4b58      	ldr	r3, [pc, #352]	; (800fec4 <SP100_Snsrs_Handler+0x85c>)
 800fd62:	2200      	movs	r2, #0
 800fd64:	601a      	str	r2, [r3, #0]
 800fd66:	2300      	movs	r3, #0
 800fd68:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fd6a:	4b58      	ldr	r3, [pc, #352]	; (800fecc <SP100_Snsrs_Handler+0x864>)
 800fd6c:	681b      	ldr	r3, [r3, #0]
 800fd6e:	65bb      	str	r3, [r7, #88]	; 0x58
 800fd70:	2400      	movs	r4, #0
 800fd72:	e016      	b.n	800fda2 <SP100_Snsrs_Handler+0x73a>
 800fd74:	4b54      	ldr	r3, [pc, #336]	; (800fec8 <SP100_Snsrs_Handler+0x860>)
 800fd76:	00a2      	lsls	r2, r4, #2
 800fd78:	58d3      	ldr	r3, [r2, r3]
 800fd7a:	2100      	movs	r1, #0
 800fd7c:	1c18      	adds	r0, r3, #0
 800fd7e:	f7f0 fb9f 	bl	80004c0 <__aeabi_fcmpeq>
 800fd82:	1e03      	subs	r3, r0, #0
 800fd84:	d109      	bne.n	800fd9a <SP100_Snsrs_Handler+0x732>
 800fd86:	4b50      	ldr	r3, [pc, #320]	; (800fec8 <SP100_Snsrs_Handler+0x860>)
 800fd88:	00a2      	lsls	r2, r4, #2
 800fd8a:	58d3      	ldr	r3, [r2, r3]
 800fd8c:	1c19      	adds	r1, r3, #0
 800fd8e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800fd90:	f7f0 fbdc 	bl	800054c <__aeabi_fadd>
 800fd94:	1c03      	adds	r3, r0, #0
 800fd96:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fd98:	e002      	b.n	800fda0 <SP100_Snsrs_Handler+0x738>
 800fd9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fd9c:	3b01      	subs	r3, #1
 800fd9e:	65bb      	str	r3, [r7, #88]	; 0x58
 800fda0:	3401      	adds	r4, #1
 800fda2:	4b4a      	ldr	r3, [pc, #296]	; (800fecc <SP100_Snsrs_Handler+0x864>)
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	429c      	cmp	r4, r3
 800fda8:	dbe4      	blt.n	800fd74 <SP100_Snsrs_Handler+0x70c>
 800fdaa:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800fdac:	f7f1 fa3e 	bl	800122c <__aeabi_i2f>
 800fdb0:	1c03      	adds	r3, r0, #0
 800fdb2:	1c19      	adds	r1, r3, #0
 800fdb4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800fdb6:	f7f0 fd67 	bl	8000888 <__aeabi_fdiv>
 800fdba:	1c03      	adds	r3, r0, #0
 800fdbc:	1c1a      	adds	r2, r3, #0
 800fdbe:	4b3f      	ldr	r3, [pc, #252]	; (800febc <SP100_Snsrs_Handler+0x854>)
 800fdc0:	601a      	str	r2, [r3, #0]
 800fdc2:	4b43      	ldr	r3, [pc, #268]	; (800fed0 <SP100_Snsrs_Handler+0x868>)
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	2100      	movs	r1, #0
 800fdc8:	1c18      	adds	r0, r3, #0
 800fdca:	f7f0 fb79 	bl	80004c0 <__aeabi_fcmpeq>
 800fdce:	1e03      	subs	r3, r0, #0
 800fdd0:	d136      	bne.n	800fe40 <SP100_Snsrs_Handler+0x7d8>
 800fdd2:	4b3f      	ldr	r3, [pc, #252]	; (800fed0 <SP100_Snsrs_Handler+0x868>)
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	1c19      	adds	r1, r3, #0
 800fdd8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fdda:	f7f1 f843 	bl	8000e64 <__aeabi_fsub>
 800fdde:	1c03      	adds	r3, r0, #0
 800fde0:	1c1a      	adds	r2, r3, #0
 800fde2:	4b3c      	ldr	r3, [pc, #240]	; (800fed4 <SP100_Snsrs_Handler+0x86c>)
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	1c19      	adds	r1, r3, #0
 800fde8:	1c10      	adds	r0, r2, #0
 800fdea:	f7f0 fb83 	bl	80004f4 <__aeabi_fcmpgt>
 800fdee:	1e03      	subs	r3, r0, #0
 800fdf0:	d00a      	beq.n	800fe08 <SP100_Snsrs_Handler+0x7a0>
 800fdf2:	4b37      	ldr	r3, [pc, #220]	; (800fed0 <SP100_Snsrs_Handler+0x868>)
 800fdf4:	681a      	ldr	r2, [r3, #0]
 800fdf6:	4b37      	ldr	r3, [pc, #220]	; (800fed4 <SP100_Snsrs_Handler+0x86c>)
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	1c19      	adds	r1, r3, #0
 800fdfc:	1c10      	adds	r0, r2, #0
 800fdfe:	f7f0 fba5 	bl	800054c <__aeabi_fadd>
 800fe02:	1c03      	adds	r3, r0, #0
 800fe04:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fe06:	e01b      	b.n	800fe40 <SP100_Snsrs_Handler+0x7d8>
 800fe08:	4b31      	ldr	r3, [pc, #196]	; (800fed0 <SP100_Snsrs_Handler+0x868>)
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	1c19      	adds	r1, r3, #0
 800fe0e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800fe10:	f7f1 f828 	bl	8000e64 <__aeabi_fsub>
 800fe14:	1c03      	adds	r3, r0, #0
 800fe16:	1c18      	adds	r0, r3, #0
 800fe18:	4b2e      	ldr	r3, [pc, #184]	; (800fed4 <SP100_Snsrs_Handler+0x86c>)
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	2280      	movs	r2, #128	; 0x80
 800fe1e:	0612      	lsls	r2, r2, #24
 800fe20:	4053      	eors	r3, r2
 800fe22:	1c19      	adds	r1, r3, #0
 800fe24:	f7f0 fb52 	bl	80004cc <__aeabi_fcmplt>
 800fe28:	1e03      	subs	r3, r0, #0
 800fe2a:	d009      	beq.n	800fe40 <SP100_Snsrs_Handler+0x7d8>
 800fe2c:	4b28      	ldr	r3, [pc, #160]	; (800fed0 <SP100_Snsrs_Handler+0x868>)
 800fe2e:	681a      	ldr	r2, [r3, #0]
 800fe30:	4b28      	ldr	r3, [pc, #160]	; (800fed4 <SP100_Snsrs_Handler+0x86c>)
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	1c19      	adds	r1, r3, #0
 800fe36:	1c10      	adds	r0, r2, #0
 800fe38:	f7f1 f814 	bl	8000e64 <__aeabi_fsub>
 800fe3c:	1c03      	adds	r3, r0, #0
 800fe3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fe40:	4b25      	ldr	r3, [pc, #148]	; (800fed8 <SP100_Snsrs_Handler+0x870>)
 800fe42:	681a      	ldr	r2, [r3, #0]
 800fe44:	4b25      	ldr	r3, [pc, #148]	; (800fedc <SP100_Snsrs_Handler+0x874>)
 800fe46:	0092      	lsls	r2, r2, #2
 800fe48:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800fe4a:	50d1      	str	r1, [r2, r3]
 800fe4c:	4b22      	ldr	r3, [pc, #136]	; (800fed8 <SP100_Snsrs_Handler+0x870>)
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	1c5a      	adds	r2, r3, #1
 800fe52:	4b21      	ldr	r3, [pc, #132]	; (800fed8 <SP100_Snsrs_Handler+0x870>)
 800fe54:	601a      	str	r2, [r3, #0]
 800fe56:	4b20      	ldr	r3, [pc, #128]	; (800fed8 <SP100_Snsrs_Handler+0x870>)
 800fe58:	681a      	ldr	r2, [r3, #0]
 800fe5a:	4b21      	ldr	r3, [pc, #132]	; (800fee0 <SP100_Snsrs_Handler+0x878>)
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	429a      	cmp	r2, r3
 800fe60:	db02      	blt.n	800fe68 <SP100_Snsrs_Handler+0x800>
 800fe62:	4b1d      	ldr	r3, [pc, #116]	; (800fed8 <SP100_Snsrs_Handler+0x870>)
 800fe64:	2200      	movs	r2, #0
 800fe66:	601a      	str	r2, [r3, #0]
 800fe68:	2300      	movs	r3, #0
 800fe6a:	657b      	str	r3, [r7, #84]	; 0x54
 800fe6c:	4b1c      	ldr	r3, [pc, #112]	; (800fee0 <SP100_Snsrs_Handler+0x878>)
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	653b      	str	r3, [r7, #80]	; 0x50
 800fe72:	2400      	movs	r4, #0
 800fe74:	e03a      	b.n	800feec <SP100_Snsrs_Handler+0x884>
 800fe76:	4b19      	ldr	r3, [pc, #100]	; (800fedc <SP100_Snsrs_Handler+0x874>)
 800fe78:	00a2      	lsls	r2, r4, #2
 800fe7a:	58d3      	ldr	r3, [r2, r3]
 800fe7c:	2100      	movs	r1, #0
 800fe7e:	1c18      	adds	r0, r3, #0
 800fe80:	f7f0 fb1e 	bl	80004c0 <__aeabi_fcmpeq>
 800fe84:	1e03      	subs	r3, r0, #0
 800fe86:	d12d      	bne.n	800fee4 <SP100_Snsrs_Handler+0x87c>
 800fe88:	4b14      	ldr	r3, [pc, #80]	; (800fedc <SP100_Snsrs_Handler+0x874>)
 800fe8a:	00a2      	lsls	r2, r4, #2
 800fe8c:	58d3      	ldr	r3, [r2, r3]
 800fe8e:	1c19      	adds	r1, r3, #0
 800fe90:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800fe92:	f7f0 fb5b 	bl	800054c <__aeabi_fadd>
 800fe96:	1c03      	adds	r3, r0, #0
 800fe98:	657b      	str	r3, [r7, #84]	; 0x54
 800fe9a:	e026      	b.n	800feea <SP100_Snsrs_Handler+0x882>
 800fe9c:	3ff00000 	.word	0x3ff00000
 800fea0:	66666666 	.word	0x66666666
 800fea4:	40711266 	.word	0x40711266
 800fea8:	20000588 	.word	0x20000588
 800feac:	20000020 	.word	0x20000020
 800feb0:	200005bc 	.word	0x200005bc
 800feb4:	200005b8 	.word	0x200005b8
 800feb8:	2000001c 	.word	0x2000001c
 800febc:	2000058c 	.word	0x2000058c
 800fec0:	20000028 	.word	0x20000028
 800fec4:	200005c4 	.word	0x200005c4
 800fec8:	200005c0 	.word	0x200005c0
 800fecc:	20000024 	.word	0x20000024
 800fed0:	20000590 	.word	0x20000590
 800fed4:	20000030 	.word	0x20000030
 800fed8:	200005cc 	.word	0x200005cc
 800fedc:	200005c8 	.word	0x200005c8
 800fee0:	2000002c 	.word	0x2000002c
 800fee4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fee6:	3b01      	subs	r3, #1
 800fee8:	653b      	str	r3, [r7, #80]	; 0x50
 800feea:	3401      	adds	r4, #1
 800feec:	4ba0      	ldr	r3, [pc, #640]	; (8010170 <SP100_Snsrs_Handler+0xb08>)
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	429c      	cmp	r4, r3
 800fef2:	dbc0      	blt.n	800fe76 <SP100_Snsrs_Handler+0x80e>
 800fef4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800fef6:	f7f1 f999 	bl	800122c <__aeabi_i2f>
 800fefa:	1c03      	adds	r3, r0, #0
 800fefc:	1c19      	adds	r1, r3, #0
 800fefe:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ff00:	f7f0 fcc2 	bl	8000888 <__aeabi_fdiv>
 800ff04:	1c03      	adds	r3, r0, #0
 800ff06:	1c1a      	adds	r2, r3, #0
 800ff08:	4b9a      	ldr	r3, [pc, #616]	; (8010174 <SP100_Snsrs_Handler+0xb0c>)
 800ff0a:	601a      	str	r2, [r3, #0]
 800ff0c:	4b9a      	ldr	r3, [pc, #616]	; (8010178 <SP100_Snsrs_Handler+0xb10>)
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	2100      	movs	r1, #0
 800ff12:	1c18      	adds	r0, r3, #0
 800ff14:	f7f0 fad4 	bl	80004c0 <__aeabi_fcmpeq>
 800ff18:	1e03      	subs	r3, r0, #0
 800ff1a:	d136      	bne.n	800ff8a <SP100_Snsrs_Handler+0x922>
 800ff1c:	4b96      	ldr	r3, [pc, #600]	; (8010178 <SP100_Snsrs_Handler+0xb10>)
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	1c19      	adds	r1, r3, #0
 800ff22:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800ff24:	f7f0 ff9e 	bl	8000e64 <__aeabi_fsub>
 800ff28:	1c03      	adds	r3, r0, #0
 800ff2a:	1c1a      	adds	r2, r3, #0
 800ff2c:	4b93      	ldr	r3, [pc, #588]	; (801017c <SP100_Snsrs_Handler+0xb14>)
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	1c19      	adds	r1, r3, #0
 800ff32:	1c10      	adds	r0, r2, #0
 800ff34:	f7f0 fade 	bl	80004f4 <__aeabi_fcmpgt>
 800ff38:	1e03      	subs	r3, r0, #0
 800ff3a:	d00a      	beq.n	800ff52 <SP100_Snsrs_Handler+0x8ea>
 800ff3c:	4b8e      	ldr	r3, [pc, #568]	; (8010178 <SP100_Snsrs_Handler+0xb10>)
 800ff3e:	681a      	ldr	r2, [r3, #0]
 800ff40:	4b8e      	ldr	r3, [pc, #568]	; (801017c <SP100_Snsrs_Handler+0xb14>)
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	1c19      	adds	r1, r3, #0
 800ff46:	1c10      	adds	r0, r2, #0
 800ff48:	f7f0 fb00 	bl	800054c <__aeabi_fadd>
 800ff4c:	1c03      	adds	r3, r0, #0
 800ff4e:	66bb      	str	r3, [r7, #104]	; 0x68
 800ff50:	e01b      	b.n	800ff8a <SP100_Snsrs_Handler+0x922>
 800ff52:	4b89      	ldr	r3, [pc, #548]	; (8010178 <SP100_Snsrs_Handler+0xb10>)
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	1c19      	adds	r1, r3, #0
 800ff58:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 800ff5a:	f7f0 ff83 	bl	8000e64 <__aeabi_fsub>
 800ff5e:	1c03      	adds	r3, r0, #0
 800ff60:	1c18      	adds	r0, r3, #0
 800ff62:	4b86      	ldr	r3, [pc, #536]	; (801017c <SP100_Snsrs_Handler+0xb14>)
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	2280      	movs	r2, #128	; 0x80
 800ff68:	0612      	lsls	r2, r2, #24
 800ff6a:	4053      	eors	r3, r2
 800ff6c:	1c19      	adds	r1, r3, #0
 800ff6e:	f7f0 faad 	bl	80004cc <__aeabi_fcmplt>
 800ff72:	1e03      	subs	r3, r0, #0
 800ff74:	d009      	beq.n	800ff8a <SP100_Snsrs_Handler+0x922>
 800ff76:	4b80      	ldr	r3, [pc, #512]	; (8010178 <SP100_Snsrs_Handler+0xb10>)
 800ff78:	681a      	ldr	r2, [r3, #0]
 800ff7a:	4b80      	ldr	r3, [pc, #512]	; (801017c <SP100_Snsrs_Handler+0xb14>)
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	1c19      	adds	r1, r3, #0
 800ff80:	1c10      	adds	r0, r2, #0
 800ff82:	f7f0 ff6f 	bl	8000e64 <__aeabi_fsub>
 800ff86:	1c03      	adds	r3, r0, #0
 800ff88:	66bb      	str	r3, [r7, #104]	; 0x68
 800ff8a:	4b7d      	ldr	r3, [pc, #500]	; (8010180 <SP100_Snsrs_Handler+0xb18>)
 800ff8c:	681a      	ldr	r2, [r3, #0]
 800ff8e:	4b7d      	ldr	r3, [pc, #500]	; (8010184 <SP100_Snsrs_Handler+0xb1c>)
 800ff90:	0092      	lsls	r2, r2, #2
 800ff92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ff94:	50d1      	str	r1, [r2, r3]
 800ff96:	4b7a      	ldr	r3, [pc, #488]	; (8010180 <SP100_Snsrs_Handler+0xb18>)
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	1c5a      	adds	r2, r3, #1
 800ff9c:	4b78      	ldr	r3, [pc, #480]	; (8010180 <SP100_Snsrs_Handler+0xb18>)
 800ff9e:	601a      	str	r2, [r3, #0]
 800ffa0:	4b77      	ldr	r3, [pc, #476]	; (8010180 <SP100_Snsrs_Handler+0xb18>)
 800ffa2:	681a      	ldr	r2, [r3, #0]
 800ffa4:	4b78      	ldr	r3, [pc, #480]	; (8010188 <SP100_Snsrs_Handler+0xb20>)
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	429a      	cmp	r2, r3
 800ffaa:	db02      	blt.n	800ffb2 <SP100_Snsrs_Handler+0x94a>
 800ffac:	4b74      	ldr	r3, [pc, #464]	; (8010180 <SP100_Snsrs_Handler+0xb18>)
 800ffae:	2200      	movs	r2, #0
 800ffb0:	601a      	str	r2, [r3, #0]
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ffb6:	4b74      	ldr	r3, [pc, #464]	; (8010188 <SP100_Snsrs_Handler+0xb20>)
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	64bb      	str	r3, [r7, #72]	; 0x48
 800ffbc:	2400      	movs	r4, #0
 800ffbe:	e016      	b.n	800ffee <SP100_Snsrs_Handler+0x986>
 800ffc0:	4b70      	ldr	r3, [pc, #448]	; (8010184 <SP100_Snsrs_Handler+0xb1c>)
 800ffc2:	00a2      	lsls	r2, r4, #2
 800ffc4:	58d3      	ldr	r3, [r2, r3]
 800ffc6:	2100      	movs	r1, #0
 800ffc8:	1c18      	adds	r0, r3, #0
 800ffca:	f7f0 fa79 	bl	80004c0 <__aeabi_fcmpeq>
 800ffce:	1e03      	subs	r3, r0, #0
 800ffd0:	d109      	bne.n	800ffe6 <SP100_Snsrs_Handler+0x97e>
 800ffd2:	4b6c      	ldr	r3, [pc, #432]	; (8010184 <SP100_Snsrs_Handler+0xb1c>)
 800ffd4:	00a2      	lsls	r2, r4, #2
 800ffd6:	58d3      	ldr	r3, [r2, r3]
 800ffd8:	1c19      	adds	r1, r3, #0
 800ffda:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ffdc:	f7f0 fab6 	bl	800054c <__aeabi_fadd>
 800ffe0:	1c03      	adds	r3, r0, #0
 800ffe2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ffe4:	e002      	b.n	800ffec <SP100_Snsrs_Handler+0x984>
 800ffe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffe8:	3b01      	subs	r3, #1
 800ffea:	64bb      	str	r3, [r7, #72]	; 0x48
 800ffec:	3401      	adds	r4, #1
 800ffee:	4b66      	ldr	r3, [pc, #408]	; (8010188 <SP100_Snsrs_Handler+0xb20>)
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	429c      	cmp	r4, r3
 800fff4:	dbe4      	blt.n	800ffc0 <SP100_Snsrs_Handler+0x958>
 800fff6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800fff8:	f7f1 f918 	bl	800122c <__aeabi_i2f>
 800fffc:	1c03      	adds	r3, r0, #0
 800fffe:	1c19      	adds	r1, r3, #0
 8010000:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010002:	f7f0 fc41 	bl	8000888 <__aeabi_fdiv>
 8010006:	1c03      	adds	r3, r0, #0
 8010008:	1c1a      	adds	r2, r3, #0
 801000a:	4b5b      	ldr	r3, [pc, #364]	; (8010178 <SP100_Snsrs_Handler+0xb10>)
 801000c:	601a      	str	r2, [r3, #0]
 801000e:	2438      	movs	r4, #56	; 0x38
 8010010:	193b      	adds	r3, r7, r4
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	1c18      	adds	r0, r3, #0
 8010016:	f7f2 ff3d 	bl	8002e94 <__aeabi_f2d>
 801001a:	4a5c      	ldr	r2, [pc, #368]	; (801018c <SP100_Snsrs_Handler+0xb24>)
 801001c:	4b5c      	ldr	r3, [pc, #368]	; (8010190 <SP100_Snsrs_Handler+0xb28>)
 801001e:	f7f0 fa1b 	bl	8000458 <__aeabi_dcmplt>
 8010022:	1e03      	subs	r3, r0, #0
 8010024:	d10a      	bne.n	801003c <SP100_Snsrs_Handler+0x9d4>
 8010026:	193b      	adds	r3, r7, r4
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	1c18      	adds	r0, r3, #0
 801002c:	f7f2 ff32 	bl	8002e94 <__aeabi_f2d>
 8010030:	4a56      	ldr	r2, [pc, #344]	; (801018c <SP100_Snsrs_Handler+0xb24>)
 8010032:	4b58      	ldr	r3, [pc, #352]	; (8010194 <SP100_Snsrs_Handler+0xb2c>)
 8010034:	f7f0 fa24 	bl	8000480 <__aeabi_dcmpgt>
 8010038:	1e03      	subs	r3, r0, #0
 801003a:	d003      	beq.n	8010044 <SP100_Snsrs_Handler+0x9dc>
 801003c:	4b56      	ldr	r3, [pc, #344]	; (8010198 <SP100_Snsrs_Handler+0xb30>)
 801003e:	2201      	movs	r2, #1
 8010040:	701a      	strb	r2, [r3, #0]
 8010042:	e002      	b.n	801004a <SP100_Snsrs_Handler+0x9e2>
 8010044:	4b54      	ldr	r3, [pc, #336]	; (8010198 <SP100_Snsrs_Handler+0xb30>)
 8010046:	2200      	movs	r2, #0
 8010048:	701a      	strb	r2, [r3, #0]
 801004a:	2438      	movs	r4, #56	; 0x38
 801004c:	193b      	adds	r3, r7, r4
 801004e:	685b      	ldr	r3, [r3, #4]
 8010050:	1c18      	adds	r0, r3, #0
 8010052:	f7f2 ff1f 	bl	8002e94 <__aeabi_f2d>
 8010056:	4a4d      	ldr	r2, [pc, #308]	; (801018c <SP100_Snsrs_Handler+0xb24>)
 8010058:	4b4d      	ldr	r3, [pc, #308]	; (8010190 <SP100_Snsrs_Handler+0xb28>)
 801005a:	f7f0 f9fd 	bl	8000458 <__aeabi_dcmplt>
 801005e:	1e03      	subs	r3, r0, #0
 8010060:	d10a      	bne.n	8010078 <SP100_Snsrs_Handler+0xa10>
 8010062:	193b      	adds	r3, r7, r4
 8010064:	685b      	ldr	r3, [r3, #4]
 8010066:	1c18      	adds	r0, r3, #0
 8010068:	f7f2 ff14 	bl	8002e94 <__aeabi_f2d>
 801006c:	4a47      	ldr	r2, [pc, #284]	; (801018c <SP100_Snsrs_Handler+0xb24>)
 801006e:	4b49      	ldr	r3, [pc, #292]	; (8010194 <SP100_Snsrs_Handler+0xb2c>)
 8010070:	f7f0 fa06 	bl	8000480 <__aeabi_dcmpgt>
 8010074:	1e03      	subs	r3, r0, #0
 8010076:	d003      	beq.n	8010080 <SP100_Snsrs_Handler+0xa18>
 8010078:	4b48      	ldr	r3, [pc, #288]	; (801019c <SP100_Snsrs_Handler+0xb34>)
 801007a:	2201      	movs	r2, #1
 801007c:	701a      	strb	r2, [r3, #0]
 801007e:	e002      	b.n	8010086 <SP100_Snsrs_Handler+0xa1e>
 8010080:	4b46      	ldr	r3, [pc, #280]	; (801019c <SP100_Snsrs_Handler+0xb34>)
 8010082:	2200      	movs	r2, #0
 8010084:	701a      	strb	r2, [r3, #0]
 8010086:	2438      	movs	r4, #56	; 0x38
 8010088:	193b      	adds	r3, r7, r4
 801008a:	689b      	ldr	r3, [r3, #8]
 801008c:	1c18      	adds	r0, r3, #0
 801008e:	f7f2 ff01 	bl	8002e94 <__aeabi_f2d>
 8010092:	4a3e      	ldr	r2, [pc, #248]	; (801018c <SP100_Snsrs_Handler+0xb24>)
 8010094:	4b3e      	ldr	r3, [pc, #248]	; (8010190 <SP100_Snsrs_Handler+0xb28>)
 8010096:	f7f0 f9df 	bl	8000458 <__aeabi_dcmplt>
 801009a:	1e03      	subs	r3, r0, #0
 801009c:	d10a      	bne.n	80100b4 <SP100_Snsrs_Handler+0xa4c>
 801009e:	193b      	adds	r3, r7, r4
 80100a0:	689b      	ldr	r3, [r3, #8]
 80100a2:	1c18      	adds	r0, r3, #0
 80100a4:	f7f2 fef6 	bl	8002e94 <__aeabi_f2d>
 80100a8:	4a38      	ldr	r2, [pc, #224]	; (801018c <SP100_Snsrs_Handler+0xb24>)
 80100aa:	4b3a      	ldr	r3, [pc, #232]	; (8010194 <SP100_Snsrs_Handler+0xb2c>)
 80100ac:	f7f0 f9e8 	bl	8000480 <__aeabi_dcmpgt>
 80100b0:	1e03      	subs	r3, r0, #0
 80100b2:	d003      	beq.n	80100bc <SP100_Snsrs_Handler+0xa54>
 80100b4:	4b3a      	ldr	r3, [pc, #232]	; (80101a0 <SP100_Snsrs_Handler+0xb38>)
 80100b6:	2201      	movs	r2, #1
 80100b8:	701a      	strb	r2, [r3, #0]
 80100ba:	e002      	b.n	80100c2 <SP100_Snsrs_Handler+0xa5a>
 80100bc:	4b38      	ldr	r3, [pc, #224]	; (80101a0 <SP100_Snsrs_Handler+0xb38>)
 80100be:	2200      	movs	r2, #0
 80100c0:	701a      	strb	r2, [r3, #0]
 80100c2:	2438      	movs	r4, #56	; 0x38
 80100c4:	193b      	adds	r3, r7, r4
 80100c6:	68db      	ldr	r3, [r3, #12]
 80100c8:	1c18      	adds	r0, r3, #0
 80100ca:	f7f2 fee3 	bl	8002e94 <__aeabi_f2d>
 80100ce:	4a2f      	ldr	r2, [pc, #188]	; (801018c <SP100_Snsrs_Handler+0xb24>)
 80100d0:	4b2f      	ldr	r3, [pc, #188]	; (8010190 <SP100_Snsrs_Handler+0xb28>)
 80100d2:	f7f0 f9c1 	bl	8000458 <__aeabi_dcmplt>
 80100d6:	1e03      	subs	r3, r0, #0
 80100d8:	d10a      	bne.n	80100f0 <SP100_Snsrs_Handler+0xa88>
 80100da:	193b      	adds	r3, r7, r4
 80100dc:	68db      	ldr	r3, [r3, #12]
 80100de:	1c18      	adds	r0, r3, #0
 80100e0:	f7f2 fed8 	bl	8002e94 <__aeabi_f2d>
 80100e4:	4a29      	ldr	r2, [pc, #164]	; (801018c <SP100_Snsrs_Handler+0xb24>)
 80100e6:	4b2b      	ldr	r3, [pc, #172]	; (8010194 <SP100_Snsrs_Handler+0xb2c>)
 80100e8:	f7f0 f9ca 	bl	8000480 <__aeabi_dcmpgt>
 80100ec:	1e03      	subs	r3, r0, #0
 80100ee:	d003      	beq.n	80100f8 <SP100_Snsrs_Handler+0xa90>
 80100f0:	4b2c      	ldr	r3, [pc, #176]	; (80101a4 <SP100_Snsrs_Handler+0xb3c>)
 80100f2:	2201      	movs	r2, #1
 80100f4:	701a      	strb	r2, [r3, #0]
 80100f6:	e002      	b.n	80100fe <SP100_Snsrs_Handler+0xa96>
 80100f8:	4b2a      	ldr	r3, [pc, #168]	; (80101a4 <SP100_Snsrs_Handler+0xb3c>)
 80100fa:	2200      	movs	r2, #0
 80100fc:	701a      	strb	r2, [r3, #0]
 80100fe:	4b26      	ldr	r3, [pc, #152]	; (8010198 <SP100_Snsrs_Handler+0xb30>)
 8010100:	781b      	ldrb	r3, [r3, #0]
 8010102:	2b01      	cmp	r3, #1
 8010104:	d102      	bne.n	801010c <SP100_Snsrs_Handler+0xaa4>
 8010106:	4b28      	ldr	r3, [pc, #160]	; (80101a8 <SP100_Snsrs_Handler+0xb40>)
 8010108:	4a28      	ldr	r2, [pc, #160]	; (80101ac <SP100_Snsrs_Handler+0xb44>)
 801010a:	601a      	str	r2, [r3, #0]
 801010c:	4b23      	ldr	r3, [pc, #140]	; (801019c <SP100_Snsrs_Handler+0xb34>)
 801010e:	781b      	ldrb	r3, [r3, #0]
 8010110:	2b01      	cmp	r3, #1
 8010112:	d102      	bne.n	801011a <SP100_Snsrs_Handler+0xab2>
 8010114:	4b26      	ldr	r3, [pc, #152]	; (80101b0 <SP100_Snsrs_Handler+0xb48>)
 8010116:	4a27      	ldr	r2, [pc, #156]	; (80101b4 <SP100_Snsrs_Handler+0xb4c>)
 8010118:	601a      	str	r2, [r3, #0]
 801011a:	4b21      	ldr	r3, [pc, #132]	; (80101a0 <SP100_Snsrs_Handler+0xb38>)
 801011c:	781b      	ldrb	r3, [r3, #0]
 801011e:	2b01      	cmp	r3, #1
 8010120:	d102      	bne.n	8010128 <SP100_Snsrs_Handler+0xac0>
 8010122:	4b14      	ldr	r3, [pc, #80]	; (8010174 <SP100_Snsrs_Handler+0xb0c>)
 8010124:	4a24      	ldr	r2, [pc, #144]	; (80101b8 <SP100_Snsrs_Handler+0xb50>)
 8010126:	601a      	str	r2, [r3, #0]
 8010128:	4b1e      	ldr	r3, [pc, #120]	; (80101a4 <SP100_Snsrs_Handler+0xb3c>)
 801012a:	781b      	ldrb	r3, [r3, #0]
 801012c:	2b01      	cmp	r3, #1
 801012e:	d102      	bne.n	8010136 <SP100_Snsrs_Handler+0xace>
 8010130:	4b11      	ldr	r3, [pc, #68]	; (8010178 <SP100_Snsrs_Handler+0xb10>)
 8010132:	4a20      	ldr	r2, [pc, #128]	; (80101b4 <SP100_Snsrs_Handler+0xb4c>)
 8010134:	601a      	str	r2, [r3, #0]
 8010136:	4b1c      	ldr	r3, [pc, #112]	; (80101a8 <SP100_Snsrs_Handler+0xb40>)
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	21ff      	movs	r1, #255	; 0xff
 801013c:	0589      	lsls	r1, r1, #22
 801013e:	1c18      	adds	r0, r3, #0
 8010140:	f7f0 f9c4 	bl	80004cc <__aeabi_fcmplt>
 8010144:	1e03      	subs	r3, r0, #0
 8010146:	d002      	beq.n	801014e <SP100_Snsrs_Handler+0xae6>
 8010148:	4b1c      	ldr	r3, [pc, #112]	; (80101bc <SP100_Snsrs_Handler+0xb54>)
 801014a:	2200      	movs	r2, #0
 801014c:	701a      	strb	r2, [r3, #0]
 801014e:	4b16      	ldr	r3, [pc, #88]	; (80101a8 <SP100_Snsrs_Handler+0xb40>)
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	491b      	ldr	r1, [pc, #108]	; (80101c0 <SP100_Snsrs_Handler+0xb58>)
 8010154:	1c18      	adds	r0, r3, #0
 8010156:	f7f0 f9cd 	bl	80004f4 <__aeabi_fcmpgt>
 801015a:	1e03      	subs	r3, r0, #0
 801015c:	d100      	bne.n	8010160 <SP100_Snsrs_Handler+0xaf8>
 801015e:	e002      	b.n	8010166 <SP100_Snsrs_Handler+0xafe>
 8010160:	4b16      	ldr	r3, [pc, #88]	; (80101bc <SP100_Snsrs_Handler+0xb54>)
 8010162:	2201      	movs	r2, #1
 8010164:	701a      	strb	r2, [r3, #0]
 8010166:	46c0      	nop			; (mov r8, r8)
 8010168:	46bd      	mov	sp, r7
 801016a:	b01f      	add	sp, #124	; 0x7c
 801016c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801016e:	46c0      	nop			; (mov r8, r8)
 8010170:	2000002c 	.word	0x2000002c
 8010174:	20000590 	.word	0x20000590
 8010178:	20000594 	.word	0x20000594
 801017c:	20000038 	.word	0x20000038
 8010180:	20000648 	.word	0x20000648
 8010184:	200005d0 	.word	0x200005d0
 8010188:	20000034 	.word	0x20000034
 801018c:	9999999a 	.word	0x9999999a
 8010190:	3fb99999 	.word	0x3fb99999
 8010194:	40099999 	.word	0x40099999
 8010198:	2000000e 	.word	0x2000000e
 801019c:	2000000f 	.word	0x2000000f
 80101a0:	20000010 	.word	0x20000010
 80101a4:	20000011 	.word	0x20000011
 80101a8:	20000588 	.word	0x20000588
 80101ac:	41200000 	.word	0x41200000
 80101b0:	2000058c 	.word	0x2000058c
 80101b4:	41c80000 	.word	0x41c80000
 80101b8:	42960000 	.word	0x42960000
 80101bc:	20000576 	.word	0x20000576
 80101c0:	40600000 	.word	0x40600000

080101c4 <SP100_Snsrs_Init>:
 80101c4:	b590      	push	{r4, r7, lr}
 80101c6:	af00      	add	r7, sp, #0
 80101c8:	4b1d      	ldr	r3, [pc, #116]	; (8010240 <SP100_Snsrs_Init+0x7c>)
 80101ca:	2200      	movs	r2, #0
 80101cc:	601a      	str	r2, [r3, #0]
 80101ce:	2400      	movs	r4, #0
 80101d0:	e004      	b.n	80101dc <SP100_Snsrs_Init+0x18>
 80101d2:	4b1c      	ldr	r3, [pc, #112]	; (8010244 <SP100_Snsrs_Init+0x80>)
 80101d4:	00a2      	lsls	r2, r4, #2
 80101d6:	2100      	movs	r1, #0
 80101d8:	50d1      	str	r1, [r2, r3]
 80101da:	3401      	adds	r4, #1
 80101dc:	4b1a      	ldr	r3, [pc, #104]	; (8010248 <SP100_Snsrs_Init+0x84>)
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	429c      	cmp	r4, r3
 80101e2:	dbf6      	blt.n	80101d2 <SP100_Snsrs_Init+0xe>
 80101e4:	4b19      	ldr	r3, [pc, #100]	; (801024c <SP100_Snsrs_Init+0x88>)
 80101e6:	2200      	movs	r2, #0
 80101e8:	601a      	str	r2, [r3, #0]
 80101ea:	2400      	movs	r4, #0
 80101ec:	e004      	b.n	80101f8 <SP100_Snsrs_Init+0x34>
 80101ee:	4b18      	ldr	r3, [pc, #96]	; (8010250 <SP100_Snsrs_Init+0x8c>)
 80101f0:	00a2      	lsls	r2, r4, #2
 80101f2:	2100      	movs	r1, #0
 80101f4:	50d1      	str	r1, [r2, r3]
 80101f6:	3401      	adds	r4, #1
 80101f8:	4b16      	ldr	r3, [pc, #88]	; (8010254 <SP100_Snsrs_Init+0x90>)
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	429c      	cmp	r4, r3
 80101fe:	dbf6      	blt.n	80101ee <SP100_Snsrs_Init+0x2a>
 8010200:	4b15      	ldr	r3, [pc, #84]	; (8010258 <SP100_Snsrs_Init+0x94>)
 8010202:	2200      	movs	r2, #0
 8010204:	601a      	str	r2, [r3, #0]
 8010206:	2400      	movs	r4, #0
 8010208:	e004      	b.n	8010214 <SP100_Snsrs_Init+0x50>
 801020a:	4b14      	ldr	r3, [pc, #80]	; (801025c <SP100_Snsrs_Init+0x98>)
 801020c:	00a2      	lsls	r2, r4, #2
 801020e:	2100      	movs	r1, #0
 8010210:	50d1      	str	r1, [r2, r3]
 8010212:	3401      	adds	r4, #1
 8010214:	4b12      	ldr	r3, [pc, #72]	; (8010260 <SP100_Snsrs_Init+0x9c>)
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	429c      	cmp	r4, r3
 801021a:	dbf6      	blt.n	801020a <SP100_Snsrs_Init+0x46>
 801021c:	4b11      	ldr	r3, [pc, #68]	; (8010264 <SP100_Snsrs_Init+0xa0>)
 801021e:	2200      	movs	r2, #0
 8010220:	601a      	str	r2, [r3, #0]
 8010222:	2400      	movs	r4, #0
 8010224:	e004      	b.n	8010230 <SP100_Snsrs_Init+0x6c>
 8010226:	4b10      	ldr	r3, [pc, #64]	; (8010268 <SP100_Snsrs_Init+0xa4>)
 8010228:	00a2      	lsls	r2, r4, #2
 801022a:	2100      	movs	r1, #0
 801022c:	50d1      	str	r1, [r2, r3]
 801022e:	3401      	adds	r4, #1
 8010230:	4b0e      	ldr	r3, [pc, #56]	; (801026c <SP100_Snsrs_Init+0xa8>)
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	429c      	cmp	r4, r3
 8010236:	dbf6      	blt.n	8010226 <SP100_Snsrs_Init+0x62>
 8010238:	46c0      	nop			; (mov r8, r8)
 801023a:	46c0      	nop			; (mov r8, r8)
 801023c:	46bd      	mov	sp, r7
 801023e:	bd90      	pop	{r4, r7, pc}
 8010240:	200005bc 	.word	0x200005bc
 8010244:	200005b8 	.word	0x200005b8
 8010248:	2000001c 	.word	0x2000001c
 801024c:	200005c4 	.word	0x200005c4
 8010250:	200005c0 	.word	0x200005c0
 8010254:	20000024 	.word	0x20000024
 8010258:	200005cc 	.word	0x200005cc
 801025c:	200005c8 	.word	0x200005c8
 8010260:	2000002c 	.word	0x2000002c
 8010264:	20000648 	.word	0x20000648
 8010268:	200005d0 	.word	0x200005d0
 801026c:	20000034 	.word	0x20000034

08010270 <SP100_TLE_Init>:
 8010270:	b580      	push	{r7, lr}
 8010272:	af00      	add	r7, sp, #0
 8010274:	4b06      	ldr	r3, [pc, #24]	; (8010290 <SP100_TLE_Init+0x20>)
 8010276:	2201      	movs	r2, #1
 8010278:	2140      	movs	r1, #64	; 0x40
 801027a:	0018      	movs	r0, r3
 801027c:	f7f5 fd07 	bl	8005c8e <HAL_GPIO_WritePin>
 8010280:	4b04      	ldr	r3, [pc, #16]	; (8010294 <SP100_TLE_Init+0x24>)
 8010282:	0018      	movs	r0, r3
 8010284:	f7f8 fca8 	bl	8008bd8 <SP100_Delay>
 8010288:	46c0      	nop			; (mov r8, r8)
 801028a:	46bd      	mov	sp, r7
 801028c:	bd80      	pop	{r7, pc}
 801028e:	46c0      	nop			; (mov r8, r8)
 8010290:	48000400 	.word	0x48000400
 8010294:	000186a0 	.word	0x000186a0

08010298 <SP100_TLE_DeInit>:
 8010298:	b580      	push	{r7, lr}
 801029a:	af00      	add	r7, sp, #0
 801029c:	4b04      	ldr	r3, [pc, #16]	; (80102b0 <SP100_TLE_DeInit+0x18>)
 801029e:	2200      	movs	r2, #0
 80102a0:	2140      	movs	r1, #64	; 0x40
 80102a2:	0018      	movs	r0, r3
 80102a4:	f7f5 fcf3 	bl	8005c8e <HAL_GPIO_WritePin>
 80102a8:	46c0      	nop			; (mov r8, r8)
 80102aa:	46bd      	mov	sp, r7
 80102ac:	bd80      	pop	{r7, pc}
 80102ae:	46c0      	nop			; (mov r8, r8)
 80102b0:	48000400 	.word	0x48000400

080102b4 <SP100_TLE_Ctrl_Register_Read>:
 80102b4:	b5b0      	push	{r4, r5, r7, lr}
 80102b6:	b086      	sub	sp, #24
 80102b8:	af02      	add	r7, sp, #8
 80102ba:	0002      	movs	r2, r0
 80102bc:	1dfb      	adds	r3, r7, #7
 80102be:	701a      	strb	r2, [r3, #0]
 80102c0:	2408      	movs	r4, #8
 80102c2:	193b      	adds	r3, r7, r4
 80102c4:	1dfa      	adds	r2, r7, #7
 80102c6:	7812      	ldrb	r2, [r2, #0]
 80102c8:	701a      	strb	r2, [r3, #0]
 80102ca:	193b      	adds	r3, r7, r4
 80102cc:	22ff      	movs	r2, #255	; 0xff
 80102ce:	705a      	strb	r2, [r3, #1]
 80102d0:	2380      	movs	r3, #128	; 0x80
 80102d2:	0219      	lsls	r1, r3, #8
 80102d4:	2390      	movs	r3, #144	; 0x90
 80102d6:	05db      	lsls	r3, r3, #23
 80102d8:	2200      	movs	r2, #0
 80102da:	0018      	movs	r0, r3
 80102dc:	f7f5 fcd7 	bl	8005c8e <HAL_GPIO_WritePin>
 80102e0:	23fa      	movs	r3, #250	; 0xfa
 80102e2:	005b      	lsls	r3, r3, #1
 80102e4:	0018      	movs	r0, r3
 80102e6:	f7f8 fc77 	bl	8008bd8 <SP100_Delay>
 80102ea:	250c      	movs	r5, #12
 80102ec:	197a      	adds	r2, r7, r5
 80102ee:	1939      	adds	r1, r7, r4
 80102f0:	480e      	ldr	r0, [pc, #56]	; (801032c <SP100_TLE_Ctrl_Register_Read+0x78>)
 80102f2:	230a      	movs	r3, #10
 80102f4:	9300      	str	r3, [sp, #0]
 80102f6:	2302      	movs	r3, #2
 80102f8:	f7f6 ffda 	bl	80072b0 <HAL_SPI_TransmitReceive>
 80102fc:	23fa      	movs	r3, #250	; 0xfa
 80102fe:	005b      	lsls	r3, r3, #1
 8010300:	0018      	movs	r0, r3
 8010302:	f7f8 fc69 	bl	8008bd8 <SP100_Delay>
 8010306:	2380      	movs	r3, #128	; 0x80
 8010308:	0219      	lsls	r1, r3, #8
 801030a:	2390      	movs	r3, #144	; 0x90
 801030c:	05db      	lsls	r3, r3, #23
 801030e:	2201      	movs	r2, #1
 8010310:	0018      	movs	r0, r3
 8010312:	f7f5 fcbc 	bl	8005c8e <HAL_GPIO_WritePin>
 8010316:	23fa      	movs	r3, #250	; 0xfa
 8010318:	005b      	lsls	r3, r3, #1
 801031a:	0018      	movs	r0, r3
 801031c:	f7f8 fc5c 	bl	8008bd8 <SP100_Delay>
 8010320:	197b      	adds	r3, r7, r5
 8010322:	785b      	ldrb	r3, [r3, #1]
 8010324:	0018      	movs	r0, r3
 8010326:	46bd      	mov	sp, r7
 8010328:	b004      	add	sp, #16
 801032a:	bdb0      	pop	{r4, r5, r7, pc}
 801032c:	2000030c 	.word	0x2000030c

08010330 <SP100_TLE_Ctrl_Register_Write>:
 8010330:	b5b0      	push	{r4, r5, r7, lr}
 8010332:	b086      	sub	sp, #24
 8010334:	af02      	add	r7, sp, #8
 8010336:	0002      	movs	r2, r0
 8010338:	1dfb      	adds	r3, r7, #7
 801033a:	701a      	strb	r2, [r3, #0]
 801033c:	1dbb      	adds	r3, r7, #6
 801033e:	1c0a      	adds	r2, r1, #0
 8010340:	701a      	strb	r2, [r3, #0]
 8010342:	1dfb      	adds	r3, r7, #7
 8010344:	781b      	ldrb	r3, [r3, #0]
 8010346:	2280      	movs	r2, #128	; 0x80
 8010348:	4252      	negs	r2, r2
 801034a:	4313      	orrs	r3, r2
 801034c:	b2da      	uxtb	r2, r3
 801034e:	2408      	movs	r4, #8
 8010350:	193b      	adds	r3, r7, r4
 8010352:	701a      	strb	r2, [r3, #0]
 8010354:	193b      	adds	r3, r7, r4
 8010356:	1dba      	adds	r2, r7, #6
 8010358:	7812      	ldrb	r2, [r2, #0]
 801035a:	705a      	strb	r2, [r3, #1]
 801035c:	2380      	movs	r3, #128	; 0x80
 801035e:	0219      	lsls	r1, r3, #8
 8010360:	2390      	movs	r3, #144	; 0x90
 8010362:	05db      	lsls	r3, r3, #23
 8010364:	2200      	movs	r2, #0
 8010366:	0018      	movs	r0, r3
 8010368:	f7f5 fc91 	bl	8005c8e <HAL_GPIO_WritePin>
 801036c:	23fa      	movs	r3, #250	; 0xfa
 801036e:	005b      	lsls	r3, r3, #1
 8010370:	0018      	movs	r0, r3
 8010372:	f7f8 fc31 	bl	8008bd8 <SP100_Delay>
 8010376:	250c      	movs	r5, #12
 8010378:	197a      	adds	r2, r7, r5
 801037a:	1939      	adds	r1, r7, r4
 801037c:	480e      	ldr	r0, [pc, #56]	; (80103b8 <SP100_TLE_Ctrl_Register_Write+0x88>)
 801037e:	230a      	movs	r3, #10
 8010380:	9300      	str	r3, [sp, #0]
 8010382:	2302      	movs	r3, #2
 8010384:	f7f6 ff94 	bl	80072b0 <HAL_SPI_TransmitReceive>
 8010388:	23fa      	movs	r3, #250	; 0xfa
 801038a:	005b      	lsls	r3, r3, #1
 801038c:	0018      	movs	r0, r3
 801038e:	f7f8 fc23 	bl	8008bd8 <SP100_Delay>
 8010392:	2380      	movs	r3, #128	; 0x80
 8010394:	0219      	lsls	r1, r3, #8
 8010396:	2390      	movs	r3, #144	; 0x90
 8010398:	05db      	lsls	r3, r3, #23
 801039a:	2201      	movs	r2, #1
 801039c:	0018      	movs	r0, r3
 801039e:	f7f5 fc76 	bl	8005c8e <HAL_GPIO_WritePin>
 80103a2:	23fa      	movs	r3, #250	; 0xfa
 80103a4:	005b      	lsls	r3, r3, #1
 80103a6:	0018      	movs	r0, r3
 80103a8:	f7f8 fc16 	bl	8008bd8 <SP100_Delay>
 80103ac:	197b      	adds	r3, r7, r5
 80103ae:	785b      	ldrb	r3, [r3, #1]
 80103b0:	0018      	movs	r0, r3
 80103b2:	46bd      	mov	sp, r7
 80103b4:	b004      	add	sp, #16
 80103b6:	bdb0      	pop	{r4, r5, r7, pc}
 80103b8:	2000030c 	.word	0x2000030c

080103bc <SP100_A2D_Init>:
 80103bc:	b580      	push	{r7, lr}
 80103be:	af00      	add	r7, sp, #0
 80103c0:	4b08      	ldr	r3, [pc, #32]	; (80103e4 <SP100_A2D_Init+0x28>)
 80103c2:	0018      	movs	r0, r3
 80103c4:	f7f4 fe18 	bl	8004ff8 <HAL_ADCEx_Calibration_Start>
 80103c8:	4907      	ldr	r1, [pc, #28]	; (80103e8 <SP100_A2D_Init+0x2c>)
 80103ca:	4b06      	ldr	r3, [pc, #24]	; (80103e4 <SP100_A2D_Init+0x28>)
 80103cc:	2207      	movs	r2, #7
 80103ce:	0018      	movs	r0, r3
 80103d0:	f7f4 f976 	bl	80046c0 <HAL_ADC_Start_DMA>
 80103d4:	4b05      	ldr	r3, [pc, #20]	; (80103ec <SP100_A2D_Init+0x30>)
 80103d6:	0018      	movs	r0, r3
 80103d8:	f7f7 fb02 	bl	80079e0 <HAL_TIM_Base_Start>
 80103dc:	46c0      	nop			; (mov r8, r8)
 80103de:	46bd      	mov	sp, r7
 80103e0:	bd80      	pop	{r7, pc}
 80103e2:	46c0      	nop			; (mov r8, r8)
 80103e4:	20000228 	.word	0x20000228
 80103e8:	2000064c 	.word	0x2000064c
 80103ec:	20000370 	.word	0x20000370

080103f0 <SP100_A2D_DeInit>:
 80103f0:	b580      	push	{r7, lr}
 80103f2:	af00      	add	r7, sp, #0
 80103f4:	4b05      	ldr	r3, [pc, #20]	; (801040c <SP100_A2D_DeInit+0x1c>)
 80103f6:	0018      	movs	r0, r3
 80103f8:	f7f7 fb3c 	bl	8007a74 <HAL_TIM_Base_Stop>
 80103fc:	4b04      	ldr	r3, [pc, #16]	; (8010410 <SP100_A2D_DeInit+0x20>)
 80103fe:	0018      	movs	r0, r3
 8010400:	f7f4 f9e0 	bl	80047c4 <HAL_ADC_Stop_DMA>
 8010404:	46c0      	nop			; (mov r8, r8)
 8010406:	46bd      	mov	sp, r7
 8010408:	bd80      	pop	{r7, pc}
 801040a:	46c0      	nop			; (mov r8, r8)
 801040c:	20000370 	.word	0x20000370
 8010410:	20000228 	.word	0x20000228

08010414 <HAL_ADC_ConvCpltCallback>:
 8010414:	b580      	push	{r7, lr}
 8010416:	b082      	sub	sp, #8
 8010418:	af00      	add	r7, sp, #0
 801041a:	6078      	str	r0, [r7, #4]
 801041c:	4bae      	ldr	r3, [pc, #696]	; (80106d8 <HAL_ADC_ConvCpltCallback+0x2c4>)
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	1c5a      	adds	r2, r3, #1
 8010422:	4bad      	ldr	r3, [pc, #692]	; (80106d8 <HAL_ADC_ConvCpltCallback+0x2c4>)
 8010424:	601a      	str	r2, [r3, #0]
 8010426:	4bac      	ldr	r3, [pc, #688]	; (80106d8 <HAL_ADC_ConvCpltCallback+0x2c4>)
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	2b0b      	cmp	r3, #11
 801042c:	d102      	bne.n	8010434 <HAL_ADC_ConvCpltCallback+0x20>
 801042e:	4baa      	ldr	r3, [pc, #680]	; (80106d8 <HAL_ADC_ConvCpltCallback+0x2c4>)
 8010430:	2201      	movs	r2, #1
 8010432:	601a      	str	r2, [r3, #0]
 8010434:	4ba9      	ldr	r3, [pc, #676]	; (80106dc <HAL_ADC_ConvCpltCallback+0x2c8>)
 8010436:	2120      	movs	r1, #32
 8010438:	0018      	movs	r0, r3
 801043a:	f7f5 fc0b 	bl	8005c54 <HAL_GPIO_ReadPin>
 801043e:	1e03      	subs	r3, r0, #0
 8010440:	d11d      	bne.n	801047e <HAL_ADC_ConvCpltCallback+0x6a>
 8010442:	4ba7      	ldr	r3, [pc, #668]	; (80106e0 <HAL_ADC_ConvCpltCallback+0x2cc>)
 8010444:	781b      	ldrb	r3, [r3, #0]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d003      	beq.n	8010452 <HAL_ADC_ConvCpltCallback+0x3e>
 801044a:	4ba5      	ldr	r3, [pc, #660]	; (80106e0 <HAL_ADC_ConvCpltCallback+0x2cc>)
 801044c:	781b      	ldrb	r3, [r3, #0]
 801044e:	2b03      	cmp	r3, #3
 8010450:	d103      	bne.n	801045a <HAL_ADC_ConvCpltCallback+0x46>
 8010452:	4ba3      	ldr	r3, [pc, #652]	; (80106e0 <HAL_ADC_ConvCpltCallback+0x2cc>)
 8010454:	2205      	movs	r2, #5
 8010456:	701a      	strb	r2, [r3, #0]
 8010458:	e011      	b.n	801047e <HAL_ADC_ConvCpltCallback+0x6a>
 801045a:	4ba1      	ldr	r3, [pc, #644]	; (80106e0 <HAL_ADC_ConvCpltCallback+0x2cc>)
 801045c:	781b      	ldrb	r3, [r3, #0]
 801045e:	2b01      	cmp	r3, #1
 8010460:	d003      	beq.n	801046a <HAL_ADC_ConvCpltCallback+0x56>
 8010462:	4b9f      	ldr	r3, [pc, #636]	; (80106e0 <HAL_ADC_ConvCpltCallback+0x2cc>)
 8010464:	781b      	ldrb	r3, [r3, #0]
 8010466:	2b02      	cmp	r3, #2
 8010468:	d103      	bne.n	8010472 <HAL_ADC_ConvCpltCallback+0x5e>
 801046a:	2005      	movs	r0, #5
 801046c:	f7f8 fc42 	bl	8008cf4 <SP100_CCU_State_Updater>
 8010470:	e005      	b.n	801047e <HAL_ADC_ConvCpltCallback+0x6a>
 8010472:	4b9b      	ldr	r3, [pc, #620]	; (80106e0 <HAL_ADC_ConvCpltCallback+0x2cc>)
 8010474:	781b      	ldrb	r3, [r3, #0]
 8010476:	2b04      	cmp	r3, #4
 8010478:	d101      	bne.n	801047e <HAL_ADC_ConvCpltCallback+0x6a>
 801047a:	f7f4 ff48 	bl	800530e <HAL_NVIC_SystemReset>
 801047e:	4b97      	ldr	r3, [pc, #604]	; (80106dc <HAL_ADC_ConvCpltCallback+0x2c8>)
 8010480:	2110      	movs	r1, #16
 8010482:	0018      	movs	r0, r3
 8010484:	f7f5 fbe6 	bl	8005c54 <HAL_GPIO_ReadPin>
 8010488:	0003      	movs	r3, r0
 801048a:	2b01      	cmp	r3, #1
 801048c:	d103      	bne.n	8010496 <HAL_ADC_ConvCpltCallback+0x82>
 801048e:	2046      	movs	r0, #70	; 0x46
 8010490:	f7fc fb2c 	bl	800caec <SP100_LCD_Backlight>
 8010494:	e002      	b.n	801049c <HAL_ADC_ConvCpltCallback+0x88>
 8010496:	2064      	movs	r0, #100	; 0x64
 8010498:	f7fc fb28 	bl	800caec <SP100_LCD_Backlight>
 801049c:	4b91      	ldr	r3, [pc, #580]	; (80106e4 <HAL_ADC_ConvCpltCallback+0x2d0>)
 801049e:	891b      	ldrh	r3, [r3, #8]
 80104a0:	0018      	movs	r0, r3
 80104a2:	f7f2 fca1 	bl	8002de8 <__aeabi_i2d>
 80104a6:	4a90      	ldr	r2, [pc, #576]	; (80106e8 <HAL_ADC_ConvCpltCallback+0x2d4>)
 80104a8:	4b90      	ldr	r3, [pc, #576]	; (80106ec <HAL_ADC_ConvCpltCallback+0x2d8>)
 80104aa:	f7f1 fe4b 	bl	8002144 <__aeabi_dmul>
 80104ae:	0002      	movs	r2, r0
 80104b0:	000b      	movs	r3, r1
 80104b2:	0010      	movs	r0, r2
 80104b4:	0019      	movs	r1, r3
 80104b6:	2200      	movs	r2, #0
 80104b8:	4b8d      	ldr	r3, [pc, #564]	; (80106f0 <HAL_ADC_ConvCpltCallback+0x2dc>)
 80104ba:	f7f1 fa41 	bl	8001940 <__aeabi_ddiv>
 80104be:	0002      	movs	r2, r0
 80104c0:	000b      	movs	r3, r1
 80104c2:	0010      	movs	r0, r2
 80104c4:	0019      	movs	r1, r3
 80104c6:	2200      	movs	r2, #0
 80104c8:	4b8a      	ldr	r3, [pc, #552]	; (80106f4 <HAL_ADC_ConvCpltCallback+0x2e0>)
 80104ca:	f7f1 fe3b 	bl	8002144 <__aeabi_dmul>
 80104ce:	0002      	movs	r2, r0
 80104d0:	000b      	movs	r3, r1
 80104d2:	0010      	movs	r0, r2
 80104d4:	0019      	movs	r1, r3
 80104d6:	2200      	movs	r2, #0
 80104d8:	4b87      	ldr	r3, [pc, #540]	; (80106f8 <HAL_ADC_ConvCpltCallback+0x2e4>)
 80104da:	f7f1 fa31 	bl	8001940 <__aeabi_ddiv>
 80104de:	0002      	movs	r2, r0
 80104e0:	000b      	movs	r3, r1
 80104e2:	0010      	movs	r0, r2
 80104e4:	0019      	movs	r1, r3
 80104e6:	f7f2 fd1d 	bl	8002f24 <__aeabi_d2f>
 80104ea:	1c02      	adds	r2, r0, #0
 80104ec:	4b83      	ldr	r3, [pc, #524]	; (80106fc <HAL_ADC_ConvCpltCallback+0x2e8>)
 80104ee:	601a      	str	r2, [r3, #0]
 80104f0:	4b7c      	ldr	r3, [pc, #496]	; (80106e4 <HAL_ADC_ConvCpltCallback+0x2d0>)
 80104f2:	895b      	ldrh	r3, [r3, #10]
 80104f4:	0018      	movs	r0, r3
 80104f6:	f7f2 fc77 	bl	8002de8 <__aeabi_i2d>
 80104fa:	4a7b      	ldr	r2, [pc, #492]	; (80106e8 <HAL_ADC_ConvCpltCallback+0x2d4>)
 80104fc:	4b7b      	ldr	r3, [pc, #492]	; (80106ec <HAL_ADC_ConvCpltCallback+0x2d8>)
 80104fe:	f7f1 fe21 	bl	8002144 <__aeabi_dmul>
 8010502:	0002      	movs	r2, r0
 8010504:	000b      	movs	r3, r1
 8010506:	0010      	movs	r0, r2
 8010508:	0019      	movs	r1, r3
 801050a:	2200      	movs	r2, #0
 801050c:	4b78      	ldr	r3, [pc, #480]	; (80106f0 <HAL_ADC_ConvCpltCallback+0x2dc>)
 801050e:	f7f1 fa17 	bl	8001940 <__aeabi_ddiv>
 8010512:	0002      	movs	r2, r0
 8010514:	000b      	movs	r3, r1
 8010516:	0010      	movs	r0, r2
 8010518:	0019      	movs	r1, r3
 801051a:	2200      	movs	r2, #0
 801051c:	4b75      	ldr	r3, [pc, #468]	; (80106f4 <HAL_ADC_ConvCpltCallback+0x2e0>)
 801051e:	f7f1 fe11 	bl	8002144 <__aeabi_dmul>
 8010522:	0002      	movs	r2, r0
 8010524:	000b      	movs	r3, r1
 8010526:	0010      	movs	r0, r2
 8010528:	0019      	movs	r1, r3
 801052a:	2200      	movs	r2, #0
 801052c:	4b72      	ldr	r3, [pc, #456]	; (80106f8 <HAL_ADC_ConvCpltCallback+0x2e4>)
 801052e:	f7f1 fa07 	bl	8001940 <__aeabi_ddiv>
 8010532:	0002      	movs	r2, r0
 8010534:	000b      	movs	r3, r1
 8010536:	0010      	movs	r0, r2
 8010538:	0019      	movs	r1, r3
 801053a:	f7f2 fcf3 	bl	8002f24 <__aeabi_d2f>
 801053e:	1c02      	adds	r2, r0, #0
 8010540:	4b6f      	ldr	r3, [pc, #444]	; (8010700 <HAL_ADC_ConvCpltCallback+0x2ec>)
 8010542:	601a      	str	r2, [r3, #0]
 8010544:	4b67      	ldr	r3, [pc, #412]	; (80106e4 <HAL_ADC_ConvCpltCallback+0x2d0>)
 8010546:	899b      	ldrh	r3, [r3, #12]
 8010548:	0018      	movs	r0, r3
 801054a:	f7f2 fc4d 	bl	8002de8 <__aeabi_i2d>
 801054e:	4a66      	ldr	r2, [pc, #408]	; (80106e8 <HAL_ADC_ConvCpltCallback+0x2d4>)
 8010550:	4b66      	ldr	r3, [pc, #408]	; (80106ec <HAL_ADC_ConvCpltCallback+0x2d8>)
 8010552:	f7f1 fdf7 	bl	8002144 <__aeabi_dmul>
 8010556:	0002      	movs	r2, r0
 8010558:	000b      	movs	r3, r1
 801055a:	0010      	movs	r0, r2
 801055c:	0019      	movs	r1, r3
 801055e:	2200      	movs	r2, #0
 8010560:	4b63      	ldr	r3, [pc, #396]	; (80106f0 <HAL_ADC_ConvCpltCallback+0x2dc>)
 8010562:	f7f1 f9ed 	bl	8001940 <__aeabi_ddiv>
 8010566:	0002      	movs	r2, r0
 8010568:	000b      	movs	r3, r1
 801056a:	0010      	movs	r0, r2
 801056c:	0019      	movs	r1, r3
 801056e:	2200      	movs	r2, #0
 8010570:	4b60      	ldr	r3, [pc, #384]	; (80106f4 <HAL_ADC_ConvCpltCallback+0x2e0>)
 8010572:	f7f1 fde7 	bl	8002144 <__aeabi_dmul>
 8010576:	0002      	movs	r2, r0
 8010578:	000b      	movs	r3, r1
 801057a:	0010      	movs	r0, r2
 801057c:	0019      	movs	r1, r3
 801057e:	f7f2 fcd1 	bl	8002f24 <__aeabi_d2f>
 8010582:	1c02      	adds	r2, r0, #0
 8010584:	4b5f      	ldr	r3, [pc, #380]	; (8010704 <HAL_ADC_ConvCpltCallback+0x2f0>)
 8010586:	601a      	str	r2, [r3, #0]
 8010588:	4b5d      	ldr	r3, [pc, #372]	; (8010700 <HAL_ADC_ConvCpltCallback+0x2ec>)
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	1c18      	adds	r0, r3, #0
 801058e:	f7f2 fc81 	bl	8002e94 <__aeabi_f2d>
 8010592:	4a5d      	ldr	r2, [pc, #372]	; (8010708 <HAL_ADC_ConvCpltCallback+0x2f4>)
 8010594:	4b5d      	ldr	r3, [pc, #372]	; (801070c <HAL_ADC_ConvCpltCallback+0x2f8>)
 8010596:	f7ef ff5f 	bl	8000458 <__aeabi_dcmplt>
 801059a:	1e03      	subs	r3, r0, #0
 801059c:	d10a      	bne.n	80105b4 <HAL_ADC_ConvCpltCallback+0x1a0>
 801059e:	4b58      	ldr	r3, [pc, #352]	; (8010700 <HAL_ADC_ConvCpltCallback+0x2ec>)
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	1c18      	adds	r0, r3, #0
 80105a4:	f7f2 fc76 	bl	8002e94 <__aeabi_f2d>
 80105a8:	4a57      	ldr	r2, [pc, #348]	; (8010708 <HAL_ADC_ConvCpltCallback+0x2f4>)
 80105aa:	4b59      	ldr	r3, [pc, #356]	; (8010710 <HAL_ADC_ConvCpltCallback+0x2fc>)
 80105ac:	f7ef ff68 	bl	8000480 <__aeabi_dcmpgt>
 80105b0:	1e03      	subs	r3, r0, #0
 80105b2:	d003      	beq.n	80105bc <HAL_ADC_ConvCpltCallback+0x1a8>
 80105b4:	4b57      	ldr	r3, [pc, #348]	; (8010714 <HAL_ADC_ConvCpltCallback+0x300>)
 80105b6:	2201      	movs	r2, #1
 80105b8:	701a      	strb	r2, [r3, #0]
 80105ba:	e002      	b.n	80105c2 <HAL_ADC_ConvCpltCallback+0x1ae>
 80105bc:	4b55      	ldr	r3, [pc, #340]	; (8010714 <HAL_ADC_ConvCpltCallback+0x300>)
 80105be:	2200      	movs	r2, #0
 80105c0:	701a      	strb	r2, [r3, #0]
 80105c2:	4b4e      	ldr	r3, [pc, #312]	; (80106fc <HAL_ADC_ConvCpltCallback+0x2e8>)
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	1c18      	adds	r0, r3, #0
 80105c8:	f7f2 fc64 	bl	8002e94 <__aeabi_f2d>
 80105cc:	4a4e      	ldr	r2, [pc, #312]	; (8010708 <HAL_ADC_ConvCpltCallback+0x2f4>)
 80105ce:	4b4f      	ldr	r3, [pc, #316]	; (801070c <HAL_ADC_ConvCpltCallback+0x2f8>)
 80105d0:	f7ef ff42 	bl	8000458 <__aeabi_dcmplt>
 80105d4:	1e03      	subs	r3, r0, #0
 80105d6:	d10a      	bne.n	80105ee <HAL_ADC_ConvCpltCallback+0x1da>
 80105d8:	4b48      	ldr	r3, [pc, #288]	; (80106fc <HAL_ADC_ConvCpltCallback+0x2e8>)
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	1c18      	adds	r0, r3, #0
 80105de:	f7f2 fc59 	bl	8002e94 <__aeabi_f2d>
 80105e2:	4a49      	ldr	r2, [pc, #292]	; (8010708 <HAL_ADC_ConvCpltCallback+0x2f4>)
 80105e4:	4b4a      	ldr	r3, [pc, #296]	; (8010710 <HAL_ADC_ConvCpltCallback+0x2fc>)
 80105e6:	f7ef ff4b 	bl	8000480 <__aeabi_dcmpgt>
 80105ea:	1e03      	subs	r3, r0, #0
 80105ec:	d003      	beq.n	80105f6 <HAL_ADC_ConvCpltCallback+0x1e2>
 80105ee:	4b4a      	ldr	r3, [pc, #296]	; (8010718 <HAL_ADC_ConvCpltCallback+0x304>)
 80105f0:	2201      	movs	r2, #1
 80105f2:	701a      	strb	r2, [r3, #0]
 80105f4:	e002      	b.n	80105fc <HAL_ADC_ConvCpltCallback+0x1e8>
 80105f6:	4b48      	ldr	r3, [pc, #288]	; (8010718 <HAL_ADC_ConvCpltCallback+0x304>)
 80105f8:	2200      	movs	r2, #0
 80105fa:	701a      	strb	r2, [r3, #0]
 80105fc:	4b38      	ldr	r3, [pc, #224]	; (80106e0 <HAL_ADC_ConvCpltCallback+0x2cc>)
 80105fe:	781b      	ldrb	r3, [r3, #0]
 8010600:	2b05      	cmp	r3, #5
 8010602:	d007      	beq.n	8010614 <HAL_ADC_ConvCpltCallback+0x200>
 8010604:	4b36      	ldr	r3, [pc, #216]	; (80106e0 <HAL_ADC_ConvCpltCallback+0x2cc>)
 8010606:	781b      	ldrb	r3, [r3, #0]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d003      	beq.n	8010614 <HAL_ADC_ConvCpltCallback+0x200>
 801060c:	4b34      	ldr	r3, [pc, #208]	; (80106e0 <HAL_ADC_ConvCpltCallback+0x2cc>)
 801060e:	781b      	ldrb	r3, [r3, #0]
 8010610:	2b04      	cmp	r3, #4
 8010612:	d103      	bne.n	801061c <HAL_ADC_ConvCpltCallback+0x208>
 8010614:	2000      	movs	r0, #0
 8010616:	f7f8 ff4d 	bl	80094b4 <SP100_BL_Handler>
 801061a:	e010      	b.n	801063e <HAL_ADC_ConvCpltCallback+0x22a>
 801061c:	4b30      	ldr	r3, [pc, #192]	; (80106e0 <HAL_ADC_ConvCpltCallback+0x2cc>)
 801061e:	781b      	ldrb	r3, [r3, #0]
 8010620:	2b01      	cmp	r3, #1
 8010622:	d007      	beq.n	8010634 <HAL_ADC_ConvCpltCallback+0x220>
 8010624:	4b2e      	ldr	r3, [pc, #184]	; (80106e0 <HAL_ADC_ConvCpltCallback+0x2cc>)
 8010626:	781b      	ldrb	r3, [r3, #0]
 8010628:	2b02      	cmp	r3, #2
 801062a:	d003      	beq.n	8010634 <HAL_ADC_ConvCpltCallback+0x220>
 801062c:	4b2c      	ldr	r3, [pc, #176]	; (80106e0 <HAL_ADC_ConvCpltCallback+0x2cc>)
 801062e:	781b      	ldrb	r3, [r3, #0]
 8010630:	2b03      	cmp	r3, #3
 8010632:	d104      	bne.n	801063e <HAL_ADC_ConvCpltCallback+0x22a>
 8010634:	4b39      	ldr	r3, [pc, #228]	; (801071c <HAL_ADC_ConvCpltCallback+0x308>)
 8010636:	781b      	ldrb	r3, [r3, #0]
 8010638:	0018      	movs	r0, r3
 801063a:	f7f8 ff3b 	bl	80094b4 <SP100_BL_Handler>
 801063e:	4b26      	ldr	r3, [pc, #152]	; (80106d8 <HAL_ADC_ConvCpltCallback+0x2c4>)
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	2b01      	cmp	r3, #1
 8010644:	d003      	beq.n	801064e <HAL_ADC_ConvCpltCallback+0x23a>
 8010646:	4b24      	ldr	r3, [pc, #144]	; (80106d8 <HAL_ADC_ConvCpltCallback+0x2c4>)
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	2b06      	cmp	r3, #6
 801064c:	d10a      	bne.n	8010664 <HAL_ADC_ConvCpltCallback+0x250>
 801064e:	4b34      	ldr	r3, [pc, #208]	; (8010720 <HAL_ADC_ConvCpltCallback+0x30c>)
 8010650:	781b      	ldrb	r3, [r3, #0]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d103      	bne.n	801065e <HAL_ADC_ConvCpltCallback+0x24a>
 8010656:	4b32      	ldr	r3, [pc, #200]	; (8010720 <HAL_ADC_ConvCpltCallback+0x30c>)
 8010658:	2201      	movs	r2, #1
 801065a:	701a      	strb	r2, [r3, #0]
 801065c:	e002      	b.n	8010664 <HAL_ADC_ConvCpltCallback+0x250>
 801065e:	4b30      	ldr	r3, [pc, #192]	; (8010720 <HAL_ADC_ConvCpltCallback+0x30c>)
 8010660:	2200      	movs	r2, #0
 8010662:	701a      	strb	r2, [r3, #0]
 8010664:	4b1c      	ldr	r3, [pc, #112]	; (80106d8 <HAL_ADC_ConvCpltCallback+0x2c4>)
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	2b01      	cmp	r3, #1
 801066a:	d003      	beq.n	8010674 <HAL_ADC_ConvCpltCallback+0x260>
 801066c:	4b1a      	ldr	r3, [pc, #104]	; (80106d8 <HAL_ADC_ConvCpltCallback+0x2c4>)
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	2b06      	cmp	r3, #6
 8010672:	d10d      	bne.n	8010690 <HAL_ADC_ConvCpltCallback+0x27c>
 8010674:	4b1a      	ldr	r3, [pc, #104]	; (80106e0 <HAL_ADC_ConvCpltCallback+0x2cc>)
 8010676:	781b      	ldrb	r3, [r3, #0]
 8010678:	2b01      	cmp	r3, #1
 801067a:	d007      	beq.n	801068c <HAL_ADC_ConvCpltCallback+0x278>
 801067c:	4b18      	ldr	r3, [pc, #96]	; (80106e0 <HAL_ADC_ConvCpltCallback+0x2cc>)
 801067e:	781b      	ldrb	r3, [r3, #0]
 8010680:	2b02      	cmp	r3, #2
 8010682:	d003      	beq.n	801068c <HAL_ADC_ConvCpltCallback+0x278>
 8010684:	4b16      	ldr	r3, [pc, #88]	; (80106e0 <HAL_ADC_ConvCpltCallback+0x2cc>)
 8010686:	781b      	ldrb	r3, [r3, #0]
 8010688:	2b03      	cmp	r3, #3
 801068a:	d101      	bne.n	8010690 <HAL_ADC_ConvCpltCallback+0x27c>
 801068c:	f7fc f850 	bl	800c730 <SP100_ISI_Ctrl_BL>
 8010690:	4b11      	ldr	r3, [pc, #68]	; (80106d8 <HAL_ADC_ConvCpltCallback+0x2c4>)
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	2b09      	cmp	r3, #9
 8010696:	d109      	bne.n	80106ac <HAL_ADC_ConvCpltCallback+0x298>
 8010698:	4b12      	ldr	r3, [pc, #72]	; (80106e4 <HAL_ADC_ConvCpltCallback+0x2d0>)
 801069a:	88d8      	ldrh	r0, [r3, #6]
 801069c:	4b11      	ldr	r3, [pc, #68]	; (80106e4 <HAL_ADC_ConvCpltCallback+0x2d0>)
 801069e:	8819      	ldrh	r1, [r3, #0]
 80106a0:	4b10      	ldr	r3, [pc, #64]	; (80106e4 <HAL_ADC_ConvCpltCallback+0x2d0>)
 80106a2:	885a      	ldrh	r2, [r3, #2]
 80106a4:	4b0f      	ldr	r3, [pc, #60]	; (80106e4 <HAL_ADC_ConvCpltCallback+0x2d0>)
 80106a6:	889b      	ldrh	r3, [r3, #4]
 80106a8:	f7fe ffde 	bl	800f668 <SP100_Snsrs_Handler>
 80106ac:	4b0a      	ldr	r3, [pc, #40]	; (80106d8 <HAL_ADC_ConvCpltCallback+0x2c4>)
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	2b0a      	cmp	r3, #10
 80106b2:	d10d      	bne.n	80106d0 <HAL_ADC_ConvCpltCallback+0x2bc>
 80106b4:	4b0a      	ldr	r3, [pc, #40]	; (80106e0 <HAL_ADC_ConvCpltCallback+0x2cc>)
 80106b6:	781b      	ldrb	r3, [r3, #0]
 80106b8:	2b01      	cmp	r3, #1
 80106ba:	d007      	beq.n	80106cc <HAL_ADC_ConvCpltCallback+0x2b8>
 80106bc:	4b08      	ldr	r3, [pc, #32]	; (80106e0 <HAL_ADC_ConvCpltCallback+0x2cc>)
 80106be:	781b      	ldrb	r3, [r3, #0]
 80106c0:	2b02      	cmp	r3, #2
 80106c2:	d003      	beq.n	80106cc <HAL_ADC_ConvCpltCallback+0x2b8>
 80106c4:	4b06      	ldr	r3, [pc, #24]	; (80106e0 <HAL_ADC_ConvCpltCallback+0x2cc>)
 80106c6:	781b      	ldrb	r3, [r3, #0]
 80106c8:	2b03      	cmp	r3, #3
 80106ca:	d101      	bne.n	80106d0 <HAL_ADC_ConvCpltCallback+0x2bc>
 80106cc:	f7fa fb56 	bl	800ad7c <SP100_ISI_Ctrl>
 80106d0:	46c0      	nop			; (mov r8, r8)
 80106d2:	46bd      	mov	sp, r7
 80106d4:	b002      	add	sp, #8
 80106d6:	bd80      	pop	{r7, pc}
 80106d8:	200005a4 	.word	0x200005a4
 80106dc:	48000800 	.word	0x48000800
 80106e0:	20000570 	.word	0x20000570
 80106e4:	2000064c 	.word	0x2000064c
 80106e8:	66666666 	.word	0x66666666
 80106ec:	400a6666 	.word	0x400a6666
 80106f0:	40affe00 	.word	0x40affe00
 80106f4:	40140000 	.word	0x40140000
 80106f8:	40080000 	.word	0x40080000
 80106fc:	2000059c 	.word	0x2000059c
 8010700:	20000598 	.word	0x20000598
 8010704:	200005a0 	.word	0x200005a0
 8010708:	9999999a 	.word	0x9999999a
 801070c:	3fb99999 	.word	0x3fb99999
 8010710:	40139999 	.word	0x40139999
 8010714:	2000057e 	.word	0x2000057e
 8010718:	2000057f 	.word	0x2000057f
 801071c:	20000574 	.word	0x20000574
 8010720:	20000581 	.word	0x20000581

08010724 <SP100_AC_OFF>:
 8010724:	b590      	push	{r4, r7, lr}
 8010726:	b083      	sub	sp, #12
 8010728:	af00      	add	r7, sp, #0
 801072a:	2380      	movs	r3, #128	; 0x80
 801072c:	0059      	lsls	r1, r3, #1
 801072e:	2390      	movs	r3, #144	; 0x90
 8010730:	05db      	lsls	r3, r3, #23
 8010732:	2200      	movs	r2, #0
 8010734:	0018      	movs	r0, r3
 8010736:	f7f5 faaa 	bl	8005c8e <HAL_GPIO_WritePin>
 801073a:	1dfc      	adds	r4, r7, #7
 801073c:	2043      	movs	r0, #67	; 0x43
 801073e:	f7ff fdb9 	bl	80102b4 <SP100_TLE_Ctrl_Register_Read>
 8010742:	0003      	movs	r3, r0
 8010744:	7023      	strb	r3, [r4, #0]
 8010746:	1dfb      	adds	r3, r7, #7
 8010748:	1dfa      	adds	r2, r7, #7
 801074a:	7812      	ldrb	r2, [r2, #0]
 801074c:	2130      	movs	r1, #48	; 0x30
 801074e:	400a      	ands	r2, r1
 8010750:	701a      	strb	r2, [r3, #0]
 8010752:	1dfb      	adds	r3, r7, #7
 8010754:	781b      	ldrb	r3, [r3, #0]
 8010756:	2b10      	cmp	r3, #16
 8010758:	d017      	beq.n	801078a <SP100_AC_OFF+0x66>
 801075a:	1dfc      	adds	r4, r7, #7
 801075c:	2043      	movs	r0, #67	; 0x43
 801075e:	f7ff fda9 	bl	80102b4 <SP100_TLE_Ctrl_Register_Read>
 8010762:	0003      	movs	r3, r0
 8010764:	7023      	strb	r3, [r4, #0]
 8010766:	1dfb      	adds	r3, r7, #7
 8010768:	1dfa      	adds	r2, r7, #7
 801076a:	7812      	ldrb	r2, [r2, #0]
 801076c:	2130      	movs	r1, #48	; 0x30
 801076e:	438a      	bics	r2, r1
 8010770:	701a      	strb	r2, [r3, #0]
 8010772:	1dfb      	adds	r3, r7, #7
 8010774:	1dfa      	adds	r2, r7, #7
 8010776:	7812      	ldrb	r2, [r2, #0]
 8010778:	2110      	movs	r1, #16
 801077a:	430a      	orrs	r2, r1
 801077c:	701a      	strb	r2, [r3, #0]
 801077e:	1dfb      	adds	r3, r7, #7
 8010780:	781b      	ldrb	r3, [r3, #0]
 8010782:	0019      	movs	r1, r3
 8010784:	2043      	movs	r0, #67	; 0x43
 8010786:	f7ff fdd3 	bl	8010330 <SP100_TLE_Ctrl_Register_Write>
 801078a:	46c0      	nop			; (mov r8, r8)
 801078c:	46bd      	mov	sp, r7
 801078e:	b003      	add	sp, #12
 8010790:	bd90      	pop	{r4, r7, pc}
	...

08010794 <SP100_AC_ON>:
 8010794:	b590      	push	{r4, r7, lr}
 8010796:	b083      	sub	sp, #12
 8010798:	af00      	add	r7, sp, #0
 801079a:	2380      	movs	r3, #128	; 0x80
 801079c:	0059      	lsls	r1, r3, #1
 801079e:	2390      	movs	r3, #144	; 0x90
 80107a0:	05db      	lsls	r3, r3, #23
 80107a2:	2201      	movs	r2, #1
 80107a4:	0018      	movs	r0, r3
 80107a6:	f7f5 fa72 	bl	8005c8e <HAL_GPIO_WritePin>
 80107aa:	4b2c      	ldr	r3, [pc, #176]	; (801085c <SP100_AC_ON+0xc8>)
 80107ac:	781b      	ldrb	r3, [r3, #0]
 80107ae:	2b01      	cmp	r3, #1
 80107b0:	d128      	bne.n	8010804 <SP100_AC_ON+0x70>
 80107b2:	1dbc      	adds	r4, r7, #6
 80107b4:	2043      	movs	r0, #67	; 0x43
 80107b6:	f7ff fd7d 	bl	80102b4 <SP100_TLE_Ctrl_Register_Read>
 80107ba:	0003      	movs	r3, r0
 80107bc:	7023      	strb	r3, [r4, #0]
 80107be:	1dbb      	adds	r3, r7, #6
 80107c0:	1dba      	adds	r2, r7, #6
 80107c2:	7812      	ldrb	r2, [r2, #0]
 80107c4:	2130      	movs	r1, #48	; 0x30
 80107c6:	400a      	ands	r2, r1
 80107c8:	701a      	strb	r2, [r3, #0]
 80107ca:	1dbb      	adds	r3, r7, #6
 80107cc:	781b      	ldrb	r3, [r3, #0]
 80107ce:	2b20      	cmp	r3, #32
 80107d0:	d040      	beq.n	8010854 <SP100_AC_ON+0xc0>
 80107d2:	1dbc      	adds	r4, r7, #6
 80107d4:	2043      	movs	r0, #67	; 0x43
 80107d6:	f7ff fd6d 	bl	80102b4 <SP100_TLE_Ctrl_Register_Read>
 80107da:	0003      	movs	r3, r0
 80107dc:	7023      	strb	r3, [r4, #0]
 80107de:	1dbb      	adds	r3, r7, #6
 80107e0:	1dba      	adds	r2, r7, #6
 80107e2:	7812      	ldrb	r2, [r2, #0]
 80107e4:	2130      	movs	r1, #48	; 0x30
 80107e6:	438a      	bics	r2, r1
 80107e8:	701a      	strb	r2, [r3, #0]
 80107ea:	1dbb      	adds	r3, r7, #6
 80107ec:	1dba      	adds	r2, r7, #6
 80107ee:	7812      	ldrb	r2, [r2, #0]
 80107f0:	2120      	movs	r1, #32
 80107f2:	430a      	orrs	r2, r1
 80107f4:	701a      	strb	r2, [r3, #0]
 80107f6:	1dbb      	adds	r3, r7, #6
 80107f8:	781b      	ldrb	r3, [r3, #0]
 80107fa:	0019      	movs	r1, r3
 80107fc:	2043      	movs	r0, #67	; 0x43
 80107fe:	f7ff fd97 	bl	8010330 <SP100_TLE_Ctrl_Register_Write>
 8010802:	e027      	b.n	8010854 <SP100_AC_ON+0xc0>
 8010804:	1dfc      	adds	r4, r7, #7
 8010806:	2043      	movs	r0, #67	; 0x43
 8010808:	f7ff fd54 	bl	80102b4 <SP100_TLE_Ctrl_Register_Read>
 801080c:	0003      	movs	r3, r0
 801080e:	7023      	strb	r3, [r4, #0]
 8010810:	1dfb      	adds	r3, r7, #7
 8010812:	1dfa      	adds	r2, r7, #7
 8010814:	7812      	ldrb	r2, [r2, #0]
 8010816:	2130      	movs	r1, #48	; 0x30
 8010818:	400a      	ands	r2, r1
 801081a:	701a      	strb	r2, [r3, #0]
 801081c:	1dfb      	adds	r3, r7, #7
 801081e:	781b      	ldrb	r3, [r3, #0]
 8010820:	2b10      	cmp	r3, #16
 8010822:	d017      	beq.n	8010854 <SP100_AC_ON+0xc0>
 8010824:	1dfc      	adds	r4, r7, #7
 8010826:	2043      	movs	r0, #67	; 0x43
 8010828:	f7ff fd44 	bl	80102b4 <SP100_TLE_Ctrl_Register_Read>
 801082c:	0003      	movs	r3, r0
 801082e:	7023      	strb	r3, [r4, #0]
 8010830:	1dfb      	adds	r3, r7, #7
 8010832:	1dfa      	adds	r2, r7, #7
 8010834:	7812      	ldrb	r2, [r2, #0]
 8010836:	2130      	movs	r1, #48	; 0x30
 8010838:	438a      	bics	r2, r1
 801083a:	701a      	strb	r2, [r3, #0]
 801083c:	1dfb      	adds	r3, r7, #7
 801083e:	1dfa      	adds	r2, r7, #7
 8010840:	7812      	ldrb	r2, [r2, #0]
 8010842:	2110      	movs	r1, #16
 8010844:	430a      	orrs	r2, r1
 8010846:	701a      	strb	r2, [r3, #0]
 8010848:	1dfb      	adds	r3, r7, #7
 801084a:	781b      	ldrb	r3, [r3, #0]
 801084c:	0019      	movs	r1, r3
 801084e:	2043      	movs	r0, #67	; 0x43
 8010850:	f7ff fd6e 	bl	8010330 <SP100_TLE_Ctrl_Register_Write>
 8010854:	46c0      	nop			; (mov r8, r8)
 8010856:	46bd      	mov	sp, r7
 8010858:	b003      	add	sp, #12
 801085a:	bd90      	pop	{r4, r7, pc}
 801085c:	20000576 	.word	0x20000576

08010860 <SP100_AC_Handler>:
 8010860:	b580      	push	{r7, lr}
 8010862:	b082      	sub	sp, #8
 8010864:	af00      	add	r7, sp, #0
 8010866:	0002      	movs	r2, r0
 8010868:	1dfb      	adds	r3, r7, #7
 801086a:	701a      	strb	r2, [r3, #0]
 801086c:	1dfb      	adds	r3, r7, #7
 801086e:	781b      	ldrb	r3, [r3, #0]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d002      	beq.n	801087a <SP100_AC_Handler+0x1a>
 8010874:	2b01      	cmp	r3, #1
 8010876:	d003      	beq.n	8010880 <SP100_AC_Handler+0x20>
 8010878:	e005      	b.n	8010886 <SP100_AC_Handler+0x26>
 801087a:	f7ff ff53 	bl	8010724 <SP100_AC_OFF>
 801087e:	e002      	b.n	8010886 <SP100_AC_Handler+0x26>
 8010880:	f7ff ff88 	bl	8010794 <SP100_AC_ON>
 8010884:	46c0      	nop			; (mov r8, r8)
 8010886:	46c0      	nop			; (mov r8, r8)
 8010888:	46bd      	mov	sp, r7
 801088a:	b002      	add	sp, #8
 801088c:	bd80      	pop	{r7, pc}
	...

08010890 <SP100_AM_MA_STP>:
 8010890:	b590      	push	{r4, r7, lr}
 8010892:	b083      	sub	sp, #12
 8010894:	af00      	add	r7, sp, #0
 8010896:	1dfc      	adds	r4, r7, #7
 8010898:	2003      	movs	r0, #3
 801089a:	f7ff fd0b 	bl	80102b4 <SP100_TLE_Ctrl_Register_Read>
 801089e:	0003      	movs	r3, r0
 80108a0:	7023      	strb	r3, [r4, #0]
 80108a2:	1dfb      	adds	r3, r7, #7
 80108a4:	1dfa      	adds	r2, r7, #7
 80108a6:	7812      	ldrb	r2, [r2, #0]
 80108a8:	210f      	movs	r1, #15
 80108aa:	438a      	bics	r2, r1
 80108ac:	701a      	strb	r2, [r3, #0]
 80108ae:	1dfb      	adds	r3, r7, #7
 80108b0:	781b      	ldrb	r3, [r3, #0]
 80108b2:	2b50      	cmp	r3, #80	; 0x50
 80108b4:	d020      	beq.n	80108f8 <SP100_AM_MA_STP+0x68>
 80108b6:	1dfc      	adds	r4, r7, #7
 80108b8:	2003      	movs	r0, #3
 80108ba:	f7ff fcfb 	bl	80102b4 <SP100_TLE_Ctrl_Register_Read>
 80108be:	0003      	movs	r3, r0
 80108c0:	7023      	strb	r3, [r4, #0]
 80108c2:	1dfb      	adds	r3, r7, #7
 80108c4:	1dfa      	adds	r2, r7, #7
 80108c6:	7812      	ldrb	r2, [r2, #0]
 80108c8:	210f      	movs	r1, #15
 80108ca:	400a      	ands	r2, r1
 80108cc:	701a      	strb	r2, [r3, #0]
 80108ce:	1dfb      	adds	r3, r7, #7
 80108d0:	1dfa      	adds	r2, r7, #7
 80108d2:	7812      	ldrb	r2, [r2, #0]
 80108d4:	2150      	movs	r1, #80	; 0x50
 80108d6:	430a      	orrs	r2, r1
 80108d8:	701a      	strb	r2, [r3, #0]
 80108da:	1dfb      	adds	r3, r7, #7
 80108dc:	781b      	ldrb	r3, [r3, #0]
 80108de:	0019      	movs	r1, r3
 80108e0:	2003      	movs	r0, #3
 80108e2:	f7ff fd25 	bl	8010330 <SP100_TLE_Ctrl_Register_Write>
 80108e6:	4b06      	ldr	r3, [pc, #24]	; (8010900 <SP100_AM_MA_STP+0x70>)
 80108e8:	0018      	movs	r0, r3
 80108ea:	f7f7 f93b 	bl	8007b64 <HAL_TIM_Base_Stop_IT>
 80108ee:	4b04      	ldr	r3, [pc, #16]	; (8010900 <SP100_AM_MA_STP+0x70>)
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	2202      	movs	r2, #2
 80108f4:	4252      	negs	r2, r2
 80108f6:	611a      	str	r2, [r3, #16]
 80108f8:	46c0      	nop			; (mov r8, r8)
 80108fa:	46bd      	mov	sp, r7
 80108fc:	b003      	add	sp, #12
 80108fe:	bd90      	pop	{r4, r7, pc}
 8010900:	20000448 	.word	0x20000448

08010904 <SP100_AM_MA_FWD>:
 8010904:	b590      	push	{r4, r7, lr}
 8010906:	b083      	sub	sp, #12
 8010908:	af00      	add	r7, sp, #0
 801090a:	1dfc      	adds	r4, r7, #7
 801090c:	2003      	movs	r0, #3
 801090e:	f7ff fcd1 	bl	80102b4 <SP100_TLE_Ctrl_Register_Read>
 8010912:	0003      	movs	r3, r0
 8010914:	7023      	strb	r3, [r4, #0]
 8010916:	1dfb      	adds	r3, r7, #7
 8010918:	1dfa      	adds	r2, r7, #7
 801091a:	7812      	ldrb	r2, [r2, #0]
 801091c:	210f      	movs	r1, #15
 801091e:	438a      	bics	r2, r1
 8010920:	701a      	strb	r2, [r3, #0]
 8010922:	1dfb      	adds	r3, r7, #7
 8010924:	781b      	ldrb	r3, [r3, #0]
 8010926:	2b90      	cmp	r3, #144	; 0x90
 8010928:	d029      	beq.n	801097e <SP100_AM_MA_FWD+0x7a>
 801092a:	4b17      	ldr	r3, [pc, #92]	; (8010988 <SP100_AM_MA_FWD+0x84>)
 801092c:	781b      	ldrb	r3, [r3, #0]
 801092e:	2b00      	cmp	r3, #0
 8010930:	d125      	bne.n	801097e <SP100_AM_MA_FWD+0x7a>
 8010932:	1dfc      	adds	r4, r7, #7
 8010934:	2003      	movs	r0, #3
 8010936:	f7ff fcbd 	bl	80102b4 <SP100_TLE_Ctrl_Register_Read>
 801093a:	0003      	movs	r3, r0
 801093c:	7023      	strb	r3, [r4, #0]
 801093e:	1dfb      	adds	r3, r7, #7
 8010940:	1dfa      	adds	r2, r7, #7
 8010942:	7812      	ldrb	r2, [r2, #0]
 8010944:	210f      	movs	r1, #15
 8010946:	400a      	ands	r2, r1
 8010948:	701a      	strb	r2, [r3, #0]
 801094a:	1dfb      	adds	r3, r7, #7
 801094c:	1dfa      	adds	r2, r7, #7
 801094e:	7812      	ldrb	r2, [r2, #0]
 8010950:	2170      	movs	r1, #112	; 0x70
 8010952:	4249      	negs	r1, r1
 8010954:	430a      	orrs	r2, r1
 8010956:	701a      	strb	r2, [r3, #0]
 8010958:	1dfb      	adds	r3, r7, #7
 801095a:	781b      	ldrb	r3, [r3, #0]
 801095c:	0019      	movs	r1, r3
 801095e:	2003      	movs	r0, #3
 8010960:	f7ff fce6 	bl	8010330 <SP100_TLE_Ctrl_Register_Write>
 8010964:	4b09      	ldr	r3, [pc, #36]	; (801098c <SP100_AM_MA_FWD+0x88>)
 8010966:	681b      	ldr	r3, [r3, #0]
 8010968:	2200      	movs	r2, #0
 801096a:	625a      	str	r2, [r3, #36]	; 0x24
 801096c:	4b07      	ldr	r3, [pc, #28]	; (801098c <SP100_AM_MA_FWD+0x88>)
 801096e:	681b      	ldr	r3, [r3, #0]
 8010970:	2202      	movs	r2, #2
 8010972:	4252      	negs	r2, r2
 8010974:	611a      	str	r2, [r3, #16]
 8010976:	4b05      	ldr	r3, [pc, #20]	; (801098c <SP100_AM_MA_FWD+0x88>)
 8010978:	0018      	movs	r0, r3
 801097a:	f7f7 f8a1 	bl	8007ac0 <HAL_TIM_Base_Start_IT>
 801097e:	46c0      	nop			; (mov r8, r8)
 8010980:	46bd      	mov	sp, r7
 8010982:	b003      	add	sp, #12
 8010984:	bd90      	pop	{r4, r7, pc}
 8010986:	46c0      	nop			; (mov r8, r8)
 8010988:	2000057c 	.word	0x2000057c
 801098c:	20000448 	.word	0x20000448

08010990 <SP100_AM_MA_RVS>:
 8010990:	b590      	push	{r4, r7, lr}
 8010992:	b083      	sub	sp, #12
 8010994:	af00      	add	r7, sp, #0
 8010996:	1dfc      	adds	r4, r7, #7
 8010998:	2003      	movs	r0, #3
 801099a:	f7ff fc8b 	bl	80102b4 <SP100_TLE_Ctrl_Register_Read>
 801099e:	0003      	movs	r3, r0
 80109a0:	7023      	strb	r3, [r4, #0]
 80109a2:	1dfb      	adds	r3, r7, #7
 80109a4:	1dfa      	adds	r2, r7, #7
 80109a6:	7812      	ldrb	r2, [r2, #0]
 80109a8:	210f      	movs	r1, #15
 80109aa:	438a      	bics	r2, r1
 80109ac:	701a      	strb	r2, [r3, #0]
 80109ae:	1dfb      	adds	r3, r7, #7
 80109b0:	781b      	ldrb	r3, [r3, #0]
 80109b2:	2b60      	cmp	r3, #96	; 0x60
 80109b4:	d028      	beq.n	8010a08 <SP100_AM_MA_RVS+0x78>
 80109b6:	4b16      	ldr	r3, [pc, #88]	; (8010a10 <SP100_AM_MA_RVS+0x80>)
 80109b8:	781b      	ldrb	r3, [r3, #0]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d124      	bne.n	8010a08 <SP100_AM_MA_RVS+0x78>
 80109be:	1dfc      	adds	r4, r7, #7
 80109c0:	2003      	movs	r0, #3
 80109c2:	f7ff fc77 	bl	80102b4 <SP100_TLE_Ctrl_Register_Read>
 80109c6:	0003      	movs	r3, r0
 80109c8:	7023      	strb	r3, [r4, #0]
 80109ca:	1dfb      	adds	r3, r7, #7
 80109cc:	1dfa      	adds	r2, r7, #7
 80109ce:	7812      	ldrb	r2, [r2, #0]
 80109d0:	210f      	movs	r1, #15
 80109d2:	400a      	ands	r2, r1
 80109d4:	701a      	strb	r2, [r3, #0]
 80109d6:	1dfb      	adds	r3, r7, #7
 80109d8:	1dfa      	adds	r2, r7, #7
 80109da:	7812      	ldrb	r2, [r2, #0]
 80109dc:	2160      	movs	r1, #96	; 0x60
 80109de:	430a      	orrs	r2, r1
 80109e0:	701a      	strb	r2, [r3, #0]
 80109e2:	1dfb      	adds	r3, r7, #7
 80109e4:	781b      	ldrb	r3, [r3, #0]
 80109e6:	0019      	movs	r1, r3
 80109e8:	2003      	movs	r0, #3
 80109ea:	f7ff fca1 	bl	8010330 <SP100_TLE_Ctrl_Register_Write>
 80109ee:	4b09      	ldr	r3, [pc, #36]	; (8010a14 <SP100_AM_MA_RVS+0x84>)
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	2200      	movs	r2, #0
 80109f4:	625a      	str	r2, [r3, #36]	; 0x24
 80109f6:	4b07      	ldr	r3, [pc, #28]	; (8010a14 <SP100_AM_MA_RVS+0x84>)
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	2202      	movs	r2, #2
 80109fc:	4252      	negs	r2, r2
 80109fe:	611a      	str	r2, [r3, #16]
 8010a00:	4b04      	ldr	r3, [pc, #16]	; (8010a14 <SP100_AM_MA_RVS+0x84>)
 8010a02:	0018      	movs	r0, r3
 8010a04:	f7f7 f85c 	bl	8007ac0 <HAL_TIM_Base_Start_IT>
 8010a08:	46c0      	nop			; (mov r8, r8)
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	b003      	add	sp, #12
 8010a0e:	bd90      	pop	{r4, r7, pc}
 8010a10:	2000057c 	.word	0x2000057c
 8010a14:	20000448 	.word	0x20000448

08010a18 <SP100_AM_MA_Handler>:
 8010a18:	b580      	push	{r7, lr}
 8010a1a:	b082      	sub	sp, #8
 8010a1c:	af00      	add	r7, sp, #0
 8010a1e:	0002      	movs	r2, r0
 8010a20:	1dfb      	adds	r3, r7, #7
 8010a22:	701a      	strb	r2, [r3, #0]
 8010a24:	1dfb      	adds	r3, r7, #7
 8010a26:	781b      	ldrb	r3, [r3, #0]
 8010a28:	2b14      	cmp	r3, #20
 8010a2a:	d900      	bls.n	8010a2e <SP100_AM_MA_Handler+0x16>
 8010a2c:	e2be      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010a2e:	009a      	lsls	r2, r3, #2
 8010a30:	4bc2      	ldr	r3, [pc, #776]	; (8010d3c <SP100_AM_MA_Handler+0x324>)
 8010a32:	18d3      	adds	r3, r2, r3
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	469f      	mov	pc, r3
 8010a38:	4bc1      	ldr	r3, [pc, #772]	; (8010d40 <SP100_AM_MA_Handler+0x328>)
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	1c18      	adds	r0, r3, #0
 8010a3e:	f7f2 fa29 	bl	8002e94 <__aeabi_f2d>
 8010a42:	4ac0      	ldr	r2, [pc, #768]	; (8010d44 <SP100_AM_MA_Handler+0x32c>)
 8010a44:	4bc0      	ldr	r3, [pc, #768]	; (8010d48 <SP100_AM_MA_Handler+0x330>)
 8010a46:	f7ef fd11 	bl	800046c <__aeabi_dcmple>
 8010a4a:	1e03      	subs	r3, r0, #0
 8010a4c:	d002      	beq.n	8010a54 <SP100_AM_MA_Handler+0x3c>
 8010a4e:	f7ff ff59 	bl	8010904 <SP100_AM_MA_FWD>
 8010a52:	e2ab      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010a54:	4bba      	ldr	r3, [pc, #744]	; (8010d40 <SP100_AM_MA_Handler+0x328>)
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	1c18      	adds	r0, r3, #0
 8010a5a:	f7f2 fa1b 	bl	8002e94 <__aeabi_f2d>
 8010a5e:	4abb      	ldr	r2, [pc, #748]	; (8010d4c <SP100_AM_MA_Handler+0x334>)
 8010a60:	4bbb      	ldr	r3, [pc, #748]	; (8010d50 <SP100_AM_MA_Handler+0x338>)
 8010a62:	f7ef fd17 	bl	8000494 <__aeabi_dcmpge>
 8010a66:	1e03      	subs	r3, r0, #0
 8010a68:	d002      	beq.n	8010a70 <SP100_AM_MA_Handler+0x58>
 8010a6a:	f7ff ff91 	bl	8010990 <SP100_AM_MA_RVS>
 8010a6e:	e29d      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010a70:	f7ff ff0e 	bl	8010890 <SP100_AM_MA_STP>
 8010a74:	e29a      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010a76:	4bb2      	ldr	r3, [pc, #712]	; (8010d40 <SP100_AM_MA_Handler+0x328>)
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	1c18      	adds	r0, r3, #0
 8010a7c:	f7f2 fa0a 	bl	8002e94 <__aeabi_f2d>
 8010a80:	4ab4      	ldr	r2, [pc, #720]	; (8010d54 <SP100_AM_MA_Handler+0x33c>)
 8010a82:	4bb5      	ldr	r3, [pc, #724]	; (8010d58 <SP100_AM_MA_Handler+0x340>)
 8010a84:	f7ef fcf2 	bl	800046c <__aeabi_dcmple>
 8010a88:	1e03      	subs	r3, r0, #0
 8010a8a:	d002      	beq.n	8010a92 <SP100_AM_MA_Handler+0x7a>
 8010a8c:	f7ff ff3a 	bl	8010904 <SP100_AM_MA_FWD>
 8010a90:	e28c      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010a92:	4bab      	ldr	r3, [pc, #684]	; (8010d40 <SP100_AM_MA_Handler+0x328>)
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	21fd      	movs	r1, #253	; 0xfd
 8010a98:	0589      	lsls	r1, r1, #22
 8010a9a:	1c18      	adds	r0, r3, #0
 8010a9c:	f7ef fd34 	bl	8000508 <__aeabi_fcmpge>
 8010aa0:	1e03      	subs	r3, r0, #0
 8010aa2:	d002      	beq.n	8010aaa <SP100_AM_MA_Handler+0x92>
 8010aa4:	f7ff ff74 	bl	8010990 <SP100_AM_MA_RVS>
 8010aa8:	e280      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010aaa:	f7ff fef1 	bl	8010890 <SP100_AM_MA_STP>
 8010aae:	e27d      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010ab0:	4ba3      	ldr	r3, [pc, #652]	; (8010d40 <SP100_AM_MA_Handler+0x328>)
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	1c18      	adds	r0, r3, #0
 8010ab6:	f7f2 f9ed 	bl	8002e94 <__aeabi_f2d>
 8010aba:	4aa8      	ldr	r2, [pc, #672]	; (8010d5c <SP100_AM_MA_Handler+0x344>)
 8010abc:	4ba8      	ldr	r3, [pc, #672]	; (8010d60 <SP100_AM_MA_Handler+0x348>)
 8010abe:	f7ef fcd5 	bl	800046c <__aeabi_dcmple>
 8010ac2:	1e03      	subs	r3, r0, #0
 8010ac4:	d002      	beq.n	8010acc <SP100_AM_MA_Handler+0xb4>
 8010ac6:	f7ff ff1d 	bl	8010904 <SP100_AM_MA_FWD>
 8010aca:	e26f      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010acc:	4b9c      	ldr	r3, [pc, #624]	; (8010d40 <SP100_AM_MA_Handler+0x328>)
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	1c18      	adds	r0, r3, #0
 8010ad2:	f7f2 f9df 	bl	8002e94 <__aeabi_f2d>
 8010ad6:	4aa3      	ldr	r2, [pc, #652]	; (8010d64 <SP100_AM_MA_Handler+0x34c>)
 8010ad8:	4ba3      	ldr	r3, [pc, #652]	; (8010d68 <SP100_AM_MA_Handler+0x350>)
 8010ada:	f7ef fcdb 	bl	8000494 <__aeabi_dcmpge>
 8010ade:	1e03      	subs	r3, r0, #0
 8010ae0:	d002      	beq.n	8010ae8 <SP100_AM_MA_Handler+0xd0>
 8010ae2:	f7ff ff55 	bl	8010990 <SP100_AM_MA_RVS>
 8010ae6:	e261      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010ae8:	f7ff fed2 	bl	8010890 <SP100_AM_MA_STP>
 8010aec:	e25e      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010aee:	4b94      	ldr	r3, [pc, #592]	; (8010d40 <SP100_AM_MA_Handler+0x328>)
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	1c18      	adds	r0, r3, #0
 8010af4:	f7f2 f9ce 	bl	8002e94 <__aeabi_f2d>
 8010af8:	4a92      	ldr	r2, [pc, #584]	; (8010d44 <SP100_AM_MA_Handler+0x32c>)
 8010afa:	4b9c      	ldr	r3, [pc, #624]	; (8010d6c <SP100_AM_MA_Handler+0x354>)
 8010afc:	f7ef fcb6 	bl	800046c <__aeabi_dcmple>
 8010b00:	1e03      	subs	r3, r0, #0
 8010b02:	d002      	beq.n	8010b0a <SP100_AM_MA_Handler+0xf2>
 8010b04:	f7ff fefe 	bl	8010904 <SP100_AM_MA_FWD>
 8010b08:	e250      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010b0a:	4b8d      	ldr	r3, [pc, #564]	; (8010d40 <SP100_AM_MA_Handler+0x328>)
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	1c18      	adds	r0, r3, #0
 8010b10:	f7f2 f9c0 	bl	8002e94 <__aeabi_f2d>
 8010b14:	4a93      	ldr	r2, [pc, #588]	; (8010d64 <SP100_AM_MA_Handler+0x34c>)
 8010b16:	4b96      	ldr	r3, [pc, #600]	; (8010d70 <SP100_AM_MA_Handler+0x358>)
 8010b18:	f7ef fcbc 	bl	8000494 <__aeabi_dcmpge>
 8010b1c:	1e03      	subs	r3, r0, #0
 8010b1e:	d002      	beq.n	8010b26 <SP100_AM_MA_Handler+0x10e>
 8010b20:	f7ff ff36 	bl	8010990 <SP100_AM_MA_RVS>
 8010b24:	e242      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010b26:	f7ff feb3 	bl	8010890 <SP100_AM_MA_STP>
 8010b2a:	e23f      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010b2c:	4b84      	ldr	r3, [pc, #528]	; (8010d40 <SP100_AM_MA_Handler+0x328>)
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	4990      	ldr	r1, [pc, #576]	; (8010d74 <SP100_AM_MA_Handler+0x35c>)
 8010b32:	1c18      	adds	r0, r3, #0
 8010b34:	f7ef fcd4 	bl	80004e0 <__aeabi_fcmple>
 8010b38:	1e03      	subs	r3, r0, #0
 8010b3a:	d002      	beq.n	8010b42 <SP100_AM_MA_Handler+0x12a>
 8010b3c:	f7ff fee2 	bl	8010904 <SP100_AM_MA_FWD>
 8010b40:	e234      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010b42:	4b7f      	ldr	r3, [pc, #508]	; (8010d40 <SP100_AM_MA_Handler+0x328>)
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	1c18      	adds	r0, r3, #0
 8010b48:	f7f2 f9a4 	bl	8002e94 <__aeabi_f2d>
 8010b4c:	4a7f      	ldr	r2, [pc, #508]	; (8010d4c <SP100_AM_MA_Handler+0x334>)
 8010b4e:	4b8a      	ldr	r3, [pc, #552]	; (8010d78 <SP100_AM_MA_Handler+0x360>)
 8010b50:	f7ef fca0 	bl	8000494 <__aeabi_dcmpge>
 8010b54:	1e03      	subs	r3, r0, #0
 8010b56:	d002      	beq.n	8010b5e <SP100_AM_MA_Handler+0x146>
 8010b58:	f7ff ff1a 	bl	8010990 <SP100_AM_MA_RVS>
 8010b5c:	e226      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010b5e:	f7ff fe97 	bl	8010890 <SP100_AM_MA_STP>
 8010b62:	e223      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010b64:	4b76      	ldr	r3, [pc, #472]	; (8010d40 <SP100_AM_MA_Handler+0x328>)
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	1c18      	adds	r0, r3, #0
 8010b6a:	f7f2 f993 	bl	8002e94 <__aeabi_f2d>
 8010b6e:	4a7b      	ldr	r2, [pc, #492]	; (8010d5c <SP100_AM_MA_Handler+0x344>)
 8010b70:	4b82      	ldr	r3, [pc, #520]	; (8010d7c <SP100_AM_MA_Handler+0x364>)
 8010b72:	f7ef fc7b 	bl	800046c <__aeabi_dcmple>
 8010b76:	1e03      	subs	r3, r0, #0
 8010b78:	d002      	beq.n	8010b80 <SP100_AM_MA_Handler+0x168>
 8010b7a:	f7ff fec3 	bl	8010904 <SP100_AM_MA_FWD>
 8010b7e:	e215      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010b80:	4b6f      	ldr	r3, [pc, #444]	; (8010d40 <SP100_AM_MA_Handler+0x328>)
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	1c18      	adds	r0, r3, #0
 8010b86:	f7f2 f985 	bl	8002e94 <__aeabi_f2d>
 8010b8a:	4a6e      	ldr	r2, [pc, #440]	; (8010d44 <SP100_AM_MA_Handler+0x32c>)
 8010b8c:	4b7c      	ldr	r3, [pc, #496]	; (8010d80 <SP100_AM_MA_Handler+0x368>)
 8010b8e:	f7ef fc81 	bl	8000494 <__aeabi_dcmpge>
 8010b92:	1e03      	subs	r3, r0, #0
 8010b94:	d002      	beq.n	8010b9c <SP100_AM_MA_Handler+0x184>
 8010b96:	f7ff fefb 	bl	8010990 <SP100_AM_MA_RVS>
 8010b9a:	e207      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010b9c:	f7ff fe78 	bl	8010890 <SP100_AM_MA_STP>
 8010ba0:	e204      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010ba2:	4b67      	ldr	r3, [pc, #412]	; (8010d40 <SP100_AM_MA_Handler+0x328>)
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	1c18      	adds	r0, r3, #0
 8010ba8:	f7f2 f974 	bl	8002e94 <__aeabi_f2d>
 8010bac:	4a75      	ldr	r2, [pc, #468]	; (8010d84 <SP100_AM_MA_Handler+0x36c>)
 8010bae:	4b76      	ldr	r3, [pc, #472]	; (8010d88 <SP100_AM_MA_Handler+0x370>)
 8010bb0:	f7ef fc5c 	bl	800046c <__aeabi_dcmple>
 8010bb4:	1e03      	subs	r3, r0, #0
 8010bb6:	d002      	beq.n	8010bbe <SP100_AM_MA_Handler+0x1a6>
 8010bb8:	f7ff fea4 	bl	8010904 <SP100_AM_MA_FWD>
 8010bbc:	e1f6      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010bbe:	4b60      	ldr	r3, [pc, #384]	; (8010d40 <SP100_AM_MA_Handler+0x328>)
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	4972      	ldr	r1, [pc, #456]	; (8010d8c <SP100_AM_MA_Handler+0x374>)
 8010bc4:	1c18      	adds	r0, r3, #0
 8010bc6:	f7ef fc9f 	bl	8000508 <__aeabi_fcmpge>
 8010bca:	1e03      	subs	r3, r0, #0
 8010bcc:	d002      	beq.n	8010bd4 <SP100_AM_MA_Handler+0x1bc>
 8010bce:	f7ff fedf 	bl	8010990 <SP100_AM_MA_RVS>
 8010bd2:	e1eb      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010bd4:	f7ff fe5c 	bl	8010890 <SP100_AM_MA_STP>
 8010bd8:	e1e8      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010bda:	4b59      	ldr	r3, [pc, #356]	; (8010d40 <SP100_AM_MA_Handler+0x328>)
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	1c18      	adds	r0, r3, #0
 8010be0:	f7f2 f958 	bl	8002e94 <__aeabi_f2d>
 8010be4:	4a6a      	ldr	r2, [pc, #424]	; (8010d90 <SP100_AM_MA_Handler+0x378>)
 8010be6:	4b6b      	ldr	r3, [pc, #428]	; (8010d94 <SP100_AM_MA_Handler+0x37c>)
 8010be8:	f7ef fc40 	bl	800046c <__aeabi_dcmple>
 8010bec:	1e03      	subs	r3, r0, #0
 8010bee:	d002      	beq.n	8010bf6 <SP100_AM_MA_Handler+0x1de>
 8010bf0:	f7ff fe88 	bl	8010904 <SP100_AM_MA_FWD>
 8010bf4:	e1da      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010bf6:	4b52      	ldr	r3, [pc, #328]	; (8010d40 <SP100_AM_MA_Handler+0x328>)
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	1c18      	adds	r0, r3, #0
 8010bfc:	f7f2 f94a 	bl	8002e94 <__aeabi_f2d>
 8010c00:	4a56      	ldr	r2, [pc, #344]	; (8010d5c <SP100_AM_MA_Handler+0x344>)
 8010c02:	4b65      	ldr	r3, [pc, #404]	; (8010d98 <SP100_AM_MA_Handler+0x380>)
 8010c04:	f7ef fc46 	bl	8000494 <__aeabi_dcmpge>
 8010c08:	1e03      	subs	r3, r0, #0
 8010c0a:	d002      	beq.n	8010c12 <SP100_AM_MA_Handler+0x1fa>
 8010c0c:	f7ff fec0 	bl	8010990 <SP100_AM_MA_RVS>
 8010c10:	e1cc      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010c12:	f7ff fe3d 	bl	8010890 <SP100_AM_MA_STP>
 8010c16:	e1c9      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010c18:	4b49      	ldr	r3, [pc, #292]	; (8010d40 <SP100_AM_MA_Handler+0x328>)
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	1c18      	adds	r0, r3, #0
 8010c1e:	f7f2 f939 	bl	8002e94 <__aeabi_f2d>
 8010c22:	4a50      	ldr	r2, [pc, #320]	; (8010d64 <SP100_AM_MA_Handler+0x34c>)
 8010c24:	4b5d      	ldr	r3, [pc, #372]	; (8010d9c <SP100_AM_MA_Handler+0x384>)
 8010c26:	f7ef fc21 	bl	800046c <__aeabi_dcmple>
 8010c2a:	1e03      	subs	r3, r0, #0
 8010c2c:	d002      	beq.n	8010c34 <SP100_AM_MA_Handler+0x21c>
 8010c2e:	f7ff fe69 	bl	8010904 <SP100_AM_MA_FWD>
 8010c32:	e1bb      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010c34:	4b42      	ldr	r3, [pc, #264]	; (8010d40 <SP100_AM_MA_Handler+0x328>)
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	1c18      	adds	r0, r3, #0
 8010c3a:	f7f2 f92b 	bl	8002e94 <__aeabi_f2d>
 8010c3e:	4a47      	ldr	r2, [pc, #284]	; (8010d5c <SP100_AM_MA_Handler+0x344>)
 8010c40:	4b57      	ldr	r3, [pc, #348]	; (8010da0 <SP100_AM_MA_Handler+0x388>)
 8010c42:	f7ef fc27 	bl	8000494 <__aeabi_dcmpge>
 8010c46:	1e03      	subs	r3, r0, #0
 8010c48:	d002      	beq.n	8010c50 <SP100_AM_MA_Handler+0x238>
 8010c4a:	f7ff fea1 	bl	8010990 <SP100_AM_MA_RVS>
 8010c4e:	e1ad      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010c50:	f7ff fe1e 	bl	8010890 <SP100_AM_MA_STP>
 8010c54:	e1aa      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010c56:	4b3a      	ldr	r3, [pc, #232]	; (8010d40 <SP100_AM_MA_Handler+0x328>)
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	4952      	ldr	r1, [pc, #328]	; (8010da4 <SP100_AM_MA_Handler+0x38c>)
 8010c5c:	1c18      	adds	r0, r3, #0
 8010c5e:	f7ef fc3f 	bl	80004e0 <__aeabi_fcmple>
 8010c62:	1e03      	subs	r3, r0, #0
 8010c64:	d002      	beq.n	8010c6c <SP100_AM_MA_Handler+0x254>
 8010c66:	f7ff fe4d 	bl	8010904 <SP100_AM_MA_FWD>
 8010c6a:	e19f      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010c6c:	4b34      	ldr	r3, [pc, #208]	; (8010d40 <SP100_AM_MA_Handler+0x328>)
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	1c18      	adds	r0, r3, #0
 8010c72:	f7f2 f90f 	bl	8002e94 <__aeabi_f2d>
 8010c76:	4a37      	ldr	r2, [pc, #220]	; (8010d54 <SP100_AM_MA_Handler+0x33c>)
 8010c78:	4b4b      	ldr	r3, [pc, #300]	; (8010da8 <SP100_AM_MA_Handler+0x390>)
 8010c7a:	f7ef fc0b 	bl	8000494 <__aeabi_dcmpge>
 8010c7e:	1e03      	subs	r3, r0, #0
 8010c80:	d002      	beq.n	8010c88 <SP100_AM_MA_Handler+0x270>
 8010c82:	f7ff fe85 	bl	8010990 <SP100_AM_MA_RVS>
 8010c86:	e191      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010c88:	f7ff fe02 	bl	8010890 <SP100_AM_MA_STP>
 8010c8c:	e18e      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010c8e:	4b2c      	ldr	r3, [pc, #176]	; (8010d40 <SP100_AM_MA_Handler+0x328>)
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	1c18      	adds	r0, r3, #0
 8010c94:	f7f2 f8fe 	bl	8002e94 <__aeabi_f2d>
 8010c98:	4a2c      	ldr	r2, [pc, #176]	; (8010d4c <SP100_AM_MA_Handler+0x334>)
 8010c9a:	4b44      	ldr	r3, [pc, #272]	; (8010dac <SP100_AM_MA_Handler+0x394>)
 8010c9c:	f7ef fbe6 	bl	800046c <__aeabi_dcmple>
 8010ca0:	1e03      	subs	r3, r0, #0
 8010ca2:	d002      	beq.n	8010caa <SP100_AM_MA_Handler+0x292>
 8010ca4:	f7ff fe2e 	bl	8010904 <SP100_AM_MA_FWD>
 8010ca8:	e180      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010caa:	4b25      	ldr	r3, [pc, #148]	; (8010d40 <SP100_AM_MA_Handler+0x328>)
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	1c18      	adds	r0, r3, #0
 8010cb0:	f7f2 f8f0 	bl	8002e94 <__aeabi_f2d>
 8010cb4:	4a33      	ldr	r2, [pc, #204]	; (8010d84 <SP100_AM_MA_Handler+0x36c>)
 8010cb6:	4b3e      	ldr	r3, [pc, #248]	; (8010db0 <SP100_AM_MA_Handler+0x398>)
 8010cb8:	f7ef fbec 	bl	8000494 <__aeabi_dcmpge>
 8010cbc:	1e03      	subs	r3, r0, #0
 8010cbe:	d002      	beq.n	8010cc6 <SP100_AM_MA_Handler+0x2ae>
 8010cc0:	f7ff fe66 	bl	8010990 <SP100_AM_MA_RVS>
 8010cc4:	e172      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010cc6:	f7ff fde3 	bl	8010890 <SP100_AM_MA_STP>
 8010cca:	e16f      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010ccc:	4b1c      	ldr	r3, [pc, #112]	; (8010d40 <SP100_AM_MA_Handler+0x328>)
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	1c18      	adds	r0, r3, #0
 8010cd2:	f7f2 f8df 	bl	8002e94 <__aeabi_f2d>
 8010cd6:	4a37      	ldr	r2, [pc, #220]	; (8010db4 <SP100_AM_MA_Handler+0x39c>)
 8010cd8:	4b37      	ldr	r3, [pc, #220]	; (8010db8 <SP100_AM_MA_Handler+0x3a0>)
 8010cda:	f7ef fbc7 	bl	800046c <__aeabi_dcmple>
 8010cde:	1e03      	subs	r3, r0, #0
 8010ce0:	d002      	beq.n	8010ce8 <SP100_AM_MA_Handler+0x2d0>
 8010ce2:	f7ff fe0f 	bl	8010904 <SP100_AM_MA_FWD>
 8010ce6:	e161      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010ce8:	4b15      	ldr	r3, [pc, #84]	; (8010d40 <SP100_AM_MA_Handler+0x328>)
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	4933      	ldr	r1, [pc, #204]	; (8010dbc <SP100_AM_MA_Handler+0x3a4>)
 8010cee:	1c18      	adds	r0, r3, #0
 8010cf0:	f7ef fc0a 	bl	8000508 <__aeabi_fcmpge>
 8010cf4:	1e03      	subs	r3, r0, #0
 8010cf6:	d002      	beq.n	8010cfe <SP100_AM_MA_Handler+0x2e6>
 8010cf8:	f7ff fe4a 	bl	8010990 <SP100_AM_MA_RVS>
 8010cfc:	e156      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010cfe:	f7ff fdc7 	bl	8010890 <SP100_AM_MA_STP>
 8010d02:	e153      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010d04:	4b0e      	ldr	r3, [pc, #56]	; (8010d40 <SP100_AM_MA_Handler+0x328>)
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	1c18      	adds	r0, r3, #0
 8010d0a:	f7f2 f8c3 	bl	8002e94 <__aeabi_f2d>
 8010d0e:	4a0d      	ldr	r2, [pc, #52]	; (8010d44 <SP100_AM_MA_Handler+0x32c>)
 8010d10:	4b2b      	ldr	r3, [pc, #172]	; (8010dc0 <SP100_AM_MA_Handler+0x3a8>)
 8010d12:	f7ef fbab 	bl	800046c <__aeabi_dcmple>
 8010d16:	1e03      	subs	r3, r0, #0
 8010d18:	d002      	beq.n	8010d20 <SP100_AM_MA_Handler+0x308>
 8010d1a:	f7ff fdf3 	bl	8010904 <SP100_AM_MA_FWD>
 8010d1e:	e145      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010d20:	4b07      	ldr	r3, [pc, #28]	; (8010d40 <SP100_AM_MA_Handler+0x328>)
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	1c18      	adds	r0, r3, #0
 8010d26:	f7f2 f8b5 	bl	8002e94 <__aeabi_f2d>
 8010d2a:	4a19      	ldr	r2, [pc, #100]	; (8010d90 <SP100_AM_MA_Handler+0x378>)
 8010d2c:	4b25      	ldr	r3, [pc, #148]	; (8010dc4 <SP100_AM_MA_Handler+0x3ac>)
 8010d2e:	f7ef fbb1 	bl	8000494 <__aeabi_dcmpge>
 8010d32:	1e03      	subs	r3, r0, #0
 8010d34:	d048      	beq.n	8010dc8 <SP100_AM_MA_Handler+0x3b0>
 8010d36:	f7ff fe2b 	bl	8010990 <SP100_AM_MA_RVS>
 8010d3a:	e137      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010d3c:	08015224 	.word	0x08015224
 8010d40:	20000598 	.word	0x20000598
 8010d44:	cccccccd 	.word	0xcccccccd
 8010d48:	3fdccccc 	.word	0x3fdccccc
 8010d4c:	9999999a 	.word	0x9999999a
 8010d50:	3fe19999 	.word	0x3fe19999
 8010d54:	cccccccc 	.word	0xcccccccc
 8010d58:	3fe4cccc 	.word	0x3fe4cccc
 8010d5c:	33333333 	.word	0x33333333
 8010d60:	3feb3333 	.word	0x3feb3333
 8010d64:	66666667 	.word	0x66666667
 8010d68:	3fee6666 	.word	0x3fee6666
 8010d6c:	3ff0cccc 	.word	0x3ff0cccc
 8010d70:	3ff26666 	.word	0x3ff26666
 8010d74:	3fa00000 	.word	0x3fa00000
 8010d78:	3ff59999 	.word	0x3ff59999
 8010d7c:	3ff73333 	.word	0x3ff73333
 8010d80:	3ff8cccc 	.word	0x3ff8cccc
 8010d84:	66666666 	.word	0x66666666
 8010d88:	3ffa6666 	.word	0x3ffa6666
 8010d8c:	3fe00000 	.word	0x3fe00000
 8010d90:	99999999 	.word	0x99999999
 8010d94:	3ffd9999 	.word	0x3ffd9999
 8010d98:	3fff3333 	.word	0x3fff3333
 8010d9c:	40006666 	.word	0x40006666
 8010da0:	40013333 	.word	0x40013333
 8010da4:	40100000 	.word	0x40100000
 8010da8:	4002cccc 	.word	0x4002cccc
 8010dac:	40039999 	.word	0x40039999
 8010db0:	40046666 	.word	0x40046666
 8010db4:	33333334 	.word	0x33333334
 8010db8:	40053333 	.word	0x40053333
 8010dbc:	40300000 	.word	0x40300000
 8010dc0:	4006cccc 	.word	0x4006cccc
 8010dc4:	40079999 	.word	0x40079999
 8010dc8:	f7ff fd62 	bl	8010890 <SP100_AM_MA_STP>
 8010dcc:	e0ee      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010dce:	4b79      	ldr	r3, [pc, #484]	; (8010fb4 <SP100_AM_MA_Handler+0x59c>)
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	1c18      	adds	r0, r3, #0
 8010dd4:	f7f2 f85e 	bl	8002e94 <__aeabi_f2d>
 8010dd8:	4a77      	ldr	r2, [pc, #476]	; (8010fb8 <SP100_AM_MA_Handler+0x5a0>)
 8010dda:	4b78      	ldr	r3, [pc, #480]	; (8010fbc <SP100_AM_MA_Handler+0x5a4>)
 8010ddc:	f7ef fb46 	bl	800046c <__aeabi_dcmple>
 8010de0:	1e03      	subs	r3, r0, #0
 8010de2:	d002      	beq.n	8010dea <SP100_AM_MA_Handler+0x3d2>
 8010de4:	f7ff fd8e 	bl	8010904 <SP100_AM_MA_FWD>
 8010de8:	e0e0      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010dea:	4b72      	ldr	r3, [pc, #456]	; (8010fb4 <SP100_AM_MA_Handler+0x59c>)
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	1c18      	adds	r0, r3, #0
 8010df0:	f7f2 f850 	bl	8002e94 <__aeabi_f2d>
 8010df4:	4a72      	ldr	r2, [pc, #456]	; (8010fc0 <SP100_AM_MA_Handler+0x5a8>)
 8010df6:	4b73      	ldr	r3, [pc, #460]	; (8010fc4 <SP100_AM_MA_Handler+0x5ac>)
 8010df8:	f7ef fb4c 	bl	8000494 <__aeabi_dcmpge>
 8010dfc:	1e03      	subs	r3, r0, #0
 8010dfe:	d002      	beq.n	8010e06 <SP100_AM_MA_Handler+0x3ee>
 8010e00:	f7ff fdc6 	bl	8010990 <SP100_AM_MA_RVS>
 8010e04:	e0d2      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010e06:	f7ff fd43 	bl	8010890 <SP100_AM_MA_STP>
 8010e0a:	e0cf      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010e0c:	4b69      	ldr	r3, [pc, #420]	; (8010fb4 <SP100_AM_MA_Handler+0x59c>)
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	496d      	ldr	r1, [pc, #436]	; (8010fc8 <SP100_AM_MA_Handler+0x5b0>)
 8010e12:	1c18      	adds	r0, r3, #0
 8010e14:	f7ef fb64 	bl	80004e0 <__aeabi_fcmple>
 8010e18:	1e03      	subs	r3, r0, #0
 8010e1a:	d002      	beq.n	8010e22 <SP100_AM_MA_Handler+0x40a>
 8010e1c:	f7ff fd72 	bl	8010904 <SP100_AM_MA_FWD>
 8010e20:	e0c4      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010e22:	4b64      	ldr	r3, [pc, #400]	; (8010fb4 <SP100_AM_MA_Handler+0x59c>)
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	1c18      	adds	r0, r3, #0
 8010e28:	f7f2 f834 	bl	8002e94 <__aeabi_f2d>
 8010e2c:	4a67      	ldr	r2, [pc, #412]	; (8010fcc <SP100_AM_MA_Handler+0x5b4>)
 8010e2e:	4b68      	ldr	r3, [pc, #416]	; (8010fd0 <SP100_AM_MA_Handler+0x5b8>)
 8010e30:	f7ef fb30 	bl	8000494 <__aeabi_dcmpge>
 8010e34:	1e03      	subs	r3, r0, #0
 8010e36:	d002      	beq.n	8010e3e <SP100_AM_MA_Handler+0x426>
 8010e38:	f7ff fdaa 	bl	8010990 <SP100_AM_MA_RVS>
 8010e3c:	e0b6      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010e3e:	f7ff fd27 	bl	8010890 <SP100_AM_MA_STP>
 8010e42:	e0b3      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010e44:	4b5b      	ldr	r3, [pc, #364]	; (8010fb4 <SP100_AM_MA_Handler+0x59c>)
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	1c18      	adds	r0, r3, #0
 8010e4a:	f7f2 f823 	bl	8002e94 <__aeabi_f2d>
 8010e4e:	4a61      	ldr	r2, [pc, #388]	; (8010fd4 <SP100_AM_MA_Handler+0x5bc>)
 8010e50:	4b61      	ldr	r3, [pc, #388]	; (8010fd8 <SP100_AM_MA_Handler+0x5c0>)
 8010e52:	f7ef fb0b 	bl	800046c <__aeabi_dcmple>
 8010e56:	1e03      	subs	r3, r0, #0
 8010e58:	d002      	beq.n	8010e60 <SP100_AM_MA_Handler+0x448>
 8010e5a:	f7ff fd53 	bl	8010904 <SP100_AM_MA_FWD>
 8010e5e:	e0a5      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010e60:	4b54      	ldr	r3, [pc, #336]	; (8010fb4 <SP100_AM_MA_Handler+0x59c>)
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	1c18      	adds	r0, r3, #0
 8010e66:	f7f2 f815 	bl	8002e94 <__aeabi_f2d>
 8010e6a:	4a5c      	ldr	r2, [pc, #368]	; (8010fdc <SP100_AM_MA_Handler+0x5c4>)
 8010e6c:	4b5c      	ldr	r3, [pc, #368]	; (8010fe0 <SP100_AM_MA_Handler+0x5c8>)
 8010e6e:	f7ef fb11 	bl	8000494 <__aeabi_dcmpge>
 8010e72:	1e03      	subs	r3, r0, #0
 8010e74:	d002      	beq.n	8010e7c <SP100_AM_MA_Handler+0x464>
 8010e76:	f7ff fd8b 	bl	8010990 <SP100_AM_MA_RVS>
 8010e7a:	e097      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010e7c:	f7ff fd08 	bl	8010890 <SP100_AM_MA_STP>
 8010e80:	e094      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010e82:	4b4c      	ldr	r3, [pc, #304]	; (8010fb4 <SP100_AM_MA_Handler+0x59c>)
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	1c18      	adds	r0, r3, #0
 8010e88:	f7f2 f804 	bl	8002e94 <__aeabi_f2d>
 8010e8c:	4a55      	ldr	r2, [pc, #340]	; (8010fe4 <SP100_AM_MA_Handler+0x5cc>)
 8010e8e:	4b56      	ldr	r3, [pc, #344]	; (8010fe8 <SP100_AM_MA_Handler+0x5d0>)
 8010e90:	f7ef faec 	bl	800046c <__aeabi_dcmple>
 8010e94:	1e03      	subs	r3, r0, #0
 8010e96:	d002      	beq.n	8010e9e <SP100_AM_MA_Handler+0x486>
 8010e98:	f7ff fd34 	bl	8010904 <SP100_AM_MA_FWD>
 8010e9c:	e086      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010e9e:	4b45      	ldr	r3, [pc, #276]	; (8010fb4 <SP100_AM_MA_Handler+0x59c>)
 8010ea0:	681b      	ldr	r3, [r3, #0]
 8010ea2:	4952      	ldr	r1, [pc, #328]	; (8010fec <SP100_AM_MA_Handler+0x5d4>)
 8010ea4:	1c18      	adds	r0, r3, #0
 8010ea6:	f7ef fb2f 	bl	8000508 <__aeabi_fcmpge>
 8010eaa:	1e03      	subs	r3, r0, #0
 8010eac:	d002      	beq.n	8010eb4 <SP100_AM_MA_Handler+0x49c>
 8010eae:	f7ff fd6f 	bl	8010990 <SP100_AM_MA_RVS>
 8010eb2:	e07b      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010eb4:	f7ff fcec 	bl	8010890 <SP100_AM_MA_STP>
 8010eb8:	e078      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010eba:	4b3e      	ldr	r3, [pc, #248]	; (8010fb4 <SP100_AM_MA_Handler+0x59c>)
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	1c18      	adds	r0, r3, #0
 8010ec0:	f7f1 ffe8 	bl	8002e94 <__aeabi_f2d>
 8010ec4:	4a4a      	ldr	r2, [pc, #296]	; (8010ff0 <SP100_AM_MA_Handler+0x5d8>)
 8010ec6:	4b4b      	ldr	r3, [pc, #300]	; (8010ff4 <SP100_AM_MA_Handler+0x5dc>)
 8010ec8:	f7ef fad0 	bl	800046c <__aeabi_dcmple>
 8010ecc:	1e03      	subs	r3, r0, #0
 8010ece:	d002      	beq.n	8010ed6 <SP100_AM_MA_Handler+0x4be>
 8010ed0:	f7ff fd18 	bl	8010904 <SP100_AM_MA_FWD>
 8010ed4:	e06a      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010ed6:	4b37      	ldr	r3, [pc, #220]	; (8010fb4 <SP100_AM_MA_Handler+0x59c>)
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	1c18      	adds	r0, r3, #0
 8010edc:	f7f1 ffda 	bl	8002e94 <__aeabi_f2d>
 8010ee0:	4a45      	ldr	r2, [pc, #276]	; (8010ff8 <SP100_AM_MA_Handler+0x5e0>)
 8010ee2:	4b46      	ldr	r3, [pc, #280]	; (8010ffc <SP100_AM_MA_Handler+0x5e4>)
 8010ee4:	f7ef fad6 	bl	8000494 <__aeabi_dcmpge>
 8010ee8:	1e03      	subs	r3, r0, #0
 8010eea:	d002      	beq.n	8010ef2 <SP100_AM_MA_Handler+0x4da>
 8010eec:	f7ff fd50 	bl	8010990 <SP100_AM_MA_RVS>
 8010ef0:	e05c      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010ef2:	f7ff fccd 	bl	8010890 <SP100_AM_MA_STP>
 8010ef6:	e059      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010ef8:	4b2e      	ldr	r3, [pc, #184]	; (8010fb4 <SP100_AM_MA_Handler+0x59c>)
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	1c18      	adds	r0, r3, #0
 8010efe:	f7f1 ffc9 	bl	8002e94 <__aeabi_f2d>
 8010f02:	4a2f      	ldr	r2, [pc, #188]	; (8010fc0 <SP100_AM_MA_Handler+0x5a8>)
 8010f04:	4b3e      	ldr	r3, [pc, #248]	; (8011000 <SP100_AM_MA_Handler+0x5e8>)
 8010f06:	f7ef fab1 	bl	800046c <__aeabi_dcmple>
 8010f0a:	1e03      	subs	r3, r0, #0
 8010f0c:	d002      	beq.n	8010f14 <SP100_AM_MA_Handler+0x4fc>
 8010f0e:	f7ff fcf9 	bl	8010904 <SP100_AM_MA_FWD>
 8010f12:	e04b      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010f14:	4b27      	ldr	r3, [pc, #156]	; (8010fb4 <SP100_AM_MA_Handler+0x59c>)
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	1c18      	adds	r0, r3, #0
 8010f1a:	f7f1 ffbb 	bl	8002e94 <__aeabi_f2d>
 8010f1e:	4a36      	ldr	r2, [pc, #216]	; (8010ff8 <SP100_AM_MA_Handler+0x5e0>)
 8010f20:	4b38      	ldr	r3, [pc, #224]	; (8011004 <SP100_AM_MA_Handler+0x5ec>)
 8010f22:	f7ef fab7 	bl	8000494 <__aeabi_dcmpge>
 8010f26:	1e03      	subs	r3, r0, #0
 8010f28:	d002      	beq.n	8010f30 <SP100_AM_MA_Handler+0x518>
 8010f2a:	f7ff fd31 	bl	8010990 <SP100_AM_MA_RVS>
 8010f2e:	e03d      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010f30:	f7ff fcae 	bl	8010890 <SP100_AM_MA_STP>
 8010f34:	e03a      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010f36:	4b1f      	ldr	r3, [pc, #124]	; (8010fb4 <SP100_AM_MA_Handler+0x59c>)
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	4933      	ldr	r1, [pc, #204]	; (8011008 <SP100_AM_MA_Handler+0x5f0>)
 8010f3c:	1c18      	adds	r0, r3, #0
 8010f3e:	f7ef facf 	bl	80004e0 <__aeabi_fcmple>
 8010f42:	1e03      	subs	r3, r0, #0
 8010f44:	d002      	beq.n	8010f4c <SP100_AM_MA_Handler+0x534>
 8010f46:	f7ff fcdd 	bl	8010904 <SP100_AM_MA_FWD>
 8010f4a:	e02f      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010f4c:	4b19      	ldr	r3, [pc, #100]	; (8010fb4 <SP100_AM_MA_Handler+0x59c>)
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	1c18      	adds	r0, r3, #0
 8010f52:	f7f1 ff9f 	bl	8002e94 <__aeabi_f2d>
 8010f56:	4a21      	ldr	r2, [pc, #132]	; (8010fdc <SP100_AM_MA_Handler+0x5c4>)
 8010f58:	4b2c      	ldr	r3, [pc, #176]	; (801100c <SP100_AM_MA_Handler+0x5f4>)
 8010f5a:	f7ef fa9b 	bl	8000494 <__aeabi_dcmpge>
 8010f5e:	1e03      	subs	r3, r0, #0
 8010f60:	d002      	beq.n	8010f68 <SP100_AM_MA_Handler+0x550>
 8010f62:	f7ff fd15 	bl	8010990 <SP100_AM_MA_RVS>
 8010f66:	e021      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010f68:	f7ff fc92 	bl	8010890 <SP100_AM_MA_STP>
 8010f6c:	e01e      	b.n	8010fac <SP100_AM_MA_Handler+0x594>
 8010f6e:	4b11      	ldr	r3, [pc, #68]	; (8010fb4 <SP100_AM_MA_Handler+0x59c>)
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	1c18      	adds	r0, r3, #0
 8010f74:	f7f1 ff8e 	bl	8002e94 <__aeabi_f2d>
 8010f78:	4a1d      	ldr	r2, [pc, #116]	; (8010ff0 <SP100_AM_MA_Handler+0x5d8>)
 8010f7a:	4b25      	ldr	r3, [pc, #148]	; (8011010 <SP100_AM_MA_Handler+0x5f8>)
 8010f7c:	f7ef fa76 	bl	800046c <__aeabi_dcmple>
 8010f80:	1e03      	subs	r3, r0, #0
 8010f82:	d002      	beq.n	8010f8a <SP100_AM_MA_Handler+0x572>
 8010f84:	f7ff fcbe 	bl	8010904 <SP100_AM_MA_FWD>
 8010f88:	e00f      	b.n	8010faa <SP100_AM_MA_Handler+0x592>
 8010f8a:	4b0a      	ldr	r3, [pc, #40]	; (8010fb4 <SP100_AM_MA_Handler+0x59c>)
 8010f8c:	681b      	ldr	r3, [r3, #0]
 8010f8e:	1c18      	adds	r0, r3, #0
 8010f90:	f7f1 ff80 	bl	8002e94 <__aeabi_f2d>
 8010f94:	4a0a      	ldr	r2, [pc, #40]	; (8010fc0 <SP100_AM_MA_Handler+0x5a8>)
 8010f96:	4b1f      	ldr	r3, [pc, #124]	; (8011014 <SP100_AM_MA_Handler+0x5fc>)
 8010f98:	f7ef fa7c 	bl	8000494 <__aeabi_dcmpge>
 8010f9c:	1e03      	subs	r3, r0, #0
 8010f9e:	d002      	beq.n	8010fa6 <SP100_AM_MA_Handler+0x58e>
 8010fa0:	f7ff fcf6 	bl	8010990 <SP100_AM_MA_RVS>
 8010fa4:	e001      	b.n	8010faa <SP100_AM_MA_Handler+0x592>
 8010fa6:	f7ff fc73 	bl	8010890 <SP100_AM_MA_STP>
 8010faa:	46c0      	nop			; (mov r8, r8)
 8010fac:	46c0      	nop			; (mov r8, r8)
 8010fae:	46bd      	mov	sp, r7
 8010fb0:	b002      	add	sp, #8
 8010fb2:	bd80      	pop	{r7, pc}
 8010fb4:	20000598 	.word	0x20000598
 8010fb8:	66666667 	.word	0x66666667
 8010fbc:	40086666 	.word	0x40086666
 8010fc0:	33333333 	.word	0x33333333
 8010fc4:	40093333 	.word	0x40093333
 8010fc8:	40500000 	.word	0x40500000
 8010fcc:	cccccccc 	.word	0xcccccccc
 8010fd0:	400acccc 	.word	0x400acccc
 8010fd4:	9999999a 	.word	0x9999999a
 8010fd8:	400b9999 	.word	0x400b9999
 8010fdc:	66666666 	.word	0x66666666
 8010fe0:	400c6666 	.word	0x400c6666
 8010fe4:	33333334 	.word	0x33333334
 8010fe8:	400d3333 	.word	0x400d3333
 8010fec:	40700000 	.word	0x40700000
 8010ff0:	cccccccd 	.word	0xcccccccd
 8010ff4:	400ecccc 	.word	0x400ecccc
 8010ff8:	99999999 	.word	0x99999999
 8010ffc:	400f9999 	.word	0x400f9999
 8011000:	40103333 	.word	0x40103333
 8011004:	40109999 	.word	0x40109999
 8011008:	40880000 	.word	0x40880000
 801100c:	40116666 	.word	0x40116666
 8011010:	4011cccc 	.word	0x4011cccc
 8011014:	40123333 	.word	0x40123333

08011018 <__errno>:
 8011018:	4b01      	ldr	r3, [pc, #4]	; (8011020 <__errno+0x8>)
 801101a:	6818      	ldr	r0, [r3, #0]
 801101c:	4770      	bx	lr
 801101e:	46c0      	nop			; (mov r8, r8)
 8011020:	2000003c 	.word	0x2000003c

08011024 <__libc_init_array>:
 8011024:	b570      	push	{r4, r5, r6, lr}
 8011026:	2600      	movs	r6, #0
 8011028:	4d0c      	ldr	r5, [pc, #48]	; (801105c <__libc_init_array+0x38>)
 801102a:	4c0d      	ldr	r4, [pc, #52]	; (8011060 <__libc_init_array+0x3c>)
 801102c:	1b64      	subs	r4, r4, r5
 801102e:	10a4      	asrs	r4, r4, #2
 8011030:	42a6      	cmp	r6, r4
 8011032:	d109      	bne.n	8011048 <__libc_init_array+0x24>
 8011034:	2600      	movs	r6, #0
 8011036:	f003 fe43 	bl	8014cc0 <_init>
 801103a:	4d0a      	ldr	r5, [pc, #40]	; (8011064 <__libc_init_array+0x40>)
 801103c:	4c0a      	ldr	r4, [pc, #40]	; (8011068 <__libc_init_array+0x44>)
 801103e:	1b64      	subs	r4, r4, r5
 8011040:	10a4      	asrs	r4, r4, #2
 8011042:	42a6      	cmp	r6, r4
 8011044:	d105      	bne.n	8011052 <__libc_init_array+0x2e>
 8011046:	bd70      	pop	{r4, r5, r6, pc}
 8011048:	00b3      	lsls	r3, r6, #2
 801104a:	58eb      	ldr	r3, [r5, r3]
 801104c:	4798      	blx	r3
 801104e:	3601      	adds	r6, #1
 8011050:	e7ee      	b.n	8011030 <__libc_init_array+0xc>
 8011052:	00b3      	lsls	r3, r6, #2
 8011054:	58eb      	ldr	r3, [r5, r3]
 8011056:	4798      	blx	r3
 8011058:	3601      	adds	r6, #1
 801105a:	e7f2      	b.n	8011042 <__libc_init_array+0x1e>
 801105c:	0801566c 	.word	0x0801566c
 8011060:	0801566c 	.word	0x0801566c
 8011064:	0801566c 	.word	0x0801566c
 8011068:	08015670 	.word	0x08015670

0801106c <memset>:
 801106c:	0003      	movs	r3, r0
 801106e:	1882      	adds	r2, r0, r2
 8011070:	4293      	cmp	r3, r2
 8011072:	d100      	bne.n	8011076 <memset+0xa>
 8011074:	4770      	bx	lr
 8011076:	7019      	strb	r1, [r3, #0]
 8011078:	3301      	adds	r3, #1
 801107a:	e7f9      	b.n	8011070 <memset+0x4>

0801107c <__cvt>:
 801107c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801107e:	001e      	movs	r6, r3
 8011080:	2300      	movs	r3, #0
 8011082:	0014      	movs	r4, r2
 8011084:	b08b      	sub	sp, #44	; 0x2c
 8011086:	429e      	cmp	r6, r3
 8011088:	da04      	bge.n	8011094 <__cvt+0x18>
 801108a:	2180      	movs	r1, #128	; 0x80
 801108c:	0609      	lsls	r1, r1, #24
 801108e:	1873      	adds	r3, r6, r1
 8011090:	001e      	movs	r6, r3
 8011092:	232d      	movs	r3, #45	; 0x2d
 8011094:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011096:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8011098:	7013      	strb	r3, [r2, #0]
 801109a:	2320      	movs	r3, #32
 801109c:	2203      	movs	r2, #3
 801109e:	439f      	bics	r7, r3
 80110a0:	2f46      	cmp	r7, #70	; 0x46
 80110a2:	d007      	beq.n	80110b4 <__cvt+0x38>
 80110a4:	003b      	movs	r3, r7
 80110a6:	3b45      	subs	r3, #69	; 0x45
 80110a8:	4259      	negs	r1, r3
 80110aa:	414b      	adcs	r3, r1
 80110ac:	9910      	ldr	r1, [sp, #64]	; 0x40
 80110ae:	3a01      	subs	r2, #1
 80110b0:	18cb      	adds	r3, r1, r3
 80110b2:	9310      	str	r3, [sp, #64]	; 0x40
 80110b4:	ab09      	add	r3, sp, #36	; 0x24
 80110b6:	9304      	str	r3, [sp, #16]
 80110b8:	ab08      	add	r3, sp, #32
 80110ba:	9303      	str	r3, [sp, #12]
 80110bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80110be:	9200      	str	r2, [sp, #0]
 80110c0:	9302      	str	r3, [sp, #8]
 80110c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80110c4:	0022      	movs	r2, r4
 80110c6:	9301      	str	r3, [sp, #4]
 80110c8:	0033      	movs	r3, r6
 80110ca:	f000 fcfd 	bl	8011ac8 <_dtoa_r>
 80110ce:	0005      	movs	r5, r0
 80110d0:	2f47      	cmp	r7, #71	; 0x47
 80110d2:	d102      	bne.n	80110da <__cvt+0x5e>
 80110d4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80110d6:	07db      	lsls	r3, r3, #31
 80110d8:	d528      	bpl.n	801112c <__cvt+0xb0>
 80110da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80110dc:	18eb      	adds	r3, r5, r3
 80110de:	9307      	str	r3, [sp, #28]
 80110e0:	2f46      	cmp	r7, #70	; 0x46
 80110e2:	d114      	bne.n	801110e <__cvt+0x92>
 80110e4:	782b      	ldrb	r3, [r5, #0]
 80110e6:	2b30      	cmp	r3, #48	; 0x30
 80110e8:	d10c      	bne.n	8011104 <__cvt+0x88>
 80110ea:	2200      	movs	r2, #0
 80110ec:	2300      	movs	r3, #0
 80110ee:	0020      	movs	r0, r4
 80110f0:	0031      	movs	r1, r6
 80110f2:	f7ef f9ab 	bl	800044c <__aeabi_dcmpeq>
 80110f6:	2800      	cmp	r0, #0
 80110f8:	d104      	bne.n	8011104 <__cvt+0x88>
 80110fa:	2301      	movs	r3, #1
 80110fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80110fe:	1a9b      	subs	r3, r3, r2
 8011100:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011102:	6013      	str	r3, [r2, #0]
 8011104:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011106:	9a07      	ldr	r2, [sp, #28]
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	18d3      	adds	r3, r2, r3
 801110c:	9307      	str	r3, [sp, #28]
 801110e:	2200      	movs	r2, #0
 8011110:	2300      	movs	r3, #0
 8011112:	0020      	movs	r0, r4
 8011114:	0031      	movs	r1, r6
 8011116:	f7ef f999 	bl	800044c <__aeabi_dcmpeq>
 801111a:	2800      	cmp	r0, #0
 801111c:	d001      	beq.n	8011122 <__cvt+0xa6>
 801111e:	9b07      	ldr	r3, [sp, #28]
 8011120:	9309      	str	r3, [sp, #36]	; 0x24
 8011122:	2230      	movs	r2, #48	; 0x30
 8011124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011126:	9907      	ldr	r1, [sp, #28]
 8011128:	428b      	cmp	r3, r1
 801112a:	d306      	bcc.n	801113a <__cvt+0xbe>
 801112c:	0028      	movs	r0, r5
 801112e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011130:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011132:	1b5b      	subs	r3, r3, r5
 8011134:	6013      	str	r3, [r2, #0]
 8011136:	b00b      	add	sp, #44	; 0x2c
 8011138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801113a:	1c59      	adds	r1, r3, #1
 801113c:	9109      	str	r1, [sp, #36]	; 0x24
 801113e:	701a      	strb	r2, [r3, #0]
 8011140:	e7f0      	b.n	8011124 <__cvt+0xa8>

08011142 <__exponent>:
 8011142:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011144:	1c83      	adds	r3, r0, #2
 8011146:	b087      	sub	sp, #28
 8011148:	9303      	str	r3, [sp, #12]
 801114a:	0005      	movs	r5, r0
 801114c:	000c      	movs	r4, r1
 801114e:	232b      	movs	r3, #43	; 0x2b
 8011150:	7002      	strb	r2, [r0, #0]
 8011152:	2900      	cmp	r1, #0
 8011154:	da01      	bge.n	801115a <__exponent+0x18>
 8011156:	424c      	negs	r4, r1
 8011158:	3302      	adds	r3, #2
 801115a:	706b      	strb	r3, [r5, #1]
 801115c:	2c09      	cmp	r4, #9
 801115e:	dd31      	ble.n	80111c4 <__exponent+0x82>
 8011160:	270a      	movs	r7, #10
 8011162:	ab04      	add	r3, sp, #16
 8011164:	1dde      	adds	r6, r3, #7
 8011166:	0020      	movs	r0, r4
 8011168:	0039      	movs	r1, r7
 801116a:	9601      	str	r6, [sp, #4]
 801116c:	f7ef f958 	bl	8000420 <__aeabi_idivmod>
 8011170:	3e01      	subs	r6, #1
 8011172:	3130      	adds	r1, #48	; 0x30
 8011174:	0020      	movs	r0, r4
 8011176:	7031      	strb	r1, [r6, #0]
 8011178:	0039      	movs	r1, r7
 801117a:	9402      	str	r4, [sp, #8]
 801117c:	f7ef f86a 	bl	8000254 <__divsi3>
 8011180:	9b02      	ldr	r3, [sp, #8]
 8011182:	0004      	movs	r4, r0
 8011184:	2b63      	cmp	r3, #99	; 0x63
 8011186:	dcee      	bgt.n	8011166 <__exponent+0x24>
 8011188:	9b01      	ldr	r3, [sp, #4]
 801118a:	3430      	adds	r4, #48	; 0x30
 801118c:	1e9a      	subs	r2, r3, #2
 801118e:	0013      	movs	r3, r2
 8011190:	9903      	ldr	r1, [sp, #12]
 8011192:	7014      	strb	r4, [r2, #0]
 8011194:	a804      	add	r0, sp, #16
 8011196:	3007      	adds	r0, #7
 8011198:	4298      	cmp	r0, r3
 801119a:	d80e      	bhi.n	80111ba <__exponent+0x78>
 801119c:	ab04      	add	r3, sp, #16
 801119e:	3307      	adds	r3, #7
 80111a0:	2000      	movs	r0, #0
 80111a2:	429a      	cmp	r2, r3
 80111a4:	d804      	bhi.n	80111b0 <__exponent+0x6e>
 80111a6:	ab04      	add	r3, sp, #16
 80111a8:	3009      	adds	r0, #9
 80111aa:	18c0      	adds	r0, r0, r3
 80111ac:	9b01      	ldr	r3, [sp, #4]
 80111ae:	1ac0      	subs	r0, r0, r3
 80111b0:	9b03      	ldr	r3, [sp, #12]
 80111b2:	1818      	adds	r0, r3, r0
 80111b4:	1b40      	subs	r0, r0, r5
 80111b6:	b007      	add	sp, #28
 80111b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80111ba:	7818      	ldrb	r0, [r3, #0]
 80111bc:	3301      	adds	r3, #1
 80111be:	7008      	strb	r0, [r1, #0]
 80111c0:	3101      	adds	r1, #1
 80111c2:	e7e7      	b.n	8011194 <__exponent+0x52>
 80111c4:	2330      	movs	r3, #48	; 0x30
 80111c6:	18e4      	adds	r4, r4, r3
 80111c8:	70ab      	strb	r3, [r5, #2]
 80111ca:	1d28      	adds	r0, r5, #4
 80111cc:	70ec      	strb	r4, [r5, #3]
 80111ce:	e7f1      	b.n	80111b4 <__exponent+0x72>

080111d0 <_printf_float>:
 80111d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80111d2:	b095      	sub	sp, #84	; 0x54
 80111d4:	000c      	movs	r4, r1
 80111d6:	9209      	str	r2, [sp, #36]	; 0x24
 80111d8:	001e      	movs	r6, r3
 80111da:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80111dc:	0007      	movs	r7, r0
 80111de:	f001 fa8d 	bl	80126fc <_localeconv_r>
 80111e2:	6803      	ldr	r3, [r0, #0]
 80111e4:	0018      	movs	r0, r3
 80111e6:	930c      	str	r3, [sp, #48]	; 0x30
 80111e8:	f7ee ff8e 	bl	8000108 <strlen>
 80111ec:	2300      	movs	r3, #0
 80111ee:	9312      	str	r3, [sp, #72]	; 0x48
 80111f0:	7e23      	ldrb	r3, [r4, #24]
 80111f2:	2207      	movs	r2, #7
 80111f4:	930a      	str	r3, [sp, #40]	; 0x28
 80111f6:	6823      	ldr	r3, [r4, #0]
 80111f8:	900e      	str	r0, [sp, #56]	; 0x38
 80111fa:	930d      	str	r3, [sp, #52]	; 0x34
 80111fc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80111fe:	682b      	ldr	r3, [r5, #0]
 8011200:	05c9      	lsls	r1, r1, #23
 8011202:	d547      	bpl.n	8011294 <_printf_float+0xc4>
 8011204:	189b      	adds	r3, r3, r2
 8011206:	4393      	bics	r3, r2
 8011208:	001a      	movs	r2, r3
 801120a:	3208      	adds	r2, #8
 801120c:	602a      	str	r2, [r5, #0]
 801120e:	681a      	ldr	r2, [r3, #0]
 8011210:	685b      	ldr	r3, [r3, #4]
 8011212:	64a2      	str	r2, [r4, #72]	; 0x48
 8011214:	64e3      	str	r3, [r4, #76]	; 0x4c
 8011216:	2201      	movs	r2, #1
 8011218:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801121a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 801121c:	930b      	str	r3, [sp, #44]	; 0x2c
 801121e:	006b      	lsls	r3, r5, #1
 8011220:	085b      	lsrs	r3, r3, #1
 8011222:	930f      	str	r3, [sp, #60]	; 0x3c
 8011224:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8011226:	4ba7      	ldr	r3, [pc, #668]	; (80114c4 <_printf_float+0x2f4>)
 8011228:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801122a:	4252      	negs	r2, r2
 801122c:	f7f1 fd88 	bl	8002d40 <__aeabi_dcmpun>
 8011230:	2800      	cmp	r0, #0
 8011232:	d131      	bne.n	8011298 <_printf_float+0xc8>
 8011234:	2201      	movs	r2, #1
 8011236:	4ba3      	ldr	r3, [pc, #652]	; (80114c4 <_printf_float+0x2f4>)
 8011238:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801123a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801123c:	4252      	negs	r2, r2
 801123e:	f7ef f915 	bl	800046c <__aeabi_dcmple>
 8011242:	2800      	cmp	r0, #0
 8011244:	d128      	bne.n	8011298 <_printf_float+0xc8>
 8011246:	2200      	movs	r2, #0
 8011248:	2300      	movs	r3, #0
 801124a:	0029      	movs	r1, r5
 801124c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801124e:	f7ef f903 	bl	8000458 <__aeabi_dcmplt>
 8011252:	2800      	cmp	r0, #0
 8011254:	d003      	beq.n	801125e <_printf_float+0x8e>
 8011256:	0023      	movs	r3, r4
 8011258:	222d      	movs	r2, #45	; 0x2d
 801125a:	3343      	adds	r3, #67	; 0x43
 801125c:	701a      	strb	r2, [r3, #0]
 801125e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011260:	4d99      	ldr	r5, [pc, #612]	; (80114c8 <_printf_float+0x2f8>)
 8011262:	2b47      	cmp	r3, #71	; 0x47
 8011264:	d900      	bls.n	8011268 <_printf_float+0x98>
 8011266:	4d99      	ldr	r5, [pc, #612]	; (80114cc <_printf_float+0x2fc>)
 8011268:	2303      	movs	r3, #3
 801126a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801126c:	6123      	str	r3, [r4, #16]
 801126e:	3301      	adds	r3, #1
 8011270:	439a      	bics	r2, r3
 8011272:	2300      	movs	r3, #0
 8011274:	6022      	str	r2, [r4, #0]
 8011276:	930b      	str	r3, [sp, #44]	; 0x2c
 8011278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801127a:	0021      	movs	r1, r4
 801127c:	0038      	movs	r0, r7
 801127e:	9600      	str	r6, [sp, #0]
 8011280:	aa13      	add	r2, sp, #76	; 0x4c
 8011282:	f000 f9e7 	bl	8011654 <_printf_common>
 8011286:	1c43      	adds	r3, r0, #1
 8011288:	d000      	beq.n	801128c <_printf_float+0xbc>
 801128a:	e0a2      	b.n	80113d2 <_printf_float+0x202>
 801128c:	2001      	movs	r0, #1
 801128e:	4240      	negs	r0, r0
 8011290:	b015      	add	sp, #84	; 0x54
 8011292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011294:	3307      	adds	r3, #7
 8011296:	e7b6      	b.n	8011206 <_printf_float+0x36>
 8011298:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801129a:	002b      	movs	r3, r5
 801129c:	0010      	movs	r0, r2
 801129e:	0029      	movs	r1, r5
 80112a0:	f7f1 fd4e 	bl	8002d40 <__aeabi_dcmpun>
 80112a4:	2800      	cmp	r0, #0
 80112a6:	d00b      	beq.n	80112c0 <_printf_float+0xf0>
 80112a8:	2d00      	cmp	r5, #0
 80112aa:	da03      	bge.n	80112b4 <_printf_float+0xe4>
 80112ac:	0023      	movs	r3, r4
 80112ae:	222d      	movs	r2, #45	; 0x2d
 80112b0:	3343      	adds	r3, #67	; 0x43
 80112b2:	701a      	strb	r2, [r3, #0]
 80112b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80112b6:	4d86      	ldr	r5, [pc, #536]	; (80114d0 <_printf_float+0x300>)
 80112b8:	2b47      	cmp	r3, #71	; 0x47
 80112ba:	d9d5      	bls.n	8011268 <_printf_float+0x98>
 80112bc:	4d85      	ldr	r5, [pc, #532]	; (80114d4 <_printf_float+0x304>)
 80112be:	e7d3      	b.n	8011268 <_printf_float+0x98>
 80112c0:	2220      	movs	r2, #32
 80112c2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80112c4:	6863      	ldr	r3, [r4, #4]
 80112c6:	4391      	bics	r1, r2
 80112c8:	910f      	str	r1, [sp, #60]	; 0x3c
 80112ca:	1c5a      	adds	r2, r3, #1
 80112cc:	d149      	bne.n	8011362 <_printf_float+0x192>
 80112ce:	3307      	adds	r3, #7
 80112d0:	6063      	str	r3, [r4, #4]
 80112d2:	2380      	movs	r3, #128	; 0x80
 80112d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80112d6:	00db      	lsls	r3, r3, #3
 80112d8:	4313      	orrs	r3, r2
 80112da:	2200      	movs	r2, #0
 80112dc:	9206      	str	r2, [sp, #24]
 80112de:	aa12      	add	r2, sp, #72	; 0x48
 80112e0:	9205      	str	r2, [sp, #20]
 80112e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80112e4:	a908      	add	r1, sp, #32
 80112e6:	9204      	str	r2, [sp, #16]
 80112e8:	aa11      	add	r2, sp, #68	; 0x44
 80112ea:	9203      	str	r2, [sp, #12]
 80112ec:	2223      	movs	r2, #35	; 0x23
 80112ee:	6023      	str	r3, [r4, #0]
 80112f0:	9301      	str	r3, [sp, #4]
 80112f2:	6863      	ldr	r3, [r4, #4]
 80112f4:	1852      	adds	r2, r2, r1
 80112f6:	9202      	str	r2, [sp, #8]
 80112f8:	9300      	str	r3, [sp, #0]
 80112fa:	0038      	movs	r0, r7
 80112fc:	002b      	movs	r3, r5
 80112fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011300:	f7ff febc 	bl	801107c <__cvt>
 8011304:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011306:	0005      	movs	r5, r0
 8011308:	9911      	ldr	r1, [sp, #68]	; 0x44
 801130a:	2b47      	cmp	r3, #71	; 0x47
 801130c:	d108      	bne.n	8011320 <_printf_float+0x150>
 801130e:	1ccb      	adds	r3, r1, #3
 8011310:	db02      	blt.n	8011318 <_printf_float+0x148>
 8011312:	6863      	ldr	r3, [r4, #4]
 8011314:	4299      	cmp	r1, r3
 8011316:	dd48      	ble.n	80113aa <_printf_float+0x1da>
 8011318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801131a:	3b02      	subs	r3, #2
 801131c:	b2db      	uxtb	r3, r3
 801131e:	930a      	str	r3, [sp, #40]	; 0x28
 8011320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011322:	2b65      	cmp	r3, #101	; 0x65
 8011324:	d824      	bhi.n	8011370 <_printf_float+0x1a0>
 8011326:	0020      	movs	r0, r4
 8011328:	001a      	movs	r2, r3
 801132a:	3901      	subs	r1, #1
 801132c:	3050      	adds	r0, #80	; 0x50
 801132e:	9111      	str	r1, [sp, #68]	; 0x44
 8011330:	f7ff ff07 	bl	8011142 <__exponent>
 8011334:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011336:	900b      	str	r0, [sp, #44]	; 0x2c
 8011338:	1813      	adds	r3, r2, r0
 801133a:	6123      	str	r3, [r4, #16]
 801133c:	2a01      	cmp	r2, #1
 801133e:	dc02      	bgt.n	8011346 <_printf_float+0x176>
 8011340:	6822      	ldr	r2, [r4, #0]
 8011342:	07d2      	lsls	r2, r2, #31
 8011344:	d501      	bpl.n	801134a <_printf_float+0x17a>
 8011346:	3301      	adds	r3, #1
 8011348:	6123      	str	r3, [r4, #16]
 801134a:	2323      	movs	r3, #35	; 0x23
 801134c:	aa08      	add	r2, sp, #32
 801134e:	189b      	adds	r3, r3, r2
 8011350:	781b      	ldrb	r3, [r3, #0]
 8011352:	2b00      	cmp	r3, #0
 8011354:	d100      	bne.n	8011358 <_printf_float+0x188>
 8011356:	e78f      	b.n	8011278 <_printf_float+0xa8>
 8011358:	0023      	movs	r3, r4
 801135a:	222d      	movs	r2, #45	; 0x2d
 801135c:	3343      	adds	r3, #67	; 0x43
 801135e:	701a      	strb	r2, [r3, #0]
 8011360:	e78a      	b.n	8011278 <_printf_float+0xa8>
 8011362:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011364:	2a47      	cmp	r2, #71	; 0x47
 8011366:	d1b4      	bne.n	80112d2 <_printf_float+0x102>
 8011368:	2b00      	cmp	r3, #0
 801136a:	d1b2      	bne.n	80112d2 <_printf_float+0x102>
 801136c:	3301      	adds	r3, #1
 801136e:	e7af      	b.n	80112d0 <_printf_float+0x100>
 8011370:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011372:	2b66      	cmp	r3, #102	; 0x66
 8011374:	d11b      	bne.n	80113ae <_printf_float+0x1de>
 8011376:	6863      	ldr	r3, [r4, #4]
 8011378:	2900      	cmp	r1, #0
 801137a:	dd0d      	ble.n	8011398 <_printf_float+0x1c8>
 801137c:	6121      	str	r1, [r4, #16]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d102      	bne.n	8011388 <_printf_float+0x1b8>
 8011382:	6822      	ldr	r2, [r4, #0]
 8011384:	07d2      	lsls	r2, r2, #31
 8011386:	d502      	bpl.n	801138e <_printf_float+0x1be>
 8011388:	3301      	adds	r3, #1
 801138a:	1859      	adds	r1, r3, r1
 801138c:	6121      	str	r1, [r4, #16]
 801138e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011390:	65a3      	str	r3, [r4, #88]	; 0x58
 8011392:	2300      	movs	r3, #0
 8011394:	930b      	str	r3, [sp, #44]	; 0x2c
 8011396:	e7d8      	b.n	801134a <_printf_float+0x17a>
 8011398:	2b00      	cmp	r3, #0
 801139a:	d103      	bne.n	80113a4 <_printf_float+0x1d4>
 801139c:	2201      	movs	r2, #1
 801139e:	6821      	ldr	r1, [r4, #0]
 80113a0:	4211      	tst	r1, r2
 80113a2:	d000      	beq.n	80113a6 <_printf_float+0x1d6>
 80113a4:	1c9a      	adds	r2, r3, #2
 80113a6:	6122      	str	r2, [r4, #16]
 80113a8:	e7f1      	b.n	801138e <_printf_float+0x1be>
 80113aa:	2367      	movs	r3, #103	; 0x67
 80113ac:	930a      	str	r3, [sp, #40]	; 0x28
 80113ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80113b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80113b2:	4293      	cmp	r3, r2
 80113b4:	db06      	blt.n	80113c4 <_printf_float+0x1f4>
 80113b6:	6822      	ldr	r2, [r4, #0]
 80113b8:	6123      	str	r3, [r4, #16]
 80113ba:	07d2      	lsls	r2, r2, #31
 80113bc:	d5e7      	bpl.n	801138e <_printf_float+0x1be>
 80113be:	3301      	adds	r3, #1
 80113c0:	6123      	str	r3, [r4, #16]
 80113c2:	e7e4      	b.n	801138e <_printf_float+0x1be>
 80113c4:	2101      	movs	r1, #1
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	dc01      	bgt.n	80113ce <_printf_float+0x1fe>
 80113ca:	1849      	adds	r1, r1, r1
 80113cc:	1ac9      	subs	r1, r1, r3
 80113ce:	1852      	adds	r2, r2, r1
 80113d0:	e7e9      	b.n	80113a6 <_printf_float+0x1d6>
 80113d2:	6822      	ldr	r2, [r4, #0]
 80113d4:	0553      	lsls	r3, r2, #21
 80113d6:	d407      	bmi.n	80113e8 <_printf_float+0x218>
 80113d8:	6923      	ldr	r3, [r4, #16]
 80113da:	002a      	movs	r2, r5
 80113dc:	0038      	movs	r0, r7
 80113de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80113e0:	47b0      	blx	r6
 80113e2:	1c43      	adds	r3, r0, #1
 80113e4:	d128      	bne.n	8011438 <_printf_float+0x268>
 80113e6:	e751      	b.n	801128c <_printf_float+0xbc>
 80113e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80113ea:	2b65      	cmp	r3, #101	; 0x65
 80113ec:	d800      	bhi.n	80113f0 <_printf_float+0x220>
 80113ee:	e0e1      	b.n	80115b4 <_printf_float+0x3e4>
 80113f0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80113f2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80113f4:	2200      	movs	r2, #0
 80113f6:	2300      	movs	r3, #0
 80113f8:	f7ef f828 	bl	800044c <__aeabi_dcmpeq>
 80113fc:	2800      	cmp	r0, #0
 80113fe:	d031      	beq.n	8011464 <_printf_float+0x294>
 8011400:	2301      	movs	r3, #1
 8011402:	0038      	movs	r0, r7
 8011404:	4a34      	ldr	r2, [pc, #208]	; (80114d8 <_printf_float+0x308>)
 8011406:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011408:	47b0      	blx	r6
 801140a:	1c43      	adds	r3, r0, #1
 801140c:	d100      	bne.n	8011410 <_printf_float+0x240>
 801140e:	e73d      	b.n	801128c <_printf_float+0xbc>
 8011410:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011412:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011414:	4293      	cmp	r3, r2
 8011416:	db02      	blt.n	801141e <_printf_float+0x24e>
 8011418:	6823      	ldr	r3, [r4, #0]
 801141a:	07db      	lsls	r3, r3, #31
 801141c:	d50c      	bpl.n	8011438 <_printf_float+0x268>
 801141e:	0038      	movs	r0, r7
 8011420:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011422:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011424:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011426:	47b0      	blx	r6
 8011428:	2500      	movs	r5, #0
 801142a:	1c43      	adds	r3, r0, #1
 801142c:	d100      	bne.n	8011430 <_printf_float+0x260>
 801142e:	e72d      	b.n	801128c <_printf_float+0xbc>
 8011430:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011432:	3b01      	subs	r3, #1
 8011434:	42ab      	cmp	r3, r5
 8011436:	dc0a      	bgt.n	801144e <_printf_float+0x27e>
 8011438:	6823      	ldr	r3, [r4, #0]
 801143a:	079b      	lsls	r3, r3, #30
 801143c:	d500      	bpl.n	8011440 <_printf_float+0x270>
 801143e:	e106      	b.n	801164e <_printf_float+0x47e>
 8011440:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011442:	68e0      	ldr	r0, [r4, #12]
 8011444:	4298      	cmp	r0, r3
 8011446:	db00      	blt.n	801144a <_printf_float+0x27a>
 8011448:	e722      	b.n	8011290 <_printf_float+0xc0>
 801144a:	0018      	movs	r0, r3
 801144c:	e720      	b.n	8011290 <_printf_float+0xc0>
 801144e:	0022      	movs	r2, r4
 8011450:	2301      	movs	r3, #1
 8011452:	0038      	movs	r0, r7
 8011454:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011456:	321a      	adds	r2, #26
 8011458:	47b0      	blx	r6
 801145a:	1c43      	adds	r3, r0, #1
 801145c:	d100      	bne.n	8011460 <_printf_float+0x290>
 801145e:	e715      	b.n	801128c <_printf_float+0xbc>
 8011460:	3501      	adds	r5, #1
 8011462:	e7e5      	b.n	8011430 <_printf_float+0x260>
 8011464:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011466:	2b00      	cmp	r3, #0
 8011468:	dc38      	bgt.n	80114dc <_printf_float+0x30c>
 801146a:	2301      	movs	r3, #1
 801146c:	0038      	movs	r0, r7
 801146e:	4a1a      	ldr	r2, [pc, #104]	; (80114d8 <_printf_float+0x308>)
 8011470:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011472:	47b0      	blx	r6
 8011474:	1c43      	adds	r3, r0, #1
 8011476:	d100      	bne.n	801147a <_printf_float+0x2aa>
 8011478:	e708      	b.n	801128c <_printf_float+0xbc>
 801147a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801147c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801147e:	4313      	orrs	r3, r2
 8011480:	d102      	bne.n	8011488 <_printf_float+0x2b8>
 8011482:	6823      	ldr	r3, [r4, #0]
 8011484:	07db      	lsls	r3, r3, #31
 8011486:	d5d7      	bpl.n	8011438 <_printf_float+0x268>
 8011488:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801148a:	0038      	movs	r0, r7
 801148c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801148e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011490:	47b0      	blx	r6
 8011492:	1c43      	adds	r3, r0, #1
 8011494:	d100      	bne.n	8011498 <_printf_float+0x2c8>
 8011496:	e6f9      	b.n	801128c <_printf_float+0xbc>
 8011498:	2300      	movs	r3, #0
 801149a:	930a      	str	r3, [sp, #40]	; 0x28
 801149c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801149e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80114a0:	425b      	negs	r3, r3
 80114a2:	4293      	cmp	r3, r2
 80114a4:	dc01      	bgt.n	80114aa <_printf_float+0x2da>
 80114a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80114a8:	e797      	b.n	80113da <_printf_float+0x20a>
 80114aa:	0022      	movs	r2, r4
 80114ac:	2301      	movs	r3, #1
 80114ae:	0038      	movs	r0, r7
 80114b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80114b2:	321a      	adds	r2, #26
 80114b4:	47b0      	blx	r6
 80114b6:	1c43      	adds	r3, r0, #1
 80114b8:	d100      	bne.n	80114bc <_printf_float+0x2ec>
 80114ba:	e6e7      	b.n	801128c <_printf_float+0xbc>
 80114bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80114be:	3301      	adds	r3, #1
 80114c0:	e7eb      	b.n	801149a <_printf_float+0x2ca>
 80114c2:	46c0      	nop			; (mov r8, r8)
 80114c4:	7fefffff 	.word	0x7fefffff
 80114c8:	0801527c 	.word	0x0801527c
 80114cc:	08015280 	.word	0x08015280
 80114d0:	08015284 	.word	0x08015284
 80114d4:	08015288 	.word	0x08015288
 80114d8:	0801528c 	.word	0x0801528c
 80114dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80114de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80114e0:	920a      	str	r2, [sp, #40]	; 0x28
 80114e2:	429a      	cmp	r2, r3
 80114e4:	dd00      	ble.n	80114e8 <_printf_float+0x318>
 80114e6:	930a      	str	r3, [sp, #40]	; 0x28
 80114e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	dc3c      	bgt.n	8011568 <_printf_float+0x398>
 80114ee:	2300      	movs	r3, #0
 80114f0:	930d      	str	r3, [sp, #52]	; 0x34
 80114f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80114f4:	43db      	mvns	r3, r3
 80114f6:	17db      	asrs	r3, r3, #31
 80114f8:	930f      	str	r3, [sp, #60]	; 0x3c
 80114fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80114fc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80114fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8011500:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011502:	4013      	ands	r3, r2
 8011504:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011506:	1ad3      	subs	r3, r2, r3
 8011508:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801150a:	4293      	cmp	r3, r2
 801150c:	dc34      	bgt.n	8011578 <_printf_float+0x3a8>
 801150e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011510:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011512:	4293      	cmp	r3, r2
 8011514:	db3d      	blt.n	8011592 <_printf_float+0x3c2>
 8011516:	6823      	ldr	r3, [r4, #0]
 8011518:	07db      	lsls	r3, r3, #31
 801151a:	d43a      	bmi.n	8011592 <_printf_float+0x3c2>
 801151c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801151e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011520:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011522:	1ad3      	subs	r3, r2, r3
 8011524:	1a52      	subs	r2, r2, r1
 8011526:	920a      	str	r2, [sp, #40]	; 0x28
 8011528:	429a      	cmp	r2, r3
 801152a:	dd00      	ble.n	801152e <_printf_float+0x35e>
 801152c:	930a      	str	r3, [sp, #40]	; 0x28
 801152e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011530:	2b00      	cmp	r3, #0
 8011532:	dc36      	bgt.n	80115a2 <_printf_float+0x3d2>
 8011534:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011536:	2500      	movs	r5, #0
 8011538:	43db      	mvns	r3, r3
 801153a:	17db      	asrs	r3, r3, #31
 801153c:	930b      	str	r3, [sp, #44]	; 0x2c
 801153e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011540:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011542:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011544:	1a9b      	subs	r3, r3, r2
 8011546:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011548:	400a      	ands	r2, r1
 801154a:	1a9b      	subs	r3, r3, r2
 801154c:	42ab      	cmp	r3, r5
 801154e:	dc00      	bgt.n	8011552 <_printf_float+0x382>
 8011550:	e772      	b.n	8011438 <_printf_float+0x268>
 8011552:	0022      	movs	r2, r4
 8011554:	2301      	movs	r3, #1
 8011556:	0038      	movs	r0, r7
 8011558:	9909      	ldr	r1, [sp, #36]	; 0x24
 801155a:	321a      	adds	r2, #26
 801155c:	47b0      	blx	r6
 801155e:	1c43      	adds	r3, r0, #1
 8011560:	d100      	bne.n	8011564 <_printf_float+0x394>
 8011562:	e693      	b.n	801128c <_printf_float+0xbc>
 8011564:	3501      	adds	r5, #1
 8011566:	e7ea      	b.n	801153e <_printf_float+0x36e>
 8011568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801156a:	002a      	movs	r2, r5
 801156c:	0038      	movs	r0, r7
 801156e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011570:	47b0      	blx	r6
 8011572:	1c43      	adds	r3, r0, #1
 8011574:	d1bb      	bne.n	80114ee <_printf_float+0x31e>
 8011576:	e689      	b.n	801128c <_printf_float+0xbc>
 8011578:	0022      	movs	r2, r4
 801157a:	2301      	movs	r3, #1
 801157c:	0038      	movs	r0, r7
 801157e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011580:	321a      	adds	r2, #26
 8011582:	47b0      	blx	r6
 8011584:	1c43      	adds	r3, r0, #1
 8011586:	d100      	bne.n	801158a <_printf_float+0x3ba>
 8011588:	e680      	b.n	801128c <_printf_float+0xbc>
 801158a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801158c:	3301      	adds	r3, #1
 801158e:	930d      	str	r3, [sp, #52]	; 0x34
 8011590:	e7b3      	b.n	80114fa <_printf_float+0x32a>
 8011592:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011594:	0038      	movs	r0, r7
 8011596:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011598:	9909      	ldr	r1, [sp, #36]	; 0x24
 801159a:	47b0      	blx	r6
 801159c:	1c43      	adds	r3, r0, #1
 801159e:	d1bd      	bne.n	801151c <_printf_float+0x34c>
 80115a0:	e674      	b.n	801128c <_printf_float+0xbc>
 80115a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80115a4:	0038      	movs	r0, r7
 80115a6:	18ea      	adds	r2, r5, r3
 80115a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80115aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80115ac:	47b0      	blx	r6
 80115ae:	1c43      	adds	r3, r0, #1
 80115b0:	d1c0      	bne.n	8011534 <_printf_float+0x364>
 80115b2:	e66b      	b.n	801128c <_printf_float+0xbc>
 80115b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80115b6:	2b01      	cmp	r3, #1
 80115b8:	dc02      	bgt.n	80115c0 <_printf_float+0x3f0>
 80115ba:	2301      	movs	r3, #1
 80115bc:	421a      	tst	r2, r3
 80115be:	d034      	beq.n	801162a <_printf_float+0x45a>
 80115c0:	2301      	movs	r3, #1
 80115c2:	002a      	movs	r2, r5
 80115c4:	0038      	movs	r0, r7
 80115c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80115c8:	47b0      	blx	r6
 80115ca:	1c43      	adds	r3, r0, #1
 80115cc:	d100      	bne.n	80115d0 <_printf_float+0x400>
 80115ce:	e65d      	b.n	801128c <_printf_float+0xbc>
 80115d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80115d2:	0038      	movs	r0, r7
 80115d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80115d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80115d8:	47b0      	blx	r6
 80115da:	1c43      	adds	r3, r0, #1
 80115dc:	d100      	bne.n	80115e0 <_printf_float+0x410>
 80115de:	e655      	b.n	801128c <_printf_float+0xbc>
 80115e0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80115e2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80115e4:	2200      	movs	r2, #0
 80115e6:	2300      	movs	r3, #0
 80115e8:	f7ee ff30 	bl	800044c <__aeabi_dcmpeq>
 80115ec:	2800      	cmp	r0, #0
 80115ee:	d11a      	bne.n	8011626 <_printf_float+0x456>
 80115f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80115f2:	1c6a      	adds	r2, r5, #1
 80115f4:	3b01      	subs	r3, #1
 80115f6:	0038      	movs	r0, r7
 80115f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80115fa:	47b0      	blx	r6
 80115fc:	1c43      	adds	r3, r0, #1
 80115fe:	d10e      	bne.n	801161e <_printf_float+0x44e>
 8011600:	e644      	b.n	801128c <_printf_float+0xbc>
 8011602:	0022      	movs	r2, r4
 8011604:	2301      	movs	r3, #1
 8011606:	0038      	movs	r0, r7
 8011608:	9909      	ldr	r1, [sp, #36]	; 0x24
 801160a:	321a      	adds	r2, #26
 801160c:	47b0      	blx	r6
 801160e:	1c43      	adds	r3, r0, #1
 8011610:	d100      	bne.n	8011614 <_printf_float+0x444>
 8011612:	e63b      	b.n	801128c <_printf_float+0xbc>
 8011614:	3501      	adds	r5, #1
 8011616:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011618:	3b01      	subs	r3, #1
 801161a:	42ab      	cmp	r3, r5
 801161c:	dcf1      	bgt.n	8011602 <_printf_float+0x432>
 801161e:	0022      	movs	r2, r4
 8011620:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011622:	3250      	adds	r2, #80	; 0x50
 8011624:	e6da      	b.n	80113dc <_printf_float+0x20c>
 8011626:	2500      	movs	r5, #0
 8011628:	e7f5      	b.n	8011616 <_printf_float+0x446>
 801162a:	002a      	movs	r2, r5
 801162c:	e7e3      	b.n	80115f6 <_printf_float+0x426>
 801162e:	0022      	movs	r2, r4
 8011630:	2301      	movs	r3, #1
 8011632:	0038      	movs	r0, r7
 8011634:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011636:	3219      	adds	r2, #25
 8011638:	47b0      	blx	r6
 801163a:	1c43      	adds	r3, r0, #1
 801163c:	d100      	bne.n	8011640 <_printf_float+0x470>
 801163e:	e625      	b.n	801128c <_printf_float+0xbc>
 8011640:	3501      	adds	r5, #1
 8011642:	68e3      	ldr	r3, [r4, #12]
 8011644:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011646:	1a9b      	subs	r3, r3, r2
 8011648:	42ab      	cmp	r3, r5
 801164a:	dcf0      	bgt.n	801162e <_printf_float+0x45e>
 801164c:	e6f8      	b.n	8011440 <_printf_float+0x270>
 801164e:	2500      	movs	r5, #0
 8011650:	e7f7      	b.n	8011642 <_printf_float+0x472>
 8011652:	46c0      	nop			; (mov r8, r8)

08011654 <_printf_common>:
 8011654:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011656:	0015      	movs	r5, r2
 8011658:	9301      	str	r3, [sp, #4]
 801165a:	688a      	ldr	r2, [r1, #8]
 801165c:	690b      	ldr	r3, [r1, #16]
 801165e:	000c      	movs	r4, r1
 8011660:	9000      	str	r0, [sp, #0]
 8011662:	4293      	cmp	r3, r2
 8011664:	da00      	bge.n	8011668 <_printf_common+0x14>
 8011666:	0013      	movs	r3, r2
 8011668:	0022      	movs	r2, r4
 801166a:	602b      	str	r3, [r5, #0]
 801166c:	3243      	adds	r2, #67	; 0x43
 801166e:	7812      	ldrb	r2, [r2, #0]
 8011670:	2a00      	cmp	r2, #0
 8011672:	d001      	beq.n	8011678 <_printf_common+0x24>
 8011674:	3301      	adds	r3, #1
 8011676:	602b      	str	r3, [r5, #0]
 8011678:	6823      	ldr	r3, [r4, #0]
 801167a:	069b      	lsls	r3, r3, #26
 801167c:	d502      	bpl.n	8011684 <_printf_common+0x30>
 801167e:	682b      	ldr	r3, [r5, #0]
 8011680:	3302      	adds	r3, #2
 8011682:	602b      	str	r3, [r5, #0]
 8011684:	6822      	ldr	r2, [r4, #0]
 8011686:	2306      	movs	r3, #6
 8011688:	0017      	movs	r7, r2
 801168a:	401f      	ands	r7, r3
 801168c:	421a      	tst	r2, r3
 801168e:	d027      	beq.n	80116e0 <_printf_common+0x8c>
 8011690:	0023      	movs	r3, r4
 8011692:	3343      	adds	r3, #67	; 0x43
 8011694:	781b      	ldrb	r3, [r3, #0]
 8011696:	1e5a      	subs	r2, r3, #1
 8011698:	4193      	sbcs	r3, r2
 801169a:	6822      	ldr	r2, [r4, #0]
 801169c:	0692      	lsls	r2, r2, #26
 801169e:	d430      	bmi.n	8011702 <_printf_common+0xae>
 80116a0:	0022      	movs	r2, r4
 80116a2:	9901      	ldr	r1, [sp, #4]
 80116a4:	9800      	ldr	r0, [sp, #0]
 80116a6:	9e08      	ldr	r6, [sp, #32]
 80116a8:	3243      	adds	r2, #67	; 0x43
 80116aa:	47b0      	blx	r6
 80116ac:	1c43      	adds	r3, r0, #1
 80116ae:	d025      	beq.n	80116fc <_printf_common+0xa8>
 80116b0:	2306      	movs	r3, #6
 80116b2:	6820      	ldr	r0, [r4, #0]
 80116b4:	682a      	ldr	r2, [r5, #0]
 80116b6:	68e1      	ldr	r1, [r4, #12]
 80116b8:	2500      	movs	r5, #0
 80116ba:	4003      	ands	r3, r0
 80116bc:	2b04      	cmp	r3, #4
 80116be:	d103      	bne.n	80116c8 <_printf_common+0x74>
 80116c0:	1a8d      	subs	r5, r1, r2
 80116c2:	43eb      	mvns	r3, r5
 80116c4:	17db      	asrs	r3, r3, #31
 80116c6:	401d      	ands	r5, r3
 80116c8:	68a3      	ldr	r3, [r4, #8]
 80116ca:	6922      	ldr	r2, [r4, #16]
 80116cc:	4293      	cmp	r3, r2
 80116ce:	dd01      	ble.n	80116d4 <_printf_common+0x80>
 80116d0:	1a9b      	subs	r3, r3, r2
 80116d2:	18ed      	adds	r5, r5, r3
 80116d4:	2700      	movs	r7, #0
 80116d6:	42bd      	cmp	r5, r7
 80116d8:	d120      	bne.n	801171c <_printf_common+0xc8>
 80116da:	2000      	movs	r0, #0
 80116dc:	e010      	b.n	8011700 <_printf_common+0xac>
 80116de:	3701      	adds	r7, #1
 80116e0:	68e3      	ldr	r3, [r4, #12]
 80116e2:	682a      	ldr	r2, [r5, #0]
 80116e4:	1a9b      	subs	r3, r3, r2
 80116e6:	42bb      	cmp	r3, r7
 80116e8:	ddd2      	ble.n	8011690 <_printf_common+0x3c>
 80116ea:	0022      	movs	r2, r4
 80116ec:	2301      	movs	r3, #1
 80116ee:	9901      	ldr	r1, [sp, #4]
 80116f0:	9800      	ldr	r0, [sp, #0]
 80116f2:	9e08      	ldr	r6, [sp, #32]
 80116f4:	3219      	adds	r2, #25
 80116f6:	47b0      	blx	r6
 80116f8:	1c43      	adds	r3, r0, #1
 80116fa:	d1f0      	bne.n	80116de <_printf_common+0x8a>
 80116fc:	2001      	movs	r0, #1
 80116fe:	4240      	negs	r0, r0
 8011700:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011702:	2030      	movs	r0, #48	; 0x30
 8011704:	18e1      	adds	r1, r4, r3
 8011706:	3143      	adds	r1, #67	; 0x43
 8011708:	7008      	strb	r0, [r1, #0]
 801170a:	0021      	movs	r1, r4
 801170c:	1c5a      	adds	r2, r3, #1
 801170e:	3145      	adds	r1, #69	; 0x45
 8011710:	7809      	ldrb	r1, [r1, #0]
 8011712:	18a2      	adds	r2, r4, r2
 8011714:	3243      	adds	r2, #67	; 0x43
 8011716:	3302      	adds	r3, #2
 8011718:	7011      	strb	r1, [r2, #0]
 801171a:	e7c1      	b.n	80116a0 <_printf_common+0x4c>
 801171c:	0022      	movs	r2, r4
 801171e:	2301      	movs	r3, #1
 8011720:	9901      	ldr	r1, [sp, #4]
 8011722:	9800      	ldr	r0, [sp, #0]
 8011724:	9e08      	ldr	r6, [sp, #32]
 8011726:	321a      	adds	r2, #26
 8011728:	47b0      	blx	r6
 801172a:	1c43      	adds	r3, r0, #1
 801172c:	d0e6      	beq.n	80116fc <_printf_common+0xa8>
 801172e:	3701      	adds	r7, #1
 8011730:	e7d1      	b.n	80116d6 <_printf_common+0x82>
	...

08011734 <_printf_i>:
 8011734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011736:	b08b      	sub	sp, #44	; 0x2c
 8011738:	9206      	str	r2, [sp, #24]
 801173a:	000a      	movs	r2, r1
 801173c:	3243      	adds	r2, #67	; 0x43
 801173e:	9307      	str	r3, [sp, #28]
 8011740:	9005      	str	r0, [sp, #20]
 8011742:	9204      	str	r2, [sp, #16]
 8011744:	7e0a      	ldrb	r2, [r1, #24]
 8011746:	000c      	movs	r4, r1
 8011748:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801174a:	2a78      	cmp	r2, #120	; 0x78
 801174c:	d807      	bhi.n	801175e <_printf_i+0x2a>
 801174e:	2a62      	cmp	r2, #98	; 0x62
 8011750:	d809      	bhi.n	8011766 <_printf_i+0x32>
 8011752:	2a00      	cmp	r2, #0
 8011754:	d100      	bne.n	8011758 <_printf_i+0x24>
 8011756:	e0c1      	b.n	80118dc <_printf_i+0x1a8>
 8011758:	2a58      	cmp	r2, #88	; 0x58
 801175a:	d100      	bne.n	801175e <_printf_i+0x2a>
 801175c:	e08c      	b.n	8011878 <_printf_i+0x144>
 801175e:	0026      	movs	r6, r4
 8011760:	3642      	adds	r6, #66	; 0x42
 8011762:	7032      	strb	r2, [r6, #0]
 8011764:	e022      	b.n	80117ac <_printf_i+0x78>
 8011766:	0010      	movs	r0, r2
 8011768:	3863      	subs	r0, #99	; 0x63
 801176a:	2815      	cmp	r0, #21
 801176c:	d8f7      	bhi.n	801175e <_printf_i+0x2a>
 801176e:	f7ee fcdd 	bl	800012c <__gnu_thumb1_case_shi>
 8011772:	0016      	.short	0x0016
 8011774:	fff6001f 	.word	0xfff6001f
 8011778:	fff6fff6 	.word	0xfff6fff6
 801177c:	001ffff6 	.word	0x001ffff6
 8011780:	fff6fff6 	.word	0xfff6fff6
 8011784:	fff6fff6 	.word	0xfff6fff6
 8011788:	003600a8 	.word	0x003600a8
 801178c:	fff6009a 	.word	0xfff6009a
 8011790:	00b9fff6 	.word	0x00b9fff6
 8011794:	0036fff6 	.word	0x0036fff6
 8011798:	fff6fff6 	.word	0xfff6fff6
 801179c:	009e      	.short	0x009e
 801179e:	0026      	movs	r6, r4
 80117a0:	681a      	ldr	r2, [r3, #0]
 80117a2:	3642      	adds	r6, #66	; 0x42
 80117a4:	1d11      	adds	r1, r2, #4
 80117a6:	6019      	str	r1, [r3, #0]
 80117a8:	6813      	ldr	r3, [r2, #0]
 80117aa:	7033      	strb	r3, [r6, #0]
 80117ac:	2301      	movs	r3, #1
 80117ae:	e0a7      	b.n	8011900 <_printf_i+0x1cc>
 80117b0:	6808      	ldr	r0, [r1, #0]
 80117b2:	6819      	ldr	r1, [r3, #0]
 80117b4:	1d0a      	adds	r2, r1, #4
 80117b6:	0605      	lsls	r5, r0, #24
 80117b8:	d50b      	bpl.n	80117d2 <_printf_i+0x9e>
 80117ba:	680d      	ldr	r5, [r1, #0]
 80117bc:	601a      	str	r2, [r3, #0]
 80117be:	2d00      	cmp	r5, #0
 80117c0:	da03      	bge.n	80117ca <_printf_i+0x96>
 80117c2:	232d      	movs	r3, #45	; 0x2d
 80117c4:	9a04      	ldr	r2, [sp, #16]
 80117c6:	426d      	negs	r5, r5
 80117c8:	7013      	strb	r3, [r2, #0]
 80117ca:	4b61      	ldr	r3, [pc, #388]	; (8011950 <_printf_i+0x21c>)
 80117cc:	270a      	movs	r7, #10
 80117ce:	9303      	str	r3, [sp, #12]
 80117d0:	e01b      	b.n	801180a <_printf_i+0xd6>
 80117d2:	680d      	ldr	r5, [r1, #0]
 80117d4:	601a      	str	r2, [r3, #0]
 80117d6:	0641      	lsls	r1, r0, #25
 80117d8:	d5f1      	bpl.n	80117be <_printf_i+0x8a>
 80117da:	b22d      	sxth	r5, r5
 80117dc:	e7ef      	b.n	80117be <_printf_i+0x8a>
 80117de:	680d      	ldr	r5, [r1, #0]
 80117e0:	6819      	ldr	r1, [r3, #0]
 80117e2:	1d08      	adds	r0, r1, #4
 80117e4:	6018      	str	r0, [r3, #0]
 80117e6:	062e      	lsls	r6, r5, #24
 80117e8:	d501      	bpl.n	80117ee <_printf_i+0xba>
 80117ea:	680d      	ldr	r5, [r1, #0]
 80117ec:	e003      	b.n	80117f6 <_printf_i+0xc2>
 80117ee:	066d      	lsls	r5, r5, #25
 80117f0:	d5fb      	bpl.n	80117ea <_printf_i+0xb6>
 80117f2:	680d      	ldr	r5, [r1, #0]
 80117f4:	b2ad      	uxth	r5, r5
 80117f6:	4b56      	ldr	r3, [pc, #344]	; (8011950 <_printf_i+0x21c>)
 80117f8:	2708      	movs	r7, #8
 80117fa:	9303      	str	r3, [sp, #12]
 80117fc:	2a6f      	cmp	r2, #111	; 0x6f
 80117fe:	d000      	beq.n	8011802 <_printf_i+0xce>
 8011800:	3702      	adds	r7, #2
 8011802:	0023      	movs	r3, r4
 8011804:	2200      	movs	r2, #0
 8011806:	3343      	adds	r3, #67	; 0x43
 8011808:	701a      	strb	r2, [r3, #0]
 801180a:	6863      	ldr	r3, [r4, #4]
 801180c:	60a3      	str	r3, [r4, #8]
 801180e:	2b00      	cmp	r3, #0
 8011810:	db03      	blt.n	801181a <_printf_i+0xe6>
 8011812:	2204      	movs	r2, #4
 8011814:	6821      	ldr	r1, [r4, #0]
 8011816:	4391      	bics	r1, r2
 8011818:	6021      	str	r1, [r4, #0]
 801181a:	2d00      	cmp	r5, #0
 801181c:	d102      	bne.n	8011824 <_printf_i+0xf0>
 801181e:	9e04      	ldr	r6, [sp, #16]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d00c      	beq.n	801183e <_printf_i+0x10a>
 8011824:	9e04      	ldr	r6, [sp, #16]
 8011826:	0028      	movs	r0, r5
 8011828:	0039      	movs	r1, r7
 801182a:	f7ee fd0f 	bl	800024c <__aeabi_uidivmod>
 801182e:	9b03      	ldr	r3, [sp, #12]
 8011830:	3e01      	subs	r6, #1
 8011832:	5c5b      	ldrb	r3, [r3, r1]
 8011834:	7033      	strb	r3, [r6, #0]
 8011836:	002b      	movs	r3, r5
 8011838:	0005      	movs	r5, r0
 801183a:	429f      	cmp	r7, r3
 801183c:	d9f3      	bls.n	8011826 <_printf_i+0xf2>
 801183e:	2f08      	cmp	r7, #8
 8011840:	d109      	bne.n	8011856 <_printf_i+0x122>
 8011842:	6823      	ldr	r3, [r4, #0]
 8011844:	07db      	lsls	r3, r3, #31
 8011846:	d506      	bpl.n	8011856 <_printf_i+0x122>
 8011848:	6863      	ldr	r3, [r4, #4]
 801184a:	6922      	ldr	r2, [r4, #16]
 801184c:	4293      	cmp	r3, r2
 801184e:	dc02      	bgt.n	8011856 <_printf_i+0x122>
 8011850:	2330      	movs	r3, #48	; 0x30
 8011852:	3e01      	subs	r6, #1
 8011854:	7033      	strb	r3, [r6, #0]
 8011856:	9b04      	ldr	r3, [sp, #16]
 8011858:	1b9b      	subs	r3, r3, r6
 801185a:	6123      	str	r3, [r4, #16]
 801185c:	9b07      	ldr	r3, [sp, #28]
 801185e:	0021      	movs	r1, r4
 8011860:	9300      	str	r3, [sp, #0]
 8011862:	9805      	ldr	r0, [sp, #20]
 8011864:	9b06      	ldr	r3, [sp, #24]
 8011866:	aa09      	add	r2, sp, #36	; 0x24
 8011868:	f7ff fef4 	bl	8011654 <_printf_common>
 801186c:	1c43      	adds	r3, r0, #1
 801186e:	d14c      	bne.n	801190a <_printf_i+0x1d6>
 8011870:	2001      	movs	r0, #1
 8011872:	4240      	negs	r0, r0
 8011874:	b00b      	add	sp, #44	; 0x2c
 8011876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011878:	3145      	adds	r1, #69	; 0x45
 801187a:	700a      	strb	r2, [r1, #0]
 801187c:	4a34      	ldr	r2, [pc, #208]	; (8011950 <_printf_i+0x21c>)
 801187e:	9203      	str	r2, [sp, #12]
 8011880:	681a      	ldr	r2, [r3, #0]
 8011882:	6821      	ldr	r1, [r4, #0]
 8011884:	ca20      	ldmia	r2!, {r5}
 8011886:	601a      	str	r2, [r3, #0]
 8011888:	0608      	lsls	r0, r1, #24
 801188a:	d516      	bpl.n	80118ba <_printf_i+0x186>
 801188c:	07cb      	lsls	r3, r1, #31
 801188e:	d502      	bpl.n	8011896 <_printf_i+0x162>
 8011890:	2320      	movs	r3, #32
 8011892:	4319      	orrs	r1, r3
 8011894:	6021      	str	r1, [r4, #0]
 8011896:	2710      	movs	r7, #16
 8011898:	2d00      	cmp	r5, #0
 801189a:	d1b2      	bne.n	8011802 <_printf_i+0xce>
 801189c:	2320      	movs	r3, #32
 801189e:	6822      	ldr	r2, [r4, #0]
 80118a0:	439a      	bics	r2, r3
 80118a2:	6022      	str	r2, [r4, #0]
 80118a4:	e7ad      	b.n	8011802 <_printf_i+0xce>
 80118a6:	2220      	movs	r2, #32
 80118a8:	6809      	ldr	r1, [r1, #0]
 80118aa:	430a      	orrs	r2, r1
 80118ac:	6022      	str	r2, [r4, #0]
 80118ae:	0022      	movs	r2, r4
 80118b0:	2178      	movs	r1, #120	; 0x78
 80118b2:	3245      	adds	r2, #69	; 0x45
 80118b4:	7011      	strb	r1, [r2, #0]
 80118b6:	4a27      	ldr	r2, [pc, #156]	; (8011954 <_printf_i+0x220>)
 80118b8:	e7e1      	b.n	801187e <_printf_i+0x14a>
 80118ba:	0648      	lsls	r0, r1, #25
 80118bc:	d5e6      	bpl.n	801188c <_printf_i+0x158>
 80118be:	b2ad      	uxth	r5, r5
 80118c0:	e7e4      	b.n	801188c <_printf_i+0x158>
 80118c2:	681a      	ldr	r2, [r3, #0]
 80118c4:	680d      	ldr	r5, [r1, #0]
 80118c6:	1d10      	adds	r0, r2, #4
 80118c8:	6949      	ldr	r1, [r1, #20]
 80118ca:	6018      	str	r0, [r3, #0]
 80118cc:	6813      	ldr	r3, [r2, #0]
 80118ce:	062e      	lsls	r6, r5, #24
 80118d0:	d501      	bpl.n	80118d6 <_printf_i+0x1a2>
 80118d2:	6019      	str	r1, [r3, #0]
 80118d4:	e002      	b.n	80118dc <_printf_i+0x1a8>
 80118d6:	066d      	lsls	r5, r5, #25
 80118d8:	d5fb      	bpl.n	80118d2 <_printf_i+0x19e>
 80118da:	8019      	strh	r1, [r3, #0]
 80118dc:	2300      	movs	r3, #0
 80118de:	9e04      	ldr	r6, [sp, #16]
 80118e0:	6123      	str	r3, [r4, #16]
 80118e2:	e7bb      	b.n	801185c <_printf_i+0x128>
 80118e4:	681a      	ldr	r2, [r3, #0]
 80118e6:	1d11      	adds	r1, r2, #4
 80118e8:	6019      	str	r1, [r3, #0]
 80118ea:	6816      	ldr	r6, [r2, #0]
 80118ec:	2100      	movs	r1, #0
 80118ee:	0030      	movs	r0, r6
 80118f0:	6862      	ldr	r2, [r4, #4]
 80118f2:	f000 ff11 	bl	8012718 <memchr>
 80118f6:	2800      	cmp	r0, #0
 80118f8:	d001      	beq.n	80118fe <_printf_i+0x1ca>
 80118fa:	1b80      	subs	r0, r0, r6
 80118fc:	6060      	str	r0, [r4, #4]
 80118fe:	6863      	ldr	r3, [r4, #4]
 8011900:	6123      	str	r3, [r4, #16]
 8011902:	2300      	movs	r3, #0
 8011904:	9a04      	ldr	r2, [sp, #16]
 8011906:	7013      	strb	r3, [r2, #0]
 8011908:	e7a8      	b.n	801185c <_printf_i+0x128>
 801190a:	6923      	ldr	r3, [r4, #16]
 801190c:	0032      	movs	r2, r6
 801190e:	9906      	ldr	r1, [sp, #24]
 8011910:	9805      	ldr	r0, [sp, #20]
 8011912:	9d07      	ldr	r5, [sp, #28]
 8011914:	47a8      	blx	r5
 8011916:	1c43      	adds	r3, r0, #1
 8011918:	d0aa      	beq.n	8011870 <_printf_i+0x13c>
 801191a:	6823      	ldr	r3, [r4, #0]
 801191c:	079b      	lsls	r3, r3, #30
 801191e:	d415      	bmi.n	801194c <_printf_i+0x218>
 8011920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011922:	68e0      	ldr	r0, [r4, #12]
 8011924:	4298      	cmp	r0, r3
 8011926:	daa5      	bge.n	8011874 <_printf_i+0x140>
 8011928:	0018      	movs	r0, r3
 801192a:	e7a3      	b.n	8011874 <_printf_i+0x140>
 801192c:	0022      	movs	r2, r4
 801192e:	2301      	movs	r3, #1
 8011930:	9906      	ldr	r1, [sp, #24]
 8011932:	9805      	ldr	r0, [sp, #20]
 8011934:	9e07      	ldr	r6, [sp, #28]
 8011936:	3219      	adds	r2, #25
 8011938:	47b0      	blx	r6
 801193a:	1c43      	adds	r3, r0, #1
 801193c:	d098      	beq.n	8011870 <_printf_i+0x13c>
 801193e:	3501      	adds	r5, #1
 8011940:	68e3      	ldr	r3, [r4, #12]
 8011942:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011944:	1a9b      	subs	r3, r3, r2
 8011946:	42ab      	cmp	r3, r5
 8011948:	dcf0      	bgt.n	801192c <_printf_i+0x1f8>
 801194a:	e7e9      	b.n	8011920 <_printf_i+0x1ec>
 801194c:	2500      	movs	r5, #0
 801194e:	e7f7      	b.n	8011940 <_printf_i+0x20c>
 8011950:	0801528e 	.word	0x0801528e
 8011954:	0801529f 	.word	0x0801529f

08011958 <siprintf>:
 8011958:	b40e      	push	{r1, r2, r3}
 801195a:	b500      	push	{lr}
 801195c:	490b      	ldr	r1, [pc, #44]	; (801198c <siprintf+0x34>)
 801195e:	b09c      	sub	sp, #112	; 0x70
 8011960:	ab1d      	add	r3, sp, #116	; 0x74
 8011962:	9002      	str	r0, [sp, #8]
 8011964:	9006      	str	r0, [sp, #24]
 8011966:	9107      	str	r1, [sp, #28]
 8011968:	9104      	str	r1, [sp, #16]
 801196a:	4809      	ldr	r0, [pc, #36]	; (8011990 <siprintf+0x38>)
 801196c:	4909      	ldr	r1, [pc, #36]	; (8011994 <siprintf+0x3c>)
 801196e:	cb04      	ldmia	r3!, {r2}
 8011970:	9105      	str	r1, [sp, #20]
 8011972:	6800      	ldr	r0, [r0, #0]
 8011974:	a902      	add	r1, sp, #8
 8011976:	9301      	str	r3, [sp, #4]
 8011978:	f001 fbee 	bl	8013158 <_svfiprintf_r>
 801197c:	2300      	movs	r3, #0
 801197e:	9a02      	ldr	r2, [sp, #8]
 8011980:	7013      	strb	r3, [r2, #0]
 8011982:	b01c      	add	sp, #112	; 0x70
 8011984:	bc08      	pop	{r3}
 8011986:	b003      	add	sp, #12
 8011988:	4718      	bx	r3
 801198a:	46c0      	nop			; (mov r8, r8)
 801198c:	7fffffff 	.word	0x7fffffff
 8011990:	2000003c 	.word	0x2000003c
 8011994:	ffff0208 	.word	0xffff0208

08011998 <strcat>:
 8011998:	0002      	movs	r2, r0
 801199a:	b510      	push	{r4, lr}
 801199c:	7813      	ldrb	r3, [r2, #0]
 801199e:	0014      	movs	r4, r2
 80119a0:	3201      	adds	r2, #1
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d1fa      	bne.n	801199c <strcat+0x4>
 80119a6:	5cca      	ldrb	r2, [r1, r3]
 80119a8:	54e2      	strb	r2, [r4, r3]
 80119aa:	3301      	adds	r3, #1
 80119ac:	2a00      	cmp	r2, #0
 80119ae:	d1fa      	bne.n	80119a6 <strcat+0xe>
 80119b0:	bd10      	pop	{r4, pc}

080119b2 <quorem>:
 80119b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80119b4:	0006      	movs	r6, r0
 80119b6:	690b      	ldr	r3, [r1, #16]
 80119b8:	6932      	ldr	r2, [r6, #16]
 80119ba:	b087      	sub	sp, #28
 80119bc:	2000      	movs	r0, #0
 80119be:	9103      	str	r1, [sp, #12]
 80119c0:	429a      	cmp	r2, r3
 80119c2:	db65      	blt.n	8011a90 <quorem+0xde>
 80119c4:	3b01      	subs	r3, #1
 80119c6:	009c      	lsls	r4, r3, #2
 80119c8:	9300      	str	r3, [sp, #0]
 80119ca:	000b      	movs	r3, r1
 80119cc:	3314      	adds	r3, #20
 80119ce:	9305      	str	r3, [sp, #20]
 80119d0:	191b      	adds	r3, r3, r4
 80119d2:	9304      	str	r3, [sp, #16]
 80119d4:	0033      	movs	r3, r6
 80119d6:	3314      	adds	r3, #20
 80119d8:	9302      	str	r3, [sp, #8]
 80119da:	191c      	adds	r4, r3, r4
 80119dc:	9b04      	ldr	r3, [sp, #16]
 80119de:	6827      	ldr	r7, [r4, #0]
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	0038      	movs	r0, r7
 80119e4:	1c5d      	adds	r5, r3, #1
 80119e6:	0029      	movs	r1, r5
 80119e8:	9301      	str	r3, [sp, #4]
 80119ea:	f7ee fba9 	bl	8000140 <__udivsi3>
 80119ee:	9001      	str	r0, [sp, #4]
 80119f0:	42af      	cmp	r7, r5
 80119f2:	d324      	bcc.n	8011a3e <quorem+0x8c>
 80119f4:	2500      	movs	r5, #0
 80119f6:	46ac      	mov	ip, r5
 80119f8:	9802      	ldr	r0, [sp, #8]
 80119fa:	9f05      	ldr	r7, [sp, #20]
 80119fc:	cf08      	ldmia	r7!, {r3}
 80119fe:	9a01      	ldr	r2, [sp, #4]
 8011a00:	b299      	uxth	r1, r3
 8011a02:	4351      	muls	r1, r2
 8011a04:	0c1b      	lsrs	r3, r3, #16
 8011a06:	4353      	muls	r3, r2
 8011a08:	1949      	adds	r1, r1, r5
 8011a0a:	0c0a      	lsrs	r2, r1, #16
 8011a0c:	189b      	adds	r3, r3, r2
 8011a0e:	6802      	ldr	r2, [r0, #0]
 8011a10:	b289      	uxth	r1, r1
 8011a12:	b292      	uxth	r2, r2
 8011a14:	4462      	add	r2, ip
 8011a16:	1a52      	subs	r2, r2, r1
 8011a18:	6801      	ldr	r1, [r0, #0]
 8011a1a:	0c1d      	lsrs	r5, r3, #16
 8011a1c:	0c09      	lsrs	r1, r1, #16
 8011a1e:	b29b      	uxth	r3, r3
 8011a20:	1acb      	subs	r3, r1, r3
 8011a22:	1411      	asrs	r1, r2, #16
 8011a24:	185b      	adds	r3, r3, r1
 8011a26:	1419      	asrs	r1, r3, #16
 8011a28:	b292      	uxth	r2, r2
 8011a2a:	041b      	lsls	r3, r3, #16
 8011a2c:	431a      	orrs	r2, r3
 8011a2e:	9b04      	ldr	r3, [sp, #16]
 8011a30:	468c      	mov	ip, r1
 8011a32:	c004      	stmia	r0!, {r2}
 8011a34:	42bb      	cmp	r3, r7
 8011a36:	d2e1      	bcs.n	80119fc <quorem+0x4a>
 8011a38:	6823      	ldr	r3, [r4, #0]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d030      	beq.n	8011aa0 <quorem+0xee>
 8011a3e:	0030      	movs	r0, r6
 8011a40:	9903      	ldr	r1, [sp, #12]
 8011a42:	f001 f901 	bl	8012c48 <__mcmp>
 8011a46:	2800      	cmp	r0, #0
 8011a48:	db21      	blt.n	8011a8e <quorem+0xdc>
 8011a4a:	0030      	movs	r0, r6
 8011a4c:	2400      	movs	r4, #0
 8011a4e:	9b01      	ldr	r3, [sp, #4]
 8011a50:	9903      	ldr	r1, [sp, #12]
 8011a52:	3301      	adds	r3, #1
 8011a54:	9301      	str	r3, [sp, #4]
 8011a56:	3014      	adds	r0, #20
 8011a58:	3114      	adds	r1, #20
 8011a5a:	6803      	ldr	r3, [r0, #0]
 8011a5c:	c920      	ldmia	r1!, {r5}
 8011a5e:	b29a      	uxth	r2, r3
 8011a60:	1914      	adds	r4, r2, r4
 8011a62:	b2aa      	uxth	r2, r5
 8011a64:	1aa2      	subs	r2, r4, r2
 8011a66:	0c1b      	lsrs	r3, r3, #16
 8011a68:	0c2d      	lsrs	r5, r5, #16
 8011a6a:	1414      	asrs	r4, r2, #16
 8011a6c:	1b5b      	subs	r3, r3, r5
 8011a6e:	191b      	adds	r3, r3, r4
 8011a70:	141c      	asrs	r4, r3, #16
 8011a72:	b292      	uxth	r2, r2
 8011a74:	041b      	lsls	r3, r3, #16
 8011a76:	4313      	orrs	r3, r2
 8011a78:	c008      	stmia	r0!, {r3}
 8011a7a:	9b04      	ldr	r3, [sp, #16]
 8011a7c:	428b      	cmp	r3, r1
 8011a7e:	d2ec      	bcs.n	8011a5a <quorem+0xa8>
 8011a80:	9b00      	ldr	r3, [sp, #0]
 8011a82:	9a02      	ldr	r2, [sp, #8]
 8011a84:	009b      	lsls	r3, r3, #2
 8011a86:	18d3      	adds	r3, r2, r3
 8011a88:	681a      	ldr	r2, [r3, #0]
 8011a8a:	2a00      	cmp	r2, #0
 8011a8c:	d015      	beq.n	8011aba <quorem+0x108>
 8011a8e:	9801      	ldr	r0, [sp, #4]
 8011a90:	b007      	add	sp, #28
 8011a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a94:	6823      	ldr	r3, [r4, #0]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d106      	bne.n	8011aa8 <quorem+0xf6>
 8011a9a:	9b00      	ldr	r3, [sp, #0]
 8011a9c:	3b01      	subs	r3, #1
 8011a9e:	9300      	str	r3, [sp, #0]
 8011aa0:	9b02      	ldr	r3, [sp, #8]
 8011aa2:	3c04      	subs	r4, #4
 8011aa4:	42a3      	cmp	r3, r4
 8011aa6:	d3f5      	bcc.n	8011a94 <quorem+0xe2>
 8011aa8:	9b00      	ldr	r3, [sp, #0]
 8011aaa:	6133      	str	r3, [r6, #16]
 8011aac:	e7c7      	b.n	8011a3e <quorem+0x8c>
 8011aae:	681a      	ldr	r2, [r3, #0]
 8011ab0:	2a00      	cmp	r2, #0
 8011ab2:	d106      	bne.n	8011ac2 <quorem+0x110>
 8011ab4:	9a00      	ldr	r2, [sp, #0]
 8011ab6:	3a01      	subs	r2, #1
 8011ab8:	9200      	str	r2, [sp, #0]
 8011aba:	9a02      	ldr	r2, [sp, #8]
 8011abc:	3b04      	subs	r3, #4
 8011abe:	429a      	cmp	r2, r3
 8011ac0:	d3f5      	bcc.n	8011aae <quorem+0xfc>
 8011ac2:	9b00      	ldr	r3, [sp, #0]
 8011ac4:	6133      	str	r3, [r6, #16]
 8011ac6:	e7e2      	b.n	8011a8e <quorem+0xdc>

08011ac8 <_dtoa_r>:
 8011ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011aca:	b09d      	sub	sp, #116	; 0x74
 8011acc:	9202      	str	r2, [sp, #8]
 8011ace:	9303      	str	r3, [sp, #12]
 8011ad0:	9b02      	ldr	r3, [sp, #8]
 8011ad2:	9c03      	ldr	r4, [sp, #12]
 8011ad4:	9308      	str	r3, [sp, #32]
 8011ad6:	9409      	str	r4, [sp, #36]	; 0x24
 8011ad8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8011ada:	0007      	movs	r7, r0
 8011adc:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8011ade:	2c00      	cmp	r4, #0
 8011ae0:	d10e      	bne.n	8011b00 <_dtoa_r+0x38>
 8011ae2:	2010      	movs	r0, #16
 8011ae4:	f000 fe0e 	bl	8012704 <malloc>
 8011ae8:	1e02      	subs	r2, r0, #0
 8011aea:	6278      	str	r0, [r7, #36]	; 0x24
 8011aec:	d104      	bne.n	8011af8 <_dtoa_r+0x30>
 8011aee:	21ea      	movs	r1, #234	; 0xea
 8011af0:	4bc7      	ldr	r3, [pc, #796]	; (8011e10 <_dtoa_r+0x348>)
 8011af2:	48c8      	ldr	r0, [pc, #800]	; (8011e14 <_dtoa_r+0x34c>)
 8011af4:	f001 fc42 	bl	801337c <__assert_func>
 8011af8:	6044      	str	r4, [r0, #4]
 8011afa:	6084      	str	r4, [r0, #8]
 8011afc:	6004      	str	r4, [r0, #0]
 8011afe:	60c4      	str	r4, [r0, #12]
 8011b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b02:	6819      	ldr	r1, [r3, #0]
 8011b04:	2900      	cmp	r1, #0
 8011b06:	d00a      	beq.n	8011b1e <_dtoa_r+0x56>
 8011b08:	685a      	ldr	r2, [r3, #4]
 8011b0a:	2301      	movs	r3, #1
 8011b0c:	4093      	lsls	r3, r2
 8011b0e:	604a      	str	r2, [r1, #4]
 8011b10:	608b      	str	r3, [r1, #8]
 8011b12:	0038      	movs	r0, r7
 8011b14:	f000 fe58 	bl	80127c8 <_Bfree>
 8011b18:	2200      	movs	r2, #0
 8011b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b1c:	601a      	str	r2, [r3, #0]
 8011b1e:	9b03      	ldr	r3, [sp, #12]
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	da20      	bge.n	8011b66 <_dtoa_r+0x9e>
 8011b24:	2301      	movs	r3, #1
 8011b26:	602b      	str	r3, [r5, #0]
 8011b28:	9b03      	ldr	r3, [sp, #12]
 8011b2a:	005b      	lsls	r3, r3, #1
 8011b2c:	085b      	lsrs	r3, r3, #1
 8011b2e:	9309      	str	r3, [sp, #36]	; 0x24
 8011b30:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8011b32:	4bb9      	ldr	r3, [pc, #740]	; (8011e18 <_dtoa_r+0x350>)
 8011b34:	4ab8      	ldr	r2, [pc, #736]	; (8011e18 <_dtoa_r+0x350>)
 8011b36:	402b      	ands	r3, r5
 8011b38:	4293      	cmp	r3, r2
 8011b3a:	d117      	bne.n	8011b6c <_dtoa_r+0xa4>
 8011b3c:	4bb7      	ldr	r3, [pc, #732]	; (8011e1c <_dtoa_r+0x354>)
 8011b3e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8011b40:	0328      	lsls	r0, r5, #12
 8011b42:	6013      	str	r3, [r2, #0]
 8011b44:	9b02      	ldr	r3, [sp, #8]
 8011b46:	0b00      	lsrs	r0, r0, #12
 8011b48:	4318      	orrs	r0, r3
 8011b4a:	d101      	bne.n	8011b50 <_dtoa_r+0x88>
 8011b4c:	f000 fdbf 	bl	80126ce <_dtoa_r+0xc06>
 8011b50:	48b3      	ldr	r0, [pc, #716]	; (8011e20 <_dtoa_r+0x358>)
 8011b52:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011b54:	9006      	str	r0, [sp, #24]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d002      	beq.n	8011b60 <_dtoa_r+0x98>
 8011b5a:	4bb2      	ldr	r3, [pc, #712]	; (8011e24 <_dtoa_r+0x35c>)
 8011b5c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8011b5e:	6013      	str	r3, [r2, #0]
 8011b60:	9806      	ldr	r0, [sp, #24]
 8011b62:	b01d      	add	sp, #116	; 0x74
 8011b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b66:	2300      	movs	r3, #0
 8011b68:	602b      	str	r3, [r5, #0]
 8011b6a:	e7e1      	b.n	8011b30 <_dtoa_r+0x68>
 8011b6c:	9b08      	ldr	r3, [sp, #32]
 8011b6e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8011b70:	9312      	str	r3, [sp, #72]	; 0x48
 8011b72:	9413      	str	r4, [sp, #76]	; 0x4c
 8011b74:	9812      	ldr	r0, [sp, #72]	; 0x48
 8011b76:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8011b78:	2200      	movs	r2, #0
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	f7ee fc66 	bl	800044c <__aeabi_dcmpeq>
 8011b80:	1e04      	subs	r4, r0, #0
 8011b82:	d009      	beq.n	8011b98 <_dtoa_r+0xd0>
 8011b84:	2301      	movs	r3, #1
 8011b86:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8011b88:	6013      	str	r3, [r2, #0]
 8011b8a:	4ba7      	ldr	r3, [pc, #668]	; (8011e28 <_dtoa_r+0x360>)
 8011b8c:	9306      	str	r3, [sp, #24]
 8011b8e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d0e5      	beq.n	8011b60 <_dtoa_r+0x98>
 8011b94:	4ba5      	ldr	r3, [pc, #660]	; (8011e2c <_dtoa_r+0x364>)
 8011b96:	e7e1      	b.n	8011b5c <_dtoa_r+0x94>
 8011b98:	ab1a      	add	r3, sp, #104	; 0x68
 8011b9a:	9301      	str	r3, [sp, #4]
 8011b9c:	ab1b      	add	r3, sp, #108	; 0x6c
 8011b9e:	9300      	str	r3, [sp, #0]
 8011ba0:	0038      	movs	r0, r7
 8011ba2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011ba4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011ba6:	f001 f903 	bl	8012db0 <__d2b>
 8011baa:	006e      	lsls	r6, r5, #1
 8011bac:	9005      	str	r0, [sp, #20]
 8011bae:	0d76      	lsrs	r6, r6, #21
 8011bb0:	d100      	bne.n	8011bb4 <_dtoa_r+0xec>
 8011bb2:	e07c      	b.n	8011cae <_dtoa_r+0x1e6>
 8011bb4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8011bb6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8011bb8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011bba:	4a9d      	ldr	r2, [pc, #628]	; (8011e30 <_dtoa_r+0x368>)
 8011bbc:	031b      	lsls	r3, r3, #12
 8011bbe:	0b1b      	lsrs	r3, r3, #12
 8011bc0:	431a      	orrs	r2, r3
 8011bc2:	0011      	movs	r1, r2
 8011bc4:	4b9b      	ldr	r3, [pc, #620]	; (8011e34 <_dtoa_r+0x36c>)
 8011bc6:	9418      	str	r4, [sp, #96]	; 0x60
 8011bc8:	18f6      	adds	r6, r6, r3
 8011bca:	2200      	movs	r2, #0
 8011bcc:	4b9a      	ldr	r3, [pc, #616]	; (8011e38 <_dtoa_r+0x370>)
 8011bce:	f7f0 fd25 	bl	800261c <__aeabi_dsub>
 8011bd2:	4a9a      	ldr	r2, [pc, #616]	; (8011e3c <_dtoa_r+0x374>)
 8011bd4:	4b9a      	ldr	r3, [pc, #616]	; (8011e40 <_dtoa_r+0x378>)
 8011bd6:	f7f0 fab5 	bl	8002144 <__aeabi_dmul>
 8011bda:	4a9a      	ldr	r2, [pc, #616]	; (8011e44 <_dtoa_r+0x37c>)
 8011bdc:	4b9a      	ldr	r3, [pc, #616]	; (8011e48 <_dtoa_r+0x380>)
 8011bde:	f7ef fb73 	bl	80012c8 <__aeabi_dadd>
 8011be2:	0004      	movs	r4, r0
 8011be4:	0030      	movs	r0, r6
 8011be6:	000d      	movs	r5, r1
 8011be8:	f7f1 f8fe 	bl	8002de8 <__aeabi_i2d>
 8011bec:	4a97      	ldr	r2, [pc, #604]	; (8011e4c <_dtoa_r+0x384>)
 8011bee:	4b98      	ldr	r3, [pc, #608]	; (8011e50 <_dtoa_r+0x388>)
 8011bf0:	f7f0 faa8 	bl	8002144 <__aeabi_dmul>
 8011bf4:	0002      	movs	r2, r0
 8011bf6:	000b      	movs	r3, r1
 8011bf8:	0020      	movs	r0, r4
 8011bfa:	0029      	movs	r1, r5
 8011bfc:	f7ef fb64 	bl	80012c8 <__aeabi_dadd>
 8011c00:	0004      	movs	r4, r0
 8011c02:	000d      	movs	r5, r1
 8011c04:	f7f1 f8ba 	bl	8002d7c <__aeabi_d2iz>
 8011c08:	2200      	movs	r2, #0
 8011c0a:	9002      	str	r0, [sp, #8]
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	0020      	movs	r0, r4
 8011c10:	0029      	movs	r1, r5
 8011c12:	f7ee fc21 	bl	8000458 <__aeabi_dcmplt>
 8011c16:	2800      	cmp	r0, #0
 8011c18:	d00b      	beq.n	8011c32 <_dtoa_r+0x16a>
 8011c1a:	9802      	ldr	r0, [sp, #8]
 8011c1c:	f7f1 f8e4 	bl	8002de8 <__aeabi_i2d>
 8011c20:	002b      	movs	r3, r5
 8011c22:	0022      	movs	r2, r4
 8011c24:	f7ee fc12 	bl	800044c <__aeabi_dcmpeq>
 8011c28:	4243      	negs	r3, r0
 8011c2a:	4158      	adcs	r0, r3
 8011c2c:	9b02      	ldr	r3, [sp, #8]
 8011c2e:	1a1b      	subs	r3, r3, r0
 8011c30:	9302      	str	r3, [sp, #8]
 8011c32:	2301      	movs	r3, #1
 8011c34:	9316      	str	r3, [sp, #88]	; 0x58
 8011c36:	9b02      	ldr	r3, [sp, #8]
 8011c38:	2b16      	cmp	r3, #22
 8011c3a:	d80f      	bhi.n	8011c5c <_dtoa_r+0x194>
 8011c3c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8011c3e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8011c40:	00da      	lsls	r2, r3, #3
 8011c42:	4b84      	ldr	r3, [pc, #528]	; (8011e54 <_dtoa_r+0x38c>)
 8011c44:	189b      	adds	r3, r3, r2
 8011c46:	681a      	ldr	r2, [r3, #0]
 8011c48:	685b      	ldr	r3, [r3, #4]
 8011c4a:	f7ee fc05 	bl	8000458 <__aeabi_dcmplt>
 8011c4e:	2800      	cmp	r0, #0
 8011c50:	d049      	beq.n	8011ce6 <_dtoa_r+0x21e>
 8011c52:	9b02      	ldr	r3, [sp, #8]
 8011c54:	3b01      	subs	r3, #1
 8011c56:	9302      	str	r3, [sp, #8]
 8011c58:	2300      	movs	r3, #0
 8011c5a:	9316      	str	r3, [sp, #88]	; 0x58
 8011c5c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8011c5e:	1b9e      	subs	r6, r3, r6
 8011c60:	2300      	movs	r3, #0
 8011c62:	930a      	str	r3, [sp, #40]	; 0x28
 8011c64:	0033      	movs	r3, r6
 8011c66:	3b01      	subs	r3, #1
 8011c68:	930d      	str	r3, [sp, #52]	; 0x34
 8011c6a:	d504      	bpl.n	8011c76 <_dtoa_r+0x1ae>
 8011c6c:	2301      	movs	r3, #1
 8011c6e:	1b9b      	subs	r3, r3, r6
 8011c70:	930a      	str	r3, [sp, #40]	; 0x28
 8011c72:	2300      	movs	r3, #0
 8011c74:	930d      	str	r3, [sp, #52]	; 0x34
 8011c76:	9b02      	ldr	r3, [sp, #8]
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	db36      	blt.n	8011cea <_dtoa_r+0x222>
 8011c7c:	9a02      	ldr	r2, [sp, #8]
 8011c7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011c80:	4694      	mov	ip, r2
 8011c82:	4463      	add	r3, ip
 8011c84:	930d      	str	r3, [sp, #52]	; 0x34
 8011c86:	2300      	movs	r3, #0
 8011c88:	9215      	str	r2, [sp, #84]	; 0x54
 8011c8a:	930e      	str	r3, [sp, #56]	; 0x38
 8011c8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011c8e:	2401      	movs	r4, #1
 8011c90:	2b09      	cmp	r3, #9
 8011c92:	d864      	bhi.n	8011d5e <_dtoa_r+0x296>
 8011c94:	2b05      	cmp	r3, #5
 8011c96:	dd02      	ble.n	8011c9e <_dtoa_r+0x1d6>
 8011c98:	2400      	movs	r4, #0
 8011c9a:	3b04      	subs	r3, #4
 8011c9c:	9322      	str	r3, [sp, #136]	; 0x88
 8011c9e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011ca0:	1e98      	subs	r0, r3, #2
 8011ca2:	2803      	cmp	r0, #3
 8011ca4:	d864      	bhi.n	8011d70 <_dtoa_r+0x2a8>
 8011ca6:	f7ee fa37 	bl	8000118 <__gnu_thumb1_case_uqi>
 8011caa:	3829      	.short	0x3829
 8011cac:	5836      	.short	0x5836
 8011cae:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8011cb0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8011cb2:	189e      	adds	r6, r3, r2
 8011cb4:	4b68      	ldr	r3, [pc, #416]	; (8011e58 <_dtoa_r+0x390>)
 8011cb6:	18f2      	adds	r2, r6, r3
 8011cb8:	2a20      	cmp	r2, #32
 8011cba:	dd0f      	ble.n	8011cdc <_dtoa_r+0x214>
 8011cbc:	2340      	movs	r3, #64	; 0x40
 8011cbe:	1a9b      	subs	r3, r3, r2
 8011cc0:	409d      	lsls	r5, r3
 8011cc2:	4b66      	ldr	r3, [pc, #408]	; (8011e5c <_dtoa_r+0x394>)
 8011cc4:	9802      	ldr	r0, [sp, #8]
 8011cc6:	18f3      	adds	r3, r6, r3
 8011cc8:	40d8      	lsrs	r0, r3
 8011cca:	4328      	orrs	r0, r5
 8011ccc:	f7f1 f8bc 	bl	8002e48 <__aeabi_ui2d>
 8011cd0:	2301      	movs	r3, #1
 8011cd2:	4c63      	ldr	r4, [pc, #396]	; (8011e60 <_dtoa_r+0x398>)
 8011cd4:	3e01      	subs	r6, #1
 8011cd6:	1909      	adds	r1, r1, r4
 8011cd8:	9318      	str	r3, [sp, #96]	; 0x60
 8011cda:	e776      	b.n	8011bca <_dtoa_r+0x102>
 8011cdc:	2320      	movs	r3, #32
 8011cde:	9802      	ldr	r0, [sp, #8]
 8011ce0:	1a9b      	subs	r3, r3, r2
 8011ce2:	4098      	lsls	r0, r3
 8011ce4:	e7f2      	b.n	8011ccc <_dtoa_r+0x204>
 8011ce6:	9016      	str	r0, [sp, #88]	; 0x58
 8011ce8:	e7b8      	b.n	8011c5c <_dtoa_r+0x194>
 8011cea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011cec:	9a02      	ldr	r2, [sp, #8]
 8011cee:	1a9b      	subs	r3, r3, r2
 8011cf0:	930a      	str	r3, [sp, #40]	; 0x28
 8011cf2:	4253      	negs	r3, r2
 8011cf4:	930e      	str	r3, [sp, #56]	; 0x38
 8011cf6:	2300      	movs	r3, #0
 8011cf8:	9315      	str	r3, [sp, #84]	; 0x54
 8011cfa:	e7c7      	b.n	8011c8c <_dtoa_r+0x1c4>
 8011cfc:	2300      	movs	r3, #0
 8011cfe:	930f      	str	r3, [sp, #60]	; 0x3c
 8011d00:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011d02:	930c      	str	r3, [sp, #48]	; 0x30
 8011d04:	9307      	str	r3, [sp, #28]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	dc13      	bgt.n	8011d32 <_dtoa_r+0x26a>
 8011d0a:	2301      	movs	r3, #1
 8011d0c:	001a      	movs	r2, r3
 8011d0e:	930c      	str	r3, [sp, #48]	; 0x30
 8011d10:	9307      	str	r3, [sp, #28]
 8011d12:	9223      	str	r2, [sp, #140]	; 0x8c
 8011d14:	e00d      	b.n	8011d32 <_dtoa_r+0x26a>
 8011d16:	2301      	movs	r3, #1
 8011d18:	e7f1      	b.n	8011cfe <_dtoa_r+0x236>
 8011d1a:	2300      	movs	r3, #0
 8011d1c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8011d1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8011d20:	4694      	mov	ip, r2
 8011d22:	9b02      	ldr	r3, [sp, #8]
 8011d24:	4463      	add	r3, ip
 8011d26:	930c      	str	r3, [sp, #48]	; 0x30
 8011d28:	3301      	adds	r3, #1
 8011d2a:	9307      	str	r3, [sp, #28]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	dc00      	bgt.n	8011d32 <_dtoa_r+0x26a>
 8011d30:	2301      	movs	r3, #1
 8011d32:	2200      	movs	r2, #0
 8011d34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011d36:	6042      	str	r2, [r0, #4]
 8011d38:	3204      	adds	r2, #4
 8011d3a:	0015      	movs	r5, r2
 8011d3c:	3514      	adds	r5, #20
 8011d3e:	6841      	ldr	r1, [r0, #4]
 8011d40:	429d      	cmp	r5, r3
 8011d42:	d919      	bls.n	8011d78 <_dtoa_r+0x2b0>
 8011d44:	0038      	movs	r0, r7
 8011d46:	f000 fcfb 	bl	8012740 <_Balloc>
 8011d4a:	9006      	str	r0, [sp, #24]
 8011d4c:	2800      	cmp	r0, #0
 8011d4e:	d117      	bne.n	8011d80 <_dtoa_r+0x2b8>
 8011d50:	21d5      	movs	r1, #213	; 0xd5
 8011d52:	0002      	movs	r2, r0
 8011d54:	4b43      	ldr	r3, [pc, #268]	; (8011e64 <_dtoa_r+0x39c>)
 8011d56:	0049      	lsls	r1, r1, #1
 8011d58:	e6cb      	b.n	8011af2 <_dtoa_r+0x2a>
 8011d5a:	2301      	movs	r3, #1
 8011d5c:	e7de      	b.n	8011d1c <_dtoa_r+0x254>
 8011d5e:	2300      	movs	r3, #0
 8011d60:	940f      	str	r4, [sp, #60]	; 0x3c
 8011d62:	9322      	str	r3, [sp, #136]	; 0x88
 8011d64:	3b01      	subs	r3, #1
 8011d66:	930c      	str	r3, [sp, #48]	; 0x30
 8011d68:	9307      	str	r3, [sp, #28]
 8011d6a:	2200      	movs	r2, #0
 8011d6c:	3313      	adds	r3, #19
 8011d6e:	e7d0      	b.n	8011d12 <_dtoa_r+0x24a>
 8011d70:	2301      	movs	r3, #1
 8011d72:	930f      	str	r3, [sp, #60]	; 0x3c
 8011d74:	3b02      	subs	r3, #2
 8011d76:	e7f6      	b.n	8011d66 <_dtoa_r+0x29e>
 8011d78:	3101      	adds	r1, #1
 8011d7a:	6041      	str	r1, [r0, #4]
 8011d7c:	0052      	lsls	r2, r2, #1
 8011d7e:	e7dc      	b.n	8011d3a <_dtoa_r+0x272>
 8011d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d82:	9a06      	ldr	r2, [sp, #24]
 8011d84:	601a      	str	r2, [r3, #0]
 8011d86:	9b07      	ldr	r3, [sp, #28]
 8011d88:	2b0e      	cmp	r3, #14
 8011d8a:	d900      	bls.n	8011d8e <_dtoa_r+0x2c6>
 8011d8c:	e0eb      	b.n	8011f66 <_dtoa_r+0x49e>
 8011d8e:	2c00      	cmp	r4, #0
 8011d90:	d100      	bne.n	8011d94 <_dtoa_r+0x2cc>
 8011d92:	e0e8      	b.n	8011f66 <_dtoa_r+0x49e>
 8011d94:	9b02      	ldr	r3, [sp, #8]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	dd68      	ble.n	8011e6c <_dtoa_r+0x3a4>
 8011d9a:	001a      	movs	r2, r3
 8011d9c:	210f      	movs	r1, #15
 8011d9e:	4b2d      	ldr	r3, [pc, #180]	; (8011e54 <_dtoa_r+0x38c>)
 8011da0:	400a      	ands	r2, r1
 8011da2:	00d2      	lsls	r2, r2, #3
 8011da4:	189b      	adds	r3, r3, r2
 8011da6:	681d      	ldr	r5, [r3, #0]
 8011da8:	685e      	ldr	r6, [r3, #4]
 8011daa:	9b02      	ldr	r3, [sp, #8]
 8011dac:	111c      	asrs	r4, r3, #4
 8011dae:	2302      	movs	r3, #2
 8011db0:	9310      	str	r3, [sp, #64]	; 0x40
 8011db2:	9b02      	ldr	r3, [sp, #8]
 8011db4:	05db      	lsls	r3, r3, #23
 8011db6:	d50b      	bpl.n	8011dd0 <_dtoa_r+0x308>
 8011db8:	4b2b      	ldr	r3, [pc, #172]	; (8011e68 <_dtoa_r+0x3a0>)
 8011dba:	400c      	ands	r4, r1
 8011dbc:	6a1a      	ldr	r2, [r3, #32]
 8011dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011dc0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8011dc2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8011dc4:	f7ef fdbc 	bl	8001940 <__aeabi_ddiv>
 8011dc8:	2303      	movs	r3, #3
 8011dca:	9008      	str	r0, [sp, #32]
 8011dcc:	9109      	str	r1, [sp, #36]	; 0x24
 8011dce:	9310      	str	r3, [sp, #64]	; 0x40
 8011dd0:	4b25      	ldr	r3, [pc, #148]	; (8011e68 <_dtoa_r+0x3a0>)
 8011dd2:	9314      	str	r3, [sp, #80]	; 0x50
 8011dd4:	2c00      	cmp	r4, #0
 8011dd6:	d108      	bne.n	8011dea <_dtoa_r+0x322>
 8011dd8:	9808      	ldr	r0, [sp, #32]
 8011dda:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011ddc:	002a      	movs	r2, r5
 8011dde:	0033      	movs	r3, r6
 8011de0:	f7ef fdae 	bl	8001940 <__aeabi_ddiv>
 8011de4:	9008      	str	r0, [sp, #32]
 8011de6:	9109      	str	r1, [sp, #36]	; 0x24
 8011de8:	e05c      	b.n	8011ea4 <_dtoa_r+0x3dc>
 8011dea:	2301      	movs	r3, #1
 8011dec:	421c      	tst	r4, r3
 8011dee:	d00b      	beq.n	8011e08 <_dtoa_r+0x340>
 8011df0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011df2:	0028      	movs	r0, r5
 8011df4:	3301      	adds	r3, #1
 8011df6:	9310      	str	r3, [sp, #64]	; 0x40
 8011df8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011dfa:	0031      	movs	r1, r6
 8011dfc:	681a      	ldr	r2, [r3, #0]
 8011dfe:	685b      	ldr	r3, [r3, #4]
 8011e00:	f7f0 f9a0 	bl	8002144 <__aeabi_dmul>
 8011e04:	0005      	movs	r5, r0
 8011e06:	000e      	movs	r6, r1
 8011e08:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011e0a:	1064      	asrs	r4, r4, #1
 8011e0c:	3308      	adds	r3, #8
 8011e0e:	e7e0      	b.n	8011dd2 <_dtoa_r+0x30a>
 8011e10:	080152bd 	.word	0x080152bd
 8011e14:	080152d4 	.word	0x080152d4
 8011e18:	7ff00000 	.word	0x7ff00000
 8011e1c:	0000270f 	.word	0x0000270f
 8011e20:	080152b9 	.word	0x080152b9
 8011e24:	080152bc 	.word	0x080152bc
 8011e28:	0801528c 	.word	0x0801528c
 8011e2c:	0801528d 	.word	0x0801528d
 8011e30:	3ff00000 	.word	0x3ff00000
 8011e34:	fffffc01 	.word	0xfffffc01
 8011e38:	3ff80000 	.word	0x3ff80000
 8011e3c:	636f4361 	.word	0x636f4361
 8011e40:	3fd287a7 	.word	0x3fd287a7
 8011e44:	8b60c8b3 	.word	0x8b60c8b3
 8011e48:	3fc68a28 	.word	0x3fc68a28
 8011e4c:	509f79fb 	.word	0x509f79fb
 8011e50:	3fd34413 	.word	0x3fd34413
 8011e54:	080153c8 	.word	0x080153c8
 8011e58:	00000432 	.word	0x00000432
 8011e5c:	00000412 	.word	0x00000412
 8011e60:	fe100000 	.word	0xfe100000
 8011e64:	0801532f 	.word	0x0801532f
 8011e68:	080153a0 	.word	0x080153a0
 8011e6c:	2302      	movs	r3, #2
 8011e6e:	9310      	str	r3, [sp, #64]	; 0x40
 8011e70:	9b02      	ldr	r3, [sp, #8]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d016      	beq.n	8011ea4 <_dtoa_r+0x3dc>
 8011e76:	9812      	ldr	r0, [sp, #72]	; 0x48
 8011e78:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8011e7a:	425c      	negs	r4, r3
 8011e7c:	230f      	movs	r3, #15
 8011e7e:	4ab6      	ldr	r2, [pc, #728]	; (8012158 <_dtoa_r+0x690>)
 8011e80:	4023      	ands	r3, r4
 8011e82:	00db      	lsls	r3, r3, #3
 8011e84:	18d3      	adds	r3, r2, r3
 8011e86:	681a      	ldr	r2, [r3, #0]
 8011e88:	685b      	ldr	r3, [r3, #4]
 8011e8a:	f7f0 f95b 	bl	8002144 <__aeabi_dmul>
 8011e8e:	2601      	movs	r6, #1
 8011e90:	2300      	movs	r3, #0
 8011e92:	9008      	str	r0, [sp, #32]
 8011e94:	9109      	str	r1, [sp, #36]	; 0x24
 8011e96:	4db1      	ldr	r5, [pc, #708]	; (801215c <_dtoa_r+0x694>)
 8011e98:	1124      	asrs	r4, r4, #4
 8011e9a:	2c00      	cmp	r4, #0
 8011e9c:	d000      	beq.n	8011ea0 <_dtoa_r+0x3d8>
 8011e9e:	e094      	b.n	8011fca <_dtoa_r+0x502>
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d19f      	bne.n	8011de4 <_dtoa_r+0x31c>
 8011ea4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d100      	bne.n	8011eac <_dtoa_r+0x3e4>
 8011eaa:	e09b      	b.n	8011fe4 <_dtoa_r+0x51c>
 8011eac:	9c08      	ldr	r4, [sp, #32]
 8011eae:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8011eb0:	2200      	movs	r2, #0
 8011eb2:	0020      	movs	r0, r4
 8011eb4:	0029      	movs	r1, r5
 8011eb6:	4baa      	ldr	r3, [pc, #680]	; (8012160 <_dtoa_r+0x698>)
 8011eb8:	f7ee face 	bl	8000458 <__aeabi_dcmplt>
 8011ebc:	2800      	cmp	r0, #0
 8011ebe:	d100      	bne.n	8011ec2 <_dtoa_r+0x3fa>
 8011ec0:	e090      	b.n	8011fe4 <_dtoa_r+0x51c>
 8011ec2:	9b07      	ldr	r3, [sp, #28]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d100      	bne.n	8011eca <_dtoa_r+0x402>
 8011ec8:	e08c      	b.n	8011fe4 <_dtoa_r+0x51c>
 8011eca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	dd46      	ble.n	8011f5e <_dtoa_r+0x496>
 8011ed0:	9b02      	ldr	r3, [sp, #8]
 8011ed2:	2200      	movs	r2, #0
 8011ed4:	0020      	movs	r0, r4
 8011ed6:	0029      	movs	r1, r5
 8011ed8:	1e5e      	subs	r6, r3, #1
 8011eda:	4ba2      	ldr	r3, [pc, #648]	; (8012164 <_dtoa_r+0x69c>)
 8011edc:	f7f0 f932 	bl	8002144 <__aeabi_dmul>
 8011ee0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011ee2:	9008      	str	r0, [sp, #32]
 8011ee4:	9109      	str	r1, [sp, #36]	; 0x24
 8011ee6:	3301      	adds	r3, #1
 8011ee8:	9310      	str	r3, [sp, #64]	; 0x40
 8011eea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011eec:	9810      	ldr	r0, [sp, #64]	; 0x40
 8011eee:	9c08      	ldr	r4, [sp, #32]
 8011ef0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8011ef2:	9314      	str	r3, [sp, #80]	; 0x50
 8011ef4:	f7f0 ff78 	bl	8002de8 <__aeabi_i2d>
 8011ef8:	0022      	movs	r2, r4
 8011efa:	002b      	movs	r3, r5
 8011efc:	f7f0 f922 	bl	8002144 <__aeabi_dmul>
 8011f00:	2200      	movs	r2, #0
 8011f02:	4b99      	ldr	r3, [pc, #612]	; (8012168 <_dtoa_r+0x6a0>)
 8011f04:	f7ef f9e0 	bl	80012c8 <__aeabi_dadd>
 8011f08:	9010      	str	r0, [sp, #64]	; 0x40
 8011f0a:	9111      	str	r1, [sp, #68]	; 0x44
 8011f0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011f0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011f10:	9208      	str	r2, [sp, #32]
 8011f12:	9309      	str	r3, [sp, #36]	; 0x24
 8011f14:	4a95      	ldr	r2, [pc, #596]	; (801216c <_dtoa_r+0x6a4>)
 8011f16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011f18:	4694      	mov	ip, r2
 8011f1a:	4463      	add	r3, ip
 8011f1c:	9317      	str	r3, [sp, #92]	; 0x5c
 8011f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8011f20:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d161      	bne.n	8011fea <_dtoa_r+0x522>
 8011f26:	2200      	movs	r2, #0
 8011f28:	0020      	movs	r0, r4
 8011f2a:	0029      	movs	r1, r5
 8011f2c:	4b90      	ldr	r3, [pc, #576]	; (8012170 <_dtoa_r+0x6a8>)
 8011f2e:	f7f0 fb75 	bl	800261c <__aeabi_dsub>
 8011f32:	9a08      	ldr	r2, [sp, #32]
 8011f34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011f36:	0004      	movs	r4, r0
 8011f38:	000d      	movs	r5, r1
 8011f3a:	f7ee faa1 	bl	8000480 <__aeabi_dcmpgt>
 8011f3e:	2800      	cmp	r0, #0
 8011f40:	d000      	beq.n	8011f44 <_dtoa_r+0x47c>
 8011f42:	e2af      	b.n	80124a4 <_dtoa_r+0x9dc>
 8011f44:	488b      	ldr	r0, [pc, #556]	; (8012174 <_dtoa_r+0x6ac>)
 8011f46:	9911      	ldr	r1, [sp, #68]	; 0x44
 8011f48:	4684      	mov	ip, r0
 8011f4a:	4461      	add	r1, ip
 8011f4c:	000b      	movs	r3, r1
 8011f4e:	0020      	movs	r0, r4
 8011f50:	0029      	movs	r1, r5
 8011f52:	9a08      	ldr	r2, [sp, #32]
 8011f54:	f7ee fa80 	bl	8000458 <__aeabi_dcmplt>
 8011f58:	2800      	cmp	r0, #0
 8011f5a:	d000      	beq.n	8011f5e <_dtoa_r+0x496>
 8011f5c:	e29f      	b.n	801249e <_dtoa_r+0x9d6>
 8011f5e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011f60:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8011f62:	9308      	str	r3, [sp, #32]
 8011f64:	9409      	str	r4, [sp, #36]	; 0x24
 8011f66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	da00      	bge.n	8011f6e <_dtoa_r+0x4a6>
 8011f6c:	e172      	b.n	8012254 <_dtoa_r+0x78c>
 8011f6e:	9a02      	ldr	r2, [sp, #8]
 8011f70:	2a0e      	cmp	r2, #14
 8011f72:	dd00      	ble.n	8011f76 <_dtoa_r+0x4ae>
 8011f74:	e16e      	b.n	8012254 <_dtoa_r+0x78c>
 8011f76:	4b78      	ldr	r3, [pc, #480]	; (8012158 <_dtoa_r+0x690>)
 8011f78:	00d2      	lsls	r2, r2, #3
 8011f7a:	189b      	adds	r3, r3, r2
 8011f7c:	685c      	ldr	r4, [r3, #4]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	930a      	str	r3, [sp, #40]	; 0x28
 8011f82:	940b      	str	r4, [sp, #44]	; 0x2c
 8011f84:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	db00      	blt.n	8011f8c <_dtoa_r+0x4c4>
 8011f8a:	e0f7      	b.n	801217c <_dtoa_r+0x6b4>
 8011f8c:	9b07      	ldr	r3, [sp, #28]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	dd00      	ble.n	8011f94 <_dtoa_r+0x4cc>
 8011f92:	e0f3      	b.n	801217c <_dtoa_r+0x6b4>
 8011f94:	d000      	beq.n	8011f98 <_dtoa_r+0x4d0>
 8011f96:	e282      	b.n	801249e <_dtoa_r+0x9d6>
 8011f98:	980a      	ldr	r0, [sp, #40]	; 0x28
 8011f9a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011f9c:	2200      	movs	r2, #0
 8011f9e:	4b74      	ldr	r3, [pc, #464]	; (8012170 <_dtoa_r+0x6a8>)
 8011fa0:	f7f0 f8d0 	bl	8002144 <__aeabi_dmul>
 8011fa4:	9a08      	ldr	r2, [sp, #32]
 8011fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011fa8:	f7ee fa74 	bl	8000494 <__aeabi_dcmpge>
 8011fac:	9e07      	ldr	r6, [sp, #28]
 8011fae:	0035      	movs	r5, r6
 8011fb0:	2800      	cmp	r0, #0
 8011fb2:	d000      	beq.n	8011fb6 <_dtoa_r+0x4ee>
 8011fb4:	e259      	b.n	801246a <_dtoa_r+0x9a2>
 8011fb6:	9b06      	ldr	r3, [sp, #24]
 8011fb8:	9a06      	ldr	r2, [sp, #24]
 8011fba:	3301      	adds	r3, #1
 8011fbc:	9308      	str	r3, [sp, #32]
 8011fbe:	2331      	movs	r3, #49	; 0x31
 8011fc0:	7013      	strb	r3, [r2, #0]
 8011fc2:	9b02      	ldr	r3, [sp, #8]
 8011fc4:	3301      	adds	r3, #1
 8011fc6:	9302      	str	r3, [sp, #8]
 8011fc8:	e254      	b.n	8012474 <_dtoa_r+0x9ac>
 8011fca:	4234      	tst	r4, r6
 8011fcc:	d007      	beq.n	8011fde <_dtoa_r+0x516>
 8011fce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011fd0:	3301      	adds	r3, #1
 8011fd2:	9310      	str	r3, [sp, #64]	; 0x40
 8011fd4:	682a      	ldr	r2, [r5, #0]
 8011fd6:	686b      	ldr	r3, [r5, #4]
 8011fd8:	f7f0 f8b4 	bl	8002144 <__aeabi_dmul>
 8011fdc:	0033      	movs	r3, r6
 8011fde:	1064      	asrs	r4, r4, #1
 8011fe0:	3508      	adds	r5, #8
 8011fe2:	e75a      	b.n	8011e9a <_dtoa_r+0x3d2>
 8011fe4:	9e02      	ldr	r6, [sp, #8]
 8011fe6:	9b07      	ldr	r3, [sp, #28]
 8011fe8:	e780      	b.n	8011eec <_dtoa_r+0x424>
 8011fea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011fec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8011fee:	1e5a      	subs	r2, r3, #1
 8011ff0:	4b59      	ldr	r3, [pc, #356]	; (8012158 <_dtoa_r+0x690>)
 8011ff2:	00d2      	lsls	r2, r2, #3
 8011ff4:	189b      	adds	r3, r3, r2
 8011ff6:	681a      	ldr	r2, [r3, #0]
 8011ff8:	685b      	ldr	r3, [r3, #4]
 8011ffa:	2900      	cmp	r1, #0
 8011ffc:	d051      	beq.n	80120a2 <_dtoa_r+0x5da>
 8011ffe:	2000      	movs	r0, #0
 8012000:	495d      	ldr	r1, [pc, #372]	; (8012178 <_dtoa_r+0x6b0>)
 8012002:	f7ef fc9d 	bl	8001940 <__aeabi_ddiv>
 8012006:	9a08      	ldr	r2, [sp, #32]
 8012008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801200a:	f7f0 fb07 	bl	800261c <__aeabi_dsub>
 801200e:	9a06      	ldr	r2, [sp, #24]
 8012010:	9b06      	ldr	r3, [sp, #24]
 8012012:	4694      	mov	ip, r2
 8012014:	9317      	str	r3, [sp, #92]	; 0x5c
 8012016:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012018:	9010      	str	r0, [sp, #64]	; 0x40
 801201a:	9111      	str	r1, [sp, #68]	; 0x44
 801201c:	4463      	add	r3, ip
 801201e:	9319      	str	r3, [sp, #100]	; 0x64
 8012020:	0029      	movs	r1, r5
 8012022:	0020      	movs	r0, r4
 8012024:	f7f0 feaa 	bl	8002d7c <__aeabi_d2iz>
 8012028:	9014      	str	r0, [sp, #80]	; 0x50
 801202a:	f7f0 fedd 	bl	8002de8 <__aeabi_i2d>
 801202e:	0002      	movs	r2, r0
 8012030:	000b      	movs	r3, r1
 8012032:	0020      	movs	r0, r4
 8012034:	0029      	movs	r1, r5
 8012036:	f7f0 faf1 	bl	800261c <__aeabi_dsub>
 801203a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801203c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801203e:	3301      	adds	r3, #1
 8012040:	9308      	str	r3, [sp, #32]
 8012042:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012044:	0004      	movs	r4, r0
 8012046:	3330      	adds	r3, #48	; 0x30
 8012048:	7013      	strb	r3, [r2, #0]
 801204a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801204c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801204e:	000d      	movs	r5, r1
 8012050:	f7ee fa02 	bl	8000458 <__aeabi_dcmplt>
 8012054:	2800      	cmp	r0, #0
 8012056:	d175      	bne.n	8012144 <_dtoa_r+0x67c>
 8012058:	0022      	movs	r2, r4
 801205a:	002b      	movs	r3, r5
 801205c:	2000      	movs	r0, #0
 801205e:	4940      	ldr	r1, [pc, #256]	; (8012160 <_dtoa_r+0x698>)
 8012060:	f7f0 fadc 	bl	800261c <__aeabi_dsub>
 8012064:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012066:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012068:	f7ee f9f6 	bl	8000458 <__aeabi_dcmplt>
 801206c:	2800      	cmp	r0, #0
 801206e:	d000      	beq.n	8012072 <_dtoa_r+0x5aa>
 8012070:	e0d2      	b.n	8012218 <_dtoa_r+0x750>
 8012072:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012074:	9a08      	ldr	r2, [sp, #32]
 8012076:	4293      	cmp	r3, r2
 8012078:	d100      	bne.n	801207c <_dtoa_r+0x5b4>
 801207a:	e770      	b.n	8011f5e <_dtoa_r+0x496>
 801207c:	9810      	ldr	r0, [sp, #64]	; 0x40
 801207e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8012080:	2200      	movs	r2, #0
 8012082:	4b38      	ldr	r3, [pc, #224]	; (8012164 <_dtoa_r+0x69c>)
 8012084:	f7f0 f85e 	bl	8002144 <__aeabi_dmul>
 8012088:	4b36      	ldr	r3, [pc, #216]	; (8012164 <_dtoa_r+0x69c>)
 801208a:	9010      	str	r0, [sp, #64]	; 0x40
 801208c:	9111      	str	r1, [sp, #68]	; 0x44
 801208e:	2200      	movs	r2, #0
 8012090:	0020      	movs	r0, r4
 8012092:	0029      	movs	r1, r5
 8012094:	f7f0 f856 	bl	8002144 <__aeabi_dmul>
 8012098:	9b08      	ldr	r3, [sp, #32]
 801209a:	0004      	movs	r4, r0
 801209c:	000d      	movs	r5, r1
 801209e:	9317      	str	r3, [sp, #92]	; 0x5c
 80120a0:	e7be      	b.n	8012020 <_dtoa_r+0x558>
 80120a2:	9808      	ldr	r0, [sp, #32]
 80120a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80120a6:	f7f0 f84d 	bl	8002144 <__aeabi_dmul>
 80120aa:	9a06      	ldr	r2, [sp, #24]
 80120ac:	9b06      	ldr	r3, [sp, #24]
 80120ae:	4694      	mov	ip, r2
 80120b0:	9308      	str	r3, [sp, #32]
 80120b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80120b4:	9010      	str	r0, [sp, #64]	; 0x40
 80120b6:	9111      	str	r1, [sp, #68]	; 0x44
 80120b8:	4463      	add	r3, ip
 80120ba:	9319      	str	r3, [sp, #100]	; 0x64
 80120bc:	0029      	movs	r1, r5
 80120be:	0020      	movs	r0, r4
 80120c0:	f7f0 fe5c 	bl	8002d7c <__aeabi_d2iz>
 80120c4:	9017      	str	r0, [sp, #92]	; 0x5c
 80120c6:	f7f0 fe8f 	bl	8002de8 <__aeabi_i2d>
 80120ca:	0002      	movs	r2, r0
 80120cc:	000b      	movs	r3, r1
 80120ce:	0020      	movs	r0, r4
 80120d0:	0029      	movs	r1, r5
 80120d2:	f7f0 faa3 	bl	800261c <__aeabi_dsub>
 80120d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80120d8:	9a08      	ldr	r2, [sp, #32]
 80120da:	3330      	adds	r3, #48	; 0x30
 80120dc:	7013      	strb	r3, [r2, #0]
 80120de:	0013      	movs	r3, r2
 80120e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80120e2:	3301      	adds	r3, #1
 80120e4:	0004      	movs	r4, r0
 80120e6:	000d      	movs	r5, r1
 80120e8:	9308      	str	r3, [sp, #32]
 80120ea:	4293      	cmp	r3, r2
 80120ec:	d12c      	bne.n	8012148 <_dtoa_r+0x680>
 80120ee:	9810      	ldr	r0, [sp, #64]	; 0x40
 80120f0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80120f2:	9a06      	ldr	r2, [sp, #24]
 80120f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80120f6:	4694      	mov	ip, r2
 80120f8:	4463      	add	r3, ip
 80120fa:	2200      	movs	r2, #0
 80120fc:	9308      	str	r3, [sp, #32]
 80120fe:	4b1e      	ldr	r3, [pc, #120]	; (8012178 <_dtoa_r+0x6b0>)
 8012100:	f7ef f8e2 	bl	80012c8 <__aeabi_dadd>
 8012104:	0002      	movs	r2, r0
 8012106:	000b      	movs	r3, r1
 8012108:	0020      	movs	r0, r4
 801210a:	0029      	movs	r1, r5
 801210c:	f7ee f9b8 	bl	8000480 <__aeabi_dcmpgt>
 8012110:	2800      	cmp	r0, #0
 8012112:	d000      	beq.n	8012116 <_dtoa_r+0x64e>
 8012114:	e080      	b.n	8012218 <_dtoa_r+0x750>
 8012116:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012118:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801211a:	2000      	movs	r0, #0
 801211c:	4916      	ldr	r1, [pc, #88]	; (8012178 <_dtoa_r+0x6b0>)
 801211e:	f7f0 fa7d 	bl	800261c <__aeabi_dsub>
 8012122:	0002      	movs	r2, r0
 8012124:	000b      	movs	r3, r1
 8012126:	0020      	movs	r0, r4
 8012128:	0029      	movs	r1, r5
 801212a:	f7ee f995 	bl	8000458 <__aeabi_dcmplt>
 801212e:	2800      	cmp	r0, #0
 8012130:	d100      	bne.n	8012134 <_dtoa_r+0x66c>
 8012132:	e714      	b.n	8011f5e <_dtoa_r+0x496>
 8012134:	9b08      	ldr	r3, [sp, #32]
 8012136:	001a      	movs	r2, r3
 8012138:	3a01      	subs	r2, #1
 801213a:	9208      	str	r2, [sp, #32]
 801213c:	7812      	ldrb	r2, [r2, #0]
 801213e:	2a30      	cmp	r2, #48	; 0x30
 8012140:	d0f8      	beq.n	8012134 <_dtoa_r+0x66c>
 8012142:	9308      	str	r3, [sp, #32]
 8012144:	9602      	str	r6, [sp, #8]
 8012146:	e055      	b.n	80121f4 <_dtoa_r+0x72c>
 8012148:	2200      	movs	r2, #0
 801214a:	4b06      	ldr	r3, [pc, #24]	; (8012164 <_dtoa_r+0x69c>)
 801214c:	f7ef fffa 	bl	8002144 <__aeabi_dmul>
 8012150:	0004      	movs	r4, r0
 8012152:	000d      	movs	r5, r1
 8012154:	e7b2      	b.n	80120bc <_dtoa_r+0x5f4>
 8012156:	46c0      	nop			; (mov r8, r8)
 8012158:	080153c8 	.word	0x080153c8
 801215c:	080153a0 	.word	0x080153a0
 8012160:	3ff00000 	.word	0x3ff00000
 8012164:	40240000 	.word	0x40240000
 8012168:	401c0000 	.word	0x401c0000
 801216c:	fcc00000 	.word	0xfcc00000
 8012170:	40140000 	.word	0x40140000
 8012174:	7cc00000 	.word	0x7cc00000
 8012178:	3fe00000 	.word	0x3fe00000
 801217c:	9b07      	ldr	r3, [sp, #28]
 801217e:	9e06      	ldr	r6, [sp, #24]
 8012180:	3b01      	subs	r3, #1
 8012182:	199b      	adds	r3, r3, r6
 8012184:	930c      	str	r3, [sp, #48]	; 0x30
 8012186:	9c08      	ldr	r4, [sp, #32]
 8012188:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801218a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801218c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801218e:	0020      	movs	r0, r4
 8012190:	0029      	movs	r1, r5
 8012192:	f7ef fbd5 	bl	8001940 <__aeabi_ddiv>
 8012196:	f7f0 fdf1 	bl	8002d7c <__aeabi_d2iz>
 801219a:	9007      	str	r0, [sp, #28]
 801219c:	f7f0 fe24 	bl	8002de8 <__aeabi_i2d>
 80121a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80121a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80121a4:	f7ef ffce 	bl	8002144 <__aeabi_dmul>
 80121a8:	0002      	movs	r2, r0
 80121aa:	000b      	movs	r3, r1
 80121ac:	0020      	movs	r0, r4
 80121ae:	0029      	movs	r1, r5
 80121b0:	f7f0 fa34 	bl	800261c <__aeabi_dsub>
 80121b4:	0033      	movs	r3, r6
 80121b6:	9a07      	ldr	r2, [sp, #28]
 80121b8:	3601      	adds	r6, #1
 80121ba:	3230      	adds	r2, #48	; 0x30
 80121bc:	701a      	strb	r2, [r3, #0]
 80121be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80121c0:	9608      	str	r6, [sp, #32]
 80121c2:	429a      	cmp	r2, r3
 80121c4:	d139      	bne.n	801223a <_dtoa_r+0x772>
 80121c6:	0002      	movs	r2, r0
 80121c8:	000b      	movs	r3, r1
 80121ca:	f7ef f87d 	bl	80012c8 <__aeabi_dadd>
 80121ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80121d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80121d2:	0004      	movs	r4, r0
 80121d4:	000d      	movs	r5, r1
 80121d6:	f7ee f953 	bl	8000480 <__aeabi_dcmpgt>
 80121da:	2800      	cmp	r0, #0
 80121dc:	d11b      	bne.n	8012216 <_dtoa_r+0x74e>
 80121de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80121e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80121e2:	0020      	movs	r0, r4
 80121e4:	0029      	movs	r1, r5
 80121e6:	f7ee f931 	bl	800044c <__aeabi_dcmpeq>
 80121ea:	2800      	cmp	r0, #0
 80121ec:	d002      	beq.n	80121f4 <_dtoa_r+0x72c>
 80121ee:	9b07      	ldr	r3, [sp, #28]
 80121f0:	07db      	lsls	r3, r3, #31
 80121f2:	d410      	bmi.n	8012216 <_dtoa_r+0x74e>
 80121f4:	0038      	movs	r0, r7
 80121f6:	9905      	ldr	r1, [sp, #20]
 80121f8:	f000 fae6 	bl	80127c8 <_Bfree>
 80121fc:	2300      	movs	r3, #0
 80121fe:	9a08      	ldr	r2, [sp, #32]
 8012200:	9802      	ldr	r0, [sp, #8]
 8012202:	7013      	strb	r3, [r2, #0]
 8012204:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8012206:	3001      	adds	r0, #1
 8012208:	6018      	str	r0, [r3, #0]
 801220a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801220c:	2b00      	cmp	r3, #0
 801220e:	d100      	bne.n	8012212 <_dtoa_r+0x74a>
 8012210:	e4a6      	b.n	8011b60 <_dtoa_r+0x98>
 8012212:	601a      	str	r2, [r3, #0]
 8012214:	e4a4      	b.n	8011b60 <_dtoa_r+0x98>
 8012216:	9e02      	ldr	r6, [sp, #8]
 8012218:	9b08      	ldr	r3, [sp, #32]
 801221a:	9308      	str	r3, [sp, #32]
 801221c:	3b01      	subs	r3, #1
 801221e:	781a      	ldrb	r2, [r3, #0]
 8012220:	2a39      	cmp	r2, #57	; 0x39
 8012222:	d106      	bne.n	8012232 <_dtoa_r+0x76a>
 8012224:	9a06      	ldr	r2, [sp, #24]
 8012226:	429a      	cmp	r2, r3
 8012228:	d1f7      	bne.n	801221a <_dtoa_r+0x752>
 801222a:	2230      	movs	r2, #48	; 0x30
 801222c:	9906      	ldr	r1, [sp, #24]
 801222e:	3601      	adds	r6, #1
 8012230:	700a      	strb	r2, [r1, #0]
 8012232:	781a      	ldrb	r2, [r3, #0]
 8012234:	3201      	adds	r2, #1
 8012236:	701a      	strb	r2, [r3, #0]
 8012238:	e784      	b.n	8012144 <_dtoa_r+0x67c>
 801223a:	2200      	movs	r2, #0
 801223c:	4baa      	ldr	r3, [pc, #680]	; (80124e8 <_dtoa_r+0xa20>)
 801223e:	f7ef ff81 	bl	8002144 <__aeabi_dmul>
 8012242:	2200      	movs	r2, #0
 8012244:	2300      	movs	r3, #0
 8012246:	0004      	movs	r4, r0
 8012248:	000d      	movs	r5, r1
 801224a:	f7ee f8ff 	bl	800044c <__aeabi_dcmpeq>
 801224e:	2800      	cmp	r0, #0
 8012250:	d09b      	beq.n	801218a <_dtoa_r+0x6c2>
 8012252:	e7cf      	b.n	80121f4 <_dtoa_r+0x72c>
 8012254:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012256:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8012258:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801225a:	2d00      	cmp	r5, #0
 801225c:	d012      	beq.n	8012284 <_dtoa_r+0x7bc>
 801225e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012260:	2a01      	cmp	r2, #1
 8012262:	dc66      	bgt.n	8012332 <_dtoa_r+0x86a>
 8012264:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012266:	2a00      	cmp	r2, #0
 8012268:	d05d      	beq.n	8012326 <_dtoa_r+0x85e>
 801226a:	4aa0      	ldr	r2, [pc, #640]	; (80124ec <_dtoa_r+0xa24>)
 801226c:	189b      	adds	r3, r3, r2
 801226e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012270:	2101      	movs	r1, #1
 8012272:	18d2      	adds	r2, r2, r3
 8012274:	920a      	str	r2, [sp, #40]	; 0x28
 8012276:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012278:	0038      	movs	r0, r7
 801227a:	18d3      	adds	r3, r2, r3
 801227c:	930d      	str	r3, [sp, #52]	; 0x34
 801227e:	f000 fb53 	bl	8012928 <__i2b>
 8012282:	0005      	movs	r5, r0
 8012284:	2c00      	cmp	r4, #0
 8012286:	dd0e      	ble.n	80122a6 <_dtoa_r+0x7de>
 8012288:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801228a:	2b00      	cmp	r3, #0
 801228c:	dd0b      	ble.n	80122a6 <_dtoa_r+0x7de>
 801228e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012290:	0023      	movs	r3, r4
 8012292:	4294      	cmp	r4, r2
 8012294:	dd00      	ble.n	8012298 <_dtoa_r+0x7d0>
 8012296:	0013      	movs	r3, r2
 8012298:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801229a:	1ae4      	subs	r4, r4, r3
 801229c:	1ad2      	subs	r2, r2, r3
 801229e:	920a      	str	r2, [sp, #40]	; 0x28
 80122a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80122a2:	1ad3      	subs	r3, r2, r3
 80122a4:	930d      	str	r3, [sp, #52]	; 0x34
 80122a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d01f      	beq.n	80122ec <_dtoa_r+0x824>
 80122ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d054      	beq.n	801235c <_dtoa_r+0x894>
 80122b2:	2e00      	cmp	r6, #0
 80122b4:	dd11      	ble.n	80122da <_dtoa_r+0x812>
 80122b6:	0029      	movs	r1, r5
 80122b8:	0032      	movs	r2, r6
 80122ba:	0038      	movs	r0, r7
 80122bc:	f000 fbfa 	bl	8012ab4 <__pow5mult>
 80122c0:	9a05      	ldr	r2, [sp, #20]
 80122c2:	0001      	movs	r1, r0
 80122c4:	0005      	movs	r5, r0
 80122c6:	0038      	movs	r0, r7
 80122c8:	f000 fb44 	bl	8012954 <__multiply>
 80122cc:	9905      	ldr	r1, [sp, #20]
 80122ce:	9014      	str	r0, [sp, #80]	; 0x50
 80122d0:	0038      	movs	r0, r7
 80122d2:	f000 fa79 	bl	80127c8 <_Bfree>
 80122d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80122d8:	9305      	str	r3, [sp, #20]
 80122da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80122dc:	1b9a      	subs	r2, r3, r6
 80122de:	42b3      	cmp	r3, r6
 80122e0:	d004      	beq.n	80122ec <_dtoa_r+0x824>
 80122e2:	0038      	movs	r0, r7
 80122e4:	9905      	ldr	r1, [sp, #20]
 80122e6:	f000 fbe5 	bl	8012ab4 <__pow5mult>
 80122ea:	9005      	str	r0, [sp, #20]
 80122ec:	2101      	movs	r1, #1
 80122ee:	0038      	movs	r0, r7
 80122f0:	f000 fb1a 	bl	8012928 <__i2b>
 80122f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80122f6:	0006      	movs	r6, r0
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	dd31      	ble.n	8012360 <_dtoa_r+0x898>
 80122fc:	001a      	movs	r2, r3
 80122fe:	0001      	movs	r1, r0
 8012300:	0038      	movs	r0, r7
 8012302:	f000 fbd7 	bl	8012ab4 <__pow5mult>
 8012306:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012308:	0006      	movs	r6, r0
 801230a:	2b01      	cmp	r3, #1
 801230c:	dd2d      	ble.n	801236a <_dtoa_r+0x8a2>
 801230e:	2300      	movs	r3, #0
 8012310:	930e      	str	r3, [sp, #56]	; 0x38
 8012312:	6933      	ldr	r3, [r6, #16]
 8012314:	3303      	adds	r3, #3
 8012316:	009b      	lsls	r3, r3, #2
 8012318:	18f3      	adds	r3, r6, r3
 801231a:	6858      	ldr	r0, [r3, #4]
 801231c:	f000 fabc 	bl	8012898 <__hi0bits>
 8012320:	2320      	movs	r3, #32
 8012322:	1a18      	subs	r0, r3, r0
 8012324:	e039      	b.n	801239a <_dtoa_r+0x8d2>
 8012326:	2336      	movs	r3, #54	; 0x36
 8012328:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 801232a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801232c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801232e:	1a9b      	subs	r3, r3, r2
 8012330:	e79d      	b.n	801226e <_dtoa_r+0x7a6>
 8012332:	9b07      	ldr	r3, [sp, #28]
 8012334:	1e5e      	subs	r6, r3, #1
 8012336:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012338:	42b3      	cmp	r3, r6
 801233a:	db07      	blt.n	801234c <_dtoa_r+0x884>
 801233c:	1b9e      	subs	r6, r3, r6
 801233e:	9b07      	ldr	r3, [sp, #28]
 8012340:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8012342:	2b00      	cmp	r3, #0
 8012344:	da93      	bge.n	801226e <_dtoa_r+0x7a6>
 8012346:	1ae4      	subs	r4, r4, r3
 8012348:	2300      	movs	r3, #0
 801234a:	e790      	b.n	801226e <_dtoa_r+0x7a6>
 801234c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801234e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012350:	1af3      	subs	r3, r6, r3
 8012352:	18d3      	adds	r3, r2, r3
 8012354:	960e      	str	r6, [sp, #56]	; 0x38
 8012356:	9315      	str	r3, [sp, #84]	; 0x54
 8012358:	2600      	movs	r6, #0
 801235a:	e7f0      	b.n	801233e <_dtoa_r+0x876>
 801235c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801235e:	e7c0      	b.n	80122e2 <_dtoa_r+0x81a>
 8012360:	2300      	movs	r3, #0
 8012362:	930e      	str	r3, [sp, #56]	; 0x38
 8012364:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012366:	2b01      	cmp	r3, #1
 8012368:	dc13      	bgt.n	8012392 <_dtoa_r+0x8ca>
 801236a:	2300      	movs	r3, #0
 801236c:	930e      	str	r3, [sp, #56]	; 0x38
 801236e:	9b08      	ldr	r3, [sp, #32]
 8012370:	2b00      	cmp	r3, #0
 8012372:	d10e      	bne.n	8012392 <_dtoa_r+0x8ca>
 8012374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012376:	031b      	lsls	r3, r3, #12
 8012378:	d10b      	bne.n	8012392 <_dtoa_r+0x8ca>
 801237a:	4b5d      	ldr	r3, [pc, #372]	; (80124f0 <_dtoa_r+0xa28>)
 801237c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801237e:	4213      	tst	r3, r2
 8012380:	d007      	beq.n	8012392 <_dtoa_r+0x8ca>
 8012382:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012384:	3301      	adds	r3, #1
 8012386:	930a      	str	r3, [sp, #40]	; 0x28
 8012388:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801238a:	3301      	adds	r3, #1
 801238c:	930d      	str	r3, [sp, #52]	; 0x34
 801238e:	2301      	movs	r3, #1
 8012390:	930e      	str	r3, [sp, #56]	; 0x38
 8012392:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012394:	2001      	movs	r0, #1
 8012396:	2b00      	cmp	r3, #0
 8012398:	d1bb      	bne.n	8012312 <_dtoa_r+0x84a>
 801239a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801239c:	221f      	movs	r2, #31
 801239e:	1818      	adds	r0, r3, r0
 80123a0:	0003      	movs	r3, r0
 80123a2:	4013      	ands	r3, r2
 80123a4:	4210      	tst	r0, r2
 80123a6:	d046      	beq.n	8012436 <_dtoa_r+0x96e>
 80123a8:	3201      	adds	r2, #1
 80123aa:	1ad2      	subs	r2, r2, r3
 80123ac:	2a04      	cmp	r2, #4
 80123ae:	dd3f      	ble.n	8012430 <_dtoa_r+0x968>
 80123b0:	221c      	movs	r2, #28
 80123b2:	1ad3      	subs	r3, r2, r3
 80123b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80123b6:	18e4      	adds	r4, r4, r3
 80123b8:	18d2      	adds	r2, r2, r3
 80123ba:	920a      	str	r2, [sp, #40]	; 0x28
 80123bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80123be:	18d3      	adds	r3, r2, r3
 80123c0:	930d      	str	r3, [sp, #52]	; 0x34
 80123c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	dd05      	ble.n	80123d4 <_dtoa_r+0x90c>
 80123c8:	001a      	movs	r2, r3
 80123ca:	0038      	movs	r0, r7
 80123cc:	9905      	ldr	r1, [sp, #20]
 80123ce:	f000 fbcd 	bl	8012b6c <__lshift>
 80123d2:	9005      	str	r0, [sp, #20]
 80123d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	dd05      	ble.n	80123e6 <_dtoa_r+0x91e>
 80123da:	0031      	movs	r1, r6
 80123dc:	001a      	movs	r2, r3
 80123de:	0038      	movs	r0, r7
 80123e0:	f000 fbc4 	bl	8012b6c <__lshift>
 80123e4:	0006      	movs	r6, r0
 80123e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d026      	beq.n	801243a <_dtoa_r+0x972>
 80123ec:	0031      	movs	r1, r6
 80123ee:	9805      	ldr	r0, [sp, #20]
 80123f0:	f000 fc2a 	bl	8012c48 <__mcmp>
 80123f4:	2800      	cmp	r0, #0
 80123f6:	da20      	bge.n	801243a <_dtoa_r+0x972>
 80123f8:	9b02      	ldr	r3, [sp, #8]
 80123fa:	220a      	movs	r2, #10
 80123fc:	3b01      	subs	r3, #1
 80123fe:	9302      	str	r3, [sp, #8]
 8012400:	0038      	movs	r0, r7
 8012402:	2300      	movs	r3, #0
 8012404:	9905      	ldr	r1, [sp, #20]
 8012406:	f000 fa03 	bl	8012810 <__multadd>
 801240a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801240c:	9005      	str	r0, [sp, #20]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d100      	bne.n	8012414 <_dtoa_r+0x94c>
 8012412:	e166      	b.n	80126e2 <_dtoa_r+0xc1a>
 8012414:	2300      	movs	r3, #0
 8012416:	0029      	movs	r1, r5
 8012418:	220a      	movs	r2, #10
 801241a:	0038      	movs	r0, r7
 801241c:	f000 f9f8 	bl	8012810 <__multadd>
 8012420:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012422:	0005      	movs	r5, r0
 8012424:	2b00      	cmp	r3, #0
 8012426:	dc47      	bgt.n	80124b8 <_dtoa_r+0x9f0>
 8012428:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801242a:	2b02      	cmp	r3, #2
 801242c:	dc0d      	bgt.n	801244a <_dtoa_r+0x982>
 801242e:	e043      	b.n	80124b8 <_dtoa_r+0x9f0>
 8012430:	2a04      	cmp	r2, #4
 8012432:	d0c6      	beq.n	80123c2 <_dtoa_r+0x8fa>
 8012434:	0013      	movs	r3, r2
 8012436:	331c      	adds	r3, #28
 8012438:	e7bc      	b.n	80123b4 <_dtoa_r+0x8ec>
 801243a:	9b07      	ldr	r3, [sp, #28]
 801243c:	2b00      	cmp	r3, #0
 801243e:	dc35      	bgt.n	80124ac <_dtoa_r+0x9e4>
 8012440:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8012442:	2b02      	cmp	r3, #2
 8012444:	dd32      	ble.n	80124ac <_dtoa_r+0x9e4>
 8012446:	9b07      	ldr	r3, [sp, #28]
 8012448:	930c      	str	r3, [sp, #48]	; 0x30
 801244a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801244c:	2b00      	cmp	r3, #0
 801244e:	d10c      	bne.n	801246a <_dtoa_r+0x9a2>
 8012450:	0031      	movs	r1, r6
 8012452:	2205      	movs	r2, #5
 8012454:	0038      	movs	r0, r7
 8012456:	f000 f9db 	bl	8012810 <__multadd>
 801245a:	0006      	movs	r6, r0
 801245c:	0001      	movs	r1, r0
 801245e:	9805      	ldr	r0, [sp, #20]
 8012460:	f000 fbf2 	bl	8012c48 <__mcmp>
 8012464:	2800      	cmp	r0, #0
 8012466:	dd00      	ble.n	801246a <_dtoa_r+0x9a2>
 8012468:	e5a5      	b.n	8011fb6 <_dtoa_r+0x4ee>
 801246a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801246c:	43db      	mvns	r3, r3
 801246e:	9302      	str	r3, [sp, #8]
 8012470:	9b06      	ldr	r3, [sp, #24]
 8012472:	9308      	str	r3, [sp, #32]
 8012474:	2400      	movs	r4, #0
 8012476:	0031      	movs	r1, r6
 8012478:	0038      	movs	r0, r7
 801247a:	f000 f9a5 	bl	80127c8 <_Bfree>
 801247e:	2d00      	cmp	r5, #0
 8012480:	d100      	bne.n	8012484 <_dtoa_r+0x9bc>
 8012482:	e6b7      	b.n	80121f4 <_dtoa_r+0x72c>
 8012484:	2c00      	cmp	r4, #0
 8012486:	d005      	beq.n	8012494 <_dtoa_r+0x9cc>
 8012488:	42ac      	cmp	r4, r5
 801248a:	d003      	beq.n	8012494 <_dtoa_r+0x9cc>
 801248c:	0021      	movs	r1, r4
 801248e:	0038      	movs	r0, r7
 8012490:	f000 f99a 	bl	80127c8 <_Bfree>
 8012494:	0029      	movs	r1, r5
 8012496:	0038      	movs	r0, r7
 8012498:	f000 f996 	bl	80127c8 <_Bfree>
 801249c:	e6aa      	b.n	80121f4 <_dtoa_r+0x72c>
 801249e:	2600      	movs	r6, #0
 80124a0:	0035      	movs	r5, r6
 80124a2:	e7e2      	b.n	801246a <_dtoa_r+0x9a2>
 80124a4:	9602      	str	r6, [sp, #8]
 80124a6:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80124a8:	0035      	movs	r5, r6
 80124aa:	e584      	b.n	8011fb6 <_dtoa_r+0x4ee>
 80124ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d100      	bne.n	80124b4 <_dtoa_r+0x9ec>
 80124b2:	e0ce      	b.n	8012652 <_dtoa_r+0xb8a>
 80124b4:	9b07      	ldr	r3, [sp, #28]
 80124b6:	930c      	str	r3, [sp, #48]	; 0x30
 80124b8:	2c00      	cmp	r4, #0
 80124ba:	dd05      	ble.n	80124c8 <_dtoa_r+0xa00>
 80124bc:	0029      	movs	r1, r5
 80124be:	0022      	movs	r2, r4
 80124c0:	0038      	movs	r0, r7
 80124c2:	f000 fb53 	bl	8012b6c <__lshift>
 80124c6:	0005      	movs	r5, r0
 80124c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80124ca:	0028      	movs	r0, r5
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d022      	beq.n	8012516 <_dtoa_r+0xa4e>
 80124d0:	0038      	movs	r0, r7
 80124d2:	6869      	ldr	r1, [r5, #4]
 80124d4:	f000 f934 	bl	8012740 <_Balloc>
 80124d8:	1e04      	subs	r4, r0, #0
 80124da:	d10f      	bne.n	80124fc <_dtoa_r+0xa34>
 80124dc:	0002      	movs	r2, r0
 80124de:	4b05      	ldr	r3, [pc, #20]	; (80124f4 <_dtoa_r+0xa2c>)
 80124e0:	4905      	ldr	r1, [pc, #20]	; (80124f8 <_dtoa_r+0xa30>)
 80124e2:	f7ff fb06 	bl	8011af2 <_dtoa_r+0x2a>
 80124e6:	46c0      	nop			; (mov r8, r8)
 80124e8:	40240000 	.word	0x40240000
 80124ec:	00000433 	.word	0x00000433
 80124f0:	7ff00000 	.word	0x7ff00000
 80124f4:	0801532f 	.word	0x0801532f
 80124f8:	000002ea 	.word	0x000002ea
 80124fc:	0029      	movs	r1, r5
 80124fe:	692b      	ldr	r3, [r5, #16]
 8012500:	310c      	adds	r1, #12
 8012502:	1c9a      	adds	r2, r3, #2
 8012504:	0092      	lsls	r2, r2, #2
 8012506:	300c      	adds	r0, #12
 8012508:	f000 f911 	bl	801272e <memcpy>
 801250c:	2201      	movs	r2, #1
 801250e:	0021      	movs	r1, r4
 8012510:	0038      	movs	r0, r7
 8012512:	f000 fb2b 	bl	8012b6c <__lshift>
 8012516:	9b06      	ldr	r3, [sp, #24]
 8012518:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801251a:	930a      	str	r3, [sp, #40]	; 0x28
 801251c:	3b01      	subs	r3, #1
 801251e:	189b      	adds	r3, r3, r2
 8012520:	2201      	movs	r2, #1
 8012522:	002c      	movs	r4, r5
 8012524:	0005      	movs	r5, r0
 8012526:	9314      	str	r3, [sp, #80]	; 0x50
 8012528:	9b08      	ldr	r3, [sp, #32]
 801252a:	4013      	ands	r3, r2
 801252c:	930f      	str	r3, [sp, #60]	; 0x3c
 801252e:	0031      	movs	r1, r6
 8012530:	9805      	ldr	r0, [sp, #20]
 8012532:	f7ff fa3e 	bl	80119b2 <quorem>
 8012536:	0003      	movs	r3, r0
 8012538:	0021      	movs	r1, r4
 801253a:	3330      	adds	r3, #48	; 0x30
 801253c:	900d      	str	r0, [sp, #52]	; 0x34
 801253e:	9805      	ldr	r0, [sp, #20]
 8012540:	9307      	str	r3, [sp, #28]
 8012542:	f000 fb81 	bl	8012c48 <__mcmp>
 8012546:	002a      	movs	r2, r5
 8012548:	900e      	str	r0, [sp, #56]	; 0x38
 801254a:	0031      	movs	r1, r6
 801254c:	0038      	movs	r0, r7
 801254e:	f000 fb97 	bl	8012c80 <__mdiff>
 8012552:	68c3      	ldr	r3, [r0, #12]
 8012554:	9008      	str	r0, [sp, #32]
 8012556:	9310      	str	r3, [sp, #64]	; 0x40
 8012558:	2301      	movs	r3, #1
 801255a:	930c      	str	r3, [sp, #48]	; 0x30
 801255c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801255e:	2b00      	cmp	r3, #0
 8012560:	d104      	bne.n	801256c <_dtoa_r+0xaa4>
 8012562:	0001      	movs	r1, r0
 8012564:	9805      	ldr	r0, [sp, #20]
 8012566:	f000 fb6f 	bl	8012c48 <__mcmp>
 801256a:	900c      	str	r0, [sp, #48]	; 0x30
 801256c:	0038      	movs	r0, r7
 801256e:	9908      	ldr	r1, [sp, #32]
 8012570:	f000 f92a 	bl	80127c8 <_Bfree>
 8012574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012576:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012578:	3301      	adds	r3, #1
 801257a:	9308      	str	r3, [sp, #32]
 801257c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801257e:	4313      	orrs	r3, r2
 8012580:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012582:	4313      	orrs	r3, r2
 8012584:	d10c      	bne.n	80125a0 <_dtoa_r+0xad8>
 8012586:	9b07      	ldr	r3, [sp, #28]
 8012588:	2b39      	cmp	r3, #57	; 0x39
 801258a:	d026      	beq.n	80125da <_dtoa_r+0xb12>
 801258c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801258e:	2b00      	cmp	r3, #0
 8012590:	dd02      	ble.n	8012598 <_dtoa_r+0xad0>
 8012592:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012594:	3331      	adds	r3, #49	; 0x31
 8012596:	9307      	str	r3, [sp, #28]
 8012598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801259a:	9a07      	ldr	r2, [sp, #28]
 801259c:	701a      	strb	r2, [r3, #0]
 801259e:	e76a      	b.n	8012476 <_dtoa_r+0x9ae>
 80125a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	db04      	blt.n	80125b0 <_dtoa_r+0xae8>
 80125a6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80125a8:	4313      	orrs	r3, r2
 80125aa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80125ac:	4313      	orrs	r3, r2
 80125ae:	d11f      	bne.n	80125f0 <_dtoa_r+0xb28>
 80125b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	ddf0      	ble.n	8012598 <_dtoa_r+0xad0>
 80125b6:	9905      	ldr	r1, [sp, #20]
 80125b8:	2201      	movs	r2, #1
 80125ba:	0038      	movs	r0, r7
 80125bc:	f000 fad6 	bl	8012b6c <__lshift>
 80125c0:	0031      	movs	r1, r6
 80125c2:	9005      	str	r0, [sp, #20]
 80125c4:	f000 fb40 	bl	8012c48 <__mcmp>
 80125c8:	2800      	cmp	r0, #0
 80125ca:	dc03      	bgt.n	80125d4 <_dtoa_r+0xb0c>
 80125cc:	d1e4      	bne.n	8012598 <_dtoa_r+0xad0>
 80125ce:	9b07      	ldr	r3, [sp, #28]
 80125d0:	07db      	lsls	r3, r3, #31
 80125d2:	d5e1      	bpl.n	8012598 <_dtoa_r+0xad0>
 80125d4:	9b07      	ldr	r3, [sp, #28]
 80125d6:	2b39      	cmp	r3, #57	; 0x39
 80125d8:	d1db      	bne.n	8012592 <_dtoa_r+0xaca>
 80125da:	2339      	movs	r3, #57	; 0x39
 80125dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80125de:	7013      	strb	r3, [r2, #0]
 80125e0:	9b08      	ldr	r3, [sp, #32]
 80125e2:	9308      	str	r3, [sp, #32]
 80125e4:	3b01      	subs	r3, #1
 80125e6:	781a      	ldrb	r2, [r3, #0]
 80125e8:	2a39      	cmp	r2, #57	; 0x39
 80125ea:	d068      	beq.n	80126be <_dtoa_r+0xbf6>
 80125ec:	3201      	adds	r2, #1
 80125ee:	e7d5      	b.n	801259c <_dtoa_r+0xad4>
 80125f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	dd07      	ble.n	8012606 <_dtoa_r+0xb3e>
 80125f6:	9b07      	ldr	r3, [sp, #28]
 80125f8:	2b39      	cmp	r3, #57	; 0x39
 80125fa:	d0ee      	beq.n	80125da <_dtoa_r+0xb12>
 80125fc:	9b07      	ldr	r3, [sp, #28]
 80125fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012600:	3301      	adds	r3, #1
 8012602:	7013      	strb	r3, [r2, #0]
 8012604:	e737      	b.n	8012476 <_dtoa_r+0x9ae>
 8012606:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012608:	9a07      	ldr	r2, [sp, #28]
 801260a:	701a      	strb	r2, [r3, #0]
 801260c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801260e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012610:	4293      	cmp	r3, r2
 8012612:	d03e      	beq.n	8012692 <_dtoa_r+0xbca>
 8012614:	2300      	movs	r3, #0
 8012616:	220a      	movs	r2, #10
 8012618:	9905      	ldr	r1, [sp, #20]
 801261a:	0038      	movs	r0, r7
 801261c:	f000 f8f8 	bl	8012810 <__multadd>
 8012620:	2300      	movs	r3, #0
 8012622:	9005      	str	r0, [sp, #20]
 8012624:	220a      	movs	r2, #10
 8012626:	0021      	movs	r1, r4
 8012628:	0038      	movs	r0, r7
 801262a:	42ac      	cmp	r4, r5
 801262c:	d106      	bne.n	801263c <_dtoa_r+0xb74>
 801262e:	f000 f8ef 	bl	8012810 <__multadd>
 8012632:	0004      	movs	r4, r0
 8012634:	0005      	movs	r5, r0
 8012636:	9b08      	ldr	r3, [sp, #32]
 8012638:	930a      	str	r3, [sp, #40]	; 0x28
 801263a:	e778      	b.n	801252e <_dtoa_r+0xa66>
 801263c:	f000 f8e8 	bl	8012810 <__multadd>
 8012640:	0029      	movs	r1, r5
 8012642:	0004      	movs	r4, r0
 8012644:	2300      	movs	r3, #0
 8012646:	220a      	movs	r2, #10
 8012648:	0038      	movs	r0, r7
 801264a:	f000 f8e1 	bl	8012810 <__multadd>
 801264e:	0005      	movs	r5, r0
 8012650:	e7f1      	b.n	8012636 <_dtoa_r+0xb6e>
 8012652:	9b07      	ldr	r3, [sp, #28]
 8012654:	930c      	str	r3, [sp, #48]	; 0x30
 8012656:	2400      	movs	r4, #0
 8012658:	0031      	movs	r1, r6
 801265a:	9805      	ldr	r0, [sp, #20]
 801265c:	f7ff f9a9 	bl	80119b2 <quorem>
 8012660:	9b06      	ldr	r3, [sp, #24]
 8012662:	3030      	adds	r0, #48	; 0x30
 8012664:	5518      	strb	r0, [r3, r4]
 8012666:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012668:	3401      	adds	r4, #1
 801266a:	9007      	str	r0, [sp, #28]
 801266c:	42a3      	cmp	r3, r4
 801266e:	dd07      	ble.n	8012680 <_dtoa_r+0xbb8>
 8012670:	2300      	movs	r3, #0
 8012672:	220a      	movs	r2, #10
 8012674:	0038      	movs	r0, r7
 8012676:	9905      	ldr	r1, [sp, #20]
 8012678:	f000 f8ca 	bl	8012810 <__multadd>
 801267c:	9005      	str	r0, [sp, #20]
 801267e:	e7eb      	b.n	8012658 <_dtoa_r+0xb90>
 8012680:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012682:	2001      	movs	r0, #1
 8012684:	2b00      	cmp	r3, #0
 8012686:	dd00      	ble.n	801268a <_dtoa_r+0xbc2>
 8012688:	0018      	movs	r0, r3
 801268a:	2400      	movs	r4, #0
 801268c:	9b06      	ldr	r3, [sp, #24]
 801268e:	181b      	adds	r3, r3, r0
 8012690:	9308      	str	r3, [sp, #32]
 8012692:	9905      	ldr	r1, [sp, #20]
 8012694:	2201      	movs	r2, #1
 8012696:	0038      	movs	r0, r7
 8012698:	f000 fa68 	bl	8012b6c <__lshift>
 801269c:	0031      	movs	r1, r6
 801269e:	9005      	str	r0, [sp, #20]
 80126a0:	f000 fad2 	bl	8012c48 <__mcmp>
 80126a4:	2800      	cmp	r0, #0
 80126a6:	dc9b      	bgt.n	80125e0 <_dtoa_r+0xb18>
 80126a8:	d102      	bne.n	80126b0 <_dtoa_r+0xbe8>
 80126aa:	9b07      	ldr	r3, [sp, #28]
 80126ac:	07db      	lsls	r3, r3, #31
 80126ae:	d497      	bmi.n	80125e0 <_dtoa_r+0xb18>
 80126b0:	9b08      	ldr	r3, [sp, #32]
 80126b2:	9308      	str	r3, [sp, #32]
 80126b4:	3b01      	subs	r3, #1
 80126b6:	781a      	ldrb	r2, [r3, #0]
 80126b8:	2a30      	cmp	r2, #48	; 0x30
 80126ba:	d0fa      	beq.n	80126b2 <_dtoa_r+0xbea>
 80126bc:	e6db      	b.n	8012476 <_dtoa_r+0x9ae>
 80126be:	9a06      	ldr	r2, [sp, #24]
 80126c0:	429a      	cmp	r2, r3
 80126c2:	d18e      	bne.n	80125e2 <_dtoa_r+0xb1a>
 80126c4:	9b02      	ldr	r3, [sp, #8]
 80126c6:	3301      	adds	r3, #1
 80126c8:	9302      	str	r3, [sp, #8]
 80126ca:	2331      	movs	r3, #49	; 0x31
 80126cc:	e799      	b.n	8012602 <_dtoa_r+0xb3a>
 80126ce:	4b09      	ldr	r3, [pc, #36]	; (80126f4 <_dtoa_r+0xc2c>)
 80126d0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80126d2:	9306      	str	r3, [sp, #24]
 80126d4:	4b08      	ldr	r3, [pc, #32]	; (80126f8 <_dtoa_r+0xc30>)
 80126d6:	2a00      	cmp	r2, #0
 80126d8:	d001      	beq.n	80126de <_dtoa_r+0xc16>
 80126da:	f7ff fa3f 	bl	8011b5c <_dtoa_r+0x94>
 80126de:	f7ff fa3f 	bl	8011b60 <_dtoa_r+0x98>
 80126e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	dcb6      	bgt.n	8012656 <_dtoa_r+0xb8e>
 80126e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80126ea:	2b02      	cmp	r3, #2
 80126ec:	dd00      	ble.n	80126f0 <_dtoa_r+0xc28>
 80126ee:	e6ac      	b.n	801244a <_dtoa_r+0x982>
 80126f0:	e7b1      	b.n	8012656 <_dtoa_r+0xb8e>
 80126f2:	46c0      	nop			; (mov r8, r8)
 80126f4:	080152b0 	.word	0x080152b0
 80126f8:	080152b8 	.word	0x080152b8

080126fc <_localeconv_r>:
 80126fc:	4800      	ldr	r0, [pc, #0]	; (8012700 <_localeconv_r+0x4>)
 80126fe:	4770      	bx	lr
 8012700:	20000190 	.word	0x20000190

08012704 <malloc>:
 8012704:	b510      	push	{r4, lr}
 8012706:	4b03      	ldr	r3, [pc, #12]	; (8012714 <malloc+0x10>)
 8012708:	0001      	movs	r1, r0
 801270a:	6818      	ldr	r0, [r3, #0]
 801270c:	f000 fc4c 	bl	8012fa8 <_malloc_r>
 8012710:	bd10      	pop	{r4, pc}
 8012712:	46c0      	nop			; (mov r8, r8)
 8012714:	2000003c 	.word	0x2000003c

08012718 <memchr>:
 8012718:	b2c9      	uxtb	r1, r1
 801271a:	1882      	adds	r2, r0, r2
 801271c:	4290      	cmp	r0, r2
 801271e:	d101      	bne.n	8012724 <memchr+0xc>
 8012720:	2000      	movs	r0, #0
 8012722:	4770      	bx	lr
 8012724:	7803      	ldrb	r3, [r0, #0]
 8012726:	428b      	cmp	r3, r1
 8012728:	d0fb      	beq.n	8012722 <memchr+0xa>
 801272a:	3001      	adds	r0, #1
 801272c:	e7f6      	b.n	801271c <memchr+0x4>

0801272e <memcpy>:
 801272e:	2300      	movs	r3, #0
 8012730:	b510      	push	{r4, lr}
 8012732:	429a      	cmp	r2, r3
 8012734:	d100      	bne.n	8012738 <memcpy+0xa>
 8012736:	bd10      	pop	{r4, pc}
 8012738:	5ccc      	ldrb	r4, [r1, r3]
 801273a:	54c4      	strb	r4, [r0, r3]
 801273c:	3301      	adds	r3, #1
 801273e:	e7f8      	b.n	8012732 <memcpy+0x4>

08012740 <_Balloc>:
 8012740:	b570      	push	{r4, r5, r6, lr}
 8012742:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012744:	0006      	movs	r6, r0
 8012746:	000c      	movs	r4, r1
 8012748:	2d00      	cmp	r5, #0
 801274a:	d10e      	bne.n	801276a <_Balloc+0x2a>
 801274c:	2010      	movs	r0, #16
 801274e:	f7ff ffd9 	bl	8012704 <malloc>
 8012752:	1e02      	subs	r2, r0, #0
 8012754:	6270      	str	r0, [r6, #36]	; 0x24
 8012756:	d104      	bne.n	8012762 <_Balloc+0x22>
 8012758:	2166      	movs	r1, #102	; 0x66
 801275a:	4b19      	ldr	r3, [pc, #100]	; (80127c0 <_Balloc+0x80>)
 801275c:	4819      	ldr	r0, [pc, #100]	; (80127c4 <_Balloc+0x84>)
 801275e:	f000 fe0d 	bl	801337c <__assert_func>
 8012762:	6045      	str	r5, [r0, #4]
 8012764:	6085      	str	r5, [r0, #8]
 8012766:	6005      	str	r5, [r0, #0]
 8012768:	60c5      	str	r5, [r0, #12]
 801276a:	6a75      	ldr	r5, [r6, #36]	; 0x24
 801276c:	68eb      	ldr	r3, [r5, #12]
 801276e:	2b00      	cmp	r3, #0
 8012770:	d013      	beq.n	801279a <_Balloc+0x5a>
 8012772:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8012774:	00a2      	lsls	r2, r4, #2
 8012776:	68db      	ldr	r3, [r3, #12]
 8012778:	189b      	adds	r3, r3, r2
 801277a:	6818      	ldr	r0, [r3, #0]
 801277c:	2800      	cmp	r0, #0
 801277e:	d118      	bne.n	80127b2 <_Balloc+0x72>
 8012780:	2101      	movs	r1, #1
 8012782:	000d      	movs	r5, r1
 8012784:	40a5      	lsls	r5, r4
 8012786:	1d6a      	adds	r2, r5, #5
 8012788:	0030      	movs	r0, r6
 801278a:	0092      	lsls	r2, r2, #2
 801278c:	f000 fb74 	bl	8012e78 <_calloc_r>
 8012790:	2800      	cmp	r0, #0
 8012792:	d00c      	beq.n	80127ae <_Balloc+0x6e>
 8012794:	6044      	str	r4, [r0, #4]
 8012796:	6085      	str	r5, [r0, #8]
 8012798:	e00d      	b.n	80127b6 <_Balloc+0x76>
 801279a:	2221      	movs	r2, #33	; 0x21
 801279c:	2104      	movs	r1, #4
 801279e:	0030      	movs	r0, r6
 80127a0:	f000 fb6a 	bl	8012e78 <_calloc_r>
 80127a4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80127a6:	60e8      	str	r0, [r5, #12]
 80127a8:	68db      	ldr	r3, [r3, #12]
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d1e1      	bne.n	8012772 <_Balloc+0x32>
 80127ae:	2000      	movs	r0, #0
 80127b0:	bd70      	pop	{r4, r5, r6, pc}
 80127b2:	6802      	ldr	r2, [r0, #0]
 80127b4:	601a      	str	r2, [r3, #0]
 80127b6:	2300      	movs	r3, #0
 80127b8:	6103      	str	r3, [r0, #16]
 80127ba:	60c3      	str	r3, [r0, #12]
 80127bc:	e7f8      	b.n	80127b0 <_Balloc+0x70>
 80127be:	46c0      	nop			; (mov r8, r8)
 80127c0:	080152bd 	.word	0x080152bd
 80127c4:	08015340 	.word	0x08015340

080127c8 <_Bfree>:
 80127c8:	b570      	push	{r4, r5, r6, lr}
 80127ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80127cc:	0005      	movs	r5, r0
 80127ce:	000c      	movs	r4, r1
 80127d0:	2e00      	cmp	r6, #0
 80127d2:	d10e      	bne.n	80127f2 <_Bfree+0x2a>
 80127d4:	2010      	movs	r0, #16
 80127d6:	f7ff ff95 	bl	8012704 <malloc>
 80127da:	1e02      	subs	r2, r0, #0
 80127dc:	6268      	str	r0, [r5, #36]	; 0x24
 80127de:	d104      	bne.n	80127ea <_Bfree+0x22>
 80127e0:	218a      	movs	r1, #138	; 0x8a
 80127e2:	4b09      	ldr	r3, [pc, #36]	; (8012808 <_Bfree+0x40>)
 80127e4:	4809      	ldr	r0, [pc, #36]	; (801280c <_Bfree+0x44>)
 80127e6:	f000 fdc9 	bl	801337c <__assert_func>
 80127ea:	6046      	str	r6, [r0, #4]
 80127ec:	6086      	str	r6, [r0, #8]
 80127ee:	6006      	str	r6, [r0, #0]
 80127f0:	60c6      	str	r6, [r0, #12]
 80127f2:	2c00      	cmp	r4, #0
 80127f4:	d007      	beq.n	8012806 <_Bfree+0x3e>
 80127f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80127f8:	6862      	ldr	r2, [r4, #4]
 80127fa:	68db      	ldr	r3, [r3, #12]
 80127fc:	0092      	lsls	r2, r2, #2
 80127fe:	189b      	adds	r3, r3, r2
 8012800:	681a      	ldr	r2, [r3, #0]
 8012802:	6022      	str	r2, [r4, #0]
 8012804:	601c      	str	r4, [r3, #0]
 8012806:	bd70      	pop	{r4, r5, r6, pc}
 8012808:	080152bd 	.word	0x080152bd
 801280c:	08015340 	.word	0x08015340

08012810 <__multadd>:
 8012810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012812:	000e      	movs	r6, r1
 8012814:	9001      	str	r0, [sp, #4]
 8012816:	000c      	movs	r4, r1
 8012818:	001d      	movs	r5, r3
 801281a:	2000      	movs	r0, #0
 801281c:	690f      	ldr	r7, [r1, #16]
 801281e:	3614      	adds	r6, #20
 8012820:	6833      	ldr	r3, [r6, #0]
 8012822:	3001      	adds	r0, #1
 8012824:	b299      	uxth	r1, r3
 8012826:	4351      	muls	r1, r2
 8012828:	0c1b      	lsrs	r3, r3, #16
 801282a:	4353      	muls	r3, r2
 801282c:	1949      	adds	r1, r1, r5
 801282e:	0c0d      	lsrs	r5, r1, #16
 8012830:	195b      	adds	r3, r3, r5
 8012832:	0c1d      	lsrs	r5, r3, #16
 8012834:	b289      	uxth	r1, r1
 8012836:	041b      	lsls	r3, r3, #16
 8012838:	185b      	adds	r3, r3, r1
 801283a:	c608      	stmia	r6!, {r3}
 801283c:	4287      	cmp	r7, r0
 801283e:	dcef      	bgt.n	8012820 <__multadd+0x10>
 8012840:	2d00      	cmp	r5, #0
 8012842:	d022      	beq.n	801288a <__multadd+0x7a>
 8012844:	68a3      	ldr	r3, [r4, #8]
 8012846:	42bb      	cmp	r3, r7
 8012848:	dc19      	bgt.n	801287e <__multadd+0x6e>
 801284a:	6863      	ldr	r3, [r4, #4]
 801284c:	9801      	ldr	r0, [sp, #4]
 801284e:	1c59      	adds	r1, r3, #1
 8012850:	f7ff ff76 	bl	8012740 <_Balloc>
 8012854:	1e06      	subs	r6, r0, #0
 8012856:	d105      	bne.n	8012864 <__multadd+0x54>
 8012858:	0002      	movs	r2, r0
 801285a:	21b5      	movs	r1, #181	; 0xb5
 801285c:	4b0c      	ldr	r3, [pc, #48]	; (8012890 <__multadd+0x80>)
 801285e:	480d      	ldr	r0, [pc, #52]	; (8012894 <__multadd+0x84>)
 8012860:	f000 fd8c 	bl	801337c <__assert_func>
 8012864:	0021      	movs	r1, r4
 8012866:	6923      	ldr	r3, [r4, #16]
 8012868:	310c      	adds	r1, #12
 801286a:	1c9a      	adds	r2, r3, #2
 801286c:	0092      	lsls	r2, r2, #2
 801286e:	300c      	adds	r0, #12
 8012870:	f7ff ff5d 	bl	801272e <memcpy>
 8012874:	0021      	movs	r1, r4
 8012876:	9801      	ldr	r0, [sp, #4]
 8012878:	f7ff ffa6 	bl	80127c8 <_Bfree>
 801287c:	0034      	movs	r4, r6
 801287e:	1d3b      	adds	r3, r7, #4
 8012880:	009b      	lsls	r3, r3, #2
 8012882:	18e3      	adds	r3, r4, r3
 8012884:	605d      	str	r5, [r3, #4]
 8012886:	1c7b      	adds	r3, r7, #1
 8012888:	6123      	str	r3, [r4, #16]
 801288a:	0020      	movs	r0, r4
 801288c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801288e:	46c0      	nop			; (mov r8, r8)
 8012890:	0801532f 	.word	0x0801532f
 8012894:	08015340 	.word	0x08015340

08012898 <__hi0bits>:
 8012898:	0003      	movs	r3, r0
 801289a:	0c02      	lsrs	r2, r0, #16
 801289c:	2000      	movs	r0, #0
 801289e:	4282      	cmp	r2, r0
 80128a0:	d101      	bne.n	80128a6 <__hi0bits+0xe>
 80128a2:	041b      	lsls	r3, r3, #16
 80128a4:	3010      	adds	r0, #16
 80128a6:	0e1a      	lsrs	r2, r3, #24
 80128a8:	d101      	bne.n	80128ae <__hi0bits+0x16>
 80128aa:	3008      	adds	r0, #8
 80128ac:	021b      	lsls	r3, r3, #8
 80128ae:	0f1a      	lsrs	r2, r3, #28
 80128b0:	d101      	bne.n	80128b6 <__hi0bits+0x1e>
 80128b2:	3004      	adds	r0, #4
 80128b4:	011b      	lsls	r3, r3, #4
 80128b6:	0f9a      	lsrs	r2, r3, #30
 80128b8:	d101      	bne.n	80128be <__hi0bits+0x26>
 80128ba:	3002      	adds	r0, #2
 80128bc:	009b      	lsls	r3, r3, #2
 80128be:	2b00      	cmp	r3, #0
 80128c0:	db03      	blt.n	80128ca <__hi0bits+0x32>
 80128c2:	3001      	adds	r0, #1
 80128c4:	005b      	lsls	r3, r3, #1
 80128c6:	d400      	bmi.n	80128ca <__hi0bits+0x32>
 80128c8:	2020      	movs	r0, #32
 80128ca:	4770      	bx	lr

080128cc <__lo0bits>:
 80128cc:	6803      	ldr	r3, [r0, #0]
 80128ce:	0002      	movs	r2, r0
 80128d0:	2107      	movs	r1, #7
 80128d2:	0018      	movs	r0, r3
 80128d4:	4008      	ands	r0, r1
 80128d6:	420b      	tst	r3, r1
 80128d8:	d00d      	beq.n	80128f6 <__lo0bits+0x2a>
 80128da:	3906      	subs	r1, #6
 80128dc:	2000      	movs	r0, #0
 80128de:	420b      	tst	r3, r1
 80128e0:	d105      	bne.n	80128ee <__lo0bits+0x22>
 80128e2:	3002      	adds	r0, #2
 80128e4:	4203      	tst	r3, r0
 80128e6:	d003      	beq.n	80128f0 <__lo0bits+0x24>
 80128e8:	40cb      	lsrs	r3, r1
 80128ea:	0008      	movs	r0, r1
 80128ec:	6013      	str	r3, [r2, #0]
 80128ee:	4770      	bx	lr
 80128f0:	089b      	lsrs	r3, r3, #2
 80128f2:	6013      	str	r3, [r2, #0]
 80128f4:	e7fb      	b.n	80128ee <__lo0bits+0x22>
 80128f6:	b299      	uxth	r1, r3
 80128f8:	2900      	cmp	r1, #0
 80128fa:	d101      	bne.n	8012900 <__lo0bits+0x34>
 80128fc:	2010      	movs	r0, #16
 80128fe:	0c1b      	lsrs	r3, r3, #16
 8012900:	b2d9      	uxtb	r1, r3
 8012902:	2900      	cmp	r1, #0
 8012904:	d101      	bne.n	801290a <__lo0bits+0x3e>
 8012906:	3008      	adds	r0, #8
 8012908:	0a1b      	lsrs	r3, r3, #8
 801290a:	0719      	lsls	r1, r3, #28
 801290c:	d101      	bne.n	8012912 <__lo0bits+0x46>
 801290e:	3004      	adds	r0, #4
 8012910:	091b      	lsrs	r3, r3, #4
 8012912:	0799      	lsls	r1, r3, #30
 8012914:	d101      	bne.n	801291a <__lo0bits+0x4e>
 8012916:	3002      	adds	r0, #2
 8012918:	089b      	lsrs	r3, r3, #2
 801291a:	07d9      	lsls	r1, r3, #31
 801291c:	d4e9      	bmi.n	80128f2 <__lo0bits+0x26>
 801291e:	3001      	adds	r0, #1
 8012920:	085b      	lsrs	r3, r3, #1
 8012922:	d1e6      	bne.n	80128f2 <__lo0bits+0x26>
 8012924:	2020      	movs	r0, #32
 8012926:	e7e2      	b.n	80128ee <__lo0bits+0x22>

08012928 <__i2b>:
 8012928:	b510      	push	{r4, lr}
 801292a:	000c      	movs	r4, r1
 801292c:	2101      	movs	r1, #1
 801292e:	f7ff ff07 	bl	8012740 <_Balloc>
 8012932:	2800      	cmp	r0, #0
 8012934:	d106      	bne.n	8012944 <__i2b+0x1c>
 8012936:	21a0      	movs	r1, #160	; 0xa0
 8012938:	0002      	movs	r2, r0
 801293a:	4b04      	ldr	r3, [pc, #16]	; (801294c <__i2b+0x24>)
 801293c:	4804      	ldr	r0, [pc, #16]	; (8012950 <__i2b+0x28>)
 801293e:	0049      	lsls	r1, r1, #1
 8012940:	f000 fd1c 	bl	801337c <__assert_func>
 8012944:	2301      	movs	r3, #1
 8012946:	6144      	str	r4, [r0, #20]
 8012948:	6103      	str	r3, [r0, #16]
 801294a:	bd10      	pop	{r4, pc}
 801294c:	0801532f 	.word	0x0801532f
 8012950:	08015340 	.word	0x08015340

08012954 <__multiply>:
 8012954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012956:	690b      	ldr	r3, [r1, #16]
 8012958:	0014      	movs	r4, r2
 801295a:	6912      	ldr	r2, [r2, #16]
 801295c:	000d      	movs	r5, r1
 801295e:	b089      	sub	sp, #36	; 0x24
 8012960:	4293      	cmp	r3, r2
 8012962:	da01      	bge.n	8012968 <__multiply+0x14>
 8012964:	0025      	movs	r5, r4
 8012966:	000c      	movs	r4, r1
 8012968:	692f      	ldr	r7, [r5, #16]
 801296a:	6926      	ldr	r6, [r4, #16]
 801296c:	6869      	ldr	r1, [r5, #4]
 801296e:	19bb      	adds	r3, r7, r6
 8012970:	9302      	str	r3, [sp, #8]
 8012972:	68ab      	ldr	r3, [r5, #8]
 8012974:	19ba      	adds	r2, r7, r6
 8012976:	4293      	cmp	r3, r2
 8012978:	da00      	bge.n	801297c <__multiply+0x28>
 801297a:	3101      	adds	r1, #1
 801297c:	f7ff fee0 	bl	8012740 <_Balloc>
 8012980:	9001      	str	r0, [sp, #4]
 8012982:	2800      	cmp	r0, #0
 8012984:	d106      	bne.n	8012994 <__multiply+0x40>
 8012986:	215e      	movs	r1, #94	; 0x5e
 8012988:	0002      	movs	r2, r0
 801298a:	4b48      	ldr	r3, [pc, #288]	; (8012aac <__multiply+0x158>)
 801298c:	4848      	ldr	r0, [pc, #288]	; (8012ab0 <__multiply+0x15c>)
 801298e:	31ff      	adds	r1, #255	; 0xff
 8012990:	f000 fcf4 	bl	801337c <__assert_func>
 8012994:	9b01      	ldr	r3, [sp, #4]
 8012996:	2200      	movs	r2, #0
 8012998:	3314      	adds	r3, #20
 801299a:	469c      	mov	ip, r3
 801299c:	19bb      	adds	r3, r7, r6
 801299e:	009b      	lsls	r3, r3, #2
 80129a0:	4463      	add	r3, ip
 80129a2:	9303      	str	r3, [sp, #12]
 80129a4:	4663      	mov	r3, ip
 80129a6:	9903      	ldr	r1, [sp, #12]
 80129a8:	428b      	cmp	r3, r1
 80129aa:	d32c      	bcc.n	8012a06 <__multiply+0xb2>
 80129ac:	002b      	movs	r3, r5
 80129ae:	0022      	movs	r2, r4
 80129b0:	3314      	adds	r3, #20
 80129b2:	00bf      	lsls	r7, r7, #2
 80129b4:	3214      	adds	r2, #20
 80129b6:	9306      	str	r3, [sp, #24]
 80129b8:	00b6      	lsls	r6, r6, #2
 80129ba:	19db      	adds	r3, r3, r7
 80129bc:	9304      	str	r3, [sp, #16]
 80129be:	1993      	adds	r3, r2, r6
 80129c0:	9307      	str	r3, [sp, #28]
 80129c2:	2304      	movs	r3, #4
 80129c4:	9305      	str	r3, [sp, #20]
 80129c6:	002b      	movs	r3, r5
 80129c8:	9904      	ldr	r1, [sp, #16]
 80129ca:	3315      	adds	r3, #21
 80129cc:	9200      	str	r2, [sp, #0]
 80129ce:	4299      	cmp	r1, r3
 80129d0:	d305      	bcc.n	80129de <__multiply+0x8a>
 80129d2:	1b4b      	subs	r3, r1, r5
 80129d4:	3b15      	subs	r3, #21
 80129d6:	089b      	lsrs	r3, r3, #2
 80129d8:	3301      	adds	r3, #1
 80129da:	009b      	lsls	r3, r3, #2
 80129dc:	9305      	str	r3, [sp, #20]
 80129de:	9b07      	ldr	r3, [sp, #28]
 80129e0:	9a00      	ldr	r2, [sp, #0]
 80129e2:	429a      	cmp	r2, r3
 80129e4:	d311      	bcc.n	8012a0a <__multiply+0xb6>
 80129e6:	9b02      	ldr	r3, [sp, #8]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	dd06      	ble.n	80129fa <__multiply+0xa6>
 80129ec:	9b03      	ldr	r3, [sp, #12]
 80129ee:	3b04      	subs	r3, #4
 80129f0:	9303      	str	r3, [sp, #12]
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	9300      	str	r3, [sp, #0]
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d053      	beq.n	8012aa2 <__multiply+0x14e>
 80129fa:	9b01      	ldr	r3, [sp, #4]
 80129fc:	9a02      	ldr	r2, [sp, #8]
 80129fe:	0018      	movs	r0, r3
 8012a00:	611a      	str	r2, [r3, #16]
 8012a02:	b009      	add	sp, #36	; 0x24
 8012a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a06:	c304      	stmia	r3!, {r2}
 8012a08:	e7cd      	b.n	80129a6 <__multiply+0x52>
 8012a0a:	9b00      	ldr	r3, [sp, #0]
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	b298      	uxth	r0, r3
 8012a10:	2800      	cmp	r0, #0
 8012a12:	d01b      	beq.n	8012a4c <__multiply+0xf8>
 8012a14:	4667      	mov	r7, ip
 8012a16:	2400      	movs	r4, #0
 8012a18:	9e06      	ldr	r6, [sp, #24]
 8012a1a:	ce02      	ldmia	r6!, {r1}
 8012a1c:	683a      	ldr	r2, [r7, #0]
 8012a1e:	b28b      	uxth	r3, r1
 8012a20:	4343      	muls	r3, r0
 8012a22:	b292      	uxth	r2, r2
 8012a24:	189b      	adds	r3, r3, r2
 8012a26:	191b      	adds	r3, r3, r4
 8012a28:	0c0c      	lsrs	r4, r1, #16
 8012a2a:	4344      	muls	r4, r0
 8012a2c:	683a      	ldr	r2, [r7, #0]
 8012a2e:	0c11      	lsrs	r1, r2, #16
 8012a30:	1861      	adds	r1, r4, r1
 8012a32:	0c1c      	lsrs	r4, r3, #16
 8012a34:	1909      	adds	r1, r1, r4
 8012a36:	0c0c      	lsrs	r4, r1, #16
 8012a38:	b29b      	uxth	r3, r3
 8012a3a:	0409      	lsls	r1, r1, #16
 8012a3c:	430b      	orrs	r3, r1
 8012a3e:	c708      	stmia	r7!, {r3}
 8012a40:	9b04      	ldr	r3, [sp, #16]
 8012a42:	42b3      	cmp	r3, r6
 8012a44:	d8e9      	bhi.n	8012a1a <__multiply+0xc6>
 8012a46:	4663      	mov	r3, ip
 8012a48:	9a05      	ldr	r2, [sp, #20]
 8012a4a:	509c      	str	r4, [r3, r2]
 8012a4c:	9b00      	ldr	r3, [sp, #0]
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	0c1e      	lsrs	r6, r3, #16
 8012a52:	d020      	beq.n	8012a96 <__multiply+0x142>
 8012a54:	4663      	mov	r3, ip
 8012a56:	002c      	movs	r4, r5
 8012a58:	4660      	mov	r0, ip
 8012a5a:	2700      	movs	r7, #0
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	3414      	adds	r4, #20
 8012a60:	6822      	ldr	r2, [r4, #0]
 8012a62:	b29b      	uxth	r3, r3
 8012a64:	b291      	uxth	r1, r2
 8012a66:	4371      	muls	r1, r6
 8012a68:	6802      	ldr	r2, [r0, #0]
 8012a6a:	0c12      	lsrs	r2, r2, #16
 8012a6c:	1889      	adds	r1, r1, r2
 8012a6e:	19cf      	adds	r7, r1, r7
 8012a70:	0439      	lsls	r1, r7, #16
 8012a72:	430b      	orrs	r3, r1
 8012a74:	6003      	str	r3, [r0, #0]
 8012a76:	cc02      	ldmia	r4!, {r1}
 8012a78:	6843      	ldr	r3, [r0, #4]
 8012a7a:	0c09      	lsrs	r1, r1, #16
 8012a7c:	4371      	muls	r1, r6
 8012a7e:	b29b      	uxth	r3, r3
 8012a80:	0c3f      	lsrs	r7, r7, #16
 8012a82:	18cb      	adds	r3, r1, r3
 8012a84:	9a04      	ldr	r2, [sp, #16]
 8012a86:	19db      	adds	r3, r3, r7
 8012a88:	0c1f      	lsrs	r7, r3, #16
 8012a8a:	3004      	adds	r0, #4
 8012a8c:	42a2      	cmp	r2, r4
 8012a8e:	d8e7      	bhi.n	8012a60 <__multiply+0x10c>
 8012a90:	4662      	mov	r2, ip
 8012a92:	9905      	ldr	r1, [sp, #20]
 8012a94:	5053      	str	r3, [r2, r1]
 8012a96:	9b00      	ldr	r3, [sp, #0]
 8012a98:	3304      	adds	r3, #4
 8012a9a:	9300      	str	r3, [sp, #0]
 8012a9c:	2304      	movs	r3, #4
 8012a9e:	449c      	add	ip, r3
 8012aa0:	e79d      	b.n	80129de <__multiply+0x8a>
 8012aa2:	9b02      	ldr	r3, [sp, #8]
 8012aa4:	3b01      	subs	r3, #1
 8012aa6:	9302      	str	r3, [sp, #8]
 8012aa8:	e79d      	b.n	80129e6 <__multiply+0x92>
 8012aaa:	46c0      	nop			; (mov r8, r8)
 8012aac:	0801532f 	.word	0x0801532f
 8012ab0:	08015340 	.word	0x08015340

08012ab4 <__pow5mult>:
 8012ab4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012ab6:	2303      	movs	r3, #3
 8012ab8:	0015      	movs	r5, r2
 8012aba:	0007      	movs	r7, r0
 8012abc:	000e      	movs	r6, r1
 8012abe:	401a      	ands	r2, r3
 8012ac0:	421d      	tst	r5, r3
 8012ac2:	d008      	beq.n	8012ad6 <__pow5mult+0x22>
 8012ac4:	4925      	ldr	r1, [pc, #148]	; (8012b5c <__pow5mult+0xa8>)
 8012ac6:	3a01      	subs	r2, #1
 8012ac8:	0092      	lsls	r2, r2, #2
 8012aca:	5852      	ldr	r2, [r2, r1]
 8012acc:	2300      	movs	r3, #0
 8012ace:	0031      	movs	r1, r6
 8012ad0:	f7ff fe9e 	bl	8012810 <__multadd>
 8012ad4:	0006      	movs	r6, r0
 8012ad6:	10ad      	asrs	r5, r5, #2
 8012ad8:	d03d      	beq.n	8012b56 <__pow5mult+0xa2>
 8012ada:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8012adc:	2c00      	cmp	r4, #0
 8012ade:	d10f      	bne.n	8012b00 <__pow5mult+0x4c>
 8012ae0:	2010      	movs	r0, #16
 8012ae2:	f7ff fe0f 	bl	8012704 <malloc>
 8012ae6:	1e02      	subs	r2, r0, #0
 8012ae8:	6278      	str	r0, [r7, #36]	; 0x24
 8012aea:	d105      	bne.n	8012af8 <__pow5mult+0x44>
 8012aec:	21d7      	movs	r1, #215	; 0xd7
 8012aee:	4b1c      	ldr	r3, [pc, #112]	; (8012b60 <__pow5mult+0xac>)
 8012af0:	481c      	ldr	r0, [pc, #112]	; (8012b64 <__pow5mult+0xb0>)
 8012af2:	0049      	lsls	r1, r1, #1
 8012af4:	f000 fc42 	bl	801337c <__assert_func>
 8012af8:	6044      	str	r4, [r0, #4]
 8012afa:	6084      	str	r4, [r0, #8]
 8012afc:	6004      	str	r4, [r0, #0]
 8012afe:	60c4      	str	r4, [r0, #12]
 8012b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b02:	689c      	ldr	r4, [r3, #8]
 8012b04:	9301      	str	r3, [sp, #4]
 8012b06:	2c00      	cmp	r4, #0
 8012b08:	d108      	bne.n	8012b1c <__pow5mult+0x68>
 8012b0a:	0038      	movs	r0, r7
 8012b0c:	4916      	ldr	r1, [pc, #88]	; (8012b68 <__pow5mult+0xb4>)
 8012b0e:	f7ff ff0b 	bl	8012928 <__i2b>
 8012b12:	9b01      	ldr	r3, [sp, #4]
 8012b14:	0004      	movs	r4, r0
 8012b16:	6098      	str	r0, [r3, #8]
 8012b18:	2300      	movs	r3, #0
 8012b1a:	6003      	str	r3, [r0, #0]
 8012b1c:	2301      	movs	r3, #1
 8012b1e:	421d      	tst	r5, r3
 8012b20:	d00a      	beq.n	8012b38 <__pow5mult+0x84>
 8012b22:	0031      	movs	r1, r6
 8012b24:	0022      	movs	r2, r4
 8012b26:	0038      	movs	r0, r7
 8012b28:	f7ff ff14 	bl	8012954 <__multiply>
 8012b2c:	0031      	movs	r1, r6
 8012b2e:	9001      	str	r0, [sp, #4]
 8012b30:	0038      	movs	r0, r7
 8012b32:	f7ff fe49 	bl	80127c8 <_Bfree>
 8012b36:	9e01      	ldr	r6, [sp, #4]
 8012b38:	106d      	asrs	r5, r5, #1
 8012b3a:	d00c      	beq.n	8012b56 <__pow5mult+0xa2>
 8012b3c:	6820      	ldr	r0, [r4, #0]
 8012b3e:	2800      	cmp	r0, #0
 8012b40:	d107      	bne.n	8012b52 <__pow5mult+0x9e>
 8012b42:	0022      	movs	r2, r4
 8012b44:	0021      	movs	r1, r4
 8012b46:	0038      	movs	r0, r7
 8012b48:	f7ff ff04 	bl	8012954 <__multiply>
 8012b4c:	2300      	movs	r3, #0
 8012b4e:	6020      	str	r0, [r4, #0]
 8012b50:	6003      	str	r3, [r0, #0]
 8012b52:	0004      	movs	r4, r0
 8012b54:	e7e2      	b.n	8012b1c <__pow5mult+0x68>
 8012b56:	0030      	movs	r0, r6
 8012b58:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012b5a:	46c0      	nop			; (mov r8, r8)
 8012b5c:	08015490 	.word	0x08015490
 8012b60:	080152bd 	.word	0x080152bd
 8012b64:	08015340 	.word	0x08015340
 8012b68:	00000271 	.word	0x00000271

08012b6c <__lshift>:
 8012b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b6e:	000c      	movs	r4, r1
 8012b70:	0017      	movs	r7, r2
 8012b72:	6923      	ldr	r3, [r4, #16]
 8012b74:	1155      	asrs	r5, r2, #5
 8012b76:	b087      	sub	sp, #28
 8012b78:	18eb      	adds	r3, r5, r3
 8012b7a:	9302      	str	r3, [sp, #8]
 8012b7c:	3301      	adds	r3, #1
 8012b7e:	9301      	str	r3, [sp, #4]
 8012b80:	6849      	ldr	r1, [r1, #4]
 8012b82:	68a3      	ldr	r3, [r4, #8]
 8012b84:	9004      	str	r0, [sp, #16]
 8012b86:	9a01      	ldr	r2, [sp, #4]
 8012b88:	4293      	cmp	r3, r2
 8012b8a:	db10      	blt.n	8012bae <__lshift+0x42>
 8012b8c:	9804      	ldr	r0, [sp, #16]
 8012b8e:	f7ff fdd7 	bl	8012740 <_Balloc>
 8012b92:	2300      	movs	r3, #0
 8012b94:	0002      	movs	r2, r0
 8012b96:	0006      	movs	r6, r0
 8012b98:	0019      	movs	r1, r3
 8012b9a:	3214      	adds	r2, #20
 8012b9c:	4298      	cmp	r0, r3
 8012b9e:	d10c      	bne.n	8012bba <__lshift+0x4e>
 8012ba0:	21da      	movs	r1, #218	; 0xda
 8012ba2:	0002      	movs	r2, r0
 8012ba4:	4b26      	ldr	r3, [pc, #152]	; (8012c40 <__lshift+0xd4>)
 8012ba6:	4827      	ldr	r0, [pc, #156]	; (8012c44 <__lshift+0xd8>)
 8012ba8:	31ff      	adds	r1, #255	; 0xff
 8012baa:	f000 fbe7 	bl	801337c <__assert_func>
 8012bae:	3101      	adds	r1, #1
 8012bb0:	005b      	lsls	r3, r3, #1
 8012bb2:	e7e8      	b.n	8012b86 <__lshift+0x1a>
 8012bb4:	0098      	lsls	r0, r3, #2
 8012bb6:	5011      	str	r1, [r2, r0]
 8012bb8:	3301      	adds	r3, #1
 8012bba:	42ab      	cmp	r3, r5
 8012bbc:	dbfa      	blt.n	8012bb4 <__lshift+0x48>
 8012bbe:	43eb      	mvns	r3, r5
 8012bc0:	17db      	asrs	r3, r3, #31
 8012bc2:	401d      	ands	r5, r3
 8012bc4:	211f      	movs	r1, #31
 8012bc6:	0023      	movs	r3, r4
 8012bc8:	0038      	movs	r0, r7
 8012bca:	00ad      	lsls	r5, r5, #2
 8012bcc:	1955      	adds	r5, r2, r5
 8012bce:	6922      	ldr	r2, [r4, #16]
 8012bd0:	3314      	adds	r3, #20
 8012bd2:	0092      	lsls	r2, r2, #2
 8012bd4:	4008      	ands	r0, r1
 8012bd6:	4684      	mov	ip, r0
 8012bd8:	189a      	adds	r2, r3, r2
 8012bda:	420f      	tst	r7, r1
 8012bdc:	d02a      	beq.n	8012c34 <__lshift+0xc8>
 8012bde:	3101      	adds	r1, #1
 8012be0:	1a09      	subs	r1, r1, r0
 8012be2:	9105      	str	r1, [sp, #20]
 8012be4:	2100      	movs	r1, #0
 8012be6:	9503      	str	r5, [sp, #12]
 8012be8:	4667      	mov	r7, ip
 8012bea:	6818      	ldr	r0, [r3, #0]
 8012bec:	40b8      	lsls	r0, r7
 8012bee:	4301      	orrs	r1, r0
 8012bf0:	9803      	ldr	r0, [sp, #12]
 8012bf2:	c002      	stmia	r0!, {r1}
 8012bf4:	cb02      	ldmia	r3!, {r1}
 8012bf6:	9003      	str	r0, [sp, #12]
 8012bf8:	9805      	ldr	r0, [sp, #20]
 8012bfa:	40c1      	lsrs	r1, r0
 8012bfc:	429a      	cmp	r2, r3
 8012bfe:	d8f3      	bhi.n	8012be8 <__lshift+0x7c>
 8012c00:	0020      	movs	r0, r4
 8012c02:	3015      	adds	r0, #21
 8012c04:	2304      	movs	r3, #4
 8012c06:	4282      	cmp	r2, r0
 8012c08:	d304      	bcc.n	8012c14 <__lshift+0xa8>
 8012c0a:	1b13      	subs	r3, r2, r4
 8012c0c:	3b15      	subs	r3, #21
 8012c0e:	089b      	lsrs	r3, r3, #2
 8012c10:	3301      	adds	r3, #1
 8012c12:	009b      	lsls	r3, r3, #2
 8012c14:	50e9      	str	r1, [r5, r3]
 8012c16:	2900      	cmp	r1, #0
 8012c18:	d002      	beq.n	8012c20 <__lshift+0xb4>
 8012c1a:	9b02      	ldr	r3, [sp, #8]
 8012c1c:	3302      	adds	r3, #2
 8012c1e:	9301      	str	r3, [sp, #4]
 8012c20:	9b01      	ldr	r3, [sp, #4]
 8012c22:	9804      	ldr	r0, [sp, #16]
 8012c24:	3b01      	subs	r3, #1
 8012c26:	0021      	movs	r1, r4
 8012c28:	6133      	str	r3, [r6, #16]
 8012c2a:	f7ff fdcd 	bl	80127c8 <_Bfree>
 8012c2e:	0030      	movs	r0, r6
 8012c30:	b007      	add	sp, #28
 8012c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c34:	cb02      	ldmia	r3!, {r1}
 8012c36:	c502      	stmia	r5!, {r1}
 8012c38:	429a      	cmp	r2, r3
 8012c3a:	d8fb      	bhi.n	8012c34 <__lshift+0xc8>
 8012c3c:	e7f0      	b.n	8012c20 <__lshift+0xb4>
 8012c3e:	46c0      	nop			; (mov r8, r8)
 8012c40:	0801532f 	.word	0x0801532f
 8012c44:	08015340 	.word	0x08015340

08012c48 <__mcmp>:
 8012c48:	6902      	ldr	r2, [r0, #16]
 8012c4a:	690b      	ldr	r3, [r1, #16]
 8012c4c:	b530      	push	{r4, r5, lr}
 8012c4e:	0004      	movs	r4, r0
 8012c50:	1ad0      	subs	r0, r2, r3
 8012c52:	429a      	cmp	r2, r3
 8012c54:	d10d      	bne.n	8012c72 <__mcmp+0x2a>
 8012c56:	009b      	lsls	r3, r3, #2
 8012c58:	3414      	adds	r4, #20
 8012c5a:	3114      	adds	r1, #20
 8012c5c:	18e2      	adds	r2, r4, r3
 8012c5e:	18c9      	adds	r1, r1, r3
 8012c60:	3a04      	subs	r2, #4
 8012c62:	3904      	subs	r1, #4
 8012c64:	6815      	ldr	r5, [r2, #0]
 8012c66:	680b      	ldr	r3, [r1, #0]
 8012c68:	429d      	cmp	r5, r3
 8012c6a:	d003      	beq.n	8012c74 <__mcmp+0x2c>
 8012c6c:	2001      	movs	r0, #1
 8012c6e:	429d      	cmp	r5, r3
 8012c70:	d303      	bcc.n	8012c7a <__mcmp+0x32>
 8012c72:	bd30      	pop	{r4, r5, pc}
 8012c74:	4294      	cmp	r4, r2
 8012c76:	d3f3      	bcc.n	8012c60 <__mcmp+0x18>
 8012c78:	e7fb      	b.n	8012c72 <__mcmp+0x2a>
 8012c7a:	4240      	negs	r0, r0
 8012c7c:	e7f9      	b.n	8012c72 <__mcmp+0x2a>
	...

08012c80 <__mdiff>:
 8012c80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012c82:	000e      	movs	r6, r1
 8012c84:	0007      	movs	r7, r0
 8012c86:	0011      	movs	r1, r2
 8012c88:	0030      	movs	r0, r6
 8012c8a:	b087      	sub	sp, #28
 8012c8c:	0014      	movs	r4, r2
 8012c8e:	f7ff ffdb 	bl	8012c48 <__mcmp>
 8012c92:	1e05      	subs	r5, r0, #0
 8012c94:	d110      	bne.n	8012cb8 <__mdiff+0x38>
 8012c96:	0001      	movs	r1, r0
 8012c98:	0038      	movs	r0, r7
 8012c9a:	f7ff fd51 	bl	8012740 <_Balloc>
 8012c9e:	1e02      	subs	r2, r0, #0
 8012ca0:	d104      	bne.n	8012cac <__mdiff+0x2c>
 8012ca2:	4b40      	ldr	r3, [pc, #256]	; (8012da4 <__mdiff+0x124>)
 8012ca4:	4940      	ldr	r1, [pc, #256]	; (8012da8 <__mdiff+0x128>)
 8012ca6:	4841      	ldr	r0, [pc, #260]	; (8012dac <__mdiff+0x12c>)
 8012ca8:	f000 fb68 	bl	801337c <__assert_func>
 8012cac:	2301      	movs	r3, #1
 8012cae:	6145      	str	r5, [r0, #20]
 8012cb0:	6103      	str	r3, [r0, #16]
 8012cb2:	0010      	movs	r0, r2
 8012cb4:	b007      	add	sp, #28
 8012cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012cb8:	2301      	movs	r3, #1
 8012cba:	9301      	str	r3, [sp, #4]
 8012cbc:	2800      	cmp	r0, #0
 8012cbe:	db04      	blt.n	8012cca <__mdiff+0x4a>
 8012cc0:	0023      	movs	r3, r4
 8012cc2:	0034      	movs	r4, r6
 8012cc4:	001e      	movs	r6, r3
 8012cc6:	2300      	movs	r3, #0
 8012cc8:	9301      	str	r3, [sp, #4]
 8012cca:	0038      	movs	r0, r7
 8012ccc:	6861      	ldr	r1, [r4, #4]
 8012cce:	f7ff fd37 	bl	8012740 <_Balloc>
 8012cd2:	1e02      	subs	r2, r0, #0
 8012cd4:	d103      	bne.n	8012cde <__mdiff+0x5e>
 8012cd6:	2190      	movs	r1, #144	; 0x90
 8012cd8:	4b32      	ldr	r3, [pc, #200]	; (8012da4 <__mdiff+0x124>)
 8012cda:	0089      	lsls	r1, r1, #2
 8012cdc:	e7e3      	b.n	8012ca6 <__mdiff+0x26>
 8012cde:	9b01      	ldr	r3, [sp, #4]
 8012ce0:	2700      	movs	r7, #0
 8012ce2:	60c3      	str	r3, [r0, #12]
 8012ce4:	6920      	ldr	r0, [r4, #16]
 8012ce6:	3414      	adds	r4, #20
 8012ce8:	9401      	str	r4, [sp, #4]
 8012cea:	9b01      	ldr	r3, [sp, #4]
 8012cec:	0084      	lsls	r4, r0, #2
 8012cee:	191b      	adds	r3, r3, r4
 8012cf0:	0034      	movs	r4, r6
 8012cf2:	9302      	str	r3, [sp, #8]
 8012cf4:	6933      	ldr	r3, [r6, #16]
 8012cf6:	3414      	adds	r4, #20
 8012cf8:	0099      	lsls	r1, r3, #2
 8012cfa:	1863      	adds	r3, r4, r1
 8012cfc:	9303      	str	r3, [sp, #12]
 8012cfe:	0013      	movs	r3, r2
 8012d00:	3314      	adds	r3, #20
 8012d02:	469c      	mov	ip, r3
 8012d04:	9305      	str	r3, [sp, #20]
 8012d06:	9b01      	ldr	r3, [sp, #4]
 8012d08:	9304      	str	r3, [sp, #16]
 8012d0a:	9b04      	ldr	r3, [sp, #16]
 8012d0c:	cc02      	ldmia	r4!, {r1}
 8012d0e:	cb20      	ldmia	r3!, {r5}
 8012d10:	9304      	str	r3, [sp, #16]
 8012d12:	b2ab      	uxth	r3, r5
 8012d14:	19df      	adds	r7, r3, r7
 8012d16:	b28b      	uxth	r3, r1
 8012d18:	1afb      	subs	r3, r7, r3
 8012d1a:	0c09      	lsrs	r1, r1, #16
 8012d1c:	0c2d      	lsrs	r5, r5, #16
 8012d1e:	1a6d      	subs	r5, r5, r1
 8012d20:	1419      	asrs	r1, r3, #16
 8012d22:	186d      	adds	r5, r5, r1
 8012d24:	4661      	mov	r1, ip
 8012d26:	142f      	asrs	r7, r5, #16
 8012d28:	b29b      	uxth	r3, r3
 8012d2a:	042d      	lsls	r5, r5, #16
 8012d2c:	432b      	orrs	r3, r5
 8012d2e:	c108      	stmia	r1!, {r3}
 8012d30:	9b03      	ldr	r3, [sp, #12]
 8012d32:	468c      	mov	ip, r1
 8012d34:	42a3      	cmp	r3, r4
 8012d36:	d8e8      	bhi.n	8012d0a <__mdiff+0x8a>
 8012d38:	0031      	movs	r1, r6
 8012d3a:	9c03      	ldr	r4, [sp, #12]
 8012d3c:	3115      	adds	r1, #21
 8012d3e:	2304      	movs	r3, #4
 8012d40:	428c      	cmp	r4, r1
 8012d42:	d304      	bcc.n	8012d4e <__mdiff+0xce>
 8012d44:	1ba3      	subs	r3, r4, r6
 8012d46:	3b15      	subs	r3, #21
 8012d48:	089b      	lsrs	r3, r3, #2
 8012d4a:	3301      	adds	r3, #1
 8012d4c:	009b      	lsls	r3, r3, #2
 8012d4e:	9901      	ldr	r1, [sp, #4]
 8012d50:	18cc      	adds	r4, r1, r3
 8012d52:	9905      	ldr	r1, [sp, #20]
 8012d54:	0026      	movs	r6, r4
 8012d56:	18cb      	adds	r3, r1, r3
 8012d58:	469c      	mov	ip, r3
 8012d5a:	9902      	ldr	r1, [sp, #8]
 8012d5c:	428e      	cmp	r6, r1
 8012d5e:	d310      	bcc.n	8012d82 <__mdiff+0x102>
 8012d60:	9e02      	ldr	r6, [sp, #8]
 8012d62:	1ee1      	subs	r1, r4, #3
 8012d64:	2500      	movs	r5, #0
 8012d66:	428e      	cmp	r6, r1
 8012d68:	d304      	bcc.n	8012d74 <__mdiff+0xf4>
 8012d6a:	0031      	movs	r1, r6
 8012d6c:	3103      	adds	r1, #3
 8012d6e:	1b0c      	subs	r4, r1, r4
 8012d70:	08a4      	lsrs	r4, r4, #2
 8012d72:	00a5      	lsls	r5, r4, #2
 8012d74:	195b      	adds	r3, r3, r5
 8012d76:	3b04      	subs	r3, #4
 8012d78:	6819      	ldr	r1, [r3, #0]
 8012d7a:	2900      	cmp	r1, #0
 8012d7c:	d00f      	beq.n	8012d9e <__mdiff+0x11e>
 8012d7e:	6110      	str	r0, [r2, #16]
 8012d80:	e797      	b.n	8012cb2 <__mdiff+0x32>
 8012d82:	ce02      	ldmia	r6!, {r1}
 8012d84:	b28d      	uxth	r5, r1
 8012d86:	19ed      	adds	r5, r5, r7
 8012d88:	0c0f      	lsrs	r7, r1, #16
 8012d8a:	1429      	asrs	r1, r5, #16
 8012d8c:	1879      	adds	r1, r7, r1
 8012d8e:	140f      	asrs	r7, r1, #16
 8012d90:	b2ad      	uxth	r5, r5
 8012d92:	0409      	lsls	r1, r1, #16
 8012d94:	430d      	orrs	r5, r1
 8012d96:	4661      	mov	r1, ip
 8012d98:	c120      	stmia	r1!, {r5}
 8012d9a:	468c      	mov	ip, r1
 8012d9c:	e7dd      	b.n	8012d5a <__mdiff+0xda>
 8012d9e:	3801      	subs	r0, #1
 8012da0:	e7e9      	b.n	8012d76 <__mdiff+0xf6>
 8012da2:	46c0      	nop			; (mov r8, r8)
 8012da4:	0801532f 	.word	0x0801532f
 8012da8:	00000232 	.word	0x00000232
 8012dac:	08015340 	.word	0x08015340

08012db0 <__d2b>:
 8012db0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012db2:	2101      	movs	r1, #1
 8012db4:	0014      	movs	r4, r2
 8012db6:	001e      	movs	r6, r3
 8012db8:	9f08      	ldr	r7, [sp, #32]
 8012dba:	f7ff fcc1 	bl	8012740 <_Balloc>
 8012dbe:	1e05      	subs	r5, r0, #0
 8012dc0:	d105      	bne.n	8012dce <__d2b+0x1e>
 8012dc2:	0002      	movs	r2, r0
 8012dc4:	4b26      	ldr	r3, [pc, #152]	; (8012e60 <__d2b+0xb0>)
 8012dc6:	4927      	ldr	r1, [pc, #156]	; (8012e64 <__d2b+0xb4>)
 8012dc8:	4827      	ldr	r0, [pc, #156]	; (8012e68 <__d2b+0xb8>)
 8012dca:	f000 fad7 	bl	801337c <__assert_func>
 8012dce:	0333      	lsls	r3, r6, #12
 8012dd0:	0076      	lsls	r6, r6, #1
 8012dd2:	0b1b      	lsrs	r3, r3, #12
 8012dd4:	0d76      	lsrs	r6, r6, #21
 8012dd6:	d124      	bne.n	8012e22 <__d2b+0x72>
 8012dd8:	9301      	str	r3, [sp, #4]
 8012dda:	2c00      	cmp	r4, #0
 8012ddc:	d027      	beq.n	8012e2e <__d2b+0x7e>
 8012dde:	4668      	mov	r0, sp
 8012de0:	9400      	str	r4, [sp, #0]
 8012de2:	f7ff fd73 	bl	80128cc <__lo0bits>
 8012de6:	9c00      	ldr	r4, [sp, #0]
 8012de8:	2800      	cmp	r0, #0
 8012dea:	d01e      	beq.n	8012e2a <__d2b+0x7a>
 8012dec:	9b01      	ldr	r3, [sp, #4]
 8012dee:	2120      	movs	r1, #32
 8012df0:	001a      	movs	r2, r3
 8012df2:	1a09      	subs	r1, r1, r0
 8012df4:	408a      	lsls	r2, r1
 8012df6:	40c3      	lsrs	r3, r0
 8012df8:	4322      	orrs	r2, r4
 8012dfa:	616a      	str	r2, [r5, #20]
 8012dfc:	9301      	str	r3, [sp, #4]
 8012dfe:	9c01      	ldr	r4, [sp, #4]
 8012e00:	61ac      	str	r4, [r5, #24]
 8012e02:	1e63      	subs	r3, r4, #1
 8012e04:	419c      	sbcs	r4, r3
 8012e06:	3401      	adds	r4, #1
 8012e08:	612c      	str	r4, [r5, #16]
 8012e0a:	2e00      	cmp	r6, #0
 8012e0c:	d018      	beq.n	8012e40 <__d2b+0x90>
 8012e0e:	4b17      	ldr	r3, [pc, #92]	; (8012e6c <__d2b+0xbc>)
 8012e10:	18f6      	adds	r6, r6, r3
 8012e12:	2335      	movs	r3, #53	; 0x35
 8012e14:	1836      	adds	r6, r6, r0
 8012e16:	1a18      	subs	r0, r3, r0
 8012e18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e1a:	603e      	str	r6, [r7, #0]
 8012e1c:	6018      	str	r0, [r3, #0]
 8012e1e:	0028      	movs	r0, r5
 8012e20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8012e22:	2280      	movs	r2, #128	; 0x80
 8012e24:	0352      	lsls	r2, r2, #13
 8012e26:	4313      	orrs	r3, r2
 8012e28:	e7d6      	b.n	8012dd8 <__d2b+0x28>
 8012e2a:	616c      	str	r4, [r5, #20]
 8012e2c:	e7e7      	b.n	8012dfe <__d2b+0x4e>
 8012e2e:	a801      	add	r0, sp, #4
 8012e30:	f7ff fd4c 	bl	80128cc <__lo0bits>
 8012e34:	2401      	movs	r4, #1
 8012e36:	9b01      	ldr	r3, [sp, #4]
 8012e38:	612c      	str	r4, [r5, #16]
 8012e3a:	616b      	str	r3, [r5, #20]
 8012e3c:	3020      	adds	r0, #32
 8012e3e:	e7e4      	b.n	8012e0a <__d2b+0x5a>
 8012e40:	4b0b      	ldr	r3, [pc, #44]	; (8012e70 <__d2b+0xc0>)
 8012e42:	18c0      	adds	r0, r0, r3
 8012e44:	4b0b      	ldr	r3, [pc, #44]	; (8012e74 <__d2b+0xc4>)
 8012e46:	6038      	str	r0, [r7, #0]
 8012e48:	18e3      	adds	r3, r4, r3
 8012e4a:	009b      	lsls	r3, r3, #2
 8012e4c:	18eb      	adds	r3, r5, r3
 8012e4e:	6958      	ldr	r0, [r3, #20]
 8012e50:	f7ff fd22 	bl	8012898 <__hi0bits>
 8012e54:	0164      	lsls	r4, r4, #5
 8012e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e58:	1a24      	subs	r4, r4, r0
 8012e5a:	601c      	str	r4, [r3, #0]
 8012e5c:	e7df      	b.n	8012e1e <__d2b+0x6e>
 8012e5e:	46c0      	nop			; (mov r8, r8)
 8012e60:	0801532f 	.word	0x0801532f
 8012e64:	0000030a 	.word	0x0000030a
 8012e68:	08015340 	.word	0x08015340
 8012e6c:	fffffbcd 	.word	0xfffffbcd
 8012e70:	fffffbce 	.word	0xfffffbce
 8012e74:	3fffffff 	.word	0x3fffffff

08012e78 <_calloc_r>:
 8012e78:	b570      	push	{r4, r5, r6, lr}
 8012e7a:	0c13      	lsrs	r3, r2, #16
 8012e7c:	0c0d      	lsrs	r5, r1, #16
 8012e7e:	d11e      	bne.n	8012ebe <_calloc_r+0x46>
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d10c      	bne.n	8012e9e <_calloc_r+0x26>
 8012e84:	b289      	uxth	r1, r1
 8012e86:	b294      	uxth	r4, r2
 8012e88:	434c      	muls	r4, r1
 8012e8a:	0021      	movs	r1, r4
 8012e8c:	f000 f88c 	bl	8012fa8 <_malloc_r>
 8012e90:	1e05      	subs	r5, r0, #0
 8012e92:	d01b      	beq.n	8012ecc <_calloc_r+0x54>
 8012e94:	0022      	movs	r2, r4
 8012e96:	2100      	movs	r1, #0
 8012e98:	f7fe f8e8 	bl	801106c <memset>
 8012e9c:	e016      	b.n	8012ecc <_calloc_r+0x54>
 8012e9e:	1c1d      	adds	r5, r3, #0
 8012ea0:	1c0b      	adds	r3, r1, #0
 8012ea2:	b292      	uxth	r2, r2
 8012ea4:	b289      	uxth	r1, r1
 8012ea6:	b29c      	uxth	r4, r3
 8012ea8:	4351      	muls	r1, r2
 8012eaa:	b2ab      	uxth	r3, r5
 8012eac:	4363      	muls	r3, r4
 8012eae:	0c0c      	lsrs	r4, r1, #16
 8012eb0:	191c      	adds	r4, r3, r4
 8012eb2:	0c22      	lsrs	r2, r4, #16
 8012eb4:	d107      	bne.n	8012ec6 <_calloc_r+0x4e>
 8012eb6:	0424      	lsls	r4, r4, #16
 8012eb8:	b289      	uxth	r1, r1
 8012eba:	430c      	orrs	r4, r1
 8012ebc:	e7e5      	b.n	8012e8a <_calloc_r+0x12>
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d101      	bne.n	8012ec6 <_calloc_r+0x4e>
 8012ec2:	1c13      	adds	r3, r2, #0
 8012ec4:	e7ed      	b.n	8012ea2 <_calloc_r+0x2a>
 8012ec6:	230c      	movs	r3, #12
 8012ec8:	2500      	movs	r5, #0
 8012eca:	6003      	str	r3, [r0, #0]
 8012ecc:	0028      	movs	r0, r5
 8012ece:	bd70      	pop	{r4, r5, r6, pc}

08012ed0 <_free_r>:
 8012ed0:	b570      	push	{r4, r5, r6, lr}
 8012ed2:	0005      	movs	r5, r0
 8012ed4:	2900      	cmp	r1, #0
 8012ed6:	d010      	beq.n	8012efa <_free_r+0x2a>
 8012ed8:	1f0c      	subs	r4, r1, #4
 8012eda:	6823      	ldr	r3, [r4, #0]
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	da00      	bge.n	8012ee2 <_free_r+0x12>
 8012ee0:	18e4      	adds	r4, r4, r3
 8012ee2:	0028      	movs	r0, r5
 8012ee4:	f000 fa9e 	bl	8013424 <__malloc_lock>
 8012ee8:	4a1d      	ldr	r2, [pc, #116]	; (8012f60 <_free_r+0x90>)
 8012eea:	6813      	ldr	r3, [r2, #0]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d105      	bne.n	8012efc <_free_r+0x2c>
 8012ef0:	6063      	str	r3, [r4, #4]
 8012ef2:	6014      	str	r4, [r2, #0]
 8012ef4:	0028      	movs	r0, r5
 8012ef6:	f000 fa9d 	bl	8013434 <__malloc_unlock>
 8012efa:	bd70      	pop	{r4, r5, r6, pc}
 8012efc:	42a3      	cmp	r3, r4
 8012efe:	d908      	bls.n	8012f12 <_free_r+0x42>
 8012f00:	6821      	ldr	r1, [r4, #0]
 8012f02:	1860      	adds	r0, r4, r1
 8012f04:	4283      	cmp	r3, r0
 8012f06:	d1f3      	bne.n	8012ef0 <_free_r+0x20>
 8012f08:	6818      	ldr	r0, [r3, #0]
 8012f0a:	685b      	ldr	r3, [r3, #4]
 8012f0c:	1841      	adds	r1, r0, r1
 8012f0e:	6021      	str	r1, [r4, #0]
 8012f10:	e7ee      	b.n	8012ef0 <_free_r+0x20>
 8012f12:	001a      	movs	r2, r3
 8012f14:	685b      	ldr	r3, [r3, #4]
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d001      	beq.n	8012f1e <_free_r+0x4e>
 8012f1a:	42a3      	cmp	r3, r4
 8012f1c:	d9f9      	bls.n	8012f12 <_free_r+0x42>
 8012f1e:	6811      	ldr	r1, [r2, #0]
 8012f20:	1850      	adds	r0, r2, r1
 8012f22:	42a0      	cmp	r0, r4
 8012f24:	d10b      	bne.n	8012f3e <_free_r+0x6e>
 8012f26:	6820      	ldr	r0, [r4, #0]
 8012f28:	1809      	adds	r1, r1, r0
 8012f2a:	1850      	adds	r0, r2, r1
 8012f2c:	6011      	str	r1, [r2, #0]
 8012f2e:	4283      	cmp	r3, r0
 8012f30:	d1e0      	bne.n	8012ef4 <_free_r+0x24>
 8012f32:	6818      	ldr	r0, [r3, #0]
 8012f34:	685b      	ldr	r3, [r3, #4]
 8012f36:	1841      	adds	r1, r0, r1
 8012f38:	6011      	str	r1, [r2, #0]
 8012f3a:	6053      	str	r3, [r2, #4]
 8012f3c:	e7da      	b.n	8012ef4 <_free_r+0x24>
 8012f3e:	42a0      	cmp	r0, r4
 8012f40:	d902      	bls.n	8012f48 <_free_r+0x78>
 8012f42:	230c      	movs	r3, #12
 8012f44:	602b      	str	r3, [r5, #0]
 8012f46:	e7d5      	b.n	8012ef4 <_free_r+0x24>
 8012f48:	6821      	ldr	r1, [r4, #0]
 8012f4a:	1860      	adds	r0, r4, r1
 8012f4c:	4283      	cmp	r3, r0
 8012f4e:	d103      	bne.n	8012f58 <_free_r+0x88>
 8012f50:	6818      	ldr	r0, [r3, #0]
 8012f52:	685b      	ldr	r3, [r3, #4]
 8012f54:	1841      	adds	r1, r0, r1
 8012f56:	6021      	str	r1, [r4, #0]
 8012f58:	6063      	str	r3, [r4, #4]
 8012f5a:	6054      	str	r4, [r2, #4]
 8012f5c:	e7ca      	b.n	8012ef4 <_free_r+0x24>
 8012f5e:	46c0      	nop			; (mov r8, r8)
 8012f60:	2000065c 	.word	0x2000065c

08012f64 <sbrk_aligned>:
 8012f64:	b570      	push	{r4, r5, r6, lr}
 8012f66:	4e0f      	ldr	r6, [pc, #60]	; (8012fa4 <sbrk_aligned+0x40>)
 8012f68:	000d      	movs	r5, r1
 8012f6a:	6831      	ldr	r1, [r6, #0]
 8012f6c:	0004      	movs	r4, r0
 8012f6e:	2900      	cmp	r1, #0
 8012f70:	d102      	bne.n	8012f78 <sbrk_aligned+0x14>
 8012f72:	f000 f9f1 	bl	8013358 <_sbrk_r>
 8012f76:	6030      	str	r0, [r6, #0]
 8012f78:	0029      	movs	r1, r5
 8012f7a:	0020      	movs	r0, r4
 8012f7c:	f000 f9ec 	bl	8013358 <_sbrk_r>
 8012f80:	1c43      	adds	r3, r0, #1
 8012f82:	d00a      	beq.n	8012f9a <sbrk_aligned+0x36>
 8012f84:	2303      	movs	r3, #3
 8012f86:	1cc5      	adds	r5, r0, #3
 8012f88:	439d      	bics	r5, r3
 8012f8a:	42a8      	cmp	r0, r5
 8012f8c:	d007      	beq.n	8012f9e <sbrk_aligned+0x3a>
 8012f8e:	1a29      	subs	r1, r5, r0
 8012f90:	0020      	movs	r0, r4
 8012f92:	f000 f9e1 	bl	8013358 <_sbrk_r>
 8012f96:	1c43      	adds	r3, r0, #1
 8012f98:	d101      	bne.n	8012f9e <sbrk_aligned+0x3a>
 8012f9a:	2501      	movs	r5, #1
 8012f9c:	426d      	negs	r5, r5
 8012f9e:	0028      	movs	r0, r5
 8012fa0:	bd70      	pop	{r4, r5, r6, pc}
 8012fa2:	46c0      	nop			; (mov r8, r8)
 8012fa4:	20000660 	.word	0x20000660

08012fa8 <_malloc_r>:
 8012fa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012faa:	2203      	movs	r2, #3
 8012fac:	1ccb      	adds	r3, r1, #3
 8012fae:	4393      	bics	r3, r2
 8012fb0:	3308      	adds	r3, #8
 8012fb2:	0006      	movs	r6, r0
 8012fb4:	001f      	movs	r7, r3
 8012fb6:	2b0c      	cmp	r3, #12
 8012fb8:	d232      	bcs.n	8013020 <_malloc_r+0x78>
 8012fba:	270c      	movs	r7, #12
 8012fbc:	42b9      	cmp	r1, r7
 8012fbe:	d831      	bhi.n	8013024 <_malloc_r+0x7c>
 8012fc0:	0030      	movs	r0, r6
 8012fc2:	f000 fa2f 	bl	8013424 <__malloc_lock>
 8012fc6:	4d32      	ldr	r5, [pc, #200]	; (8013090 <_malloc_r+0xe8>)
 8012fc8:	682b      	ldr	r3, [r5, #0]
 8012fca:	001c      	movs	r4, r3
 8012fcc:	2c00      	cmp	r4, #0
 8012fce:	d12e      	bne.n	801302e <_malloc_r+0x86>
 8012fd0:	0039      	movs	r1, r7
 8012fd2:	0030      	movs	r0, r6
 8012fd4:	f7ff ffc6 	bl	8012f64 <sbrk_aligned>
 8012fd8:	0004      	movs	r4, r0
 8012fda:	1c43      	adds	r3, r0, #1
 8012fdc:	d11e      	bne.n	801301c <_malloc_r+0x74>
 8012fde:	682c      	ldr	r4, [r5, #0]
 8012fe0:	0025      	movs	r5, r4
 8012fe2:	2d00      	cmp	r5, #0
 8012fe4:	d14a      	bne.n	801307c <_malloc_r+0xd4>
 8012fe6:	6823      	ldr	r3, [r4, #0]
 8012fe8:	0029      	movs	r1, r5
 8012fea:	18e3      	adds	r3, r4, r3
 8012fec:	0030      	movs	r0, r6
 8012fee:	9301      	str	r3, [sp, #4]
 8012ff0:	f000 f9b2 	bl	8013358 <_sbrk_r>
 8012ff4:	9b01      	ldr	r3, [sp, #4]
 8012ff6:	4283      	cmp	r3, r0
 8012ff8:	d143      	bne.n	8013082 <_malloc_r+0xda>
 8012ffa:	6823      	ldr	r3, [r4, #0]
 8012ffc:	3703      	adds	r7, #3
 8012ffe:	1aff      	subs	r7, r7, r3
 8013000:	2303      	movs	r3, #3
 8013002:	439f      	bics	r7, r3
 8013004:	3708      	adds	r7, #8
 8013006:	2f0c      	cmp	r7, #12
 8013008:	d200      	bcs.n	801300c <_malloc_r+0x64>
 801300a:	270c      	movs	r7, #12
 801300c:	0039      	movs	r1, r7
 801300e:	0030      	movs	r0, r6
 8013010:	f7ff ffa8 	bl	8012f64 <sbrk_aligned>
 8013014:	1c43      	adds	r3, r0, #1
 8013016:	d034      	beq.n	8013082 <_malloc_r+0xda>
 8013018:	6823      	ldr	r3, [r4, #0]
 801301a:	19df      	adds	r7, r3, r7
 801301c:	6027      	str	r7, [r4, #0]
 801301e:	e013      	b.n	8013048 <_malloc_r+0xa0>
 8013020:	2b00      	cmp	r3, #0
 8013022:	dacb      	bge.n	8012fbc <_malloc_r+0x14>
 8013024:	230c      	movs	r3, #12
 8013026:	2500      	movs	r5, #0
 8013028:	6033      	str	r3, [r6, #0]
 801302a:	0028      	movs	r0, r5
 801302c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801302e:	6822      	ldr	r2, [r4, #0]
 8013030:	1bd1      	subs	r1, r2, r7
 8013032:	d420      	bmi.n	8013076 <_malloc_r+0xce>
 8013034:	290b      	cmp	r1, #11
 8013036:	d917      	bls.n	8013068 <_malloc_r+0xc0>
 8013038:	19e2      	adds	r2, r4, r7
 801303a:	6027      	str	r7, [r4, #0]
 801303c:	42a3      	cmp	r3, r4
 801303e:	d111      	bne.n	8013064 <_malloc_r+0xbc>
 8013040:	602a      	str	r2, [r5, #0]
 8013042:	6863      	ldr	r3, [r4, #4]
 8013044:	6011      	str	r1, [r2, #0]
 8013046:	6053      	str	r3, [r2, #4]
 8013048:	0030      	movs	r0, r6
 801304a:	0025      	movs	r5, r4
 801304c:	f000 f9f2 	bl	8013434 <__malloc_unlock>
 8013050:	2207      	movs	r2, #7
 8013052:	350b      	adds	r5, #11
 8013054:	1d23      	adds	r3, r4, #4
 8013056:	4395      	bics	r5, r2
 8013058:	1aea      	subs	r2, r5, r3
 801305a:	429d      	cmp	r5, r3
 801305c:	d0e5      	beq.n	801302a <_malloc_r+0x82>
 801305e:	1b5b      	subs	r3, r3, r5
 8013060:	50a3      	str	r3, [r4, r2]
 8013062:	e7e2      	b.n	801302a <_malloc_r+0x82>
 8013064:	605a      	str	r2, [r3, #4]
 8013066:	e7ec      	b.n	8013042 <_malloc_r+0x9a>
 8013068:	6862      	ldr	r2, [r4, #4]
 801306a:	42a3      	cmp	r3, r4
 801306c:	d101      	bne.n	8013072 <_malloc_r+0xca>
 801306e:	602a      	str	r2, [r5, #0]
 8013070:	e7ea      	b.n	8013048 <_malloc_r+0xa0>
 8013072:	605a      	str	r2, [r3, #4]
 8013074:	e7e8      	b.n	8013048 <_malloc_r+0xa0>
 8013076:	0023      	movs	r3, r4
 8013078:	6864      	ldr	r4, [r4, #4]
 801307a:	e7a7      	b.n	8012fcc <_malloc_r+0x24>
 801307c:	002c      	movs	r4, r5
 801307e:	686d      	ldr	r5, [r5, #4]
 8013080:	e7af      	b.n	8012fe2 <_malloc_r+0x3a>
 8013082:	230c      	movs	r3, #12
 8013084:	0030      	movs	r0, r6
 8013086:	6033      	str	r3, [r6, #0]
 8013088:	f000 f9d4 	bl	8013434 <__malloc_unlock>
 801308c:	e7cd      	b.n	801302a <_malloc_r+0x82>
 801308e:	46c0      	nop			; (mov r8, r8)
 8013090:	2000065c 	.word	0x2000065c

08013094 <__ssputs_r>:
 8013094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013096:	688e      	ldr	r6, [r1, #8]
 8013098:	b085      	sub	sp, #20
 801309a:	0007      	movs	r7, r0
 801309c:	000c      	movs	r4, r1
 801309e:	9203      	str	r2, [sp, #12]
 80130a0:	9301      	str	r3, [sp, #4]
 80130a2:	429e      	cmp	r6, r3
 80130a4:	d83c      	bhi.n	8013120 <__ssputs_r+0x8c>
 80130a6:	2390      	movs	r3, #144	; 0x90
 80130a8:	898a      	ldrh	r2, [r1, #12]
 80130aa:	00db      	lsls	r3, r3, #3
 80130ac:	421a      	tst	r2, r3
 80130ae:	d034      	beq.n	801311a <__ssputs_r+0x86>
 80130b0:	6909      	ldr	r1, [r1, #16]
 80130b2:	6823      	ldr	r3, [r4, #0]
 80130b4:	6960      	ldr	r0, [r4, #20]
 80130b6:	1a5b      	subs	r3, r3, r1
 80130b8:	9302      	str	r3, [sp, #8]
 80130ba:	2303      	movs	r3, #3
 80130bc:	4343      	muls	r3, r0
 80130be:	0fdd      	lsrs	r5, r3, #31
 80130c0:	18ed      	adds	r5, r5, r3
 80130c2:	9b01      	ldr	r3, [sp, #4]
 80130c4:	9802      	ldr	r0, [sp, #8]
 80130c6:	3301      	adds	r3, #1
 80130c8:	181b      	adds	r3, r3, r0
 80130ca:	106d      	asrs	r5, r5, #1
 80130cc:	42ab      	cmp	r3, r5
 80130ce:	d900      	bls.n	80130d2 <__ssputs_r+0x3e>
 80130d0:	001d      	movs	r5, r3
 80130d2:	0553      	lsls	r3, r2, #21
 80130d4:	d532      	bpl.n	801313c <__ssputs_r+0xa8>
 80130d6:	0029      	movs	r1, r5
 80130d8:	0038      	movs	r0, r7
 80130da:	f7ff ff65 	bl	8012fa8 <_malloc_r>
 80130de:	1e06      	subs	r6, r0, #0
 80130e0:	d109      	bne.n	80130f6 <__ssputs_r+0x62>
 80130e2:	230c      	movs	r3, #12
 80130e4:	603b      	str	r3, [r7, #0]
 80130e6:	2340      	movs	r3, #64	; 0x40
 80130e8:	2001      	movs	r0, #1
 80130ea:	89a2      	ldrh	r2, [r4, #12]
 80130ec:	4240      	negs	r0, r0
 80130ee:	4313      	orrs	r3, r2
 80130f0:	81a3      	strh	r3, [r4, #12]
 80130f2:	b005      	add	sp, #20
 80130f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80130f6:	9a02      	ldr	r2, [sp, #8]
 80130f8:	6921      	ldr	r1, [r4, #16]
 80130fa:	f7ff fb18 	bl	801272e <memcpy>
 80130fe:	89a3      	ldrh	r3, [r4, #12]
 8013100:	4a14      	ldr	r2, [pc, #80]	; (8013154 <__ssputs_r+0xc0>)
 8013102:	401a      	ands	r2, r3
 8013104:	2380      	movs	r3, #128	; 0x80
 8013106:	4313      	orrs	r3, r2
 8013108:	81a3      	strh	r3, [r4, #12]
 801310a:	9b02      	ldr	r3, [sp, #8]
 801310c:	6126      	str	r6, [r4, #16]
 801310e:	18f6      	adds	r6, r6, r3
 8013110:	6026      	str	r6, [r4, #0]
 8013112:	6165      	str	r5, [r4, #20]
 8013114:	9e01      	ldr	r6, [sp, #4]
 8013116:	1aed      	subs	r5, r5, r3
 8013118:	60a5      	str	r5, [r4, #8]
 801311a:	9b01      	ldr	r3, [sp, #4]
 801311c:	429e      	cmp	r6, r3
 801311e:	d900      	bls.n	8013122 <__ssputs_r+0x8e>
 8013120:	9e01      	ldr	r6, [sp, #4]
 8013122:	0032      	movs	r2, r6
 8013124:	9903      	ldr	r1, [sp, #12]
 8013126:	6820      	ldr	r0, [r4, #0]
 8013128:	f000 f968 	bl	80133fc <memmove>
 801312c:	68a3      	ldr	r3, [r4, #8]
 801312e:	2000      	movs	r0, #0
 8013130:	1b9b      	subs	r3, r3, r6
 8013132:	60a3      	str	r3, [r4, #8]
 8013134:	6823      	ldr	r3, [r4, #0]
 8013136:	199e      	adds	r6, r3, r6
 8013138:	6026      	str	r6, [r4, #0]
 801313a:	e7da      	b.n	80130f2 <__ssputs_r+0x5e>
 801313c:	002a      	movs	r2, r5
 801313e:	0038      	movs	r0, r7
 8013140:	f000 f980 	bl	8013444 <_realloc_r>
 8013144:	1e06      	subs	r6, r0, #0
 8013146:	d1e0      	bne.n	801310a <__ssputs_r+0x76>
 8013148:	0038      	movs	r0, r7
 801314a:	6921      	ldr	r1, [r4, #16]
 801314c:	f7ff fec0 	bl	8012ed0 <_free_r>
 8013150:	e7c7      	b.n	80130e2 <__ssputs_r+0x4e>
 8013152:	46c0      	nop			; (mov r8, r8)
 8013154:	fffffb7f 	.word	0xfffffb7f

08013158 <_svfiprintf_r>:
 8013158:	b5f0      	push	{r4, r5, r6, r7, lr}
 801315a:	b0a1      	sub	sp, #132	; 0x84
 801315c:	9003      	str	r0, [sp, #12]
 801315e:	001d      	movs	r5, r3
 8013160:	898b      	ldrh	r3, [r1, #12]
 8013162:	000f      	movs	r7, r1
 8013164:	0016      	movs	r6, r2
 8013166:	061b      	lsls	r3, r3, #24
 8013168:	d511      	bpl.n	801318e <_svfiprintf_r+0x36>
 801316a:	690b      	ldr	r3, [r1, #16]
 801316c:	2b00      	cmp	r3, #0
 801316e:	d10e      	bne.n	801318e <_svfiprintf_r+0x36>
 8013170:	2140      	movs	r1, #64	; 0x40
 8013172:	f7ff ff19 	bl	8012fa8 <_malloc_r>
 8013176:	6038      	str	r0, [r7, #0]
 8013178:	6138      	str	r0, [r7, #16]
 801317a:	2800      	cmp	r0, #0
 801317c:	d105      	bne.n	801318a <_svfiprintf_r+0x32>
 801317e:	230c      	movs	r3, #12
 8013180:	9a03      	ldr	r2, [sp, #12]
 8013182:	3801      	subs	r0, #1
 8013184:	6013      	str	r3, [r2, #0]
 8013186:	b021      	add	sp, #132	; 0x84
 8013188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801318a:	2340      	movs	r3, #64	; 0x40
 801318c:	617b      	str	r3, [r7, #20]
 801318e:	2300      	movs	r3, #0
 8013190:	ac08      	add	r4, sp, #32
 8013192:	6163      	str	r3, [r4, #20]
 8013194:	3320      	adds	r3, #32
 8013196:	7663      	strb	r3, [r4, #25]
 8013198:	3310      	adds	r3, #16
 801319a:	76a3      	strb	r3, [r4, #26]
 801319c:	9507      	str	r5, [sp, #28]
 801319e:	0035      	movs	r5, r6
 80131a0:	782b      	ldrb	r3, [r5, #0]
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	d001      	beq.n	80131aa <_svfiprintf_r+0x52>
 80131a6:	2b25      	cmp	r3, #37	; 0x25
 80131a8:	d147      	bne.n	801323a <_svfiprintf_r+0xe2>
 80131aa:	1bab      	subs	r3, r5, r6
 80131ac:	9305      	str	r3, [sp, #20]
 80131ae:	42b5      	cmp	r5, r6
 80131b0:	d00c      	beq.n	80131cc <_svfiprintf_r+0x74>
 80131b2:	0032      	movs	r2, r6
 80131b4:	0039      	movs	r1, r7
 80131b6:	9803      	ldr	r0, [sp, #12]
 80131b8:	f7ff ff6c 	bl	8013094 <__ssputs_r>
 80131bc:	1c43      	adds	r3, r0, #1
 80131be:	d100      	bne.n	80131c2 <_svfiprintf_r+0x6a>
 80131c0:	e0ae      	b.n	8013320 <_svfiprintf_r+0x1c8>
 80131c2:	6962      	ldr	r2, [r4, #20]
 80131c4:	9b05      	ldr	r3, [sp, #20]
 80131c6:	4694      	mov	ip, r2
 80131c8:	4463      	add	r3, ip
 80131ca:	6163      	str	r3, [r4, #20]
 80131cc:	782b      	ldrb	r3, [r5, #0]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d100      	bne.n	80131d4 <_svfiprintf_r+0x7c>
 80131d2:	e0a5      	b.n	8013320 <_svfiprintf_r+0x1c8>
 80131d4:	2201      	movs	r2, #1
 80131d6:	2300      	movs	r3, #0
 80131d8:	4252      	negs	r2, r2
 80131da:	6062      	str	r2, [r4, #4]
 80131dc:	a904      	add	r1, sp, #16
 80131de:	3254      	adds	r2, #84	; 0x54
 80131e0:	1852      	adds	r2, r2, r1
 80131e2:	1c6e      	adds	r6, r5, #1
 80131e4:	6023      	str	r3, [r4, #0]
 80131e6:	60e3      	str	r3, [r4, #12]
 80131e8:	60a3      	str	r3, [r4, #8]
 80131ea:	7013      	strb	r3, [r2, #0]
 80131ec:	65a3      	str	r3, [r4, #88]	; 0x58
 80131ee:	2205      	movs	r2, #5
 80131f0:	7831      	ldrb	r1, [r6, #0]
 80131f2:	4854      	ldr	r0, [pc, #336]	; (8013344 <_svfiprintf_r+0x1ec>)
 80131f4:	f7ff fa90 	bl	8012718 <memchr>
 80131f8:	1c75      	adds	r5, r6, #1
 80131fa:	2800      	cmp	r0, #0
 80131fc:	d11f      	bne.n	801323e <_svfiprintf_r+0xe6>
 80131fe:	6822      	ldr	r2, [r4, #0]
 8013200:	06d3      	lsls	r3, r2, #27
 8013202:	d504      	bpl.n	801320e <_svfiprintf_r+0xb6>
 8013204:	2353      	movs	r3, #83	; 0x53
 8013206:	a904      	add	r1, sp, #16
 8013208:	185b      	adds	r3, r3, r1
 801320a:	2120      	movs	r1, #32
 801320c:	7019      	strb	r1, [r3, #0]
 801320e:	0713      	lsls	r3, r2, #28
 8013210:	d504      	bpl.n	801321c <_svfiprintf_r+0xc4>
 8013212:	2353      	movs	r3, #83	; 0x53
 8013214:	a904      	add	r1, sp, #16
 8013216:	185b      	adds	r3, r3, r1
 8013218:	212b      	movs	r1, #43	; 0x2b
 801321a:	7019      	strb	r1, [r3, #0]
 801321c:	7833      	ldrb	r3, [r6, #0]
 801321e:	2b2a      	cmp	r3, #42	; 0x2a
 8013220:	d016      	beq.n	8013250 <_svfiprintf_r+0xf8>
 8013222:	0035      	movs	r5, r6
 8013224:	2100      	movs	r1, #0
 8013226:	200a      	movs	r0, #10
 8013228:	68e3      	ldr	r3, [r4, #12]
 801322a:	782a      	ldrb	r2, [r5, #0]
 801322c:	1c6e      	adds	r6, r5, #1
 801322e:	3a30      	subs	r2, #48	; 0x30
 8013230:	2a09      	cmp	r2, #9
 8013232:	d94e      	bls.n	80132d2 <_svfiprintf_r+0x17a>
 8013234:	2900      	cmp	r1, #0
 8013236:	d111      	bne.n	801325c <_svfiprintf_r+0x104>
 8013238:	e017      	b.n	801326a <_svfiprintf_r+0x112>
 801323a:	3501      	adds	r5, #1
 801323c:	e7b0      	b.n	80131a0 <_svfiprintf_r+0x48>
 801323e:	4b41      	ldr	r3, [pc, #260]	; (8013344 <_svfiprintf_r+0x1ec>)
 8013240:	6822      	ldr	r2, [r4, #0]
 8013242:	1ac0      	subs	r0, r0, r3
 8013244:	2301      	movs	r3, #1
 8013246:	4083      	lsls	r3, r0
 8013248:	4313      	orrs	r3, r2
 801324a:	002e      	movs	r6, r5
 801324c:	6023      	str	r3, [r4, #0]
 801324e:	e7ce      	b.n	80131ee <_svfiprintf_r+0x96>
 8013250:	9b07      	ldr	r3, [sp, #28]
 8013252:	1d19      	adds	r1, r3, #4
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	9107      	str	r1, [sp, #28]
 8013258:	2b00      	cmp	r3, #0
 801325a:	db01      	blt.n	8013260 <_svfiprintf_r+0x108>
 801325c:	930b      	str	r3, [sp, #44]	; 0x2c
 801325e:	e004      	b.n	801326a <_svfiprintf_r+0x112>
 8013260:	425b      	negs	r3, r3
 8013262:	60e3      	str	r3, [r4, #12]
 8013264:	2302      	movs	r3, #2
 8013266:	4313      	orrs	r3, r2
 8013268:	6023      	str	r3, [r4, #0]
 801326a:	782b      	ldrb	r3, [r5, #0]
 801326c:	2b2e      	cmp	r3, #46	; 0x2e
 801326e:	d10a      	bne.n	8013286 <_svfiprintf_r+0x12e>
 8013270:	786b      	ldrb	r3, [r5, #1]
 8013272:	2b2a      	cmp	r3, #42	; 0x2a
 8013274:	d135      	bne.n	80132e2 <_svfiprintf_r+0x18a>
 8013276:	9b07      	ldr	r3, [sp, #28]
 8013278:	3502      	adds	r5, #2
 801327a:	1d1a      	adds	r2, r3, #4
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	9207      	str	r2, [sp, #28]
 8013280:	2b00      	cmp	r3, #0
 8013282:	db2b      	blt.n	80132dc <_svfiprintf_r+0x184>
 8013284:	9309      	str	r3, [sp, #36]	; 0x24
 8013286:	4e30      	ldr	r6, [pc, #192]	; (8013348 <_svfiprintf_r+0x1f0>)
 8013288:	2203      	movs	r2, #3
 801328a:	0030      	movs	r0, r6
 801328c:	7829      	ldrb	r1, [r5, #0]
 801328e:	f7ff fa43 	bl	8012718 <memchr>
 8013292:	2800      	cmp	r0, #0
 8013294:	d006      	beq.n	80132a4 <_svfiprintf_r+0x14c>
 8013296:	2340      	movs	r3, #64	; 0x40
 8013298:	1b80      	subs	r0, r0, r6
 801329a:	4083      	lsls	r3, r0
 801329c:	6822      	ldr	r2, [r4, #0]
 801329e:	3501      	adds	r5, #1
 80132a0:	4313      	orrs	r3, r2
 80132a2:	6023      	str	r3, [r4, #0]
 80132a4:	7829      	ldrb	r1, [r5, #0]
 80132a6:	2206      	movs	r2, #6
 80132a8:	4828      	ldr	r0, [pc, #160]	; (801334c <_svfiprintf_r+0x1f4>)
 80132aa:	1c6e      	adds	r6, r5, #1
 80132ac:	7621      	strb	r1, [r4, #24]
 80132ae:	f7ff fa33 	bl	8012718 <memchr>
 80132b2:	2800      	cmp	r0, #0
 80132b4:	d03c      	beq.n	8013330 <_svfiprintf_r+0x1d8>
 80132b6:	4b26      	ldr	r3, [pc, #152]	; (8013350 <_svfiprintf_r+0x1f8>)
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d125      	bne.n	8013308 <_svfiprintf_r+0x1b0>
 80132bc:	2207      	movs	r2, #7
 80132be:	9b07      	ldr	r3, [sp, #28]
 80132c0:	3307      	adds	r3, #7
 80132c2:	4393      	bics	r3, r2
 80132c4:	3308      	adds	r3, #8
 80132c6:	9307      	str	r3, [sp, #28]
 80132c8:	6963      	ldr	r3, [r4, #20]
 80132ca:	9a04      	ldr	r2, [sp, #16]
 80132cc:	189b      	adds	r3, r3, r2
 80132ce:	6163      	str	r3, [r4, #20]
 80132d0:	e765      	b.n	801319e <_svfiprintf_r+0x46>
 80132d2:	4343      	muls	r3, r0
 80132d4:	0035      	movs	r5, r6
 80132d6:	2101      	movs	r1, #1
 80132d8:	189b      	adds	r3, r3, r2
 80132da:	e7a6      	b.n	801322a <_svfiprintf_r+0xd2>
 80132dc:	2301      	movs	r3, #1
 80132de:	425b      	negs	r3, r3
 80132e0:	e7d0      	b.n	8013284 <_svfiprintf_r+0x12c>
 80132e2:	2300      	movs	r3, #0
 80132e4:	200a      	movs	r0, #10
 80132e6:	001a      	movs	r2, r3
 80132e8:	3501      	adds	r5, #1
 80132ea:	6063      	str	r3, [r4, #4]
 80132ec:	7829      	ldrb	r1, [r5, #0]
 80132ee:	1c6e      	adds	r6, r5, #1
 80132f0:	3930      	subs	r1, #48	; 0x30
 80132f2:	2909      	cmp	r1, #9
 80132f4:	d903      	bls.n	80132fe <_svfiprintf_r+0x1a6>
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d0c5      	beq.n	8013286 <_svfiprintf_r+0x12e>
 80132fa:	9209      	str	r2, [sp, #36]	; 0x24
 80132fc:	e7c3      	b.n	8013286 <_svfiprintf_r+0x12e>
 80132fe:	4342      	muls	r2, r0
 8013300:	0035      	movs	r5, r6
 8013302:	2301      	movs	r3, #1
 8013304:	1852      	adds	r2, r2, r1
 8013306:	e7f1      	b.n	80132ec <_svfiprintf_r+0x194>
 8013308:	ab07      	add	r3, sp, #28
 801330a:	9300      	str	r3, [sp, #0]
 801330c:	003a      	movs	r2, r7
 801330e:	0021      	movs	r1, r4
 8013310:	4b10      	ldr	r3, [pc, #64]	; (8013354 <_svfiprintf_r+0x1fc>)
 8013312:	9803      	ldr	r0, [sp, #12]
 8013314:	f7fd ff5c 	bl	80111d0 <_printf_float>
 8013318:	9004      	str	r0, [sp, #16]
 801331a:	9b04      	ldr	r3, [sp, #16]
 801331c:	3301      	adds	r3, #1
 801331e:	d1d3      	bne.n	80132c8 <_svfiprintf_r+0x170>
 8013320:	89bb      	ldrh	r3, [r7, #12]
 8013322:	980d      	ldr	r0, [sp, #52]	; 0x34
 8013324:	065b      	lsls	r3, r3, #25
 8013326:	d400      	bmi.n	801332a <_svfiprintf_r+0x1d2>
 8013328:	e72d      	b.n	8013186 <_svfiprintf_r+0x2e>
 801332a:	2001      	movs	r0, #1
 801332c:	4240      	negs	r0, r0
 801332e:	e72a      	b.n	8013186 <_svfiprintf_r+0x2e>
 8013330:	ab07      	add	r3, sp, #28
 8013332:	9300      	str	r3, [sp, #0]
 8013334:	003a      	movs	r2, r7
 8013336:	0021      	movs	r1, r4
 8013338:	4b06      	ldr	r3, [pc, #24]	; (8013354 <_svfiprintf_r+0x1fc>)
 801333a:	9803      	ldr	r0, [sp, #12]
 801333c:	f7fe f9fa 	bl	8011734 <_printf_i>
 8013340:	e7ea      	b.n	8013318 <_svfiprintf_r+0x1c0>
 8013342:	46c0      	nop			; (mov r8, r8)
 8013344:	0801549c 	.word	0x0801549c
 8013348:	080154a2 	.word	0x080154a2
 801334c:	080154a6 	.word	0x080154a6
 8013350:	080111d1 	.word	0x080111d1
 8013354:	08013095 	.word	0x08013095

08013358 <_sbrk_r>:
 8013358:	2300      	movs	r3, #0
 801335a:	b570      	push	{r4, r5, r6, lr}
 801335c:	4d06      	ldr	r5, [pc, #24]	; (8013378 <_sbrk_r+0x20>)
 801335e:	0004      	movs	r4, r0
 8013360:	0008      	movs	r0, r1
 8013362:	602b      	str	r3, [r5, #0]
 8013364:	f7f0 ffa2 	bl	80042ac <_sbrk>
 8013368:	1c43      	adds	r3, r0, #1
 801336a:	d103      	bne.n	8013374 <_sbrk_r+0x1c>
 801336c:	682b      	ldr	r3, [r5, #0]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d000      	beq.n	8013374 <_sbrk_r+0x1c>
 8013372:	6023      	str	r3, [r4, #0]
 8013374:	bd70      	pop	{r4, r5, r6, pc}
 8013376:	46c0      	nop			; (mov r8, r8)
 8013378:	20000664 	.word	0x20000664

0801337c <__assert_func>:
 801337c:	b530      	push	{r4, r5, lr}
 801337e:	0014      	movs	r4, r2
 8013380:	001a      	movs	r2, r3
 8013382:	4b09      	ldr	r3, [pc, #36]	; (80133a8 <__assert_func+0x2c>)
 8013384:	0005      	movs	r5, r0
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	b085      	sub	sp, #20
 801338a:	68d8      	ldr	r0, [r3, #12]
 801338c:	4b07      	ldr	r3, [pc, #28]	; (80133ac <__assert_func+0x30>)
 801338e:	2c00      	cmp	r4, #0
 8013390:	d101      	bne.n	8013396 <__assert_func+0x1a>
 8013392:	4b07      	ldr	r3, [pc, #28]	; (80133b0 <__assert_func+0x34>)
 8013394:	001c      	movs	r4, r3
 8013396:	9301      	str	r3, [sp, #4]
 8013398:	9100      	str	r1, [sp, #0]
 801339a:	002b      	movs	r3, r5
 801339c:	4905      	ldr	r1, [pc, #20]	; (80133b4 <__assert_func+0x38>)
 801339e:	9402      	str	r4, [sp, #8]
 80133a0:	f000 f80a 	bl	80133b8 <fiprintf>
 80133a4:	f000 faba 	bl	801391c <abort>
 80133a8:	2000003c 	.word	0x2000003c
 80133ac:	080154ad 	.word	0x080154ad
 80133b0:	080154e8 	.word	0x080154e8
 80133b4:	080154ba 	.word	0x080154ba

080133b8 <fiprintf>:
 80133b8:	b40e      	push	{r1, r2, r3}
 80133ba:	b503      	push	{r0, r1, lr}
 80133bc:	0001      	movs	r1, r0
 80133be:	ab03      	add	r3, sp, #12
 80133c0:	4804      	ldr	r0, [pc, #16]	; (80133d4 <fiprintf+0x1c>)
 80133c2:	cb04      	ldmia	r3!, {r2}
 80133c4:	6800      	ldr	r0, [r0, #0]
 80133c6:	9301      	str	r3, [sp, #4]
 80133c8:	f000 f892 	bl	80134f0 <_vfiprintf_r>
 80133cc:	b002      	add	sp, #8
 80133ce:	bc08      	pop	{r3}
 80133d0:	b003      	add	sp, #12
 80133d2:	4718      	bx	r3
 80133d4:	2000003c 	.word	0x2000003c

080133d8 <__ascii_mbtowc>:
 80133d8:	b082      	sub	sp, #8
 80133da:	2900      	cmp	r1, #0
 80133dc:	d100      	bne.n	80133e0 <__ascii_mbtowc+0x8>
 80133de:	a901      	add	r1, sp, #4
 80133e0:	1e10      	subs	r0, r2, #0
 80133e2:	d006      	beq.n	80133f2 <__ascii_mbtowc+0x1a>
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d006      	beq.n	80133f6 <__ascii_mbtowc+0x1e>
 80133e8:	7813      	ldrb	r3, [r2, #0]
 80133ea:	600b      	str	r3, [r1, #0]
 80133ec:	7810      	ldrb	r0, [r2, #0]
 80133ee:	1e43      	subs	r3, r0, #1
 80133f0:	4198      	sbcs	r0, r3
 80133f2:	b002      	add	sp, #8
 80133f4:	4770      	bx	lr
 80133f6:	2002      	movs	r0, #2
 80133f8:	4240      	negs	r0, r0
 80133fa:	e7fa      	b.n	80133f2 <__ascii_mbtowc+0x1a>

080133fc <memmove>:
 80133fc:	b510      	push	{r4, lr}
 80133fe:	4288      	cmp	r0, r1
 8013400:	d902      	bls.n	8013408 <memmove+0xc>
 8013402:	188b      	adds	r3, r1, r2
 8013404:	4298      	cmp	r0, r3
 8013406:	d303      	bcc.n	8013410 <memmove+0x14>
 8013408:	2300      	movs	r3, #0
 801340a:	e007      	b.n	801341c <memmove+0x20>
 801340c:	5c8b      	ldrb	r3, [r1, r2]
 801340e:	5483      	strb	r3, [r0, r2]
 8013410:	3a01      	subs	r2, #1
 8013412:	d2fb      	bcs.n	801340c <memmove+0x10>
 8013414:	bd10      	pop	{r4, pc}
 8013416:	5ccc      	ldrb	r4, [r1, r3]
 8013418:	54c4      	strb	r4, [r0, r3]
 801341a:	3301      	adds	r3, #1
 801341c:	429a      	cmp	r2, r3
 801341e:	d1fa      	bne.n	8013416 <memmove+0x1a>
 8013420:	e7f8      	b.n	8013414 <memmove+0x18>
	...

08013424 <__malloc_lock>:
 8013424:	b510      	push	{r4, lr}
 8013426:	4802      	ldr	r0, [pc, #8]	; (8013430 <__malloc_lock+0xc>)
 8013428:	f000 fc4f 	bl	8013cca <__retarget_lock_acquire_recursive>
 801342c:	bd10      	pop	{r4, pc}
 801342e:	46c0      	nop			; (mov r8, r8)
 8013430:	20000668 	.word	0x20000668

08013434 <__malloc_unlock>:
 8013434:	b510      	push	{r4, lr}
 8013436:	4802      	ldr	r0, [pc, #8]	; (8013440 <__malloc_unlock+0xc>)
 8013438:	f000 fc48 	bl	8013ccc <__retarget_lock_release_recursive>
 801343c:	bd10      	pop	{r4, pc}
 801343e:	46c0      	nop			; (mov r8, r8)
 8013440:	20000668 	.word	0x20000668

08013444 <_realloc_r>:
 8013444:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013446:	0007      	movs	r7, r0
 8013448:	000e      	movs	r6, r1
 801344a:	0014      	movs	r4, r2
 801344c:	2900      	cmp	r1, #0
 801344e:	d105      	bne.n	801345c <_realloc_r+0x18>
 8013450:	0011      	movs	r1, r2
 8013452:	f7ff fda9 	bl	8012fa8 <_malloc_r>
 8013456:	0005      	movs	r5, r0
 8013458:	0028      	movs	r0, r5
 801345a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801345c:	2a00      	cmp	r2, #0
 801345e:	d103      	bne.n	8013468 <_realloc_r+0x24>
 8013460:	f7ff fd36 	bl	8012ed0 <_free_r>
 8013464:	0025      	movs	r5, r4
 8013466:	e7f7      	b.n	8013458 <_realloc_r+0x14>
 8013468:	f000 fc9e 	bl	8013da8 <_malloc_usable_size_r>
 801346c:	9001      	str	r0, [sp, #4]
 801346e:	4284      	cmp	r4, r0
 8013470:	d803      	bhi.n	801347a <_realloc_r+0x36>
 8013472:	0035      	movs	r5, r6
 8013474:	0843      	lsrs	r3, r0, #1
 8013476:	42a3      	cmp	r3, r4
 8013478:	d3ee      	bcc.n	8013458 <_realloc_r+0x14>
 801347a:	0021      	movs	r1, r4
 801347c:	0038      	movs	r0, r7
 801347e:	f7ff fd93 	bl	8012fa8 <_malloc_r>
 8013482:	1e05      	subs	r5, r0, #0
 8013484:	d0e8      	beq.n	8013458 <_realloc_r+0x14>
 8013486:	9b01      	ldr	r3, [sp, #4]
 8013488:	0022      	movs	r2, r4
 801348a:	429c      	cmp	r4, r3
 801348c:	d900      	bls.n	8013490 <_realloc_r+0x4c>
 801348e:	001a      	movs	r2, r3
 8013490:	0031      	movs	r1, r6
 8013492:	0028      	movs	r0, r5
 8013494:	f7ff f94b 	bl	801272e <memcpy>
 8013498:	0031      	movs	r1, r6
 801349a:	0038      	movs	r0, r7
 801349c:	f7ff fd18 	bl	8012ed0 <_free_r>
 80134a0:	e7da      	b.n	8013458 <_realloc_r+0x14>

080134a2 <__sfputc_r>:
 80134a2:	6893      	ldr	r3, [r2, #8]
 80134a4:	b510      	push	{r4, lr}
 80134a6:	3b01      	subs	r3, #1
 80134a8:	6093      	str	r3, [r2, #8]
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	da04      	bge.n	80134b8 <__sfputc_r+0x16>
 80134ae:	6994      	ldr	r4, [r2, #24]
 80134b0:	42a3      	cmp	r3, r4
 80134b2:	db07      	blt.n	80134c4 <__sfputc_r+0x22>
 80134b4:	290a      	cmp	r1, #10
 80134b6:	d005      	beq.n	80134c4 <__sfputc_r+0x22>
 80134b8:	6813      	ldr	r3, [r2, #0]
 80134ba:	1c58      	adds	r0, r3, #1
 80134bc:	6010      	str	r0, [r2, #0]
 80134be:	7019      	strb	r1, [r3, #0]
 80134c0:	0008      	movs	r0, r1
 80134c2:	bd10      	pop	{r4, pc}
 80134c4:	f000 f94e 	bl	8013764 <__swbuf_r>
 80134c8:	0001      	movs	r1, r0
 80134ca:	e7f9      	b.n	80134c0 <__sfputc_r+0x1e>

080134cc <__sfputs_r>:
 80134cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134ce:	0006      	movs	r6, r0
 80134d0:	000f      	movs	r7, r1
 80134d2:	0014      	movs	r4, r2
 80134d4:	18d5      	adds	r5, r2, r3
 80134d6:	42ac      	cmp	r4, r5
 80134d8:	d101      	bne.n	80134de <__sfputs_r+0x12>
 80134da:	2000      	movs	r0, #0
 80134dc:	e007      	b.n	80134ee <__sfputs_r+0x22>
 80134de:	7821      	ldrb	r1, [r4, #0]
 80134e0:	003a      	movs	r2, r7
 80134e2:	0030      	movs	r0, r6
 80134e4:	f7ff ffdd 	bl	80134a2 <__sfputc_r>
 80134e8:	3401      	adds	r4, #1
 80134ea:	1c43      	adds	r3, r0, #1
 80134ec:	d1f3      	bne.n	80134d6 <__sfputs_r+0xa>
 80134ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080134f0 <_vfiprintf_r>:
 80134f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80134f2:	b0a1      	sub	sp, #132	; 0x84
 80134f4:	0006      	movs	r6, r0
 80134f6:	000c      	movs	r4, r1
 80134f8:	001f      	movs	r7, r3
 80134fa:	9203      	str	r2, [sp, #12]
 80134fc:	2800      	cmp	r0, #0
 80134fe:	d004      	beq.n	801350a <_vfiprintf_r+0x1a>
 8013500:	6983      	ldr	r3, [r0, #24]
 8013502:	2b00      	cmp	r3, #0
 8013504:	d101      	bne.n	801350a <_vfiprintf_r+0x1a>
 8013506:	f000 fb3f 	bl	8013b88 <__sinit>
 801350a:	4b8e      	ldr	r3, [pc, #568]	; (8013744 <_vfiprintf_r+0x254>)
 801350c:	429c      	cmp	r4, r3
 801350e:	d11c      	bne.n	801354a <_vfiprintf_r+0x5a>
 8013510:	6874      	ldr	r4, [r6, #4]
 8013512:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013514:	07db      	lsls	r3, r3, #31
 8013516:	d405      	bmi.n	8013524 <_vfiprintf_r+0x34>
 8013518:	89a3      	ldrh	r3, [r4, #12]
 801351a:	059b      	lsls	r3, r3, #22
 801351c:	d402      	bmi.n	8013524 <_vfiprintf_r+0x34>
 801351e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013520:	f000 fbd3 	bl	8013cca <__retarget_lock_acquire_recursive>
 8013524:	89a3      	ldrh	r3, [r4, #12]
 8013526:	071b      	lsls	r3, r3, #28
 8013528:	d502      	bpl.n	8013530 <_vfiprintf_r+0x40>
 801352a:	6923      	ldr	r3, [r4, #16]
 801352c:	2b00      	cmp	r3, #0
 801352e:	d11d      	bne.n	801356c <_vfiprintf_r+0x7c>
 8013530:	0021      	movs	r1, r4
 8013532:	0030      	movs	r0, r6
 8013534:	f000 f97a 	bl	801382c <__swsetup_r>
 8013538:	2800      	cmp	r0, #0
 801353a:	d017      	beq.n	801356c <_vfiprintf_r+0x7c>
 801353c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801353e:	07db      	lsls	r3, r3, #31
 8013540:	d50d      	bpl.n	801355e <_vfiprintf_r+0x6e>
 8013542:	2001      	movs	r0, #1
 8013544:	4240      	negs	r0, r0
 8013546:	b021      	add	sp, #132	; 0x84
 8013548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801354a:	4b7f      	ldr	r3, [pc, #508]	; (8013748 <_vfiprintf_r+0x258>)
 801354c:	429c      	cmp	r4, r3
 801354e:	d101      	bne.n	8013554 <_vfiprintf_r+0x64>
 8013550:	68b4      	ldr	r4, [r6, #8]
 8013552:	e7de      	b.n	8013512 <_vfiprintf_r+0x22>
 8013554:	4b7d      	ldr	r3, [pc, #500]	; (801374c <_vfiprintf_r+0x25c>)
 8013556:	429c      	cmp	r4, r3
 8013558:	d1db      	bne.n	8013512 <_vfiprintf_r+0x22>
 801355a:	68f4      	ldr	r4, [r6, #12]
 801355c:	e7d9      	b.n	8013512 <_vfiprintf_r+0x22>
 801355e:	89a3      	ldrh	r3, [r4, #12]
 8013560:	059b      	lsls	r3, r3, #22
 8013562:	d4ee      	bmi.n	8013542 <_vfiprintf_r+0x52>
 8013564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013566:	f000 fbb1 	bl	8013ccc <__retarget_lock_release_recursive>
 801356a:	e7ea      	b.n	8013542 <_vfiprintf_r+0x52>
 801356c:	2300      	movs	r3, #0
 801356e:	ad08      	add	r5, sp, #32
 8013570:	616b      	str	r3, [r5, #20]
 8013572:	3320      	adds	r3, #32
 8013574:	766b      	strb	r3, [r5, #25]
 8013576:	3310      	adds	r3, #16
 8013578:	76ab      	strb	r3, [r5, #26]
 801357a:	9707      	str	r7, [sp, #28]
 801357c:	9f03      	ldr	r7, [sp, #12]
 801357e:	783b      	ldrb	r3, [r7, #0]
 8013580:	2b00      	cmp	r3, #0
 8013582:	d001      	beq.n	8013588 <_vfiprintf_r+0x98>
 8013584:	2b25      	cmp	r3, #37	; 0x25
 8013586:	d14e      	bne.n	8013626 <_vfiprintf_r+0x136>
 8013588:	9b03      	ldr	r3, [sp, #12]
 801358a:	1afb      	subs	r3, r7, r3
 801358c:	9305      	str	r3, [sp, #20]
 801358e:	9b03      	ldr	r3, [sp, #12]
 8013590:	429f      	cmp	r7, r3
 8013592:	d00d      	beq.n	80135b0 <_vfiprintf_r+0xc0>
 8013594:	9b05      	ldr	r3, [sp, #20]
 8013596:	0021      	movs	r1, r4
 8013598:	0030      	movs	r0, r6
 801359a:	9a03      	ldr	r2, [sp, #12]
 801359c:	f7ff ff96 	bl	80134cc <__sfputs_r>
 80135a0:	1c43      	adds	r3, r0, #1
 80135a2:	d100      	bne.n	80135a6 <_vfiprintf_r+0xb6>
 80135a4:	e0b5      	b.n	8013712 <_vfiprintf_r+0x222>
 80135a6:	696a      	ldr	r2, [r5, #20]
 80135a8:	9b05      	ldr	r3, [sp, #20]
 80135aa:	4694      	mov	ip, r2
 80135ac:	4463      	add	r3, ip
 80135ae:	616b      	str	r3, [r5, #20]
 80135b0:	783b      	ldrb	r3, [r7, #0]
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d100      	bne.n	80135b8 <_vfiprintf_r+0xc8>
 80135b6:	e0ac      	b.n	8013712 <_vfiprintf_r+0x222>
 80135b8:	2201      	movs	r2, #1
 80135ba:	1c7b      	adds	r3, r7, #1
 80135bc:	9303      	str	r3, [sp, #12]
 80135be:	2300      	movs	r3, #0
 80135c0:	4252      	negs	r2, r2
 80135c2:	606a      	str	r2, [r5, #4]
 80135c4:	a904      	add	r1, sp, #16
 80135c6:	3254      	adds	r2, #84	; 0x54
 80135c8:	1852      	adds	r2, r2, r1
 80135ca:	602b      	str	r3, [r5, #0]
 80135cc:	60eb      	str	r3, [r5, #12]
 80135ce:	60ab      	str	r3, [r5, #8]
 80135d0:	7013      	strb	r3, [r2, #0]
 80135d2:	65ab      	str	r3, [r5, #88]	; 0x58
 80135d4:	9b03      	ldr	r3, [sp, #12]
 80135d6:	2205      	movs	r2, #5
 80135d8:	7819      	ldrb	r1, [r3, #0]
 80135da:	485d      	ldr	r0, [pc, #372]	; (8013750 <_vfiprintf_r+0x260>)
 80135dc:	f7ff f89c 	bl	8012718 <memchr>
 80135e0:	9b03      	ldr	r3, [sp, #12]
 80135e2:	1c5f      	adds	r7, r3, #1
 80135e4:	2800      	cmp	r0, #0
 80135e6:	d120      	bne.n	801362a <_vfiprintf_r+0x13a>
 80135e8:	682a      	ldr	r2, [r5, #0]
 80135ea:	06d3      	lsls	r3, r2, #27
 80135ec:	d504      	bpl.n	80135f8 <_vfiprintf_r+0x108>
 80135ee:	2353      	movs	r3, #83	; 0x53
 80135f0:	a904      	add	r1, sp, #16
 80135f2:	185b      	adds	r3, r3, r1
 80135f4:	2120      	movs	r1, #32
 80135f6:	7019      	strb	r1, [r3, #0]
 80135f8:	0713      	lsls	r3, r2, #28
 80135fa:	d504      	bpl.n	8013606 <_vfiprintf_r+0x116>
 80135fc:	2353      	movs	r3, #83	; 0x53
 80135fe:	a904      	add	r1, sp, #16
 8013600:	185b      	adds	r3, r3, r1
 8013602:	212b      	movs	r1, #43	; 0x2b
 8013604:	7019      	strb	r1, [r3, #0]
 8013606:	9b03      	ldr	r3, [sp, #12]
 8013608:	781b      	ldrb	r3, [r3, #0]
 801360a:	2b2a      	cmp	r3, #42	; 0x2a
 801360c:	d016      	beq.n	801363c <_vfiprintf_r+0x14c>
 801360e:	2100      	movs	r1, #0
 8013610:	68eb      	ldr	r3, [r5, #12]
 8013612:	9f03      	ldr	r7, [sp, #12]
 8013614:	783a      	ldrb	r2, [r7, #0]
 8013616:	1c78      	adds	r0, r7, #1
 8013618:	3a30      	subs	r2, #48	; 0x30
 801361a:	4684      	mov	ip, r0
 801361c:	2a09      	cmp	r2, #9
 801361e:	d94f      	bls.n	80136c0 <_vfiprintf_r+0x1d0>
 8013620:	2900      	cmp	r1, #0
 8013622:	d111      	bne.n	8013648 <_vfiprintf_r+0x158>
 8013624:	e017      	b.n	8013656 <_vfiprintf_r+0x166>
 8013626:	3701      	adds	r7, #1
 8013628:	e7a9      	b.n	801357e <_vfiprintf_r+0x8e>
 801362a:	4b49      	ldr	r3, [pc, #292]	; (8013750 <_vfiprintf_r+0x260>)
 801362c:	682a      	ldr	r2, [r5, #0]
 801362e:	1ac0      	subs	r0, r0, r3
 8013630:	2301      	movs	r3, #1
 8013632:	4083      	lsls	r3, r0
 8013634:	4313      	orrs	r3, r2
 8013636:	602b      	str	r3, [r5, #0]
 8013638:	9703      	str	r7, [sp, #12]
 801363a:	e7cb      	b.n	80135d4 <_vfiprintf_r+0xe4>
 801363c:	9b07      	ldr	r3, [sp, #28]
 801363e:	1d19      	adds	r1, r3, #4
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	9107      	str	r1, [sp, #28]
 8013644:	2b00      	cmp	r3, #0
 8013646:	db01      	blt.n	801364c <_vfiprintf_r+0x15c>
 8013648:	930b      	str	r3, [sp, #44]	; 0x2c
 801364a:	e004      	b.n	8013656 <_vfiprintf_r+0x166>
 801364c:	425b      	negs	r3, r3
 801364e:	60eb      	str	r3, [r5, #12]
 8013650:	2302      	movs	r3, #2
 8013652:	4313      	orrs	r3, r2
 8013654:	602b      	str	r3, [r5, #0]
 8013656:	783b      	ldrb	r3, [r7, #0]
 8013658:	2b2e      	cmp	r3, #46	; 0x2e
 801365a:	d10a      	bne.n	8013672 <_vfiprintf_r+0x182>
 801365c:	787b      	ldrb	r3, [r7, #1]
 801365e:	2b2a      	cmp	r3, #42	; 0x2a
 8013660:	d137      	bne.n	80136d2 <_vfiprintf_r+0x1e2>
 8013662:	9b07      	ldr	r3, [sp, #28]
 8013664:	3702      	adds	r7, #2
 8013666:	1d1a      	adds	r2, r3, #4
 8013668:	681b      	ldr	r3, [r3, #0]
 801366a:	9207      	str	r2, [sp, #28]
 801366c:	2b00      	cmp	r3, #0
 801366e:	db2d      	blt.n	80136cc <_vfiprintf_r+0x1dc>
 8013670:	9309      	str	r3, [sp, #36]	; 0x24
 8013672:	2203      	movs	r2, #3
 8013674:	7839      	ldrb	r1, [r7, #0]
 8013676:	4837      	ldr	r0, [pc, #220]	; (8013754 <_vfiprintf_r+0x264>)
 8013678:	f7ff f84e 	bl	8012718 <memchr>
 801367c:	2800      	cmp	r0, #0
 801367e:	d007      	beq.n	8013690 <_vfiprintf_r+0x1a0>
 8013680:	4b34      	ldr	r3, [pc, #208]	; (8013754 <_vfiprintf_r+0x264>)
 8013682:	682a      	ldr	r2, [r5, #0]
 8013684:	1ac0      	subs	r0, r0, r3
 8013686:	2340      	movs	r3, #64	; 0x40
 8013688:	4083      	lsls	r3, r0
 801368a:	4313      	orrs	r3, r2
 801368c:	3701      	adds	r7, #1
 801368e:	602b      	str	r3, [r5, #0]
 8013690:	7839      	ldrb	r1, [r7, #0]
 8013692:	1c7b      	adds	r3, r7, #1
 8013694:	2206      	movs	r2, #6
 8013696:	4830      	ldr	r0, [pc, #192]	; (8013758 <_vfiprintf_r+0x268>)
 8013698:	9303      	str	r3, [sp, #12]
 801369a:	7629      	strb	r1, [r5, #24]
 801369c:	f7ff f83c 	bl	8012718 <memchr>
 80136a0:	2800      	cmp	r0, #0
 80136a2:	d045      	beq.n	8013730 <_vfiprintf_r+0x240>
 80136a4:	4b2d      	ldr	r3, [pc, #180]	; (801375c <_vfiprintf_r+0x26c>)
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d127      	bne.n	80136fa <_vfiprintf_r+0x20a>
 80136aa:	2207      	movs	r2, #7
 80136ac:	9b07      	ldr	r3, [sp, #28]
 80136ae:	3307      	adds	r3, #7
 80136b0:	4393      	bics	r3, r2
 80136b2:	3308      	adds	r3, #8
 80136b4:	9307      	str	r3, [sp, #28]
 80136b6:	696b      	ldr	r3, [r5, #20]
 80136b8:	9a04      	ldr	r2, [sp, #16]
 80136ba:	189b      	adds	r3, r3, r2
 80136bc:	616b      	str	r3, [r5, #20]
 80136be:	e75d      	b.n	801357c <_vfiprintf_r+0x8c>
 80136c0:	210a      	movs	r1, #10
 80136c2:	434b      	muls	r3, r1
 80136c4:	4667      	mov	r7, ip
 80136c6:	189b      	adds	r3, r3, r2
 80136c8:	3909      	subs	r1, #9
 80136ca:	e7a3      	b.n	8013614 <_vfiprintf_r+0x124>
 80136cc:	2301      	movs	r3, #1
 80136ce:	425b      	negs	r3, r3
 80136d0:	e7ce      	b.n	8013670 <_vfiprintf_r+0x180>
 80136d2:	2300      	movs	r3, #0
 80136d4:	001a      	movs	r2, r3
 80136d6:	3701      	adds	r7, #1
 80136d8:	606b      	str	r3, [r5, #4]
 80136da:	7839      	ldrb	r1, [r7, #0]
 80136dc:	1c78      	adds	r0, r7, #1
 80136de:	3930      	subs	r1, #48	; 0x30
 80136e0:	4684      	mov	ip, r0
 80136e2:	2909      	cmp	r1, #9
 80136e4:	d903      	bls.n	80136ee <_vfiprintf_r+0x1fe>
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d0c3      	beq.n	8013672 <_vfiprintf_r+0x182>
 80136ea:	9209      	str	r2, [sp, #36]	; 0x24
 80136ec:	e7c1      	b.n	8013672 <_vfiprintf_r+0x182>
 80136ee:	230a      	movs	r3, #10
 80136f0:	435a      	muls	r2, r3
 80136f2:	4667      	mov	r7, ip
 80136f4:	1852      	adds	r2, r2, r1
 80136f6:	3b09      	subs	r3, #9
 80136f8:	e7ef      	b.n	80136da <_vfiprintf_r+0x1ea>
 80136fa:	ab07      	add	r3, sp, #28
 80136fc:	9300      	str	r3, [sp, #0]
 80136fe:	0022      	movs	r2, r4
 8013700:	0029      	movs	r1, r5
 8013702:	0030      	movs	r0, r6
 8013704:	4b16      	ldr	r3, [pc, #88]	; (8013760 <_vfiprintf_r+0x270>)
 8013706:	f7fd fd63 	bl	80111d0 <_printf_float>
 801370a:	9004      	str	r0, [sp, #16]
 801370c:	9b04      	ldr	r3, [sp, #16]
 801370e:	3301      	adds	r3, #1
 8013710:	d1d1      	bne.n	80136b6 <_vfiprintf_r+0x1c6>
 8013712:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013714:	07db      	lsls	r3, r3, #31
 8013716:	d405      	bmi.n	8013724 <_vfiprintf_r+0x234>
 8013718:	89a3      	ldrh	r3, [r4, #12]
 801371a:	059b      	lsls	r3, r3, #22
 801371c:	d402      	bmi.n	8013724 <_vfiprintf_r+0x234>
 801371e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013720:	f000 fad4 	bl	8013ccc <__retarget_lock_release_recursive>
 8013724:	89a3      	ldrh	r3, [r4, #12]
 8013726:	065b      	lsls	r3, r3, #25
 8013728:	d500      	bpl.n	801372c <_vfiprintf_r+0x23c>
 801372a:	e70a      	b.n	8013542 <_vfiprintf_r+0x52>
 801372c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801372e:	e70a      	b.n	8013546 <_vfiprintf_r+0x56>
 8013730:	ab07      	add	r3, sp, #28
 8013732:	9300      	str	r3, [sp, #0]
 8013734:	0022      	movs	r2, r4
 8013736:	0029      	movs	r1, r5
 8013738:	0030      	movs	r0, r6
 801373a:	4b09      	ldr	r3, [pc, #36]	; (8013760 <_vfiprintf_r+0x270>)
 801373c:	f7fd fffa 	bl	8011734 <_printf_i>
 8013740:	e7e3      	b.n	801370a <_vfiprintf_r+0x21a>
 8013742:	46c0      	nop			; (mov r8, r8)
 8013744:	08015614 	.word	0x08015614
 8013748:	08015634 	.word	0x08015634
 801374c:	080155f4 	.word	0x080155f4
 8013750:	0801549c 	.word	0x0801549c
 8013754:	080154a2 	.word	0x080154a2
 8013758:	080154a6 	.word	0x080154a6
 801375c:	080111d1 	.word	0x080111d1
 8013760:	080134cd 	.word	0x080134cd

08013764 <__swbuf_r>:
 8013764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013766:	0005      	movs	r5, r0
 8013768:	000e      	movs	r6, r1
 801376a:	0014      	movs	r4, r2
 801376c:	2800      	cmp	r0, #0
 801376e:	d004      	beq.n	801377a <__swbuf_r+0x16>
 8013770:	6983      	ldr	r3, [r0, #24]
 8013772:	2b00      	cmp	r3, #0
 8013774:	d101      	bne.n	801377a <__swbuf_r+0x16>
 8013776:	f000 fa07 	bl	8013b88 <__sinit>
 801377a:	4b22      	ldr	r3, [pc, #136]	; (8013804 <__swbuf_r+0xa0>)
 801377c:	429c      	cmp	r4, r3
 801377e:	d12e      	bne.n	80137de <__swbuf_r+0x7a>
 8013780:	686c      	ldr	r4, [r5, #4]
 8013782:	69a3      	ldr	r3, [r4, #24]
 8013784:	60a3      	str	r3, [r4, #8]
 8013786:	89a3      	ldrh	r3, [r4, #12]
 8013788:	071b      	lsls	r3, r3, #28
 801378a:	d532      	bpl.n	80137f2 <__swbuf_r+0x8e>
 801378c:	6923      	ldr	r3, [r4, #16]
 801378e:	2b00      	cmp	r3, #0
 8013790:	d02f      	beq.n	80137f2 <__swbuf_r+0x8e>
 8013792:	6823      	ldr	r3, [r4, #0]
 8013794:	6922      	ldr	r2, [r4, #16]
 8013796:	b2f7      	uxtb	r7, r6
 8013798:	1a98      	subs	r0, r3, r2
 801379a:	6963      	ldr	r3, [r4, #20]
 801379c:	b2f6      	uxtb	r6, r6
 801379e:	4283      	cmp	r3, r0
 80137a0:	dc05      	bgt.n	80137ae <__swbuf_r+0x4a>
 80137a2:	0021      	movs	r1, r4
 80137a4:	0028      	movs	r0, r5
 80137a6:	f000 f94d 	bl	8013a44 <_fflush_r>
 80137aa:	2800      	cmp	r0, #0
 80137ac:	d127      	bne.n	80137fe <__swbuf_r+0x9a>
 80137ae:	68a3      	ldr	r3, [r4, #8]
 80137b0:	3001      	adds	r0, #1
 80137b2:	3b01      	subs	r3, #1
 80137b4:	60a3      	str	r3, [r4, #8]
 80137b6:	6823      	ldr	r3, [r4, #0]
 80137b8:	1c5a      	adds	r2, r3, #1
 80137ba:	6022      	str	r2, [r4, #0]
 80137bc:	701f      	strb	r7, [r3, #0]
 80137be:	6963      	ldr	r3, [r4, #20]
 80137c0:	4283      	cmp	r3, r0
 80137c2:	d004      	beq.n	80137ce <__swbuf_r+0x6a>
 80137c4:	89a3      	ldrh	r3, [r4, #12]
 80137c6:	07db      	lsls	r3, r3, #31
 80137c8:	d507      	bpl.n	80137da <__swbuf_r+0x76>
 80137ca:	2e0a      	cmp	r6, #10
 80137cc:	d105      	bne.n	80137da <__swbuf_r+0x76>
 80137ce:	0021      	movs	r1, r4
 80137d0:	0028      	movs	r0, r5
 80137d2:	f000 f937 	bl	8013a44 <_fflush_r>
 80137d6:	2800      	cmp	r0, #0
 80137d8:	d111      	bne.n	80137fe <__swbuf_r+0x9a>
 80137da:	0030      	movs	r0, r6
 80137dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80137de:	4b0a      	ldr	r3, [pc, #40]	; (8013808 <__swbuf_r+0xa4>)
 80137e0:	429c      	cmp	r4, r3
 80137e2:	d101      	bne.n	80137e8 <__swbuf_r+0x84>
 80137e4:	68ac      	ldr	r4, [r5, #8]
 80137e6:	e7cc      	b.n	8013782 <__swbuf_r+0x1e>
 80137e8:	4b08      	ldr	r3, [pc, #32]	; (801380c <__swbuf_r+0xa8>)
 80137ea:	429c      	cmp	r4, r3
 80137ec:	d1c9      	bne.n	8013782 <__swbuf_r+0x1e>
 80137ee:	68ec      	ldr	r4, [r5, #12]
 80137f0:	e7c7      	b.n	8013782 <__swbuf_r+0x1e>
 80137f2:	0021      	movs	r1, r4
 80137f4:	0028      	movs	r0, r5
 80137f6:	f000 f819 	bl	801382c <__swsetup_r>
 80137fa:	2800      	cmp	r0, #0
 80137fc:	d0c9      	beq.n	8013792 <__swbuf_r+0x2e>
 80137fe:	2601      	movs	r6, #1
 8013800:	4276      	negs	r6, r6
 8013802:	e7ea      	b.n	80137da <__swbuf_r+0x76>
 8013804:	08015614 	.word	0x08015614
 8013808:	08015634 	.word	0x08015634
 801380c:	080155f4 	.word	0x080155f4

08013810 <__ascii_wctomb>:
 8013810:	0003      	movs	r3, r0
 8013812:	1e08      	subs	r0, r1, #0
 8013814:	d005      	beq.n	8013822 <__ascii_wctomb+0x12>
 8013816:	2aff      	cmp	r2, #255	; 0xff
 8013818:	d904      	bls.n	8013824 <__ascii_wctomb+0x14>
 801381a:	228a      	movs	r2, #138	; 0x8a
 801381c:	2001      	movs	r0, #1
 801381e:	601a      	str	r2, [r3, #0]
 8013820:	4240      	negs	r0, r0
 8013822:	4770      	bx	lr
 8013824:	2001      	movs	r0, #1
 8013826:	700a      	strb	r2, [r1, #0]
 8013828:	e7fb      	b.n	8013822 <__ascii_wctomb+0x12>
	...

0801382c <__swsetup_r>:
 801382c:	4b37      	ldr	r3, [pc, #220]	; (801390c <__swsetup_r+0xe0>)
 801382e:	b570      	push	{r4, r5, r6, lr}
 8013830:	681d      	ldr	r5, [r3, #0]
 8013832:	0006      	movs	r6, r0
 8013834:	000c      	movs	r4, r1
 8013836:	2d00      	cmp	r5, #0
 8013838:	d005      	beq.n	8013846 <__swsetup_r+0x1a>
 801383a:	69ab      	ldr	r3, [r5, #24]
 801383c:	2b00      	cmp	r3, #0
 801383e:	d102      	bne.n	8013846 <__swsetup_r+0x1a>
 8013840:	0028      	movs	r0, r5
 8013842:	f000 f9a1 	bl	8013b88 <__sinit>
 8013846:	4b32      	ldr	r3, [pc, #200]	; (8013910 <__swsetup_r+0xe4>)
 8013848:	429c      	cmp	r4, r3
 801384a:	d10f      	bne.n	801386c <__swsetup_r+0x40>
 801384c:	686c      	ldr	r4, [r5, #4]
 801384e:	230c      	movs	r3, #12
 8013850:	5ee2      	ldrsh	r2, [r4, r3]
 8013852:	b293      	uxth	r3, r2
 8013854:	0711      	lsls	r1, r2, #28
 8013856:	d42d      	bmi.n	80138b4 <__swsetup_r+0x88>
 8013858:	06d9      	lsls	r1, r3, #27
 801385a:	d411      	bmi.n	8013880 <__swsetup_r+0x54>
 801385c:	2309      	movs	r3, #9
 801385e:	2001      	movs	r0, #1
 8013860:	6033      	str	r3, [r6, #0]
 8013862:	3337      	adds	r3, #55	; 0x37
 8013864:	4313      	orrs	r3, r2
 8013866:	81a3      	strh	r3, [r4, #12]
 8013868:	4240      	negs	r0, r0
 801386a:	bd70      	pop	{r4, r5, r6, pc}
 801386c:	4b29      	ldr	r3, [pc, #164]	; (8013914 <__swsetup_r+0xe8>)
 801386e:	429c      	cmp	r4, r3
 8013870:	d101      	bne.n	8013876 <__swsetup_r+0x4a>
 8013872:	68ac      	ldr	r4, [r5, #8]
 8013874:	e7eb      	b.n	801384e <__swsetup_r+0x22>
 8013876:	4b28      	ldr	r3, [pc, #160]	; (8013918 <__swsetup_r+0xec>)
 8013878:	429c      	cmp	r4, r3
 801387a:	d1e8      	bne.n	801384e <__swsetup_r+0x22>
 801387c:	68ec      	ldr	r4, [r5, #12]
 801387e:	e7e6      	b.n	801384e <__swsetup_r+0x22>
 8013880:	075b      	lsls	r3, r3, #29
 8013882:	d513      	bpl.n	80138ac <__swsetup_r+0x80>
 8013884:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013886:	2900      	cmp	r1, #0
 8013888:	d008      	beq.n	801389c <__swsetup_r+0x70>
 801388a:	0023      	movs	r3, r4
 801388c:	3344      	adds	r3, #68	; 0x44
 801388e:	4299      	cmp	r1, r3
 8013890:	d002      	beq.n	8013898 <__swsetup_r+0x6c>
 8013892:	0030      	movs	r0, r6
 8013894:	f7ff fb1c 	bl	8012ed0 <_free_r>
 8013898:	2300      	movs	r3, #0
 801389a:	6363      	str	r3, [r4, #52]	; 0x34
 801389c:	2224      	movs	r2, #36	; 0x24
 801389e:	89a3      	ldrh	r3, [r4, #12]
 80138a0:	4393      	bics	r3, r2
 80138a2:	81a3      	strh	r3, [r4, #12]
 80138a4:	2300      	movs	r3, #0
 80138a6:	6063      	str	r3, [r4, #4]
 80138a8:	6923      	ldr	r3, [r4, #16]
 80138aa:	6023      	str	r3, [r4, #0]
 80138ac:	2308      	movs	r3, #8
 80138ae:	89a2      	ldrh	r2, [r4, #12]
 80138b0:	4313      	orrs	r3, r2
 80138b2:	81a3      	strh	r3, [r4, #12]
 80138b4:	6923      	ldr	r3, [r4, #16]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d10b      	bne.n	80138d2 <__swsetup_r+0xa6>
 80138ba:	21a0      	movs	r1, #160	; 0xa0
 80138bc:	2280      	movs	r2, #128	; 0x80
 80138be:	89a3      	ldrh	r3, [r4, #12]
 80138c0:	0089      	lsls	r1, r1, #2
 80138c2:	0092      	lsls	r2, r2, #2
 80138c4:	400b      	ands	r3, r1
 80138c6:	4293      	cmp	r3, r2
 80138c8:	d003      	beq.n	80138d2 <__swsetup_r+0xa6>
 80138ca:	0021      	movs	r1, r4
 80138cc:	0030      	movs	r0, r6
 80138ce:	f000 fa27 	bl	8013d20 <__smakebuf_r>
 80138d2:	220c      	movs	r2, #12
 80138d4:	5ea3      	ldrsh	r3, [r4, r2]
 80138d6:	2001      	movs	r0, #1
 80138d8:	001a      	movs	r2, r3
 80138da:	b299      	uxth	r1, r3
 80138dc:	4002      	ands	r2, r0
 80138de:	4203      	tst	r3, r0
 80138e0:	d00f      	beq.n	8013902 <__swsetup_r+0xd6>
 80138e2:	2200      	movs	r2, #0
 80138e4:	60a2      	str	r2, [r4, #8]
 80138e6:	6962      	ldr	r2, [r4, #20]
 80138e8:	4252      	negs	r2, r2
 80138ea:	61a2      	str	r2, [r4, #24]
 80138ec:	2000      	movs	r0, #0
 80138ee:	6922      	ldr	r2, [r4, #16]
 80138f0:	4282      	cmp	r2, r0
 80138f2:	d1ba      	bne.n	801386a <__swsetup_r+0x3e>
 80138f4:	060a      	lsls	r2, r1, #24
 80138f6:	d5b8      	bpl.n	801386a <__swsetup_r+0x3e>
 80138f8:	2240      	movs	r2, #64	; 0x40
 80138fa:	4313      	orrs	r3, r2
 80138fc:	81a3      	strh	r3, [r4, #12]
 80138fe:	3801      	subs	r0, #1
 8013900:	e7b3      	b.n	801386a <__swsetup_r+0x3e>
 8013902:	0788      	lsls	r0, r1, #30
 8013904:	d400      	bmi.n	8013908 <__swsetup_r+0xdc>
 8013906:	6962      	ldr	r2, [r4, #20]
 8013908:	60a2      	str	r2, [r4, #8]
 801390a:	e7ef      	b.n	80138ec <__swsetup_r+0xc0>
 801390c:	2000003c 	.word	0x2000003c
 8013910:	08015614 	.word	0x08015614
 8013914:	08015634 	.word	0x08015634
 8013918:	080155f4 	.word	0x080155f4

0801391c <abort>:
 801391c:	2006      	movs	r0, #6
 801391e:	b510      	push	{r4, lr}
 8013920:	f000 fa74 	bl	8013e0c <raise>
 8013924:	2001      	movs	r0, #1
 8013926:	f7f0 fc4f 	bl	80041c8 <_exit>
	...

0801392c <__sflush_r>:
 801392c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801392e:	898b      	ldrh	r3, [r1, #12]
 8013930:	0005      	movs	r5, r0
 8013932:	000c      	movs	r4, r1
 8013934:	071a      	lsls	r2, r3, #28
 8013936:	d45f      	bmi.n	80139f8 <__sflush_r+0xcc>
 8013938:	684a      	ldr	r2, [r1, #4]
 801393a:	2a00      	cmp	r2, #0
 801393c:	dc04      	bgt.n	8013948 <__sflush_r+0x1c>
 801393e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8013940:	2a00      	cmp	r2, #0
 8013942:	dc01      	bgt.n	8013948 <__sflush_r+0x1c>
 8013944:	2000      	movs	r0, #0
 8013946:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013948:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 801394a:	2f00      	cmp	r7, #0
 801394c:	d0fa      	beq.n	8013944 <__sflush_r+0x18>
 801394e:	2200      	movs	r2, #0
 8013950:	2180      	movs	r1, #128	; 0x80
 8013952:	682e      	ldr	r6, [r5, #0]
 8013954:	602a      	str	r2, [r5, #0]
 8013956:	001a      	movs	r2, r3
 8013958:	0149      	lsls	r1, r1, #5
 801395a:	400a      	ands	r2, r1
 801395c:	420b      	tst	r3, r1
 801395e:	d034      	beq.n	80139ca <__sflush_r+0x9e>
 8013960:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013962:	89a3      	ldrh	r3, [r4, #12]
 8013964:	075b      	lsls	r3, r3, #29
 8013966:	d506      	bpl.n	8013976 <__sflush_r+0x4a>
 8013968:	6863      	ldr	r3, [r4, #4]
 801396a:	1ac0      	subs	r0, r0, r3
 801396c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801396e:	2b00      	cmp	r3, #0
 8013970:	d001      	beq.n	8013976 <__sflush_r+0x4a>
 8013972:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013974:	1ac0      	subs	r0, r0, r3
 8013976:	0002      	movs	r2, r0
 8013978:	6a21      	ldr	r1, [r4, #32]
 801397a:	2300      	movs	r3, #0
 801397c:	0028      	movs	r0, r5
 801397e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8013980:	47b8      	blx	r7
 8013982:	89a1      	ldrh	r1, [r4, #12]
 8013984:	1c43      	adds	r3, r0, #1
 8013986:	d106      	bne.n	8013996 <__sflush_r+0x6a>
 8013988:	682b      	ldr	r3, [r5, #0]
 801398a:	2b1d      	cmp	r3, #29
 801398c:	d831      	bhi.n	80139f2 <__sflush_r+0xc6>
 801398e:	4a2c      	ldr	r2, [pc, #176]	; (8013a40 <__sflush_r+0x114>)
 8013990:	40da      	lsrs	r2, r3
 8013992:	07d3      	lsls	r3, r2, #31
 8013994:	d52d      	bpl.n	80139f2 <__sflush_r+0xc6>
 8013996:	2300      	movs	r3, #0
 8013998:	6063      	str	r3, [r4, #4]
 801399a:	6923      	ldr	r3, [r4, #16]
 801399c:	6023      	str	r3, [r4, #0]
 801399e:	04cb      	lsls	r3, r1, #19
 80139a0:	d505      	bpl.n	80139ae <__sflush_r+0x82>
 80139a2:	1c43      	adds	r3, r0, #1
 80139a4:	d102      	bne.n	80139ac <__sflush_r+0x80>
 80139a6:	682b      	ldr	r3, [r5, #0]
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d100      	bne.n	80139ae <__sflush_r+0x82>
 80139ac:	6560      	str	r0, [r4, #84]	; 0x54
 80139ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80139b0:	602e      	str	r6, [r5, #0]
 80139b2:	2900      	cmp	r1, #0
 80139b4:	d0c6      	beq.n	8013944 <__sflush_r+0x18>
 80139b6:	0023      	movs	r3, r4
 80139b8:	3344      	adds	r3, #68	; 0x44
 80139ba:	4299      	cmp	r1, r3
 80139bc:	d002      	beq.n	80139c4 <__sflush_r+0x98>
 80139be:	0028      	movs	r0, r5
 80139c0:	f7ff fa86 	bl	8012ed0 <_free_r>
 80139c4:	2000      	movs	r0, #0
 80139c6:	6360      	str	r0, [r4, #52]	; 0x34
 80139c8:	e7bd      	b.n	8013946 <__sflush_r+0x1a>
 80139ca:	2301      	movs	r3, #1
 80139cc:	0028      	movs	r0, r5
 80139ce:	6a21      	ldr	r1, [r4, #32]
 80139d0:	47b8      	blx	r7
 80139d2:	1c43      	adds	r3, r0, #1
 80139d4:	d1c5      	bne.n	8013962 <__sflush_r+0x36>
 80139d6:	682b      	ldr	r3, [r5, #0]
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d0c2      	beq.n	8013962 <__sflush_r+0x36>
 80139dc:	2b1d      	cmp	r3, #29
 80139de:	d001      	beq.n	80139e4 <__sflush_r+0xb8>
 80139e0:	2b16      	cmp	r3, #22
 80139e2:	d101      	bne.n	80139e8 <__sflush_r+0xbc>
 80139e4:	602e      	str	r6, [r5, #0]
 80139e6:	e7ad      	b.n	8013944 <__sflush_r+0x18>
 80139e8:	2340      	movs	r3, #64	; 0x40
 80139ea:	89a2      	ldrh	r2, [r4, #12]
 80139ec:	4313      	orrs	r3, r2
 80139ee:	81a3      	strh	r3, [r4, #12]
 80139f0:	e7a9      	b.n	8013946 <__sflush_r+0x1a>
 80139f2:	2340      	movs	r3, #64	; 0x40
 80139f4:	430b      	orrs	r3, r1
 80139f6:	e7fa      	b.n	80139ee <__sflush_r+0xc2>
 80139f8:	690f      	ldr	r7, [r1, #16]
 80139fa:	2f00      	cmp	r7, #0
 80139fc:	d0a2      	beq.n	8013944 <__sflush_r+0x18>
 80139fe:	680a      	ldr	r2, [r1, #0]
 8013a00:	600f      	str	r7, [r1, #0]
 8013a02:	1bd2      	subs	r2, r2, r7
 8013a04:	9201      	str	r2, [sp, #4]
 8013a06:	2200      	movs	r2, #0
 8013a08:	079b      	lsls	r3, r3, #30
 8013a0a:	d100      	bne.n	8013a0e <__sflush_r+0xe2>
 8013a0c:	694a      	ldr	r2, [r1, #20]
 8013a0e:	60a2      	str	r2, [r4, #8]
 8013a10:	9b01      	ldr	r3, [sp, #4]
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	dc00      	bgt.n	8013a18 <__sflush_r+0xec>
 8013a16:	e795      	b.n	8013944 <__sflush_r+0x18>
 8013a18:	003a      	movs	r2, r7
 8013a1a:	0028      	movs	r0, r5
 8013a1c:	9b01      	ldr	r3, [sp, #4]
 8013a1e:	6a21      	ldr	r1, [r4, #32]
 8013a20:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013a22:	47b0      	blx	r6
 8013a24:	2800      	cmp	r0, #0
 8013a26:	dc06      	bgt.n	8013a36 <__sflush_r+0x10a>
 8013a28:	2340      	movs	r3, #64	; 0x40
 8013a2a:	2001      	movs	r0, #1
 8013a2c:	89a2      	ldrh	r2, [r4, #12]
 8013a2e:	4240      	negs	r0, r0
 8013a30:	4313      	orrs	r3, r2
 8013a32:	81a3      	strh	r3, [r4, #12]
 8013a34:	e787      	b.n	8013946 <__sflush_r+0x1a>
 8013a36:	9b01      	ldr	r3, [sp, #4]
 8013a38:	183f      	adds	r7, r7, r0
 8013a3a:	1a1b      	subs	r3, r3, r0
 8013a3c:	9301      	str	r3, [sp, #4]
 8013a3e:	e7e7      	b.n	8013a10 <__sflush_r+0xe4>
 8013a40:	20400001 	.word	0x20400001

08013a44 <_fflush_r>:
 8013a44:	690b      	ldr	r3, [r1, #16]
 8013a46:	b570      	push	{r4, r5, r6, lr}
 8013a48:	0005      	movs	r5, r0
 8013a4a:	000c      	movs	r4, r1
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d102      	bne.n	8013a56 <_fflush_r+0x12>
 8013a50:	2500      	movs	r5, #0
 8013a52:	0028      	movs	r0, r5
 8013a54:	bd70      	pop	{r4, r5, r6, pc}
 8013a56:	2800      	cmp	r0, #0
 8013a58:	d004      	beq.n	8013a64 <_fflush_r+0x20>
 8013a5a:	6983      	ldr	r3, [r0, #24]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d101      	bne.n	8013a64 <_fflush_r+0x20>
 8013a60:	f000 f892 	bl	8013b88 <__sinit>
 8013a64:	4b14      	ldr	r3, [pc, #80]	; (8013ab8 <_fflush_r+0x74>)
 8013a66:	429c      	cmp	r4, r3
 8013a68:	d11b      	bne.n	8013aa2 <_fflush_r+0x5e>
 8013a6a:	686c      	ldr	r4, [r5, #4]
 8013a6c:	220c      	movs	r2, #12
 8013a6e:	5ea3      	ldrsh	r3, [r4, r2]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d0ed      	beq.n	8013a50 <_fflush_r+0xc>
 8013a74:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013a76:	07d2      	lsls	r2, r2, #31
 8013a78:	d404      	bmi.n	8013a84 <_fflush_r+0x40>
 8013a7a:	059b      	lsls	r3, r3, #22
 8013a7c:	d402      	bmi.n	8013a84 <_fflush_r+0x40>
 8013a7e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013a80:	f000 f923 	bl	8013cca <__retarget_lock_acquire_recursive>
 8013a84:	0028      	movs	r0, r5
 8013a86:	0021      	movs	r1, r4
 8013a88:	f7ff ff50 	bl	801392c <__sflush_r>
 8013a8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013a8e:	0005      	movs	r5, r0
 8013a90:	07db      	lsls	r3, r3, #31
 8013a92:	d4de      	bmi.n	8013a52 <_fflush_r+0xe>
 8013a94:	89a3      	ldrh	r3, [r4, #12]
 8013a96:	059b      	lsls	r3, r3, #22
 8013a98:	d4db      	bmi.n	8013a52 <_fflush_r+0xe>
 8013a9a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013a9c:	f000 f916 	bl	8013ccc <__retarget_lock_release_recursive>
 8013aa0:	e7d7      	b.n	8013a52 <_fflush_r+0xe>
 8013aa2:	4b06      	ldr	r3, [pc, #24]	; (8013abc <_fflush_r+0x78>)
 8013aa4:	429c      	cmp	r4, r3
 8013aa6:	d101      	bne.n	8013aac <_fflush_r+0x68>
 8013aa8:	68ac      	ldr	r4, [r5, #8]
 8013aaa:	e7df      	b.n	8013a6c <_fflush_r+0x28>
 8013aac:	4b04      	ldr	r3, [pc, #16]	; (8013ac0 <_fflush_r+0x7c>)
 8013aae:	429c      	cmp	r4, r3
 8013ab0:	d1dc      	bne.n	8013a6c <_fflush_r+0x28>
 8013ab2:	68ec      	ldr	r4, [r5, #12]
 8013ab4:	e7da      	b.n	8013a6c <_fflush_r+0x28>
 8013ab6:	46c0      	nop			; (mov r8, r8)
 8013ab8:	08015614 	.word	0x08015614
 8013abc:	08015634 	.word	0x08015634
 8013ac0:	080155f4 	.word	0x080155f4

08013ac4 <std>:
 8013ac4:	2300      	movs	r3, #0
 8013ac6:	b510      	push	{r4, lr}
 8013ac8:	0004      	movs	r4, r0
 8013aca:	6003      	str	r3, [r0, #0]
 8013acc:	6043      	str	r3, [r0, #4]
 8013ace:	6083      	str	r3, [r0, #8]
 8013ad0:	8181      	strh	r1, [r0, #12]
 8013ad2:	6643      	str	r3, [r0, #100]	; 0x64
 8013ad4:	0019      	movs	r1, r3
 8013ad6:	81c2      	strh	r2, [r0, #14]
 8013ad8:	6103      	str	r3, [r0, #16]
 8013ada:	6143      	str	r3, [r0, #20]
 8013adc:	6183      	str	r3, [r0, #24]
 8013ade:	2208      	movs	r2, #8
 8013ae0:	305c      	adds	r0, #92	; 0x5c
 8013ae2:	f7fd fac3 	bl	801106c <memset>
 8013ae6:	4b05      	ldr	r3, [pc, #20]	; (8013afc <std+0x38>)
 8013ae8:	6224      	str	r4, [r4, #32]
 8013aea:	6263      	str	r3, [r4, #36]	; 0x24
 8013aec:	4b04      	ldr	r3, [pc, #16]	; (8013b00 <std+0x3c>)
 8013aee:	62a3      	str	r3, [r4, #40]	; 0x28
 8013af0:	4b04      	ldr	r3, [pc, #16]	; (8013b04 <std+0x40>)
 8013af2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013af4:	4b04      	ldr	r3, [pc, #16]	; (8013b08 <std+0x44>)
 8013af6:	6323      	str	r3, [r4, #48]	; 0x30
 8013af8:	bd10      	pop	{r4, pc}
 8013afa:	46c0      	nop			; (mov r8, r8)
 8013afc:	08013e4d 	.word	0x08013e4d
 8013b00:	08013e75 	.word	0x08013e75
 8013b04:	08013ead 	.word	0x08013ead
 8013b08:	08013ed9 	.word	0x08013ed9

08013b0c <_cleanup_r>:
 8013b0c:	b510      	push	{r4, lr}
 8013b0e:	4902      	ldr	r1, [pc, #8]	; (8013b18 <_cleanup_r+0xc>)
 8013b10:	f000 f8ba 	bl	8013c88 <_fwalk_reent>
 8013b14:	bd10      	pop	{r4, pc}
 8013b16:	46c0      	nop			; (mov r8, r8)
 8013b18:	08013a45 	.word	0x08013a45

08013b1c <__sfmoreglue>:
 8013b1c:	b570      	push	{r4, r5, r6, lr}
 8013b1e:	2568      	movs	r5, #104	; 0x68
 8013b20:	1e4a      	subs	r2, r1, #1
 8013b22:	4355      	muls	r5, r2
 8013b24:	000e      	movs	r6, r1
 8013b26:	0029      	movs	r1, r5
 8013b28:	3174      	adds	r1, #116	; 0x74
 8013b2a:	f7ff fa3d 	bl	8012fa8 <_malloc_r>
 8013b2e:	1e04      	subs	r4, r0, #0
 8013b30:	d008      	beq.n	8013b44 <__sfmoreglue+0x28>
 8013b32:	2100      	movs	r1, #0
 8013b34:	002a      	movs	r2, r5
 8013b36:	6001      	str	r1, [r0, #0]
 8013b38:	6046      	str	r6, [r0, #4]
 8013b3a:	300c      	adds	r0, #12
 8013b3c:	60a0      	str	r0, [r4, #8]
 8013b3e:	3268      	adds	r2, #104	; 0x68
 8013b40:	f7fd fa94 	bl	801106c <memset>
 8013b44:	0020      	movs	r0, r4
 8013b46:	bd70      	pop	{r4, r5, r6, pc}

08013b48 <__sfp_lock_acquire>:
 8013b48:	b510      	push	{r4, lr}
 8013b4a:	4802      	ldr	r0, [pc, #8]	; (8013b54 <__sfp_lock_acquire+0xc>)
 8013b4c:	f000 f8bd 	bl	8013cca <__retarget_lock_acquire_recursive>
 8013b50:	bd10      	pop	{r4, pc}
 8013b52:	46c0      	nop			; (mov r8, r8)
 8013b54:	20000669 	.word	0x20000669

08013b58 <__sfp_lock_release>:
 8013b58:	b510      	push	{r4, lr}
 8013b5a:	4802      	ldr	r0, [pc, #8]	; (8013b64 <__sfp_lock_release+0xc>)
 8013b5c:	f000 f8b6 	bl	8013ccc <__retarget_lock_release_recursive>
 8013b60:	bd10      	pop	{r4, pc}
 8013b62:	46c0      	nop			; (mov r8, r8)
 8013b64:	20000669 	.word	0x20000669

08013b68 <__sinit_lock_acquire>:
 8013b68:	b510      	push	{r4, lr}
 8013b6a:	4802      	ldr	r0, [pc, #8]	; (8013b74 <__sinit_lock_acquire+0xc>)
 8013b6c:	f000 f8ad 	bl	8013cca <__retarget_lock_acquire_recursive>
 8013b70:	bd10      	pop	{r4, pc}
 8013b72:	46c0      	nop			; (mov r8, r8)
 8013b74:	2000066a 	.word	0x2000066a

08013b78 <__sinit_lock_release>:
 8013b78:	b510      	push	{r4, lr}
 8013b7a:	4802      	ldr	r0, [pc, #8]	; (8013b84 <__sinit_lock_release+0xc>)
 8013b7c:	f000 f8a6 	bl	8013ccc <__retarget_lock_release_recursive>
 8013b80:	bd10      	pop	{r4, pc}
 8013b82:	46c0      	nop			; (mov r8, r8)
 8013b84:	2000066a 	.word	0x2000066a

08013b88 <__sinit>:
 8013b88:	b513      	push	{r0, r1, r4, lr}
 8013b8a:	0004      	movs	r4, r0
 8013b8c:	f7ff ffec 	bl	8013b68 <__sinit_lock_acquire>
 8013b90:	69a3      	ldr	r3, [r4, #24]
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d002      	beq.n	8013b9c <__sinit+0x14>
 8013b96:	f7ff ffef 	bl	8013b78 <__sinit_lock_release>
 8013b9a:	bd13      	pop	{r0, r1, r4, pc}
 8013b9c:	64a3      	str	r3, [r4, #72]	; 0x48
 8013b9e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8013ba0:	6523      	str	r3, [r4, #80]	; 0x50
 8013ba2:	4b13      	ldr	r3, [pc, #76]	; (8013bf0 <__sinit+0x68>)
 8013ba4:	4a13      	ldr	r2, [pc, #76]	; (8013bf4 <__sinit+0x6c>)
 8013ba6:	681b      	ldr	r3, [r3, #0]
 8013ba8:	62a2      	str	r2, [r4, #40]	; 0x28
 8013baa:	9301      	str	r3, [sp, #4]
 8013bac:	42a3      	cmp	r3, r4
 8013bae:	d101      	bne.n	8013bb4 <__sinit+0x2c>
 8013bb0:	2301      	movs	r3, #1
 8013bb2:	61a3      	str	r3, [r4, #24]
 8013bb4:	0020      	movs	r0, r4
 8013bb6:	f000 f81f 	bl	8013bf8 <__sfp>
 8013bba:	6060      	str	r0, [r4, #4]
 8013bbc:	0020      	movs	r0, r4
 8013bbe:	f000 f81b 	bl	8013bf8 <__sfp>
 8013bc2:	60a0      	str	r0, [r4, #8]
 8013bc4:	0020      	movs	r0, r4
 8013bc6:	f000 f817 	bl	8013bf8 <__sfp>
 8013bca:	2200      	movs	r2, #0
 8013bcc:	2104      	movs	r1, #4
 8013bce:	60e0      	str	r0, [r4, #12]
 8013bd0:	6860      	ldr	r0, [r4, #4]
 8013bd2:	f7ff ff77 	bl	8013ac4 <std>
 8013bd6:	2201      	movs	r2, #1
 8013bd8:	2109      	movs	r1, #9
 8013bda:	68a0      	ldr	r0, [r4, #8]
 8013bdc:	f7ff ff72 	bl	8013ac4 <std>
 8013be0:	2202      	movs	r2, #2
 8013be2:	2112      	movs	r1, #18
 8013be4:	68e0      	ldr	r0, [r4, #12]
 8013be6:	f7ff ff6d 	bl	8013ac4 <std>
 8013bea:	2301      	movs	r3, #1
 8013bec:	61a3      	str	r3, [r4, #24]
 8013bee:	e7d2      	b.n	8013b96 <__sinit+0xe>
 8013bf0:	08015278 	.word	0x08015278
 8013bf4:	08013b0d 	.word	0x08013b0d

08013bf8 <__sfp>:
 8013bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bfa:	0007      	movs	r7, r0
 8013bfc:	f7ff ffa4 	bl	8013b48 <__sfp_lock_acquire>
 8013c00:	4b1f      	ldr	r3, [pc, #124]	; (8013c80 <__sfp+0x88>)
 8013c02:	681e      	ldr	r6, [r3, #0]
 8013c04:	69b3      	ldr	r3, [r6, #24]
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d102      	bne.n	8013c10 <__sfp+0x18>
 8013c0a:	0030      	movs	r0, r6
 8013c0c:	f7ff ffbc 	bl	8013b88 <__sinit>
 8013c10:	3648      	adds	r6, #72	; 0x48
 8013c12:	68b4      	ldr	r4, [r6, #8]
 8013c14:	6873      	ldr	r3, [r6, #4]
 8013c16:	3b01      	subs	r3, #1
 8013c18:	d504      	bpl.n	8013c24 <__sfp+0x2c>
 8013c1a:	6833      	ldr	r3, [r6, #0]
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d022      	beq.n	8013c66 <__sfp+0x6e>
 8013c20:	6836      	ldr	r6, [r6, #0]
 8013c22:	e7f6      	b.n	8013c12 <__sfp+0x1a>
 8013c24:	220c      	movs	r2, #12
 8013c26:	5ea5      	ldrsh	r5, [r4, r2]
 8013c28:	2d00      	cmp	r5, #0
 8013c2a:	d11a      	bne.n	8013c62 <__sfp+0x6a>
 8013c2c:	0020      	movs	r0, r4
 8013c2e:	4b15      	ldr	r3, [pc, #84]	; (8013c84 <__sfp+0x8c>)
 8013c30:	3058      	adds	r0, #88	; 0x58
 8013c32:	60e3      	str	r3, [r4, #12]
 8013c34:	6665      	str	r5, [r4, #100]	; 0x64
 8013c36:	f000 f847 	bl	8013cc8 <__retarget_lock_init_recursive>
 8013c3a:	f7ff ff8d 	bl	8013b58 <__sfp_lock_release>
 8013c3e:	0020      	movs	r0, r4
 8013c40:	2208      	movs	r2, #8
 8013c42:	0029      	movs	r1, r5
 8013c44:	6025      	str	r5, [r4, #0]
 8013c46:	60a5      	str	r5, [r4, #8]
 8013c48:	6065      	str	r5, [r4, #4]
 8013c4a:	6125      	str	r5, [r4, #16]
 8013c4c:	6165      	str	r5, [r4, #20]
 8013c4e:	61a5      	str	r5, [r4, #24]
 8013c50:	305c      	adds	r0, #92	; 0x5c
 8013c52:	f7fd fa0b 	bl	801106c <memset>
 8013c56:	6365      	str	r5, [r4, #52]	; 0x34
 8013c58:	63a5      	str	r5, [r4, #56]	; 0x38
 8013c5a:	64a5      	str	r5, [r4, #72]	; 0x48
 8013c5c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8013c5e:	0020      	movs	r0, r4
 8013c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c62:	3468      	adds	r4, #104	; 0x68
 8013c64:	e7d7      	b.n	8013c16 <__sfp+0x1e>
 8013c66:	2104      	movs	r1, #4
 8013c68:	0038      	movs	r0, r7
 8013c6a:	f7ff ff57 	bl	8013b1c <__sfmoreglue>
 8013c6e:	1e04      	subs	r4, r0, #0
 8013c70:	6030      	str	r0, [r6, #0]
 8013c72:	d1d5      	bne.n	8013c20 <__sfp+0x28>
 8013c74:	f7ff ff70 	bl	8013b58 <__sfp_lock_release>
 8013c78:	230c      	movs	r3, #12
 8013c7a:	603b      	str	r3, [r7, #0]
 8013c7c:	e7ef      	b.n	8013c5e <__sfp+0x66>
 8013c7e:	46c0      	nop			; (mov r8, r8)
 8013c80:	08015278 	.word	0x08015278
 8013c84:	ffff0001 	.word	0xffff0001

08013c88 <_fwalk_reent>:
 8013c88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013c8a:	0004      	movs	r4, r0
 8013c8c:	0006      	movs	r6, r0
 8013c8e:	2700      	movs	r7, #0
 8013c90:	9101      	str	r1, [sp, #4]
 8013c92:	3448      	adds	r4, #72	; 0x48
 8013c94:	6863      	ldr	r3, [r4, #4]
 8013c96:	68a5      	ldr	r5, [r4, #8]
 8013c98:	9300      	str	r3, [sp, #0]
 8013c9a:	9b00      	ldr	r3, [sp, #0]
 8013c9c:	3b01      	subs	r3, #1
 8013c9e:	9300      	str	r3, [sp, #0]
 8013ca0:	d504      	bpl.n	8013cac <_fwalk_reent+0x24>
 8013ca2:	6824      	ldr	r4, [r4, #0]
 8013ca4:	2c00      	cmp	r4, #0
 8013ca6:	d1f5      	bne.n	8013c94 <_fwalk_reent+0xc>
 8013ca8:	0038      	movs	r0, r7
 8013caa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8013cac:	89ab      	ldrh	r3, [r5, #12]
 8013cae:	2b01      	cmp	r3, #1
 8013cb0:	d908      	bls.n	8013cc4 <_fwalk_reent+0x3c>
 8013cb2:	220e      	movs	r2, #14
 8013cb4:	5eab      	ldrsh	r3, [r5, r2]
 8013cb6:	3301      	adds	r3, #1
 8013cb8:	d004      	beq.n	8013cc4 <_fwalk_reent+0x3c>
 8013cba:	0029      	movs	r1, r5
 8013cbc:	0030      	movs	r0, r6
 8013cbe:	9b01      	ldr	r3, [sp, #4]
 8013cc0:	4798      	blx	r3
 8013cc2:	4307      	orrs	r7, r0
 8013cc4:	3568      	adds	r5, #104	; 0x68
 8013cc6:	e7e8      	b.n	8013c9a <_fwalk_reent+0x12>

08013cc8 <__retarget_lock_init_recursive>:
 8013cc8:	4770      	bx	lr

08013cca <__retarget_lock_acquire_recursive>:
 8013cca:	4770      	bx	lr

08013ccc <__retarget_lock_release_recursive>:
 8013ccc:	4770      	bx	lr
	...

08013cd0 <__swhatbuf_r>:
 8013cd0:	b570      	push	{r4, r5, r6, lr}
 8013cd2:	000e      	movs	r6, r1
 8013cd4:	001d      	movs	r5, r3
 8013cd6:	230e      	movs	r3, #14
 8013cd8:	5ec9      	ldrsh	r1, [r1, r3]
 8013cda:	0014      	movs	r4, r2
 8013cdc:	b096      	sub	sp, #88	; 0x58
 8013cde:	2900      	cmp	r1, #0
 8013ce0:	da08      	bge.n	8013cf4 <__swhatbuf_r+0x24>
 8013ce2:	220c      	movs	r2, #12
 8013ce4:	5eb3      	ldrsh	r3, [r6, r2]
 8013ce6:	2200      	movs	r2, #0
 8013ce8:	602a      	str	r2, [r5, #0]
 8013cea:	061b      	lsls	r3, r3, #24
 8013cec:	d411      	bmi.n	8013d12 <__swhatbuf_r+0x42>
 8013cee:	2380      	movs	r3, #128	; 0x80
 8013cf0:	00db      	lsls	r3, r3, #3
 8013cf2:	e00f      	b.n	8013d14 <__swhatbuf_r+0x44>
 8013cf4:	466a      	mov	r2, sp
 8013cf6:	f000 f91b 	bl	8013f30 <_fstat_r>
 8013cfa:	2800      	cmp	r0, #0
 8013cfc:	dbf1      	blt.n	8013ce2 <__swhatbuf_r+0x12>
 8013cfe:	23f0      	movs	r3, #240	; 0xf0
 8013d00:	9901      	ldr	r1, [sp, #4]
 8013d02:	021b      	lsls	r3, r3, #8
 8013d04:	4019      	ands	r1, r3
 8013d06:	4b05      	ldr	r3, [pc, #20]	; (8013d1c <__swhatbuf_r+0x4c>)
 8013d08:	18c9      	adds	r1, r1, r3
 8013d0a:	424b      	negs	r3, r1
 8013d0c:	4159      	adcs	r1, r3
 8013d0e:	6029      	str	r1, [r5, #0]
 8013d10:	e7ed      	b.n	8013cee <__swhatbuf_r+0x1e>
 8013d12:	2340      	movs	r3, #64	; 0x40
 8013d14:	2000      	movs	r0, #0
 8013d16:	6023      	str	r3, [r4, #0]
 8013d18:	b016      	add	sp, #88	; 0x58
 8013d1a:	bd70      	pop	{r4, r5, r6, pc}
 8013d1c:	ffffe000 	.word	0xffffe000

08013d20 <__smakebuf_r>:
 8013d20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013d22:	2602      	movs	r6, #2
 8013d24:	898b      	ldrh	r3, [r1, #12]
 8013d26:	0005      	movs	r5, r0
 8013d28:	000c      	movs	r4, r1
 8013d2a:	4233      	tst	r3, r6
 8013d2c:	d006      	beq.n	8013d3c <__smakebuf_r+0x1c>
 8013d2e:	0023      	movs	r3, r4
 8013d30:	3347      	adds	r3, #71	; 0x47
 8013d32:	6023      	str	r3, [r4, #0]
 8013d34:	6123      	str	r3, [r4, #16]
 8013d36:	2301      	movs	r3, #1
 8013d38:	6163      	str	r3, [r4, #20]
 8013d3a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8013d3c:	466a      	mov	r2, sp
 8013d3e:	ab01      	add	r3, sp, #4
 8013d40:	f7ff ffc6 	bl	8013cd0 <__swhatbuf_r>
 8013d44:	9900      	ldr	r1, [sp, #0]
 8013d46:	0007      	movs	r7, r0
 8013d48:	0028      	movs	r0, r5
 8013d4a:	f7ff f92d 	bl	8012fa8 <_malloc_r>
 8013d4e:	2800      	cmp	r0, #0
 8013d50:	d108      	bne.n	8013d64 <__smakebuf_r+0x44>
 8013d52:	220c      	movs	r2, #12
 8013d54:	5ea3      	ldrsh	r3, [r4, r2]
 8013d56:	059a      	lsls	r2, r3, #22
 8013d58:	d4ef      	bmi.n	8013d3a <__smakebuf_r+0x1a>
 8013d5a:	2203      	movs	r2, #3
 8013d5c:	4393      	bics	r3, r2
 8013d5e:	431e      	orrs	r6, r3
 8013d60:	81a6      	strh	r6, [r4, #12]
 8013d62:	e7e4      	b.n	8013d2e <__smakebuf_r+0xe>
 8013d64:	4b0f      	ldr	r3, [pc, #60]	; (8013da4 <__smakebuf_r+0x84>)
 8013d66:	62ab      	str	r3, [r5, #40]	; 0x28
 8013d68:	2380      	movs	r3, #128	; 0x80
 8013d6a:	89a2      	ldrh	r2, [r4, #12]
 8013d6c:	6020      	str	r0, [r4, #0]
 8013d6e:	4313      	orrs	r3, r2
 8013d70:	81a3      	strh	r3, [r4, #12]
 8013d72:	9b00      	ldr	r3, [sp, #0]
 8013d74:	6120      	str	r0, [r4, #16]
 8013d76:	6163      	str	r3, [r4, #20]
 8013d78:	9b01      	ldr	r3, [sp, #4]
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d00d      	beq.n	8013d9a <__smakebuf_r+0x7a>
 8013d7e:	0028      	movs	r0, r5
 8013d80:	230e      	movs	r3, #14
 8013d82:	5ee1      	ldrsh	r1, [r4, r3]
 8013d84:	f000 f8e6 	bl	8013f54 <_isatty_r>
 8013d88:	2800      	cmp	r0, #0
 8013d8a:	d006      	beq.n	8013d9a <__smakebuf_r+0x7a>
 8013d8c:	2203      	movs	r2, #3
 8013d8e:	89a3      	ldrh	r3, [r4, #12]
 8013d90:	4393      	bics	r3, r2
 8013d92:	001a      	movs	r2, r3
 8013d94:	2301      	movs	r3, #1
 8013d96:	4313      	orrs	r3, r2
 8013d98:	81a3      	strh	r3, [r4, #12]
 8013d9a:	89a0      	ldrh	r0, [r4, #12]
 8013d9c:	4307      	orrs	r7, r0
 8013d9e:	81a7      	strh	r7, [r4, #12]
 8013da0:	e7cb      	b.n	8013d3a <__smakebuf_r+0x1a>
 8013da2:	46c0      	nop			; (mov r8, r8)
 8013da4:	08013b0d 	.word	0x08013b0d

08013da8 <_malloc_usable_size_r>:
 8013da8:	1f0b      	subs	r3, r1, #4
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	1f18      	subs	r0, r3, #4
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	da01      	bge.n	8013db6 <_malloc_usable_size_r+0xe>
 8013db2:	580b      	ldr	r3, [r1, r0]
 8013db4:	18c0      	adds	r0, r0, r3
 8013db6:	4770      	bx	lr

08013db8 <_raise_r>:
 8013db8:	b570      	push	{r4, r5, r6, lr}
 8013dba:	0004      	movs	r4, r0
 8013dbc:	000d      	movs	r5, r1
 8013dbe:	291f      	cmp	r1, #31
 8013dc0:	d904      	bls.n	8013dcc <_raise_r+0x14>
 8013dc2:	2316      	movs	r3, #22
 8013dc4:	6003      	str	r3, [r0, #0]
 8013dc6:	2001      	movs	r0, #1
 8013dc8:	4240      	negs	r0, r0
 8013dca:	bd70      	pop	{r4, r5, r6, pc}
 8013dcc:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d004      	beq.n	8013ddc <_raise_r+0x24>
 8013dd2:	008a      	lsls	r2, r1, #2
 8013dd4:	189b      	adds	r3, r3, r2
 8013dd6:	681a      	ldr	r2, [r3, #0]
 8013dd8:	2a00      	cmp	r2, #0
 8013dda:	d108      	bne.n	8013dee <_raise_r+0x36>
 8013ddc:	0020      	movs	r0, r4
 8013dde:	f000 f831 	bl	8013e44 <_getpid_r>
 8013de2:	002a      	movs	r2, r5
 8013de4:	0001      	movs	r1, r0
 8013de6:	0020      	movs	r0, r4
 8013de8:	f000 f81a 	bl	8013e20 <_kill_r>
 8013dec:	e7ed      	b.n	8013dca <_raise_r+0x12>
 8013dee:	2000      	movs	r0, #0
 8013df0:	2a01      	cmp	r2, #1
 8013df2:	d0ea      	beq.n	8013dca <_raise_r+0x12>
 8013df4:	1c51      	adds	r1, r2, #1
 8013df6:	d103      	bne.n	8013e00 <_raise_r+0x48>
 8013df8:	2316      	movs	r3, #22
 8013dfa:	3001      	adds	r0, #1
 8013dfc:	6023      	str	r3, [r4, #0]
 8013dfe:	e7e4      	b.n	8013dca <_raise_r+0x12>
 8013e00:	2400      	movs	r4, #0
 8013e02:	0028      	movs	r0, r5
 8013e04:	601c      	str	r4, [r3, #0]
 8013e06:	4790      	blx	r2
 8013e08:	0020      	movs	r0, r4
 8013e0a:	e7de      	b.n	8013dca <_raise_r+0x12>

08013e0c <raise>:
 8013e0c:	b510      	push	{r4, lr}
 8013e0e:	4b03      	ldr	r3, [pc, #12]	; (8013e1c <raise+0x10>)
 8013e10:	0001      	movs	r1, r0
 8013e12:	6818      	ldr	r0, [r3, #0]
 8013e14:	f7ff ffd0 	bl	8013db8 <_raise_r>
 8013e18:	bd10      	pop	{r4, pc}
 8013e1a:	46c0      	nop			; (mov r8, r8)
 8013e1c:	2000003c 	.word	0x2000003c

08013e20 <_kill_r>:
 8013e20:	2300      	movs	r3, #0
 8013e22:	b570      	push	{r4, r5, r6, lr}
 8013e24:	4d06      	ldr	r5, [pc, #24]	; (8013e40 <_kill_r+0x20>)
 8013e26:	0004      	movs	r4, r0
 8013e28:	0008      	movs	r0, r1
 8013e2a:	0011      	movs	r1, r2
 8013e2c:	602b      	str	r3, [r5, #0]
 8013e2e:	f7f0 f9bb 	bl	80041a8 <_kill>
 8013e32:	1c43      	adds	r3, r0, #1
 8013e34:	d103      	bne.n	8013e3e <_kill_r+0x1e>
 8013e36:	682b      	ldr	r3, [r5, #0]
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d000      	beq.n	8013e3e <_kill_r+0x1e>
 8013e3c:	6023      	str	r3, [r4, #0]
 8013e3e:	bd70      	pop	{r4, r5, r6, pc}
 8013e40:	20000664 	.word	0x20000664

08013e44 <_getpid_r>:
 8013e44:	b510      	push	{r4, lr}
 8013e46:	f7f0 f9a9 	bl	800419c <_getpid>
 8013e4a:	bd10      	pop	{r4, pc}

08013e4c <__sread>:
 8013e4c:	b570      	push	{r4, r5, r6, lr}
 8013e4e:	000c      	movs	r4, r1
 8013e50:	250e      	movs	r5, #14
 8013e52:	5f49      	ldrsh	r1, [r1, r5]
 8013e54:	f000 f8a4 	bl	8013fa0 <_read_r>
 8013e58:	2800      	cmp	r0, #0
 8013e5a:	db03      	blt.n	8013e64 <__sread+0x18>
 8013e5c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8013e5e:	181b      	adds	r3, r3, r0
 8013e60:	6563      	str	r3, [r4, #84]	; 0x54
 8013e62:	bd70      	pop	{r4, r5, r6, pc}
 8013e64:	89a3      	ldrh	r3, [r4, #12]
 8013e66:	4a02      	ldr	r2, [pc, #8]	; (8013e70 <__sread+0x24>)
 8013e68:	4013      	ands	r3, r2
 8013e6a:	81a3      	strh	r3, [r4, #12]
 8013e6c:	e7f9      	b.n	8013e62 <__sread+0x16>
 8013e6e:	46c0      	nop			; (mov r8, r8)
 8013e70:	ffffefff 	.word	0xffffefff

08013e74 <__swrite>:
 8013e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e76:	001f      	movs	r7, r3
 8013e78:	898b      	ldrh	r3, [r1, #12]
 8013e7a:	0005      	movs	r5, r0
 8013e7c:	000c      	movs	r4, r1
 8013e7e:	0016      	movs	r6, r2
 8013e80:	05db      	lsls	r3, r3, #23
 8013e82:	d505      	bpl.n	8013e90 <__swrite+0x1c>
 8013e84:	230e      	movs	r3, #14
 8013e86:	5ec9      	ldrsh	r1, [r1, r3]
 8013e88:	2200      	movs	r2, #0
 8013e8a:	2302      	movs	r3, #2
 8013e8c:	f000 f874 	bl	8013f78 <_lseek_r>
 8013e90:	89a3      	ldrh	r3, [r4, #12]
 8013e92:	4a05      	ldr	r2, [pc, #20]	; (8013ea8 <__swrite+0x34>)
 8013e94:	0028      	movs	r0, r5
 8013e96:	4013      	ands	r3, r2
 8013e98:	81a3      	strh	r3, [r4, #12]
 8013e9a:	0032      	movs	r2, r6
 8013e9c:	230e      	movs	r3, #14
 8013e9e:	5ee1      	ldrsh	r1, [r4, r3]
 8013ea0:	003b      	movs	r3, r7
 8013ea2:	f000 f81f 	bl	8013ee4 <_write_r>
 8013ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ea8:	ffffefff 	.word	0xffffefff

08013eac <__sseek>:
 8013eac:	b570      	push	{r4, r5, r6, lr}
 8013eae:	000c      	movs	r4, r1
 8013eb0:	250e      	movs	r5, #14
 8013eb2:	5f49      	ldrsh	r1, [r1, r5]
 8013eb4:	f000 f860 	bl	8013f78 <_lseek_r>
 8013eb8:	89a3      	ldrh	r3, [r4, #12]
 8013eba:	1c42      	adds	r2, r0, #1
 8013ebc:	d103      	bne.n	8013ec6 <__sseek+0x1a>
 8013ebe:	4a05      	ldr	r2, [pc, #20]	; (8013ed4 <__sseek+0x28>)
 8013ec0:	4013      	ands	r3, r2
 8013ec2:	81a3      	strh	r3, [r4, #12]
 8013ec4:	bd70      	pop	{r4, r5, r6, pc}
 8013ec6:	2280      	movs	r2, #128	; 0x80
 8013ec8:	0152      	lsls	r2, r2, #5
 8013eca:	4313      	orrs	r3, r2
 8013ecc:	81a3      	strh	r3, [r4, #12]
 8013ece:	6560      	str	r0, [r4, #84]	; 0x54
 8013ed0:	e7f8      	b.n	8013ec4 <__sseek+0x18>
 8013ed2:	46c0      	nop			; (mov r8, r8)
 8013ed4:	ffffefff 	.word	0xffffefff

08013ed8 <__sclose>:
 8013ed8:	b510      	push	{r4, lr}
 8013eda:	230e      	movs	r3, #14
 8013edc:	5ec9      	ldrsh	r1, [r1, r3]
 8013ede:	f000 f815 	bl	8013f0c <_close_r>
 8013ee2:	bd10      	pop	{r4, pc}

08013ee4 <_write_r>:
 8013ee4:	b570      	push	{r4, r5, r6, lr}
 8013ee6:	0004      	movs	r4, r0
 8013ee8:	0008      	movs	r0, r1
 8013eea:	0011      	movs	r1, r2
 8013eec:	001a      	movs	r2, r3
 8013eee:	2300      	movs	r3, #0
 8013ef0:	4d05      	ldr	r5, [pc, #20]	; (8013f08 <_write_r+0x24>)
 8013ef2:	602b      	str	r3, [r5, #0]
 8013ef4:	f7f0 f991 	bl	800421a <_write>
 8013ef8:	1c43      	adds	r3, r0, #1
 8013efa:	d103      	bne.n	8013f04 <_write_r+0x20>
 8013efc:	682b      	ldr	r3, [r5, #0]
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d000      	beq.n	8013f04 <_write_r+0x20>
 8013f02:	6023      	str	r3, [r4, #0]
 8013f04:	bd70      	pop	{r4, r5, r6, pc}
 8013f06:	46c0      	nop			; (mov r8, r8)
 8013f08:	20000664 	.word	0x20000664

08013f0c <_close_r>:
 8013f0c:	2300      	movs	r3, #0
 8013f0e:	b570      	push	{r4, r5, r6, lr}
 8013f10:	4d06      	ldr	r5, [pc, #24]	; (8013f2c <_close_r+0x20>)
 8013f12:	0004      	movs	r4, r0
 8013f14:	0008      	movs	r0, r1
 8013f16:	602b      	str	r3, [r5, #0]
 8013f18:	f7f0 f99b 	bl	8004252 <_close>
 8013f1c:	1c43      	adds	r3, r0, #1
 8013f1e:	d103      	bne.n	8013f28 <_close_r+0x1c>
 8013f20:	682b      	ldr	r3, [r5, #0]
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d000      	beq.n	8013f28 <_close_r+0x1c>
 8013f26:	6023      	str	r3, [r4, #0]
 8013f28:	bd70      	pop	{r4, r5, r6, pc}
 8013f2a:	46c0      	nop			; (mov r8, r8)
 8013f2c:	20000664 	.word	0x20000664

08013f30 <_fstat_r>:
 8013f30:	2300      	movs	r3, #0
 8013f32:	b570      	push	{r4, r5, r6, lr}
 8013f34:	4d06      	ldr	r5, [pc, #24]	; (8013f50 <_fstat_r+0x20>)
 8013f36:	0004      	movs	r4, r0
 8013f38:	0008      	movs	r0, r1
 8013f3a:	0011      	movs	r1, r2
 8013f3c:	602b      	str	r3, [r5, #0]
 8013f3e:	f7f0 f992 	bl	8004266 <_fstat>
 8013f42:	1c43      	adds	r3, r0, #1
 8013f44:	d103      	bne.n	8013f4e <_fstat_r+0x1e>
 8013f46:	682b      	ldr	r3, [r5, #0]
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d000      	beq.n	8013f4e <_fstat_r+0x1e>
 8013f4c:	6023      	str	r3, [r4, #0]
 8013f4e:	bd70      	pop	{r4, r5, r6, pc}
 8013f50:	20000664 	.word	0x20000664

08013f54 <_isatty_r>:
 8013f54:	2300      	movs	r3, #0
 8013f56:	b570      	push	{r4, r5, r6, lr}
 8013f58:	4d06      	ldr	r5, [pc, #24]	; (8013f74 <_isatty_r+0x20>)
 8013f5a:	0004      	movs	r4, r0
 8013f5c:	0008      	movs	r0, r1
 8013f5e:	602b      	str	r3, [r5, #0]
 8013f60:	f7f0 f98f 	bl	8004282 <_isatty>
 8013f64:	1c43      	adds	r3, r0, #1
 8013f66:	d103      	bne.n	8013f70 <_isatty_r+0x1c>
 8013f68:	682b      	ldr	r3, [r5, #0]
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d000      	beq.n	8013f70 <_isatty_r+0x1c>
 8013f6e:	6023      	str	r3, [r4, #0]
 8013f70:	bd70      	pop	{r4, r5, r6, pc}
 8013f72:	46c0      	nop			; (mov r8, r8)
 8013f74:	20000664 	.word	0x20000664

08013f78 <_lseek_r>:
 8013f78:	b570      	push	{r4, r5, r6, lr}
 8013f7a:	0004      	movs	r4, r0
 8013f7c:	0008      	movs	r0, r1
 8013f7e:	0011      	movs	r1, r2
 8013f80:	001a      	movs	r2, r3
 8013f82:	2300      	movs	r3, #0
 8013f84:	4d05      	ldr	r5, [pc, #20]	; (8013f9c <_lseek_r+0x24>)
 8013f86:	602b      	str	r3, [r5, #0]
 8013f88:	f7f0 f984 	bl	8004294 <_lseek>
 8013f8c:	1c43      	adds	r3, r0, #1
 8013f8e:	d103      	bne.n	8013f98 <_lseek_r+0x20>
 8013f90:	682b      	ldr	r3, [r5, #0]
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d000      	beq.n	8013f98 <_lseek_r+0x20>
 8013f96:	6023      	str	r3, [r4, #0]
 8013f98:	bd70      	pop	{r4, r5, r6, pc}
 8013f9a:	46c0      	nop			; (mov r8, r8)
 8013f9c:	20000664 	.word	0x20000664

08013fa0 <_read_r>:
 8013fa0:	b570      	push	{r4, r5, r6, lr}
 8013fa2:	0004      	movs	r4, r0
 8013fa4:	0008      	movs	r0, r1
 8013fa6:	0011      	movs	r1, r2
 8013fa8:	001a      	movs	r2, r3
 8013faa:	2300      	movs	r3, #0
 8013fac:	4d05      	ldr	r5, [pc, #20]	; (8013fc4 <_read_r+0x24>)
 8013fae:	602b      	str	r3, [r5, #0]
 8013fb0:	f7f0 f916 	bl	80041e0 <_read>
 8013fb4:	1c43      	adds	r3, r0, #1
 8013fb6:	d103      	bne.n	8013fc0 <_read_r+0x20>
 8013fb8:	682b      	ldr	r3, [r5, #0]
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d000      	beq.n	8013fc0 <_read_r+0x20>
 8013fbe:	6023      	str	r3, [r4, #0]
 8013fc0:	bd70      	pop	{r4, r5, r6, pc}
 8013fc2:	46c0      	nop			; (mov r8, r8)
 8013fc4:	20000664 	.word	0x20000664

08013fc8 <ceilf>:
 8013fc8:	b570      	push	{r4, r5, r6, lr}
 8013fca:	0045      	lsls	r5, r0, #1
 8013fcc:	086e      	lsrs	r6, r5, #1
 8013fce:	0e2d      	lsrs	r5, r5, #24
 8013fd0:	3d7f      	subs	r5, #127	; 0x7f
 8013fd2:	0004      	movs	r4, r0
 8013fd4:	2d16      	cmp	r5, #22
 8013fd6:	dc25      	bgt.n	8014024 <ceilf+0x5c>
 8013fd8:	2d00      	cmp	r5, #0
 8013fda:	da0f      	bge.n	8013ffc <ceilf+0x34>
 8013fdc:	4917      	ldr	r1, [pc, #92]	; (801403c <ceilf+0x74>)
 8013fde:	f7ec fab5 	bl	800054c <__aeabi_fadd>
 8013fe2:	2100      	movs	r1, #0
 8013fe4:	f7ec fa86 	bl	80004f4 <__aeabi_fcmpgt>
 8013fe8:	2800      	cmp	r0, #0
 8013fea:	d005      	beq.n	8013ff8 <ceilf+0x30>
 8013fec:	2c00      	cmp	r4, #0
 8013fee:	db21      	blt.n	8014034 <ceilf+0x6c>
 8013ff0:	2e00      	cmp	r6, #0
 8013ff2:	d001      	beq.n	8013ff8 <ceilf+0x30>
 8013ff4:	24fe      	movs	r4, #254	; 0xfe
 8013ff6:	05a4      	lsls	r4, r4, #22
 8013ff8:	1c20      	adds	r0, r4, #0
 8013ffa:	e01a      	b.n	8014032 <ceilf+0x6a>
 8013ffc:	4e10      	ldr	r6, [pc, #64]	; (8014040 <ceilf+0x78>)
 8013ffe:	412e      	asrs	r6, r5
 8014000:	4206      	tst	r6, r0
 8014002:	d016      	beq.n	8014032 <ceilf+0x6a>
 8014004:	490d      	ldr	r1, [pc, #52]	; (801403c <ceilf+0x74>)
 8014006:	f7ec faa1 	bl	800054c <__aeabi_fadd>
 801400a:	2100      	movs	r1, #0
 801400c:	f7ec fa72 	bl	80004f4 <__aeabi_fcmpgt>
 8014010:	2800      	cmp	r0, #0
 8014012:	d0f1      	beq.n	8013ff8 <ceilf+0x30>
 8014014:	2c00      	cmp	r4, #0
 8014016:	dd03      	ble.n	8014020 <ceilf+0x58>
 8014018:	2380      	movs	r3, #128	; 0x80
 801401a:	041b      	lsls	r3, r3, #16
 801401c:	412b      	asrs	r3, r5
 801401e:	18e4      	adds	r4, r4, r3
 8014020:	43b4      	bics	r4, r6
 8014022:	e7e9      	b.n	8013ff8 <ceilf+0x30>
 8014024:	23ff      	movs	r3, #255	; 0xff
 8014026:	05db      	lsls	r3, r3, #23
 8014028:	429e      	cmp	r6, r3
 801402a:	d302      	bcc.n	8014032 <ceilf+0x6a>
 801402c:	1c01      	adds	r1, r0, #0
 801402e:	f7ec fa8d 	bl	800054c <__aeabi_fadd>
 8014032:	bd70      	pop	{r4, r5, r6, pc}
 8014034:	2480      	movs	r4, #128	; 0x80
 8014036:	0624      	lsls	r4, r4, #24
 8014038:	e7de      	b.n	8013ff8 <ceilf+0x30>
 801403a:	46c0      	nop			; (mov r8, r8)
 801403c:	7149f2ca 	.word	0x7149f2ca
 8014040:	007fffff 	.word	0x007fffff

08014044 <floorf>:
 8014044:	b570      	push	{r4, r5, r6, lr}
 8014046:	0045      	lsls	r5, r0, #1
 8014048:	086e      	lsrs	r6, r5, #1
 801404a:	0e2d      	lsrs	r5, r5, #24
 801404c:	3d7f      	subs	r5, #127	; 0x7f
 801404e:	0004      	movs	r4, r0
 8014050:	2d16      	cmp	r5, #22
 8014052:	dc24      	bgt.n	801409e <floorf+0x5a>
 8014054:	2d00      	cmp	r5, #0
 8014056:	da0e      	bge.n	8014076 <floorf+0x32>
 8014058:	4916      	ldr	r1, [pc, #88]	; (80140b4 <floorf+0x70>)
 801405a:	f7ec fa77 	bl	800054c <__aeabi_fadd>
 801405e:	2100      	movs	r1, #0
 8014060:	f7ec fa48 	bl	80004f4 <__aeabi_fcmpgt>
 8014064:	2800      	cmp	r0, #0
 8014066:	d004      	beq.n	8014072 <floorf+0x2e>
 8014068:	2c00      	cmp	r4, #0
 801406a:	da20      	bge.n	80140ae <floorf+0x6a>
 801406c:	2e00      	cmp	r6, #0
 801406e:	d000      	beq.n	8014072 <floorf+0x2e>
 8014070:	4c11      	ldr	r4, [pc, #68]	; (80140b8 <floorf+0x74>)
 8014072:	1c20      	adds	r0, r4, #0
 8014074:	e01a      	b.n	80140ac <floorf+0x68>
 8014076:	4e11      	ldr	r6, [pc, #68]	; (80140bc <floorf+0x78>)
 8014078:	412e      	asrs	r6, r5
 801407a:	4206      	tst	r6, r0
 801407c:	d016      	beq.n	80140ac <floorf+0x68>
 801407e:	490d      	ldr	r1, [pc, #52]	; (80140b4 <floorf+0x70>)
 8014080:	f7ec fa64 	bl	800054c <__aeabi_fadd>
 8014084:	2100      	movs	r1, #0
 8014086:	f7ec fa35 	bl	80004f4 <__aeabi_fcmpgt>
 801408a:	2800      	cmp	r0, #0
 801408c:	d0f1      	beq.n	8014072 <floorf+0x2e>
 801408e:	2c00      	cmp	r4, #0
 8014090:	da03      	bge.n	801409a <floorf+0x56>
 8014092:	2380      	movs	r3, #128	; 0x80
 8014094:	041b      	lsls	r3, r3, #16
 8014096:	412b      	asrs	r3, r5
 8014098:	18e4      	adds	r4, r4, r3
 801409a:	43b4      	bics	r4, r6
 801409c:	e7e9      	b.n	8014072 <floorf+0x2e>
 801409e:	23ff      	movs	r3, #255	; 0xff
 80140a0:	05db      	lsls	r3, r3, #23
 80140a2:	429e      	cmp	r6, r3
 80140a4:	d302      	bcc.n	80140ac <floorf+0x68>
 80140a6:	1c01      	adds	r1, r0, #0
 80140a8:	f7ec fa50 	bl	800054c <__aeabi_fadd>
 80140ac:	bd70      	pop	{r4, r5, r6, pc}
 80140ae:	2400      	movs	r4, #0
 80140b0:	e7df      	b.n	8014072 <floorf+0x2e>
 80140b2:	46c0      	nop			; (mov r8, r8)
 80140b4:	7149f2ca 	.word	0x7149f2ca
 80140b8:	bf800000 	.word	0xbf800000
 80140bc:	007fffff 	.word	0x007fffff

080140c0 <logf>:
 80140c0:	b570      	push	{r4, r5, r6, lr}
 80140c2:	1c05      	adds	r5, r0, #0
 80140c4:	f000 f87c 	bl	80141c0 <__ieee754_logf>
 80140c8:	1c29      	adds	r1, r5, #0
 80140ca:	1c04      	adds	r4, r0, #0
 80140cc:	1c28      	adds	r0, r5, #0
 80140ce:	f7ed f877 	bl	80011c0 <__aeabi_fcmpun>
 80140d2:	2800      	cmp	r0, #0
 80140d4:	d110      	bne.n	80140f8 <logf+0x38>
 80140d6:	2100      	movs	r1, #0
 80140d8:	1c28      	adds	r0, r5, #0
 80140da:	f7ec fa0b 	bl	80004f4 <__aeabi_fcmpgt>
 80140de:	2800      	cmp	r0, #0
 80140e0:	d10a      	bne.n	80140f8 <logf+0x38>
 80140e2:	2100      	movs	r1, #0
 80140e4:	1c28      	adds	r0, r5, #0
 80140e6:	f7ec f9eb 	bl	80004c0 <__aeabi_fcmpeq>
 80140ea:	2800      	cmp	r0, #0
 80140ec:	d006      	beq.n	80140fc <logf+0x3c>
 80140ee:	f7fc ff93 	bl	8011018 <__errno>
 80140f2:	2322      	movs	r3, #34	; 0x22
 80140f4:	4c06      	ldr	r4, [pc, #24]	; (8014110 <logf+0x50>)
 80140f6:	6003      	str	r3, [r0, #0]
 80140f8:	1c20      	adds	r0, r4, #0
 80140fa:	bd70      	pop	{r4, r5, r6, pc}
 80140fc:	f7fc ff8c 	bl	8011018 <__errno>
 8014100:	2321      	movs	r3, #33	; 0x21
 8014102:	6003      	str	r3, [r0, #0]
 8014104:	4803      	ldr	r0, [pc, #12]	; (8014114 <logf+0x54>)
 8014106:	f000 fd7d 	bl	8014c04 <nanf>
 801410a:	1c04      	adds	r4, r0, #0
 801410c:	e7f4      	b.n	80140f8 <logf+0x38>
 801410e:	46c0      	nop			; (mov r8, r8)
 8014110:	ff800000 	.word	0xff800000
 8014114:	080154e8 	.word	0x080154e8

08014118 <powf>:
 8014118:	b570      	push	{r4, r5, r6, lr}
 801411a:	1c0c      	adds	r4, r1, #0
 801411c:	1c06      	adds	r6, r0, #0
 801411e:	f000 f985 	bl	801442c <__ieee754_powf>
 8014122:	1c21      	adds	r1, r4, #0
 8014124:	1c05      	adds	r5, r0, #0
 8014126:	1c20      	adds	r0, r4, #0
 8014128:	f7ed f84a 	bl	80011c0 <__aeabi_fcmpun>
 801412c:	2800      	cmp	r0, #0
 801412e:	d133      	bne.n	8014198 <powf+0x80>
 8014130:	2100      	movs	r1, #0
 8014132:	1c30      	adds	r0, r6, #0
 8014134:	f7ec f9c4 	bl	80004c0 <__aeabi_fcmpeq>
 8014138:	2800      	cmp	r0, #0
 801413a:	d014      	beq.n	8014166 <powf+0x4e>
 801413c:	2100      	movs	r1, #0
 801413e:	1c20      	adds	r0, r4, #0
 8014140:	f7ec f9be 	bl	80004c0 <__aeabi_fcmpeq>
 8014144:	2800      	cmp	r0, #0
 8014146:	d138      	bne.n	80141ba <powf+0xa2>
 8014148:	1c20      	adds	r0, r4, #0
 801414a:	f000 fd51 	bl	8014bf0 <finitef>
 801414e:	2800      	cmp	r0, #0
 8014150:	d022      	beq.n	8014198 <powf+0x80>
 8014152:	2100      	movs	r1, #0
 8014154:	1c20      	adds	r0, r4, #0
 8014156:	f7ec f9b9 	bl	80004cc <__aeabi_fcmplt>
 801415a:	2800      	cmp	r0, #0
 801415c:	d01c      	beq.n	8014198 <powf+0x80>
 801415e:	f7fc ff5b 	bl	8011018 <__errno>
 8014162:	2322      	movs	r3, #34	; 0x22
 8014164:	e017      	b.n	8014196 <powf+0x7e>
 8014166:	1c28      	adds	r0, r5, #0
 8014168:	f000 fd42 	bl	8014bf0 <finitef>
 801416c:	2800      	cmp	r0, #0
 801416e:	d115      	bne.n	801419c <powf+0x84>
 8014170:	1c30      	adds	r0, r6, #0
 8014172:	f000 fd3d 	bl	8014bf0 <finitef>
 8014176:	2800      	cmp	r0, #0
 8014178:	d010      	beq.n	801419c <powf+0x84>
 801417a:	1c20      	adds	r0, r4, #0
 801417c:	f000 fd38 	bl	8014bf0 <finitef>
 8014180:	2800      	cmp	r0, #0
 8014182:	d00b      	beq.n	801419c <powf+0x84>
 8014184:	1c29      	adds	r1, r5, #0
 8014186:	1c28      	adds	r0, r5, #0
 8014188:	f7ed f81a 	bl	80011c0 <__aeabi_fcmpun>
 801418c:	2800      	cmp	r0, #0
 801418e:	d0e6      	beq.n	801415e <powf+0x46>
 8014190:	f7fc ff42 	bl	8011018 <__errno>
 8014194:	2321      	movs	r3, #33	; 0x21
 8014196:	6003      	str	r3, [r0, #0]
 8014198:	1c28      	adds	r0, r5, #0
 801419a:	bd70      	pop	{r4, r5, r6, pc}
 801419c:	2100      	movs	r1, #0
 801419e:	1c28      	adds	r0, r5, #0
 80141a0:	f7ec f98e 	bl	80004c0 <__aeabi_fcmpeq>
 80141a4:	2800      	cmp	r0, #0
 80141a6:	d0f7      	beq.n	8014198 <powf+0x80>
 80141a8:	1c30      	adds	r0, r6, #0
 80141aa:	f000 fd21 	bl	8014bf0 <finitef>
 80141ae:	2800      	cmp	r0, #0
 80141b0:	d0f2      	beq.n	8014198 <powf+0x80>
 80141b2:	1c20      	adds	r0, r4, #0
 80141b4:	f000 fd1c 	bl	8014bf0 <finitef>
 80141b8:	e7cf      	b.n	801415a <powf+0x42>
 80141ba:	25fe      	movs	r5, #254	; 0xfe
 80141bc:	05ad      	lsls	r5, r5, #22
 80141be:	e7eb      	b.n	8014198 <powf+0x80>

080141c0 <__ieee754_logf>:
 80141c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80141c2:	0003      	movs	r3, r0
 80141c4:	b085      	sub	sp, #20
 80141c6:	0042      	lsls	r2, r0, #1
 80141c8:	d106      	bne.n	80141d8 <__ieee754_logf+0x18>
 80141ca:	20cc      	movs	r0, #204	; 0xcc
 80141cc:	2100      	movs	r1, #0
 80141ce:	0600      	lsls	r0, r0, #24
 80141d0:	f7ec fb5a 	bl	8000888 <__aeabi_fdiv>
 80141d4:	b005      	add	sp, #20
 80141d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80141d8:	2800      	cmp	r0, #0
 80141da:	da04      	bge.n	80141e6 <__ieee754_logf+0x26>
 80141dc:	1c01      	adds	r1, r0, #0
 80141de:	f7ec fe41 	bl	8000e64 <__aeabi_fsub>
 80141e2:	2100      	movs	r1, #0
 80141e4:	e7f4      	b.n	80141d0 <__ieee754_logf+0x10>
 80141e6:	22ff      	movs	r2, #255	; 0xff
 80141e8:	1c01      	adds	r1, r0, #0
 80141ea:	05d2      	lsls	r2, r2, #23
 80141ec:	4290      	cmp	r0, r2
 80141ee:	da3d      	bge.n	801426c <__ieee754_logf+0xac>
 80141f0:	2180      	movs	r1, #128	; 0x80
 80141f2:	2200      	movs	r2, #0
 80141f4:	0409      	lsls	r1, r1, #16
 80141f6:	4288      	cmp	r0, r1
 80141f8:	da06      	bge.n	8014208 <__ieee754_logf+0x48>
 80141fa:	2198      	movs	r1, #152	; 0x98
 80141fc:	05c9      	lsls	r1, r1, #23
 80141fe:	f7ec fd0b 	bl	8000c18 <__aeabi_fmul>
 8014202:	2219      	movs	r2, #25
 8014204:	0003      	movs	r3, r0
 8014206:	4252      	negs	r2, r2
 8014208:	15dd      	asrs	r5, r3, #23
 801420a:	3d7f      	subs	r5, #127	; 0x7f
 801420c:	18ad      	adds	r5, r5, r2
 801420e:	025b      	lsls	r3, r3, #9
 8014210:	4a78      	ldr	r2, [pc, #480]	; (80143f4 <__ieee754_logf+0x234>)
 8014212:	0a5b      	lsrs	r3, r3, #9
 8014214:	1898      	adds	r0, r3, r2
 8014216:	9300      	str	r3, [sp, #0]
 8014218:	2380      	movs	r3, #128	; 0x80
 801421a:	041b      	lsls	r3, r3, #16
 801421c:	4003      	ands	r3, r0
 801421e:	20fe      	movs	r0, #254	; 0xfe
 8014220:	21fe      	movs	r1, #254	; 0xfe
 8014222:	0580      	lsls	r0, r0, #22
 8014224:	15da      	asrs	r2, r3, #23
 8014226:	4058      	eors	r0, r3
 8014228:	9b00      	ldr	r3, [sp, #0]
 801422a:	0589      	lsls	r1, r1, #22
 801422c:	4318      	orrs	r0, r3
 801422e:	1955      	adds	r5, r2, r5
 8014230:	f7ec fe18 	bl	8000e64 <__aeabi_fsub>
 8014234:	9a00      	ldr	r2, [sp, #0]
 8014236:	4b70      	ldr	r3, [pc, #448]	; (80143f8 <__ieee754_logf+0x238>)
 8014238:	320f      	adds	r2, #15
 801423a:	1c04      	adds	r4, r0, #0
 801423c:	421a      	tst	r2, r3
 801423e:	d147      	bne.n	80142d0 <__ieee754_logf+0x110>
 8014240:	2100      	movs	r1, #0
 8014242:	f7ec f93d 	bl	80004c0 <__aeabi_fcmpeq>
 8014246:	2800      	cmp	r0, #0
 8014248:	d013      	beq.n	8014272 <__ieee754_logf+0xb2>
 801424a:	2000      	movs	r0, #0
 801424c:	2d00      	cmp	r5, #0
 801424e:	d0c1      	beq.n	80141d4 <__ieee754_logf+0x14>
 8014250:	0028      	movs	r0, r5
 8014252:	f7ec ffeb 	bl	800122c <__aeabi_i2f>
 8014256:	4969      	ldr	r1, [pc, #420]	; (80143fc <__ieee754_logf+0x23c>)
 8014258:	1c04      	adds	r4, r0, #0
 801425a:	f7ec fcdd 	bl	8000c18 <__aeabi_fmul>
 801425e:	4968      	ldr	r1, [pc, #416]	; (8014400 <__ieee754_logf+0x240>)
 8014260:	1c05      	adds	r5, r0, #0
 8014262:	1c20      	adds	r0, r4, #0
 8014264:	f7ec fcd8 	bl	8000c18 <__aeabi_fmul>
 8014268:	1c01      	adds	r1, r0, #0
 801426a:	1c28      	adds	r0, r5, #0
 801426c:	f7ec f96e 	bl	800054c <__aeabi_fadd>
 8014270:	e7b0      	b.n	80141d4 <__ieee754_logf+0x14>
 8014272:	4964      	ldr	r1, [pc, #400]	; (8014404 <__ieee754_logf+0x244>)
 8014274:	1c20      	adds	r0, r4, #0
 8014276:	f7ec fccf 	bl	8000c18 <__aeabi_fmul>
 801427a:	1c01      	adds	r1, r0, #0
 801427c:	20fc      	movs	r0, #252	; 0xfc
 801427e:	0580      	lsls	r0, r0, #22
 8014280:	f7ec fdf0 	bl	8000e64 <__aeabi_fsub>
 8014284:	1c21      	adds	r1, r4, #0
 8014286:	1c06      	adds	r6, r0, #0
 8014288:	1c20      	adds	r0, r4, #0
 801428a:	f7ec fcc5 	bl	8000c18 <__aeabi_fmul>
 801428e:	1c01      	adds	r1, r0, #0
 8014290:	1c30      	adds	r0, r6, #0
 8014292:	f7ec fcc1 	bl	8000c18 <__aeabi_fmul>
 8014296:	1c06      	adds	r6, r0, #0
 8014298:	2d00      	cmp	r5, #0
 801429a:	d101      	bne.n	80142a0 <__ieee754_logf+0xe0>
 801429c:	1c31      	adds	r1, r6, #0
 801429e:	e07c      	b.n	801439a <__ieee754_logf+0x1da>
 80142a0:	0028      	movs	r0, r5
 80142a2:	f7ec ffc3 	bl	800122c <__aeabi_i2f>
 80142a6:	4955      	ldr	r1, [pc, #340]	; (80143fc <__ieee754_logf+0x23c>)
 80142a8:	1c05      	adds	r5, r0, #0
 80142aa:	f7ec fcb5 	bl	8000c18 <__aeabi_fmul>
 80142ae:	4954      	ldr	r1, [pc, #336]	; (8014400 <__ieee754_logf+0x240>)
 80142b0:	1c07      	adds	r7, r0, #0
 80142b2:	1c28      	adds	r0, r5, #0
 80142b4:	f7ec fcb0 	bl	8000c18 <__aeabi_fmul>
 80142b8:	1c01      	adds	r1, r0, #0
 80142ba:	1c30      	adds	r0, r6, #0
 80142bc:	f7ec fdd2 	bl	8000e64 <__aeabi_fsub>
 80142c0:	1c21      	adds	r1, r4, #0
 80142c2:	f7ec fdcf 	bl	8000e64 <__aeabi_fsub>
 80142c6:	1c01      	adds	r1, r0, #0
 80142c8:	1c38      	adds	r0, r7, #0
 80142ca:	f7ec fdcb 	bl	8000e64 <__aeabi_fsub>
 80142ce:	e781      	b.n	80141d4 <__ieee754_logf+0x14>
 80142d0:	2180      	movs	r1, #128	; 0x80
 80142d2:	05c9      	lsls	r1, r1, #23
 80142d4:	f7ec f93a 	bl	800054c <__aeabi_fadd>
 80142d8:	1c01      	adds	r1, r0, #0
 80142da:	1c20      	adds	r0, r4, #0
 80142dc:	f7ec fad4 	bl	8000888 <__aeabi_fdiv>
 80142e0:	9001      	str	r0, [sp, #4]
 80142e2:	0028      	movs	r0, r5
 80142e4:	f7ec ffa2 	bl	800122c <__aeabi_i2f>
 80142e8:	9901      	ldr	r1, [sp, #4]
 80142ea:	9002      	str	r0, [sp, #8]
 80142ec:	1c08      	adds	r0, r1, #0
 80142ee:	f7ec fc93 	bl	8000c18 <__aeabi_fmul>
 80142f2:	4a45      	ldr	r2, [pc, #276]	; (8014408 <__ieee754_logf+0x248>)
 80142f4:	9b00      	ldr	r3, [sp, #0]
 80142f6:	4694      	mov	ip, r2
 80142f8:	1c01      	adds	r1, r0, #0
 80142fa:	4463      	add	r3, ip
 80142fc:	9303      	str	r3, [sp, #12]
 80142fe:	1c07      	adds	r7, r0, #0
 8014300:	f7ec fc8a 	bl	8000c18 <__aeabi_fmul>
 8014304:	4941      	ldr	r1, [pc, #260]	; (801440c <__ieee754_logf+0x24c>)
 8014306:	1c06      	adds	r6, r0, #0
 8014308:	f7ec fc86 	bl	8000c18 <__aeabi_fmul>
 801430c:	4940      	ldr	r1, [pc, #256]	; (8014410 <__ieee754_logf+0x250>)
 801430e:	f7ec f91d 	bl	800054c <__aeabi_fadd>
 8014312:	1c31      	adds	r1, r6, #0
 8014314:	f7ec fc80 	bl	8000c18 <__aeabi_fmul>
 8014318:	493e      	ldr	r1, [pc, #248]	; (8014414 <__ieee754_logf+0x254>)
 801431a:	f7ec f917 	bl	800054c <__aeabi_fadd>
 801431e:	1c31      	adds	r1, r6, #0
 8014320:	f7ec fc7a 	bl	8000c18 <__aeabi_fmul>
 8014324:	493c      	ldr	r1, [pc, #240]	; (8014418 <__ieee754_logf+0x258>)
 8014326:	f7ec f911 	bl	800054c <__aeabi_fadd>
 801432a:	1c39      	adds	r1, r7, #0
 801432c:	f7ec fc74 	bl	8000c18 <__aeabi_fmul>
 8014330:	493a      	ldr	r1, [pc, #232]	; (801441c <__ieee754_logf+0x25c>)
 8014332:	1c07      	adds	r7, r0, #0
 8014334:	1c30      	adds	r0, r6, #0
 8014336:	f7ec fc6f 	bl	8000c18 <__aeabi_fmul>
 801433a:	4939      	ldr	r1, [pc, #228]	; (8014420 <__ieee754_logf+0x260>)
 801433c:	f7ec f906 	bl	800054c <__aeabi_fadd>
 8014340:	1c31      	adds	r1, r6, #0
 8014342:	f7ec fc69 	bl	8000c18 <__aeabi_fmul>
 8014346:	4937      	ldr	r1, [pc, #220]	; (8014424 <__ieee754_logf+0x264>)
 8014348:	f7ec f900 	bl	800054c <__aeabi_fadd>
 801434c:	1c31      	adds	r1, r6, #0
 801434e:	f7ec fc63 	bl	8000c18 <__aeabi_fmul>
 8014352:	1c01      	adds	r1, r0, #0
 8014354:	1c38      	adds	r0, r7, #0
 8014356:	f7ec f8f9 	bl	800054c <__aeabi_fadd>
 801435a:	9b00      	ldr	r3, [sp, #0]
 801435c:	1c07      	adds	r7, r0, #0
 801435e:	4832      	ldr	r0, [pc, #200]	; (8014428 <__ieee754_logf+0x268>)
 8014360:	1ac0      	subs	r0, r0, r3
 8014362:	9b03      	ldr	r3, [sp, #12]
 8014364:	4318      	orrs	r0, r3
 8014366:	2800      	cmp	r0, #0
 8014368:	dd2f      	ble.n	80143ca <__ieee754_logf+0x20a>
 801436a:	21fc      	movs	r1, #252	; 0xfc
 801436c:	1c20      	adds	r0, r4, #0
 801436e:	0589      	lsls	r1, r1, #22
 8014370:	f7ec fc52 	bl	8000c18 <__aeabi_fmul>
 8014374:	1c21      	adds	r1, r4, #0
 8014376:	f7ec fc4f 	bl	8000c18 <__aeabi_fmul>
 801437a:	1c01      	adds	r1, r0, #0
 801437c:	1c06      	adds	r6, r0, #0
 801437e:	1c38      	adds	r0, r7, #0
 8014380:	f7ec f8e4 	bl	800054c <__aeabi_fadd>
 8014384:	9901      	ldr	r1, [sp, #4]
 8014386:	f7ec fc47 	bl	8000c18 <__aeabi_fmul>
 801438a:	1c07      	adds	r7, r0, #0
 801438c:	2d00      	cmp	r5, #0
 801438e:	d106      	bne.n	801439e <__ieee754_logf+0x1de>
 8014390:	1c01      	adds	r1, r0, #0
 8014392:	1c30      	adds	r0, r6, #0
 8014394:	f7ec fd66 	bl	8000e64 <__aeabi_fsub>
 8014398:	1c01      	adds	r1, r0, #0
 801439a:	1c20      	adds	r0, r4, #0
 801439c:	e795      	b.n	80142ca <__ieee754_logf+0x10a>
 801439e:	4917      	ldr	r1, [pc, #92]	; (80143fc <__ieee754_logf+0x23c>)
 80143a0:	9802      	ldr	r0, [sp, #8]
 80143a2:	f7ec fc39 	bl	8000c18 <__aeabi_fmul>
 80143a6:	4916      	ldr	r1, [pc, #88]	; (8014400 <__ieee754_logf+0x240>)
 80143a8:	1c05      	adds	r5, r0, #0
 80143aa:	9802      	ldr	r0, [sp, #8]
 80143ac:	f7ec fc34 	bl	8000c18 <__aeabi_fmul>
 80143b0:	1c39      	adds	r1, r7, #0
 80143b2:	f7ec f8cb 	bl	800054c <__aeabi_fadd>
 80143b6:	1c01      	adds	r1, r0, #0
 80143b8:	1c30      	adds	r0, r6, #0
 80143ba:	f7ec fd53 	bl	8000e64 <__aeabi_fsub>
 80143be:	1c21      	adds	r1, r4, #0
 80143c0:	f7ec fd50 	bl	8000e64 <__aeabi_fsub>
 80143c4:	1c01      	adds	r1, r0, #0
 80143c6:	1c28      	adds	r0, r5, #0
 80143c8:	e77f      	b.n	80142ca <__ieee754_logf+0x10a>
 80143ca:	1c39      	adds	r1, r7, #0
 80143cc:	1c20      	adds	r0, r4, #0
 80143ce:	f7ec fd49 	bl	8000e64 <__aeabi_fsub>
 80143d2:	9901      	ldr	r1, [sp, #4]
 80143d4:	f7ec fc20 	bl	8000c18 <__aeabi_fmul>
 80143d8:	1c06      	adds	r6, r0, #0
 80143da:	2d00      	cmp	r5, #0
 80143dc:	d100      	bne.n	80143e0 <__ieee754_logf+0x220>
 80143de:	e75d      	b.n	801429c <__ieee754_logf+0xdc>
 80143e0:	4906      	ldr	r1, [pc, #24]	; (80143fc <__ieee754_logf+0x23c>)
 80143e2:	9802      	ldr	r0, [sp, #8]
 80143e4:	f7ec fc18 	bl	8000c18 <__aeabi_fmul>
 80143e8:	4905      	ldr	r1, [pc, #20]	; (8014400 <__ieee754_logf+0x240>)
 80143ea:	1c05      	adds	r5, r0, #0
 80143ec:	9802      	ldr	r0, [sp, #8]
 80143ee:	f7ec fc13 	bl	8000c18 <__aeabi_fmul>
 80143f2:	e7e0      	b.n	80143b6 <__ieee754_logf+0x1f6>
 80143f4:	004afb20 	.word	0x004afb20
 80143f8:	007ffff0 	.word	0x007ffff0
 80143fc:	3f317180 	.word	0x3f317180
 8014400:	3717f7d1 	.word	0x3717f7d1
 8014404:	3eaaaaab 	.word	0x3eaaaaab
 8014408:	ffcf5c30 	.word	0xffcf5c30
 801440c:	3e178897 	.word	0x3e178897
 8014410:	3e3a3325 	.word	0x3e3a3325
 8014414:	3e924925 	.word	0x3e924925
 8014418:	3f2aaaab 	.word	0x3f2aaaab
 801441c:	3e1cd04f 	.word	0x3e1cd04f
 8014420:	3e638e29 	.word	0x3e638e29
 8014424:	3ecccccd 	.word	0x3ecccccd
 8014428:	0035c288 	.word	0x0035c288

0801442c <__ieee754_powf>:
 801442c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801442e:	b08b      	sub	sp, #44	; 0x2c
 8014430:	9101      	str	r1, [sp, #4]
 8014432:	9f01      	ldr	r7, [sp, #4]
 8014434:	1c05      	adds	r5, r0, #0
 8014436:	007b      	lsls	r3, r7, #1
 8014438:	9003      	str	r0, [sp, #12]
 801443a:	085e      	lsrs	r6, r3, #1
 801443c:	2b00      	cmp	r3, #0
 801443e:	d10d      	bne.n	801445c <__ieee754_powf+0x30>
 8014440:	2380      	movs	r3, #128	; 0x80
 8014442:	03db      	lsls	r3, r3, #15
 8014444:	4043      	eors	r3, r0
 8014446:	4a96      	ldr	r2, [pc, #600]	; (80146a0 <__ieee754_powf+0x274>)
 8014448:	005b      	lsls	r3, r3, #1
 801444a:	4293      	cmp	r3, r2
 801444c:	d800      	bhi.n	8014450 <__ieee754_powf+0x24>
 801444e:	e319      	b.n	8014a84 <__ieee754_powf+0x658>
 8014450:	9901      	ldr	r1, [sp, #4]
 8014452:	1c28      	adds	r0, r5, #0
 8014454:	f7ec f87a 	bl	800054c <__aeabi_fadd>
 8014458:	b00b      	add	sp, #44	; 0x2c
 801445a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801445c:	22ff      	movs	r2, #255	; 0xff
 801445e:	0044      	lsls	r4, r0, #1
 8014460:	0864      	lsrs	r4, r4, #1
 8014462:	05d2      	lsls	r2, r2, #23
 8014464:	4294      	cmp	r4, r2
 8014466:	dcf3      	bgt.n	8014450 <__ieee754_powf+0x24>
 8014468:	23fe      	movs	r3, #254	; 0xfe
 801446a:	059b      	lsls	r3, r3, #22
 801446c:	4296      	cmp	r6, r2
 801446e:	dd06      	ble.n	801447e <__ieee754_powf+0x52>
 8014470:	4298      	cmp	r0, r3
 8014472:	d1ed      	bne.n	8014450 <__ieee754_powf+0x24>
 8014474:	2380      	movs	r3, #128	; 0x80
 8014476:	9a01      	ldr	r2, [sp, #4]
 8014478:	03db      	lsls	r3, r3, #15
 801447a:	4053      	eors	r3, r2
 801447c:	e7e3      	b.n	8014446 <__ieee754_powf+0x1a>
 801447e:	2100      	movs	r1, #0
 8014480:	9102      	str	r1, [sp, #8]
 8014482:	2800      	cmp	r0, #0
 8014484:	da22      	bge.n	80144cc <__ieee754_powf+0xa0>
 8014486:	2197      	movs	r1, #151	; 0x97
 8014488:	05c9      	lsls	r1, r1, #23
 801448a:	428e      	cmp	r6, r1
 801448c:	da1c      	bge.n	80144c8 <__ieee754_powf+0x9c>
 801448e:	429e      	cmp	r6, r3
 8014490:	db0d      	blt.n	80144ae <__ieee754_powf+0x82>
 8014492:	2396      	movs	r3, #150	; 0x96
 8014494:	15f2      	asrs	r2, r6, #23
 8014496:	1a9a      	subs	r2, r3, r2
 8014498:	0033      	movs	r3, r6
 801449a:	4113      	asrs	r3, r2
 801449c:	0019      	movs	r1, r3
 801449e:	4091      	lsls	r1, r2
 80144a0:	42b1      	cmp	r1, r6
 80144a2:	d104      	bne.n	80144ae <__ieee754_powf+0x82>
 80144a4:	2201      	movs	r2, #1
 80144a6:	4013      	ands	r3, r2
 80144a8:	1892      	adds	r2, r2, r2
 80144aa:	1ad3      	subs	r3, r2, r3
 80144ac:	9302      	str	r3, [sp, #8]
 80144ae:	23fe      	movs	r3, #254	; 0xfe
 80144b0:	059b      	lsls	r3, r3, #22
 80144b2:	429e      	cmp	r6, r3
 80144b4:	d11e      	bne.n	80144f4 <__ieee754_powf+0xc8>
 80144b6:	1c28      	adds	r0, r5, #0
 80144b8:	2f00      	cmp	r7, #0
 80144ba:	dacd      	bge.n	8014458 <__ieee754_powf+0x2c>
 80144bc:	20fe      	movs	r0, #254	; 0xfe
 80144be:	1c29      	adds	r1, r5, #0
 80144c0:	0580      	lsls	r0, r0, #22
 80144c2:	f7ec f9e1 	bl	8000888 <__aeabi_fdiv>
 80144c6:	e7c7      	b.n	8014458 <__ieee754_powf+0x2c>
 80144c8:	2102      	movs	r1, #2
 80144ca:	9102      	str	r1, [sp, #8]
 80144cc:	4296      	cmp	r6, r2
 80144ce:	d1ee      	bne.n	80144ae <__ieee754_powf+0x82>
 80144d0:	429c      	cmp	r4, r3
 80144d2:	d100      	bne.n	80144d6 <__ieee754_powf+0xaa>
 80144d4:	e2d6      	b.n	8014a84 <__ieee754_powf+0x658>
 80144d6:	dd04      	ble.n	80144e2 <__ieee754_powf+0xb6>
 80144d8:	9801      	ldr	r0, [sp, #4]
 80144da:	2f00      	cmp	r7, #0
 80144dc:	dabc      	bge.n	8014458 <__ieee754_powf+0x2c>
 80144de:	2000      	movs	r0, #0
 80144e0:	e7ba      	b.n	8014458 <__ieee754_powf+0x2c>
 80144e2:	2f00      	cmp	r7, #0
 80144e4:	dafb      	bge.n	80144de <__ieee754_powf+0xb2>
 80144e6:	2280      	movs	r2, #128	; 0x80
 80144e8:	0612      	lsls	r2, r2, #24
 80144ea:	4694      	mov	ip, r2
 80144ec:	9b01      	ldr	r3, [sp, #4]
 80144ee:	4463      	add	r3, ip
 80144f0:	0018      	movs	r0, r3
 80144f2:	e7b1      	b.n	8014458 <__ieee754_powf+0x2c>
 80144f4:	2380      	movs	r3, #128	; 0x80
 80144f6:	05db      	lsls	r3, r3, #23
 80144f8:	429f      	cmp	r7, r3
 80144fa:	d104      	bne.n	8014506 <__ieee754_powf+0xda>
 80144fc:	1c29      	adds	r1, r5, #0
 80144fe:	1c28      	adds	r0, r5, #0
 8014500:	f7ec fb8a 	bl	8000c18 <__aeabi_fmul>
 8014504:	e7a8      	b.n	8014458 <__ieee754_powf+0x2c>
 8014506:	23fc      	movs	r3, #252	; 0xfc
 8014508:	1c28      	adds	r0, r5, #0
 801450a:	059b      	lsls	r3, r3, #22
 801450c:	429f      	cmp	r7, r3
 801450e:	d104      	bne.n	801451a <__ieee754_powf+0xee>
 8014510:	2d00      	cmp	r5, #0
 8014512:	db02      	blt.n	801451a <__ieee754_powf+0xee>
 8014514:	f000 faf0 	bl	8014af8 <__ieee754_sqrtf>
 8014518:	e79e      	b.n	8014458 <__ieee754_powf+0x2c>
 801451a:	f000 fb66 	bl	8014bea <fabsf>
 801451e:	2c00      	cmp	r4, #0
 8014520:	d005      	beq.n	801452e <__ieee754_powf+0x102>
 8014522:	22fe      	movs	r2, #254	; 0xfe
 8014524:	00ab      	lsls	r3, r5, #2
 8014526:	089b      	lsrs	r3, r3, #2
 8014528:	0592      	lsls	r2, r2, #22
 801452a:	4293      	cmp	r3, r2
 801452c:	d11c      	bne.n	8014568 <__ieee754_powf+0x13c>
 801452e:	2f00      	cmp	r7, #0
 8014530:	da04      	bge.n	801453c <__ieee754_powf+0x110>
 8014532:	1c01      	adds	r1, r0, #0
 8014534:	20fe      	movs	r0, #254	; 0xfe
 8014536:	0580      	lsls	r0, r0, #22
 8014538:	f7ec f9a6 	bl	8000888 <__aeabi_fdiv>
 801453c:	9b03      	ldr	r3, [sp, #12]
 801453e:	2b00      	cmp	r3, #0
 8014540:	db00      	blt.n	8014544 <__ieee754_powf+0x118>
 8014542:	e789      	b.n	8014458 <__ieee754_powf+0x2c>
 8014544:	4b57      	ldr	r3, [pc, #348]	; (80146a4 <__ieee754_powf+0x278>)
 8014546:	18e4      	adds	r4, r4, r3
 8014548:	9b02      	ldr	r3, [sp, #8]
 801454a:	431c      	orrs	r4, r3
 801454c:	d104      	bne.n	8014558 <__ieee754_powf+0x12c>
 801454e:	1c01      	adds	r1, r0, #0
 8014550:	f7ec fc88 	bl	8000e64 <__aeabi_fsub>
 8014554:	1c01      	adds	r1, r0, #0
 8014556:	e7b4      	b.n	80144c2 <__ieee754_powf+0x96>
 8014558:	9b02      	ldr	r3, [sp, #8]
 801455a:	2b01      	cmp	r3, #1
 801455c:	d000      	beq.n	8014560 <__ieee754_powf+0x134>
 801455e:	e77b      	b.n	8014458 <__ieee754_powf+0x2c>
 8014560:	2380      	movs	r3, #128	; 0x80
 8014562:	061b      	lsls	r3, r3, #24
 8014564:	18c0      	adds	r0, r0, r3
 8014566:	e777      	b.n	8014458 <__ieee754_powf+0x2c>
 8014568:	0feb      	lsrs	r3, r5, #31
 801456a:	3b01      	subs	r3, #1
 801456c:	9306      	str	r3, [sp, #24]
 801456e:	9a06      	ldr	r2, [sp, #24]
 8014570:	9b02      	ldr	r3, [sp, #8]
 8014572:	4313      	orrs	r3, r2
 8014574:	d102      	bne.n	801457c <__ieee754_powf+0x150>
 8014576:	1c29      	adds	r1, r5, #0
 8014578:	1c28      	adds	r0, r5, #0
 801457a:	e7e9      	b.n	8014550 <__ieee754_powf+0x124>
 801457c:	239a      	movs	r3, #154	; 0x9a
 801457e:	05db      	lsls	r3, r3, #23
 8014580:	429e      	cmp	r6, r3
 8014582:	dc00      	bgt.n	8014586 <__ieee754_powf+0x15a>
 8014584:	e09e      	b.n	80146c4 <__ieee754_powf+0x298>
 8014586:	4b48      	ldr	r3, [pc, #288]	; (80146a8 <__ieee754_powf+0x27c>)
 8014588:	429c      	cmp	r4, r3
 801458a:	dc05      	bgt.n	8014598 <__ieee754_powf+0x16c>
 801458c:	2f00      	cmp	r7, #0
 801458e:	da08      	bge.n	80145a2 <__ieee754_powf+0x176>
 8014590:	2000      	movs	r0, #0
 8014592:	f000 fb24 	bl	8014bde <__math_oflowf>
 8014596:	e75f      	b.n	8014458 <__ieee754_powf+0x2c>
 8014598:	4b44      	ldr	r3, [pc, #272]	; (80146ac <__ieee754_powf+0x280>)
 801459a:	429c      	cmp	r4, r3
 801459c:	dd05      	ble.n	80145aa <__ieee754_powf+0x17e>
 801459e:	2f00      	cmp	r7, #0
 80145a0:	dcf6      	bgt.n	8014590 <__ieee754_powf+0x164>
 80145a2:	2000      	movs	r0, #0
 80145a4:	f000 fb15 	bl	8014bd2 <__math_uflowf>
 80145a8:	e756      	b.n	8014458 <__ieee754_powf+0x2c>
 80145aa:	21fe      	movs	r1, #254	; 0xfe
 80145ac:	0589      	lsls	r1, r1, #22
 80145ae:	f7ec fc59 	bl	8000e64 <__aeabi_fsub>
 80145b2:	493f      	ldr	r1, [pc, #252]	; (80146b0 <__ieee754_powf+0x284>)
 80145b4:	1c04      	adds	r4, r0, #0
 80145b6:	f7ec fb2f 	bl	8000c18 <__aeabi_fmul>
 80145ba:	493e      	ldr	r1, [pc, #248]	; (80146b4 <__ieee754_powf+0x288>)
 80145bc:	1c05      	adds	r5, r0, #0
 80145be:	1c20      	adds	r0, r4, #0
 80145c0:	f7ec fb2a 	bl	8000c18 <__aeabi_fmul>
 80145c4:	21fa      	movs	r1, #250	; 0xfa
 80145c6:	1c06      	adds	r6, r0, #0
 80145c8:	0589      	lsls	r1, r1, #22
 80145ca:	1c20      	adds	r0, r4, #0
 80145cc:	f7ec fb24 	bl	8000c18 <__aeabi_fmul>
 80145d0:	1c01      	adds	r1, r0, #0
 80145d2:	4839      	ldr	r0, [pc, #228]	; (80146b8 <__ieee754_powf+0x28c>)
 80145d4:	f7ec fc46 	bl	8000e64 <__aeabi_fsub>
 80145d8:	1c21      	adds	r1, r4, #0
 80145da:	f7ec fb1d 	bl	8000c18 <__aeabi_fmul>
 80145de:	1c01      	adds	r1, r0, #0
 80145e0:	20fc      	movs	r0, #252	; 0xfc
 80145e2:	0580      	lsls	r0, r0, #22
 80145e4:	f7ec fc3e 	bl	8000e64 <__aeabi_fsub>
 80145e8:	1c21      	adds	r1, r4, #0
 80145ea:	1c07      	adds	r7, r0, #0
 80145ec:	1c20      	adds	r0, r4, #0
 80145ee:	f7ec fb13 	bl	8000c18 <__aeabi_fmul>
 80145f2:	1c01      	adds	r1, r0, #0
 80145f4:	1c38      	adds	r0, r7, #0
 80145f6:	f7ec fb0f 	bl	8000c18 <__aeabi_fmul>
 80145fa:	4930      	ldr	r1, [pc, #192]	; (80146bc <__ieee754_powf+0x290>)
 80145fc:	f7ec fb0c 	bl	8000c18 <__aeabi_fmul>
 8014600:	1c01      	adds	r1, r0, #0
 8014602:	1c30      	adds	r0, r6, #0
 8014604:	f7ec fc2e 	bl	8000e64 <__aeabi_fsub>
 8014608:	1c01      	adds	r1, r0, #0
 801460a:	1c06      	adds	r6, r0, #0
 801460c:	1c28      	adds	r0, r5, #0
 801460e:	f7eb ff9d 	bl	800054c <__aeabi_fadd>
 8014612:	0b04      	lsrs	r4, r0, #12
 8014614:	0324      	lsls	r4, r4, #12
 8014616:	1c29      	adds	r1, r5, #0
 8014618:	1c20      	adds	r0, r4, #0
 801461a:	f7ec fc23 	bl	8000e64 <__aeabi_fsub>
 801461e:	1c01      	adds	r1, r0, #0
 8014620:	1c30      	adds	r0, r6, #0
 8014622:	f7ec fc1f 	bl	8000e64 <__aeabi_fsub>
 8014626:	9b02      	ldr	r3, [sp, #8]
 8014628:	9a06      	ldr	r2, [sp, #24]
 801462a:	3b01      	subs	r3, #1
 801462c:	1c06      	adds	r6, r0, #0
 801462e:	4313      	orrs	r3, r2
 8014630:	d000      	beq.n	8014634 <__ieee754_powf+0x208>
 8014632:	e154      	b.n	80148de <__ieee754_powf+0x4b2>
 8014634:	4f22      	ldr	r7, [pc, #136]	; (80146c0 <__ieee754_powf+0x294>)
 8014636:	9b01      	ldr	r3, [sp, #4]
 8014638:	9801      	ldr	r0, [sp, #4]
 801463a:	0b1d      	lsrs	r5, r3, #12
 801463c:	032d      	lsls	r5, r5, #12
 801463e:	1c29      	adds	r1, r5, #0
 8014640:	f7ec fc10 	bl	8000e64 <__aeabi_fsub>
 8014644:	1c21      	adds	r1, r4, #0
 8014646:	f7ec fae7 	bl	8000c18 <__aeabi_fmul>
 801464a:	9901      	ldr	r1, [sp, #4]
 801464c:	9002      	str	r0, [sp, #8]
 801464e:	1c30      	adds	r0, r6, #0
 8014650:	f7ec fae2 	bl	8000c18 <__aeabi_fmul>
 8014654:	1c01      	adds	r1, r0, #0
 8014656:	9802      	ldr	r0, [sp, #8]
 8014658:	f7eb ff78 	bl	800054c <__aeabi_fadd>
 801465c:	1c29      	adds	r1, r5, #0
 801465e:	1c06      	adds	r6, r0, #0
 8014660:	1c20      	adds	r0, r4, #0
 8014662:	f7ec fad9 	bl	8000c18 <__aeabi_fmul>
 8014666:	9003      	str	r0, [sp, #12]
 8014668:	1c01      	adds	r1, r0, #0
 801466a:	1c05      	adds	r5, r0, #0
 801466c:	1c30      	adds	r0, r6, #0
 801466e:	f7eb ff6d 	bl	800054c <__aeabi_fadd>
 8014672:	9002      	str	r0, [sp, #8]
 8014674:	9b02      	ldr	r3, [sp, #8]
 8014676:	9304      	str	r3, [sp, #16]
 8014678:	005b      	lsls	r3, r3, #1
 801467a:	085b      	lsrs	r3, r3, #1
 801467c:	9301      	str	r3, [sp, #4]
 801467e:	9b04      	ldr	r3, [sp, #16]
 8014680:	2b00      	cmp	r3, #0
 8014682:	dc00      	bgt.n	8014686 <__ieee754_powf+0x25a>
 8014684:	e160      	b.n	8014948 <__ieee754_powf+0x51c>
 8014686:	2386      	movs	r3, #134	; 0x86
 8014688:	9a01      	ldr	r2, [sp, #4]
 801468a:	05db      	lsls	r3, r3, #23
 801468c:	429a      	cmp	r2, r3
 801468e:	dc00      	bgt.n	8014692 <__ieee754_powf+0x266>
 8014690:	e128      	b.n	80148e4 <__ieee754_powf+0x4b8>
 8014692:	2100      	movs	r1, #0
 8014694:	1c38      	adds	r0, r7, #0
 8014696:	f7eb ff19 	bl	80004cc <__aeabi_fcmplt>
 801469a:	1e43      	subs	r3, r0, #1
 801469c:	4198      	sbcs	r0, r3
 801469e:	e778      	b.n	8014592 <__ieee754_powf+0x166>
 80146a0:	ff800000 	.word	0xff800000
 80146a4:	c0800000 	.word	0xc0800000
 80146a8:	3f7ffff3 	.word	0x3f7ffff3
 80146ac:	3f800007 	.word	0x3f800007
 80146b0:	3fb8aa00 	.word	0x3fb8aa00
 80146b4:	36eca570 	.word	0x36eca570
 80146b8:	3eaaaaab 	.word	0x3eaaaaab
 80146bc:	3fb8aa3b 	.word	0x3fb8aa3b
 80146c0:	bf800000 	.word	0xbf800000
 80146c4:	23ff      	movs	r3, #255	; 0xff
 80146c6:	05db      	lsls	r3, r3, #23
 80146c8:	2200      	movs	r2, #0
 80146ca:	422b      	tst	r3, r5
 80146cc:	d106      	bne.n	80146dc <__ieee754_powf+0x2b0>
 80146ce:	2197      	movs	r1, #151	; 0x97
 80146d0:	05c9      	lsls	r1, r1, #23
 80146d2:	f7ec faa1 	bl	8000c18 <__aeabi_fmul>
 80146d6:	2218      	movs	r2, #24
 80146d8:	0004      	movs	r4, r0
 80146da:	4252      	negs	r2, r2
 80146dc:	25fe      	movs	r5, #254	; 0xfe
 80146de:	15e3      	asrs	r3, r4, #23
 80146e0:	3b7f      	subs	r3, #127	; 0x7f
 80146e2:	189b      	adds	r3, r3, r2
 80146e4:	9305      	str	r3, [sp, #20]
 80146e6:	0264      	lsls	r4, r4, #9
 80146e8:	4be8      	ldr	r3, [pc, #928]	; (8014a8c <__ieee754_powf+0x660>)
 80146ea:	0a64      	lsrs	r4, r4, #9
 80146ec:	05ad      	lsls	r5, r5, #22
 80146ee:	2600      	movs	r6, #0
 80146f0:	4325      	orrs	r5, r4
 80146f2:	429c      	cmp	r4, r3
 80146f4:	dd09      	ble.n	801470a <__ieee754_powf+0x2de>
 80146f6:	4be6      	ldr	r3, [pc, #920]	; (8014a90 <__ieee754_powf+0x664>)
 80146f8:	3601      	adds	r6, #1
 80146fa:	429c      	cmp	r4, r3
 80146fc:	dd05      	ble.n	801470a <__ieee754_powf+0x2de>
 80146fe:	9b05      	ldr	r3, [sp, #20]
 8014700:	199b      	adds	r3, r3, r6
 8014702:	2600      	movs	r6, #0
 8014704:	9305      	str	r3, [sp, #20]
 8014706:	4be3      	ldr	r3, [pc, #908]	; (8014a94 <__ieee754_powf+0x668>)
 8014708:	18ed      	adds	r5, r5, r3
 801470a:	00b3      	lsls	r3, r6, #2
 801470c:	9307      	str	r3, [sp, #28]
 801470e:	4be2      	ldr	r3, [pc, #904]	; (8014a98 <__ieee754_powf+0x66c>)
 8014710:	00b2      	lsls	r2, r6, #2
 8014712:	58d3      	ldr	r3, [r2, r3]
 8014714:	1c28      	adds	r0, r5, #0
 8014716:	1c19      	adds	r1, r3, #0
 8014718:	9304      	str	r3, [sp, #16]
 801471a:	9509      	str	r5, [sp, #36]	; 0x24
 801471c:	f7ec fba2 	bl	8000e64 <__aeabi_fsub>
 8014720:	1c29      	adds	r1, r5, #0
 8014722:	1c04      	adds	r4, r0, #0
 8014724:	9804      	ldr	r0, [sp, #16]
 8014726:	f7eb ff11 	bl	800054c <__aeabi_fadd>
 801472a:	1c01      	adds	r1, r0, #0
 801472c:	20fe      	movs	r0, #254	; 0xfe
 801472e:	0580      	lsls	r0, r0, #22
 8014730:	f7ec f8aa 	bl	8000888 <__aeabi_fdiv>
 8014734:	1c01      	adds	r1, r0, #0
 8014736:	9008      	str	r0, [sp, #32]
 8014738:	1c20      	adds	r0, r4, #0
 801473a:	f7ec fa6d 	bl	8000c18 <__aeabi_fmul>
 801473e:	9003      	str	r0, [sp, #12]
 8014740:	9b03      	ldr	r3, [sp, #12]
 8014742:	106d      	asrs	r5, r5, #1
 8014744:	0b1f      	lsrs	r7, r3, #12
 8014746:	2380      	movs	r3, #128	; 0x80
 8014748:	059b      	lsls	r3, r3, #22
 801474a:	431d      	orrs	r5, r3
 801474c:	2380      	movs	r3, #128	; 0x80
 801474e:	02db      	lsls	r3, r3, #11
 8014750:	18ed      	adds	r5, r5, r3
 8014752:	0576      	lsls	r6, r6, #21
 8014754:	033f      	lsls	r7, r7, #12
 8014756:	19ae      	adds	r6, r5, r6
 8014758:	1c31      	adds	r1, r6, #0
 801475a:	1c38      	adds	r0, r7, #0
 801475c:	f7ec fa5c 	bl	8000c18 <__aeabi_fmul>
 8014760:	1c01      	adds	r1, r0, #0
 8014762:	1c20      	adds	r0, r4, #0
 8014764:	f7ec fb7e 	bl	8000e64 <__aeabi_fsub>
 8014768:	9904      	ldr	r1, [sp, #16]
 801476a:	1c04      	adds	r4, r0, #0
 801476c:	1c30      	adds	r0, r6, #0
 801476e:	f7ec fb79 	bl	8000e64 <__aeabi_fsub>
 8014772:	1c01      	adds	r1, r0, #0
 8014774:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014776:	f7ec fb75 	bl	8000e64 <__aeabi_fsub>
 801477a:	1c39      	adds	r1, r7, #0
 801477c:	f7ec fa4c 	bl	8000c18 <__aeabi_fmul>
 8014780:	1c01      	adds	r1, r0, #0
 8014782:	1c20      	adds	r0, r4, #0
 8014784:	f7ec fb6e 	bl	8000e64 <__aeabi_fsub>
 8014788:	9908      	ldr	r1, [sp, #32]
 801478a:	f7ec fa45 	bl	8000c18 <__aeabi_fmul>
 801478e:	9903      	ldr	r1, [sp, #12]
 8014790:	9004      	str	r0, [sp, #16]
 8014792:	1c08      	adds	r0, r1, #0
 8014794:	f7ec fa40 	bl	8000c18 <__aeabi_fmul>
 8014798:	49c0      	ldr	r1, [pc, #768]	; (8014a9c <__ieee754_powf+0x670>)
 801479a:	1c04      	adds	r4, r0, #0
 801479c:	f7ec fa3c 	bl	8000c18 <__aeabi_fmul>
 80147a0:	49bf      	ldr	r1, [pc, #764]	; (8014aa0 <__ieee754_powf+0x674>)
 80147a2:	f7eb fed3 	bl	800054c <__aeabi_fadd>
 80147a6:	1c21      	adds	r1, r4, #0
 80147a8:	f7ec fa36 	bl	8000c18 <__aeabi_fmul>
 80147ac:	49bd      	ldr	r1, [pc, #756]	; (8014aa4 <__ieee754_powf+0x678>)
 80147ae:	f7eb fecd 	bl	800054c <__aeabi_fadd>
 80147b2:	1c21      	adds	r1, r4, #0
 80147b4:	f7ec fa30 	bl	8000c18 <__aeabi_fmul>
 80147b8:	49bb      	ldr	r1, [pc, #748]	; (8014aa8 <__ieee754_powf+0x67c>)
 80147ba:	f7eb fec7 	bl	800054c <__aeabi_fadd>
 80147be:	1c21      	adds	r1, r4, #0
 80147c0:	f7ec fa2a 	bl	8000c18 <__aeabi_fmul>
 80147c4:	49b9      	ldr	r1, [pc, #740]	; (8014aac <__ieee754_powf+0x680>)
 80147c6:	f7eb fec1 	bl	800054c <__aeabi_fadd>
 80147ca:	1c21      	adds	r1, r4, #0
 80147cc:	f7ec fa24 	bl	8000c18 <__aeabi_fmul>
 80147d0:	49b7      	ldr	r1, [pc, #732]	; (8014ab0 <__ieee754_powf+0x684>)
 80147d2:	f7eb febb 	bl	800054c <__aeabi_fadd>
 80147d6:	1c21      	adds	r1, r4, #0
 80147d8:	1c05      	adds	r5, r0, #0
 80147da:	1c20      	adds	r0, r4, #0
 80147dc:	f7ec fa1c 	bl	8000c18 <__aeabi_fmul>
 80147e0:	1c01      	adds	r1, r0, #0
 80147e2:	1c28      	adds	r0, r5, #0
 80147e4:	f7ec fa18 	bl	8000c18 <__aeabi_fmul>
 80147e8:	1c39      	adds	r1, r7, #0
 80147ea:	1c04      	adds	r4, r0, #0
 80147ec:	9803      	ldr	r0, [sp, #12]
 80147ee:	f7eb fead 	bl	800054c <__aeabi_fadd>
 80147f2:	9904      	ldr	r1, [sp, #16]
 80147f4:	f7ec fa10 	bl	8000c18 <__aeabi_fmul>
 80147f8:	1c21      	adds	r1, r4, #0
 80147fa:	f7eb fea7 	bl	800054c <__aeabi_fadd>
 80147fe:	1c39      	adds	r1, r7, #0
 8014800:	1c06      	adds	r6, r0, #0
 8014802:	1c38      	adds	r0, r7, #0
 8014804:	f7ec fa08 	bl	8000c18 <__aeabi_fmul>
 8014808:	49aa      	ldr	r1, [pc, #680]	; (8014ab4 <__ieee754_powf+0x688>)
 801480a:	9008      	str	r0, [sp, #32]
 801480c:	f7eb fe9e 	bl	800054c <__aeabi_fadd>
 8014810:	1c31      	adds	r1, r6, #0
 8014812:	f7eb fe9b 	bl	800054c <__aeabi_fadd>
 8014816:	0b04      	lsrs	r4, r0, #12
 8014818:	0324      	lsls	r4, r4, #12
 801481a:	1c21      	adds	r1, r4, #0
 801481c:	1c38      	adds	r0, r7, #0
 801481e:	f7ec f9fb 	bl	8000c18 <__aeabi_fmul>
 8014822:	49a4      	ldr	r1, [pc, #656]	; (8014ab4 <__ieee754_powf+0x688>)
 8014824:	1c05      	adds	r5, r0, #0
 8014826:	1c20      	adds	r0, r4, #0
 8014828:	f7ec fb1c 	bl	8000e64 <__aeabi_fsub>
 801482c:	9908      	ldr	r1, [sp, #32]
 801482e:	f7ec fb19 	bl	8000e64 <__aeabi_fsub>
 8014832:	1c01      	adds	r1, r0, #0
 8014834:	1c30      	adds	r0, r6, #0
 8014836:	f7ec fb15 	bl	8000e64 <__aeabi_fsub>
 801483a:	9903      	ldr	r1, [sp, #12]
 801483c:	f7ec f9ec 	bl	8000c18 <__aeabi_fmul>
 8014840:	1c21      	adds	r1, r4, #0
 8014842:	1c06      	adds	r6, r0, #0
 8014844:	9804      	ldr	r0, [sp, #16]
 8014846:	f7ec f9e7 	bl	8000c18 <__aeabi_fmul>
 801484a:	1c01      	adds	r1, r0, #0
 801484c:	1c30      	adds	r0, r6, #0
 801484e:	f7eb fe7d 	bl	800054c <__aeabi_fadd>
 8014852:	1c06      	adds	r6, r0, #0
 8014854:	1c01      	adds	r1, r0, #0
 8014856:	1c28      	adds	r0, r5, #0
 8014858:	f7eb fe78 	bl	800054c <__aeabi_fadd>
 801485c:	0b04      	lsrs	r4, r0, #12
 801485e:	0324      	lsls	r4, r4, #12
 8014860:	4995      	ldr	r1, [pc, #596]	; (8014ab8 <__ieee754_powf+0x68c>)
 8014862:	1c20      	adds	r0, r4, #0
 8014864:	f7ec f9d8 	bl	8000c18 <__aeabi_fmul>
 8014868:	1c29      	adds	r1, r5, #0
 801486a:	9003      	str	r0, [sp, #12]
 801486c:	1c20      	adds	r0, r4, #0
 801486e:	f7ec faf9 	bl	8000e64 <__aeabi_fsub>
 8014872:	1c01      	adds	r1, r0, #0
 8014874:	1c30      	adds	r0, r6, #0
 8014876:	f7ec faf5 	bl	8000e64 <__aeabi_fsub>
 801487a:	4990      	ldr	r1, [pc, #576]	; (8014abc <__ieee754_powf+0x690>)
 801487c:	f7ec f9cc 	bl	8000c18 <__aeabi_fmul>
 8014880:	498f      	ldr	r1, [pc, #572]	; (8014ac0 <__ieee754_powf+0x694>)
 8014882:	1c05      	adds	r5, r0, #0
 8014884:	1c20      	adds	r0, r4, #0
 8014886:	f7ec f9c7 	bl	8000c18 <__aeabi_fmul>
 801488a:	1c01      	adds	r1, r0, #0
 801488c:	1c28      	adds	r0, r5, #0
 801488e:	f7eb fe5d 	bl	800054c <__aeabi_fadd>
 8014892:	4b8c      	ldr	r3, [pc, #560]	; (8014ac4 <__ieee754_powf+0x698>)
 8014894:	9a07      	ldr	r2, [sp, #28]
 8014896:	58d1      	ldr	r1, [r2, r3]
 8014898:	f7eb fe58 	bl	800054c <__aeabi_fadd>
 801489c:	1c05      	adds	r5, r0, #0
 801489e:	9805      	ldr	r0, [sp, #20]
 80148a0:	f7ec fcc4 	bl	800122c <__aeabi_i2f>
 80148a4:	4b88      	ldr	r3, [pc, #544]	; (8014ac8 <__ieee754_powf+0x69c>)
 80148a6:	9a07      	ldr	r2, [sp, #28]
 80148a8:	1c06      	adds	r6, r0, #0
 80148aa:	58d7      	ldr	r7, [r2, r3]
 80148ac:	1c29      	adds	r1, r5, #0
 80148ae:	9803      	ldr	r0, [sp, #12]
 80148b0:	f7eb fe4c 	bl	800054c <__aeabi_fadd>
 80148b4:	1c39      	adds	r1, r7, #0
 80148b6:	f7eb fe49 	bl	800054c <__aeabi_fadd>
 80148ba:	1c31      	adds	r1, r6, #0
 80148bc:	f7eb fe46 	bl	800054c <__aeabi_fadd>
 80148c0:	0b04      	lsrs	r4, r0, #12
 80148c2:	0324      	lsls	r4, r4, #12
 80148c4:	1c31      	adds	r1, r6, #0
 80148c6:	1c20      	adds	r0, r4, #0
 80148c8:	f7ec facc 	bl	8000e64 <__aeabi_fsub>
 80148cc:	1c39      	adds	r1, r7, #0
 80148ce:	f7ec fac9 	bl	8000e64 <__aeabi_fsub>
 80148d2:	9903      	ldr	r1, [sp, #12]
 80148d4:	f7ec fac6 	bl	8000e64 <__aeabi_fsub>
 80148d8:	1c01      	adds	r1, r0, #0
 80148da:	1c28      	adds	r0, r5, #0
 80148dc:	e6a1      	b.n	8014622 <__ieee754_powf+0x1f6>
 80148de:	27fe      	movs	r7, #254	; 0xfe
 80148e0:	05bf      	lsls	r7, r7, #22
 80148e2:	e6a8      	b.n	8014636 <__ieee754_powf+0x20a>
 80148e4:	9a01      	ldr	r2, [sp, #4]
 80148e6:	429a      	cmp	r2, r3
 80148e8:	d146      	bne.n	8014978 <__ieee754_powf+0x54c>
 80148ea:	4978      	ldr	r1, [pc, #480]	; (8014acc <__ieee754_powf+0x6a0>)
 80148ec:	1c30      	adds	r0, r6, #0
 80148ee:	f7eb fe2d 	bl	800054c <__aeabi_fadd>
 80148f2:	1c29      	adds	r1, r5, #0
 80148f4:	1c04      	adds	r4, r0, #0
 80148f6:	9802      	ldr	r0, [sp, #8]
 80148f8:	f7ec fab4 	bl	8000e64 <__aeabi_fsub>
 80148fc:	1c01      	adds	r1, r0, #0
 80148fe:	1c20      	adds	r0, r4, #0
 8014900:	f7eb fdf8 	bl	80004f4 <__aeabi_fcmpgt>
 8014904:	2800      	cmp	r0, #0
 8014906:	d000      	beq.n	801490a <__ieee754_powf+0x4de>
 8014908:	e6c3      	b.n	8014692 <__ieee754_powf+0x266>
 801490a:	2480      	movs	r4, #128	; 0x80
 801490c:	0424      	lsls	r4, r4, #16
 801490e:	0020      	movs	r0, r4
 8014910:	9b01      	ldr	r3, [sp, #4]
 8014912:	4a6f      	ldr	r2, [pc, #444]	; (8014ad0 <__ieee754_powf+0x6a4>)
 8014914:	15db      	asrs	r3, r3, #23
 8014916:	3b7e      	subs	r3, #126	; 0x7e
 8014918:	4118      	asrs	r0, r3
 801491a:	9b02      	ldr	r3, [sp, #8]
 801491c:	18c0      	adds	r0, r0, r3
 801491e:	15c3      	asrs	r3, r0, #23
 8014920:	b2db      	uxtb	r3, r3
 8014922:	3b7f      	subs	r3, #127	; 0x7f
 8014924:	411a      	asrs	r2, r3
 8014926:	0001      	movs	r1, r0
 8014928:	4391      	bics	r1, r2
 801492a:	2217      	movs	r2, #23
 801492c:	0240      	lsls	r0, r0, #9
 801492e:	0a40      	lsrs	r0, r0, #9
 8014930:	1ad3      	subs	r3, r2, r3
 8014932:	4304      	orrs	r4, r0
 8014934:	411c      	asrs	r4, r3
 8014936:	9b04      	ldr	r3, [sp, #16]
 8014938:	2b00      	cmp	r3, #0
 801493a:	da00      	bge.n	801493e <__ieee754_powf+0x512>
 801493c:	4264      	negs	r4, r4
 801493e:	1c28      	adds	r0, r5, #0
 8014940:	f7ec fa90 	bl	8000e64 <__aeabi_fsub>
 8014944:	9003      	str	r0, [sp, #12]
 8014946:	e01d      	b.n	8014984 <__ieee754_powf+0x558>
 8014948:	4b62      	ldr	r3, [pc, #392]	; (8014ad4 <__ieee754_powf+0x6a8>)
 801494a:	9a01      	ldr	r2, [sp, #4]
 801494c:	429a      	cmp	r2, r3
 801494e:	dd06      	ble.n	801495e <__ieee754_powf+0x532>
 8014950:	2100      	movs	r1, #0
 8014952:	1c38      	adds	r0, r7, #0
 8014954:	f7eb fdba 	bl	80004cc <__aeabi_fcmplt>
 8014958:	1e43      	subs	r3, r0, #1
 801495a:	4198      	sbcs	r0, r3
 801495c:	e622      	b.n	80145a4 <__ieee754_powf+0x178>
 801495e:	9a01      	ldr	r2, [sp, #4]
 8014960:	429a      	cmp	r2, r3
 8014962:	d109      	bne.n	8014978 <__ieee754_powf+0x54c>
 8014964:	1c29      	adds	r1, r5, #0
 8014966:	9802      	ldr	r0, [sp, #8]
 8014968:	f7ec fa7c 	bl	8000e64 <__aeabi_fsub>
 801496c:	1c31      	adds	r1, r6, #0
 801496e:	f7eb fdcb 	bl	8000508 <__aeabi_fcmpge>
 8014972:	2800      	cmp	r0, #0
 8014974:	d0c9      	beq.n	801490a <__ieee754_powf+0x4de>
 8014976:	e7eb      	b.n	8014950 <__ieee754_powf+0x524>
 8014978:	23fc      	movs	r3, #252	; 0xfc
 801497a:	9a01      	ldr	r2, [sp, #4]
 801497c:	2400      	movs	r4, #0
 801497e:	059b      	lsls	r3, r3, #22
 8014980:	429a      	cmp	r2, r3
 8014982:	dcc2      	bgt.n	801490a <__ieee754_powf+0x4de>
 8014984:	1c31      	adds	r1, r6, #0
 8014986:	9803      	ldr	r0, [sp, #12]
 8014988:	f7eb fde0 	bl	800054c <__aeabi_fadd>
 801498c:	0b05      	lsrs	r5, r0, #12
 801498e:	032d      	lsls	r5, r5, #12
 8014990:	4951      	ldr	r1, [pc, #324]	; (8014ad8 <__ieee754_powf+0x6ac>)
 8014992:	1c28      	adds	r0, r5, #0
 8014994:	f7ec f940 	bl	8000c18 <__aeabi_fmul>
 8014998:	9903      	ldr	r1, [sp, #12]
 801499a:	9001      	str	r0, [sp, #4]
 801499c:	1c28      	adds	r0, r5, #0
 801499e:	f7ec fa61 	bl	8000e64 <__aeabi_fsub>
 80149a2:	1c01      	adds	r1, r0, #0
 80149a4:	1c30      	adds	r0, r6, #0
 80149a6:	f7ec fa5d 	bl	8000e64 <__aeabi_fsub>
 80149aa:	494c      	ldr	r1, [pc, #304]	; (8014adc <__ieee754_powf+0x6b0>)
 80149ac:	f7ec f934 	bl	8000c18 <__aeabi_fmul>
 80149b0:	494b      	ldr	r1, [pc, #300]	; (8014ae0 <__ieee754_powf+0x6b4>)
 80149b2:	1c06      	adds	r6, r0, #0
 80149b4:	1c28      	adds	r0, r5, #0
 80149b6:	f7ec f92f 	bl	8000c18 <__aeabi_fmul>
 80149ba:	1c01      	adds	r1, r0, #0
 80149bc:	1c30      	adds	r0, r6, #0
 80149be:	f7eb fdc5 	bl	800054c <__aeabi_fadd>
 80149c2:	1c06      	adds	r6, r0, #0
 80149c4:	1c01      	adds	r1, r0, #0
 80149c6:	9801      	ldr	r0, [sp, #4]
 80149c8:	f7eb fdc0 	bl	800054c <__aeabi_fadd>
 80149cc:	9901      	ldr	r1, [sp, #4]
 80149ce:	1c05      	adds	r5, r0, #0
 80149d0:	f7ec fa48 	bl	8000e64 <__aeabi_fsub>
 80149d4:	1c01      	adds	r1, r0, #0
 80149d6:	1c30      	adds	r0, r6, #0
 80149d8:	f7ec fa44 	bl	8000e64 <__aeabi_fsub>
 80149dc:	1c29      	adds	r1, r5, #0
 80149de:	9001      	str	r0, [sp, #4]
 80149e0:	1c28      	adds	r0, r5, #0
 80149e2:	f7ec f919 	bl	8000c18 <__aeabi_fmul>
 80149e6:	493f      	ldr	r1, [pc, #252]	; (8014ae4 <__ieee754_powf+0x6b8>)
 80149e8:	1c06      	adds	r6, r0, #0
 80149ea:	f7ec f915 	bl	8000c18 <__aeabi_fmul>
 80149ee:	493e      	ldr	r1, [pc, #248]	; (8014ae8 <__ieee754_powf+0x6bc>)
 80149f0:	f7ec fa38 	bl	8000e64 <__aeabi_fsub>
 80149f4:	1c31      	adds	r1, r6, #0
 80149f6:	f7ec f90f 	bl	8000c18 <__aeabi_fmul>
 80149fa:	493c      	ldr	r1, [pc, #240]	; (8014aec <__ieee754_powf+0x6c0>)
 80149fc:	f7eb fda6 	bl	800054c <__aeabi_fadd>
 8014a00:	1c31      	adds	r1, r6, #0
 8014a02:	f7ec f909 	bl	8000c18 <__aeabi_fmul>
 8014a06:	493a      	ldr	r1, [pc, #232]	; (8014af0 <__ieee754_powf+0x6c4>)
 8014a08:	f7ec fa2c 	bl	8000e64 <__aeabi_fsub>
 8014a0c:	1c31      	adds	r1, r6, #0
 8014a0e:	f7ec f903 	bl	8000c18 <__aeabi_fmul>
 8014a12:	4938      	ldr	r1, [pc, #224]	; (8014af4 <__ieee754_powf+0x6c8>)
 8014a14:	f7eb fd9a 	bl	800054c <__aeabi_fadd>
 8014a18:	1c31      	adds	r1, r6, #0
 8014a1a:	f7ec f8fd 	bl	8000c18 <__aeabi_fmul>
 8014a1e:	1c01      	adds	r1, r0, #0
 8014a20:	1c28      	adds	r0, r5, #0
 8014a22:	f7ec fa1f 	bl	8000e64 <__aeabi_fsub>
 8014a26:	1c06      	adds	r6, r0, #0
 8014a28:	1c01      	adds	r1, r0, #0
 8014a2a:	1c28      	adds	r0, r5, #0
 8014a2c:	f7ec f8f4 	bl	8000c18 <__aeabi_fmul>
 8014a30:	2180      	movs	r1, #128	; 0x80
 8014a32:	9002      	str	r0, [sp, #8]
 8014a34:	05c9      	lsls	r1, r1, #23
 8014a36:	1c30      	adds	r0, r6, #0
 8014a38:	f7ec fa14 	bl	8000e64 <__aeabi_fsub>
 8014a3c:	1c01      	adds	r1, r0, #0
 8014a3e:	9802      	ldr	r0, [sp, #8]
 8014a40:	f7eb ff22 	bl	8000888 <__aeabi_fdiv>
 8014a44:	9901      	ldr	r1, [sp, #4]
 8014a46:	1c06      	adds	r6, r0, #0
 8014a48:	1c28      	adds	r0, r5, #0
 8014a4a:	f7ec f8e5 	bl	8000c18 <__aeabi_fmul>
 8014a4e:	9901      	ldr	r1, [sp, #4]
 8014a50:	f7eb fd7c 	bl	800054c <__aeabi_fadd>
 8014a54:	1c01      	adds	r1, r0, #0
 8014a56:	1c30      	adds	r0, r6, #0
 8014a58:	f7ec fa04 	bl	8000e64 <__aeabi_fsub>
 8014a5c:	1c29      	adds	r1, r5, #0
 8014a5e:	f7ec fa01 	bl	8000e64 <__aeabi_fsub>
 8014a62:	1c01      	adds	r1, r0, #0
 8014a64:	20fe      	movs	r0, #254	; 0xfe
 8014a66:	0580      	lsls	r0, r0, #22
 8014a68:	f7ec f9fc 	bl	8000e64 <__aeabi_fsub>
 8014a6c:	05e3      	lsls	r3, r4, #23
 8014a6e:	181b      	adds	r3, r3, r0
 8014a70:	15da      	asrs	r2, r3, #23
 8014a72:	2a00      	cmp	r2, #0
 8014a74:	dc04      	bgt.n	8014a80 <__ieee754_powf+0x654>
 8014a76:	0021      	movs	r1, r4
 8014a78:	f000 f8c8 	bl	8014c0c <scalbnf>
 8014a7c:	1c39      	adds	r1, r7, #0
 8014a7e:	e53f      	b.n	8014500 <__ieee754_powf+0xd4>
 8014a80:	1c18      	adds	r0, r3, #0
 8014a82:	e7fb      	b.n	8014a7c <__ieee754_powf+0x650>
 8014a84:	20fe      	movs	r0, #254	; 0xfe
 8014a86:	0580      	lsls	r0, r0, #22
 8014a88:	e4e6      	b.n	8014458 <__ieee754_powf+0x2c>
 8014a8a:	46c0      	nop			; (mov r8, r8)
 8014a8c:	001cc471 	.word	0x001cc471
 8014a90:	005db3d6 	.word	0x005db3d6
 8014a94:	ff800000 	.word	0xff800000
 8014a98:	08015654 	.word	0x08015654
 8014a9c:	3e53f142 	.word	0x3e53f142
 8014aa0:	3e6c3255 	.word	0x3e6c3255
 8014aa4:	3e8ba305 	.word	0x3e8ba305
 8014aa8:	3eaaaaab 	.word	0x3eaaaaab
 8014aac:	3edb6db7 	.word	0x3edb6db7
 8014ab0:	3f19999a 	.word	0x3f19999a
 8014ab4:	40400000 	.word	0x40400000
 8014ab8:	3f763800 	.word	0x3f763800
 8014abc:	3f76384f 	.word	0x3f76384f
 8014ac0:	369dc3a0 	.word	0x369dc3a0
 8014ac4:	08015664 	.word	0x08015664
 8014ac8:	0801565c 	.word	0x0801565c
 8014acc:	3338aa3c 	.word	0x3338aa3c
 8014ad0:	007fffff 	.word	0x007fffff
 8014ad4:	43160000 	.word	0x43160000
 8014ad8:	3f317200 	.word	0x3f317200
 8014adc:	3f317218 	.word	0x3f317218
 8014ae0:	35bfbe8c 	.word	0x35bfbe8c
 8014ae4:	3331bb4c 	.word	0x3331bb4c
 8014ae8:	35ddea0e 	.word	0x35ddea0e
 8014aec:	388ab355 	.word	0x388ab355
 8014af0:	3b360b61 	.word	0x3b360b61
 8014af4:	3e2aaaab 	.word	0x3e2aaaab

08014af8 <__ieee754_sqrtf>:
 8014af8:	0042      	lsls	r2, r0, #1
 8014afa:	0003      	movs	r3, r0
 8014afc:	b570      	push	{r4, r5, r6, lr}
 8014afe:	1c04      	adds	r4, r0, #0
 8014b00:	20ff      	movs	r0, #255	; 0xff
 8014b02:	0852      	lsrs	r2, r2, #1
 8014b04:	05c0      	lsls	r0, r0, #23
 8014b06:	4282      	cmp	r2, r0
 8014b08:	d30a      	bcc.n	8014b20 <__ieee754_sqrtf+0x28>
 8014b0a:	1c21      	adds	r1, r4, #0
 8014b0c:	1c20      	adds	r0, r4, #0
 8014b0e:	f7ec f883 	bl	8000c18 <__aeabi_fmul>
 8014b12:	1c01      	adds	r1, r0, #0
 8014b14:	1c20      	adds	r0, r4, #0
 8014b16:	f7eb fd19 	bl	800054c <__aeabi_fadd>
 8014b1a:	1c04      	adds	r4, r0, #0
 8014b1c:	1c20      	adds	r0, r4, #0
 8014b1e:	bd70      	pop	{r4, r5, r6, pc}
 8014b20:	2a00      	cmp	r2, #0
 8014b22:	d0fb      	beq.n	8014b1c <__ieee754_sqrtf+0x24>
 8014b24:	2c00      	cmp	r4, #0
 8014b26:	da07      	bge.n	8014b38 <__ieee754_sqrtf+0x40>
 8014b28:	1c21      	adds	r1, r4, #0
 8014b2a:	1c20      	adds	r0, r4, #0
 8014b2c:	f7ec f99a 	bl	8000e64 <__aeabi_fsub>
 8014b30:	1c01      	adds	r1, r0, #0
 8014b32:	f7eb fea9 	bl	8000888 <__aeabi_fdiv>
 8014b36:	e7f0      	b.n	8014b1a <__ieee754_sqrtf+0x22>
 8014b38:	0022      	movs	r2, r4
 8014b3a:	15e1      	asrs	r1, r4, #23
 8014b3c:	4002      	ands	r2, r0
 8014b3e:	4204      	tst	r4, r0
 8014b40:	d02e      	beq.n	8014ba0 <__ieee754_sqrtf+0xa8>
 8014b42:	2280      	movs	r2, #128	; 0x80
 8014b44:	000c      	movs	r4, r1
 8014b46:	025b      	lsls	r3, r3, #9
 8014b48:	0a5b      	lsrs	r3, r3, #9
 8014b4a:	0412      	lsls	r2, r2, #16
 8014b4c:	3c7f      	subs	r4, #127	; 0x7f
 8014b4e:	4313      	orrs	r3, r2
 8014b50:	07ca      	lsls	r2, r1, #31
 8014b52:	d400      	bmi.n	8014b56 <__ieee754_sqrtf+0x5e>
 8014b54:	005b      	lsls	r3, r3, #1
 8014b56:	2200      	movs	r2, #0
 8014b58:	2180      	movs	r1, #128	; 0x80
 8014b5a:	2019      	movs	r0, #25
 8014b5c:	0016      	movs	r6, r2
 8014b5e:	1064      	asrs	r4, r4, #1
 8014b60:	005b      	lsls	r3, r3, #1
 8014b62:	0449      	lsls	r1, r1, #17
 8014b64:	1875      	adds	r5, r6, r1
 8014b66:	429d      	cmp	r5, r3
 8014b68:	dc02      	bgt.n	8014b70 <__ieee754_sqrtf+0x78>
 8014b6a:	186e      	adds	r6, r5, r1
 8014b6c:	1b5b      	subs	r3, r3, r5
 8014b6e:	1852      	adds	r2, r2, r1
 8014b70:	3801      	subs	r0, #1
 8014b72:	005b      	lsls	r3, r3, #1
 8014b74:	0849      	lsrs	r1, r1, #1
 8014b76:	2800      	cmp	r0, #0
 8014b78:	d1f4      	bne.n	8014b64 <__ieee754_sqrtf+0x6c>
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d002      	beq.n	8014b84 <__ieee754_sqrtf+0x8c>
 8014b7e:	2301      	movs	r3, #1
 8014b80:	3201      	adds	r2, #1
 8014b82:	439a      	bics	r2, r3
 8014b84:	23fc      	movs	r3, #252	; 0xfc
 8014b86:	1052      	asrs	r2, r2, #1
 8014b88:	059b      	lsls	r3, r3, #22
 8014b8a:	18d2      	adds	r2, r2, r3
 8014b8c:	05e4      	lsls	r4, r4, #23
 8014b8e:	18a4      	adds	r4, r4, r2
 8014b90:	e7c4      	b.n	8014b1c <__ieee754_sqrtf+0x24>
 8014b92:	005b      	lsls	r3, r3, #1
 8014b94:	3201      	adds	r2, #1
 8014b96:	4203      	tst	r3, r0
 8014b98:	d0fb      	beq.n	8014b92 <__ieee754_sqrtf+0x9a>
 8014b9a:	3a01      	subs	r2, #1
 8014b9c:	1a89      	subs	r1, r1, r2
 8014b9e:	e7d0      	b.n	8014b42 <__ieee754_sqrtf+0x4a>
 8014ba0:	2080      	movs	r0, #128	; 0x80
 8014ba2:	0400      	lsls	r0, r0, #16
 8014ba4:	e7f7      	b.n	8014b96 <__ieee754_sqrtf+0x9e>

08014ba6 <with_errnof>:
 8014ba6:	b570      	push	{r4, r5, r6, lr}
 8014ba8:	000d      	movs	r5, r1
 8014baa:	1c04      	adds	r4, r0, #0
 8014bac:	f7fc fa34 	bl	8011018 <__errno>
 8014bb0:	6005      	str	r5, [r0, #0]
 8014bb2:	1c20      	adds	r0, r4, #0
 8014bb4:	bd70      	pop	{r4, r5, r6, pc}

08014bb6 <xflowf>:
 8014bb6:	b510      	push	{r4, lr}
 8014bb8:	1c0b      	adds	r3, r1, #0
 8014bba:	2800      	cmp	r0, #0
 8014bbc:	d002      	beq.n	8014bc4 <xflowf+0xe>
 8014bbe:	2380      	movs	r3, #128	; 0x80
 8014bc0:	061b      	lsls	r3, r3, #24
 8014bc2:	18cb      	adds	r3, r1, r3
 8014bc4:	1c18      	adds	r0, r3, #0
 8014bc6:	f7ec f827 	bl	8000c18 <__aeabi_fmul>
 8014bca:	2122      	movs	r1, #34	; 0x22
 8014bcc:	f7ff ffeb 	bl	8014ba6 <with_errnof>
 8014bd0:	bd10      	pop	{r4, pc}

08014bd2 <__math_uflowf>:
 8014bd2:	2180      	movs	r1, #128	; 0x80
 8014bd4:	b510      	push	{r4, lr}
 8014bd6:	0549      	lsls	r1, r1, #21
 8014bd8:	f7ff ffed 	bl	8014bb6 <xflowf>
 8014bdc:	bd10      	pop	{r4, pc}

08014bde <__math_oflowf>:
 8014bde:	21e0      	movs	r1, #224	; 0xe0
 8014be0:	b510      	push	{r4, lr}
 8014be2:	05c9      	lsls	r1, r1, #23
 8014be4:	f7ff ffe7 	bl	8014bb6 <xflowf>
 8014be8:	bd10      	pop	{r4, pc}

08014bea <fabsf>:
 8014bea:	0040      	lsls	r0, r0, #1
 8014bec:	0840      	lsrs	r0, r0, #1
 8014bee:	4770      	bx	lr

08014bf0 <finitef>:
 8014bf0:	22ff      	movs	r2, #255	; 0xff
 8014bf2:	0043      	lsls	r3, r0, #1
 8014bf4:	085b      	lsrs	r3, r3, #1
 8014bf6:	2001      	movs	r0, #1
 8014bf8:	05d2      	lsls	r2, r2, #23
 8014bfa:	4293      	cmp	r3, r2
 8014bfc:	db00      	blt.n	8014c00 <finitef+0x10>
 8014bfe:	2000      	movs	r0, #0
 8014c00:	4770      	bx	lr
	...

08014c04 <nanf>:
 8014c04:	4800      	ldr	r0, [pc, #0]	; (8014c08 <nanf+0x4>)
 8014c06:	4770      	bx	lr
 8014c08:	7fc00000 	.word	0x7fc00000

08014c0c <scalbnf>:
 8014c0c:	0043      	lsls	r3, r0, #1
 8014c0e:	b570      	push	{r4, r5, r6, lr}
 8014c10:	0002      	movs	r2, r0
 8014c12:	000c      	movs	r4, r1
 8014c14:	085d      	lsrs	r5, r3, #1
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d006      	beq.n	8014c28 <scalbnf+0x1c>
 8014c1a:	21ff      	movs	r1, #255	; 0xff
 8014c1c:	05c9      	lsls	r1, r1, #23
 8014c1e:	428d      	cmp	r5, r1
 8014c20:	d303      	bcc.n	8014c2a <scalbnf+0x1e>
 8014c22:	1c01      	adds	r1, r0, #0
 8014c24:	f7eb fc92 	bl	800054c <__aeabi_fadd>
 8014c28:	bd70      	pop	{r4, r5, r6, pc}
 8014c2a:	4208      	tst	r0, r1
 8014c2c:	d116      	bne.n	8014c5c <scalbnf+0x50>
 8014c2e:	2198      	movs	r1, #152	; 0x98
 8014c30:	05c9      	lsls	r1, r1, #23
 8014c32:	f7eb fff1 	bl	8000c18 <__aeabi_fmul>
 8014c36:	4b1b      	ldr	r3, [pc, #108]	; (8014ca4 <scalbnf+0x98>)
 8014c38:	429c      	cmp	r4, r3
 8014c3a:	db29      	blt.n	8014c90 <scalbnf+0x84>
 8014c3c:	0002      	movs	r2, r0
 8014c3e:	15c3      	asrs	r3, r0, #23
 8014c40:	b2db      	uxtb	r3, r3
 8014c42:	3b19      	subs	r3, #25
 8014c44:	191b      	adds	r3, r3, r4
 8014c46:	2bfe      	cmp	r3, #254	; 0xfe
 8014c48:	dd0a      	ble.n	8014c60 <scalbnf+0x54>
 8014c4a:	4b17      	ldr	r3, [pc, #92]	; (8014ca8 <scalbnf+0x9c>)
 8014c4c:	2800      	cmp	r0, #0
 8014c4e:	da00      	bge.n	8014c52 <scalbnf+0x46>
 8014c50:	4b16      	ldr	r3, [pc, #88]	; (8014cac <scalbnf+0xa0>)
 8014c52:	4915      	ldr	r1, [pc, #84]	; (8014ca8 <scalbnf+0x9c>)
 8014c54:	1c18      	adds	r0, r3, #0
 8014c56:	f7eb ffdf 	bl	8000c18 <__aeabi_fmul>
 8014c5a:	e7e5      	b.n	8014c28 <scalbnf+0x1c>
 8014c5c:	0e1b      	lsrs	r3, r3, #24
 8014c5e:	e7f1      	b.n	8014c44 <scalbnf+0x38>
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	dd04      	ble.n	8014c6e <scalbnf+0x62>
 8014c64:	4812      	ldr	r0, [pc, #72]	; (8014cb0 <scalbnf+0xa4>)
 8014c66:	4002      	ands	r2, r0
 8014c68:	05d8      	lsls	r0, r3, #23
 8014c6a:	4310      	orrs	r0, r2
 8014c6c:	e7dc      	b.n	8014c28 <scalbnf+0x1c>
 8014c6e:	0019      	movs	r1, r3
 8014c70:	3116      	adds	r1, #22
 8014c72:	da0f      	bge.n	8014c94 <scalbnf+0x88>
 8014c74:	4a0f      	ldr	r2, [pc, #60]	; (8014cb4 <scalbnf+0xa8>)
 8014c76:	0fc3      	lsrs	r3, r0, #31
 8014c78:	4294      	cmp	r4, r2
 8014c7a:	dd05      	ble.n	8014c88 <scalbnf+0x7c>
 8014c7c:	480a      	ldr	r0, [pc, #40]	; (8014ca8 <scalbnf+0x9c>)
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d000      	beq.n	8014c84 <scalbnf+0x78>
 8014c82:	480a      	ldr	r0, [pc, #40]	; (8014cac <scalbnf+0xa0>)
 8014c84:	4908      	ldr	r1, [pc, #32]	; (8014ca8 <scalbnf+0x9c>)
 8014c86:	e7e6      	b.n	8014c56 <scalbnf+0x4a>
 8014c88:	480b      	ldr	r0, [pc, #44]	; (8014cb8 <scalbnf+0xac>)
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d000      	beq.n	8014c90 <scalbnf+0x84>
 8014c8e:	480b      	ldr	r0, [pc, #44]	; (8014cbc <scalbnf+0xb0>)
 8014c90:	4909      	ldr	r1, [pc, #36]	; (8014cb8 <scalbnf+0xac>)
 8014c92:	e7e0      	b.n	8014c56 <scalbnf+0x4a>
 8014c94:	21cc      	movs	r1, #204	; 0xcc
 8014c96:	3319      	adds	r3, #25
 8014c98:	05d8      	lsls	r0, r3, #23
 8014c9a:	4b05      	ldr	r3, [pc, #20]	; (8014cb0 <scalbnf+0xa4>)
 8014c9c:	0589      	lsls	r1, r1, #22
 8014c9e:	401a      	ands	r2, r3
 8014ca0:	4310      	orrs	r0, r2
 8014ca2:	e7d8      	b.n	8014c56 <scalbnf+0x4a>
 8014ca4:	ffff3cb0 	.word	0xffff3cb0
 8014ca8:	7149f2ca 	.word	0x7149f2ca
 8014cac:	f149f2ca 	.word	0xf149f2ca
 8014cb0:	807fffff 	.word	0x807fffff
 8014cb4:	0000c350 	.word	0x0000c350
 8014cb8:	0da24260 	.word	0x0da24260
 8014cbc:	8da24260 	.word	0x8da24260

08014cc0 <_init>:
 8014cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cc2:	46c0      	nop			; (mov r8, r8)
 8014cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014cc6:	bc08      	pop	{r3}
 8014cc8:	469e      	mov	lr, r3
 8014cca:	4770      	bx	lr

08014ccc <_fini>:
 8014ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cce:	46c0      	nop			; (mov r8, r8)
 8014cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014cd2:	bc08      	pop	{r3}
 8014cd4:	469e      	mov	lr, r3
 8014cd6:	4770      	bx	lr
